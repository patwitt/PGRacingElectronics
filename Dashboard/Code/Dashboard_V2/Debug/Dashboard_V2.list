
Dashboard_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c87c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004268  0802ca7c  0802ca7c  0003ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  08030ce4  08030ce4  00040ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000011c  080da944  080da944  000ea944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000898c8  080daa60  080daa60  000eaa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000030c  08164328  08164328  00174328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08164634  08164634  001802f4  2**0
                  CONTENTS
  8 .ARM          00000008  08164634  08164634  00174634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0816463c  0816463c  001802f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0816463c  0816463c  0017463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  08164654  08164654  00174654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000002f4  20000000  08164660  00180000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0003c24c  200002f4  08164954  001802f4  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2003c540  08164954  0018c540  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001802f4  2**0
                  CONTENTS, READONLY
 16 .debug_info   000d610a  00000000  00000000  00180322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018d01  00000000  00000000  0025642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000046a0  00000000  00000000  0026f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004010  00000000  00000000  002737d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a72d  00000000  00000000  002777e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00054dd2  00000000  00000000  002b1f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013348a  00000000  00000000  00306cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0043a169  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00013600  00000000  00000000  0043a238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002f4 	.word	0x200002f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0802ca64 	.word	0x0802ca64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002f8 	.word	0x200002f8
 800023c:	0802ca64 	.word	0x0802ca64

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <__aeabi_ldivmod>:
 8000304:	b97b      	cbnz	r3, 8000326 <__aeabi_ldivmod+0x22>
 8000306:	b972      	cbnz	r2, 8000326 <__aeabi_ldivmod+0x22>
 8000308:	2900      	cmp	r1, #0
 800030a:	bfbe      	ittt	lt
 800030c:	2000      	movlt	r0, #0
 800030e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000312:	e006      	blt.n	8000322 <__aeabi_ldivmod+0x1e>
 8000314:	bf08      	it	eq
 8000316:	2800      	cmpeq	r0, #0
 8000318:	bf1c      	itt	ne
 800031a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800031e:	f04f 30ff 	movne.w	r0, #4294967295
 8000322:	f000 b9bf 	b.w	80006a4 <__aeabi_idiv0>
 8000326:	f1ad 0c08 	sub.w	ip, sp, #8
 800032a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032e:	2900      	cmp	r1, #0
 8000330:	db09      	blt.n	8000346 <__aeabi_ldivmod+0x42>
 8000332:	2b00      	cmp	r3, #0
 8000334:	db1a      	blt.n	800036c <__aeabi_ldivmod+0x68>
 8000336:	f000 f84d 	bl	80003d4 <__udivmoddi4>
 800033a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800033e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000342:	b004      	add	sp, #16
 8000344:	4770      	bx	lr
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	db1b      	blt.n	8000388 <__aeabi_ldivmod+0x84>
 8000350:	f000 f840 	bl	80003d4 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	4770      	bx	lr
 800036c:	4252      	negs	r2, r2
 800036e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000372:	f000 f82f 	bl	80003d4 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4240      	negs	r0, r0
 8000382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000386:	4770      	bx	lr
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	f000 f821 	bl	80003d4 <__udivmoddi4>
 8000392:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039a:	b004      	add	sp, #16
 800039c:	4252      	negs	r2, r2
 800039e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f008 f87e 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <WS2812_Init>:

void WS2812_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e007      	b.n	80006dc <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <WS2812_Init+0x80>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	212b      	movs	r1, #43	; 0x2b
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80006e2:	dbf3      	blt.n	80006cc <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e009      	b.n	80006fe <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <WS2812_Init+0x80>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b27      	cmp	r3, #39	; 0x27
 8000702:	ddf2      	ble.n	80006ea <WS2812_Init+0x2a>

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000704:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <WS2812_Init+0x80>)
 800070a:	2100      	movs	r1, #0
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <WS2812_Init+0x84>)
 800070e:	f007 fe3d 	bl	800838c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e00a      	b.n	800072e <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f87b 	bl	8000818 <updateLedsType_0>
		osDelay(50);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f009 fbae 	bl	8009e84 <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3301      	adds	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d9f1      	bls.n	8000718 <WS2812_Init+0x58>
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000310 	.word	0x20000310
 8000744:	200009a0 	.word	0x200009a0

08000748 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000748:	b490      	push	{r4, r7}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	4604      	mov	r4, r0
 8000750:	4608      	mov	r0, r1
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	4623      	mov	r3, r4
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4603      	mov	r3, r0
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	460b      	mov	r3, r1
 8000760:	717b      	strb	r3, [r7, #5]
 8000762:	4613      	mov	r3, r2
 8000764:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000766:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <setLed+0xc8>)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000770:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29b      	uxth	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	e03a      	b.n	80007fe <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000788:	f107 0208 	add.w	r2, r7, #8
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	4413      	add	r3, r2
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <setLed+0x58>
 800079c:	2156      	movs	r1, #86	; 0x56
 800079e:	e000      	b.n	80007a2 <setLed+0x5a>
 80007a0:	212b      	movs	r1, #43	; 0x2b
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <setLed+0xcc>)
 80007a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4413      	add	r3, r2
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	4013      	ands	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <setLed+0x7a>
 80007be:	2156      	movs	r1, #86	; 0x56
 80007c0:	e000      	b.n	80007c4 <setLed+0x7c>
 80007c2:	212b      	movs	r1, #43	; 0x2b
 80007c4:	8afb      	ldrh	r3, [r7, #22]
 80007c6:	3308      	adds	r3, #8
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <setLed+0xcc>)
 80007ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	4413      	add	r3, r2
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	793b      	ldrb	r3, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <setLed+0x9e>
 80007e2:	2156      	movs	r1, #86	; 0x56
 80007e4:	e000      	b.n	80007e8 <setLed+0xa0>
 80007e6:	212b      	movs	r1, #43	; 0x2b
 80007e8:	8afb      	ldrh	r3, [r7, #22]
 80007ea:	3310      	adds	r3, #16
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <setLed+0xcc>)
 80007ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	3301      	adds	r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	3301      	adds	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddc1      	ble.n	8000788 <setLed+0x40>
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc90      	pop	{r4, r7}
 800080e:	4770      	bx	lr
 8000810:	0802ca7c 	.word	0x0802ca7c
 8000814:	20000310 	.word	0x20000310

08000818 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e02b      	b.n	8000880 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000828:	7bfa      	ldrb	r2, [r7, #15]
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	429a      	cmp	r2, r3
 8000830:	da1d      	bge.n	800086e <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d807      	bhi.n	8000848 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <updateLedsType_0+0x84>)
 800083a:	7899      	ldrb	r1, [r3, #2]
 800083c:	7bf8      	ldrb	r0, [r7, #15]
 800083e:	2300      	movs	r3, #0
 8000840:	2200      	movs	r2, #0
 8000842:	f7ff ff81 	bl	8000748 <setLed>
 8000846:	e018      	b.n	800087a <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b09      	cmp	r3, #9
 800084c:	d807      	bhi.n	800085e <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <updateLedsType_0+0x84>)
 8000850:	78da      	ldrb	r2, [r3, #3]
 8000852:	7bf8      	ldrb	r0, [r7, #15]
 8000854:	2300      	movs	r3, #0
 8000856:	2100      	movs	r1, #0
 8000858:	f7ff ff76 	bl	8000748 <setLed>
 800085c:	e00d      	b.n	800087a <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <updateLedsType_0+0x84>)
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	7bf8      	ldrb	r0, [r7, #15]
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	f7ff ff6e 	bl	8000748 <setLed>
 800086c:	e005      	b.n	800087a <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 800086e:	7bf8      	ldrb	r0, [r7, #15]
 8000870:	2300      	movs	r3, #0
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	f7ff ff67 	bl	8000748 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2b0e      	cmp	r3, #14
 8000884:	d9d0      	bls.n	8000828 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000886:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <updateLedsType_0+0x88>)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <updateLedsType_0+0x8c>)
 8000890:	f007 fd7c 	bl	800838c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000310 	.word	0x20000310
 80008a4:	200009a0 	.word	0x200009a0

080008a8 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e034      	b.n	8000922 <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	429a      	cmp	r2, r3
 80008c0:	da26      	bge.n	8000910 <updateLedsType_1+0x68>
		{
			if (i < 5)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d807      	bhi.n	80008d8 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <updateLedsType_1+0x98>)
 80008ca:	7899      	ldrb	r1, [r3, #2]
 80008cc:	7bf8      	ldrb	r0, [r7, #15]
 80008ce:	2300      	movs	r3, #0
 80008d0:	2200      	movs	r2, #0
 80008d2:	f7ff ff39 	bl	8000748 <setLed>
 80008d6:	e021      	b.n	800091c <updateLedsType_1+0x74>
			}
			else if (i < 10)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b09      	cmp	r3, #9
 80008dc:	d807      	bhi.n	80008ee <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <updateLedsType_1+0x98>)
 80008e0:	78da      	ldrb	r2, [r3, #3]
 80008e2:	7bf8      	ldrb	r0, [r7, #15]
 80008e4:	2300      	movs	r3, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	f7ff ff2e 	bl	8000748 <setLed>
 80008ec:	e016      	b.n	800091c <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	73bb      	strb	r3, [r7, #14]
 80008f2:	e009      	b.n	8000908 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <updateLedsType_1+0x98>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	7bf8      	ldrb	r0, [r7, #15]
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	f7ff ff23 	bl	8000748 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	3301      	adds	r3, #1
 8000906:	73bb      	strb	r3, [r7, #14]
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	2b0e      	cmp	r3, #14
 800090c:	d9f2      	bls.n	80008f4 <updateLedsType_1+0x4c>
 800090e:	e005      	b.n	800091c <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000910:	7bf8      	ldrb	r0, [r7, #15]
 8000912:	2300      	movs	r3, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	f7ff ff16 	bl	8000748 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	3301      	adds	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b0e      	cmp	r3, #14
 8000926:	d9c7      	bls.n	80008b8 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000928:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <updateLedsType_1+0x9c>)
 800092e:	2100      	movs	r1, #0
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <updateLedsType_1+0xa0>)
 8000932:	f007 fd2b 	bl	800838c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	20000310 	.word	0x20000310
 8000948:	200009a0 	.word	0x200009a0

0800094c <updateLeds>:

void updateLeds(uint16_t rpm, uint8_t mode)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4613      	mov	r3, r2
 800095a:	717b      	strb	r3, [r7, #5]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d005      	beq.n	800096e <updateLeds+0x22>
 8000962:	2b00      	cmp	r3, #0
 8000964:	db74      	blt.n	8000a50 <updateLeds+0x104>
 8000966:	3b01      	subs	r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d871      	bhi.n	8000a50 <updateLeds+0x104>
 800096c:	e027      	b.n	80009be <updateLeds+0x72>
	{
	case 0:
		minRPM = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	81bb      	strh	r3, [r7, #12]
		maxRPM = 12000;
 8000972:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000976:	817b      	strh	r3, [r7, #10]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	89bb      	ldrh	r3, [r7, #12]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000986:	897a      	ldrh	r2, [r7, #10]
 8000988:	89bb      	ldrh	r3, [r7, #12]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000998:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800099c:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 80009a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a4:	eeb0 0b47 	vmov.f64	d0, d7
 80009a8:	f028 feaa 	bl	8029700 <ceil>
 80009ac:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 80009b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009b4:	edc7 7a00 	vstr	s15, [r7]
 80009b8:	783b      	ldrb	r3, [r7, #0]
 80009ba:	73fb      	strb	r3, [r7, #15]
		break;
 80009bc:	e048      	b.n	8000a50 <updateLeds+0x104>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <updateLeds+0x138>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d807      	bhi.n	80009d6 <updateLeds+0x8a>
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <updateLeds+0x138>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <updateLeds+0x8a>
		{
			lastGear = telemetryData.gear;
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <updateLeds+0x138>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <updateLeds+0x13c>)
 80009d4:	701a      	strb	r2, [r3, #0]
		}

		minRPM = optimalShiftUpRPM[lastGear - 1] - 2000;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <updateLeds+0x13c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <updateLeds+0x140>)
 80009de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80009e6:	81bb      	strh	r3, [r7, #12]
		maxRPM = optimalShiftUpRPM[lastGear - 1];
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <updateLeds+0x13c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <updateLeds+0x140>)
 80009f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f4:	817b      	strh	r3, [r7, #10]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 80009f6:	797b      	ldrb	r3, [r7, #5]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <updateLeds+0xb4>
 80009fc:	230f      	movs	r3, #15
 80009fe:	e000      	b.n	8000a02 <updateLeds+0xb6>
 8000a00:	230b      	movs	r3, #11
 8000a02:	727b      	strb	r3, [r7, #9]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	89bb      	ldrh	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a12:	897a      	ldrh	r2, [r7, #10]
 8000a14:	89bb      	ldrh	r3, [r7, #12]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	ee07 3a90 	vmov	s15, r3
 8000a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a36:	eeb0 0b47 	vmov.f64	d0, d7
 8000a3a:	f028 fe61 	bl	8029700 <ceil>
 8000a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000a42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a46:	edc7 7a00 	vstr	s15, [r7]
 8000a4a:	783b      	ldrb	r3, [r7, #0]
 8000a4c:	73fb      	strb	r3, [r7, #15]

		break;
 8000a4e:	bf00      	nop

	}

	switch (mode)
 8000a50:	797b      	ldrb	r3, [r7, #5]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	dc02      	bgt.n	8000a5c <updateLeds+0x110>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <updateLeds+0x116>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000a5a:	e00e      	b.n	8000a7a <updateLeds+0x12e>
	switch (mode)
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d006      	beq.n	8000a6e <updateLeds+0x122>
}
 8000a60:	e00b      	b.n	8000a7a <updateLeds+0x12e>
		updateLedsType_0(activeLeds);
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fed6 	bl	8000818 <updateLedsType_0>
		break;
 8000a6c:	e005      	b.n	8000a7a <updateLeds+0x12e>
		updateLedsType_1(activeLeds);
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff18 	bl	80008a8 <updateLedsType_1>
		break;
 8000a78:	bf00      	nop
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200007dc 	.word	0x200007dc
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000630 	.word	0x20000630

08000a90 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_ADC1_Init+0x9c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xa0>)
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000af2:	f001 fee5 	bl	80028c0 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000afc:	f001 f9ec 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b00:	230b      	movs	r3, #11
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000b12:	f001 ff19 	bl	8002948 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b1c:	f001 f9dc 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000063c 	.word	0x2000063c
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <HAL_ADC_MspInit+0x74>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d123      	bne.n	8000b9e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_ADC_MspInit+0x78>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b86:	2302      	movs	r3, #2
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_ADC_MspInit+0x7c>)
 8000b9a:	f003 fab1 	bl	8004100 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <FLASH_QSPI_Init+0x70>)
 8000bba:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <FLASH_QSPI_Init+0x74>)
 8000bbc:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000bbe:	4819      	ldr	r0, [pc, #100]	; (8000c24 <FLASH_QSPI_Init+0x70>)
 8000bc0:	f005 fcf2 	bl	80065a8 <HAL_QSPI_DeInit>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e028      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8000bce:	f001 f989 	bl	8001ee4 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000bd2:	f000 f82b 	bl	8000c2c <FLASH_QSPI_ResetChip>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e01f      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f001 fe49 	bl	8002878 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000be6:	f000 f87f 	bl	8000ce8 <FLASH_QSPI_AutoPollingMemReady>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e015      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000bf4:	f000 f8b0 	bl	8000d58 <FLASH_QSPI_WriteEnable>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000c02:	f000 f8f3 	bl	8000dec <FLASH_QSPI_Configuration>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e007      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000c10:	f000 f962 	bl	8000ed8 <FLASH_QSPI_EnableMemoryMappedMode>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000900 	.word	0x20000900
 8000c28:	a0001000 	.word	0xa0001000

08000c2c <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b090      	sub	sp, #64	; 0x40
 8000c30:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8000c36:	2366      	movs	r3, #102	; 0x66
 8000c38:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <FLASH_QSPI_ResetChip+0xb8>)
 8000c70:	f005 fcbe 	bl	80065f0 <HAL_QSPI_Command>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e02e      	b.n	8000cdc <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c82:	e003      	b.n	8000c8c <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8000c84:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c88:	3301      	adds	r3, #1
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8000c90:	d9f8      	bls.n	8000c84 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8000c92:	2399      	movs	r3, #153	; 0x99
 8000c94:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9a:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <FLASH_QSPI_ResetChip+0xb8>)
 8000ccc:	f005 fc90 	bl	80065f0 <HAL_QSPI_Command>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3740      	adds	r7, #64	; 0x40
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000900 	.word	0x20000900

08000ce8 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000d26:	2310      	movs	r3, #16
 8000d28:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000d30:	463a      	mov	r2, r7
 8000d32:	f107 0118 	add.w	r1, r7, #24
 8000d36:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000d3c:	f005 fde5 	bl	800690a <HAL_QSPI_AutoPolling>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3750      	adds	r7, #80	; 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000900 	.word	0x20000900

08000d58 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d80:	2300      	movs	r3, #0
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <FLASH_QSPI_WriteEnable+0x90>)
 8000d90:	f005 fc2e 	bl	80065f0 <HAL_QSPI_Command>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e01f      	b.n	8000dde <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000da2:	2302      	movs	r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000dae:	2310      	movs	r3, #16
 8000db0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db6:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000db8:	2305      	movs	r3, #5
 8000dba:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000dc2:	463a      	mov	r2, r7
 8000dc4:	f107 0118 	add.w	r1, r7, #24
 8000dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <FLASH_QSPI_WriteEnable+0x90>)
 8000dce:	f005 fd9c 	bl	800690a <HAL_QSPI_AutoPolling>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000900 	.word	0x20000900

08000dec <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b090      	sub	sp, #64	; 0x40
 8000df0:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000df2:	2335      	movs	r3, #53	; 0x35
 8000df4:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4619      	mov	r1, r3
 8000e28:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <FLASH_QSPI_Configuration+0xe8>)
 8000e2a:	f005 fbe1 	bl	80065f0 <HAL_QSPI_Command>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e049      	b.n	8000ecc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <FLASH_QSPI_Configuration+0xe8>)
 8000e42:	f005 fcc5 	bl	80067d0 <HAL_QSPI_Receive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e03d      	b.n	8000ecc <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000e50:	f7ff ff82 	bl	8000d58 <FLASH_QSPI_WriteEnable>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e036      	b.n	8000ecc <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8000e68:	2331      	movs	r3, #49	; 0x31
 8000e6a:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <FLASH_QSPI_Configuration+0xe8>)
 8000ea0:	f005 fba6 	bl	80065f0 <HAL_QSPI_Command>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <FLASH_QSPI_Configuration+0xe8>)
 8000eb8:	f005 fbf8 	bl	80066ac <HAL_QSPI_Transmit>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000ec2:	f001 f809 	bl	8001ed8 <Error_Handler>
		return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3740      	adds	r7, #64	; 0x40
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000900 	.word	0x20000900

08000ed8 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	; 0x40
 8000edc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000ede:	23eb      	movs	r3, #235	; 0xeb
 8000ee0:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee6:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000eee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000f08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000f0e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000f24:	463a      	mov	r2, r7
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000f2e:	f005 fd63 	bl	80069f8 <HAL_QSPI_MemoryMapped>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3740      	adds	r7, #64	; 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000900 	.word	0x20000900

08000f4c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <MX_CAN1_Init+0xa4>)
 8000f56:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f6a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f7a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000fa2:	f001 ff21 	bl	8002de8 <HAL_CAN_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CAN1_Init+0x64>
	{
		Error_Handler();
 8000fac:	f000 ff94 	bl	8001ed8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_CAN1_Init+0xa0>)
 8000fde:	f001 ffff 	bl	8002fe0 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

	/* USER CODE END CAN1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000688 	.word	0x20000688
 8000ff0:	40006400 	.word	0x40006400

08000ff4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_CAN2_Init+0xa0>)
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <MX_CAN2_Init+0xa4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001002:	2209      	movs	r2, #9
 8001004:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_CAN2_Init+0xa0>)
 800100e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001012:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_CAN2_Init+0xa0>)
 800101e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001022:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_CAN2_Init+0xa0>)
 800102c:	2200      	movs	r2, #0
 800102e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001038:	2201      	movs	r2, #1
 800103a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_CAN2_Init+0xa0>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <MX_CAN2_Init+0xa0>)
 800104a:	f001 fecd 	bl	8002de8 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8001054:	f000 ff40 	bl	8001ed8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001058:	2301      	movs	r3, #1
 800105a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 800105c:	2312      	movs	r3, #18
 800105e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 800107c:	230a      	movs	r3, #10
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_CAN2_Init+0xa0>)
 8001086:	f001 ffab 	bl	8002fe0 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

	/* USER CODE END CAN2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200006b0 	.word	0x200006b0
 8001098:	40006800 	.word	0x40006800

0800109c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <HAL_CAN_MspInit+0x118>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d132      	bne.n	8001124 <HAL_CAN_MspInit+0x88>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80010be:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 80010c6:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <HAL_CAN_MspInit+0x4c>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a39      	ldr	r2, [pc, #228]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_CAN_MspInit+0x120>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001100:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001104:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001112:	2309      	movs	r3, #9
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4828      	ldr	r0, [pc, #160]	; (80011c0 <HAL_CAN_MspInit+0x124>)
 800111e:	f002 ffef 	bl	8004100 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8001122:	e042      	b.n	80011aa <HAL_CAN_MspInit+0x10e>
	else if (canHandle->Instance == CAN2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_CAN_MspInit+0x128>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d13d      	bne.n	80011aa <HAL_CAN_MspInit+0x10e>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_CAN_MspInit+0x120>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_CAN_MspInit+0x120>)
 8001134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_CAN_MspInit+0x120>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 800114e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_CAN_MspInit+0x11c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10b      	bne.n	8001170 <HAL_CAN_MspInit+0xd4>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_CAN_MspInit+0x120>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_CAN_MspInit+0x120>)
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_CAN_MspInit+0x120>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_CAN_MspInit+0x120>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_CAN_MspInit+0x120>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_CAN_MspInit+0x120>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001188:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800118c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800119a:	2309      	movs	r3, #9
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <HAL_CAN_MspInit+0x12c>)
 80011a6:	f002 ffab 	bl	8004100 <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40006400 	.word	0x40006400
 80011b8:	200006d8 	.word	0x200006d8
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40006800 	.word	0x40006800
 80011c8:	40020400 	.word	0x40020400

080011cc <CanCommunicationInit>:
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}

void CanCommunicationInit()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09a      	sub	sp, #104	; 0x68
 80011d0:	af02      	add	r7, sp, #8
	HAL_CAN_Start(&hcan2);
 80011d2:	4859      	ldr	r0, [pc, #356]	; (8001338 <CanCommunicationInit+0x16c>)
 80011d4:	f001 fff0 	bl	80031b8 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 80011d8:	4858      	ldr	r0, [pc, #352]	; (800133c <CanCommunicationInit+0x170>)
 80011da:	f001 ffed 	bl	80031b8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011de:	2102      	movs	r1, #2
 80011e0:	4855      	ldr	r0, [pc, #340]	; (8001338 <CanCommunicationInit+0x16c>)
 80011e2:	f002 f8fd 	bl	80033e0 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011e6:	2102      	movs	r1, #2
 80011e8:	4854      	ldr	r0, [pc, #336]	; (800133c <CanCommunicationInit+0x170>)
 80011ea:	f002 f8f9 	bl	80033e0 <HAL_CAN_ActivateNotification>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 80011ee:	2300      	movs	r3, #0
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
	TxHeader.RTR = CAN_RTR_DATA;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.DLC = 8;
 80011f6:	2308      	movs	r3, #8
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t TxData[8] =
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <CanCommunicationInit+0x174>)
 8001202:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120a:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 0, 0, 0, 0, 0, 0, 0 };

	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 800120e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001212:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <CanCommunicationInit+0x178>)
 8001218:	4848      	ldr	r0, [pc, #288]	; (800133c <CanCommunicationInit+0x170>)
 800121a:	f002 f811 	bl	8003240 <HAL_CAN_AddTxMessage>

	TxHeader.DLC = 4;
 800121e:	2304      	movs	r3, #4
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c

	sscanf(_V_BUILD_TAG, "v%hu.%hu.%hu", (short unsigned*) &TxData[0],
 8001228:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001236:	3302      	adds	r3, #2
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	460b      	mov	r3, r1
 800123c:	4942      	ldr	r1, [pc, #264]	; (8001348 <CanCommunicationInit+0x17c>)
 800123e:	4843      	ldr	r0, [pc, #268]	; (800134c <CanCommunicationInit+0x180>)
 8001240:	f029 fa06 	bl	802a650 <siscanf>
			(short unsigned*) &TxData[1], (short unsigned*) &TxData[2]);
	TxData[3] = _V_COMMITS_AHEAD;
 8001244:	2301      	movs	r3, #1
 8001246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

#ifdef _V_GIT_DIRTY_FLAG
	TxData[4] = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8001250:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001254:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <CanCommunicationInit+0x178>)
 800125a:	4838      	ldr	r0, [pc, #224]	; (800133c <CanCommunicationInit+0x170>)
 800125c:	f001 fff0 	bl	8003240 <HAL_CAN_AddTxMessage>

	char Temp[10];
	TxHeader.DLC = 8;
 8001260:	2308      	movs	r3, #8
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_COMMIT;
 8001264:	f240 1301 	movw	r3, #257	; 0x101
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c

	memset(TxData, 0, 8);
 800126a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126e:	2208      	movs	r2, #8
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f028 fb50 	bl	8029918 <memset>
	strcpy(Temp, _V_COMMIT);
 8001278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127c:	4a34      	ldr	r2, [pc, #208]	; (8001350 <CanCommunicationInit+0x184>)
 800127e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001280:	c303      	stmia	r3!, {r0, r1}
 8001282:	701a      	strb	r2, [r3, #0]
	strncpy((char*) TxData, Temp, 8);
 8001284:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	2208      	movs	r2, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f029 fa63 	bl	802a75a <strncpy>
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8001294:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001298:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <CanCommunicationInit+0x178>)
 800129e:	4827      	ldr	r0, [pc, #156]	; (800133c <CanCommunicationInit+0x170>)
 80012a0:	f001 ffce 	bl	8003240 <HAL_CAN_AddTxMessage>

	// parse build date and send through can
	struct tm result;
	strptime(_V_DATE, "%d.%m.%Y %R", &result);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	461a      	mov	r2, r3
 80012a8:	492a      	ldr	r1, [pc, #168]	; (8001354 <CanCommunicationInit+0x188>)
 80012aa:	482b      	ldr	r0, [pc, #172]	; (8001358 <CanCommunicationInit+0x18c>)
 80012ac:	f029 fe0e 	bl	802aecc <strptime>
	time_t tempTime = mktime(&result);
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f028 fc10 	bl	8029ad8 <mktime>
 80012b8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	uint8_t counter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (tempTime > 0 && counter < 8)
 80012c2:	e01f      	b.n	8001304 <CanCommunicationInit+0x138>
	{
		TxData[counter++] = tempTime % 0xFF;
 80012c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f7ff f818 	bl	8000304 <__aeabi_ldivmod>
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80012e2:	b2c2      	uxtb	r2, r0
 80012e4:	3360      	adds	r3, #96	; 0x60
 80012e6:	443b      	add	r3, r7
 80012e8:	f803 2c2c 	strb.w	r2, [r3, #-44]
		tempTime /= 0xFF;
 80012ec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012f0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	f7ff f804 	bl	8000304 <__aeabi_ldivmod>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	while (tempTime > 0 && counter < 8)
 8001304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001308:	2a01      	cmp	r2, #1
 800130a:	f173 0300 	sbcs.w	r3, r3, #0
 800130e:	db03      	blt.n	8001318 <CanCommunicationInit+0x14c>
 8001310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001314:	2b07      	cmp	r3, #7
 8001316:	d9d5      	bls.n	80012c4 <CanCommunicationInit+0xf8>
	}

	TxHeader.StdId = BUILD_DATE;
 8001318:	f44f 7381 	mov.w	r3, #258	; 0x102
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 800131e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001322:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <CanCommunicationInit+0x178>)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <CanCommunicationInit+0x170>)
 800132a:	f001 ff89 	bl	8003240 <HAL_CAN_AddTxMessage>
}
 800132e:	bf00      	nop
 8001330:	3760      	adds	r7, #96	; 0x60
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200006b0 	.word	0x200006b0
 800133c:	20000688 	.word	0x20000688
 8001340:	0802cac8 	.word	0x0802cac8
 8001344:	20000684 	.word	0x20000684
 8001348:	0802ca84 	.word	0x0802ca84
 800134c:	0802ca94 	.word	0x0802ca94
 8001350:	0802ca9c 	.word	0x0802ca9c
 8001354:	0802caa8 	.word	0x0802caa8
 8001358:	0802cab4 	.word	0x0802cab4

0800135c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_CRC_Init+0x3c>)
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <MX_CRC_Init+0x40>)
 8001364:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_CRC_Init+0x3c>)
 8001368:	2200      	movs	r2, #0
 800136a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_CRC_Init+0x3c>)
 800136e:	2200      	movs	r2, #0
 8001370:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_CRC_Init+0x3c>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_CRC_Init+0x3c>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_CRC_Init+0x3c>)
 8001380:	2201      	movs	r2, #1
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_CRC_Init+0x3c>)
 8001386:	f002 f933 	bl	80035f0 <HAL_CRC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001390:	f000 fda2 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200006dc 	.word	0x200006dc
 800139c:	40023000 	.word	0x40023000

080013a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_CRC_MspInit+0x38>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10b      	bne.n	80013ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023000 	.word	0x40023000
 80013dc:	40023800 	.word	0x40023800

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_DMA_Init+0x48>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <MX_DMA_Init+0x48>)
 80013ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_DMA_Init+0x48>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	200b      	movs	r0, #11
 8001404:	f002 f8ca 	bl	800359c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f002 f8e3 	bl	80035d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	200f      	movs	r0, #15
 8001414:	f002 f8c2 	bl	800359c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001418:	200f      	movs	r0, #15
 800141a:	f002 f8db 	bl	80035d4 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <MX_DMA2D_Init+0x6c>)
 8001434:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_DMA2D_Init+0x68>)
 800143e:	2201      	movs	r2, #1
 8001440:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_DMA2D_Init+0x68>)
 800144a:	2200      	movs	r2, #0
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001450:	2201      	movs	r2, #1
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_DMA2D_Init+0x68>)
 800145c:	2200      	movs	r2, #0
 800145e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001462:	2200      	movs	r2, #0
 8001464:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001468:	2200      	movs	r2, #0
 800146a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_DMA2D_Init+0x68>)
 800146e:	f002 fd4f 	bl	8003f10 <HAL_DMA2D_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001478:	f000 fd2e 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800147c:	2101      	movs	r1, #1
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_DMA2D_Init+0x68>)
 8001480:	f002 fda0 	bl	8003fc4 <HAL_DMA2D_ConfigLayer>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800148a:	f000 fd25 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000700 	.word	0x20000700
 8001498:	4002b000 	.word	0x4002b000

0800149c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_DMA2D_MspInit+0x38>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_DMA2D_MspInit+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_DMA2D_MspInit+0x3c>)
 80014b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_DMA2D_MspInit+0x3c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	4002b000 	.word	0x4002b000
 80014d8:	40023800 	.word	0x40023800

080014dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <MX_FMC_Init+0x144>)
 80014f6:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <MX_FMC_Init+0x148>)
 80014f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <MX_FMC_Init+0x144>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <MX_FMC_Init+0x144>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <MX_FMC_Init+0x144>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <MX_FMC_Init+0x144>)
 800150e:	2210      	movs	r2, #16
 8001510:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <MX_FMC_Init+0x144>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <MX_FMC_Init+0x144>)
 800151a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001520:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <MX_FMC_Init+0x144>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_FMC_Init+0x144>)
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <MX_FMC_Init+0x144>)
 8001530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001536:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <MX_FMC_Init+0x144>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001540:	2307      	movs	r3, #7
 8001542:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001548:	2306      	movs	r3, #6
 800154a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800154c:	2303      	movs	r3, #3
 800154e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4830      	ldr	r0, [pc, #192]	; (8001620 <MX_FMC_Init+0x144>)
 800155e:	f006 fd53 	bl	8008008 <HAL_SDRAM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001568:	f000 fcb6 	bl	8001ed8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_FMC_Init+0x14c>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <MX_FMC_Init+0x14c>)
 8001578:	2210      	movs	r2, #16
 800157a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_FMC_Init+0x14c>)
 800157e:	2201      	movs	r2, #1
 8001580:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <MX_FMC_Init+0x14c>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	4926      	ldr	r1, [pc, #152]	; (8001628 <MX_FMC_Init+0x14c>)
 800158e:	4824      	ldr	r0, [pc, #144]	; (8001620 <MX_FMC_Init+0x144>)
 8001590:	f006 fd6e 	bl	8008070 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 f96f 	bl	8002878 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <MX_FMC_Init+0x14c>)
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <MX_FMC_Init+0x14c>)
 80015a2:	2210      	movs	r2, #16
 80015a4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <MX_FMC_Init+0x14c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_FMC_Init+0x14c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295
 80015b6:	491c      	ldr	r1, [pc, #112]	; (8001628 <MX_FMC_Init+0x14c>)
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <MX_FMC_Init+0x144>)
 80015ba:	f006 fd59 	bl	8008070 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_FMC_Init+0x14c>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_FMC_Init+0x14c>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_FMC_Init+0x14c>)
 80015cc:	2208      	movs	r2, #8
 80015ce:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_FMC_Init+0x14c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015d6:	f04f 32ff 	mov.w	r2, #4294967295
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <MX_FMC_Init+0x14c>)
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <MX_FMC_Init+0x144>)
 80015de:	f006 fd47 	bl	8008070 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 80015e2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015e6:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_FMC_Init+0x14c>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_FMC_Init+0x14c>)
 80015f0:	2210      	movs	r2, #16
 80015f2:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_FMC_Init+0x14c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <MX_FMC_Init+0x14c>)
 80015fe:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <MX_FMC_Init+0x14c>)
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_FMC_Init+0x144>)
 8001608:	f006 fd32 	bl	8008070 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 800160c:	f240 617c 	movw	r1, #1660	; 0x67c
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_FMC_Init+0x144>)
 8001612:	f006 fd62 	bl	80080da <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000758 	.word	0x20000758
 8001624:	a0000140 	.word	0xa0000140
 8001628:	20000790 	.word	0x20000790

0800162c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_FMC_MspInit+0x100>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d16d      	bne.n	8001724 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_FMC_MspInit+0x100>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_FMC_MspInit+0x104>)
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	4a37      	ldr	r2, [pc, #220]	; (8001730 <HAL_FMC_MspInit+0x104>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6393      	str	r3, [r2, #56]	; 0x38
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_FMC_MspInit+0x104>)
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001666:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800166a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001678:	230c      	movs	r3, #12
 800167a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	482c      	ldr	r0, [pc, #176]	; (8001734 <HAL_FMC_MspInit+0x108>)
 8001682:	f002 fd3d 	bl	8004100 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001686:	230c      	movs	r3, #12
 8001688:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001696:	230c      	movs	r3, #12
 8001698:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4826      	ldr	r0, [pc, #152]	; (8001738 <HAL_FMC_MspInit+0x10c>)
 80016a0:	f002 fd2e 	bl	8004100 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	230c      	movs	r3, #12
 80016b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <HAL_FMC_MspInit+0x110>)
 80016be:	f002 fd1f 	bl	8004100 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80016c2:	f248 1311 	movw	r3, #33041	; 0x8111
 80016c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d4:	230c      	movs	r3, #12
 80016d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4818      	ldr	r0, [pc, #96]	; (8001740 <HAL_FMC_MspInit+0x114>)
 80016de:	f002 fd0f 	bl	8004100 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80016e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f4:	230c      	movs	r3, #12
 80016f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <HAL_FMC_MspInit+0x118>)
 80016fe:	f002 fcff 	bl	8004100 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001702:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	480a      	ldr	r0, [pc, #40]	; (8001748 <HAL_FMC_MspInit+0x11c>)
 800171e:	f002 fcef 	bl	8004100 <HAL_GPIO_Init>
 8001722:	e000      	b.n	8001726 <HAL_FMC_MspInit+0xfa>
    return;
 8001724:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000078c 	.word	0x2000078c
 8001730:	40023800 	.word	0x40023800
 8001734:	40021400 	.word	0x40021400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020000 	.word	0x40020000
 8001740:	40021800 	.word	0x40021800
 8001744:	40021000 	.word	0x40021000
 8001748:	40020c00 	.word	0x40020c00

0800174c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001754:	f7ff ff6a 	bl	800162c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTask */
	hardwareTaskHandle = osThreadNew(StartHardwareTask, NULL,
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <MX_FREERTOS_Init+0x48>)
 8001766:	2100      	movs	r1, #0
 8001768:	4810      	ldr	r0, [pc, #64]	; (80017ac <MX_FREERTOS_Init+0x4c>)
 800176a:	f008 fae5 	bl	8009d38 <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <MX_FREERTOS_Init+0x50>)
 8001772:	6013      	str	r3, [r2, #0]
			&hardwareTask_attributes);

	/* creation of RPMLed */
	RPMLedHandle = osThreadNew(startRPMLed, NULL, &RPMLed_attributes);
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <MX_FREERTOS_Init+0x54>)
 8001776:	2100      	movs	r1, #0
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <MX_FREERTOS_Init+0x58>)
 800177a:	f008 fadd 	bl	8009d38 <osThreadNew>
 800177e:	4603      	mov	r3, r0
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <MX_FREERTOS_Init+0x5c>)
 8001782:	6013      	str	r3, [r2, #0]

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(startTouchGFXTask, NULL,
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <MX_FREERTOS_Init+0x60>)
 8001786:	2100      	movs	r1, #0
 8001788:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_FREERTOS_Init+0x64>)
 800178a:	f008 fad5 	bl	8009d38 <osThreadNew>
 800178e:	4603      	mov	r3, r0
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <MX_FREERTOS_Init+0x68>)
 8001792:	6013      	str	r3, [r2, #0]
			&touchGFXTask_attributes);

	/* creation of statusLedTask */
	statusLedTaskHandle = osThreadNew(startStatusLedTask, NULL,
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <MX_FREERTOS_Init+0x6c>)
 8001796:	2100      	movs	r1, #0
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_FREERTOS_Init+0x70>)
 800179a:	f008 facd 	bl	8009d38 <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <MX_FREERTOS_Init+0x74>)
 80017a2:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0802eeb0 	.word	0x0802eeb0
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	200007f0 	.word	0x200007f0
 80017b4:	0802eed4 	.word	0x0802eed4
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	200007f4 	.word	0x200007f4
 80017c0:	0802eef8 	.word	0x0802eef8
 80017c4:	0800182d 	.word	0x0800182d
 80017c8:	200007f8 	.word	0x200007f8
 80017cc:	0802ef1c 	.word	0x0802ef1c
 80017d0:	0800183d 	.word	0x0800183d
 80017d4:	200007fc 	.word	0x200007fc

080017d8 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */
	CanCommunicationInit();
 80017e0:	f7ff fcf4 	bl	80011cc <CanCommunicationInit>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f008 fb4d 	bl	8009e84 <osDelay>
 80017ea:	e7fb      	b.n	80017e4 <StartHardwareTask+0xc>

080017ec <startRPMLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRPMLed */
void startRPMLed(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startRPMLed */
	WS2812_Init();
 80017f4:	f7fe ff64 	bl	80006c0 <WS2812_Init>
	/* Infinite loop */
	for (;;)
	{
		uint8_t displayMode = telemetryData.gear == 0 ? 0 : displaySetup.ledBarMode;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <startRPMLed+0x34>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <startRPMLed+0x1a>
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <startRPMLed+0x38>)
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	e000      	b.n	8001808 <startRPMLed+0x1c>
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
		updateLeds(ecumasterData.rpm, displayMode);
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <startRPMLed+0x3c>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f89a 	bl	800094c <updateLeds>
		osDelay(50);
 8001818:	2032      	movs	r0, #50	; 0x32
 800181a:	f008 fb33 	bl	8009e84 <osDelay>
	{
 800181e:	e7eb      	b.n	80017f8 <startRPMLed+0xc>
 8001820:	200007dc 	.word	0x200007dc
 8001824:	20000008 	.word	0x20000008
 8001828:	200007a0 	.word	0x200007a0

0800182c <startTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTouchGFXTask */
void startTouchGFXTask(void *argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTouchGFXTask */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f008 fb25 	bl	8009e84 <osDelay>
 800183a:	e7fb      	b.n	8001834 <startTouchGFXTask+0x8>

0800183c <startStatusLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStatusLedTask */
void startStatusLedTask(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startStatusLedTask */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001844:	2001      	movs	r0, #1
 8001846:	f008 fb1d 	bl	8009e84 <osDelay>
 800184a:	e7fb      	b.n	8001844 <startStatusLedTask+0x8>

0800184c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <MX_GPIO_Init+0xd4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a26      	ldr	r2, [pc, #152]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_GPIO_Init+0xd4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_GPIO_Init+0xd4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_GPIO_Init+0xd4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

}
 8001912:	bf00      	nop
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_JPEG_Init+0x20>)
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <MX_JPEG_Init+0x24>)
 800192c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_JPEG_Init+0x20>)
 8001930:	f002 fe9e 	bl	8004670 <HAL_JPEG_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800193a:	f000 facd 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000800 	.word	0x20000800
 8001948:	50051000 	.word	0x50051000

0800194c <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_JPEG_MspInit+0x38>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10b      	bne.n	8001976 <HAL_JPEG_MspInit+0x2a>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_JPEG_MspInit+0x3c>)
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_JPEG_MspInit+0x3c>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6353      	str	r3, [r2, #52]	; 0x34
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_JPEG_MspInit+0x3c>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	50051000 	.word	0x50051000
 8001988:	40023800 	.word	0x40023800

0800198c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2234      	movs	r2, #52	; 0x34
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f027 ffbd 	bl	8029918 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019a0:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <MX_LTDC_Init+0x100>)
 80019a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80019bc:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019be:	2203      	movs	r2, #3
 80019c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019c4:	2227      	movs	r2, #39	; 0x27
 80019c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019ca:	220b      	movs	r2, #11
 80019cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019d0:	222f      	movs	r2, #47	; 0x2f
 80019d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019d6:	f240 322b 	movw	r2, #811	; 0x32b
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019de:	f240 220f 	movw	r2, #527	; 0x20f
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019e6:	f240 3233 	movw	r2, #819	; 0x333
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019ee:	f240 2217 	movw	r2, #535	; 0x217
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_LTDC_Init+0xfc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_LTDC_Init+0xfc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a0c:	481e      	ldr	r0, [pc, #120]	; (8001a88 <MX_LTDC_Init+0xfc>)
 8001a0e:	f004 f967 	bl	8005ce0 <HAL_LTDC_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001a18:	f000 fa5e 	bl	8001ed8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001a20:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a24:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001a2a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a2e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a40:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001a46:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001a4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001a52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_LTDC_Init+0xfc>)
 8001a72:	f004 fabd 	bl	8005ff0 <HAL_LTDC_ConfigLayer>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a7c:	f000 fa2c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3738      	adds	r7, #56	; 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000858 	.word	0x20000858
 8001a8c:	40016800 	.word	0x40016800

08001a90 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b4      	sub	sp, #208	; 0xd0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	2290      	movs	r2, #144	; 0x90
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f027 ff31 	bl	8029918 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4aa6      	ldr	r2, [pc, #664]	; (8001d54 <HAL_LTDC_MspInit+0x2c4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 8145 	bne.w	8001d4c <HAL_LTDC_MspInit+0x2bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8001ac6:	f240 1317 	movw	r3, #279	; 0x117
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001acc:	2303      	movs	r3, #3
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 fe66 	bl	80077b8 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001af2:	f000 f9f1 	bl	8001ed8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001af6:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a97      	ldr	r2, [pc, #604]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b95      	ldr	r3, [pc, #596]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a91      	ldr	r2, [pc, #580]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b26:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a8b      	ldr	r2, [pc, #556]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a85      	ldr	r2, [pc, #532]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a7f      	ldr	r2, [pc, #508]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a79      	ldr	r2, [pc, #484]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b86:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a73      	ldr	r2, [pc, #460]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a6d      	ldr	r2, [pc, #436]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <HAL_LTDC_MspInit+0x2c8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bb6:	2370      	movs	r3, #112	; 0x70
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bce:	230e      	movs	r3, #14
 8001bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4860      	ldr	r0, [pc, #384]	; (8001d5c <HAL_LTDC_MspInit+0x2cc>)
 8001bdc:	f002 fa90 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bfa:	230e      	movs	r3, #14
 8001bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c04:	4619      	mov	r1, r3
 8001c06:	4856      	ldr	r0, [pc, #344]	; (8001d60 <HAL_LTDC_MspInit+0x2d0>)
 8001c08:	f002 fa7a 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001c0c:	f240 23c1 	movw	r3, #705	; 0x2c1
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c26:	230e      	movs	r3, #14
 8001c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c30:	4619      	mov	r1, r3
 8001c32:	484c      	ldr	r0, [pc, #304]	; (8001d64 <HAL_LTDC_MspInit+0x2d4>)
 8001c34:	f002 fa64 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c38:	f240 437e 	movw	r3, #1150	; 0x47e
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c52:	230e      	movs	r3, #14
 8001c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4842      	ldr	r0, [pc, #264]	; (8001d68 <HAL_LTDC_MspInit+0x2d8>)
 8001c60:	f002 fa4e 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c7c:	2309      	movs	r3, #9
 8001c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c86:	4619      	mov	r1, r3
 8001c88:	4838      	ldr	r0, [pc, #224]	; (8001d6c <HAL_LTDC_MspInit+0x2dc>)
 8001c8a:	f002 fa39 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001c8e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca8:	230e      	movs	r3, #14
 8001caa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482d      	ldr	r0, [pc, #180]	; (8001d6c <HAL_LTDC_MspInit+0x2dc>)
 8001cb6:	f002 fa23 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001cba:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8001cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cda:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4823      	ldr	r0, [pc, #140]	; (8001d70 <HAL_LTDC_MspInit+0x2e0>)
 8001ce2:	f002 fa0d 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cfe:	230e      	movs	r3, #14
 8001d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <HAL_LTDC_MspInit+0x2e4>)
 8001d0c:	f002 f9f8 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d34:	4619      	mov	r1, r3
 8001d36:	480e      	ldr	r0, [pc, #56]	; (8001d70 <HAL_LTDC_MspInit+0x2e0>)
 8001d38:	f002 f9e2 	bl	8004100 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	2058      	movs	r0, #88	; 0x58
 8001d42:	f001 fc2b 	bl	800359c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d46:	2058      	movs	r0, #88	; 0x58
 8001d48:	f001 fc44 	bl	80035d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	37d0      	adds	r7, #208	; 0xd0
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40016800 	.word	0x40016800
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40020c00 	.word	0x40020c00

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f000 fd4f 	bl	800281e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d80:	f000 f828 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d84:	f7ff fd62 	bl	800184c <MX_GPIO_Init>
  MX_CRC_Init();
 8001d88:	f7ff fae8 	bl	800135c <MX_CRC_Init>
  MX_DMA2D_Init();
 8001d8c:	f7ff fb4e 	bl	800142c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001d90:	f7ff fdfc 	bl	800198c <MX_LTDC_Init>
  MX_ADC1_Init();
 8001d94:	f7fe fe7c 	bl	8000a90 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001d98:	f7ff f8d8 	bl	8000f4c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001d9c:	f7ff f92a 	bl	8000ff4 <MX_CAN2_Init>
  MX_FMC_Init();
 8001da0:	f7ff fb9c 	bl	80014dc <MX_FMC_Init>
  MX_JPEG_Init();
 8001da4:	f7ff fdbe 	bl	8001924 <MX_JPEG_Init>
  MX_QUADSPI_Init();
 8001da8:	f000 f89c 	bl	8001ee4 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8001dac:	f000 fb24 	bl	80023f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001db0:	f000 fb98 	bl	80024e4 <MX_TIM4_Init>
  MX_DMA_Init();
 8001db4:	f7ff fb14 	bl	80013e0 <MX_DMA_Init>
  MX_TouchGFX_Init();
 8001db8:	f00b fe4f 	bl	800da5a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001dbc:	f00b fe46 	bl	800da4c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001dc0:	f7fe fef8 	bl	8000bb4 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001dc4:	f007 ff4e 	bl	8009c64 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dc8:	f7ff fcca 	bl	8001760 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dcc:	f007 ff7e 	bl	8009ccc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <main+0x58>
	...

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b094      	sub	sp, #80	; 0x50
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	2234      	movs	r2, #52	; 0x34
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f027 fd98 	bl	8029918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <SystemClock_Config+0xd8>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <SystemClock_Config+0xd8>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <SystemClock_Config+0xd8>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <SystemClock_Config+0xdc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <SystemClock_Config+0xdc>)
 8001e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <SystemClock_Config+0xdc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e32:	2302      	movs	r3, #2
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e40:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fffc 	bl	8006e54 <HAL_RCC_OscConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e62:	f000 f839 	bl	8001ed8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e66:	f004 fad3 	bl	8006410 <HAL_PWREx_EnableOverDrive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001e70:	f000 f832 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2107      	movs	r1, #7
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fa8c 	bl	80073b0 <HAL_RCC_ClockConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001e9e:	f000 f81b 	bl	8001ed8 <Error_Handler>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3750      	adds	r7, #80	; 0x50
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ec6:	f000 fcb7 	bl	8002838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40001000 	.word	0x40001000

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <MX_QUADSPI_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f02:	2217      	movs	r2, #23
 8001f04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f08:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001f0c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_QUADSPI_Init+0x50>)
 8001f22:	f004 fac5 	bl	80064b0 <HAL_QSPI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f7ff ffd4 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000900 	.word	0x20000900
 8001f38:	a0001000 	.word	0xa0001000

08001f3c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_QSPI_MspInit+0xf4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d164      	bne.n	8002028 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f5e:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_QSPI_MspInit+0xf8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa6:	23c0      	movs	r3, #192	; 0xc0
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481d      	ldr	r0, [pc, #116]	; (8002038 <HAL_QSPI_MspInit+0xfc>)
 8001fc2:	f002 f89d 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fd8:	230a      	movs	r3, #10
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4815      	ldr	r0, [pc, #84]	; (8002038 <HAL_QSPI_MspInit+0xfc>)
 8001fe4:	f002 f88c 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ff8:	2309      	movs	r3, #9
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <HAL_QSPI_MspInit+0x100>)
 8002004:	f002 f87c 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002008:	2340      	movs	r3, #64	; 0x40
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002018:	230a      	movs	r3, #10
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4806      	ldr	r0, [pc, #24]	; (800203c <HAL_QSPI_MspInit+0x100>)
 8002024:	f002 f86c 	bl	8004100 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	a0001000 	.word	0xa0001000
 8002034:	40023800 	.word	0x40023800
 8002038:	40021400 	.word	0x40021400
 800203c:	40020400 	.word	0x40020400

08002040 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_QSPI_MspDeInit+0x38>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10e      	bne.n	8002070 <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_QSPI_MspDeInit+0x3c>)
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_QSPI_MspDeInit+0x3c>)
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800205e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <HAL_QSPI_MspDeInit+0x40>)
 8002064:	f002 f9f8 	bl	8004458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002068:	2144      	movs	r1, #68	; 0x44
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <HAL_QSPI_MspDeInit+0x44>)
 800206c:	f002 f9f4 	bl	8004458 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	a0001000 	.word	0xa0001000
 800207c:	40023800 	.word	0x40023800
 8002080:	40021400 	.word	0x40021400
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_MspInit+0x4c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_MspInit+0x4c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	210f      	movs	r1, #15
 80020c2:	f06f 0001 	mvn.w	r0, #1
 80020c6:	f001 fa69 	bl	800359c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800

080020d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020e8:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_InitTick+0xe0>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <HAL_InitTick+0xe0>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_InitTick+0xe0>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002100:	f107 0210 	add.w	r2, r7, #16
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f005 fb22 	bl	8007754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800211a:	f005 fb07 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800211e:	6378      	str	r0, [r7, #52]	; 0x34
 8002120:	e004      	b.n	800212c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002122:	f005 fb03 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8002126:	4603      	mov	r3, r0
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_InitTick+0xe4>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	3b01      	subs	r3, #1
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_InitTick+0xe8>)
 800213c:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_InitTick+0xec>)
 800213e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_InitTick+0xe8>)
 8002142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002146:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_InitTick+0xe8>)
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_InitTick+0xe8>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_InitTick+0xe8>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_InitTick+0xe8>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002160:	4817      	ldr	r0, [pc, #92]	; (80021c0 <HAL_InitTick+0xe8>)
 8002162:	f005 ffe2 	bl	800812a <HAL_TIM_Base_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11b      	bne.n	80021ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002174:	4812      	ldr	r0, [pc, #72]	; (80021c0 <HAL_InitTick+0xe8>)
 8002176:	f006 f82f 	bl	80081d8 <HAL_TIM_Base_Start_IT>
 800217a:	4603      	mov	r3, r0
 800217c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002188:	2036      	movs	r0, #54	; 0x36
 800218a:	f001 fa23 	bl	80035d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d808      	bhi.n	80021a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	2036      	movs	r0, #54	; 0x36
 800219a:	f001 f9ff 	bl	800359c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_InitTick+0xf0>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e002      	b.n	80021ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	2000094c 	.word	0x2000094c
 80021c4:	40001000 	.word	0x40001000
 80021c8:	20000018 	.word	0x20000018

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <NMI_Handler+0x4>

080021d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <MemManage_Handler+0x4>

080021de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Stream0_IRQHandler+0x10>)
 80021fe:	f001 fc11 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000a98 	.word	0x20000a98

0800220c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Stream4_IRQHandler+0x10>)
 8002212:	f001 fc07 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000a38 	.word	0x20000a38

08002220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM6_DAC_IRQHandler+0x10>)
 8002226:	f006 fba7 	bl	8008978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000094c 	.word	0x2000094c

08002234 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <LTDC_IRQHandler+0x10>)
 800223a:	f003 fe21 	bl	8005e80 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000858 	.word	0x20000858

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
	return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002262:	f027 faff 	bl	8029864 <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
	return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800228a:	e7fe      	b.n	800228a <_exit+0x12>

0800228c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e00a      	b.n	80022b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800229e:	f3af 8000 	nop.w
 80022a2:	4601      	mov	r1, r0
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	60ba      	str	r2, [r7, #8]
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf0      	blt.n	800229e <_read+0x12>
	}

return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e009      	b.n	80022ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf1      	blt.n	80022d8 <_write+0x12>
	}
	return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_close>:

int _close(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002326:	605a      	str	r2, [r3, #4]
	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_isatty>:

int _isatty(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return 1;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	return 0;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f027 fa64 	bl	8029864 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20080000 	.word	0x20080000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	2000099c 	.word	0x2000099c
 80023d0:	2003c540 	.word	0x2003c540

080023d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002418:	463b      	mov	r3, r7
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	615a      	str	r2, [r3, #20]
 8002428:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <MX_TIM3_Init+0xe4>)
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <MX_TIM3_Init+0xe8>)
 800242e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <MX_TIM3_Init+0xe4>)
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <MX_TIM3_Init+0xe4>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <MX_TIM3_Init+0xe4>)
 800243e:	2286      	movs	r2, #134	; 0x86
 8002440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <MX_TIM3_Init+0xe4>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <MX_TIM3_Init+0xe4>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800244e:	4823      	ldr	r0, [pc, #140]	; (80024dc <MX_TIM3_Init+0xe4>)
 8002450:	f005 fe6b 	bl	800812a <HAL_TIM_Base_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800245a:	f7ff fd3d 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002468:	4619      	mov	r1, r3
 800246a:	481c      	ldr	r0, [pc, #112]	; (80024dc <MX_TIM3_Init+0xe4>)
 800246c:	f006 fcb8 	bl	8008de0 <HAL_TIM_ConfigClockSource>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002476:	f7ff fd2f 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800247a:	4818      	ldr	r0, [pc, #96]	; (80024dc <MX_TIM3_Init+0xe4>)
 800247c:	f005 ff24 	bl	80082c8 <HAL_TIM_PWM_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002486:	f7ff fd27 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4810      	ldr	r0, [pc, #64]	; (80024dc <MX_TIM3_Init+0xe4>)
 800249a:	f007 fa2d 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80024a4:	f7ff fd18 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a8:	2360      	movs	r3, #96	; 0x60
 80024aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <MX_TIM3_Init+0xe4>)
 80024c0:	f006 fb7a 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80024ca:	f7ff fd05 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <MX_TIM3_Init+0xe4>)
 80024d0:	f000 f91e 	bl	8002710 <HAL_TIM_MspPostInit>

}
 80024d4:	bf00      	nop
 80024d6:	3738      	adds	r7, #56	; 0x38
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200009a0 	.word	0x200009a0
 80024e0:	40000400 	.word	0x40000400

080024e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	; 0x38
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <MX_TIM4_Init+0xe8>)
 800251a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <MX_TIM4_Init+0xe4>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <MX_TIM4_Init+0xe4>)
 800252a:	22d7      	movs	r2, #215	; 0xd7
 800252c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800253a:	4823      	ldr	r0, [pc, #140]	; (80025c8 <MX_TIM4_Init+0xe4>)
 800253c:	f005 fdf5 	bl	800812a <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002546:	f7ff fcc7 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002554:	4619      	mov	r1, r3
 8002556:	481c      	ldr	r0, [pc, #112]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002558:	f006 fc42 	bl	8008de0 <HAL_TIM_ConfigClockSource>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002562:	f7ff fcb9 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002566:	4818      	ldr	r0, [pc, #96]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002568:	f005 feae 	bl	80082c8 <HAL_TIM_PWM_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002572:	f7ff fcb1 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	4619      	mov	r1, r3
 8002584:	4810      	ldr	r0, [pc, #64]	; (80025c8 <MX_TIM4_Init+0xe4>)
 8002586:	f007 f9b7 	bl	80098f8 <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002590:	f7ff fca2 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002594:	2360      	movs	r3, #96	; 0x60
 8002596:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	4619      	mov	r1, r3
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <MX_TIM4_Init+0xe4>)
 80025ac:	f006 fb04 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80025b6:	f7ff fc8f 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025ba:	4803      	ldr	r0, [pc, #12]	; (80025c8 <MX_TIM4_Init+0xe4>)
 80025bc:	f000 f8a8 	bl	8002710 <HAL_TIM_MspPostInit>

}
 80025c0:	bf00      	nop
 80025c2:	3738      	adds	r7, #56	; 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200009ec 	.word	0x200009ec
 80025cc:	40000800 	.word	0x40000800

080025d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a45      	ldr	r2, [pc, #276]	; (80026f4 <HAL_TIM_Base_MspInit+0x124>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d142      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e2:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a44      	ldr	r2, [pc, #272]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 80025fc:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_TIM_Base_MspInit+0x130>)
 80025fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002602:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002606:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002608:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800261c:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 800261e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002622:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800263e:	482f      	ldr	r0, [pc, #188]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002640:	f001 f8c0 	bl	80037c4 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800264a:	f7ff fc45 	bl	8001ed8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
 8002654:	4a29      	ldr	r2, [pc, #164]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_TIM_Base_MspInit+0x12c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002666:	e040      	b.n	80026ea <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a25      	ldr	r2, [pc, #148]	; (8002704 <HAL_TIM_Base_MspInit+0x134>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d13b      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_TIM_Base_MspInit+0x128>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_TIM_Base_MspInit+0x13c>)
 800268e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 8002692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002696:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026aa:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80026ce:	480e      	ldr	r0, [pc, #56]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026d0:	f001 f878 	bl	80037c4 <HAL_DMA_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80026da:	f7ff fbfd 	bl	8001ed8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a09      	ldr	r2, [pc, #36]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
 80026e4:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_TIM_Base_MspInit+0x138>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	20000a38 	.word	0x20000a38
 8002700:	40026070 	.word	0x40026070
 8002704:	40000800 	.word	0x40000800
 8002708:	20000a98 	.word	0x20000a98
 800270c:	40026010 	.word	0x40026010

08002710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_TIM_MspPostInit+0xa8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d11c      	bne.n	800276c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a21      	ldr	r2, [pc, #132]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800274a:	2310      	movs	r3, #16
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275a:	2302      	movs	r3, #2
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4816      	ldr	r0, [pc, #88]	; (80027c0 <HAL_TIM_MspPostInit+0xb0>)
 8002766:	f001 fccb 	bl	8004100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800276a:	e021      	b.n	80027b0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_TIM_MspPostInit+0xb4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d11c      	bne.n	80027b0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_TIM_MspPostInit+0xac>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800278e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027a0:	2302      	movs	r3, #2
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <HAL_TIM_MspPostInit+0xb8>)
 80027ac:	f001 fca8 	bl	8004100 <HAL_GPIO_Init>
}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40020c00 	.word	0x40020c00

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d0:	480d      	ldr	r0, [pc, #52]	; (8002808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027d2:	490e      	ldr	r1, [pc, #56]	; (800280c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d8:	e002      	b.n	80027e0 <LoopCopyDataInit>

080027da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027de:	3304      	adds	r3, #4

080027e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e4:	d3f9      	bcc.n	80027da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027e8:	4c0b      	ldr	r4, [pc, #44]	; (8002818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ec:	e001      	b.n	80027f2 <LoopFillZerobss>

080027ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f0:	3204      	adds	r2, #4

080027f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f4:	d3fb      	bcc.n	80027ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027f6:	f7ff fded 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f027 f84b 	bl	8029894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff fabb 	bl	8001d78 <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002804:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8002810:	08164660 	.word	0x08164660
  ldr r2, =_sbss
 8002814:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8002818:	2003c540 	.word	0x2003c540

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>

0800281e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002822:	2003      	movs	r0, #3
 8002824:	f000 feaf 	bl	8003586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002828:	200f      	movs	r0, #15
 800282a:	f7ff fc55 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282e:	f7ff fc2b 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x20>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_IncTick+0x24>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_IncTick+0x24>)
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000001c 	.word	0x2000001c
 800285c:	20000af8 	.word	0x20000af8

08002860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return uwTick;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_GetTick+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000af8 	.word	0x20000af8

08002878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002880:	f7ff ffee 	bl	8002860 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d005      	beq.n	800289e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_Delay+0x44>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800289e:	bf00      	nop
 80028a0:	f7ff ffde 	bl	8002860 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d8f7      	bhi.n	80028a0 <HAL_Delay+0x28>
  {
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000001c 	.word	0x2000001c

080028c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e031      	b.n	800293a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f928 	bl	8000b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_ADC_Init+0x84>)
 8002904:	4013      	ands	r3, r2
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f970 	bl	8002bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
 800292a:	e001      	b.n	8002930 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	ffffeefd 	.word	0xffffeefd

08002948 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1c>
 8002960:	2302      	movs	r3, #2
 8002962:	e136      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x28a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b09      	cmp	r3, #9
 8002972:	d93a      	bls.n	80029ea <HAL_ADC_ConfigChannel+0xa2>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800297c:	d035      	beq.n	80029ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68d9      	ldr	r1, [r3, #12]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	3b1e      	subs	r3, #30
 8002994:	2207      	movs	r2, #7
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	400a      	ands	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a8d      	ldr	r2, [pc, #564]	; (8002be0 <HAL_ADC_ConfigChannel+0x298>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68d9      	ldr	r1, [r3, #12]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	061a      	lsls	r2, r3, #24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c2:	e035      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4403      	add	r3, r0
 80029dc:	3b1e      	subs	r3, #30
 80029de:	409a      	lsls	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e8:	e022      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6919      	ldr	r1, [r3, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	2207      	movs	r2, #7
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43da      	mvns	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4403      	add	r3, r0
 8002a26:	409a      	lsls	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d824      	bhi.n	8002a82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b05      	subs	r3, #5
 8002a4a:	221f      	movs	r2, #31
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43da      	mvns	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	400a      	ands	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b05      	subs	r3, #5
 8002a74:	fa00 f203 	lsl.w	r2, r0, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a80:	e04c      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d824      	bhi.n	8002ad4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b23      	subs	r3, #35	; 0x23
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b23      	subs	r3, #35	; 0x23
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad2:	e023      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b41      	subs	r3, #65	; 0x41
 8002ae6:	221f      	movs	r2, #31
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43da      	mvns	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	400a      	ands	r2, r1
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b41      	subs	r3, #65	; 0x41
 8002b10:	fa00 f203 	lsl.w	r2, r0, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a30      	ldr	r2, [pc, #192]	; (8002be4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10a      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x1f4>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10f      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x21e>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d10b      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_ADC_ConfigChannel+0x29c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d12b      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x280>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_ADC_ConfigChannel+0x298>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x23a>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d122      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_ADC_ConfigChannel+0x298>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d111      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_ADC_ConfigChannel+0x2a4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bba:	e002      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	10000012 	.word	0x10000012
 8002be4:	40012000 	.word	0x40012000
 8002be8:	40012300 	.word	0x40012300
 8002bec:	20000014 	.word	0x20000014
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bfc:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <ADC_Init+0x1ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <ADC_Init+0x1ec>)
 8002c02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <ADC_Init+0x1ec>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4973      	ldr	r1, [pc, #460]	; (8002de0 <ADC_Init+0x1ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <ADC_Init+0x1f0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e00f      	b.n	8002cee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0202 	bic.w	r2, r2, #2
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	005a      	lsls	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	3b01      	subs	r3, #1
 8002d48:	035a      	lsls	r2, r3, #13
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e007      	b.n	8002d64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	051a      	lsls	r2, r3, #20
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da6:	025a      	lsls	r2, r3, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	029a      	lsls	r2, r3, #10
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40012300 	.word	0x40012300
 8002de4:	0f000001 	.word	0x0f000001

08002de8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0ed      	b.n	8002fd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f948 	bl	800109c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7ff fd20 	bl	8002860 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e22:	e012      	b.n	8002e4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e24:	f7ff fd1c 	bl	8002860 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b0a      	cmp	r3, #10
 8002e30:	d90b      	bls.n	8002e4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2205      	movs	r2, #5
 8002e42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0c5      	b.n	8002fd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0e5      	beq.n	8002e24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0202 	bic.w	r2, r2, #2
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e68:	f7ff fcfa 	bl	8002860 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e6e:	e012      	b.n	8002e96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e70:	f7ff fcf6 	bl	8002860 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d90b      	bls.n	8002e96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e09f      	b.n	8002fd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7e5b      	ldrb	r3, [r3, #25]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e9b      	ldrb	r3, [r3, #26]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0220 	orr.w	r2, r2, #32
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e007      	b.n	8002f22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0220 	bic.w	r2, r2, #32
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7edb      	ldrb	r3, [r3, #27]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d108      	bne.n	8002f3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0210 	bic.w	r2, r2, #16
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e007      	b.n	8002f4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0210 	orr.w	r2, r2, #16
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0208 	orr.w	r2, r2, #8
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e007      	b.n	8002f76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7f5b      	ldrb	r3, [r3, #29]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0204 	orr.w	r2, r2, #4
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e007      	b.n	8002fa0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	ea42 0103 	orr.w	r1, r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_ConfigFilter+0x26>
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b02      	cmp	r3, #2
 8003002:	f040 80c7 	bne.w	8003194 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_CAN_ConfigFilter+0x1d0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d001      	beq.n	8003014 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003010:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003012:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	4a63      	ldr	r2, [pc, #396]	; (80031b4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003032:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	431a      	orrs	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2201      	movs	r2, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d123      	bne.n	80030c2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	43db      	mvns	r3, r3
 8003084:	401a      	ands	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800309c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3248      	adds	r2, #72	; 0x48
 80030a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	3348      	adds	r3, #72	; 0x48
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d122      	bne.n	8003110 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3248      	adds	r2, #72	; 0x48
 80030f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003104:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003106:	6979      	ldr	r1, [r7, #20]
 8003108:	3348      	adds	r3, #72	; 0x48
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800312a:	e007      	b.n	800313c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003156:	e007      	b.n	8003168 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	431a      	orrs	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e006      	b.n	80031a2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40003400 	.word	0x40003400
 80031b4:	40006400 	.word	0x40006400

080031b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d12e      	bne.n	800322a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031e4:	f7ff fb3c 	bl	8002860 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031ea:	e012      	b.n	8003212 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ec:	f7ff fb38 	bl	8002860 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d90b      	bls.n	8003212 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e012      	b.n	8003238 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e006      	b.n	8003238 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d003      	beq.n	800326c <HAL_CAN_AddTxMessage+0x2c>
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	2b02      	cmp	r3, #2
 8003268:	f040 80ad 	bne.w	80033c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8095 	beq.w	80033b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	0e1b      	lsrs	r3, r3, #24
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003296:	2201      	movs	r2, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	6809      	ldr	r1, [r1, #0]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3318      	adds	r3, #24
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3318      	adds	r3, #24
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	440b      	add	r3, r1
 80032e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6819      	ldr	r1, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3318      	adds	r3, #24
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	440b      	add	r3, r1
 80032f4:	3304      	adds	r3, #4
 80032f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	7d1b      	ldrb	r3, [r3, #20]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d111      	bne.n	8003324 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3318      	adds	r3, #24
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6811      	ldr	r1, [r2, #0]
 8003314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3318      	adds	r3, #24
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	440b      	add	r3, r1
 8003320:	3304      	adds	r3, #4
 8003322:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3307      	adds	r3, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	061a      	lsls	r2, r3, #24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3306      	adds	r3, #6
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3305      	adds	r3, #5
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	4313      	orrs	r3, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	3204      	adds	r2, #4
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	4610      	mov	r0, r2
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	6811      	ldr	r1, [r2, #0]
 800334c:	ea43 0200 	orr.w	r2, r3, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	440b      	add	r3, r1
 8003356:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800335a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3303      	adds	r3, #3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	061a      	lsls	r2, r3, #24
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3302      	adds	r3, #2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3301      	adds	r3, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4313      	orrs	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	4610      	mov	r0, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6811      	ldr	r1, [r2, #0]
 8003382:	ea43 0200 	orr.w	r2, r3, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	440b      	add	r3, r1
 800338c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003390:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3318      	adds	r3, #24
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	6811      	ldr	r1, [r2, #0]
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3318      	adds	r3, #24
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	440b      	add	r3, r1
 80033b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e00e      	b.n	80033d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e006      	b.n	80033d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3724      	adds	r7, #36	; 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <HAL_CAN_ActivateNotification+0x1e>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d109      	bne.n	8003412 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6959      	ldr	r1, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e006      	b.n	8003420 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <__NVIC_SetPriorityGrouping+0x40>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	4313      	orrs	r3, r2
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <__NVIC_SetPriorityGrouping+0x40>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00
 8003470:	05fa0000 	.word	0x05fa0000

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	; (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db0a      	blt.n	80034f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	490c      	ldr	r1, [pc, #48]	; (8003518 <__NVIC_SetPriority+0x4c>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	440b      	add	r3, r1
 80034f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f4:	e00a      	b.n	800350c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4908      	ldr	r1, [pc, #32]	; (800351c <__NVIC_SetPriority+0x50>)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	3b04      	subs	r3, #4
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	440b      	add	r3, r1
 800350a:	761a      	strb	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000e100 	.word	0xe000e100
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf28      	it	cs
 800353e:	2304      	movcs	r3, #4
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3304      	adds	r3, #4
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b03      	subs	r3, #3
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43d9      	mvns	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
         );
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	; 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff4c 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ae:	f7ff ff61 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f7ff ffb1 	bl	8003520 <NVIC_EncodePriority>
 80035be:	4602      	mov	r2, r0
 80035c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff80 	bl	80034cc <__NVIC_SetPriority>
}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff54 	bl	8003490 <__NVIC_EnableIRQ>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e054      	b.n	80036ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7f5b      	ldrb	r3, [r3, #29]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fec4 	bl	80013a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	791b      	ldrb	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_CRC_Init+0xc4>)
 800362c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0218 	bic.w	r2, r2, #24
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	e00c      	b.n	800365a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f834 	bl	80036b8 <HAL_CRCEx_Polynomial_Set>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e028      	b.n	80036ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	795b      	ldrb	r3, [r3, #5]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f04f 32ff 	mov.w	r2, #4294967295
 800366a:	611a      	str	r2, [r3, #16]
 800366c:	e004      	b.n	8003678 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6912      	ldr	r2, [r2, #16]
 8003676:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	04c11db7 	.word	0x04c11db7

080036b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80036c8:	231f      	movs	r3, #31
 80036ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80036cc:	bf00      	nop
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	613a      	str	r2, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <HAL_CRCEx_Polynomial_Set+0x34>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b18      	cmp	r3, #24
 80036f0:	d846      	bhi.n	8003780 <HAL_CRCEx_Polynomial_Set+0xc8>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003787 	.word	0x08003787
 80036fc:	08003781 	.word	0x08003781
 8003700:	08003781 	.word	0x08003781
 8003704:	08003781 	.word	0x08003781
 8003708:	08003781 	.word	0x08003781
 800370c:	08003781 	.word	0x08003781
 8003710:	08003781 	.word	0x08003781
 8003714:	08003781 	.word	0x08003781
 8003718:	08003775 	.word	0x08003775
 800371c:	08003781 	.word	0x08003781
 8003720:	08003781 	.word	0x08003781
 8003724:	08003781 	.word	0x08003781
 8003728:	08003781 	.word	0x08003781
 800372c:	08003781 	.word	0x08003781
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003769 	.word	0x08003769
 800373c:	08003781 	.word	0x08003781
 8003740:	08003781 	.word	0x08003781
 8003744:	08003781 	.word	0x08003781
 8003748:	08003781 	.word	0x08003781
 800374c:	08003781 	.word	0x08003781
 8003750:	08003781 	.word	0x08003781
 8003754:	08003781 	.word	0x08003781
 8003758:	0800375d 	.word	0x0800375d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d913      	bls.n	800378a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003766:	e010      	b.n	800378a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d90f      	bls.n	800378e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003772:	e00c      	b.n	800378e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	d90b      	bls.n	8003792 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800377e:	e008      	b.n	8003792 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
      break;
 8003784:	e006      	b.n	8003794 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003792:	bf00      	nop
  }
  if (status == HAL_OK)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 0118 	bic.w	r1, r3, #24
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff f846 	bl	8002860 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e099      	b.n	8003914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003800:	e00f      	b.n	8003822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003802:	f7ff f82d 	bl	8002860 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b05      	cmp	r3, #5
 800380e:	d908      	bls.n	8003822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2203      	movs	r2, #3
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e078      	b.n	8003914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e8      	bne.n	8003802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_DMA_Init+0x158>)
 800383c:	4013      	ands	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d107      	bne.n	800388c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4313      	orrs	r3, r2
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d117      	bne.n	80038e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 faa5 	bl	8003e18 <DMA_CheckFifoParam>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038e2:	2301      	movs	r3, #1
 80038e4:	e016      	b.n	8003914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa5c 	bl	8003dac <DMA_CalcBaseAndBitshift>
 80038f4:	4603      	mov	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	223f      	movs	r2, #63	; 0x3f
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	e010803f 	.word	0xe010803f

08003920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Start_IT+0x26>
 8003942:	2302      	movs	r3, #2
 8003944:	e048      	b.n	80039d8 <HAL_DMA_Start_IT+0xb8>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d137      	bne.n	80039ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f9ee 	bl	8003d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	223f      	movs	r2, #63	; 0x3f
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0216 	orr.w	r2, r2, #22
 800398e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e005      	b.n	80039d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
 80039d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	; 0x80
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00c      	b.n	8003a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2205      	movs	r2, #5
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003a30:	4b8e      	ldr	r3, [pc, #568]	; (8003c6c <HAL_DMA_IRQHandler+0x248>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <HAL_DMA_IRQHandler+0x24c>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2208      	movs	r2, #8
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01a      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	2204      	movs	r2, #4
 8003acc:	409a      	lsls	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2204      	movs	r2, #4
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	2210      	movs	r2, #16
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d043      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2210      	movs	r2, #16
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d024      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e01f      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e016      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0208 	bic.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2220      	movs	r2, #32
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808f 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8087 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2220      	movs	r2, #32
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d136      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0216 	bic.w	r2, r2, #22
 8003bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_DMA_IRQHandler+0x1da>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0208 	bic.w	r2, r2, #8
 8003c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	223f      	movs	r2, #63	; 0x3f
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d07e      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
        }
        return;
 8003c3a:	e079      	b.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01d      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d031      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e02c      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
 8003c6a:	bf00      	nop
 8003c6c:	20000014 	.word	0x20000014
 8003c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
 8003c84:	e01e      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0210 	bic.w	r2, r2, #16
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d032      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2205      	movs	r2, #5
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d307      	bcc.n	8003d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f2      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x2cc>
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e000      	b.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d108      	bne.n	8003d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d8e:	e007      	b.n	8003da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3b10      	subs	r3, #16
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <DMA_CalcBaseAndBitshift+0x60>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dc6:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <DMA_CalcBaseAndBitshift+0x64>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d908      	bls.n	8003dec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <DMA_CalcBaseAndBitshift+0x68>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	659a      	str	r2, [r3, #88]	; 0x58
 8003dea:	e006      	b.n	8003dfa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <DMA_CalcBaseAndBitshift+0x68>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	aaaaaaab 	.word	0xaaaaaaab
 8003e10:	0802ef58 	.word	0x0802ef58
 8003e14:	fffffc00 	.word	0xfffffc00

08003e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11f      	bne.n	8003e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d856      	bhi.n	8003ee6 <DMA_CheckFifoParam+0xce>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <DMA_CheckFifoParam+0x28>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e63 	.word	0x08003e63
 8003e48:	08003e51 	.word	0x08003e51
 8003e4c:	08003ee7 	.word	0x08003ee7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d046      	beq.n	8003eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e60:	e043      	b.n	8003eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e6a:	d140      	bne.n	8003eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e03d      	b.n	8003eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7a:	d121      	bne.n	8003ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d837      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xda>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <DMA_CheckFifoParam+0x70>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003e9f 	.word	0x08003e9f
 8003e90:	08003e99 	.word	0x08003e99
 8003e94:	08003eb1 	.word	0x08003eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e030      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d025      	beq.n	8003ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eae:	e022      	b.n	8003ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eb8:	d11f      	bne.n	8003efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ebe:	e01c      	b.n	8003efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d903      	bls.n	8003ece <DMA_CheckFifoParam+0xb6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ecc:	e018      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed2:	e015      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e00b      	b.n	8003efe <DMA_CheckFifoParam+0xe6>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e00a      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003eea:	bf00      	nop
 8003eec:	e008      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e006      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e004      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e002      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
    }
  } 
  
  return status; 
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e049      	b.n	8003fb6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fab0 	bl	800149c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	f023 0107 	bic.w	r1, r3, #7
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_DMA2D_Init+0xb0>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68d1      	ldr	r1, [r2, #12]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	051a      	lsls	r2, r3, #20
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	055b      	lsls	r3, r3, #21
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	ffffc000 	.word	0xffffc000

08003fc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_DMA2D_ConfigLayer+0x20>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e084      	b.n	80040ee <HAL_DMA2D_ConfigLayer+0x12a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3320      	adds	r3, #32
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004018:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004024:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_DMA2D_ConfigLayer+0x138>)
 8004026:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b0a      	cmp	r3, #10
 800402e:	d003      	beq.n	8004038 <HAL_DMA2D_ConfigLayer+0x74>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d107      	bne.n	8004048 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e005      	b.n	8004054 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d120      	bne.n	800409c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	ea02 0103 	and.w	r1, r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	430a      	orrs	r2, r1
 8004070:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b0a      	cmp	r3, #10
 8004082:	d003      	beq.n	800408c <HAL_DMA2D_ConfigLayer+0xc8>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b09      	cmp	r3, #9
 800408a:	d127      	bne.n	80040dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
 800409a:	e01f      	b.n	80040dc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	ea02 0103 	and.w	r1, r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b0a      	cmp	r3, #10
 80040c4:	d003      	beq.n	80040ce <HAL_DMA2D_ConfigLayer+0x10a>
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	d106      	bne.n	80040dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040da:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	ff33000f 	.word	0xff33000f

08004100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e175      	b.n	800440c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004120:	2201      	movs	r2, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	429a      	cmp	r2, r3
 800413a:	f040 8164 	bne.w	8004406 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d005      	beq.n	8004156 <HAL_GPIO_Init+0x56>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d130      	bne.n	80041b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	2203      	movs	r2, #3
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800418c:	2201      	movs	r2, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0201 	and.w	r2, r3, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d017      	beq.n	80041f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d123      	bne.n	8004248 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	08da      	lsrs	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3208      	adds	r2, #8
 8004208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	08da      	lsrs	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3208      	adds	r2, #8
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80be 	beq.w	8004406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428a:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_GPIO_Init+0x324>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_GPIO_Init+0x324>)
 8004290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004294:	6453      	str	r3, [r2, #68]	; 0x44
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_GPIO_Init+0x324>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80042a2:	4a61      	ldr	r2, [pc, #388]	; (8004428 <HAL_GPIO_Init+0x328>)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	220f      	movs	r2, #15
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_GPIO_Init+0x32c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d037      	beq.n	800433e <HAL_GPIO_Init+0x23e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a57      	ldr	r2, [pc, #348]	; (8004430 <HAL_GPIO_Init+0x330>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d031      	beq.n	800433a <HAL_GPIO_Init+0x23a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a56      	ldr	r2, [pc, #344]	; (8004434 <HAL_GPIO_Init+0x334>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02b      	beq.n	8004336 <HAL_GPIO_Init+0x236>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a55      	ldr	r2, [pc, #340]	; (8004438 <HAL_GPIO_Init+0x338>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d025      	beq.n	8004332 <HAL_GPIO_Init+0x232>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_GPIO_Init+0x33c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01f      	beq.n	800432e <HAL_GPIO_Init+0x22e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a53      	ldr	r2, [pc, #332]	; (8004440 <HAL_GPIO_Init+0x340>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d019      	beq.n	800432a <HAL_GPIO_Init+0x22a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a52      	ldr	r2, [pc, #328]	; (8004444 <HAL_GPIO_Init+0x344>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_GPIO_Init+0x226>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a51      	ldr	r2, [pc, #324]	; (8004448 <HAL_GPIO_Init+0x348>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00d      	beq.n	8004322 <HAL_GPIO_Init+0x222>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a50      	ldr	r2, [pc, #320]	; (800444c <HAL_GPIO_Init+0x34c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <HAL_GPIO_Init+0x21e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a4f      	ldr	r2, [pc, #316]	; (8004450 <HAL_GPIO_Init+0x350>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <HAL_GPIO_Init+0x21a>
 8004316:	2309      	movs	r3, #9
 8004318:	e012      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800431a:	230a      	movs	r3, #10
 800431c:	e010      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800431e:	2308      	movs	r3, #8
 8004320:	e00e      	b.n	8004340 <HAL_GPIO_Init+0x240>
 8004322:	2307      	movs	r3, #7
 8004324:	e00c      	b.n	8004340 <HAL_GPIO_Init+0x240>
 8004326:	2306      	movs	r3, #6
 8004328:	e00a      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800432a:	2305      	movs	r3, #5
 800432c:	e008      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800432e:	2304      	movs	r3, #4
 8004330:	e006      	b.n	8004340 <HAL_GPIO_Init+0x240>
 8004332:	2303      	movs	r3, #3
 8004334:	e004      	b.n	8004340 <HAL_GPIO_Init+0x240>
 8004336:	2302      	movs	r3, #2
 8004338:	e002      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_Init+0x240>
 800433e:	2300      	movs	r3, #0
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	f002 0203 	and.w	r2, r2, #3
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004350:	4935      	ldr	r1, [pc, #212]	; (8004428 <HAL_GPIO_Init+0x328>)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_GPIO_Init+0x354>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004382:	4a34      	ldr	r2, [pc, #208]	; (8004454 <HAL_GPIO_Init+0x354>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <HAL_GPIO_Init+0x354>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043ac:	4a29      	ldr	r2, [pc, #164]	; (8004454 <HAL_GPIO_Init+0x354>)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_GPIO_Init+0x354>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043d6:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_GPIO_Init+0x354>)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_GPIO_Init+0x354>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_GPIO_Init+0x354>)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3301      	adds	r3, #1
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b0f      	cmp	r3, #15
 8004410:	f67f ae86 	bls.w	8004120 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	40013800 	.word	0x40013800
 800442c:	40020000 	.word	0x40020000
 8004430:	40020400 	.word	0x40020400
 8004434:	40020800 	.word	0x40020800
 8004438:	40020c00 	.word	0x40020c00
 800443c:	40021000 	.word	0x40021000
 8004440:	40021400 	.word	0x40021400
 8004444:	40021800 	.word	0x40021800
 8004448:	40021c00 	.word	0x40021c00
 800444c:	40022000 	.word	0x40022000
 8004450:	40022400 	.word	0x40022400
 8004454:	40013c00 	.word	0x40013c00

08004458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e0d9      	b.n	8004628 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004474:	2201      	movs	r2, #1
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	f040 80c9 	bne.w	8004622 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004490:	4a6b      	ldr	r2, [pc, #428]	; (8004640 <HAL_GPIO_DeInit+0x1e8>)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	3302      	adds	r3, #2
 8004498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	220f      	movs	r2, #15
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a63      	ldr	r2, [pc, #396]	; (8004644 <HAL_GPIO_DeInit+0x1ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d037      	beq.n	800452a <HAL_GPIO_DeInit+0xd2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a62      	ldr	r2, [pc, #392]	; (8004648 <HAL_GPIO_DeInit+0x1f0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d031      	beq.n	8004526 <HAL_GPIO_DeInit+0xce>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a61      	ldr	r2, [pc, #388]	; (800464c <HAL_GPIO_DeInit+0x1f4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02b      	beq.n	8004522 <HAL_GPIO_DeInit+0xca>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a60      	ldr	r2, [pc, #384]	; (8004650 <HAL_GPIO_DeInit+0x1f8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d025      	beq.n	800451e <HAL_GPIO_DeInit+0xc6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a5f      	ldr	r2, [pc, #380]	; (8004654 <HAL_GPIO_DeInit+0x1fc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <HAL_GPIO_DeInit+0xc2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a5e      	ldr	r2, [pc, #376]	; (8004658 <HAL_GPIO_DeInit+0x200>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d019      	beq.n	8004516 <HAL_GPIO_DeInit+0xbe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a5d      	ldr	r2, [pc, #372]	; (800465c <HAL_GPIO_DeInit+0x204>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_GPIO_DeInit+0xba>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a5c      	ldr	r2, [pc, #368]	; (8004660 <HAL_GPIO_DeInit+0x208>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00d      	beq.n	800450e <HAL_GPIO_DeInit+0xb6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a5b      	ldr	r2, [pc, #364]	; (8004664 <HAL_GPIO_DeInit+0x20c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <HAL_GPIO_DeInit+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a5a      	ldr	r2, [pc, #360]	; (8004668 <HAL_GPIO_DeInit+0x210>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_GPIO_DeInit+0xae>
 8004502:	2309      	movs	r3, #9
 8004504:	e012      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004506:	230a      	movs	r3, #10
 8004508:	e010      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800450a:	2308      	movs	r3, #8
 800450c:	e00e      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800450e:	2307      	movs	r3, #7
 8004510:	e00c      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004512:	2306      	movs	r3, #6
 8004514:	e00a      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004516:	2305      	movs	r3, #5
 8004518:	e008      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800451a:	2304      	movs	r3, #4
 800451c:	e006      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800451e:	2303      	movs	r3, #3
 8004520:	e004      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004522:	2302      	movs	r3, #2
 8004524:	e002      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800452a:	2300      	movs	r3, #0
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	f002 0203 	and.w	r2, r2, #3
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	4093      	lsls	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d132      	bne.n	80045a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800453c:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_GPIO_DeInit+0x214>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	43db      	mvns	r3, r3
 8004544:	4949      	ldr	r1, [pc, #292]	; (800466c <HAL_GPIO_DeInit+0x214>)
 8004546:	4013      	ands	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800454a:	4b48      	ldr	r3, [pc, #288]	; (800466c <HAL_GPIO_DeInit+0x214>)
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	43db      	mvns	r3, r3
 8004552:	4946      	ldr	r1, [pc, #280]	; (800466c <HAL_GPIO_DeInit+0x214>)
 8004554:	4013      	ands	r3, r2
 8004556:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004558:	4b44      	ldr	r3, [pc, #272]	; (800466c <HAL_GPIO_DeInit+0x214>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	4942      	ldr	r1, [pc, #264]	; (800466c <HAL_GPIO_DeInit+0x214>)
 8004562:	4013      	ands	r3, r2
 8004564:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_GPIO_DeInit+0x214>)
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	43db      	mvns	r3, r3
 800456e:	493f      	ldr	r1, [pc, #252]	; (800466c <HAL_GPIO_DeInit+0x214>)
 8004570:	4013      	ands	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	220f      	movs	r2, #15
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004584:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_GPIO_DeInit+0x1e8>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	43da      	mvns	r2, r3
 8004594:	482a      	ldr	r0, [pc, #168]	; (8004640 <HAL_GPIO_DeInit+0x1e8>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	400a      	ands	r2, r1
 800459c:	3302      	adds	r3, #2
 800459e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	2103      	movs	r1, #3
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	401a      	ands	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3208      	adds	r2, #8
 80045c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	220f      	movs	r2, #15
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	08d2      	lsrs	r2, r2, #3
 80045d8:	4019      	ands	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3208      	adds	r2, #8
 80045de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2103      	movs	r1, #3
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	2101      	movs	r1, #1
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2103      	movs	r1, #3
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	401a      	ands	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	3301      	adds	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b0f      	cmp	r3, #15
 800462c:	f67f af22 	bls.w	8004474 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40013800 	.word	0x40013800
 8004644:	40020000 	.word	0x40020000
 8004648:	40020400 	.word	0x40020400
 800464c:	40020800 	.word	0x40020800
 8004650:	40020c00 	.word	0x40020c00
 8004654:	40021000 	.word	0x40021000
 8004658:	40021400 	.word	0x40021400
 800465c:	40021800 	.word	0x40021800
 8004660:	40021c00 	.word	0x40021c00
 8004664:	40022000 	.word	0x40022000
 8004668:	40022400 	.word	0x40022400
 800466c:	40013c00 	.word	0x40013c00

08004670 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e078      	b.n	8004774 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd f958 	bl	800194c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_JPEG_Init+0x10c>)
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_JPEG_Init+0x110>)
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fd0b 	bl	8005148 <JPEG_Set_HuffEnc_Mem>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e018      	b.n	8004774 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004750:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	0802f100 	.word	0x0802f100
 8004780:	0802f140 	.word	0x0802f140

08004784 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_JPEG_Decode_DMA+0x20>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_JPEG_Decode_DMA+0x20>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04c      	b.n	8004842 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_JPEG_Decode_DMA+0x32>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e045      	b.n	8004842 <HAL_JPEG_Decode_DMA+0xbe>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d134      	bne.n	8004834 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2204      	movs	r2, #4
 80047ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f023 020f 	bic.w	r2, r3, #15
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f043 020e 	orr.w	r2, r3, #14
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 ff1c 	bl	800564c <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 ff95 	bl	8005744 <JPEG_DMA_StartProcess>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00f      	beq.n	8004840 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2206      	movs	r2, #6
 8004824:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e006      	b.n	8004842 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
 800483e:	e000      	b.n	8004842 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d129      	bne.n	80048b8 <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004880:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800489e:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80048ac:	43da      	mvns	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	400a      	ands	r2, r1
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
 80048b6:	e02c      	b.n	8004912 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d126      	bne.n	8004912 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f043 0306 	orr.w	r3, r3, #6
 80048e0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80048fe:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43da      	mvns	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	400a      	ands	r2, r1
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0a9      	b.n	8004a92 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b0c      	cmp	r3, #12
 8004948:	d176      	bne.n	8004a38 <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d030      	beq.n	80049b6 <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004966:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f023 0203 	bic.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01c      	beq.n	80049b6 <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	4619      	mov	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3340      	adds	r3, #64	; 0x40
 800498c:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	f7fe ffc4 	bl	8003920 <HAL_DMA_Start_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2206      	movs	r2, #6
 80049ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e06d      	b.n	8004a92 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d030      	beq.n	8004a22 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 ffa3 	bl	8005924 <JPEG_DMA_PollResidualData>
 80049de:	e020      	b.n	8004a22 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049e6:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3344      	adds	r3, #68	; 0x44
 80049f2:	4619      	mov	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	f7fe ff8e 	bl	8003920 <HAL_DMA_Start_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	f043 0204 	orr.w	r2, r3, #4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2206      	movs	r2, #6
 8004a1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e037      	b.n	8004a92 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
 8004a36:	e02b      	b.n	8004a90 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d125      	bne.n	8004a90 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f043 0306 	orr.w	r3, r3, #6
 8004a60:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004a7e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_JPEG_GetState>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG state
  */
HAL_JPEG_STATETypeDef HAL_JPEG_GetState(JPEG_HandleTypeDef *hjpeg)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  return hjpeg->State;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004b04:	b2db      	uxtb	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_JPEG_GetError>:
  * @param  hjpeg  pointer to a JPEG_HandleTypeDef structure that contains
  *              the configuration information for the specified JPEG.
  * @retval JPEG Error Code
  */
uint32_t HAL_JPEG_GetError(JPEG_HandleTypeDef *hjpeg)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  return hjpeg->ErrorCode;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b08b      	sub	sp, #44	; 0x2c
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e020      	b.n	8004b84 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	4413      	add	r3, r2
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d90f      	bls.n	8004b78 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e055      	b.n	8004c08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	440b      	add	r3, r1
 8004b66:	3201      	adds	r2, #1
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
      p++;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	623b      	str	r3, [r7, #32]
      i--;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	3b01      	subs	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ee      	bne.n	8004b5c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	d9db      	bls.n	8004b42 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	617b      	str	r3, [r7, #20]
  p = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8004ba8:	e027      	b.n	8004bfa <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	601a      	str	r2, [r3, #0]
      p++;
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	623b      	str	r3, [r7, #32]
      code++;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d0eb      	beq.n	8004baa <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b1f      	cmp	r3, #31
 8004bd6:	d901      	bls.n	8004bdc <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e015      	b.n	8004c08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004bdc:	2201      	movs	r2, #1
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d301      	bcc.n	8004bee <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e00c      	b.n	8004c08 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	61bb      	str	r3, [r7, #24]
    si++;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	4413      	add	r3, r2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1dd      	bne.n	8004bc2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	372c      	adds	r7, #44	; 0x2c
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004c20:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004c24:	6018      	str	r0, [r3, #0]
 8004c26:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004c2a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004c2e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004c30:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004c34:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	f107 020c 	add.w	r2, r7, #12
 8004c42:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004c46:	f7ff ff70 	bl	8004b2a <JPEG_Bits_To_SizeCodes>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004c50:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004c58:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004c5c:	e075      	b.n	8004d4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004c64:	e067      	b.n	8004d36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004c66:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004c6a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004c74:	4413      	add	r3, r2
 8004c76:	3310      	adds	r3, #16
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8004c7e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004c86:	23a0      	movs	r3, #160	; 0xa0
 8004c88:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004c8c:	e021      	b.n	8004cd2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004c8e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004c92:	2bf0      	cmp	r3, #240	; 0xf0
 8004c94:	d103      	bne.n	8004c9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8004c96:	23a1      	movs	r3, #161	; 0xa1
 8004c98:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004c9c:	e019      	b.n	8004cd2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004c9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8004cac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8004cb8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004cca:	4413      	add	r3, r2
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004cd2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004cd6:	2ba1      	cmp	r3, #161	; 0xa1
 8004cd8:	d901      	bls.n	8004cde <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e035      	b.n	8004d4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004cde:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004ce2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004ce6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004cea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cee:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004cf2:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004cfc:	3328      	adds	r3, #40	; 0x28
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004d04:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004d08:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8004d0c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b2d9      	uxtb	r1, r3
 8004d18:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004d1c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004d26:	4413      	add	r3, r2
 8004d28:	460a      	mov	r2, r1
 8004d2a:	701a      	strb	r2, [r3, #0]
      k++;
 8004d2c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004d30:	3301      	adds	r3, #1
 8004d32:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004d36:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004d3a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d38e      	bcc.n	8004c66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004d60:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004d64:	6018      	str	r0, [r3, #0]
 8004d66:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004d6a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004d6e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004d70:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004d74:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004d86:	f7ff fed0 	bl	8004b2a <JPEG_Bits_To_SizeCodes>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004d90:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004d98:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004d9c:	e048      	b.n	8004e30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8004da4:	e03d      	b.n	8004e22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8004da6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004daa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004db4:	4413      	add	r3, r2
 8004db6:	3310      	adds	r3, #16
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004dbe:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004dc2:	2b0b      	cmp	r3, #11
 8004dc4:	d901      	bls.n	8004dca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e032      	b.n	8004e30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004dca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004dce:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8004dd2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004dd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dda:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004dde:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004de8:	3302      	adds	r3, #2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004df0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004df4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8004df8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004dfc:	4413      	add	r3, r2
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b2d9      	uxtb	r1, r3
 8004e04:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004e08:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004e12:	4413      	add	r3, r2
 8004e14:	460a      	mov	r2, r1
 8004e16:	701a      	strb	r2, [r3, #0]
      k++;
 8004e18:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004e22:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004e26:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d3bb      	bcc.n	8004da6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b09a      	sub	sp, #104	; 0x68
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d106      	bne.n	8004e62 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e60:	e00f      	b.n	8004e82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d106      	bne.n	8004e7e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004e78:	3318      	adds	r3, #24
 8004e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7c:	e001      	b.n	8004e82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e059      	b.n	8004f36 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d055      	beq.n	8004f34 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004e88:	f107 0314 	add.w	r3, r7, #20
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	f7ff ff60 	bl	8004d54 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ea6:	e046      	b.n	8004f36 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8004ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eaa:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eae:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004eb2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ebc:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004ec0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004ec6:	e032      	b.n	8004f2e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004ed4:	f107 0214 	add.w	r2, r7, #20
 8004ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	3368      	adds	r3, #104	; 0x68
 8004eec:	443b      	add	r3, r7
 8004eee:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efa:	3b01      	subs	r3, #1
 8004efc:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004efe:	f107 0214 	add.w	r2, r7, #20
 8004f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f10:	3302      	adds	r3, #2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	3368      	adds	r3, #104	; 0x68
 8004f16:	443b      	add	r3, r7
 8004f18:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f24:	041a      	lsls	r2, r3, #16
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d8c9      	bhi.n	8004ec8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3768      	adds	r7, #104	; 0x68
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004f4c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004f50:	6018      	str	r0, [r3, #0]
 8004f52:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004f56:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004f5a:	6019      	str	r1, [r3, #0]
 8004f5c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004f60:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8004f64:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004f66:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004f6a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f76:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004f7a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10c      	bne.n	8004f9e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004f84:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004f88:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f98:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004f9c:	e01d      	b.n	8004fda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004f9e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004fa2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004fae:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004fb2:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d10c      	bne.n	8004fd6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004fbc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004fc0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004fcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fd0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004fd4:	e001      	b.n	8004fda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0a8      	b.n	800512c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8004fda:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004fde:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80a0 	beq.w	800512a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004fea:	f107 0214 	add.w	r2, r7, #20
 8004fee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004ff2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7ff fe0b 	bl	8004c14 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005004:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800500c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005010:	e08c      	b.n	800512c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005012:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005016:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005020:	e00e      	b.n	8005040 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8005022:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005026:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800502a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800502c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005030:	3304      	adds	r3, #4
 8005032:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005036:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800503a:	3301      	adds	r3, #1
 800503c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005040:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005044:	2b02      	cmp	r3, #2
 8005046:	d9ec      	bls.n	8005022 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8005048:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800504c:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800504e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005050:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005054:	3304      	adds	r3, #4
 8005056:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800505a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800505e:	4a37      	ldr	r2, [pc, #220]	; (800513c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8005060:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005062:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005066:	3304      	adds	r3, #4
 8005068:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800506c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005070:	4a33      	ldr	r2, [pc, #204]	; (8005140 <JPEG_Set_HuffAC_Mem+0x200>)
 8005072:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005074:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005078:	3304      	adds	r3, #4
 800507a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 800507e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005082:	4a30      	ldr	r2, [pc, #192]	; (8005144 <JPEG_Set_HuffAC_Mem+0x204>)
 8005084:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8005086:	23a2      	movs	r3, #162	; 0xa2
 8005088:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 800508c:	e049      	b.n	8005122 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800508e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005092:	3b01      	subs	r3, #1
 8005094:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8005098:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800509c:	3b04      	subs	r3, #4
 800509e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80050a2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80050a6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80050aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80050b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80050bc:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 80050c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80050c4:	3328      	adds	r3, #40	; 0x28
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 80050d4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80050d8:	3b01      	subs	r3, #1
 80050da:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80050de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80050e2:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80050e6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80050ea:	4413      	add	r3, r2
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80050f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80050f8:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 80050fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005100:	3328      	adds	r3, #40	; 0x28
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005110:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005114:	041a      	lsls	r2, r3, #16
 8005116:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800511a:	431a      	orrs	r2, r3
 800511c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005120:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005122:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005126:	2b01      	cmp	r3, #1
 8005128:	d8b1      	bhi.n	800508e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	0fd10fd0 	.word	0x0fd10fd0
 800513c:	0fd30fd2 	.word	0x0fd30fd2
 8005140:	0fd50fd4 	.word	0x0fd50fd4
 8005144:	0fd70fd6 	.word	0x0fd70fd6

08005148 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f84d 	bl	80051f0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800515e:	461a      	mov	r2, r3
 8005160:	491f      	ldr	r1, [pc, #124]	; (80051e0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff feec 	bl	8004f40 <JPEG_Set_HuffAC_Mem>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	e030      	b.n	80051d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800517e:	461a      	mov	r2, r3
 8005180:	4918      	ldr	r1, [pc, #96]	; (80051e4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fedc 	bl	8004f40 <JPEG_Set_HuffAC_Mem>
 8005188:	4603      	mov	r3, r0
 800518a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	e020      	b.n	80051d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800519e:	461a      	mov	r2, r3
 80051a0:	4911      	ldr	r1, [pc, #68]	; (80051e8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fe49 	bl	8004e3a <JPEG_Set_HuffDC_Mem>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	e010      	b.n	80051d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80051be:	461a      	mov	r2, r3
 80051c0:	490a      	ldr	r1, [pc, #40]	; (80051ec <JPEG_Set_HuffEnc_Mem+0xa4>)
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fe39 	bl	8004e3a <JPEG_Set_HuffDC_Mem>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	e000      	b.n	80051d8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0802ef98 	.word	0x0802ef98
 80051e4:	0802f04c 	.word	0x0802f04c
 80051e8:	0802ef60 	.word	0x0802ef60
 80051ec:	0802ef7c 	.word	0x0802ef7c

080051f0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b08b      	sub	sp, #44	; 0x2c
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80051f8:	4b80      	ldr	r3, [pc, #512]	; (80053fc <JPEG_Set_Huff_DHTMem+0x20c>)
 80051fa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80051fc:	4b80      	ldr	r3, [pc, #512]	; (8005400 <JPEG_Set_Huff_DHTMem+0x210>)
 80051fe:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005200:	4b80      	ldr	r3, [pc, #512]	; (8005404 <JPEG_Set_Huff_DHTMem+0x214>)
 8005202:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005204:	4b80      	ldr	r3, [pc, #512]	; (8005408 <JPEG_Set_Huff_DHTMem+0x218>)
 8005206:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005210:	330c      	adds	r3, #12
 8005212:	623b      	str	r3, [r7, #32]
  index = 16;
 8005214:	2310      	movs	r3, #16
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005218:	e01d      	b.n	8005256 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3b01      	subs	r3, #1
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	5cd3      	ldrb	r3, [r2, r3]
 8005222:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	3b02      	subs	r3, #2
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800522e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	3b03      	subs	r3, #3
 8005234:	6979      	ldr	r1, [r7, #20]
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800523a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	3a04      	subs	r2, #4
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005244:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	601a      	str	r2, [r3, #0]
    address--;
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	3b04      	subs	r3, #4
 800524e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	3b04      	subs	r3, #4
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b03      	cmp	r3, #3
 800525a:	d8de      	bhi.n	800521a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005264:	3318      	adds	r3, #24
 8005266:	623b      	str	r3, [r7, #32]
  index = 12;
 8005268:	230c      	movs	r3, #12
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800526c:	e021      	b.n	80052b2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	3b01      	subs	r3, #1
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	7c1b      	ldrb	r3, [r3, #16]
 8005278:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	3b02      	subs	r3, #2
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	440b      	add	r3, r1
 8005282:	7c1b      	ldrb	r3, [r3, #16]
 8005284:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005286:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3b03      	subs	r3, #3
 800528c:	6979      	ldr	r1, [r7, #20]
 800528e:	440b      	add	r3, r1
 8005290:	7c1b      	ldrb	r3, [r3, #16]
 8005292:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005294:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	3a04      	subs	r2, #4
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	440a      	add	r2, r1
 800529e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80052a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	601a      	str	r2, [r3, #0]
    address--;
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	3b04      	subs	r3, #4
 80052aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	3b04      	subs	r3, #4
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d8da      	bhi.n	800526e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80052c0:	3328      	adds	r3, #40	; 0x28
 80052c2:	623b      	str	r3, [r7, #32]
  index = 16;
 80052c4:	2310      	movs	r3, #16
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80052c8:	e01d      	b.n	8005306 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	3b01      	subs	r3, #1
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	5cd3      	ldrb	r3, [r2, r3]
 80052d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	3b02      	subs	r3, #2
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80052de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	3b03      	subs	r3, #3
 80052e4:	69f9      	ldr	r1, [r7, #28]
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80052ea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	3a04      	subs	r2, #4
 80052f0:	69f9      	ldr	r1, [r7, #28]
 80052f2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80052f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	601a      	str	r2, [r3, #0]
    address--;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	3b04      	subs	r3, #4
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b03      	cmp	r3, #3
 800530a:	d8de      	bhi.n	80052ca <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005314:	33cc      	adds	r3, #204	; 0xcc
 8005316:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b3b      	ldr	r3, [pc, #236]	; (800540c <JPEG_Set_Huff_DHTMem+0x21c>)
 800531e:	4013      	ands	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	3b04      	subs	r3, #4
 8005342:	623b      	str	r3, [r7, #32]
  index = 160;
 8005344:	23a0      	movs	r3, #160	; 0xa0
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005348:	e021      	b.n	800538e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	3b01      	subs	r3, #1
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	7c1b      	ldrb	r3, [r3, #16]
 8005354:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	3b02      	subs	r3, #2
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	440b      	add	r3, r1
 800535e:	7c1b      	ldrb	r3, [r3, #16]
 8005360:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005362:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	3b03      	subs	r3, #3
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	440b      	add	r3, r1
 800536c:	7c1b      	ldrb	r3, [r3, #16]
 800536e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005370:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	3a04      	subs	r2, #4
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800537c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	601a      	str	r2, [r3, #0]
    address--;
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	3b04      	subs	r3, #4
 8005386:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	3b04      	subs	r3, #4
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b03      	cmp	r3, #3
 8005392:	d8da      	bhi.n	800534a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800539c:	33cc      	adds	r3, #204	; 0xcc
 800539e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	061a      	lsls	r2, r3, #24
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  *address = value;
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80053ca:	33dc      	adds	r3, #220	; 0xdc
 80053cc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <JPEG_Set_Huff_DHTMem+0x21c>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	7bdb      	ldrb	r3, [r3, #15]
 80053dc:	021a      	lsls	r2, r3, #8
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	7b92      	ldrb	r2, [r2, #14]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	3b04      	subs	r3, #4
 80053f4:	623b      	str	r3, [r7, #32]
  index = 12;
 80053f6:	230c      	movs	r3, #12
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80053fa:	e027      	b.n	800544c <JPEG_Set_Huff_DHTMem+0x25c>
 80053fc:	0802ef98 	.word	0x0802ef98
 8005400:	0802f04c 	.word	0x0802f04c
 8005404:	0802ef60 	.word	0x0802ef60
 8005408:	0802ef7c 	.word	0x0802ef7c
 800540c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	3301      	adds	r3, #1
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800541a:	6939      	ldr	r1, [r7, #16]
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	440b      	add	r3, r1
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005424:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	3b01      	subs	r3, #1
 800542a:	6939      	ldr	r1, [r7, #16]
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005430:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	3a02      	subs	r2, #2
 8005436:	6939      	ldr	r1, [r7, #16]
 8005438:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800543a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	601a      	str	r2, [r3, #0]
    address--;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	3b04      	subs	r3, #4
 8005444:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	3b04      	subs	r3, #4
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2b03      	cmp	r3, #3
 8005450:	d8de      	bhi.n	8005410 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800545a:	33dc      	adds	r3, #220	; 0xdc
 800545c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	7c5b      	ldrb	r3, [r3, #17]
 800546a:	061a      	lsls	r2, r3, #24
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	431a      	orrs	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	7c1b      	ldrb	r3, [r3, #16]
 8005474:	041b      	lsls	r3, r3, #16
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005488:	33e8      	adds	r3, #232	; 0xe8
 800548a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <JPEG_Set_Huff_DHTMem+0x458>)
 8005492:	4013      	ands	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	7edb      	ldrb	r3, [r3, #27]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	7e92      	ldrb	r2, [r2, #26]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	623b      	str	r3, [r7, #32]
  index = 8;
 80054b4:	2308      	movs	r3, #8
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80054b8:	e021      	b.n	80054fe <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	3301      	adds	r3, #1
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	7c1b      	ldrb	r3, [r3, #16]
 80054c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80054c6:	6939      	ldr	r1, [r7, #16]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	440b      	add	r3, r1
 80054cc:	3310      	adds	r3, #16
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80054d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	3b01      	subs	r3, #1
 80054d8:	6939      	ldr	r1, [r7, #16]
 80054da:	440b      	add	r3, r1
 80054dc:	7c1b      	ldrb	r3, [r3, #16]
 80054de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80054e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	3a02      	subs	r2, #2
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	440a      	add	r2, r1
 80054ea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80054ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	601a      	str	r2, [r3, #0]
    address--;
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	3b04      	subs	r3, #4
 80054f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3b04      	subs	r3, #4
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	2b03      	cmp	r3, #3
 8005502:	d8da      	bhi.n	80054ba <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800550c:	33e8      	adds	r3, #232	; 0xe8
 800550e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	061a      	lsls	r2, r3, #24
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	431a      	orrs	r2, r3
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800553a:	33f8      	adds	r3, #248	; 0xf8
 800553c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <JPEG_Set_Huff_DHTMem+0x458>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	7bdb      	ldrb	r3, [r3, #15]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	7b92      	ldrb	r2, [r2, #14]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  *address = value;
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	3b04      	subs	r3, #4
 8005564:	623b      	str	r3, [r7, #32]
  index = 12;
 8005566:	230c      	movs	r3, #12
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800556a:	e01d      	b.n	80055a8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	3301      	adds	r3, #1
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	440b      	add	r3, r1
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005580:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	3b01      	subs	r3, #1
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	5ccb      	ldrb	r3, [r1, r3]
 800558a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800558c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	3a02      	subs	r2, #2
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005596:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	601a      	str	r2, [r3, #0]
    address--;
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	3b04      	subs	r3, #4
 80055a0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3b04      	subs	r3, #4
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d8de      	bhi.n	800556c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80055b6:	33f8      	adds	r3, #248	; 0xf8
 80055b8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	7c5b      	ldrb	r3, [r3, #17]
 80055c6:	061a      	lsls	r2, r3, #24
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	7c1b      	ldrb	r3, [r3, #16]
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80055e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80055e8:	623b      	str	r3, [r7, #32]
  index = 160;
 80055ea:	23a0      	movs	r3, #160	; 0xa0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80055ee:	e021      	b.n	8005634 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	3301      	adds	r3, #1
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4413      	add	r3, r2
 80055f8:	7c1b      	ldrb	r3, [r3, #16]
 80055fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	440b      	add	r3, r1
 8005602:	3310      	adds	r3, #16
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005608:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	3b01      	subs	r3, #1
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	440b      	add	r3, r1
 8005612:	7c1b      	ldrb	r3, [r3, #16]
 8005614:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005616:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	3a02      	subs	r2, #2
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	440a      	add	r2, r1
 8005620:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005622:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	601a      	str	r2, [r3, #0]
    address--;
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	3b04      	subs	r3, #4
 800562c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3b04      	subs	r3, #4
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	2b03      	cmp	r3, #3
 8005638:	d8da      	bhi.n	80055f0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	372c      	adds	r7, #44	; 0x2c
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	ffff0000 	.word	0xffff0000

0800564c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d108      	bne.n	800567e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0208 	orr.w	r2, r2, #8
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e007      	b.n	800568e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0208 	bic.w	r2, r2, #8
 800568c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b08      	cmp	r3, #8
 8005708:	d108      	bne.n	800571c <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800571a:	e00d      	b.n	8005738 <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d107      	bne.n	8005738 <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	2b03      	cmp	r3, #3
 8005752:	d903      	bls.n	800575c <JPEG_DMA_StartProcess+0x18>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	2b03      	cmp	r3, #3
 800575a:	d801      	bhi.n	8005760 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e068      	b.n	8005832 <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800577a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	4a2e      	ldr	r2, [pc, #184]	; (800583c <JPEG_DMA_StartProcess+0xf8>)
 8005782:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <JPEG_DMA_StartProcess+0xfc>)
 800578a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <JPEG_DMA_StartProcess+0x100>)
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <JPEG_DMA_StartProcess+0xfc>)
 800579a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	4a29      	ldr	r2, [pc, #164]	; (8005848 <JPEG_DMA_StartProcess+0x104>)
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f023 0203 	bic.w	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f023 0203 	bic.w	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	4619      	mov	r1, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3340      	adds	r3, #64	; 0x40
 80057cc:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	f7fe f8a4 	bl	8003920 <HAL_DMA_Start_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	f043 0204 	orr.w	r2, r3, #4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e021      	b.n	8005832 <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3344      	adds	r3, #68	; 0x44
 80057f8:	4619      	mov	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005804:	089b      	lsrs	r3, r3, #2
 8005806:	f7fe f88b 	bl	8003920 <HAL_DMA_Start_IT>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e008      	b.n	8005832 <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800582e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	08005a69 	.word	0x08005a69
 8005840:	08005c4d 	.word	0x08005c4d
 8005844:	08005b69 	.word	0x08005b69
 8005848:	08005cb9 	.word	0x08005cb9

0800584c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	0099      	lsls	r1, r3, #2
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <JPEG_DMA_EndProcess+0xd4>)
 8005864:	400b      	ands	r3, r1
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d10a      	bne.n	800588e <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	461a      	mov	r2, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f00d fcec 	bl	8013260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d134      	bne.n	8005906 <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69d9      	ldr	r1, [r3, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	461a      	mov	r2, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f00d fcd6 	bl	8013260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d103      	bne.n	80058fe <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f00d fd20 	bl	801333c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80058fc:	e00c      	b.n	8005918 <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff f8ef 	bl	8004ae2 <HAL_JPEG_EncodeCpltCallback>
}
 8005904:	e008      	b.n	8005918 <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f806 	bl	8005924 <JPEG_DMA_PollResidualData>
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	0003fffc 	.word	0x0003fffc

08005924 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800592c:	2310      	movs	r3, #16
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e04f      	b.n	80059d2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d146      	bne.n	80059cc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d03f      	beq.n	80059cc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	4413      	add	r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	0a19      	lsrs	r1, r3, #8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	b2ca      	uxtb	r2, r1
 8005976:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	0c19      	lsrs	r1, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	3302      	adds	r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	b2ca      	uxtb	r2, r1
 800598a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0e19      	lsrs	r1, r3, #24
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	3303      	adds	r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	b2ca      	uxtb	r2, r1
 800599e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d10a      	bne.n	80059cc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69d9      	ldr	r1, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	461a      	mov	r2, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f00d fc4d 	bl	8013260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ac      	bne.n	8005932 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <JPEG_DMA_PollResidualData+0xd2>
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d133      	bne.n	8005a5e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69d9      	ldr	r1, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	461a      	mov	r2, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f00d fc21 	bl	8013260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d103      	bne.n	8005a58 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f00d fc73 	bl	801333c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	e002      	b.n	8005a5e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff f842 	bl	8004ae2 <HAL_JPEG_EncodeCpltCallback>
}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a8a:	f248 030c 	movw	r3, #32780	; 0x800c
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d163      	bne.n	8005b5c <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	0099      	lsls	r1, r3, #2
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <JPEG_DMAInCpltCallback+0xfc>)
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f00d fb99 	bl	80131f8 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d906      	bls.n	8005adc <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f023 0203 	bic.w	r2, r3, #3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8005ada:	e006      	b.n	8005aea <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d12a      	bne.n	8005b4c <JPEG_DMAInCpltCallback+0xe4>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d026      	beq.n	8005b4c <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4619      	mov	r1, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3340      	adds	r3, #64	; 0x40
 8005b0e:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005b14:	089b      	lsrs	r3, r3, #2
 8005b16:	f7fd ff03 	bl	8003920 <HAL_DMA_Start_IT>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b24:	f043 0204 	orr.w	r2, r3, #4
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2206      	movs	r2, #6
 8005b30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f00d fbf3 	bl	8013320 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8005b3a:	e00f      	b.n	8005b5c <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	0003fffc 	.word	0x0003fffc

08005b68 <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8a:	f248 030c 	movw	r3, #32780	; 0x800c
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d156      	bne.n	8005c42 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d147      	bne.n	8005c32 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0099      	lsls	r1, r3, #2
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <JPEG_DMAOutCpltCallback+0xe0>)
 8005bc0:	400b      	ands	r3, r1
 8005bc2:	1ad2      	subs	r2, r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	69d9      	ldr	r1, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f00d fb44 	bl	8013260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d126      	bne.n	8005c32 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3344      	adds	r3, #68	; 0x44
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	f7fd fe90 	bl	8003920 <HAL_DMA_Start_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0a:	f043 0204 	orr.w	r2, r3, #4
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2206      	movs	r2, #6
 8005c16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f00d fb80 	bl	8013320 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8005c20:	e00f      	b.n	8005c42 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	0003fffc 	.word	0x0003fffc

08005c4c <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fe f86c 	bl	8003d38 <HAL_DMA_GetError>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d024      	beq.n	8005cb0 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	f043 0204 	orr.w	r2, r3, #4
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f00d fb38 	bl	8013320 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fdba 	bl	800584c <JPEG_DMA_EndProcess>
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0bf      	b.n	8005e72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fb fec2 	bl	8001a90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d22:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6899      	ldr	r1, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_LTDC_Init+0x19c>)
 8005d54:	400b      	ands	r3, r1
 8005d56:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68d9      	ldr	r1, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b3e      	ldr	r3, [pc, #248]	; (8005e7c <HAL_LTDC_Init+0x19c>)
 8005d82:	400b      	ands	r3, r1
 8005d84:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68d9      	ldr	r1, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6919      	ldr	r1, [r3, #16]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <HAL_LTDC_Init+0x19c>)
 8005db0:	400b      	ands	r3, r1
 8005db2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6919      	ldr	r1, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6959      	ldr	r1, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_LTDC_Init+0x19c>)
 8005dde:	400b      	ands	r3, r1
 8005de0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6959      	ldr	r1, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0206 	orr.w	r2, r2, #6
 8005e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	f000f800 	.word	0xf000f800

08005e80 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d023      	beq.n	8005eea <HAL_LTDC_IRQHandler+0x6a>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01e      	beq.n	8005eea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0204 	bic.w	r2, r2, #4
 8005eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f86f 	bl	8005fc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <HAL_LTDC_IRQHandler+0xbc>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01e      	beq.n	8005f3c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0202 	bic.w	r2, r2, #2
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2202      	movs	r2, #2
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f1c:	f043 0202 	orr.w	r2, r3, #2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f846 	bl	8005fc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01b      	beq.n	8005f7e <HAL_LTDC_IRQHandler+0xfe>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d016      	beq.n	8005f7e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f00e ff9f 	bl	8014ebc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_LTDC_IRQHandler+0x140>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0208 	bic.w	r2, r2, #8
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f80e 	bl	8005fdc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_LTDC_ConfigLayer+0x1a>
 8006006:	2302      	movs	r3, #2
 8006008:	e02c      	b.n	8006064 <HAL_LTDC_ConfigLayer+0x74>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2134      	movs	r1, #52	; 0x34
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800603a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f849 	bl	80060dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2201      	movs	r2, #1
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bdb0      	pop	{r4, r5, r7, pc}

0800606c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_LTDC_ProgramLineEvent+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e023      	b.n	80060cc <HAL_LTDC_ProgramLineEvent+0x60>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40016800 	.word	0x40016800

080060dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f8:	4413      	add	r3, r2
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4413      	add	r3, r2
 800610a:	3384      	adds	r3, #132	; 0x84
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	4611      	mov	r1, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	01d2      	lsls	r2, r2, #7
 8006118:	440a      	add	r2, r1
 800611a:	3284      	adds	r2, #132	; 0x84
 800611c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006120:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006132:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006134:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4619      	mov	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	01db      	lsls	r3, r3, #7
 8006140:	440b      	add	r3, r1
 8006142:	3384      	adds	r3, #132	; 0x84
 8006144:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800614a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800615a:	4413      	add	r3, r2
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	01db      	lsls	r3, r3, #7
 800616a:	4413      	add	r3, r2
 800616c:	3384      	adds	r3, #132	; 0x84
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	4611      	mov	r1, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	01d2      	lsls	r2, r2, #7
 800617a:	440a      	add	r2, r1
 800617c:	3284      	adds	r2, #132	; 0x84
 800617e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006182:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006192:	4413      	add	r3, r2
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4619      	mov	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	01db      	lsls	r3, r3, #7
 80061a0:	440b      	add	r3, r1
 80061a2:	3384      	adds	r3, #132	; 0x84
 80061a4:	4619      	mov	r1, r3
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	01db      	lsls	r3, r3, #7
 80061b6:	4413      	add	r3, r2
 80061b8:	3384      	adds	r3, #132	; 0x84
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	4611      	mov	r1, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	01d2      	lsls	r2, r2, #7
 80061c6:	440a      	add	r2, r1
 80061c8:	3284      	adds	r2, #132	; 0x84
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	4413      	add	r3, r2
 80061dc:	3384      	adds	r3, #132	; 0x84
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	061b      	lsls	r3, r3, #24
 8006200:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	01db      	lsls	r3, r3, #7
 800620c:	4413      	add	r3, r2
 800620e:	3384      	adds	r3, #132	; 0x84
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	3384      	adds	r3, #132	; 0x84
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800622c:	461a      	mov	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	431a      	orrs	r2, r3
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	431a      	orrs	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4619      	mov	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	01db      	lsls	r3, r3, #7
 8006240:	440b      	add	r3, r1
 8006242:	3384      	adds	r3, #132	; 0x84
 8006244:	4619      	mov	r1, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	01db      	lsls	r3, r3, #7
 8006256:	4413      	add	r3, r2
 8006258:	3384      	adds	r3, #132	; 0x84
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	4611      	mov	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	01d2      	lsls	r2, r2, #7
 8006266:	440a      	add	r2, r1
 8006268:	3284      	adds	r2, #132	; 0x84
 800626a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800626e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	01db      	lsls	r3, r3, #7
 800627a:	4413      	add	r3, r2
 800627c:	3384      	adds	r3, #132	; 0x84
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	01db      	lsls	r3, r3, #7
 8006290:	4413      	add	r3, r2
 8006292:	3384      	adds	r3, #132	; 0x84
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4619      	mov	r1, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	01db      	lsls	r3, r3, #7
 80062a0:	440b      	add	r3, r1
 80062a2:	3384      	adds	r3, #132	; 0x84
 80062a4:	4619      	mov	r1, r3
 80062a6:	4b58      	ldr	r3, [pc, #352]	; (8006408 <LTDC_SetConfig+0x32c>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	6809      	ldr	r1, [r1, #0]
 80062b8:	4608      	mov	r0, r1
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	01c9      	lsls	r1, r1, #7
 80062be:	4401      	add	r1, r0
 80062c0:	3184      	adds	r1, #132	; 0x84
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4413      	add	r3, r2
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	4413      	add	r3, r2
 80062e2:	3384      	adds	r3, #132	; 0x84
 80062e4:	461a      	mov	r2, r3
 80062e6:	2300      	movs	r3, #0
 80062e8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	4413      	add	r3, r2
 80062f6:	3384      	adds	r3, #132	; 0x84
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006308:	2304      	movs	r3, #4
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e01b      	b.n	8006346 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d102      	bne.n	800631c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006316:	2303      	movs	r3, #3
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e014      	b.n	8006346 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d00b      	beq.n	800633c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006328:	2b02      	cmp	r3, #2
 800632a:	d007      	beq.n	800633c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006330:	2b03      	cmp	r3, #3
 8006332:	d003      	beq.n	800633c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006338:	2b07      	cmp	r3, #7
 800633a:	d102      	bne.n	8006342 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800633c:	2302      	movs	r3, #2
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e001      	b.n	8006346 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	4413      	add	r3, r2
 8006352:	3384      	adds	r3, #132	; 0x84
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	4611      	mov	r1, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	01d2      	lsls	r2, r2, #7
 8006360:	440a      	add	r2, r1
 8006362:	3284      	adds	r2, #132	; 0x84
 8006364:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006368:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	1acb      	subs	r3, r1, r3
 8006380:	69f9      	ldr	r1, [r7, #28]
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	6809      	ldr	r1, [r1, #0]
 800638c:	4608      	mov	r0, r1
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	01c9      	lsls	r1, r1, #7
 8006392:	4401      	add	r1, r0
 8006394:	3184      	adds	r1, #132	; 0x84
 8006396:	4313      	orrs	r3, r2
 8006398:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	4413      	add	r3, r2
 80063a6:	3384      	adds	r3, #132	; 0x84
 80063a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	440b      	add	r3, r1
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	4619      	mov	r1, r3
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <LTDC_SetConfig+0x330>)
 80063bc:	4013      	ands	r3, r2
 80063be:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	01db      	lsls	r3, r3, #7
 80063ca:	4413      	add	r3, r2
 80063cc:	3384      	adds	r3, #132	; 0x84
 80063ce:	461a      	mov	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	01db      	lsls	r3, r3, #7
 80063e0:	4413      	add	r3, r2
 80063e2:	3384      	adds	r3, #132	; 0x84
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	4611      	mov	r1, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	01d2      	lsls	r2, r2, #7
 80063f0:	440a      	add	r2, r1
 80063f2:	3284      	adds	r2, #132	; 0x84
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6013      	str	r3, [r2, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	fffff8f8 	.word	0xfffff8f8
 800640c:	fffff800 	.word	0xfffff800

08006410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006432:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800643e:	f7fc fa0f 	bl	8002860 <HAL_GetTick>
 8006442:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006444:	e009      	b.n	800645a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006446:	f7fc fa0b 	bl	8002860 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006454:	d901      	bls.n	800645a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e022      	b.n	80064a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006466:	d1ee      	bne.n	8006446 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800646e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006472:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006474:	f7fc f9f4 	bl	8002860 <HAL_GetTick>
 8006478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800647a:	e009      	b.n	8006490 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800647c:	f7fc f9f0 	bl	8002860 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648a:	d901      	bls.n	8006490 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e007      	b.n	80064a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800649c:	d1ee      	bne.n	800647c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40007000 	.word	0x40007000

080064b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064b8:	f7fc f9d2 	bl	8002860 <HAL_GetTick>
 80064bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e067      	b.n	8006598 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fb fd2d 	bl	8001f3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80064e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fae8 	bl	8006abc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	2120      	movs	r1, #32
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fae0 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d135      	bne.n	800658e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <HAL_QSPI_Init+0xf0>)
 800652a:	4013      	ands	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6852      	ldr	r2, [r2, #4]
 8006530:	0611      	lsls	r1, r2, #24
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68d2      	ldr	r2, [r2, #12]
 8006536:	4311      	orrs	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	69d2      	ldr	r2, [r2, #28]
 800653c:	4311      	orrs	r1, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6a12      	ldr	r2, [r2, #32]
 8006542:	4311      	orrs	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <HAL_QSPI_Init+0xf4>)
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6912      	ldr	r2, [r2, #16]
 800655a:	0411      	lsls	r1, r2, #16
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6952      	ldr	r2, [r2, #20]
 8006560:	4311      	orrs	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6992      	ldr	r2, [r2, #24]
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	430b      	orrs	r3, r1
 800656e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006596:	7afb      	ldrb	r3, [r7, #11]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	00ffff2f 	.word	0x00ffff2f
 80065a4:	ffe0f8fe 	.word	0xffe0f8fe

080065a8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e016      	b.n	80065e8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fb fd38 	bl	8002040 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80065fc:	f7fc f930 	bl	8002860 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_QSPI_Command+0x22>
 800660e:	2302      	movs	r3, #2
 8006610:	e048      	b.n	80066a4 <HAL_QSPI_Command+0xb4>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d137      	bne.n	8006696 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2200      	movs	r2, #0
 800663c:	2120      	movs	r1, #32
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fa4a 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d125      	bne.n	800669a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800664e:	2200      	movs	r2, #0
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa77 	bl	8006b46 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d115      	bne.n	800668c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2201      	movs	r2, #1
 8006668:	2102      	movs	r1, #2
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa34 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2202      	movs	r2, #2
 8006680:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800668a:	e006      	b.n	800669a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006694:	e001      	b.n	800669a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006696:	2302      	movs	r3, #2
 8006698:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80066bc:	f7fc f8d0 	bl	8002860 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3320      	adds	r3, #32
 80066c8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_QSPI_Transmit+0x2e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e076      	b.n	80067c8 <HAL_QSPI_Transmit+0x11c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d165      	bne.n	80067ba <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d056      	beq.n	80067a8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2212      	movs	r2, #18
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800672e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006730:	e01b      	b.n	800676a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2201      	movs	r2, #1
 800673a:	2104      	movs	r1, #4
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f9cb 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d113      	bne.n	8006774 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1df      	bne.n	8006732 <HAL_QSPI_Transmit+0x86>
 8006772:	e000      	b.n	8006776 <HAL_QSPI_Transmit+0xca>
          break;
 8006774:	bf00      	nop
      }

      if (status == HAL_OK)
 8006776:	7ffb      	ldrb	r3, [r7, #31]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d110      	bne.n	800679e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2201      	movs	r2, #1
 8006784:	2102      	movs	r1, #2
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f9a6 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2202      	movs	r2, #2
 800679c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a6:	e00a      	b.n	80067be <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	f043 0208 	orr.w	r2, r3, #8
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e001      	b.n	80067be <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
 80067bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80067c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80067e0:	f7fc f83e 	bl	8002860 <HAL_GetTick>
 80067e4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3320      	adds	r3, #32
 80067f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_QSPI_Receive+0x36>
 8006802:	2302      	movs	r3, #2
 8006804:	e07d      	b.n	8006902 <HAL_QSPI_Receive+0x132>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d16c      	bne.n	80068f4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d05d      	beq.n	80068e2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2222      	movs	r2, #34	; 0x22
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800685e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006868:	e01c      	b.n	80068a4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2201      	movs	r2, #1
 8006872:	2106      	movs	r1, #6
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f92f 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800687e:	7ffb      	ldrb	r3, [r7, #31]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d114      	bne.n	80068ae <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1de      	bne.n	800686a <HAL_QSPI_Receive+0x9a>
 80068ac:	e000      	b.n	80068b0 <HAL_QSPI_Receive+0xe0>
          break;
 80068ae:	bf00      	nop
      }

      if (status == HAL_OK)
 80068b0:	7ffb      	ldrb	r3, [r7, #31]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d110      	bne.n	80068d8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2201      	movs	r2, #1
 80068be:	2102      	movs	r1, #2
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f909 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80068ca:	7ffb      	ldrb	r3, [r7, #31]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2202      	movs	r2, #2
 80068d6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e0:	e00a      	b.n	80068f8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	f043 0208 	orr.w	r2, r3, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e001      	b.n	80068f8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
 80068f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006900:	7ffb      	ldrb	r3, [r7, #31]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b088      	sub	sp, #32
 800690e:	af02      	add	r7, sp, #8
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006918:	f7fb ffa2 	bl	8002860 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_QSPI_AutoPolling+0x24>
 800692a:	2302      	movs	r3, #2
 800692c:	e060      	b.n	80069f0 <HAL_QSPI_AutoPolling+0xe6>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b01      	cmp	r3, #1
 8006940:	d14f      	bne.n	80069e2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2242      	movs	r2, #66	; 0x42
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2200      	movs	r2, #0
 8006958:	2120      	movs	r1, #32
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f8bc 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d13d      	bne.n	80069e6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6892      	ldr	r2, [r2, #8]
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	431a      	orrs	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80069a0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80069aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f8c8 	bl	8006b46 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2201      	movs	r2, #1
 80069be:	2108      	movs	r1, #8
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f889 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2208      	movs	r2, #8
 80069d6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069e0:	e001      	b.n	80069e6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
 80069e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a04:	f7fb ff2c 	bl	8002860 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_QSPI_MemoryMapped+0x22>
 8006a16:	2302      	movs	r3, #2
 8006a18:	e04c      	b.n	8006ab4 <HAL_QSPI_MemoryMapped+0xbc>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d13b      	bne.n	8006aa6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2282      	movs	r2, #130	; 0x82
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2120      	movs	r1, #32
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f845 	bl	8006ad8 <QSPI_WaitFlagStateUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d128      	bne.n	8006aaa <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f023 0108 	bic.w	r1, r3, #8
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d110      	bne.n	8006a98 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2210      	movs	r2, #16
 8006a86:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a96:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8006a98:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f851 	bl	8006b46 <QSPI_Config>
 8006aa4:	e001      	b.n	8006aaa <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ae8:	e01a      	b.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d016      	beq.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af2:	f7fb feb5 	bl	8002860 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d302      	bcc.n	8006b08 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e00e      	b.n	8006b3e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d1d6      	bne.n	8006aea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <QSPI_Config+0x28>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b60:	d005      	beq.n	8006b6e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80b9 	beq.w	8006cea <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05f      	beq.n	8006c40 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	6892      	ldr	r2, [r2, #8]
 8006b88:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d031      	beq.n	8006bf6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	049b      	lsls	r3, r3, #18
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	ea42 0103 	orr.w	r1, r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006be6:	f000 812e 	beq.w	8006e46 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	6852      	ldr	r2, [r2, #4]
 8006bf2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006bf4:	e127      	b.n	8006e46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	049b      	lsls	r3, r3, #18
 8006c12:	431a      	orrs	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	615a      	str	r2, [r3, #20]
}
 8006c3e:	e102      	b.n	8006e46 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02e      	beq.n	8006ca6 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	049b      	lsls	r3, r3, #18
 8006c64:	431a      	orrs	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	ea42 0103 	orr.w	r1, r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c96:	f000 80d6 	beq.w	8006e46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	6852      	ldr	r2, [r2, #4]
 8006ca2:	619a      	str	r2, [r3, #24]
}
 8006ca4:	e0cf      	b.n	8006e46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	049b      	lsls	r3, r3, #18
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	ea42 0103 	orr.w	r1, r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	615a      	str	r2, [r3, #20]
}
 8006ce8:	e0ad      	b.n	8006e46 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d058      	beq.n	8006da4 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	6892      	ldr	r2, [r2, #8]
 8006cfa:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d02d      	beq.n	8006d60 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	049b      	lsls	r3, r3, #18
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	ea42 0103 	orr.w	r1, r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d52:	d078      	beq.n	8006e46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	6852      	ldr	r2, [r2, #4]
 8006d5c:	619a      	str	r2, [r3, #24]
}
 8006d5e:	e072      	b.n	8006e46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	049b      	lsls	r3, r3, #18
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	ea42 0103 	orr.w	r1, r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	615a      	str	r2, [r3, #20]
}
 8006da2:	e050      	b.n	8006e46 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d02a      	beq.n	8006e02 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	431a      	orrs	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	049b      	lsls	r3, r3, #18
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	ea42 0103 	orr.w	r1, r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006df4:	d027      	beq.n	8006e46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6852      	ldr	r2, [r2, #4]
 8006dfe:	619a      	str	r2, [r3, #24]
}
 8006e00:	e021      	b.n	8006e46 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01d      	beq.n	8006e46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	431a      	orrs	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	049b      	lsls	r3, r3, #18
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	ea42 0103 	orr.w	r1, r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	615a      	str	r2, [r3, #20]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e29b      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8087 	beq.w	8006f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e78:	4b96      	ldr	r3, [pc, #600]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 030c 	and.w	r3, r3, #12
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d00c      	beq.n	8006e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e84:	4b93      	ldr	r3, [pc, #588]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d112      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x62>
 8006e90:	4b90      	ldr	r3, [pc, #576]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e9c:	d10b      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e9e:	4b8d      	ldr	r3, [pc, #564]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d06c      	beq.n	8006f84 <HAL_RCC_OscConfig+0x130>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d168      	bne.n	8006f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e275      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebe:	d106      	bne.n	8006ece <HAL_RCC_OscConfig+0x7a>
 8006ec0:	4b84      	ldr	r3, [pc, #528]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a83      	ldr	r2, [pc, #524]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	e02e      	b.n	8006f2c <HAL_RCC_OscConfig+0xd8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x9c>
 8006ed6:	4b7f      	ldr	r3, [pc, #508]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a7e      	ldr	r2, [pc, #504]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4b7c      	ldr	r3, [pc, #496]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7b      	ldr	r2, [pc, #492]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	e01d      	b.n	8006f2c <HAL_RCC_OscConfig+0xd8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef8:	d10c      	bne.n	8006f14 <HAL_RCC_OscConfig+0xc0>
 8006efa:	4b76      	ldr	r3, [pc, #472]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a75      	ldr	r2, [pc, #468]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	4b73      	ldr	r3, [pc, #460]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a72      	ldr	r2, [pc, #456]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e00b      	b.n	8006f2c <HAL_RCC_OscConfig+0xd8>
 8006f14:	4b6f      	ldr	r3, [pc, #444]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a6e      	ldr	r2, [pc, #440]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4b6c      	ldr	r3, [pc, #432]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d013      	beq.n	8006f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fb fc94 	bl	8002860 <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f3c:	f7fb fc90 	bl	8002860 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b64      	cmp	r3, #100	; 0x64
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e229      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	4b61      	ldr	r3, [pc, #388]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0f0      	beq.n	8006f3c <HAL_RCC_OscConfig+0xe8>
 8006f5a:	e014      	b.n	8006f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5c:	f7fb fc80 	bl	8002860 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fb fc7c 	bl	8002860 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	; 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e215      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f76:	4b57      	ldr	r3, [pc, #348]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x110>
 8006f82:	e000      	b.n	8006f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d069      	beq.n	8007066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f92:	4b50      	ldr	r3, [pc, #320]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f9e:	4b4d      	ldr	r3, [pc, #308]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d11c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x190>
 8006faa:	4b4a      	ldr	r3, [pc, #296]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d116      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb6:	4b47      	ldr	r3, [pc, #284]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RCC_OscConfig+0x17a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d001      	beq.n	8006fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e1e9      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fce:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	493d      	ldr	r1, [pc, #244]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fe2:	e040      	b.n	8007066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d023      	beq.n	8007034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fec:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a38      	ldr	r2, [pc, #224]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fb fc32 	bl	8002860 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007000:	f7fb fc2e 	bl	8002860 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e1c7      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b30      	ldr	r3, [pc, #192]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701e:	4b2d      	ldr	r3, [pc, #180]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4929      	ldr	r1, [pc, #164]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
 8007032:	e018      	b.n	8007066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fb fc0e 	bl	8002860 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007048:	f7fb fc0a 	bl	8002860 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e1a3      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d038      	beq.n	80070e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d019      	beq.n	80070ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800707a:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 800707c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007086:	f7fb fbeb 	bl	8002860 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800708e:	f7fb fbe7 	bl	8002860 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e180      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 80070a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <HAL_RCC_OscConfig+0x23a>
 80070ac:	e01a      	b.n	80070e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <HAL_RCC_OscConfig+0x280>)
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fb fbd1 	bl	8002860 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070c2:	f7fb fbcd 	bl	8002860 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d903      	bls.n	80070d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e166      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
 80070d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d8:	4b92      	ldr	r3, [pc, #584]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80070da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ee      	bne.n	80070c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80a4 	beq.w	800723a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f2:	4b8c      	ldr	r3, [pc, #560]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10d      	bne.n	800711a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80070fe:	4b89      	ldr	r3, [pc, #548]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	4a88      	ldr	r2, [pc, #544]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007108:	6413      	str	r3, [r2, #64]	; 0x40
 800710a:	4b86      	ldr	r3, [pc, #536]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007112:	60bb      	str	r3, [r7, #8]
 8007114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007116:	2301      	movs	r3, #1
 8007118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800711a:	4b83      	ldr	r3, [pc, #524]	; (8007328 <HAL_RCC_OscConfig+0x4d4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d118      	bne.n	8007158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007126:	4b80      	ldr	r3, [pc, #512]	; (8007328 <HAL_RCC_OscConfig+0x4d4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a7f      	ldr	r2, [pc, #508]	; (8007328 <HAL_RCC_OscConfig+0x4d4>)
 800712c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007132:	f7fb fb95 	bl	8002860 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800713a:	f7fb fb91 	bl	8002860 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b64      	cmp	r3, #100	; 0x64
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e12a      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800714c:	4b76      	ldr	r3, [pc, #472]	; (8007328 <HAL_RCC_OscConfig+0x4d4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d106      	bne.n	800716e <HAL_RCC_OscConfig+0x31a>
 8007160:	4b70      	ldr	r3, [pc, #448]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	4a6f      	ldr	r2, [pc, #444]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	6713      	str	r3, [r2, #112]	; 0x70
 800716c:	e02d      	b.n	80071ca <HAL_RCC_OscConfig+0x376>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10c      	bne.n	8007190 <HAL_RCC_OscConfig+0x33c>
 8007176:	4b6b      	ldr	r3, [pc, #428]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	4a6a      	ldr	r2, [pc, #424]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	6713      	str	r3, [r2, #112]	; 0x70
 8007182:	4b68      	ldr	r3, [pc, #416]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	4a67      	ldr	r2, [pc, #412]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	6713      	str	r3, [r2, #112]	; 0x70
 800718e:	e01c      	b.n	80071ca <HAL_RCC_OscConfig+0x376>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b05      	cmp	r3, #5
 8007196:	d10c      	bne.n	80071b2 <HAL_RCC_OscConfig+0x35e>
 8007198:	4b62      	ldr	r3, [pc, #392]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719c:	4a61      	ldr	r2, [pc, #388]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800719e:	f043 0304 	orr.w	r3, r3, #4
 80071a2:	6713      	str	r3, [r2, #112]	; 0x70
 80071a4:	4b5f      	ldr	r3, [pc, #380]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	4a5e      	ldr	r2, [pc, #376]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	6713      	str	r3, [r2, #112]	; 0x70
 80071b0:	e00b      	b.n	80071ca <HAL_RCC_OscConfig+0x376>
 80071b2:	4b5c      	ldr	r3, [pc, #368]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	4a5b      	ldr	r2, [pc, #364]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	6713      	str	r3, [r2, #112]	; 0x70
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	4a58      	ldr	r2, [pc, #352]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071c4:	f023 0304 	bic.w	r3, r3, #4
 80071c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d2:	f7fb fb45 	bl	8002860 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fb fb41 	bl	8002860 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e0d8      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f0:	4b4c      	ldr	r3, [pc, #304]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ee      	beq.n	80071da <HAL_RCC_OscConfig+0x386>
 80071fc:	e014      	b.n	8007228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fe:	f7fb fb2f 	bl	8002860 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007204:	e00a      	b.n	800721c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007206:	f7fb fb2b 	bl	8002860 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f241 3288 	movw	r2, #5000	; 0x1388
 8007214:	4293      	cmp	r3, r2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e0c2      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800721c:	4b41      	ldr	r3, [pc, #260]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1ee      	bne.n	8007206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d105      	bne.n	800723a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800722e:	4b3d      	ldr	r3, [pc, #244]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	4a3c      	ldr	r2, [pc, #240]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80ae 	beq.w	80073a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007244:	4b37      	ldr	r3, [pc, #220]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 030c 	and.w	r3, r3, #12
 800724c:	2b08      	cmp	r3, #8
 800724e:	d06d      	beq.n	800732c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d14b      	bne.n	80072f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007258:	4b32      	ldr	r3, [pc, #200]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a31      	ldr	r2, [pc, #196]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 800725e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fb fafc 	bl	8002860 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726c:	f7fb faf8 	bl	8002860 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e091      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727e:	4b29      	ldr	r3, [pc, #164]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69da      	ldr	r2, [r3, #28]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	019b      	lsls	r3, r3, #6
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	3b01      	subs	r3, #1
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	061b      	lsls	r3, r3, #24
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	071b      	lsls	r3, r3, #28
 80072b6:	491b      	ldr	r1, [pc, #108]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072bc:	4b19      	ldr	r3, [pc, #100]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fb faca 	bl	8002860 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d0:	f7fb fac6 	bl	8002860 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e05f      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072e2:	4b10      	ldr	r3, [pc, #64]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x47c>
 80072ee:	e057      	b.n	80073a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a0b      	ldr	r2, [pc, #44]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 80072f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fb fab0 	bl	8002860 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007304:	f7fb faac 	bl	8002860 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e045      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007316:	4b03      	ldr	r3, [pc, #12]	; (8007324 <HAL_RCC_OscConfig+0x4d0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x4b0>
 8007322:	e03d      	b.n	80073a0 <HAL_RCC_OscConfig+0x54c>
 8007324:	40023800 	.word	0x40023800
 8007328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <HAL_RCC_OscConfig+0x558>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d030      	beq.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d129      	bne.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d122      	bne.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007364:	4293      	cmp	r3, r2
 8007366:	d119      	bne.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	3b01      	subs	r3, #1
 8007376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d10f      	bne.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007388:	429a      	cmp	r2, r3
 800738a:	d107      	bne.n	800739c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007398:	429a      	cmp	r2, r3
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800

080073b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0d0      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073c8:	4b6a      	ldr	r3, [pc, #424]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d910      	bls.n	80073f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d6:	4b67      	ldr	r3, [pc, #412]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f023 020f 	bic.w	r2, r3, #15
 80073de:	4965      	ldr	r1, [pc, #404]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e6:	4b63      	ldr	r3, [pc, #396]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d001      	beq.n	80073f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0b8      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007410:	4b59      	ldr	r3, [pc, #356]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	4a58      	ldr	r2, [pc, #352]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800741a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007428:	4b53      	ldr	r3, [pc, #332]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	4a52      	ldr	r2, [pc, #328]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800742e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007434:	4b50      	ldr	r3, [pc, #320]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	494d      	ldr	r1, [pc, #308]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007442:	4313      	orrs	r3, r2
 8007444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d040      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d107      	bne.n	800746a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800745a:	4b47      	ldr	r3, [pc, #284]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d115      	bne.n	8007492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e07f      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d107      	bne.n	8007482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007472:	4b41      	ldr	r3, [pc, #260]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e073      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007482:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e06b      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007492:	4b39      	ldr	r3, [pc, #228]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 0203 	bic.w	r2, r3, #3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4936      	ldr	r1, [pc, #216]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a4:	f7fb f9dc 	bl	8002860 <HAL_GetTick>
 80074a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ac:	f7fb f9d8 	bl	8002860 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e053      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c2:	4b2d      	ldr	r3, [pc, #180]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 020c 	and.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d1eb      	bne.n	80074ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074d4:	4b27      	ldr	r3, [pc, #156]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d210      	bcs.n	8007504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f023 020f 	bic.w	r2, r3, #15
 80074ea:	4922      	ldr	r1, [pc, #136]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	4b20      	ldr	r3, [pc, #128]	; (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e032      	b.n	800756a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007510:	4b19      	ldr	r3, [pc, #100]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4916      	ldr	r1, [pc, #88]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800751e:	4313      	orrs	r3, r2
 8007520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	490e      	ldr	r1, [pc, #56]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007542:	f000 f821 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 8007546:	4602      	mov	r2, r0
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	091b      	lsrs	r3, r3, #4
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	490a      	ldr	r1, [pc, #40]	; (800757c <HAL_RCC_ClockConfig+0x1cc>)
 8007554:	5ccb      	ldrb	r3, [r1, r3]
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	4a09      	ldr	r2, [pc, #36]	; (8007580 <HAL_RCC_ClockConfig+0x1d0>)
 800755c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <HAL_RCC_ClockConfig+0x1d4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7fa fdb8 	bl	80020d8 <HAL_InitTick>

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40023c00 	.word	0x40023c00
 8007578:	40023800 	.word	0x40023800
 800757c:	0802ef40 	.word	0x0802ef40
 8007580:	20000014 	.word	0x20000014
 8007584:	20000018 	.word	0x20000018

08007588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800758c:	b090      	sub	sp, #64	; 0x40
 800758e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007598:	2300      	movs	r3, #0
 800759a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075a0:	4b59      	ldr	r3, [pc, #356]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d00d      	beq.n	80075c8 <HAL_RCC_GetSysClockFreq+0x40>
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	f200 80a1 	bhi.w	80076f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_RCC_GetSysClockFreq+0x34>
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d003      	beq.n	80075c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80075ba:	e09b      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075bc:	4b53      	ldr	r3, [pc, #332]	; (800770c <HAL_RCC_GetSysClockFreq+0x184>)
 80075be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075c0:	e09b      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075c2:	4b53      	ldr	r3, [pc, #332]	; (8007710 <HAL_RCC_GetSysClockFreq+0x188>)
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075c6:	e098      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075c8:	4b4f      	ldr	r3, [pc, #316]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80075d2:	4b4d      	ldr	r3, [pc, #308]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d028      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075de:	4b4a      	ldr	r3, [pc, #296]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	099b      	lsrs	r3, r3, #6
 80075e4:	2200      	movs	r2, #0
 80075e6:	623b      	str	r3, [r7, #32]
 80075e8:	627a      	str	r2, [r7, #36]	; 0x24
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075f0:	2100      	movs	r1, #0
 80075f2:	4b47      	ldr	r3, [pc, #284]	; (8007710 <HAL_RCC_GetSysClockFreq+0x188>)
 80075f4:	fb03 f201 	mul.w	r2, r3, r1
 80075f8:	2300      	movs	r3, #0
 80075fa:	fb00 f303 	mul.w	r3, r0, r3
 80075fe:	4413      	add	r3, r2
 8007600:	4a43      	ldr	r2, [pc, #268]	; (8007710 <HAL_RCC_GetSysClockFreq+0x188>)
 8007602:	fba0 1202 	umull	r1, r2, r0, r2
 8007606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007608:	460a      	mov	r2, r1
 800760a:	62ba      	str	r2, [r7, #40]	; 0x28
 800760c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760e:	4413      	add	r3, r2
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	2200      	movs	r2, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	61fa      	str	r2, [r7, #28]
 800761a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800761e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007622:	f7f8 febf 	bl	80003a4 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4613      	mov	r3, r2
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762e:	e053      	b.n	80076d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007630:	4b35      	ldr	r3, [pc, #212]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	099b      	lsrs	r3, r3, #6
 8007636:	2200      	movs	r2, #0
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	617a      	str	r2, [r7, #20]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007642:	f04f 0b00 	mov.w	fp, #0
 8007646:	4652      	mov	r2, sl
 8007648:	465b      	mov	r3, fp
 800764a:	f04f 0000 	mov.w	r0, #0
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	0159      	lsls	r1, r3, #5
 8007654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007658:	0150      	lsls	r0, r2, #5
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	ebb2 080a 	subs.w	r8, r2, sl
 8007662:	eb63 090b 	sbc.w	r9, r3, fp
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007672:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007676:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800767a:	ebb2 0408 	subs.w	r4, r2, r8
 800767e:	eb63 0509 	sbc.w	r5, r3, r9
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	00eb      	lsls	r3, r5, #3
 800768c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007690:	00e2      	lsls	r2, r4, #3
 8007692:	4614      	mov	r4, r2
 8007694:	461d      	mov	r5, r3
 8007696:	eb14 030a 	adds.w	r3, r4, sl
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	eb45 030b 	adc.w	r3, r5, fp
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076ae:	4629      	mov	r1, r5
 80076b0:	028b      	lsls	r3, r1, #10
 80076b2:	4621      	mov	r1, r4
 80076b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076b8:	4621      	mov	r1, r4
 80076ba:	028a      	lsls	r2, r1, #10
 80076bc:	4610      	mov	r0, r2
 80076be:	4619      	mov	r1, r3
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	2200      	movs	r2, #0
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	60fa      	str	r2, [r7, #12]
 80076c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076cc:	f7f8 fe6a 	bl	80003a4 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4613      	mov	r3, r2
 80076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <HAL_RCC_GetSysClockFreq+0x180>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	3301      	adds	r3, #1
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80076e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076f2:	e002      	b.n	80076fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCC_GetSysClockFreq+0x184>)
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3740      	adds	r7, #64	; 0x40
 8007700:	46bd      	mov	sp, r7
 8007702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800
 800770c:	00f42400 	.word	0x00f42400
 8007710:	017d7840 	.word	0x017d7840

08007714 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_GetHCLKFreq+0x14>)
 800771a:	681b      	ldr	r3, [r3, #0]
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000014 	.word	0x20000014

0800772c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007730:	f7ff fff0 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007734:	4602      	mov	r2, r0
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0a9b      	lsrs	r3, r3, #10
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4903      	ldr	r1, [pc, #12]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007742:	5ccb      	ldrb	r3, [r1, r3]
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	0802ef50 	.word	0x0802ef50

08007754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	220f      	movs	r2, #15
 8007762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007764:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0203 	and.w	r2, r3, #3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800777c:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <HAL_RCC_GetClockConfig+0x5c>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <HAL_RCC_GetClockConfig+0x5c>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <HAL_RCC_GetClockConfig+0x60>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 020f 	and.w	r2, r3, #15
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40023800 	.word	0x40023800
 80077b4:	40023c00 	.word	0x40023c00

080077b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d012      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077e0:	4b69      	ldr	r3, [pc, #420]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a68      	ldr	r2, [pc, #416]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80077ea:	6093      	str	r3, [r2, #8]
 80077ec:	4b66      	ldr	r3, [pc, #408]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	4964      	ldr	r1, [pc, #400]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007802:	2301      	movs	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d017      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007812:	4b5d      	ldr	r3, [pc, #372]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007820:	4959      	ldr	r1, [pc, #356]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007830:	d101      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007832:	2301      	movs	r3, #1
 8007834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800783e:	2301      	movs	r3, #1
 8007840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d017      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800784e:	4b4e      	ldr	r3, [pc, #312]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	494a      	ldr	r1, [pc, #296]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800786c:	d101      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800786e:	2301      	movs	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800787a:	2301      	movs	r3, #1
 800787c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800788a:	2301      	movs	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 808b 	beq.w	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800789c:	4b3a      	ldr	r3, [pc, #232]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	4a39      	ldr	r2, [pc, #228]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a6:	6413      	str	r3, [r2, #64]	; 0x40
 80078a8:	4b37      	ldr	r3, [pc, #220]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078b4:	4b35      	ldr	r3, [pc, #212]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a34      	ldr	r2, [pc, #208]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c0:	f7fa ffce 	bl	8002860 <HAL_GetTick>
 80078c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c8:	f7fa ffca 	bl	8002860 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	; 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e38f      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078da:	4b2c      	ldr	r3, [pc, #176]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078e6:	4b28      	ldr	r3, [pc, #160]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d035      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	429a      	cmp	r2, r3
 8007902:	d02e      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800790e:	4b1e      	ldr	r3, [pc, #120]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007918:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d114      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fa ff92 	bl	8002860 <HAL_GetTick>
 800793c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793e:	e00a      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007940:	f7fa ff8e 	bl	8002860 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f241 3288 	movw	r2, #5000	; 0x1388
 800794e:	4293      	cmp	r3, r2
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e351      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0ee      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796e:	d111      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800797c:	4b04      	ldr	r3, [pc, #16]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800797e:	400b      	ands	r3, r1
 8007980:	4901      	ldr	r1, [pc, #4]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007982:	4313      	orrs	r3, r2
 8007984:	608b      	str	r3, [r1, #8]
 8007986:	e00b      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007988:	40023800 	.word	0x40023800
 800798c:	40007000 	.word	0x40007000
 8007990:	0ffffcff 	.word	0x0ffffcff
 8007994:	4bac      	ldr	r3, [pc, #688]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4aab      	ldr	r2, [pc, #684]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800799a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800799e:	6093      	str	r3, [r2, #8]
 80079a0:	4ba9      	ldr	r3, [pc, #676]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ac:	49a6      	ldr	r1, [pc, #664]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d010      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079be:	4ba2      	ldr	r3, [pc, #648]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c4:	4aa0      	ldr	r2, [pc, #640]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80079ce:	4b9e      	ldr	r3, [pc, #632]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	499b      	ldr	r1, [pc, #620]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079ec:	4b96      	ldr	r3, [pc, #600]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079fa:	4993      	ldr	r1, [pc, #588]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a0e:	4b8e      	ldr	r3, [pc, #568]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1c:	498a      	ldr	r1, [pc, #552]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a30:	4b85      	ldr	r3, [pc, #532]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3e:	4982      	ldr	r1, [pc, #520]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a52:	4b7d      	ldr	r3, [pc, #500]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	4979      	ldr	r1, [pc, #484]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a74:	4b74      	ldr	r3, [pc, #464]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7a:	f023 0203 	bic.w	r2, r3, #3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	4971      	ldr	r1, [pc, #452]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a96:	4b6c      	ldr	r3, [pc, #432]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	f023 020c 	bic.w	r2, r3, #12
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa4:	4968      	ldr	r1, [pc, #416]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ab8:	4b63      	ldr	r3, [pc, #396]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	4960      	ldr	r1, [pc, #384]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ada:	4b5b      	ldr	r3, [pc, #364]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	4957      	ldr	r1, [pc, #348]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007afc:	4b52      	ldr	r3, [pc, #328]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	494f      	ldr	r1, [pc, #316]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b1e:	4b4a      	ldr	r3, [pc, #296]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2c:	4946      	ldr	r1, [pc, #280]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b40:	4b41      	ldr	r3, [pc, #260]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4e:	493e      	ldr	r1, [pc, #248]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b62:	4b39      	ldr	r3, [pc, #228]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	4935      	ldr	r1, [pc, #212]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b84:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b92:	492d      	ldr	r1, [pc, #180]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d011      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ba6:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb4:	4924      	ldr	r1, [pc, #144]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bc4:	d101      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf4:	4914      	ldr	r1, [pc, #80]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c08:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c18:	490b      	ldr	r1, [pc, #44]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00f      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3c:	4902      	ldr	r1, [pc, #8]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c44:	e002      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007c46:	bf00      	nop
 8007c48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c58:	4b8a      	ldr	r3, [pc, #552]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c68:	4986      	ldr	r1, [pc, #536]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007c7c:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8c:	497d      	ldr	r1, [pc, #500]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d006      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80d6 	beq.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ca8:	4b76      	ldr	r3, [pc, #472]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a75      	ldr	r2, [pc, #468]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb4:	f7fa fdd4 	bl	8002860 <HAL_GetTick>
 8007cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cbc:	f7fa fdd0 	bl	8002860 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b64      	cmp	r3, #100	; 0x64
 8007cc8:	d901      	bls.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e195      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cce:	4b6d      	ldr	r3, [pc, #436]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d021      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11d      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cee:	4b65      	ldr	r3, [pc, #404]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cfc:	4b61      	ldr	r3, [pc, #388]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d02:	0e1b      	lsrs	r3, r3, #24
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	019a      	lsls	r2, r3, #6
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	061b      	lsls	r3, r3, #24
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	4958      	ldr	r1, [pc, #352]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d3e:	d00a      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02e      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d54:	d129      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d56:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d64:	4b47      	ldr	r3, [pc, #284]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6a:	0f1b      	lsrs	r3, r3, #28
 8007d6c:	f003 0307 	and.w	r3, r3, #7
 8007d70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	019a      	lsls	r2, r3, #6
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	061b      	lsls	r3, r3, #24
 8007d84:	431a      	orrs	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	071b      	lsls	r3, r3, #28
 8007d8a:	493e      	ldr	r1, [pc, #248]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d92:	4b3c      	ldr	r3, [pc, #240]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d98:	f023 021f 	bic.w	r2, r3, #31
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	3b01      	subs	r3, #1
 8007da2:	4938      	ldr	r1, [pc, #224]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01d      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007db6:	4b33      	ldr	r3, [pc, #204]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbc:	0e1b      	lsrs	r3, r3, #24
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dc4:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dca:	0f1b      	lsrs	r3, r3, #28
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	019a      	lsls	r2, r3, #6
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	431a      	orrs	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	431a      	orrs	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	071b      	lsls	r3, r3, #28
 8007dea:	4926      	ldr	r1, [pc, #152]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	019a      	lsls	r2, r3, #6
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	041b      	lsls	r3, r3, #16
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	071b      	lsls	r3, r3, #28
 8007e1a:	491a      	ldr	r1, [pc, #104]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e22:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2e:	f7fa fd17 	bl	8002860 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e36:	f7fa fd13 	bl	8002860 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b64      	cmp	r3, #100	; 0x64
 8007e42:	d901      	bls.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e0d8      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f0      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	f040 80ce 	bne.w	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e68:	f7fa fcfa 	bl	8002860 <HAL_GetTick>
 8007e6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e6e:	e00b      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e70:	f7fa fcf6 	bl	8002860 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b64      	cmp	r3, #100	; 0x64
 8007e7c:	d904      	bls.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e0bb      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e88:	4b5e      	ldr	r3, [pc, #376]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e94:	d0ec      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d02e      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d12a      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ebe:	4b51      	ldr	r3, [pc, #324]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ecc:	4b4d      	ldr	r3, [pc, #308]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed2:	0f1b      	lsrs	r3, r3, #28
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	019a      	lsls	r2, r3, #6
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	061b      	lsls	r3, r3, #24
 8007eec:	431a      	orrs	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	071b      	lsls	r3, r3, #28
 8007ef2:	4944      	ldr	r1, [pc, #272]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007efa:	4b42      	ldr	r3, [pc, #264]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	493d      	ldr	r1, [pc, #244]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d022      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f28:	d11d      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f2a:	4b36      	ldr	r3, [pc, #216]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f30:	0e1b      	lsrs	r3, r3, #24
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f38:	4b32      	ldr	r3, [pc, #200]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3e:	0f1b      	lsrs	r3, r3, #28
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	019a      	lsls	r2, r3, #6
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	431a      	orrs	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	061b      	lsls	r3, r3, #24
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	071b      	lsls	r3, r3, #28
 8007f5e:	4929      	ldr	r1, [pc, #164]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d028      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f72:	4b24      	ldr	r3, [pc, #144]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f78:	0e1b      	lsrs	r3, r3, #24
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f80:	4b20      	ldr	r3, [pc, #128]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	019a      	lsls	r2, r3, #6
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	041b      	lsls	r3, r3, #16
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	071b      	lsls	r3, r3, #28
 8007fa6:	4917      	ldr	r1, [pc, #92]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fae:	4b15      	ldr	r3, [pc, #84]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	4911      	ldr	r1, [pc, #68]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a0e      	ldr	r2, [pc, #56]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd0:	f7fa fc46 	bl	8002860 <HAL_GetTick>
 8007fd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fd6:	e008      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fd8:	f7fa fc42 	bl	8002860 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b64      	cmp	r3, #100	; 0x64
 8007fe4:	d901      	bls.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e007      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff6:	d1ef      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3720      	adds	r7, #32
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40023800 	.word	0x40023800

08008008 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e025      	b.n	8008068 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7f9 fb8b 	bl	800174c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f001 fd01 	bl	8009a50 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	461a      	mov	r2, r3
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	f001 fd55 	bl	8009b08 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008082:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d101      	bne.n	800808e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800808a:	2302      	movs	r3, #2
 800808c:	e021      	b.n	80080d2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d002      	beq.n	800809a <HAL_SDRAM_SendCommand+0x2a>
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	2b05      	cmp	r3, #5
 8008098:	d118      	bne.n	80080cc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2202      	movs	r2, #2
 800809e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fd96 	bl	8009bdc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d104      	bne.n	80080c2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2205      	movs	r2, #5
 80080bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080c0:	e006      	b.n	80080d0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080ca:	e001      	b.n	80080d0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d101      	bne.n	80080f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80080f0:	2302      	movs	r3, #2
 80080f2:	e016      	b.n	8008122 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f001 fd88 	bl	8009c24 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e049      	b.n	80081d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fa fa3d 	bl	80025d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f001 f807 	bl	800917c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d001      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e054      	b.n	800829a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a26      	ldr	r2, [pc, #152]	; (80082a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d022      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d01d      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a22      	ldr	r2, [pc, #136]	; (80082ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <HAL_TIM_Base_Start_IT+0xe4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a1b      	ldr	r2, [pc, #108]	; (80082c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d115      	bne.n	8008284 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <HAL_TIM_Base_Start_IT+0xec>)
 8008260:	4013      	ands	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b06      	cmp	r3, #6
 8008268:	d015      	beq.n	8008296 <HAL_TIM_Base_Start_IT+0xbe>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008270:	d011      	beq.n	8008296 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008282:	e008      	b.n	8008296 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e000      	b.n	8008298 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	40010000 	.word	0x40010000
 80082ac:	40000400 	.word	0x40000400
 80082b0:	40000800 	.word	0x40000800
 80082b4:	40000c00 	.word	0x40000c00
 80082b8:	40010400 	.word	0x40010400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	40001800 	.word	0x40001800
 80082c4:	00010007 	.word	0x00010007

080082c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e049      	b.n	800836e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f841 	bl	8008376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 ff38 	bl	800917c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	bf0c      	ite	eq
 80083b0:	2301      	moveq	r3, #1
 80083b2:	2300      	movne	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e03c      	b.n	8008432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d109      	bne.n	80083d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	e02f      	b.n	8008432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d109      	bne.n	80083ec <HAL_TIM_PWM_Start_DMA+0x60>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	e022      	b.n	8008432 <HAL_TIM_PWM_Start_DMA+0xa6>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b0c      	cmp	r3, #12
 80083f0:	d109      	bne.n	8008406 <HAL_TIM_PWM_Start_DMA+0x7a>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	bf0c      	ite	eq
 80083fe:	2301      	moveq	r3, #1
 8008400:	2300      	movne	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	e015      	b.n	8008432 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b10      	cmp	r3, #16
 800840a:	d109      	bne.n	8008420 <HAL_TIM_PWM_Start_DMA+0x94>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	bf0c      	ite	eq
 8008418:	2301      	moveq	r3, #1
 800841a:	2300      	movne	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e008      	b.n	8008432 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	bf0c      	ite	eq
 800842c:	2301      	moveq	r3, #1
 800842e:	2300      	movne	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
 8008438:	e1a1      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	e03c      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x142>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d109      	bne.n	800846e <HAL_TIM_PWM_Start_DMA+0xe2>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e02f      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x142>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d109      	bne.n	8008488 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e022      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x142>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b0c      	cmp	r3, #12
 800848c:	d109      	bne.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x116>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	bf0c      	ite	eq
 800849a:	2301      	moveq	r3, #1
 800849c:	2300      	movne	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	e015      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x142>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	d109      	bne.n	80084bc <HAL_TIM_PWM_Start_DMA+0x130>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	bf0c      	ite	eq
 80084b4:	2301      	moveq	r3, #1
 80084b6:	2300      	movne	r3, #0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	e008      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x142>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d034      	beq.n	800853c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <HAL_TIM_PWM_Start_DMA+0x152>
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e14d      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <HAL_TIM_PWM_Start_DMA+0x166>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f0:	e026      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d104      	bne.n	8008502 <HAL_TIM_PWM_Start_DMA+0x176>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008500:	e01e      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b08      	cmp	r3, #8
 8008506:	d104      	bne.n	8008512 <HAL_TIM_PWM_Start_DMA+0x186>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008510:	e016      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b0c      	cmp	r3, #12
 8008516:	d104      	bne.n	8008522 <HAL_TIM_PWM_Start_DMA+0x196>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008520:	e00e      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b10      	cmp	r3, #16
 8008526:	d104      	bne.n	8008532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008530:	e006      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800853a:	e001      	b.n	8008540 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e11e      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }

  switch (Channel)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b0c      	cmp	r3, #12
 8008544:	f200 80ae 	bhi.w	80086a4 <HAL_TIM_PWM_Start_DMA+0x318>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008585 	.word	0x08008585
 8008554:	080086a5 	.word	0x080086a5
 8008558:	080086a5 	.word	0x080086a5
 800855c:	080086a5 	.word	0x080086a5
 8008560:	080085cd 	.word	0x080085cd
 8008564:	080086a5 	.word	0x080086a5
 8008568:	080086a5 	.word	0x080086a5
 800856c:	080086a5 	.word	0x080086a5
 8008570:	08008615 	.word	0x08008615
 8008574:	080086a5 	.word	0x080086a5
 8008578:	080086a5 	.word	0x080086a5
 800857c:	080086a5 	.word	0x080086a5
 8008580:	0800865d 	.word	0x0800865d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	4a7f      	ldr	r2, [pc, #508]	; (8008788 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800858a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	4a7e      	ldr	r2, [pc, #504]	; (800878c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	4a7d      	ldr	r2, [pc, #500]	; (8008790 <HAL_TIM_PWM_Start_DMA+0x404>)
 800859a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3334      	adds	r3, #52	; 0x34
 80085a8:	461a      	mov	r2, r3
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	f7fb f9b8 	bl	8003920 <HAL_DMA_Start_IT>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e0e1      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c8:	60da      	str	r2, [r3, #12]
      break;
 80085ca:	e06e      	b.n	80086aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	4a6d      	ldr	r2, [pc, #436]	; (8008788 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80085d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d8:	4a6c      	ldr	r2, [pc, #432]	; (800878c <HAL_TIM_PWM_Start_DMA+0x400>)
 80085da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	4a6b      	ldr	r2, [pc, #428]	; (8008790 <HAL_TIM_PWM_Start_DMA+0x404>)
 80085e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3338      	adds	r3, #56	; 0x38
 80085f0:	461a      	mov	r2, r3
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	f7fb f994 	bl	8003920 <HAL_DMA_Start_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e0bd      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008610:	60da      	str	r2, [r3, #12]
      break;
 8008612:	e04a      	b.n	80086aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	4a5b      	ldr	r2, [pc, #364]	; (8008788 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800861a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	4a5a      	ldr	r2, [pc, #360]	; (800878c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4a59      	ldr	r2, [pc, #356]	; (8008790 <HAL_TIM_PWM_Start_DMA+0x404>)
 800862a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	333c      	adds	r3, #60	; 0x3c
 8008638:	461a      	mov	r2, r3
 800863a:	887b      	ldrh	r3, [r7, #2]
 800863c:	f7fb f970 	bl	8003920 <HAL_DMA_Start_IT>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e099      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008658:	60da      	str	r2, [r3, #12]
      break;
 800865a:	e026      	b.n	80086aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	4a49      	ldr	r2, [pc, #292]	; (8008788 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8008662:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	4a48      	ldr	r2, [pc, #288]	; (800878c <HAL_TIM_PWM_Start_DMA+0x400>)
 800866a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	4a47      	ldr	r2, [pc, #284]	; (8008790 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008672:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3340      	adds	r3, #64	; 0x40
 8008680:	461a      	mov	r2, r3
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	f7fb f94c 	bl	8003920 <HAL_DMA_Start_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e075      	b.n	800877e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086a0:	60da      	str	r2, [r3, #12]
      break;
 80086a2:	e002      	b.n	80086aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
      break;
 80086a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d165      	bne.n	800877c <HAL_TIM_PWM_Start_DMA+0x3f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2201      	movs	r2, #1
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 f8f7 	bl	80098ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a34      	ldr	r2, [pc, #208]	; (8008794 <HAL_TIM_PWM_Start_DMA+0x408>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_TIM_PWM_Start_DMA+0x346>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a32      	ldr	r2, [pc, #200]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <HAL_TIM_PWM_Start_DMA+0x34a>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <HAL_TIM_PWM_Start_DMA+0x34c>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d007      	beq.n	80086ec <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a28      	ldr	r2, [pc, #160]	; (8008794 <HAL_TIM_PWM_Start_DMA+0x408>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d022      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d01d      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a25      	ldr	r2, [pc, #148]	; (800879c <HAL_TIM_PWM_Start_DMA+0x410>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d018      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a24      	ldr	r2, [pc, #144]	; (80087a0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00e      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1d      	ldr	r2, [pc, #116]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d009      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1d      	ldr	r2, [pc, #116]	; (80087ac <HAL_TIM_PWM_Start_DMA+0x420>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d115      	bne.n	8008768 <HAL_TIM_PWM_Start_DMA+0x3dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008744:	4013      	ands	r3, r2
 8008746:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b06      	cmp	r3, #6
 800874c:	d015      	beq.n	800877a <HAL_TIM_PWM_Start_DMA+0x3ee>
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d011      	beq.n	800877a <HAL_TIM_PWM_Start_DMA+0x3ee>
      {
        __HAL_TIM_ENABLE(htim);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0201 	orr.w	r2, r2, #1
 8008764:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008766:	e008      	b.n	800877a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	e000      	b.n	800877c <HAL_TIM_PWM_Start_DMA+0x3f0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	0800906b 	.word	0x0800906b
 800878c:	08009113 	.word	0x08009113
 8008790:	08008fd9 	.word	0x08008fd9
 8008794:	40010000 	.word	0x40010000
 8008798:	40010400 	.word	0x40010400
 800879c:	40000400 	.word	0x40000400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40001800 	.word	0x40001800
 80087b0:	00010007 	.word	0x00010007

080087b4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b0c      	cmp	r3, #12
 80087c6:	d855      	bhi.n	8008874 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	08008805 	.word	0x08008805
 80087d4:	08008875 	.word	0x08008875
 80087d8:	08008875 	.word	0x08008875
 80087dc:	08008875 	.word	0x08008875
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008875 	.word	0x08008875
 80087ec:	08008875 	.word	0x08008875
 80087f0:	0800883d 	.word	0x0800883d
 80087f4:	08008875 	.word	0x08008875
 80087f8:	08008875 	.word	0x08008875
 80087fc:	08008875 	.word	0x08008875
 8008800:	08008859 	.word	0x08008859
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008812:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	4618      	mov	r0, r3
 800881a:	f7fb f8e1 	bl	80039e0 <HAL_DMA_Abort_IT>
      break;
 800881e:	e02c      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800882e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	4618      	mov	r0, r3
 8008836:	f7fb f8d3 	bl	80039e0 <HAL_DMA_Abort_IT>
      break;
 800883a:	e01e      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800884a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4618      	mov	r0, r3
 8008852:	f7fb f8c5 	bl	80039e0 <HAL_DMA_Abort_IT>
      break;
 8008856:	e010      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008866:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	4618      	mov	r0, r3
 800886e:	f7fb f8b7 	bl	80039e0 <HAL_DMA_Abort_IT>
      break;
 8008872:	e002      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	bf00      	nop
  }

  if (status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d171      	bne.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f80f 	bl	80098ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a37      	ldr	r2, [pc, #220]	; (8008970 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d004      	beq.n	80088a2 <HAL_TIM_PWM_Stop_DMA+0xee>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a35      	ldr	r2, [pc, #212]	; (8008974 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d101      	bne.n	80088a6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d017      	beq.n	80088dc <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80088b6:	4013      	ands	r3, r2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10f      	bne.n	80088dc <HAL_TIM_PWM_Stop_DMA+0x128>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6a1a      	ldr	r2, [r3, #32]
 80088c2:	f240 4344 	movw	r3, #1092	; 0x444
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <HAL_TIM_PWM_Stop_DMA+0x128>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6a1a      	ldr	r2, [r3, #32]
 80088e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10f      	bne.n	800890c <HAL_TIM_PWM_Stop_DMA+0x158>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	f240 4344 	movw	r3, #1092	; 0x444
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <HAL_TIM_PWM_Stop_DMA+0x158>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <HAL_TIM_PWM_Stop_DMA+0x168>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891a:	e023      	b.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b04      	cmp	r3, #4
 8008920:	d104      	bne.n	800892c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892a:	e01b      	b.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b08      	cmp	r3, #8
 8008930:	d104      	bne.n	800893c <HAL_TIM_PWM_Stop_DMA+0x188>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893a:	e013      	b.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b0c      	cmp	r3, #12
 8008940:	d104      	bne.n	800894c <HAL_TIM_PWM_Stop_DMA+0x198>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800894a:	e00b      	b.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b10      	cmp	r3, #16
 8008950:	d104      	bne.n	800895c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800895a:	e003      	b.n	8008964 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40010000 	.word	0x40010000
 8008974:	40010400 	.word	0x40010400

08008978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b02      	cmp	r3, #2
 800898c:	d122      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b02      	cmp	r3, #2
 800899a:	d11b      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0202 	mvn.w	r2, #2
 80089a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fae4 	bl	8008f88 <HAL_TIM_IC_CaptureCallback>
 80089c0:	e005      	b.n	80089ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fad6 	bl	8008f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7f7 fe6d 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d122      	bne.n	8008a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d11b      	bne.n	8008a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0204 	mvn.w	r2, #4
 80089f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 faba 	bl	8008f88 <HAL_TIM_IC_CaptureCallback>
 8008a14:	e005      	b.n	8008a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 faac 	bl	8008f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7f7 fe43 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d122      	bne.n	8008a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d11b      	bne.n	8008a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0208 	mvn.w	r2, #8
 8008a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa90 	bl	8008f88 <HAL_TIM_IC_CaptureCallback>
 8008a68:	e005      	b.n	8008a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa82 	bl	8008f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7f7 fe19 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d122      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d11b      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f06f 0210 	mvn.w	r2, #16
 8008aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa66 	bl	8008f88 <HAL_TIM_IC_CaptureCallback>
 8008abc:	e005      	b.n	8008aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa58 	bl	8008f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7f7 fdef 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10e      	bne.n	8008afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d107      	bne.n	8008afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0201 	mvn.w	r2, #1
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7f9 f9dc 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b06:	2b80      	cmp	r3, #128	; 0x80
 8008b08:	d10e      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d107      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 ff80 	bl	8009a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b36:	d10e      	bne.n	8008b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	2b80      	cmp	r3, #128	; 0x80
 8008b44:	d107      	bne.n	8008b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 ff73 	bl	8009a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d10e      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d107      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa17 	bl	8008fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d10e      	bne.n	8008bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d107      	bne.n	8008bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f06f 0220 	mvn.w	r2, #32
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 ff33 	bl	8009a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e0ff      	b.n	8008dd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b14      	cmp	r3, #20
 8008be2:	f200 80f0 	bhi.w	8008dc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c41 	.word	0x08008c41
 8008bf0:	08008dc7 	.word	0x08008dc7
 8008bf4:	08008dc7 	.word	0x08008dc7
 8008bf8:	08008dc7 	.word	0x08008dc7
 8008bfc:	08008c81 	.word	0x08008c81
 8008c00:	08008dc7 	.word	0x08008dc7
 8008c04:	08008dc7 	.word	0x08008dc7
 8008c08:	08008dc7 	.word	0x08008dc7
 8008c0c:	08008cc3 	.word	0x08008cc3
 8008c10:	08008dc7 	.word	0x08008dc7
 8008c14:	08008dc7 	.word	0x08008dc7
 8008c18:	08008dc7 	.word	0x08008dc7
 8008c1c:	08008d03 	.word	0x08008d03
 8008c20:	08008dc7 	.word	0x08008dc7
 8008c24:	08008dc7 	.word	0x08008dc7
 8008c28:	08008dc7 	.word	0x08008dc7
 8008c2c:	08008d45 	.word	0x08008d45
 8008c30:	08008dc7 	.word	0x08008dc7
 8008c34:	08008dc7 	.word	0x08008dc7
 8008c38:	08008dc7 	.word	0x08008dc7
 8008c3c:	08008d85 	.word	0x08008d85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fb38 	bl	80092bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0208 	orr.w	r2, r2, #8
 8008c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0204 	bic.w	r2, r2, #4
 8008c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6999      	ldr	r1, [r3, #24]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	619a      	str	r2, [r3, #24]
      break;
 8008c7e:	e0a5      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fb8a 	bl	80093a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699a      	ldr	r2, [r3, #24]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	699a      	ldr	r2, [r3, #24]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6999      	ldr	r1, [r3, #24]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	021a      	lsls	r2, r3, #8
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	619a      	str	r2, [r3, #24]
      break;
 8008cc0:	e084      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68b9      	ldr	r1, [r7, #8]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fbe1 	bl	8009490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0208 	orr.w	r2, r2, #8
 8008cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0204 	bic.w	r2, r2, #4
 8008cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69d9      	ldr	r1, [r3, #28]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	61da      	str	r2, [r3, #28]
      break;
 8008d00:	e064      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fc37 	bl	800957c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69d9      	ldr	r1, [r3, #28]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	021a      	lsls	r2, r3, #8
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	61da      	str	r2, [r3, #28]
      break;
 8008d42:	e043      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fc6e 	bl	800962c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0208 	orr.w	r2, r2, #8
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0204 	bic.w	r2, r2, #4
 8008d6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d82:	e023      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fca0 	bl	80096d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	021a      	lsls	r2, r3, #8
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008dc4:	e002      	b.n	8008dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_TIM_ConfigClockSource+0x1c>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e0b4      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x186>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	4b56      	ldr	r3, [pc, #344]	; (8008f70 <HAL_TIM_ConfigClockSource+0x190>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e34:	d03e      	beq.n	8008eb4 <HAL_TIM_ConfigClockSource+0xd4>
 8008e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3a:	f200 8087 	bhi.w	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e42:	f000 8086 	beq.w	8008f52 <HAL_TIM_ConfigClockSource+0x172>
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4a:	d87f      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e4c:	2b70      	cmp	r3, #112	; 0x70
 8008e4e:	d01a      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0xa6>
 8008e50:	2b70      	cmp	r3, #112	; 0x70
 8008e52:	d87b      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e54:	2b60      	cmp	r3, #96	; 0x60
 8008e56:	d050      	beq.n	8008efa <HAL_TIM_ConfigClockSource+0x11a>
 8008e58:	2b60      	cmp	r3, #96	; 0x60
 8008e5a:	d877      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e5c:	2b50      	cmp	r3, #80	; 0x50
 8008e5e:	d03c      	beq.n	8008eda <HAL_TIM_ConfigClockSource+0xfa>
 8008e60:	2b50      	cmp	r3, #80	; 0x50
 8008e62:	d873      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d058      	beq.n	8008f1a <HAL_TIM_ConfigClockSource+0x13a>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	d86f      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d064      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x15a>
 8008e70:	2b30      	cmp	r3, #48	; 0x30
 8008e72:	d86b      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	d060      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x15a>
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d867      	bhi.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d05c      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x15a>
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	d05a      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x15a>
 8008e84:	e062      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6899      	ldr	r1, [r3, #8]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f000 fce9 	bl	800986c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	609a      	str	r2, [r3, #8]
      break;
 8008eb2:	e04f      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	6899      	ldr	r1, [r3, #8]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f000 fcd2 	bl	800986c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ed6:	609a      	str	r2, [r3, #8]
      break;
 8008ed8:	e03c      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	6859      	ldr	r1, [r3, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f000 fc46 	bl	8009778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2150      	movs	r1, #80	; 0x50
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fc9f 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8008ef8:	e02c      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6859      	ldr	r1, [r3, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f000 fc65 	bl	80097d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2160      	movs	r1, #96	; 0x60
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fc8f 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8008f18:	e01c      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6859      	ldr	r1, [r3, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f000 fc26 	bl	8009778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fc7f 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8008f38:	e00c      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f000 fc76 	bl	8009836 <TIM_ITRx_SetConfig>
      break;
 8008f4a:	e003      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f50:	e000      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	fffeff88 	.word	0xfffeff88

08008f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d107      	bne.n	8009000 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ffe:	e02a      	b.n	8009056 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d107      	bne.n	800901a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2202      	movs	r2, #2
 800900e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009018:	e01d      	b.n	8009056 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d107      	bne.n	8009034 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2204      	movs	r2, #4
 8009028:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009032:	e010      	b.n	8009056 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	429a      	cmp	r2, r3
 800903c:	d107      	bne.n	800904e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2208      	movs	r2, #8
 8009042:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800904c:	e003      	b.n	8009056 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff ffb4 	bl	8008fc4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	771a      	strb	r2, [r3, #28]
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d10b      	bne.n	800909a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d136      	bne.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009098:	e031      	b.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d10b      	bne.n	80090bc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2202      	movs	r2, #2
 80090a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d125      	bne.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090ba:	e020      	b.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d10b      	bne.n	80090de <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2204      	movs	r2, #4
 80090ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d114      	bne.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090dc:	e00f      	b.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d10a      	bne.n	80090fe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2208      	movs	r2, #8
 80090ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7f7 fad2 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	771a      	strb	r2, [r3, #28]
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d103      	bne.n	8009132 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2201      	movs	r2, #1
 800912e:	771a      	strb	r2, [r3, #28]
 8009130:	e019      	b.n	8009166 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d103      	bne.n	8009144 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2202      	movs	r2, #2
 8009140:	771a      	strb	r2, [r3, #28]
 8009142:	e010      	b.n	8009166 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d103      	bne.n	8009156 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2204      	movs	r2, #4
 8009152:	771a      	strb	r2, [r3, #28]
 8009154:	e007      	b.n	8009166 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d102      	bne.n	8009166 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2208      	movs	r2, #8
 8009164:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff ff18 	bl	8008f9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	771a      	strb	r2, [r3, #28]
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a40      	ldr	r2, [pc, #256]	; (8009290 <TIM_Base_SetConfig+0x114>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d013      	beq.n	80091bc <TIM_Base_SetConfig+0x40>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919a:	d00f      	beq.n	80091bc <TIM_Base_SetConfig+0x40>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a3d      	ldr	r2, [pc, #244]	; (8009294 <TIM_Base_SetConfig+0x118>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00b      	beq.n	80091bc <TIM_Base_SetConfig+0x40>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a3c      	ldr	r2, [pc, #240]	; (8009298 <TIM_Base_SetConfig+0x11c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d007      	beq.n	80091bc <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a3b      	ldr	r2, [pc, #236]	; (800929c <TIM_Base_SetConfig+0x120>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d003      	beq.n	80091bc <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a3a      	ldr	r2, [pc, #232]	; (80092a0 <TIM_Base_SetConfig+0x124>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d108      	bne.n	80091ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a2f      	ldr	r2, [pc, #188]	; (8009290 <TIM_Base_SetConfig+0x114>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d02b      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091dc:	d027      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <TIM_Base_SetConfig+0x118>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d023      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a2b      	ldr	r2, [pc, #172]	; (8009298 <TIM_Base_SetConfig+0x11c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d01f      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2a      	ldr	r2, [pc, #168]	; (800929c <TIM_Base_SetConfig+0x120>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d01b      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a29      	ldr	r2, [pc, #164]	; (80092a0 <TIM_Base_SetConfig+0x124>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d017      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a28      	ldr	r2, [pc, #160]	; (80092a4 <TIM_Base_SetConfig+0x128>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d013      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <TIM_Base_SetConfig+0x12c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00f      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a26      	ldr	r2, [pc, #152]	; (80092ac <TIM_Base_SetConfig+0x130>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00b      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <TIM_Base_SetConfig+0x134>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d007      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a24      	ldr	r2, [pc, #144]	; (80092b4 <TIM_Base_SetConfig+0x138>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d003      	beq.n	800922e <TIM_Base_SetConfig+0xb2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a23      	ldr	r2, [pc, #140]	; (80092b8 <TIM_Base_SetConfig+0x13c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d108      	bne.n	8009240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <TIM_Base_SetConfig+0x114>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d003      	beq.n	8009274 <TIM_Base_SetConfig+0xf8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <TIM_Base_SetConfig+0x124>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d103      	bne.n	800927c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	615a      	str	r2, [r3, #20]
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40010000 	.word	0x40010000
 8009294:	40000400 	.word	0x40000400
 8009298:	40000800 	.word	0x40000800
 800929c:	40000c00 	.word	0x40000c00
 80092a0:	40010400 	.word	0x40010400
 80092a4:	40014000 	.word	0x40014000
 80092a8:	40014400 	.word	0x40014400
 80092ac:	40014800 	.word	0x40014800
 80092b0:	40001800 	.word	0x40001800
 80092b4:	40001c00 	.word	0x40001c00
 80092b8:	40002000 	.word	0x40002000

080092bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	f023 0201 	bic.w	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <TIM_OC1_SetConfig+0xd8>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f023 0302 	bic.w	r3, r3, #2
 8009304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	4313      	orrs	r3, r2
 800930e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a21      	ldr	r2, [pc, #132]	; (8009398 <TIM_OC1_SetConfig+0xdc>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d003      	beq.n	8009320 <TIM_OC1_SetConfig+0x64>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a20      	ldr	r2, [pc, #128]	; (800939c <TIM_OC1_SetConfig+0xe0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d10c      	bne.n	800933a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f023 0308 	bic.w	r3, r3, #8
 8009326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f023 0304 	bic.w	r3, r3, #4
 8009338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a16      	ldr	r2, [pc, #88]	; (8009398 <TIM_OC1_SetConfig+0xdc>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_OC1_SetConfig+0x8e>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a15      	ldr	r2, [pc, #84]	; (800939c <TIM_OC1_SetConfig+0xe0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d111      	bne.n	800936e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	621a      	str	r2, [r3, #32]
}
 8009388:	bf00      	nop
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	fffeff8f 	.word	0xfffeff8f
 8009398:	40010000 	.word	0x40010000
 800939c:	40010400 	.word	0x40010400

080093a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f023 0210 	bic.w	r2, r3, #16
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4b2e      	ldr	r3, [pc, #184]	; (8009484 <TIM_OC2_SetConfig+0xe4>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 0320 	bic.w	r3, r3, #32
 80093ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a23      	ldr	r2, [pc, #140]	; (8009488 <TIM_OC2_SetConfig+0xe8>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d003      	beq.n	8009408 <TIM_OC2_SetConfig+0x68>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a22      	ldr	r2, [pc, #136]	; (800948c <TIM_OC2_SetConfig+0xec>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d10d      	bne.n	8009424 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a18      	ldr	r2, [pc, #96]	; (8009488 <TIM_OC2_SetConfig+0xe8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_OC2_SetConfig+0x94>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <TIM_OC2_SetConfig+0xec>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d113      	bne.n	800945c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800943a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	feff8fff 	.word	0xfeff8fff
 8009488:	40010000 	.word	0x40010000
 800948c:	40010400 	.word	0x40010400

08009490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <TIM_OC3_SetConfig+0xe0>)
 80094bc:	4013      	ands	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0303 	bic.w	r3, r3, #3
 80094c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a22      	ldr	r2, [pc, #136]	; (8009574 <TIM_OC3_SetConfig+0xe4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d003      	beq.n	80094f6 <TIM_OC3_SetConfig+0x66>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a21      	ldr	r2, [pc, #132]	; (8009578 <TIM_OC3_SetConfig+0xe8>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d10d      	bne.n	8009512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a17      	ldr	r2, [pc, #92]	; (8009574 <TIM_OC3_SetConfig+0xe4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_OC3_SetConfig+0x92>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a16      	ldr	r2, [pc, #88]	; (8009578 <TIM_OC3_SetConfig+0xe8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d113      	bne.n	800954a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	621a      	str	r2, [r3, #32]
}
 8009564:	bf00      	nop
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	fffeff8f 	.word	0xfffeff8f
 8009574:	40010000 	.word	0x40010000
 8009578:	40010400 	.word	0x40010400

0800957c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <TIM_OC4_SetConfig+0xa4>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	031b      	lsls	r3, r3, #12
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a13      	ldr	r2, [pc, #76]	; (8009624 <TIM_OC4_SetConfig+0xa8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_OC4_SetConfig+0x68>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a12      	ldr	r2, [pc, #72]	; (8009628 <TIM_OC4_SetConfig+0xac>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d109      	bne.n	80095f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	019b      	lsls	r3, r3, #6
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	621a      	str	r2, [r3, #32]
}
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	feff8fff 	.word	0xfeff8fff
 8009624:	40010000 	.word	0x40010000
 8009628:	40010400 	.word	0x40010400

0800962c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <TIM_OC5_SetConfig+0x98>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800966c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a12      	ldr	r2, [pc, #72]	; (80096c8 <TIM_OC5_SetConfig+0x9c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC5_SetConfig+0x5e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a11      	ldr	r2, [pc, #68]	; (80096cc <TIM_OC5_SetConfig+0xa0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d109      	bne.n	800969e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	621a      	str	r2, [r3, #32]
}
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	fffeff8f 	.word	0xfffeff8f
 80096c8:	40010000 	.word	0x40010000
 80096cc:	40010400 	.word	0x40010400

080096d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <TIM_OC6_SetConfig+0x9c>)
 80096fc:	4013      	ands	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	4313      	orrs	r3, r2
 800971e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a13      	ldr	r2, [pc, #76]	; (8009770 <TIM_OC6_SetConfig+0xa0>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_OC6_SetConfig+0x60>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a12      	ldr	r2, [pc, #72]	; (8009774 <TIM_OC6_SetConfig+0xa4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d109      	bne.n	8009744 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	621a      	str	r2, [r3, #32]
}
 800975e:	bf00      	nop
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	feff8fff 	.word	0xfeff8fff
 8009770:	40010000 	.word	0x40010000
 8009774:	40010400 	.word	0x40010400

08009778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 030a 	bic.w	r3, r3, #10
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0210 	bic.w	r2, r3, #16
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	031b      	lsls	r3, r3, #12
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	f043 0307 	orr.w	r3, r3, #7
 8009858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	609a      	str	r2, [r3, #8]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	021a      	lsls	r2, r3, #8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	431a      	orrs	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4313      	orrs	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	609a      	str	r2, [r3, #8]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	2201      	movs	r2, #1
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	43db      	mvns	r3, r3
 80098ce:	401a      	ands	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a1a      	ldr	r2, [r3, #32]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	fa01 f303 	lsl.w	r3, r1, r3
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	621a      	str	r2, [r3, #32]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800990c:	2302      	movs	r3, #2
 800990e:	e06d      	b.n	80099ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a30      	ldr	r2, [pc, #192]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a2f      	ldr	r2, [pc, #188]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d108      	bne.n	8009956 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800994a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4313      	orrs	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a20      	ldr	r2, [pc, #128]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d022      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009982:	d01d      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1d      	ldr	r2, [pc, #116]	; (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d018      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a1c      	ldr	r2, [pc, #112]	; (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d013      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a1a      	ldr	r2, [pc, #104]	; (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00e      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a15      	ldr	r2, [pc, #84]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d009      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a16      	ldr	r2, [pc, #88]	; (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d004      	beq.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a15      	ldr	r2, [pc, #84]	; (8009a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10c      	bne.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40010400 	.word	0x40010400
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	40000c00 	.word	0x40000c00
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40001800 	.word	0x40001800

08009a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d121      	bne.n	8009aa6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <FMC_SDRAM_Init+0xb4>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	6851      	ldr	r1, [r2, #4]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6892      	ldr	r2, [r2, #8]
 8009a72:	4311      	orrs	r1, r2
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	68d2      	ldr	r2, [r2, #12]
 8009a78:	4311      	orrs	r1, r2
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	6912      	ldr	r2, [r2, #16]
 8009a7e:	4311      	orrs	r1, r2
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	6952      	ldr	r2, [r2, #20]
 8009a84:	4311      	orrs	r1, r2
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	6992      	ldr	r2, [r2, #24]
 8009a8a:	4311      	orrs	r1, r2
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	69d2      	ldr	r2, [r2, #28]
 8009a90:	4311      	orrs	r1, r2
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	6a12      	ldr	r2, [r2, #32]
 8009a96:	4311      	orrs	r1, r2
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e026      	b.n	8009af4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	69d9      	ldr	r1, [r3, #28]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	4319      	orrs	r1, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	430b      	orrs	r3, r1
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <FMC_SDRAM_Init+0xb4>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	6851      	ldr	r1, [r2, #4]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	6892      	ldr	r2, [r2, #8]
 8009ad4:	4311      	orrs	r1, r2
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	68d2      	ldr	r2, [r2, #12]
 8009ada:	4311      	orrs	r1, r2
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	6912      	ldr	r2, [r2, #16]
 8009ae0:	4311      	orrs	r1, r2
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	6952      	ldr	r2, [r2, #20]
 8009ae6:	4311      	orrs	r1, r2
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	6992      	ldr	r2, [r2, #24]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	ffff8000 	.word	0xffff8000

08009b08 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d128      	bne.n	8009b6c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	1e59      	subs	r1, r3, #1
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	4319      	orrs	r1, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	4319      	orrs	r1, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	031b      	lsls	r3, r3, #12
 8009b44:	4319      	orrs	r1, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	4319      	orrs	r1, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	051b      	lsls	r3, r3, #20
 8009b58:	4319      	orrs	r1, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	061b      	lsls	r3, r3, #24
 8009b62:	430b      	orrs	r3, r1
 8009b64:	431a      	orrs	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	609a      	str	r2, [r3, #8]
 8009b6a:	e02d      	b.n	8009bc8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <FMC_SDRAM_Timing_Init+0xd0>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	68d2      	ldr	r2, [r2, #12]
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	0311      	lsls	r1, r2, #12
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	6952      	ldr	r2, [r2, #20]
 8009b80:	3a01      	subs	r2, #1
 8009b82:	0512      	lsls	r2, r2, #20
 8009b84:	430a      	orrs	r2, r1
 8009b86:	431a      	orrs	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	1e59      	subs	r1, r3, #1
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	4319      	orrs	r1, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	021b      	lsls	r3, r3, #8
 8009bac:	4319      	orrs	r1, r3
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	041b      	lsls	r3, r3, #16
 8009bb6:	4319      	orrs	r1, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	061b      	lsls	r3, r3, #24
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	ff0f0fff 	.word	0xff0f0fff

08009bdc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <FMC_SDRAM_SendCommand+0x44>)
 8009bee:	4013      	ands	r3, r2
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	6811      	ldr	r1, [r2, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	6852      	ldr	r2, [r2, #4]
 8009bf8:	4311      	orrs	r1, r2
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6892      	ldr	r2, [r2, #8]
 8009bfe:	3a01      	subs	r2, #1
 8009c00:	0152      	lsls	r2, r2, #5
 8009c02:	4311      	orrs	r1, r2
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	68d2      	ldr	r2, [r2, #12]
 8009c08:	0252      	lsls	r2, r2, #9
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	ffc00000 	.word	0xffc00000

08009c24 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	695a      	ldr	r2, [r3, #20]
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	0052      	lsls	r2, r2, #1
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	ffffc001 	.word	0xffffc001

08009c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
	...

08009c64 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c6a:	f3ef 8305 	mrs	r3, IPSR
 8009c6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10f      	bne.n	8009c96 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c76:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7a:	607b      	str	r3, [r7, #4]
  return(result);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c82:	f3ef 8311 	mrs	r3, BASEPRI
 8009c86:	603b      	str	r3, [r7, #0]
  return(result);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <osKernelInitialize+0x3a>
 8009c8e:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <osKernelInitialize+0x64>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d103      	bne.n	8009c9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009c96:	f06f 0305 	mvn.w	r3, #5
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e00c      	b.n	8009cb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <osKernelInitialize+0x64>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ca6:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <osKernelInitialize+0x64>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e002      	b.n	8009cb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20000afc 	.word	0x20000afc

08009ccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd2:	f3ef 8305 	mrs	r3, IPSR
 8009cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10f      	bne.n	8009cfe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cde:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cea:	f3ef 8311 	mrs	r3, BASEPRI
 8009cee:	603b      	str	r3, [r7, #0]
  return(result);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d007      	beq.n	8009d06 <osKernelStart+0x3a>
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <osKernelStart+0x68>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d103      	bne.n	8009d06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009cfe:	f06f 0305 	mvn.w	r3, #5
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e010      	b.n	8009d28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <osKernelStart+0x68>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d109      	bne.n	8009d22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d0e:	f7ff ffa1 	bl	8009c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <osKernelStart+0x68>)
 8009d14:	2202      	movs	r2, #2
 8009d16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d18:	f002 f8c8 	bl	800beac <vTaskStartScheduler>
      stat = osOK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e002      	b.n	8009d28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000afc 	.word	0x20000afc

08009d38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b090      	sub	sp, #64	; 0x40
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d48:	f3ef 8305 	mrs	r3, IPSR
 8009d4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f040 808f 	bne.w	8009e74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d56:	f3ef 8310 	mrs	r3, PRIMASK
 8009d5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d62:	f3ef 8311 	mrs	r3, BASEPRI
 8009d66:	617b      	str	r3, [r7, #20]
  return(result);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <osThreadNew+0x3e>
 8009d6e:	4b44      	ldr	r3, [pc, #272]	; (8009e80 <osThreadNew+0x148>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d07e      	beq.n	8009e74 <osThreadNew+0x13c>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d07b      	beq.n	8009e74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009d80:	2318      	movs	r3, #24
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009d84:	2300      	movs	r3, #0
 8009d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d045      	beq.n	8009e20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <osThreadNew+0x6a>
        name = attr->name;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <osThreadNew+0x90>
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	2b38      	cmp	r3, #56	; 0x38
 8009dba:	d805      	bhi.n	8009dc8 <osThreadNew+0x90>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <osThreadNew+0x94>
        return (NULL);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	e054      	b.n	8009e76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	089b      	lsrs	r3, r3, #2
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00e      	beq.n	8009e02 <osThreadNew+0xca>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	2b5b      	cmp	r3, #91	; 0x5b
 8009dea:	d90a      	bls.n	8009e02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <osThreadNew+0xca>
        mem = 1;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	e010      	b.n	8009e24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10c      	bne.n	8009e24 <osThreadNew+0xec>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d108      	bne.n	8009e24 <osThreadNew+0xec>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <osThreadNew+0xec>
          mem = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	623b      	str	r3, [r7, #32]
 8009e1e:	e001      	b.n	8009e24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d110      	bne.n	8009e4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e32:	9202      	str	r2, [sp, #8]
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f001 fe53 	bl	800baec <xTaskCreateStatic>
 8009e46:	4603      	mov	r3, r0
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	e013      	b.n	8009e74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d110      	bne.n	8009e74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	f107 0310 	add.w	r3, r7, #16
 8009e5a:	9301      	str	r3, [sp, #4]
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f001 fea4 	bl	800bbb2 <xTaskCreate>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d001      	beq.n	8009e74 <osThreadNew+0x13c>
          hTask = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e74:	693b      	ldr	r3, [r7, #16]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3730      	adds	r7, #48	; 0x30
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000afc 	.word	0x20000afc

08009e84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e8c:	f3ef 8305 	mrs	r3, IPSR
 8009e90:	613b      	str	r3, [r7, #16]
  return(result);
 8009e92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10f      	bne.n	8009eb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e98:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d105      	bne.n	8009eb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ea8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <osDelay+0x3c>
 8009eb0:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <osDelay+0x58>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d103      	bne.n	8009ec0 <osDelay+0x3c>
    stat = osErrorISR;
 8009eb8:	f06f 0305 	mvn.w	r3, #5
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e007      	b.n	8009ed0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 ffb8 	bl	800be40 <vTaskDelay>
    }
  }

  return (stat);
 8009ed0:	697b      	ldr	r3, [r7, #20]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000afc 	.word	0x20000afc

08009ee0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eec:	f3ef 8305 	mrs	r3, IPSR
 8009ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ef2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 8085 	bne.w	800a004 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009efa:	f3ef 8310 	mrs	r3, PRIMASK
 8009efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f06:	f3ef 8311 	mrs	r3, BASEPRI
 8009f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <osMutexNew+0x3a>
 8009f12:	4b3f      	ldr	r3, [pc, #252]	; (800a010 <osMutexNew+0x130>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d074      	beq.n	800a004 <osMutexNew+0x124>
    if (attr != NULL) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	623b      	str	r3, [r7, #32]
 8009f26:	e001      	b.n	8009f2c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <osMutexNew+0x5c>
      rmtx = 1U;
 8009f36:	2301      	movs	r3, #1
 8009f38:	61fb      	str	r3, [r7, #28]
 8009f3a:	e001      	b.n	8009f40 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d15c      	bne.n	800a004 <osMutexNew+0x124>
      mem = -1;
 8009f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d015      	beq.n	8009f82 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d006      	beq.n	8009f6c <osMutexNew+0x8c>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b4f      	cmp	r3, #79	; 0x4f
 8009f64:	d902      	bls.n	8009f6c <osMutexNew+0x8c>
          mem = 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	e00c      	b.n	8009f86 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d108      	bne.n	8009f86 <osMutexNew+0xa6>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <osMutexNew+0xa6>
            mem = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61bb      	str	r3, [r7, #24]
 8009f80:	e001      	b.n	8009f86 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d112      	bne.n	8009fb2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d007      	beq.n	8009fa2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	4619      	mov	r1, r3
 8009f98:	2004      	movs	r0, #4
 8009f9a:	f000 fe1a 	bl	800abd2 <xQueueCreateMutexStatic>
 8009f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009fa0:	e016      	b.n	8009fd0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	2001      	movs	r0, #1
 8009faa:	f000 fe12 	bl	800abd2 <xQueueCreateMutexStatic>
 8009fae:	6278      	str	r0, [r7, #36]	; 0x24
 8009fb0:	e00e      	b.n	8009fd0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009fbe:	2004      	movs	r0, #4
 8009fc0:	f000 fdef 	bl	800aba2 <xQueueCreateMutex>
 8009fc4:	6278      	str	r0, [r7, #36]	; 0x24
 8009fc6:	e003      	b.n	8009fd0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009fc8:	2001      	movs	r0, #1
 8009fca:	f000 fdea 	bl	800aba2 <xQueueCreateMutex>
 8009fce:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00c      	beq.n	8009ff0 <osMutexNew+0x110>
        if (attr != NULL) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <osMutexNew+0x104>
          name = attr->name;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	617b      	str	r3, [r7, #20]
 8009fe2:	e001      	b.n	8009fe8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fec:	f001 fcf6 	bl	800b9dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d006      	beq.n	800a004 <osMutexNew+0x124>
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a006:	4618      	mov	r0, r3
 800a008:	3728      	adds	r7, #40	; 0x28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000afc 	.word	0x20000afc

0800a014 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a032:	f3ef 8305 	mrs	r3, IPSR
 800a036:	613b      	str	r3, [r7, #16]
  return(result);
 800a038:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10f      	bne.n	800a05e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a03e:	f3ef 8310 	mrs	r3, PRIMASK
 800a042:	60fb      	str	r3, [r7, #12]
  return(result);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a04a:	f3ef 8311 	mrs	r3, BASEPRI
 800a04e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d007      	beq.n	800a066 <osMutexAcquire+0x52>
 800a056:	4b1d      	ldr	r3, [pc, #116]	; (800a0cc <osMutexAcquire+0xb8>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d103      	bne.n	800a066 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a05e:	f06f 0305 	mvn.w	r3, #5
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e02c      	b.n	800a0c0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a06c:	f06f 0303 	mvn.w	r3, #3
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	e025      	b.n	800a0c0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d011      	beq.n	800a09e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	69b8      	ldr	r0, [r7, #24]
 800a07e:	f000 fdf9 	bl	800ac74 <xQueueTakeMutexRecursive>
 800a082:	4603      	mov	r3, r0
 800a084:	2b01      	cmp	r3, #1
 800a086:	d01b      	beq.n	800a0c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a08e:	f06f 0301 	mvn.w	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	e014      	b.n	800a0c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a096:	f06f 0302 	mvn.w	r3, #2
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e010      	b.n	800a0c0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	69b8      	ldr	r0, [r7, #24]
 800a0a2:	f001 f9b3 	bl	800b40c <xQueueSemaphoreTake>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d009      	beq.n	800a0c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a0b2:	f06f 0301 	mvn.w	r3, #1
 800a0b6:	61fb      	str	r3, [r7, #28]
 800a0b8:	e002      	b.n	800a0c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a0ba:	f06f 0302 	mvn.w	r3, #2
 800a0be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3720      	adds	r7, #32
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000afc 	.word	0x20000afc

0800a0d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f023 0301 	bic.w	r3, r3, #1
 800a0de:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ec:	f3ef 8305 	mrs	r3, IPSR
 800a0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a0f2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10f      	bne.n	800a118 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a104:	f3ef 8311 	mrs	r3, BASEPRI
 800a108:	60bb      	str	r3, [r7, #8]
  return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <osMutexRelease+0x50>
 800a110:	4b16      	ldr	r3, [pc, #88]	; (800a16c <osMutexRelease+0x9c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d103      	bne.n	800a120 <osMutexRelease+0x50>
    stat = osErrorISR;
 800a118:	f06f 0305 	mvn.w	r3, #5
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	e01f      	b.n	800a160 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a126:	f06f 0303 	mvn.w	r3, #3
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e018      	b.n	800a160 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a134:	69b8      	ldr	r0, [r7, #24]
 800a136:	f000 fd67 	bl	800ac08 <xQueueGiveMutexRecursive>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d00f      	beq.n	800a160 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a140:	f06f 0302 	mvn.w	r3, #2
 800a144:	61fb      	str	r3, [r7, #28]
 800a146:	e00b      	b.n	800a160 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	69b8      	ldr	r0, [r7, #24]
 800a150:	f000 fe3a 	bl	800adc8 <xQueueGenericSend>
 800a154:	4603      	mov	r3, r0
 800a156:	2b01      	cmp	r3, #1
 800a158:	d002      	beq.n	800a160 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a15a:	f06f 0302 	mvn.w	r3, #2
 800a15e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a160:	69fb      	ldr	r3, [r7, #28]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000afc 	.word	0x20000afc

0800a170 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b08c      	sub	sp, #48	; 0x30
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a180:	f3ef 8305 	mrs	r3, IPSR
 800a184:	61bb      	str	r3, [r7, #24]
  return(result);
 800a186:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 8086 	bne.w	800a29a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a18e:	f3ef 8310 	mrs	r3, PRIMASK
 800a192:	617b      	str	r3, [r7, #20]
  return(result);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d105      	bne.n	800a1a6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a19a:	f3ef 8311 	mrs	r3, BASEPRI
 800a19e:	613b      	str	r3, [r7, #16]
  return(result);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <osSemaphoreNew+0x3e>
 800a1a6:	4b3f      	ldr	r3, [pc, #252]	; (800a2a4 <osSemaphoreNew+0x134>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d075      	beq.n	800a29a <osSemaphoreNew+0x12a>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d072      	beq.n	800a29a <osSemaphoreNew+0x12a>
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d86e      	bhi.n	800a29a <osSemaphoreNew+0x12a>
    mem = -1;
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d015      	beq.n	800a1f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <osSemaphoreNew+0x6e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	2b4f      	cmp	r3, #79	; 0x4f
 800a1d6:	d902      	bls.n	800a1de <osSemaphoreNew+0x6e>
        mem = 1;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	623b      	str	r3, [r7, #32]
 800a1dc:	e00c      	b.n	800a1f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d108      	bne.n	800a1f8 <osSemaphoreNew+0x88>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <osSemaphoreNew+0x88>
          mem = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	623b      	str	r3, [r7, #32]
 800a1f2:	e001      	b.n	800a1f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fe:	d04c      	beq.n	800a29a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d128      	bne.n	800a258 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d10a      	bne.n	800a222 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	2203      	movs	r2, #3
 800a212:	9200      	str	r2, [sp, #0]
 800a214:	2200      	movs	r2, #0
 800a216:	2100      	movs	r1, #0
 800a218:	2001      	movs	r0, #1
 800a21a:	f000 fbc1 	bl	800a9a0 <xQueueGenericCreateStatic>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24
 800a220:	e005      	b.n	800a22e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a222:	2203      	movs	r2, #3
 800a224:	2100      	movs	r1, #0
 800a226:	2001      	movs	r0, #1
 800a228:	f000 fc3c 	bl	800aaa4 <xQueueGenericCreate>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	d022      	beq.n	800a27a <osSemaphoreNew+0x10a>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d01f      	beq.n	800a27a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a23a:	2300      	movs	r3, #0
 800a23c:	2200      	movs	r2, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a242:	f000 fdc1 	bl	800adc8 <xQueueGenericSend>
 800a246:	4603      	mov	r3, r0
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d016      	beq.n	800a27a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a24c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a24e:	f001 fa77 	bl	800b740 <vQueueDelete>
            hSemaphore = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
 800a256:	e010      	b.n	800a27a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d108      	bne.n	800a270 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	461a      	mov	r2, r3
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 fd3c 	bl	800ace4 <xQueueCreateCountingSemaphoreStatic>
 800a26c:	6278      	str	r0, [r7, #36]	; 0x24
 800a26e:	e004      	b.n	800a27a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 fd71 	bl	800ad5a <xQueueCreateCountingSemaphore>
 800a278:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00c      	beq.n	800a29a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <osSemaphoreNew+0x11e>
          name = attr->name;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e001      	b.n	800a292 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a292:	69f9      	ldr	r1, [r7, #28]
 800a294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a296:	f001 fba1 	bl	800b9dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3728      	adds	r7, #40	; 0x28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000afc 	.word	0x20000afc

0800a2a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d103      	bne.n	800a2c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a2c0:	f06f 0303 	mvn.w	r3, #3
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	e04b      	b.n	800a360 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2c8:	f3ef 8305 	mrs	r3, IPSR
 800a2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10f      	bne.n	800a2f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d105      	bne.n	800a2ec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2e0:	f3ef 8311 	mrs	r3, BASEPRI
 800a2e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d026      	beq.n	800a33a <osSemaphoreAcquire+0x92>
 800a2ec:	4b1f      	ldr	r3, [pc, #124]	; (800a36c <osSemaphoreAcquire+0xc4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d122      	bne.n	800a33a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a2fa:	f06f 0303 	mvn.w	r3, #3
 800a2fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a300:	e02d      	b.n	800a35e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a306:	f107 0308 	add.w	r3, r7, #8
 800a30a:	461a      	mov	r2, r3
 800a30c:	2100      	movs	r1, #0
 800a30e:	69b8      	ldr	r0, [r7, #24]
 800a310:	f001 f990 	bl	800b634 <xQueueReceiveFromISR>
 800a314:	4603      	mov	r3, r0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d003      	beq.n	800a322 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a31a:	f06f 0302 	mvn.w	r3, #2
 800a31e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a320:	e01d      	b.n	800a35e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01a      	beq.n	800a35e <osSemaphoreAcquire+0xb6>
 800a328:	4b11      	ldr	r3, [pc, #68]	; (800a370 <osSemaphoreAcquire+0xc8>)
 800a32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a338:	e011      	b.n	800a35e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	69b8      	ldr	r0, [r7, #24]
 800a33e:	f001 f865 	bl	800b40c <xQueueSemaphoreTake>
 800a342:	4603      	mov	r3, r0
 800a344:	2b01      	cmp	r3, #1
 800a346:	d00b      	beq.n	800a360 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a34e:	f06f 0301 	mvn.w	r3, #1
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	e004      	b.n	800a360 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a356:	f06f 0302 	mvn.w	r3, #2
 800a35a:	61fb      	str	r3, [r7, #28]
 800a35c:	e000      	b.n	800a360 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a35e:	bf00      	nop
      }
    }
  }

  return (stat);
 800a360:	69fb      	ldr	r3, [r7, #28]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20000afc 	.word	0x20000afc
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a380:	2300      	movs	r3, #0
 800a382:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a38a:	f06f 0303 	mvn.w	r3, #3
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	e03e      	b.n	800a410 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a392:	f3ef 8305 	mrs	r3, IPSR
 800a396:	617b      	str	r3, [r7, #20]
  return(result);
 800a398:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10f      	bne.n	800a3be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39e:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a2:	613b      	str	r3, [r7, #16]
  return(result);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d01e      	beq.n	800a3f4 <osSemaphoreRelease+0x80>
 800a3b6:	4b19      	ldr	r3, [pc, #100]	; (800a41c <osSemaphoreRelease+0xa8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d11a      	bne.n	800a3f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	69b8      	ldr	r0, [r7, #24]
 800a3ca:	f000 fea3 	bl	800b114 <xQueueGiveFromISR>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d003      	beq.n	800a3dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a3d4:	f06f 0302 	mvn.w	r3, #2
 800a3d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3da:	e018      	b.n	800a40e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d015      	beq.n	800a40e <osSemaphoreRelease+0x9a>
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <osSemaphoreRelease+0xac>)
 800a3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3f2:	e00c      	b.n	800a40e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	69b8      	ldr	r0, [r7, #24]
 800a3fc:	f000 fce4 	bl	800adc8 <xQueueGenericSend>
 800a400:	4603      	mov	r3, r0
 800a402:	2b01      	cmp	r3, #1
 800a404:	d004      	beq.n	800a410 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a406:	f06f 0302 	mvn.w	r3, #2
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e000      	b.n	800a410 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a40e:	bf00      	nop
    }
  }

  return (stat);
 800a410:	69fb      	ldr	r3, [r7, #28]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3720      	adds	r7, #32
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20000afc 	.word	0x20000afc
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b08c      	sub	sp, #48	; 0x30
 800a428:	af02      	add	r7, sp, #8
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a430:	2300      	movs	r3, #0
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a434:	f3ef 8305 	mrs	r3, IPSR
 800a438:	61bb      	str	r3, [r7, #24]
  return(result);
 800a43a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d16f      	bne.n	800a520 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a440:	f3ef 8310 	mrs	r3, PRIMASK
 800a444:	617b      	str	r3, [r7, #20]
  return(result);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d105      	bne.n	800a458 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a44c:	f3ef 8311 	mrs	r3, BASEPRI
 800a450:	613b      	str	r3, [r7, #16]
  return(result);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <osMessageQueueNew+0x3c>
 800a458:	4b34      	ldr	r3, [pc, #208]	; (800a52c <osMessageQueueNew+0x108>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d05f      	beq.n	800a520 <osMessageQueueNew+0xfc>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d05c      	beq.n	800a520 <osMessageQueueNew+0xfc>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d059      	beq.n	800a520 <osMessageQueueNew+0xfc>
    mem = -1;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d029      	beq.n	800a4cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d012      	beq.n	800a4a6 <osMessageQueueNew+0x82>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	2b4f      	cmp	r3, #79	; 0x4f
 800a486:	d90e      	bls.n	800a4a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	695a      	ldr	r2, [r3, #20]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d302      	bcc.n	800a4a6 <osMessageQueueNew+0x82>
        mem = 1;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	623b      	str	r3, [r7, #32]
 800a4a4:	e014      	b.n	800a4d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d110      	bne.n	800a4d0 <osMessageQueueNew+0xac>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10c      	bne.n	800a4d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d108      	bne.n	800a4d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d104      	bne.n	800a4d0 <osMessageQueueNew+0xac>
          mem = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	623b      	str	r3, [r7, #32]
 800a4ca:	e001      	b.n	800a4d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d10b      	bne.n	800a4ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	9100      	str	r1, [sp, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fa5b 	bl	800a9a0 <xQueueGenericCreateStatic>
 800a4ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a4ec:	e008      	b.n	800a500 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fad3 	bl	800aaa4 <xQueueGenericCreate>
 800a4fe:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00c      	beq.n	800a520 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	e001      	b.n	800a518 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a514:	2300      	movs	r3, #0
 800a516:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a51c:	f001 fa5e 	bl	800b9dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a522:	4618      	mov	r0, r3
 800a524:	3728      	adds	r7, #40	; 0x28
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000afc 	.word	0x20000afc

0800a530 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b08a      	sub	sp, #40	; 0x28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	4613      	mov	r3, r2
 800a53e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a544:	2300      	movs	r3, #0
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a548:	f3ef 8305 	mrs	r3, IPSR
 800a54c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a54e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10f      	bne.n	800a574 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a554:	f3ef 8310 	mrs	r3, PRIMASK
 800a558:	61bb      	str	r3, [r7, #24]
  return(result);
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a560:	f3ef 8311 	mrs	r3, BASEPRI
 800a564:	617b      	str	r3, [r7, #20]
  return(result);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d02c      	beq.n	800a5c6 <osMessageQueuePut+0x96>
 800a56c:	4b28      	ldr	r3, [pc, #160]	; (800a610 <osMessageQueuePut+0xe0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d128      	bne.n	800a5c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <osMessageQueuePut+0x56>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <osMessageQueuePut+0x56>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a586:	f06f 0303 	mvn.w	r3, #3
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a58c:	e039      	b.n	800a602 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a592:	f107 0210 	add.w	r2, r7, #16
 800a596:	2300      	movs	r3, #0
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	6a38      	ldr	r0, [r7, #32]
 800a59c:	f000 fd1a 	bl	800afd4 <xQueueGenericSendFromISR>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d003      	beq.n	800a5ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a5a6:	f06f 0302 	mvn.w	r3, #2
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5ac:	e029      	b.n	800a602 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d026      	beq.n	800a602 <osMessageQueuePut+0xd2>
 800a5b4:	4b17      	ldr	r3, [pc, #92]	; (800a614 <osMessageQueuePut+0xe4>)
 800a5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5c4:	e01d      	b.n	800a602 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <osMessageQueuePut+0xa2>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a5d2:	f06f 0303 	mvn.w	r3, #3
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d8:	e014      	b.n	800a604 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5da:	2300      	movs	r3, #0
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	6a38      	ldr	r0, [r7, #32]
 800a5e2:	f000 fbf1 	bl	800adc8 <xQueueGenericSend>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d00b      	beq.n	800a604 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a5f2:	f06f 0301 	mvn.w	r3, #1
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f8:	e004      	b.n	800a604 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a5fa:	f06f 0302 	mvn.w	r3, #2
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a600:	e000      	b.n	800a604 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a602:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a606:	4618      	mov	r0, r3
 800a608:	3728      	adds	r7, #40	; 0x28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	20000afc 	.word	0x20000afc
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a62e:	f3ef 8305 	mrs	r3, IPSR
 800a632:	61fb      	str	r3, [r7, #28]
  return(result);
 800a634:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10f      	bne.n	800a65a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a63a:	f3ef 8310 	mrs	r3, PRIMASK
 800a63e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a646:	f3ef 8311 	mrs	r3, BASEPRI
 800a64a:	617b      	str	r3, [r7, #20]
  return(result);
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d02c      	beq.n	800a6ac <osMessageQueueGet+0x94>
 800a652:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <osMessageQueueGet+0xdc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d128      	bne.n	800a6ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <osMessageQueueGet+0x54>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <osMessageQueueGet+0x54>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a66c:	f06f 0303 	mvn.w	r3, #3
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a672:	e038      	b.n	800a6e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	461a      	mov	r2, r3
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	6a38      	ldr	r0, [r7, #32]
 800a682:	f000 ffd7 	bl	800b634 <xQueueReceiveFromISR>
 800a686:	4603      	mov	r3, r0
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d003      	beq.n	800a694 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a68c:	f06f 0302 	mvn.w	r3, #2
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a692:	e028      	b.n	800a6e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d025      	beq.n	800a6e6 <osMessageQueueGet+0xce>
 800a69a:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <osMessageQueueGet+0xe0>)
 800a69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6aa:	e01c      	b.n	800a6e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <osMessageQueueGet+0xa0>
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d103      	bne.n	800a6c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a6b8:	f06f 0303 	mvn.w	r3, #3
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6be:	e013      	b.n	800a6e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	6a38      	ldr	r0, [r7, #32]
 800a6c6:	f000 fdbb 	bl	800b240 <xQueueReceive>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d00b      	beq.n	800a6e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a6d6:	f06f 0301 	mvn.w	r3, #1
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
 800a6dc:	e004      	b.n	800a6e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a6de:	f06f 0302 	mvn.w	r3, #2
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e4:	e000      	b.n	800a6e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3728      	adds	r7, #40	; 0x28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000afc 	.word	0x20000afc
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4a07      	ldr	r2, [pc, #28]	; (800a728 <vApplicationGetIdleTaskMemory+0x2c>)
 800a70c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4a06      	ldr	r2, [pc, #24]	; (800a72c <vApplicationGetIdleTaskMemory+0x30>)
 800a712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2280      	movs	r2, #128	; 0x80
 800a718:	601a      	str	r2, [r3, #0]
}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	20000b00 	.word	0x20000b00
 800a72c:	20000b5c 	.word	0x20000b5c

0800a730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4a07      	ldr	r2, [pc, #28]	; (800a75c <vApplicationGetTimerTaskMemory+0x2c>)
 800a740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4a06      	ldr	r2, [pc, #24]	; (800a760 <vApplicationGetTimerTaskMemory+0x30>)
 800a746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a74e:	601a      	str	r2, [r3, #0]
}
 800a750:	bf00      	nop
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	20000d5c 	.word	0x20000d5c
 800a760:	20000db8 	.word	0x20000db8

0800a764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f103 0208 	add.w	r2, r3, #8
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f04f 32ff 	mov.w	r2, #4294967295
 800a77c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f103 0208 	add.w	r2, r3, #8
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f103 0208 	add.w	r2, r3, #8
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	1c5a      	adds	r2, r3, #1
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
}
 800a7fa:	bf00      	nop
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d103      	bne.n	800a826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	e00c      	b.n	800a840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3308      	adds	r3, #8
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e002      	b.n	800a834 <vListInsert+0x2e>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d2f6      	bcs.n	800a82e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
}
 800a86c:	bf00      	nop
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6892      	ldr	r2, [r2, #8]
 800a88e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6852      	ldr	r2, [r2, #4]
 800a898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d103      	bne.n	800a8ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	1e5a      	subs	r2, r3, #1
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10c      	bne.n	800a8fa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	b672      	cpsid	i
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	b662      	cpsie	i
 800a8f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8f6:	bf00      	nop
 800a8f8:	e7fe      	b.n	800a8f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a8fa:	f002 fd97 	bl	800d42c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	68f9      	ldr	r1, [r7, #12]
 800a908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	441a      	add	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92a:	3b01      	subs	r3, #1
 800a92c:	68f9      	ldr	r1, [r7, #12]
 800a92e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a930:	fb01 f303 	mul.w	r3, r1, r3
 800a934:	441a      	add	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	22ff      	movs	r2, #255	; 0xff
 800a93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	22ff      	movs	r2, #255	; 0xff
 800a946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d114      	bne.n	800a97a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01a      	beq.n	800a98e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3310      	adds	r3, #16
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 fd3d 	bl	800c3dc <xTaskRemoveFromEventList>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d012      	beq.n	800a98e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <xQueueGenericReset+0xd0>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	e009      	b.n	800a98e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3310      	adds	r3, #16
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fef0 	bl	800a764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3324      	adds	r3, #36	; 0x24
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff feeb 	bl	800a764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a98e:	f002 fd81 	bl	800d494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a992:	2301      	movs	r3, #1
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08e      	sub	sp, #56	; 0x38
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10c      	bne.n	800a9ce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	b672      	cpsid	i
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	b662      	cpsie	i
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10c      	bne.n	800a9ee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	b672      	cpsid	i
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	b662      	cpsie	i
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <xQueueGenericCreateStatic+0x5a>
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <xQueueGenericCreateStatic+0x5e>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <xQueueGenericCreateStatic+0x60>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10c      	bne.n	800aa1e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	b672      	cpsid	i
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	b662      	cpsie	i
 800aa18:	623b      	str	r3, [r7, #32]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <xQueueGenericCreateStatic+0x8a>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <xQueueGenericCreateStatic+0x8e>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <xQueueGenericCreateStatic+0x90>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10c      	bne.n	800aa4e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	b672      	cpsid	i
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	b662      	cpsie	i
 800aa48:	61fb      	str	r3, [r7, #28]
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa4e:	2350      	movs	r3, #80	; 0x50
 800aa50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b50      	cmp	r3, #80	; 0x50
 800aa56:	d00c      	beq.n	800aa72 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	b672      	cpsid	i
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	b662      	cpsie	i
 800aa6c:	61bb      	str	r3, [r7, #24]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f000 f847 	bl	800ab28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3730      	adds	r7, #48	; 0x30
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10c      	bne.n	800aad2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	b672      	cpsid	i
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	b662      	cpsie	i
 800aacc:	613b      	str	r3, [r7, #16]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
 800aadc:	e004      	b.n	800aae8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	fb02 f303 	mul.w	r3, r2, r3
 800aae6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	3350      	adds	r3, #80	; 0x50
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 fdc9 	bl	800d684 <pvPortMalloc>
 800aaf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d011      	beq.n	800ab1e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	3350      	adds	r3, #80	; 0x50
 800ab02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab0c:	79fa      	ldrb	r2, [r7, #7]
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4613      	mov	r3, r2
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f805 	bl	800ab28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	e002      	b.n	800ab4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab56:	2101      	movs	r1, #1
 800ab58:	69b8      	ldr	r0, [r7, #24]
 800ab5a:	f7ff feb7 	bl	800a8cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	78fa      	ldrb	r2, [r7, #3]
 800ab62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab66:	bf00      	nop
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00e      	beq.n	800ab9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2200      	movs	r2, #0
 800ab92:	2100      	movs	r1, #0
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f917 	bl	800adc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	4603      	mov	r3, r0
 800abaa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abac:	2301      	movs	r3, #1
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	2300      	movs	r3, #0
 800abb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800abb4:	79fb      	ldrb	r3, [r7, #7]
 800abb6:	461a      	mov	r2, r3
 800abb8:	6939      	ldr	r1, [r7, #16]
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	f7ff ff72 	bl	800aaa4 <xQueueGenericCreate>
 800abc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff ffd3 	bl	800ab6e <prvInitialiseMutex>

		return xNewQueue;
 800abc8:	68fb      	ldr	r3, [r7, #12]
	}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b088      	sub	sp, #32
 800abd6:	af02      	add	r7, sp, #8
 800abd8:	4603      	mov	r3, r0
 800abda:	6039      	str	r1, [r7, #0]
 800abdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abde:	2301      	movs	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800abe6:	79fb      	ldrb	r3, [r7, #7]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2200      	movs	r2, #0
 800abee:	6939      	ldr	r1, [r7, #16]
 800abf0:	6978      	ldr	r0, [r7, #20]
 800abf2:	f7ff fed5 	bl	800a9a0 <xQueueGenericCreateStatic>
 800abf6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff ffb8 	bl	800ab6e <prvInitialiseMutex>

		return xNewQueue;
 800abfe:	68fb      	ldr	r3, [r7, #12]
	}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10c      	bne.n	800ac34 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	b672      	cpsid	i
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	b662      	cpsie	i
 800ac2e:	60fb      	str	r3, [r7, #12]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	689c      	ldr	r4, [r3, #8]
 800ac38:	f001 fd96 	bl	800c768 <xTaskGetCurrentTaskHandle>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	429c      	cmp	r4, r3
 800ac40:	d111      	bne.n	800ac66 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	1e5a      	subs	r2, r3, #1
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ac54:	2300      	movs	r3, #0
 800ac56:	2200      	movs	r2, #0
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f000 f8b4 	bl	800adc8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ac60:	2301      	movs	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	e001      	b.n	800ac6a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ac6a:	697b      	ldr	r3, [r7, #20]
	}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}

0800ac74 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ac74:	b590      	push	{r4, r7, lr}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	60fb      	str	r3, [r7, #12]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	689c      	ldr	r4, [r3, #8]
 800aca6:	f001 fd5f 	bl	800c768 <xTaskGetCurrentTaskHandle>
 800acaa:	4603      	mov	r3, r0
 800acac:	429c      	cmp	r4, r3
 800acae:	d107      	bne.n	800acc0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800acba:	2301      	movs	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	e00c      	b.n	800acda <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6938      	ldr	r0, [r7, #16]
 800acc4:	f000 fba2 	bl	800b40c <xQueueSemaphoreTake>
 800acc8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d004      	beq.n	800acda <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800acda:	697b      	ldr	r3, [r7, #20]
	}
 800acdc:	4618      	mov	r0, r3
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}

0800ace4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	; 0x28
 800ace8:	af02      	add	r7, sp, #8
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10c      	bne.n	800ad10 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	b672      	cpsid	i
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	b662      	cpsie	i
 800ad0a:	61bb      	str	r3, [r7, #24]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d90c      	bls.n	800ad32 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	b672      	cpsid	i
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	b662      	cpsie	i
 800ad2c:	617b      	str	r3, [r7, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad32:	2302      	movs	r3, #2
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fe2f 	bl	800a9a0 <xQueueGenericCreateStatic>
 800ad42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad50:	69fb      	ldr	r3, [r7, #28]
	}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10c      	bne.n	800ad84 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	b672      	cpsid	i
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	b662      	cpsie	i
 800ad7e:	613b      	str	r3, [r7, #16]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d90c      	bls.n	800ada6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	b672      	cpsid	i
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	b662      	cpsie	i
 800ada0:	60fb      	str	r3, [r7, #12]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ada6:	2202      	movs	r2, #2
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fe7a 	bl	800aaa4 <xQueueGenericCreate>
 800adb0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800adbe:	697b      	ldr	r3, [r7, #20]
	}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08e      	sub	sp, #56	; 0x38
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800add6:	2300      	movs	r3, #0
 800add8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10c      	bne.n	800adfe <xQueueGenericSend+0x36>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	b672      	cpsid	i
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	b662      	cpsie	i
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <xQueueGenericSend+0x44>
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <xQueueGenericSend+0x48>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <xQueueGenericSend+0x4a>
 800ae10:	2300      	movs	r3, #0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10c      	bne.n	800ae30 <xQueueGenericSend+0x68>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	b672      	cpsid	i
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	b662      	cpsie	i
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d103      	bne.n	800ae3e <xQueueGenericSend+0x76>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <xQueueGenericSend+0x7a>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e000      	b.n	800ae44 <xQueueGenericSend+0x7c>
 800ae42:	2300      	movs	r3, #0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10c      	bne.n	800ae62 <xQueueGenericSend+0x9a>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	b672      	cpsid	i
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	b662      	cpsie	i
 800ae5c:	623b      	str	r3, [r7, #32]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae62:	f001 fc91 	bl	800c788 <xTaskGetSchedulerState>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d102      	bne.n	800ae72 <xQueueGenericSend+0xaa>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <xQueueGenericSend+0xae>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <xQueueGenericSend+0xb0>
 800ae76:	2300      	movs	r3, #0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10c      	bne.n	800ae96 <xQueueGenericSend+0xce>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	b672      	cpsid	i
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	b662      	cpsie	i
 800ae90:	61fb      	str	r3, [r7, #28]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae96:	f002 fac9 	bl	800d42c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d302      	bcc.n	800aeac <xQueueGenericSend+0xe4>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d129      	bne.n	800af00 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb2:	f000 fc82 	bl	800b7ba <prvCopyDataToQueue>
 800aeb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	3324      	adds	r3, #36	; 0x24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fa89 	bl	800c3dc <xTaskRemoveFromEventList>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d013      	beq.n	800aef8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aed0:	4b3f      	ldr	r3, [pc, #252]	; (800afd0 <xQueueGenericSend+0x208>)
 800aed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	e00a      	b.n	800aef8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aee8:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <xQueueGenericSend+0x208>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aef8:	f002 facc 	bl	800d494 <vPortExitCritical>
				return pdPASS;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e063      	b.n	800afc8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d103      	bne.n	800af0e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af06:	f002 fac5 	bl	800d494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e05c      	b.n	800afc8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af10:	2b00      	cmp	r3, #0
 800af12:	d106      	bne.n	800af22 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af14:	f107 0314 	add.w	r3, r7, #20
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fac5 	bl	800c4a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af22:	f002 fab7 	bl	800d494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af26:	f001 f82b 	bl	800bf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af2a:	f002 fa7f 	bl	800d42c <vPortEnterCritical>
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af34:	b25b      	sxtb	r3, r3
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d103      	bne.n	800af44 <xQueueGenericSend+0x17c>
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x192>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af5a:	f002 fa9b 	bl	800d494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af5e:	1d3a      	adds	r2, r7, #4
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f001 fab4 	bl	800c4d4 <xTaskCheckForTimeOut>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d124      	bne.n	800afbc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af74:	f000 fd19 	bl	800b9aa <prvIsQueueFull>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d018      	beq.n	800afb0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	3310      	adds	r3, #16
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f001 f9d4 	bl	800c334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af8e:	f000 fca4 	bl	800b8da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af92:	f001 f803 	bl	800bf9c <xTaskResumeAll>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f af7c 	bne.w	800ae96 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <xQueueGenericSend+0x208>)
 800afa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	e772      	b.n	800ae96 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb2:	f000 fc92 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afb6:	f000 fff1 	bl	800bf9c <xTaskResumeAll>
 800afba:	e76c      	b.n	800ae96 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbe:	f000 fc8c 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afc2:	f000 ffeb 	bl	800bf9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3738      	adds	r7, #56	; 0x38
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	b672      	cpsid	i
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	b662      	cpsie	i
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <xQueueGenericSendFromISR+0x40>
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <xQueueGenericSendFromISR+0x44>
 800b014:	2301      	movs	r3, #1
 800b016:	e000      	b.n	800b01a <xQueueGenericSendFromISR+0x46>
 800b018:	2300      	movs	r3, #0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10c      	bne.n	800b038 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	b672      	cpsid	i
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	b662      	cpsie	i
 800b032:	623b      	str	r3, [r7, #32]
}
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d103      	bne.n	800b046 <xQueueGenericSendFromISR+0x72>
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d101      	bne.n	800b04a <xQueueGenericSendFromISR+0x76>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <xQueueGenericSendFromISR+0x78>
 800b04a:	2300      	movs	r3, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10c      	bne.n	800b06a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	b672      	cpsid	i
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	b662      	cpsie	i
 800b064:	61fb      	str	r3, [r7, #28]
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b06a:	f002 fac7 	bl	800d5fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b06e:	f3ef 8211 	mrs	r2, BASEPRI
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	b672      	cpsid	i
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	b662      	cpsie	i
 800b086:	61ba      	str	r2, [r7, #24]
 800b088:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b08a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b096:	429a      	cmp	r2, r3
 800b098:	d302      	bcc.n	800b0a0 <xQueueGenericSendFromISR+0xcc>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d12c      	bne.n	800b0fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0b0:	f000 fb83 	bl	800b7ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0bc:	d112      	bne.n	800b0e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d016      	beq.n	800b0f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	3324      	adds	r3, #36	; 0x24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 f986 	bl	800c3dc <xTaskRemoveFromEventList>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00e      	beq.n	800b0f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e007      	b.n	800b0f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	b25a      	sxtb	r2, r3
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b0f8:	e001      	b.n	800b0fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b108:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3738      	adds	r7, #56	; 0x38
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08e      	sub	sp, #56	; 0x38
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10c      	bne.n	800b142 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	b672      	cpsid	i
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	b662      	cpsie	i
 800b13c:	623b      	str	r3, [r7, #32]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00c      	beq.n	800b164 <xQueueGiveFromISR+0x50>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	b672      	cpsid	i
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	b662      	cpsie	i
 800b15e:	61fb      	str	r3, [r7, #28]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <xQueueGiveFromISR+0x60>
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <xQueueGiveFromISR+0x64>
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <xQueueGiveFromISR+0x66>
 800b178:	2300      	movs	r3, #0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10c      	bne.n	800b198 <xQueueGiveFromISR+0x84>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	b672      	cpsid	i
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	b662      	cpsie	i
 800b192:	61bb      	str	r3, [r7, #24]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b198:	f002 fa30 	bl	800d5fc <vPortValidateInterruptPriority>
	__asm volatile
 800b19c:	f3ef 8211 	mrs	r2, BASEPRI
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	b672      	cpsid	i
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	b662      	cpsie	i
 800b1b4:	617a      	str	r2, [r7, #20]
 800b1b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b1b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d22b      	bcs.n	800b224 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d112      	bne.n	800b20e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d016      	beq.n	800b21e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	3324      	adds	r3, #36	; 0x24
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f001 f8f1 	bl	800c3dc <xTaskRemoveFromEventList>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00e      	beq.n	800b21e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2201      	movs	r2, #1
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	e007      	b.n	800b21e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b20e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b212:	3301      	adds	r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	b25a      	sxtb	r2, r3
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b21e:	2301      	movs	r3, #1
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
 800b222:	e001      	b.n	800b228 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b224:	2300      	movs	r3, #0
 800b226:	637b      	str	r3, [r7, #52]	; 0x34
 800b228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f383 8811 	msr	BASEPRI, r3
}
 800b232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b236:	4618      	mov	r0, r3
 800b238:	3738      	adds	r7, #56	; 0x38
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08c      	sub	sp, #48	; 0x30
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10c      	bne.n	800b274 <xQueueReceive+0x34>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	b672      	cpsid	i
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	b662      	cpsie	i
 800b26e:	623b      	str	r3, [r7, #32]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d103      	bne.n	800b282 <xQueueReceive+0x42>
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <xQueueReceive+0x46>
 800b282:	2301      	movs	r3, #1
 800b284:	e000      	b.n	800b288 <xQueueReceive+0x48>
 800b286:	2300      	movs	r3, #0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10c      	bne.n	800b2a6 <xQueueReceive+0x66>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	b672      	cpsid	i
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	b662      	cpsie	i
 800b2a0:	61fb      	str	r3, [r7, #28]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2a6:	f001 fa6f 	bl	800c788 <xTaskGetSchedulerState>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <xQueueReceive+0x76>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <xQueueReceive+0x7a>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e000      	b.n	800b2bc <xQueueReceive+0x7c>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10c      	bne.n	800b2da <xQueueReceive+0x9a>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	61bb      	str	r3, [r7, #24]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2da:	f002 f8a7 	bl	800d42c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d01f      	beq.n	800b32a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2ea:	68b9      	ldr	r1, [r7, #8]
 800b2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ee:	f000 face 	bl	800b88e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00f      	beq.n	800b322 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b304:	3310      	adds	r3, #16
 800b306:	4618      	mov	r0, r3
 800b308:	f001 f868 	bl	800c3dc <xTaskRemoveFromEventList>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b312:	4b3d      	ldr	r3, [pc, #244]	; (800b408 <xQueueReceive+0x1c8>)
 800b314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b322:	f002 f8b7 	bl	800d494 <vPortExitCritical>
				return pdPASS;
 800b326:	2301      	movs	r3, #1
 800b328:	e069      	b.n	800b3fe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b330:	f002 f8b0 	bl	800d494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b334:	2300      	movs	r3, #0
 800b336:	e062      	b.n	800b3fe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b33e:	f107 0310 	add.w	r3, r7, #16
 800b342:	4618      	mov	r0, r3
 800b344:	f001 f8b0 	bl	800c4a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b348:	2301      	movs	r3, #1
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b34c:	f002 f8a2 	bl	800d494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b350:	f000 fe16 	bl	800bf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b354:	f002 f86a 	bl	800d42c <vPortEnterCritical>
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d103      	bne.n	800b36e <xQueueReceive+0x12e>
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b374:	b25b      	sxtb	r3, r3
 800b376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37a:	d103      	bne.n	800b384 <xQueueReceive+0x144>
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b384:	f002 f886 	bl	800d494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b388:	1d3a      	adds	r2, r7, #4
 800b38a:	f107 0310 	add.w	r3, r7, #16
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f001 f89f 	bl	800c4d4 <xTaskCheckForTimeOut>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d123      	bne.n	800b3e4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b39e:	f000 faee 	bl	800b97e <prvIsQueueEmpty>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d017      	beq.n	800b3d8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	3324      	adds	r3, #36	; 0x24
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 ffbf 	bl	800c334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3b8:	f000 fa8f 	bl	800b8da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3bc:	f000 fdee 	bl	800bf9c <xTaskResumeAll>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d189      	bne.n	800b2da <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <xQueueReceive+0x1c8>)
 800b3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	e780      	b.n	800b2da <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3da:	f000 fa7e 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3de:	f000 fddd 	bl	800bf9c <xTaskResumeAll>
 800b3e2:	e77a      	b.n	800b2da <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3e6:	f000 fa78 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3ea:	f000 fdd7 	bl	800bf9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f0:	f000 fac5 	bl	800b97e <prvIsQueueEmpty>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f43f af6f 	beq.w	800b2da <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3730      	adds	r7, #48	; 0x30
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08e      	sub	sp, #56	; 0x38
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b41e:	2300      	movs	r3, #0
 800b420:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10c      	bne.n	800b442 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	b672      	cpsid	i
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	b662      	cpsie	i
 800b43c:	623b      	str	r3, [r7, #32]
}
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00c      	beq.n	800b464 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	b672      	cpsid	i
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	b662      	cpsie	i
 800b45e:	61fb      	str	r3, [r7, #28]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b464:	f001 f990 	bl	800c788 <xTaskGetSchedulerState>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <xQueueSemaphoreTake+0x68>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <xQueueSemaphoreTake+0x6c>
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <xQueueSemaphoreTake+0x6e>
 800b478:	2300      	movs	r3, #0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10c      	bne.n	800b498 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	b672      	cpsid	i
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	b662      	cpsie	i
 800b492:	61bb      	str	r3, [r7, #24]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b498:	f001 ffc8 	bl	800d42c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d024      	beq.n	800b4f2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d104      	bne.n	800b4c2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b4b8:	f001 fae4 	bl	800ca84 <pvTaskIncrementMutexHeldCount>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00f      	beq.n	800b4ea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	3310      	adds	r3, #16
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 ff84 	bl	800c3dc <xTaskRemoveFromEventList>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4da:	4b55      	ldr	r3, [pc, #340]	; (800b630 <xQueueSemaphoreTake+0x224>)
 800b4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4ea:	f001 ffd3 	bl	800d494 <vPortExitCritical>
				return pdPASS;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e099      	b.n	800b626 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d113      	bne.n	800b520 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00c      	beq.n	800b518 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	b672      	cpsid	i
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	b662      	cpsie	i
 800b512:	617b      	str	r3, [r7, #20]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b518:	f001 ffbc 	bl	800d494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e082      	b.n	800b626 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b526:	f107 030c 	add.w	r3, r7, #12
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 ffbc 	bl	800c4a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b530:	2301      	movs	r3, #1
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b534:	f001 ffae 	bl	800d494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b538:	f000 fd22 	bl	800bf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b53c:	f001 ff76 	bl	800d42c <vPortEnterCritical>
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b546:	b25b      	sxtb	r3, r3
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d103      	bne.n	800b556 <xQueueSemaphoreTake+0x14a>
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b55c:	b25b      	sxtb	r3, r3
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d103      	bne.n	800b56c <xQueueSemaphoreTake+0x160>
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	2200      	movs	r2, #0
 800b568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b56c:	f001 ff92 	bl	800d494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b570:	463a      	mov	r2, r7
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 ffab 	bl	800c4d4 <xTaskCheckForTimeOut>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d132      	bne.n	800b5ea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b586:	f000 f9fa 	bl	800b97e <prvIsQueueEmpty>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d026      	beq.n	800b5de <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d109      	bne.n	800b5ac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b598:	f001 ff48 	bl	800d42c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f001 f90f 	bl	800c7c4 <xTaskPriorityInherit>
 800b5a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5a8:	f001 ff74 	bl	800d494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	3324      	adds	r3, #36	; 0x24
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 febd 	bl	800c334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5bc:	f000 f98d 	bl	800b8da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5c0:	f000 fcec 	bl	800bf9c <xTaskResumeAll>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f47f af66 	bne.w	800b498 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b5cc:	4b18      	ldr	r3, [pc, #96]	; (800b630 <xQueueSemaphoreTake+0x224>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	e75c      	b.n	800b498 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5e0:	f000 f97b 	bl	800b8da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5e4:	f000 fcda 	bl	800bf9c <xTaskResumeAll>
 800b5e8:	e756      	b.n	800b498 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ec:	f000 f975 	bl	800b8da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5f0:	f000 fcd4 	bl	800bf9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f6:	f000 f9c2 	bl	800b97e <prvIsQueueEmpty>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f43f af4b 	beq.w	800b498 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b608:	f001 ff10 	bl	800d42c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b60c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b60e:	f000 f8bc 	bl	800b78a <prvGetDisinheritPriorityAfterTimeout>
 800b612:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 f9ac 	bl	800c978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b620:	f001 ff38 	bl	800d494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b624:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b626:	4618      	mov	r0, r3
 800b628:	3738      	adds	r7, #56	; 0x38
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08e      	sub	sp, #56	; 0x38
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	b672      	cpsid	i
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	b662      	cpsie	i
 800b65e:	623b      	str	r3, [r7, #32]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <xQueueReceiveFromISR+0x3e>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <xQueueReceiveFromISR+0x42>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueReceiveFromISR+0x44>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10c      	bne.n	800b696 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	b672      	cpsid	i
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	b662      	cpsie	i
 800b690:	61fb      	str	r3, [r7, #28]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b696:	f001 ffb1 	bl	800d5fc <vPortValidateInterruptPriority>
	__asm volatile
 800b69a:	f3ef 8211 	mrs	r2, BASEPRI
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	b672      	cpsid	i
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	b662      	cpsie	i
 800b6b2:	61ba      	str	r2, [r7, #24]
 800b6b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b6b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d02f      	beq.n	800b726 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d4:	f000 f8db 	bl	800b88e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	1e5a      	subs	r2, r3, #1
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e8:	d112      	bne.n	800b710 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d016      	beq.n	800b720 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fe70 	bl	800c3dc <xTaskRemoveFromEventList>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00e      	beq.n	800b720 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00b      	beq.n	800b720 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e007      	b.n	800b720 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b714:	3301      	adds	r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	b25a      	sxtb	r2, r3
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b720:	2301      	movs	r3, #1
 800b722:	637b      	str	r3, [r7, #52]	; 0x34
 800b724:	e001      	b.n	800b72a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b726:	2300      	movs	r3, #0
 800b728:	637b      	str	r3, [r7, #52]	; 0x34
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f383 8811 	msr	BASEPRI, r3
}
 800b734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3738      	adds	r7, #56	; 0x38
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10c      	bne.n	800b76c <vQueueDelete+0x2c>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	b672      	cpsid	i
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	b662      	cpsie	i
 800b766:	60bb      	str	r3, [r7, #8]
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f95f 	bl	800ba30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f002 f84b 	bl	800d818 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b78a:	b480      	push	{r7}
 800b78c:	b085      	sub	sp, #20
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e001      	b.n	800b7ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10d      	bne.n	800b7f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d14d      	bne.n	800b87c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f855 	bl	800c894 <xTaskPriorityDisinherit>
 800b7ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	609a      	str	r2, [r3, #8]
 800b7f2:	e043      	b.n	800b87c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d119      	bne.n	800b82e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6858      	ldr	r0, [r3, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b802:	461a      	mov	r2, r3
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	f01e f879 	bl	80298fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	441a      	add	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	d32b      	bcc.n	800b87c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	605a      	str	r2, [r3, #4]
 800b82c:	e026      	b.n	800b87c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68d8      	ldr	r0, [r3, #12]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	461a      	mov	r2, r3
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	f01e f85f 	bl	80298fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	425b      	negs	r3, r3
 800b848:	441a      	add	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d207      	bcs.n	800b86a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	425b      	negs	r3, r3
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d105      	bne.n	800b87c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	3b01      	subs	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b884:	697b      	ldr	r3, [r7, #20]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d018      	beq.n	800b8d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	441a      	add	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d303      	bcc.n	800b8c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68d9      	ldr	r1, [r3, #12]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6838      	ldr	r0, [r7, #0]
 800b8ce:	f01e f815 	bl	80298fc <memcpy>
	}
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8e2:	f001 fda3 	bl	800d42c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8ee:	e011      	b.n	800b914 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d012      	beq.n	800b91e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3324      	adds	r3, #36	; 0x24
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fd6d 	bl	800c3dc <xTaskRemoveFromEventList>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b908:	f000 fe4a 	bl	800c5a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	3b01      	subs	r3, #1
 800b910:	b2db      	uxtb	r3, r3
 800b912:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dce9      	bgt.n	800b8f0 <prvUnlockQueue+0x16>
 800b91c:	e000      	b.n	800b920 <prvUnlockQueue+0x46>
					break;
 800b91e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	22ff      	movs	r2, #255	; 0xff
 800b924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b928:	f001 fdb4 	bl	800d494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b92c:	f001 fd7e 	bl	800d42c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b936:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b938:	e011      	b.n	800b95e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d012      	beq.n	800b968 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3310      	adds	r3, #16
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fd48 	bl	800c3dc <xTaskRemoveFromEventList>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b952:	f000 fe25 	bl	800c5a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	3b01      	subs	r3, #1
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b95e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dce9      	bgt.n	800b93a <prvUnlockQueue+0x60>
 800b966:	e000      	b.n	800b96a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b968:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	22ff      	movs	r2, #255	; 0xff
 800b96e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b972:	f001 fd8f 	bl	800d494 <vPortExitCritical>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b986:	f001 fd51 	bl	800d42c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b992:	2301      	movs	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e001      	b.n	800b99c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b99c:	f001 fd7a 	bl	800d494 <vPortExitCritical>

	return xReturn;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9b2:	f001 fd3b 	bl	800d42c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d102      	bne.n	800b9c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	e001      	b.n	800b9cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9cc:	f001 fd62 	bl	800d494 <vPortExitCritical>

	return xReturn;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e014      	b.n	800ba16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9ec:	4a0f      	ldr	r2, [pc, #60]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10b      	bne.n	800ba10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b9f8:	490c      	ldr	r1, [pc, #48]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba02:	4a0a      	ldr	r2, [pc, #40]	; (800ba2c <vQueueAddToRegistry+0x50>)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	4413      	add	r3, r2
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba0e:	e006      	b.n	800ba1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b07      	cmp	r3, #7
 800ba1a:	d9e7      	bls.n	800b9ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	200011b8 	.word	0x200011b8

0800ba30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e016      	b.n	800ba6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba3e:	4a10      	ldr	r2, [pc, #64]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	4413      	add	r3, r2
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d10b      	bne.n	800ba66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2100      	movs	r1, #0
 800ba54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ba58:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <vQueueUnregisterQueue+0x50>)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4413      	add	r3, r2
 800ba60:	2200      	movs	r2, #0
 800ba62:	605a      	str	r2, [r3, #4]
				break;
 800ba64:	e006      	b.n	800ba74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	d9e5      	bls.n	800ba3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	200011b8 	.word	0x200011b8

0800ba84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba94:	f001 fcca 	bl	800d42c <vPortEnterCritical>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba9e:	b25b      	sxtb	r3, r3
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d103      	bne.n	800baae <vQueueWaitForMessageRestricted+0x2a>
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d103      	bne.n	800bac4 <vQueueWaitForMessageRestricted+0x40>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac4:	f001 fce6 	bl	800d494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d106      	bne.n	800bade <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3324      	adds	r3, #36	; 0x24
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 fc51 	bl	800c380 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bade:	6978      	ldr	r0, [r7, #20]
 800bae0:	f7ff fefb 	bl	800b8da <prvUnlockQueue>
	}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08e      	sub	sp, #56	; 0x38
 800baf0:	af04      	add	r7, sp, #16
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10c      	bne.n	800bb1a <xTaskCreateStatic+0x2e>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	b672      	cpsid	i
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	b662      	cpsie	i
 800bb14:	623b      	str	r3, [r7, #32]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10c      	bne.n	800bb3a <xTaskCreateStatic+0x4e>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	b672      	cpsid	i
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	b662      	cpsie	i
 800bb34:	61fb      	str	r3, [r7, #28]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb3a:	235c      	movs	r3, #92	; 0x5c
 800bb3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2b5c      	cmp	r3, #92	; 0x5c
 800bb42:	d00c      	beq.n	800bb5e <xTaskCreateStatic+0x72>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	b672      	cpsid	i
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	b662      	cpsie	i
 800bb58:	61bb      	str	r3, [r7, #24]
}
 800bb5a:	bf00      	nop
 800bb5c:	e7fe      	b.n	800bb5c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d01e      	beq.n	800bba4 <xTaskCreateStatic+0xb8>
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01b      	beq.n	800bba4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	2202      	movs	r2, #2
 800bb7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9303      	str	r3, [sp, #12]
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	9302      	str	r3, [sp, #8]
 800bb86:	f107 0314 	add.w	r3, r7, #20
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	68b9      	ldr	r1, [r7, #8]
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f000 f850 	bl	800bc3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb9e:	f000 f8df 	bl	800bd60 <prvAddNewTaskToReadyList>
 800bba2:	e001      	b.n	800bba8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bba8:	697b      	ldr	r3, [r7, #20]
	}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3728      	adds	r7, #40	; 0x28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b08c      	sub	sp, #48	; 0x30
 800bbb6:	af04      	add	r7, sp, #16
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	603b      	str	r3, [r7, #0]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 fd5c 	bl	800d684 <pvPortMalloc>
 800bbcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00e      	beq.n	800bbf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbd4:	205c      	movs	r0, #92	; 0x5c
 800bbd6:	f001 fd55 	bl	800d684 <pvPortMalloc>
 800bbda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	631a      	str	r2, [r3, #48]	; 0x30
 800bbe8:	e005      	b.n	800bbf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbea:	6978      	ldr	r0, [r7, #20]
 800bbec:	f001 fe14 	bl	800d818 <vPortFree>
 800bbf0:	e001      	b.n	800bbf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d017      	beq.n	800bc2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc04:	88fa      	ldrh	r2, [r7, #6]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	9302      	str	r3, [sp, #8]
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	9301      	str	r3, [sp, #4]
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f80e 	bl	800bc3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc20:	69f8      	ldr	r0, [r7, #28]
 800bc22:	f000 f89d 	bl	800bd60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc26:	2301      	movs	r3, #1
 800bc28:	61bb      	str	r3, [r7, #24]
 800bc2a:	e002      	b.n	800bc32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc32:	69bb      	ldr	r3, [r7, #24]
	}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	461a      	mov	r2, r3
 800bc54:	21a5      	movs	r1, #165	; 0xa5
 800bc56:	f01d fe5f 	bl	8029918 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc64:	440b      	add	r3, r1
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f023 0307 	bic.w	r3, r3, #7
 800bc72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00c      	beq.n	800bc98 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	b672      	cpsid	i
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	b662      	cpsie	i
 800bc92:	617b      	str	r3, [r7, #20]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01f      	beq.n	800bcde <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc9e:	2300      	movs	r3, #0
 800bca0:	61fb      	str	r3, [r7, #28]
 800bca2:	e012      	b.n	800bcca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	4413      	add	r3, r2
 800bcaa:	7819      	ldrb	r1, [r3, #0]
 800bcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	3334      	adds	r3, #52	; 0x34
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d006      	beq.n	800bcd2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	2b0f      	cmp	r3, #15
 800bcce:	d9e9      	bls.n	800bca4 <prvInitialiseNewTask+0x68>
 800bcd0:	e000      	b.n	800bcd4 <prvInitialiseNewTask+0x98>
			{
				break;
 800bcd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcdc:	e003      	b.n	800bce6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	2b37      	cmp	r3, #55	; 0x37
 800bcea:	d901      	bls.n	800bcf0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bcec:	2337      	movs	r3, #55	; 0x37
 800bcee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	2200      	movs	r2, #0
 800bd00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	3304      	adds	r3, #4
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fd4c 	bl	800a7a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	3318      	adds	r3, #24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fd47 	bl	800a7a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	2200      	movs	r2, #0
 800bd30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	68f9      	ldr	r1, [r7, #12]
 800bd3e:	69b8      	ldr	r0, [r7, #24]
 800bd40:	f001 fa64 	bl	800d20c <pxPortInitialiseStack>
 800bd44:	4602      	mov	r2, r0
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd56:	bf00      	nop
 800bd58:	3720      	adds	r7, #32
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd68:	f001 fb60 	bl	800d42c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd6c:	4b2d      	ldr	r3, [pc, #180]	; (800be24 <prvAddNewTaskToReadyList+0xc4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	4a2c      	ldr	r2, [pc, #176]	; (800be24 <prvAddNewTaskToReadyList+0xc4>)
 800bd74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd76:	4b2c      	ldr	r3, [pc, #176]	; (800be28 <prvAddNewTaskToReadyList+0xc8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd7e:	4a2a      	ldr	r2, [pc, #168]	; (800be28 <prvAddNewTaskToReadyList+0xc8>)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd84:	4b27      	ldr	r3, [pc, #156]	; (800be24 <prvAddNewTaskToReadyList+0xc4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d110      	bne.n	800bdae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd8c:	f000 fc2c 	bl	800c5e8 <prvInitialiseTaskLists>
 800bd90:	e00d      	b.n	800bdae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd92:	4b26      	ldr	r3, [pc, #152]	; (800be2c <prvAddNewTaskToReadyList+0xcc>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd9a:	4b23      	ldr	r3, [pc, #140]	; (800be28 <prvAddNewTaskToReadyList+0xc8>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d802      	bhi.n	800bdae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bda8:	4a1f      	ldr	r2, [pc, #124]	; (800be28 <prvAddNewTaskToReadyList+0xc8>)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdae:	4b20      	ldr	r3, [pc, #128]	; (800be30 <prvAddNewTaskToReadyList+0xd0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a1e      	ldr	r2, [pc, #120]	; (800be30 <prvAddNewTaskToReadyList+0xd0>)
 800bdb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bdb8:	4b1d      	ldr	r3, [pc, #116]	; (800be30 <prvAddNewTaskToReadyList+0xd0>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc4:	4b1b      	ldr	r3, [pc, #108]	; (800be34 <prvAddNewTaskToReadyList+0xd4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d903      	bls.n	800bdd4 <prvAddNewTaskToReadyList+0x74>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	4a18      	ldr	r2, [pc, #96]	; (800be34 <prvAddNewTaskToReadyList+0xd4>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a15      	ldr	r2, [pc, #84]	; (800be38 <prvAddNewTaskToReadyList+0xd8>)
 800bde2:	441a      	add	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe fce7 	bl	800a7be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bdf0:	f001 fb50 	bl	800d494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <prvAddNewTaskToReadyList+0xcc>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00e      	beq.n	800be1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <prvAddNewTaskToReadyList+0xc8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	429a      	cmp	r2, r3
 800be08:	d207      	bcs.n	800be1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <prvAddNewTaskToReadyList+0xdc>)
 800be0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	200016cc 	.word	0x200016cc
 800be28:	200011f8 	.word	0x200011f8
 800be2c:	200016d8 	.word	0x200016d8
 800be30:	200016e8 	.word	0x200016e8
 800be34:	200016d4 	.word	0x200016d4
 800be38:	200011fc 	.word	0x200011fc
 800be3c:	e000ed04 	.word	0xe000ed04

0800be40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be48:	2300      	movs	r3, #0
 800be4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d019      	beq.n	800be86 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be52:	4b14      	ldr	r3, [pc, #80]	; (800bea4 <vTaskDelay+0x64>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00c      	beq.n	800be74 <vTaskDelay+0x34>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	b672      	cpsid	i
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	b662      	cpsie	i
 800be6e:	60bb      	str	r3, [r7, #8]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800be74:	f000 f884 	bl	800bf80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be78:	2100      	movs	r1, #0
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fe16 	bl	800caac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be80:	f000 f88c 	bl	800bf9c <xTaskResumeAll>
 800be84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d107      	bne.n	800be9c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <vTaskDelay+0x68>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be9c:	bf00      	nop
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	200016f4 	.word	0x200016f4
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800beba:	463a      	mov	r2, r7
 800bebc:	1d39      	adds	r1, r7, #4
 800bebe:	f107 0308 	add.w	r3, r7, #8
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe fc1a 	bl	800a6fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	9202      	str	r2, [sp, #8]
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	2300      	movs	r3, #0
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	460a      	mov	r2, r1
 800beda:	4923      	ldr	r1, [pc, #140]	; (800bf68 <vTaskStartScheduler+0xbc>)
 800bedc:	4823      	ldr	r0, [pc, #140]	; (800bf6c <vTaskStartScheduler+0xc0>)
 800bede:	f7ff fe05 	bl	800baec <xTaskCreateStatic>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4a22      	ldr	r2, [pc, #136]	; (800bf70 <vTaskStartScheduler+0xc4>)
 800bee6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bee8:	4b21      	ldr	r3, [pc, #132]	; (800bf70 <vTaskStartScheduler+0xc4>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bef0:	2301      	movs	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	e001      	b.n	800befa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d102      	bne.n	800bf06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf00:	f000 fe28 	bl	800cb54 <xTimerCreateTimerTask>
 800bf04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d118      	bne.n	800bf3e <vTaskStartScheduler+0x92>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	b672      	cpsid	i
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	b662      	cpsie	i
 800bf20:	613b      	str	r3, [r7, #16]
}
 800bf22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf24:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <vTaskStartScheduler+0xc8>)
 800bf26:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf2c:	4b12      	ldr	r3, [pc, #72]	; (800bf78 <vTaskStartScheduler+0xcc>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <vTaskStartScheduler+0xd0>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf38:	f001 f9fa 	bl	800d330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf3c:	e010      	b.n	800bf60 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf44:	d10c      	bne.n	800bf60 <vTaskStartScheduler+0xb4>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	b672      	cpsid	i
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	b662      	cpsie	i
 800bf5a:	60fb      	str	r3, [r7, #12]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <vTaskStartScheduler+0xb2>
}
 800bf60:	bf00      	nop
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	0802cb08 	.word	0x0802cb08
 800bf6c:	0800c5b9 	.word	0x0800c5b9
 800bf70:	200016f0 	.word	0x200016f0
 800bf74:	200016ec 	.word	0x200016ec
 800bf78:	200016d8 	.word	0x200016d8
 800bf7c:	200016d0 	.word	0x200016d0

0800bf80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <vTaskSuspendAll+0x18>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	4a03      	ldr	r2, [pc, #12]	; (800bf98 <vTaskSuspendAll+0x18>)
 800bf8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf8e:	bf00      	nop
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	200016f4 	.word	0x200016f4

0800bf9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfaa:	4b43      	ldr	r3, [pc, #268]	; (800c0b8 <xTaskResumeAll+0x11c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10c      	bne.n	800bfcc <xTaskResumeAll+0x30>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	b672      	cpsid	i
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	b662      	cpsie	i
 800bfc6:	603b      	str	r3, [r7, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	e7fe      	b.n	800bfca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfcc:	f001 fa2e 	bl	800d42c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfd0:	4b39      	ldr	r3, [pc, #228]	; (800c0b8 <xTaskResumeAll+0x11c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	4a38      	ldr	r2, [pc, #224]	; (800c0b8 <xTaskResumeAll+0x11c>)
 800bfd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfda:	4b37      	ldr	r3, [pc, #220]	; (800c0b8 <xTaskResumeAll+0x11c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d162      	bne.n	800c0a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfe2:	4b36      	ldr	r3, [pc, #216]	; (800c0bc <xTaskResumeAll+0x120>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d05e      	beq.n	800c0a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfea:	e02f      	b.n	800c04c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfec:	4b34      	ldr	r3, [pc, #208]	; (800c0c0 <xTaskResumeAll+0x124>)
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3318      	adds	r3, #24
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fc3d 	bl	800a878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fc38 	bl	800a878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00c:	4b2d      	ldr	r3, [pc, #180]	; (800c0c4 <xTaskResumeAll+0x128>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d903      	bls.n	800c01c <xTaskResumeAll+0x80>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	4a2a      	ldr	r2, [pc, #168]	; (800c0c4 <xTaskResumeAll+0x128>)
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4a27      	ldr	r2, [pc, #156]	; (800c0c8 <xTaskResumeAll+0x12c>)
 800c02a:	441a      	add	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3304      	adds	r3, #4
 800c030:	4619      	mov	r1, r3
 800c032:	4610      	mov	r0, r2
 800c034:	f7fe fbc3 	bl	800a7be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03c:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <xTaskResumeAll+0x130>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c042:	429a      	cmp	r2, r3
 800c044:	d302      	bcc.n	800c04c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c046:	4b22      	ldr	r3, [pc, #136]	; (800c0d0 <xTaskResumeAll+0x134>)
 800c048:	2201      	movs	r2, #1
 800c04a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c04c:	4b1c      	ldr	r3, [pc, #112]	; (800c0c0 <xTaskResumeAll+0x124>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1cb      	bne.n	800bfec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c05a:	f000 fb65 	bl	800c728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c05e:	4b1d      	ldr	r3, [pc, #116]	; (800c0d4 <xTaskResumeAll+0x138>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d010      	beq.n	800c08c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c06a:	f000 f847 	bl	800c0fc <xTaskIncrementTick>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c074:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <xTaskResumeAll+0x134>)
 800c076:	2201      	movs	r2, #1
 800c078:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1f1      	bne.n	800c06a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c086:	4b13      	ldr	r3, [pc, #76]	; (800c0d4 <xTaskResumeAll+0x138>)
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c08c:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <xTaskResumeAll+0x134>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d009      	beq.n	800c0a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c098:	4b0f      	ldr	r3, [pc, #60]	; (800c0d8 <xTaskResumeAll+0x13c>)
 800c09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0a8:	f001 f9f4 	bl	800d494 <vPortExitCritical>

	return xAlreadyYielded;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200016f4 	.word	0x200016f4
 800c0bc:	200016cc 	.word	0x200016cc
 800c0c0:	2000168c 	.word	0x2000168c
 800c0c4:	200016d4 	.word	0x200016d4
 800c0c8:	200011fc 	.word	0x200011fc
 800c0cc:	200011f8 	.word	0x200011f8
 800c0d0:	200016e0 	.word	0x200016e0
 800c0d4:	200016dc 	.word	0x200016dc
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0e2:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <xTaskGetTickCount+0x1c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0e8:	687b      	ldr	r3, [r7, #4]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	200016d0 	.word	0x200016d0

0800c0fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c102:	2300      	movs	r3, #0
 800c104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c106:	4b50      	ldr	r3, [pc, #320]	; (800c248 <xTaskIncrementTick+0x14c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f040 808b 	bne.w	800c226 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c110:	4b4e      	ldr	r3, [pc, #312]	; (800c24c <xTaskIncrementTick+0x150>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	3301      	adds	r3, #1
 800c116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c118:	4a4c      	ldr	r2, [pc, #304]	; (800c24c <xTaskIncrementTick+0x150>)
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d122      	bne.n	800c16a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c124:	4b4a      	ldr	r3, [pc, #296]	; (800c250 <xTaskIncrementTick+0x154>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c132:	b672      	cpsid	i
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	b662      	cpsie	i
 800c142:	603b      	str	r3, [r7, #0]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xTaskIncrementTick+0x4a>
 800c148:	4b41      	ldr	r3, [pc, #260]	; (800c250 <xTaskIncrementTick+0x154>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	4b41      	ldr	r3, [pc, #260]	; (800c254 <xTaskIncrementTick+0x158>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a3f      	ldr	r2, [pc, #252]	; (800c250 <xTaskIncrementTick+0x154>)
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	4a3f      	ldr	r2, [pc, #252]	; (800c254 <xTaskIncrementTick+0x158>)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	4b3e      	ldr	r3, [pc, #248]	; (800c258 <xTaskIncrementTick+0x15c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	4a3d      	ldr	r2, [pc, #244]	; (800c258 <xTaskIncrementTick+0x15c>)
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	f000 fadf 	bl	800c728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c16a:	4b3c      	ldr	r3, [pc, #240]	; (800c25c <xTaskIncrementTick+0x160>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	429a      	cmp	r2, r3
 800c172:	d349      	bcc.n	800c208 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c174:	4b36      	ldr	r3, [pc, #216]	; (800c250 <xTaskIncrementTick+0x154>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d104      	bne.n	800c188 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17e:	4b37      	ldr	r3, [pc, #220]	; (800c25c <xTaskIncrementTick+0x160>)
 800c180:	f04f 32ff 	mov.w	r2, #4294967295
 800c184:	601a      	str	r2, [r3, #0]
					break;
 800c186:	e03f      	b.n	800c208 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c188:	4b31      	ldr	r3, [pc, #196]	; (800c250 <xTaskIncrementTick+0x154>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d203      	bcs.n	800c1a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1a0:	4a2e      	ldr	r2, [pc, #184]	; (800c25c <xTaskIncrementTick+0x160>)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1a6:	e02f      	b.n	800c208 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fb63 	bl	800a878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d004      	beq.n	800c1c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	3318      	adds	r3, #24
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fb5a 	bl	800a878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c8:	4b25      	ldr	r3, [pc, #148]	; (800c260 <xTaskIncrementTick+0x164>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d903      	bls.n	800c1d8 <xTaskIncrementTick+0xdc>
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	4a22      	ldr	r2, [pc, #136]	; (800c260 <xTaskIncrementTick+0x164>)
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	; (800c264 <xTaskIncrementTick+0x168>)
 800c1e6:	441a      	add	r2, r3
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	f7fe fae5 	bl	800a7be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <xTaskIncrementTick+0x16c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d3b8      	bcc.n	800c174 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c202:	2301      	movs	r3, #1
 800c204:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c206:	e7b5      	b.n	800c174 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c208:	4b17      	ldr	r3, [pc, #92]	; (800c268 <xTaskIncrementTick+0x16c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20e:	4915      	ldr	r1, [pc, #84]	; (800c264 <xTaskIncrementTick+0x168>)
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	440b      	add	r3, r1
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d907      	bls.n	800c230 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
 800c224:	e004      	b.n	800c230 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c226:	4b11      	ldr	r3, [pc, #68]	; (800c26c <xTaskIncrementTick+0x170>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3301      	adds	r3, #1
 800c22c:	4a0f      	ldr	r2, [pc, #60]	; (800c26c <xTaskIncrementTick+0x170>)
 800c22e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c230:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <xTaskIncrementTick+0x174>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c238:	2301      	movs	r3, #1
 800c23a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c23c:	697b      	ldr	r3, [r7, #20]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200016f4 	.word	0x200016f4
 800c24c:	200016d0 	.word	0x200016d0
 800c250:	20001684 	.word	0x20001684
 800c254:	20001688 	.word	0x20001688
 800c258:	200016e4 	.word	0x200016e4
 800c25c:	200016ec 	.word	0x200016ec
 800c260:	200016d4 	.word	0x200016d4
 800c264:	200011fc 	.word	0x200011fc
 800c268:	200011f8 	.word	0x200011f8
 800c26c:	200016dc 	.word	0x200016dc
 800c270:	200016e0 	.word	0x200016e0

0800c274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c27a:	4b29      	ldr	r3, [pc, #164]	; (800c320 <vTaskSwitchContext+0xac>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c282:	4b28      	ldr	r3, [pc, #160]	; (800c324 <vTaskSwitchContext+0xb0>)
 800c284:	2201      	movs	r2, #1
 800c286:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c288:	e043      	b.n	800c312 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c28a:	4b26      	ldr	r3, [pc, #152]	; (800c324 <vTaskSwitchContext+0xb0>)
 800c28c:	2200      	movs	r2, #0
 800c28e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c290:	4b25      	ldr	r3, [pc, #148]	; (800c328 <vTaskSwitchContext+0xb4>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	e012      	b.n	800c2be <vTaskSwitchContext+0x4a>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10c      	bne.n	800c2b8 <vTaskSwitchContext+0x44>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	b672      	cpsid	i
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	b662      	cpsie	i
 800c2b2:	607b      	str	r3, [r7, #4]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <vTaskSwitchContext+0x42>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	60fb      	str	r3, [r7, #12]
 800c2be:	491b      	ldr	r1, [pc, #108]	; (800c32c <vTaskSwitchContext+0xb8>)
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	440b      	add	r3, r1
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0e2      	beq.n	800c298 <vTaskSwitchContext+0x24>
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4a13      	ldr	r2, [pc, #76]	; (800c32c <vTaskSwitchContext+0xb8>)
 800c2de:	4413      	add	r3, r2
 800c2e0:	60bb      	str	r3, [r7, #8]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	605a      	str	r2, [r3, #4]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d104      	bne.n	800c302 <vTaskSwitchContext+0x8e>
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	605a      	str	r2, [r3, #4]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	4a09      	ldr	r2, [pc, #36]	; (800c330 <vTaskSwitchContext+0xbc>)
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	4a06      	ldr	r2, [pc, #24]	; (800c328 <vTaskSwitchContext+0xb4>)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6013      	str	r3, [r2, #0]
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	200016f4 	.word	0x200016f4
 800c324:	200016e0 	.word	0x200016e0
 800c328:	200016d4 	.word	0x200016d4
 800c32c:	200011fc 	.word	0x200011fc
 800c330:	200011f8 	.word	0x200011f8

0800c334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10c      	bne.n	800c35e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	b672      	cpsid	i
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	b662      	cpsie	i
 800c358:	60fb      	str	r3, [r7, #12]
}
 800c35a:	bf00      	nop
 800c35c:	e7fe      	b.n	800c35c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c35e:	4b07      	ldr	r3, [pc, #28]	; (800c37c <vTaskPlaceOnEventList+0x48>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3318      	adds	r3, #24
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7fe fa4d 	bl	800a806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c36c:	2101      	movs	r1, #1
 800c36e:	6838      	ldr	r0, [r7, #0]
 800c370:	f000 fb9c 	bl	800caac <prvAddCurrentTaskToDelayedList>
}
 800c374:	bf00      	nop
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	200011f8 	.word	0x200011f8

0800c380 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10c      	bne.n	800c3ac <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	b672      	cpsid	i
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	b662      	cpsie	i
 800c3a6:	617b      	str	r3, [r7, #20]
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <vTaskPlaceOnEventListRestricted+0x58>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3318      	adds	r3, #24
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7fe fa02 	bl	800a7be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68b8      	ldr	r0, [r7, #8]
 800c3ca:	f000 fb6f 	bl	800caac <prvAddCurrentTaskToDelayedList>
	}
 800c3ce:	bf00      	nop
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200011f8 	.word	0x200011f8

0800c3dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10c      	bne.n	800c40c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f6:	b672      	cpsid	i
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	b662      	cpsie	i
 800c406:	60fb      	str	r3, [r7, #12]
}
 800c408:	bf00      	nop
 800c40a:	e7fe      	b.n	800c40a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	3318      	adds	r3, #24
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fa31 	bl	800a878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c416:	4b1e      	ldr	r3, [pc, #120]	; (800c490 <xTaskRemoveFromEventList+0xb4>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d11d      	bne.n	800c45a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	3304      	adds	r3, #4
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fa28 	bl	800a878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	4b19      	ldr	r3, [pc, #100]	; (800c494 <xTaskRemoveFromEventList+0xb8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	429a      	cmp	r2, r3
 800c432:	d903      	bls.n	800c43c <xTaskRemoveFromEventList+0x60>
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	4a16      	ldr	r2, [pc, #88]	; (800c494 <xTaskRemoveFromEventList+0xb8>)
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	4613      	mov	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4a13      	ldr	r2, [pc, #76]	; (800c498 <xTaskRemoveFromEventList+0xbc>)
 800c44a:	441a      	add	r2, r3
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	3304      	adds	r3, #4
 800c450:	4619      	mov	r1, r3
 800c452:	4610      	mov	r0, r2
 800c454:	f7fe f9b3 	bl	800a7be <vListInsertEnd>
 800c458:	e005      	b.n	800c466 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	3318      	adds	r3, #24
 800c45e:	4619      	mov	r1, r3
 800c460:	480e      	ldr	r0, [pc, #56]	; (800c49c <xTaskRemoveFromEventList+0xc0>)
 800c462:	f7fe f9ac 	bl	800a7be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46a:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <xTaskRemoveFromEventList+0xc4>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	429a      	cmp	r2, r3
 800c472:	d905      	bls.n	800c480 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c474:	2301      	movs	r3, #1
 800c476:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <xTaskRemoveFromEventList+0xc8>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	e001      	b.n	800c484 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c484:	697b      	ldr	r3, [r7, #20]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200016f4 	.word	0x200016f4
 800c494:	200016d4 	.word	0x200016d4
 800c498:	200011fc 	.word	0x200011fc
 800c49c:	2000168c 	.word	0x2000168c
 800c4a0:	200011f8 	.word	0x200011f8
 800c4a4:	200016e0 	.word	0x200016e0

0800c4a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4b0:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <vTaskInternalSetTimeOutState+0x24>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4b8:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <vTaskInternalSetTimeOutState+0x28>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	605a      	str	r2, [r3, #4]
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	200016e4 	.word	0x200016e4
 800c4d0:	200016d0 	.word	0x200016d0

0800c4d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10c      	bne.n	800c4fe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	b672      	cpsid	i
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	b662      	cpsie	i
 800c4f8:	613b      	str	r3, [r7, #16]
}
 800c4fa:	bf00      	nop
 800c4fc:	e7fe      	b.n	800c4fc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10c      	bne.n	800c51e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	b672      	cpsid	i
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	b662      	cpsie	i
 800c518:	60fb      	str	r3, [r7, #12]
}
 800c51a:	bf00      	nop
 800c51c:	e7fe      	b.n	800c51c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c51e:	f000 ff85 	bl	800d42c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <xTaskCheckForTimeOut+0xc4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	69ba      	ldr	r2, [r7, #24]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53a:	d102      	bne.n	800c542 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	61fb      	str	r3, [r7, #28]
 800c540:	e023      	b.n	800c58a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	4b15      	ldr	r3, [pc, #84]	; (800c59c <xTaskCheckForTimeOut+0xc8>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d007      	beq.n	800c55e <xTaskCheckForTimeOut+0x8a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	429a      	cmp	r2, r3
 800c556:	d302      	bcc.n	800c55e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c558:	2301      	movs	r3, #1
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	e015      	b.n	800c58a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	429a      	cmp	r2, r3
 800c566:	d20b      	bcs.n	800c580 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	1ad2      	subs	r2, r2, r3
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff ff97 	bl	800c4a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	e004      	b.n	800c58a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c586:	2301      	movs	r3, #1
 800c588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c58a:	f000 ff83 	bl	800d494 <vPortExitCritical>

	return xReturn;
 800c58e:	69fb      	ldr	r3, [r7, #28]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	200016d0 	.word	0x200016d0
 800c59c:	200016e4 	.word	0x200016e4

0800c5a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5a4:	4b03      	ldr	r3, [pc, #12]	; (800c5b4 <vTaskMissedYield+0x14>)
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]
}
 800c5aa:	bf00      	nop
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	200016e0 	.word	0x200016e0

0800c5b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5c0:	f000 f852 	bl	800c668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5c4:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <prvIdleTask+0x28>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d9f9      	bls.n	800c5c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <prvIdleTask+0x2c>)
 800c5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5dc:	e7f0      	b.n	800c5c0 <prvIdleTask+0x8>
 800c5de:	bf00      	nop
 800c5e0:	200011fc 	.word	0x200011fc
 800c5e4:	e000ed04 	.word	0xe000ed04

0800c5e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	607b      	str	r3, [r7, #4]
 800c5f2:	e00c      	b.n	800c60e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4413      	add	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4a12      	ldr	r2, [pc, #72]	; (800c648 <prvInitialiseTaskLists+0x60>)
 800c600:	4413      	add	r3, r2
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe f8ae 	bl	800a764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3301      	adds	r3, #1
 800c60c:	607b      	str	r3, [r7, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b37      	cmp	r3, #55	; 0x37
 800c612:	d9ef      	bls.n	800c5f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c614:	480d      	ldr	r0, [pc, #52]	; (800c64c <prvInitialiseTaskLists+0x64>)
 800c616:	f7fe f8a5 	bl	800a764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c61a:	480d      	ldr	r0, [pc, #52]	; (800c650 <prvInitialiseTaskLists+0x68>)
 800c61c:	f7fe f8a2 	bl	800a764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c620:	480c      	ldr	r0, [pc, #48]	; (800c654 <prvInitialiseTaskLists+0x6c>)
 800c622:	f7fe f89f 	bl	800a764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c626:	480c      	ldr	r0, [pc, #48]	; (800c658 <prvInitialiseTaskLists+0x70>)
 800c628:	f7fe f89c 	bl	800a764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c62c:	480b      	ldr	r0, [pc, #44]	; (800c65c <prvInitialiseTaskLists+0x74>)
 800c62e:	f7fe f899 	bl	800a764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c632:	4b0b      	ldr	r3, [pc, #44]	; (800c660 <prvInitialiseTaskLists+0x78>)
 800c634:	4a05      	ldr	r2, [pc, #20]	; (800c64c <prvInitialiseTaskLists+0x64>)
 800c636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c638:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <prvInitialiseTaskLists+0x7c>)
 800c63a:	4a05      	ldr	r2, [pc, #20]	; (800c650 <prvInitialiseTaskLists+0x68>)
 800c63c:	601a      	str	r2, [r3, #0]
}
 800c63e:	bf00      	nop
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200011fc 	.word	0x200011fc
 800c64c:	2000165c 	.word	0x2000165c
 800c650:	20001670 	.word	0x20001670
 800c654:	2000168c 	.word	0x2000168c
 800c658:	200016a0 	.word	0x200016a0
 800c65c:	200016b8 	.word	0x200016b8
 800c660:	20001684 	.word	0x20001684
 800c664:	20001688 	.word	0x20001688

0800c668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c66e:	e019      	b.n	800c6a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c670:	f000 fedc 	bl	800d42c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c674:	4b10      	ldr	r3, [pc, #64]	; (800c6b8 <prvCheckTasksWaitingTermination+0x50>)
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	3304      	adds	r3, #4
 800c680:	4618      	mov	r0, r3
 800c682:	f7fe f8f9 	bl	800a878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c686:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <prvCheckTasksWaitingTermination+0x54>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	4a0b      	ldr	r2, [pc, #44]	; (800c6bc <prvCheckTasksWaitingTermination+0x54>)
 800c68e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c690:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <prvCheckTasksWaitingTermination+0x58>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3b01      	subs	r3, #1
 800c696:	4a0a      	ldr	r2, [pc, #40]	; (800c6c0 <prvCheckTasksWaitingTermination+0x58>)
 800c698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c69a:	f000 fefb 	bl	800d494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f810 	bl	800c6c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6a4:	4b06      	ldr	r3, [pc, #24]	; (800c6c0 <prvCheckTasksWaitingTermination+0x58>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e1      	bne.n	800c670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6ac:	bf00      	nop
 800c6ae:	bf00      	nop
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200016a0 	.word	0x200016a0
 800c6bc:	200016cc 	.word	0x200016cc
 800c6c0:	200016b4 	.word	0x200016b4

0800c6c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d108      	bne.n	800c6e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f001 f89c 	bl	800d818 <vPortFree>
				vPortFree( pxTCB );
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f001 f899 	bl	800d818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6e6:	e01a      	b.n	800c71e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d103      	bne.n	800c6fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 f890 	bl	800d818 <vPortFree>
	}
 800c6f8:	e011      	b.n	800c71e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c700:	2b02      	cmp	r3, #2
 800c702:	d00c      	beq.n	800c71e <prvDeleteTCB+0x5a>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	b672      	cpsid	i
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	b662      	cpsie	i
 800c718:	60fb      	str	r3, [r7, #12]
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <prvDeleteTCB+0x58>
	}
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c72e:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <prvResetNextTaskUnblockTime+0x38>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <prvResetNextTaskUnblockTime+0x3c>)
 800c73a:	f04f 32ff 	mov.w	r2, #4294967295
 800c73e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c740:	e008      	b.n	800c754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c742:	4b07      	ldr	r3, [pc, #28]	; (800c760 <prvResetNextTaskUnblockTime+0x38>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4a04      	ldr	r2, [pc, #16]	; (800c764 <prvResetNextTaskUnblockTime+0x3c>)
 800c752:	6013      	str	r3, [r2, #0]
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	20001684 	.word	0x20001684
 800c764:	200016ec 	.word	0x200016ec

0800c768 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c76e:	4b05      	ldr	r3, [pc, #20]	; (800c784 <xTaskGetCurrentTaskHandle+0x1c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c774:	687b      	ldr	r3, [r7, #4]
	}
 800c776:	4618      	mov	r0, r3
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	200011f8 	.word	0x200011f8

0800c788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c78e:	4b0b      	ldr	r3, [pc, #44]	; (800c7bc <xTaskGetSchedulerState+0x34>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c796:	2301      	movs	r3, #1
 800c798:	607b      	str	r3, [r7, #4]
 800c79a:	e008      	b.n	800c7ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c79c:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <xTaskGetSchedulerState+0x38>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d102      	bne.n	800c7aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	607b      	str	r3, [r7, #4]
 800c7a8:	e001      	b.n	800c7ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7ae:	687b      	ldr	r3, [r7, #4]
	}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	200016d8 	.word	0x200016d8
 800c7c0:	200016f4 	.word	0x200016f4

0800c7c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d051      	beq.n	800c87e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7de:	4b2a      	ldr	r3, [pc, #168]	; (800c888 <xTaskPriorityInherit+0xc4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d241      	bcs.n	800c86c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	db06      	blt.n	800c7fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f0:	4b25      	ldr	r3, [pc, #148]	; (800c888 <xTaskPriorityInherit+0xc4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	6959      	ldr	r1, [r3, #20]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4a1f      	ldr	r2, [pc, #124]	; (800c88c <xTaskPriorityInherit+0xc8>)
 800c810:	4413      	add	r3, r2
 800c812:	4299      	cmp	r1, r3
 800c814:	d122      	bne.n	800c85c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	3304      	adds	r3, #4
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe f82c 	bl	800a878 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c820:	4b19      	ldr	r3, [pc, #100]	; (800c888 <xTaskPriorityInherit+0xc4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82e:	4b18      	ldr	r3, [pc, #96]	; (800c890 <xTaskPriorityInherit+0xcc>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d903      	bls.n	800c83e <xTaskPriorityInherit+0x7a>
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83a:	4a15      	ldr	r2, [pc, #84]	; (800c890 <xTaskPriorityInherit+0xcc>)
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4a10      	ldr	r2, [pc, #64]	; (800c88c <xTaskPriorityInherit+0xc8>)
 800c84c:	441a      	add	r2, r3
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	3304      	adds	r3, #4
 800c852:	4619      	mov	r1, r3
 800c854:	4610      	mov	r0, r2
 800c856:	f7fd ffb2 	bl	800a7be <vListInsertEnd>
 800c85a:	e004      	b.n	800c866 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c85c:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <xTaskPriorityInherit+0xc4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c866:	2301      	movs	r3, #1
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	e008      	b.n	800c87e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c870:	4b05      	ldr	r3, [pc, #20]	; (800c888 <xTaskPriorityInherit+0xc4>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c876:	429a      	cmp	r2, r3
 800c878:	d201      	bcs.n	800c87e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c87a:	2301      	movs	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c87e:	68fb      	ldr	r3, [r7, #12]
	}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	200011f8 	.word	0x200011f8
 800c88c:	200011fc 	.word	0x200011fc
 800c890:	200016d4 	.word	0x200016d4

0800c894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d05a      	beq.n	800c960 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8aa:	4b30      	ldr	r3, [pc, #192]	; (800c96c <xTaskPriorityDisinherit+0xd8>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d00c      	beq.n	800c8ce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	b672      	cpsid	i
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	b662      	cpsie	i
 800c8c8:	60fb      	str	r3, [r7, #12]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10c      	bne.n	800c8f0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	b672      	cpsid	i
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	b662      	cpsie	i
 800c8ea:	60bb      	str	r3, [r7, #8]
}
 800c8ec:	bf00      	nop
 800c8ee:	e7fe      	b.n	800c8ee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f4:	1e5a      	subs	r2, r3, #1
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c902:	429a      	cmp	r2, r3
 800c904:	d02c      	beq.n	800c960 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d128      	bne.n	800c960 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	3304      	adds	r3, #4
 800c912:	4618      	mov	r0, r3
 800c914:	f7fd ffb0 	bl	800a878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <xTaskPriorityDisinherit+0xdc>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	429a      	cmp	r2, r3
 800c936:	d903      	bls.n	800c940 <xTaskPriorityDisinherit+0xac>
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	4a0c      	ldr	r2, [pc, #48]	; (800c970 <xTaskPriorityDisinherit+0xdc>)
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4a09      	ldr	r2, [pc, #36]	; (800c974 <xTaskPriorityDisinherit+0xe0>)
 800c94e:	441a      	add	r2, r3
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	3304      	adds	r3, #4
 800c954:	4619      	mov	r1, r3
 800c956:	4610      	mov	r0, r2
 800c958:	f7fd ff31 	bl	800a7be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c95c:	2301      	movs	r3, #1
 800c95e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c960:	697b      	ldr	r3, [r7, #20]
	}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	200011f8 	.word	0x200011f8
 800c970:	200016d4 	.word	0x200016d4
 800c974:	200011fc 	.word	0x200011fc

0800c978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c986:	2301      	movs	r3, #1
 800c988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d06e      	beq.n	800ca6e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10c      	bne.n	800c9b2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	b672      	cpsid	i
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	b662      	cpsie	i
 800c9ac:	60fb      	str	r3, [r7, #12]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d902      	bls.n	800c9c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	61fb      	str	r3, [r7, #28]
 800c9c0:	e002      	b.n	800c9c8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d04d      	beq.n	800ca6e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d148      	bne.n	800ca6e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c9dc:	4b26      	ldr	r3, [pc, #152]	; (800ca78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d10c      	bne.n	800ca00 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	b672      	cpsid	i
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	b662      	cpsie	i
 800c9fa:	60bb      	str	r3, [r7, #8]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	db04      	blt.n	800ca1e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	6959      	ldr	r1, [r3, #20]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4a13      	ldr	r2, [pc, #76]	; (800ca7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ca2e:	4413      	add	r3, r2
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d11c      	bne.n	800ca6e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	3304      	adds	r3, #4
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fd ff1d 	bl	800a878 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca42:	4b0f      	ldr	r3, [pc, #60]	; (800ca80 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d903      	bls.n	800ca52 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	4a0c      	ldr	r2, [pc, #48]	; (800ca80 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca56:	4613      	mov	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4a07      	ldr	r2, [pc, #28]	; (800ca7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ca60:	441a      	add	r2, r3
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	3304      	adds	r3, #4
 800ca66:	4619      	mov	r1, r3
 800ca68:	4610      	mov	r0, r2
 800ca6a:	f7fd fea8 	bl	800a7be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca6e:	bf00      	nop
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	200011f8 	.word	0x200011f8
 800ca7c:	200011fc 	.word	0x200011fc
 800ca80:	200016d4 	.word	0x200016d4

0800ca84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca84:	b480      	push	{r7}
 800ca86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca88:	4b07      	ldr	r3, [pc, #28]	; (800caa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca90:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca96:	3201      	adds	r2, #1
 800ca98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ca9a:	4b03      	ldr	r3, [pc, #12]	; (800caa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
	}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	200011f8 	.word	0x200011f8

0800caac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cab6:	4b21      	ldr	r3, [pc, #132]	; (800cb3c <prvAddCurrentTaskToDelayedList+0x90>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cabc:	4b20      	ldr	r3, [pc, #128]	; (800cb40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fd fed8 	bl	800a878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d10a      	bne.n	800cae6 <prvAddCurrentTaskToDelayedList+0x3a>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d007      	beq.n	800cae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cad6:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3304      	adds	r3, #4
 800cadc:	4619      	mov	r1, r3
 800cade:	4819      	ldr	r0, [pc, #100]	; (800cb44 <prvAddCurrentTaskToDelayedList+0x98>)
 800cae0:	f7fd fe6d 	bl	800a7be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cae4:	e026      	b.n	800cb34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4413      	add	r3, r2
 800caec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800caee:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <prvAddCurrentTaskToDelayedList+0x94>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d209      	bcs.n	800cb12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	4b0f      	ldr	r3, [pc, #60]	; (800cb40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fd fe7b 	bl	800a806 <vListInsert>
}
 800cb10:	e010      	b.n	800cb34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb12:	4b0e      	ldr	r3, [pc, #56]	; (800cb4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4610      	mov	r0, r2
 800cb20:	f7fd fe71 	bl	800a806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb24:	4b0a      	ldr	r3, [pc, #40]	; (800cb50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d202      	bcs.n	800cb34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb2e:	4a08      	ldr	r2, [pc, #32]	; (800cb50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	6013      	str	r3, [r2, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200016d0 	.word	0x200016d0
 800cb40:	200011f8 	.word	0x200011f8
 800cb44:	200016b8 	.word	0x200016b8
 800cb48:	20001688 	.word	0x20001688
 800cb4c:	20001684 	.word	0x20001684
 800cb50:	200016ec 	.word	0x200016ec

0800cb54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08a      	sub	sp, #40	; 0x28
 800cb58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb5e:	f000 fb15 	bl	800d18c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb62:	4b1d      	ldr	r3, [pc, #116]	; (800cbd8 <xTimerCreateTimerTask+0x84>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d021      	beq.n	800cbae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb72:	1d3a      	adds	r2, r7, #4
 800cb74:	f107 0108 	add.w	r1, r7, #8
 800cb78:	f107 030c 	add.w	r3, r7, #12
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fd fdd7 	bl	800a730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	9202      	str	r2, [sp, #8]
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	2300      	movs	r3, #0
 800cb92:	460a      	mov	r2, r1
 800cb94:	4911      	ldr	r1, [pc, #68]	; (800cbdc <xTimerCreateTimerTask+0x88>)
 800cb96:	4812      	ldr	r0, [pc, #72]	; (800cbe0 <xTimerCreateTimerTask+0x8c>)
 800cb98:	f7fe ffa8 	bl	800baec <xTaskCreateStatic>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	4a11      	ldr	r2, [pc, #68]	; (800cbe4 <xTimerCreateTimerTask+0x90>)
 800cba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cba2:	4b10      	ldr	r3, [pc, #64]	; (800cbe4 <xTimerCreateTimerTask+0x90>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10c      	bne.n	800cbce <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	b672      	cpsid	i
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	b662      	cpsie	i
 800cbc8:	613b      	str	r3, [r7, #16]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800cbce:	697b      	ldr	r3, [r7, #20]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3718      	adds	r7, #24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20001728 	.word	0x20001728
 800cbdc:	0802cb10 	.word	0x0802cb10
 800cbe0:	0800cd25 	.word	0x0800cd25
 800cbe4:	2000172c 	.word	0x2000172c

0800cbe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10c      	bne.n	800cc1a <xTimerGenericCommand+0x32>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	b672      	cpsid	i
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	b662      	cpsie	i
 800cc14:	623b      	str	r3, [r7, #32]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc1a:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <xTimerGenericCommand+0x9c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d02a      	beq.n	800cc78 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	2b05      	cmp	r3, #5
 800cc32:	dc18      	bgt.n	800cc66 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc34:	f7ff fda8 	bl	800c788 <xTaskGetSchedulerState>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d109      	bne.n	800cc52 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc3e:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <xTimerGenericCommand+0x9c>)
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	f107 0110 	add.w	r1, r7, #16
 800cc46:	2300      	movs	r3, #0
 800cc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4a:	f7fe f8bd 	bl	800adc8 <xQueueGenericSend>
 800cc4e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc50:	e012      	b.n	800cc78 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc52:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <xTimerGenericCommand+0x9c>)
 800cc54:	6818      	ldr	r0, [r3, #0]
 800cc56:	f107 0110 	add.w	r1, r7, #16
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f7fe f8b3 	bl	800adc8 <xQueueGenericSend>
 800cc62:	6278      	str	r0, [r7, #36]	; 0x24
 800cc64:	e008      	b.n	800cc78 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc66:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <xTimerGenericCommand+0x9c>)
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f107 0110 	add.w	r1, r7, #16
 800cc6e:	2300      	movs	r3, #0
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	f7fe f9af 	bl	800afd4 <xQueueGenericSendFromISR>
 800cc76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3728      	adds	r7, #40	; 0x28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20001728 	.word	0x20001728

0800cc88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc92:	4b23      	ldr	r3, [pc, #140]	; (800cd20 <prvProcessExpiredTimer+0x98>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	3304      	adds	r3, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fd fde9 	bl	800a878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d024      	beq.n	800ccfe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	699a      	ldr	r2, [r3, #24]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	18d1      	adds	r1, r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	6978      	ldr	r0, [r7, #20]
 800ccc2:	f000 f8d3 	bl	800ce6c <prvInsertTimerInActiveList>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d021      	beq.n	800cd10 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cccc:	2300      	movs	r3, #0
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	6978      	ldr	r0, [r7, #20]
 800ccd8:	f7ff ff86 	bl	800cbe8 <xTimerGenericCommand>
 800ccdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d115      	bne.n	800cd10 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	b672      	cpsid	i
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	b662      	cpsie	i
 800ccf8:	60fb      	str	r3, [r7, #12]
}
 800ccfa:	bf00      	nop
 800ccfc:	e7fe      	b.n	800ccfc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd04:	f023 0301 	bic.w	r3, r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	6978      	ldr	r0, [r7, #20]
 800cd16:	4798      	blx	r3
}
 800cd18:	bf00      	nop
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20001720 	.word	0x20001720

0800cd24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd2c:	f107 0308 	add.w	r3, r7, #8
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 f857 	bl	800cde4 <prvGetNextExpireTime>
 800cd36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f803 	bl	800cd48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd42:	f000 f8d5 	bl	800cef0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd46:	e7f1      	b.n	800cd2c <prvTimerTask+0x8>

0800cd48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd52:	f7ff f915 	bl	800bf80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f866 	bl	800ce2c <prvSampleTimeNow>
 800cd60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d130      	bne.n	800cdca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10a      	bne.n	800cd84 <prvProcessTimerOrBlockTask+0x3c>
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d806      	bhi.n	800cd84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd76:	f7ff f911 	bl	800bf9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd7a:	68f9      	ldr	r1, [r7, #12]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff ff83 	bl	800cc88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd82:	e024      	b.n	800cdce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d008      	beq.n	800cd9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd8a:	4b13      	ldr	r3, [pc, #76]	; (800cdd8 <prvProcessTimerOrBlockTask+0x90>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <prvProcessTimerOrBlockTask+0x50>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e000      	b.n	800cd9a <prvProcessTimerOrBlockTask+0x52>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <prvProcessTimerOrBlockTask+0x94>)
 800cd9e:	6818      	ldr	r0, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	f7fe fe6b 	bl	800ba84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdae:	f7ff f8f5 	bl	800bf9c <xTaskResumeAll>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdb8:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <prvProcessTimerOrBlockTask+0x98>)
 800cdba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	f3bf 8f6f 	isb	sy
}
 800cdc8:	e001      	b.n	800cdce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdca:	f7ff f8e7 	bl	800bf9c <xTaskResumeAll>
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20001724 	.word	0x20001724
 800cddc:	20001728 	.word	0x20001728
 800cde0:	e000ed04 	.word	0xe000ed04

0800cde4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <prvGetNextExpireTime+0x44>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <prvGetNextExpireTime+0x16>
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	e000      	b.n	800cdfc <prvGetNextExpireTime+0x18>
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d105      	bne.n	800ce14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce08:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <prvGetNextExpireTime+0x44>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	60fb      	str	r3, [r7, #12]
 800ce12:	e001      	b.n	800ce18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce18:	68fb      	ldr	r3, [r7, #12]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	20001720 	.word	0x20001720

0800ce2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce34:	f7ff f952 	bl	800c0dc <xTaskGetTickCount>
 800ce38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <prvSampleTimeNow+0x3c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d205      	bcs.n	800ce50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce44:	f000 f93c 	bl	800d0c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	e002      	b.n	800ce56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce56:	4a04      	ldr	r2, [pc, #16]	; (800ce68 <prvSampleTimeNow+0x3c>)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20001730 	.word	0x20001730

0800ce6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d812      	bhi.n	800ceb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d302      	bcc.n	800cea6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cea0:	2301      	movs	r3, #1
 800cea2:	617b      	str	r3, [r7, #20]
 800cea4:	e01b      	b.n	800cede <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cea6:	4b10      	ldr	r3, [pc, #64]	; (800cee8 <prvInsertTimerInActiveList+0x7c>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3304      	adds	r3, #4
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f7fd fca8 	bl	800a806 <vListInsert>
 800ceb6:	e012      	b.n	800cede <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d206      	bcs.n	800cece <prvInsertTimerInActiveList+0x62>
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d302      	bcc.n	800cece <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cec8:	2301      	movs	r3, #1
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	e007      	b.n	800cede <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cece:	4b07      	ldr	r3, [pc, #28]	; (800ceec <prvInsertTimerInActiveList+0x80>)
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3304      	adds	r3, #4
 800ced6:	4619      	mov	r1, r3
 800ced8:	4610      	mov	r0, r2
 800ceda:	f7fd fc94 	bl	800a806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cede:	697b      	ldr	r3, [r7, #20]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20001724 	.word	0x20001724
 800ceec:	20001720 	.word	0x20001720

0800cef0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08e      	sub	sp, #56	; 0x38
 800cef4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cef6:	e0d0      	b.n	800d09a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da1a      	bge.n	800cf34 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cefe:	1d3b      	adds	r3, r7, #4
 800cf00:	3304      	adds	r3, #4
 800cf02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10c      	bne.n	800cf24 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	b672      	cpsid	i
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	b662      	cpsie	i
 800cf1e:	61fb      	str	r3, [r7, #28]
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2a:	6850      	ldr	r0, [r2, #4]
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	6892      	ldr	r2, [r2, #8]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f2c0 80ae 	blt.w	800d098 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fd fc93 	bl	800a878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf52:	463b      	mov	r3, r7
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff ff69 	bl	800ce2c <prvSampleTimeNow>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b09      	cmp	r3, #9
 800cf60:	f200 809b 	bhi.w	800d09a <prvProcessReceivedCommands+0x1aa>
 800cf64:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <prvProcessReceivedCommands+0x7c>)
 800cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6a:	bf00      	nop
 800cf6c:	0800cf95 	.word	0x0800cf95
 800cf70:	0800cf95 	.word	0x0800cf95
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800d00d 	.word	0x0800d00d
 800cf7c:	0800d021 	.word	0x0800d021
 800cf80:	0800d06f 	.word	0x0800d06f
 800cf84:	0800cf95 	.word	0x0800cf95
 800cf88:	0800cf95 	.word	0x0800cf95
 800cf8c:	0800d00d 	.word	0x0800d00d
 800cf90:	0800d021 	.word	0x0800d021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf9a:	f043 0301 	orr.w	r3, r3, #1
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	18d1      	adds	r1, r2, r3
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb4:	f7ff ff5a 	bl	800ce6c <prvInsertTimerInActiveList>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d06d      	beq.n	800d09a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfcc:	f003 0304 	and.w	r3, r3, #4
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d062      	beq.n	800d09a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	441a      	add	r2, r3
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe6:	f7ff fdff 	bl	800cbe8 <xTimerGenericCommand>
 800cfea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d153      	bne.n	800d09a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	61bb      	str	r3, [r7, #24]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d012:	f023 0301 	bic.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d01e:	e03c      	b.n	800d09a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d026:	f043 0301 	orr.w	r3, r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10c      	bne.n	800d05a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	b672      	cpsid	i
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	b662      	cpsie	i
 800d054:	617b      	str	r3, [r7, #20]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	18d1      	adds	r1, r2, r3
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d068:	f7ff ff00 	bl	800ce6c <prvInsertTimerInActiveList>
					break;
 800d06c:	e015      	b.n	800d09a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07e:	f000 fbcb 	bl	800d818 <vPortFree>
 800d082:	e00a      	b.n	800d09a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d096:	e000      	b.n	800d09a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d098:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d09a:	4b08      	ldr	r3, [pc, #32]	; (800d0bc <prvProcessReceivedCommands+0x1cc>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	1d39      	adds	r1, r7, #4
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe f8cc 	bl	800b240 <xQueueReceive>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f47f af24 	bne.w	800cef8 <prvProcessReceivedCommands+0x8>
	}
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	3730      	adds	r7, #48	; 0x30
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20001728 	.word	0x20001728

0800d0c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0c6:	e04a      	b.n	800d15e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0c8:	4b2e      	ldr	r3, [pc, #184]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d2:	4b2c      	ldr	r3, [pc, #176]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fd fbc9 	bl	800a878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f4:	f003 0304 	and.w	r3, r3, #4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d030      	beq.n	800d15e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	4413      	add	r3, r2
 800d104:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d90e      	bls.n	800d12c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d11a:	4b1a      	ldr	r3, [pc, #104]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3304      	adds	r3, #4
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fd fb6e 	bl	800a806 <vListInsert>
 800d12a:	e018      	b.n	800d15e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d12c:	2300      	movs	r3, #0
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	2300      	movs	r3, #0
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	2100      	movs	r1, #0
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7ff fd56 	bl	800cbe8 <xTimerGenericCommand>
 800d13c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10c      	bne.n	800d15e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	603b      	str	r3, [r7, #0]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d15e:	4b09      	ldr	r3, [pc, #36]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1af      	bne.n	800d0c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d168:	4b06      	ldr	r3, [pc, #24]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d16e:	4b06      	ldr	r3, [pc, #24]	; (800d188 <prvSwitchTimerLists+0xc8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a04      	ldr	r2, [pc, #16]	; (800d184 <prvSwitchTimerLists+0xc4>)
 800d174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d176:	4a04      	ldr	r2, [pc, #16]	; (800d188 <prvSwitchTimerLists+0xc8>)
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	6013      	str	r3, [r2, #0]
}
 800d17c:	bf00      	nop
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	20001720 	.word	0x20001720
 800d188:	20001724 	.word	0x20001724

0800d18c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d192:	f000 f94b 	bl	800d42c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d196:	4b15      	ldr	r3, [pc, #84]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d120      	bne.n	800d1e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d19e:	4814      	ldr	r0, [pc, #80]	; (800d1f0 <prvCheckForValidListAndQueue+0x64>)
 800d1a0:	f7fd fae0 	bl	800a764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1a4:	4813      	ldr	r0, [pc, #76]	; (800d1f4 <prvCheckForValidListAndQueue+0x68>)
 800d1a6:	f7fd fadd 	bl	800a764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1aa:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <prvCheckForValidListAndQueue+0x6c>)
 800d1ac:	4a10      	ldr	r2, [pc, #64]	; (800d1f0 <prvCheckForValidListAndQueue+0x64>)
 800d1ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <prvCheckForValidListAndQueue+0x70>)
 800d1b2:	4a10      	ldr	r2, [pc, #64]	; (800d1f4 <prvCheckForValidListAndQueue+0x68>)
 800d1b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	4b11      	ldr	r3, [pc, #68]	; (800d200 <prvCheckForValidListAndQueue+0x74>)
 800d1bc:	4a11      	ldr	r2, [pc, #68]	; (800d204 <prvCheckForValidListAndQueue+0x78>)
 800d1be:	2110      	movs	r1, #16
 800d1c0:	200a      	movs	r0, #10
 800d1c2:	f7fd fbed 	bl	800a9a0 <xQueueGenericCreateStatic>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4a08      	ldr	r2, [pc, #32]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1cc:	4b07      	ldr	r3, [pc, #28]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d005      	beq.n	800d1e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	490b      	ldr	r1, [pc, #44]	; (800d208 <prvCheckForValidListAndQueue+0x7c>)
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fbfe 	bl	800b9dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1e0:	f000 f958 	bl	800d494 <vPortExitCritical>
}
 800d1e4:	bf00      	nop
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20001728 	.word	0x20001728
 800d1f0:	200016f8 	.word	0x200016f8
 800d1f4:	2000170c 	.word	0x2000170c
 800d1f8:	20001720 	.word	0x20001720
 800d1fc:	20001724 	.word	0x20001724
 800d200:	200017d4 	.word	0x200017d4
 800d204:	20001734 	.word	0x20001734
 800d208:	0802cb18 	.word	0x0802cb18

0800d20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3b04      	subs	r3, #4
 800d21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3b04      	subs	r3, #4
 800d22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	f023 0201 	bic.w	r2, r3, #1
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	3b04      	subs	r3, #4
 800d23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d23c:	4a0c      	ldr	r2, [pc, #48]	; (800d270 <pxPortInitialiseStack+0x64>)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3b14      	subs	r3, #20
 800d246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3b04      	subs	r3, #4
 800d252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f06f 0202 	mvn.w	r2, #2
 800d25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3b20      	subs	r3, #32
 800d260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d262:	68fb      	ldr	r3, [r7, #12]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	0800d275 	.word	0x0800d275

0800d274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d27e:	4b14      	ldr	r3, [pc, #80]	; (800d2d0 <prvTaskExitError+0x5c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d286:	d00c      	beq.n	800d2a2 <prvTaskExitError+0x2e>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	b672      	cpsid	i
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	b662      	cpsie	i
 800d29c:	60fb      	str	r3, [r7, #12]
}
 800d29e:	bf00      	nop
 800d2a0:	e7fe      	b.n	800d2a0 <prvTaskExitError+0x2c>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	b672      	cpsid	i
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	b662      	cpsie	i
 800d2b6:	60bb      	str	r3, [r7, #8]
}
 800d2b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2ba:	bf00      	nop
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d0fc      	beq.n	800d2bc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	20000020 	.word	0x20000020
	...

0800d2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2e0:	4b07      	ldr	r3, [pc, #28]	; (800d300 <pxCurrentTCBConst2>)
 800d2e2:	6819      	ldr	r1, [r3, #0]
 800d2e4:	6808      	ldr	r0, [r1, #0]
 800d2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ea:	f380 8809 	msr	PSP, r0
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f04f 0000 	mov.w	r0, #0
 800d2f6:	f380 8811 	msr	BASEPRI, r0
 800d2fa:	4770      	bx	lr
 800d2fc:	f3af 8000 	nop.w

0800d300 <pxCurrentTCBConst2>:
 800d300:	200011f8 	.word	0x200011f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d304:	bf00      	nop
 800d306:	bf00      	nop

0800d308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d308:	4808      	ldr	r0, [pc, #32]	; (800d32c <prvPortStartFirstTask+0x24>)
 800d30a:	6800      	ldr	r0, [r0, #0]
 800d30c:	6800      	ldr	r0, [r0, #0]
 800d30e:	f380 8808 	msr	MSP, r0
 800d312:	f04f 0000 	mov.w	r0, #0
 800d316:	f380 8814 	msr	CONTROL, r0
 800d31a:	b662      	cpsie	i
 800d31c:	b661      	cpsie	f
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	df00      	svc	0
 800d328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d32a:	bf00      	nop
 800d32c:	e000ed08 	.word	0xe000ed08

0800d330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d336:	4b37      	ldr	r3, [pc, #220]	; (800d414 <xPortStartScheduler+0xe4>)
 800d338:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	22ff      	movs	r2, #255	; 0xff
 800d346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d350:	78fb      	ldrb	r3, [r7, #3]
 800d352:	b2db      	uxtb	r3, r3
 800d354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	4b2f      	ldr	r3, [pc, #188]	; (800d418 <xPortStartScheduler+0xe8>)
 800d35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d35e:	4b2f      	ldr	r3, [pc, #188]	; (800d41c <xPortStartScheduler+0xec>)
 800d360:	2207      	movs	r2, #7
 800d362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d364:	e009      	b.n	800d37a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d366:	4b2d      	ldr	r3, [pc, #180]	; (800d41c <xPortStartScheduler+0xec>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	3b01      	subs	r3, #1
 800d36c:	4a2b      	ldr	r2, [pc, #172]	; (800d41c <xPortStartScheduler+0xec>)
 800d36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	b2db      	uxtb	r3, r3
 800d374:	005b      	lsls	r3, r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d37a:	78fb      	ldrb	r3, [r7, #3]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d382:	2b80      	cmp	r3, #128	; 0x80
 800d384:	d0ef      	beq.n	800d366 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d386:	4b25      	ldr	r3, [pc, #148]	; (800d41c <xPortStartScheduler+0xec>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f1c3 0307 	rsb	r3, r3, #7
 800d38e:	2b04      	cmp	r3, #4
 800d390:	d00c      	beq.n	800d3ac <xPortStartScheduler+0x7c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	b672      	cpsid	i
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	b662      	cpsie	i
 800d3a6:	60bb      	str	r3, [r7, #8]
}
 800d3a8:	bf00      	nop
 800d3aa:	e7fe      	b.n	800d3aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3ac:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <xPortStartScheduler+0xec>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	021b      	lsls	r3, r3, #8
 800d3b2:	4a1a      	ldr	r2, [pc, #104]	; (800d41c <xPortStartScheduler+0xec>)
 800d3b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3b6:	4b19      	ldr	r3, [pc, #100]	; (800d41c <xPortStartScheduler+0xec>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3be:	4a17      	ldr	r2, [pc, #92]	; (800d41c <xPortStartScheduler+0xec>)
 800d3c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3ca:	4b15      	ldr	r3, [pc, #84]	; (800d420 <xPortStartScheduler+0xf0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a14      	ldr	r2, [pc, #80]	; (800d420 <xPortStartScheduler+0xf0>)
 800d3d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d3d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3d6:	4b12      	ldr	r3, [pc, #72]	; (800d420 <xPortStartScheduler+0xf0>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a11      	ldr	r2, [pc, #68]	; (800d420 <xPortStartScheduler+0xf0>)
 800d3dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d3e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3e2:	f000 f8dd 	bl	800d5a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3e6:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <xPortStartScheduler+0xf4>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3ec:	f000 f8fc 	bl	800d5e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3f0:	4b0d      	ldr	r3, [pc, #52]	; (800d428 <xPortStartScheduler+0xf8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a0c      	ldr	r2, [pc, #48]	; (800d428 <xPortStartScheduler+0xf8>)
 800d3f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d3fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3fc:	f7ff ff84 	bl	800d308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d400:	f7fe ff38 	bl	800c274 <vTaskSwitchContext>
	prvTaskExitError();
 800d404:	f7ff ff36 	bl	800d274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	e000e400 	.word	0xe000e400
 800d418:	20001824 	.word	0x20001824
 800d41c:	20001828 	.word	0x20001828
 800d420:	e000ed20 	.word	0xe000ed20
 800d424:	20000020 	.word	0x20000020
 800d428:	e000ef34 	.word	0xe000ef34

0800d42c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	607b      	str	r3, [r7, #4]
}
 800d448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d44a:	4b10      	ldr	r3, [pc, #64]	; (800d48c <vPortEnterCritical+0x60>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	4a0e      	ldr	r2, [pc, #56]	; (800d48c <vPortEnterCritical+0x60>)
 800d452:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <vPortEnterCritical+0x60>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d111      	bne.n	800d480 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d45c:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <vPortEnterCritical+0x64>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00c      	beq.n	800d480 <vPortEnterCritical+0x54>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	b672      	cpsid	i
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	b662      	cpsie	i
 800d47a:	603b      	str	r3, [r7, #0]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <vPortEnterCritical+0x52>
	}
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	20000020 	.word	0x20000020
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d49a:	4b13      	ldr	r3, [pc, #76]	; (800d4e8 <vPortExitCritical+0x54>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10c      	bne.n	800d4bc <vPortExitCritical+0x28>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	b672      	cpsid	i
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	b662      	cpsie	i
 800d4b6:	607b      	str	r3, [r7, #4]
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <vPortExitCritical+0x54>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	4a09      	ldr	r2, [pc, #36]	; (800d4e8 <vPortExitCritical+0x54>)
 800d4c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4c6:	4b08      	ldr	r3, [pc, #32]	; (800d4e8 <vPortExitCritical+0x54>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d105      	bne.n	800d4da <vPortExitCritical+0x46>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	f383 8811 	msr	BASEPRI, r3
}
 800d4d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4da:	bf00      	nop
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	20000020 	.word	0x20000020
 800d4ec:	00000000 	.word	0x00000000

0800d4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4f0:	f3ef 8009 	mrs	r0, PSP
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	4b15      	ldr	r3, [pc, #84]	; (800d550 <pxCurrentTCBConst>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	f01e 0f10 	tst.w	lr, #16
 800d500:	bf08      	it	eq
 800d502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50a:	6010      	str	r0, [r2, #0]
 800d50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d514:	b672      	cpsid	i
 800d516:	f380 8811 	msr	BASEPRI, r0
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	b662      	cpsie	i
 800d524:	f7fe fea6 	bl	800c274 <vTaskSwitchContext>
 800d528:	f04f 0000 	mov.w	r0, #0
 800d52c:	f380 8811 	msr	BASEPRI, r0
 800d530:	bc09      	pop	{r0, r3}
 800d532:	6819      	ldr	r1, [r3, #0]
 800d534:	6808      	ldr	r0, [r1, #0]
 800d536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	f01e 0f10 	tst.w	lr, #16
 800d53e:	bf08      	it	eq
 800d540:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d544:	f380 8809 	msr	PSP, r0
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop

0800d550 <pxCurrentTCBConst>:
 800d550:	200011f8 	.word	0x200011f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop

0800d558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	b672      	cpsid	i
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	b662      	cpsie	i
 800d572:	607b      	str	r3, [r7, #4]
}
 800d574:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d576:	f7fe fdc1 	bl	800c0fc <xTaskIncrementTick>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d580:	4b06      	ldr	r3, [pc, #24]	; (800d59c <SysTick_Handler+0x44>)
 800d582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	2300      	movs	r3, #0
 800d58a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	f383 8811 	msr	BASEPRI, r3
}
 800d592:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d594:	bf00      	nop
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	e000ed04 	.word	0xe000ed04

0800d5a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5a4:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <vPortSetupTimerInterrupt+0x34>)
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5aa:	4b0b      	ldr	r3, [pc, #44]	; (800d5d8 <vPortSetupTimerInterrupt+0x38>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <vPortSetupTimerInterrupt+0x3c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a0a      	ldr	r2, [pc, #40]	; (800d5e0 <vPortSetupTimerInterrupt+0x40>)
 800d5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ba:	099b      	lsrs	r3, r3, #6
 800d5bc:	4a09      	ldr	r2, [pc, #36]	; (800d5e4 <vPortSetupTimerInterrupt+0x44>)
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5c2:	4b04      	ldr	r3, [pc, #16]	; (800d5d4 <vPortSetupTimerInterrupt+0x34>)
 800d5c4:	2207      	movs	r2, #7
 800d5c6:	601a      	str	r2, [r3, #0]
}
 800d5c8:	bf00      	nop
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	e000e010 	.word	0xe000e010
 800d5d8:	e000e018 	.word	0xe000e018
 800d5dc:	20000014 	.word	0x20000014
 800d5e0:	10624dd3 	.word	0x10624dd3
 800d5e4:	e000e014 	.word	0xe000e014

0800d5e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d5f8 <vPortEnableVFP+0x10>
 800d5ec:	6801      	ldr	r1, [r0, #0]
 800d5ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5f2:	6001      	str	r1, [r0, #0]
 800d5f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5f6:	bf00      	nop
 800d5f8:	e000ed88 	.word	0xe000ed88

0800d5fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d602:	f3ef 8305 	mrs	r3, IPSR
 800d606:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b0f      	cmp	r3, #15
 800d60c:	d916      	bls.n	800d63c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d60e:	4a19      	ldr	r2, [pc, #100]	; (800d674 <vPortValidateInterruptPriority+0x78>)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d618:	4b17      	ldr	r3, [pc, #92]	; (800d678 <vPortValidateInterruptPriority+0x7c>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	7afa      	ldrb	r2, [r7, #11]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d20c      	bcs.n	800d63c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	b672      	cpsid	i
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	b662      	cpsie	i
 800d636:	607b      	str	r3, [r7, #4]
}
 800d638:	bf00      	nop
 800d63a:	e7fe      	b.n	800d63a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d63c:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <vPortValidateInterruptPriority+0x80>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d644:	4b0e      	ldr	r3, [pc, #56]	; (800d680 <vPortValidateInterruptPriority+0x84>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d90c      	bls.n	800d666 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	b672      	cpsid	i
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	b662      	cpsie	i
 800d660:	603b      	str	r3, [r7, #0]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <vPortValidateInterruptPriority+0x68>
	}
 800d666:	bf00      	nop
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	e000e3f0 	.word	0xe000e3f0
 800d678:	20001824 	.word	0x20001824
 800d67c:	e000ed0c 	.word	0xe000ed0c
 800d680:	20001828 	.word	0x20001828

0800d684 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	; 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d690:	f7fe fc76 	bl	800bf80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d694:	4b5b      	ldr	r3, [pc, #364]	; (800d804 <pvPortMalloc+0x180>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d69c:	f000 f91a 	bl	800d8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6a0:	4b59      	ldr	r3, [pc, #356]	; (800d808 <pvPortMalloc+0x184>)
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 8092 	bne.w	800d7d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01f      	beq.n	800d6f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d6b4:	2208      	movs	r2, #8
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f003 0307 	and.w	r3, r3, #7
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d016      	beq.n	800d6f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f023 0307 	bic.w	r3, r3, #7
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f003 0307 	and.w	r3, r3, #7
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00c      	beq.n	800d6f4 <pvPortMalloc+0x70>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	b672      	cpsid	i
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	b662      	cpsie	i
 800d6ee:	617b      	str	r3, [r7, #20]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d06b      	beq.n	800d7d2 <pvPortMalloc+0x14e>
 800d6fa:	4b44      	ldr	r3, [pc, #272]	; (800d80c <pvPortMalloc+0x188>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d866      	bhi.n	800d7d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d704:	4b42      	ldr	r3, [pc, #264]	; (800d810 <pvPortMalloc+0x18c>)
 800d706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d708:	4b41      	ldr	r3, [pc, #260]	; (800d810 <pvPortMalloc+0x18c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d70e:	e004      	b.n	800d71a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d903      	bls.n	800d72c <pvPortMalloc+0xa8>
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1f1      	bne.n	800d710 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d72c:	4b35      	ldr	r3, [pc, #212]	; (800d804 <pvPortMalloc+0x180>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d732:	429a      	cmp	r2, r3
 800d734:	d04d      	beq.n	800d7d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2208      	movs	r2, #8
 800d73c:	4413      	add	r3, r2
 800d73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	2308      	movs	r3, #8
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	429a      	cmp	r2, r3
 800d756:	d921      	bls.n	800d79c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00c      	beq.n	800d784 <pvPortMalloc+0x100>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	b672      	cpsid	i
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	b662      	cpsie	i
 800d77e:	613b      	str	r3, [r7, #16]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d796:	69b8      	ldr	r0, [r7, #24]
 800d798:	f000 f8fe 	bl	800d998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d79c:	4b1b      	ldr	r3, [pc, #108]	; (800d80c <pvPortMalloc+0x188>)
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	4a19      	ldr	r2, [pc, #100]	; (800d80c <pvPortMalloc+0x188>)
 800d7a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7aa:	4b18      	ldr	r3, [pc, #96]	; (800d80c <pvPortMalloc+0x188>)
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	4b19      	ldr	r3, [pc, #100]	; (800d814 <pvPortMalloc+0x190>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d203      	bcs.n	800d7be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7b6:	4b15      	ldr	r3, [pc, #84]	; (800d80c <pvPortMalloc+0x188>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a16      	ldr	r2, [pc, #88]	; (800d814 <pvPortMalloc+0x190>)
 800d7bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	4b11      	ldr	r3, [pc, #68]	; (800d808 <pvPortMalloc+0x184>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7d2:	f7fe fbe3 	bl	800bf9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f003 0307 	and.w	r3, r3, #7
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00c      	beq.n	800d7fa <pvPortMalloc+0x176>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	b672      	cpsid	i
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	b662      	cpsie	i
 800d7f4:	60fb      	str	r3, [r7, #12]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <pvPortMalloc+0x174>
	return pvReturn;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3728      	adds	r7, #40	; 0x28
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20033834 	.word	0x20033834
 800d808:	20033840 	.word	0x20033840
 800d80c:	20033838 	.word	0x20033838
 800d810:	2003382c 	.word	0x2003382c
 800d814:	2003383c 	.word	0x2003383c

0800d818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d04c      	beq.n	800d8c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d82a:	2308      	movs	r3, #8
 800d82c:	425b      	negs	r3, r3
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	4413      	add	r3, r2
 800d832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	4b23      	ldr	r3, [pc, #140]	; (800d8cc <vPortFree+0xb4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4013      	ands	r3, r2
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10c      	bne.n	800d860 <vPortFree+0x48>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84a:	b672      	cpsid	i
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	b662      	cpsie	i
 800d85a:	60fb      	str	r3, [r7, #12]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00c      	beq.n	800d882 <vPortFree+0x6a>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	b672      	cpsid	i
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	b662      	cpsie	i
 800d87c:	60bb      	str	r3, [r7, #8]
}
 800d87e:	bf00      	nop
 800d880:	e7fe      	b.n	800d880 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	4b11      	ldr	r3, [pc, #68]	; (800d8cc <vPortFree+0xb4>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4013      	ands	r3, r2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d019      	beq.n	800d8c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d115      	bne.n	800d8c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <vPortFree+0xb4>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8a8:	f7fe fb6a 	bl	800bf80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <vPortFree+0xb8>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4a06      	ldr	r2, [pc, #24]	; (800d8d0 <vPortFree+0xb8>)
 800d8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ba:	6938      	ldr	r0, [r7, #16]
 800d8bc:	f000 f86c 	bl	800d998 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d8c0:	f7fe fb6c 	bl	800bf9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8c4:	bf00      	nop
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20033840 	.word	0x20033840
 800d8d0:	20033838 	.word	0x20033838

0800d8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8da:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800d8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8e0:	4b27      	ldr	r3, [pc, #156]	; (800d980 <prvHeapInit+0xac>)
 800d8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00c      	beq.n	800d908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3307      	adds	r3, #7
 800d8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	4a1f      	ldr	r2, [pc, #124]	; (800d980 <prvHeapInit+0xac>)
 800d904:	4413      	add	r3, r2
 800d906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d90c:	4a1d      	ldr	r2, [pc, #116]	; (800d984 <prvHeapInit+0xb0>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d912:	4b1c      	ldr	r3, [pc, #112]	; (800d984 <prvHeapInit+0xb0>)
 800d914:	2200      	movs	r2, #0
 800d916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	4413      	add	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d920:	2208      	movs	r2, #8
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 0307 	bic.w	r3, r3, #7
 800d92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4a15      	ldr	r2, [pc, #84]	; (800d988 <prvHeapInit+0xb4>)
 800d934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d936:	4b14      	ldr	r3, [pc, #80]	; (800d988 <prvHeapInit+0xb4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2200      	movs	r2, #0
 800d93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <prvHeapInit+0xb4>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	1ad2      	subs	r2, r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d954:	4b0c      	ldr	r3, [pc, #48]	; (800d988 <prvHeapInit+0xb4>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	4a0a      	ldr	r2, [pc, #40]	; (800d98c <prvHeapInit+0xb8>)
 800d962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	4a09      	ldr	r2, [pc, #36]	; (800d990 <prvHeapInit+0xbc>)
 800d96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d96c:	4b09      	ldr	r3, [pc, #36]	; (800d994 <prvHeapInit+0xc0>)
 800d96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d972:	601a      	str	r2, [r3, #0]
}
 800d974:	bf00      	nop
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	2000182c 	.word	0x2000182c
 800d984:	2003382c 	.word	0x2003382c
 800d988:	20033834 	.word	0x20033834
 800d98c:	2003383c 	.word	0x2003383c
 800d990:	20033838 	.word	0x20033838
 800d994:	20033840 	.word	0x20033840

0800d998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9a0:	4b28      	ldr	r3, [pc, #160]	; (800da44 <prvInsertBlockIntoFreeList+0xac>)
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e002      	b.n	800d9ac <prvInsertBlockIntoFreeList+0x14>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d8f7      	bhi.n	800d9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d108      	bne.n	800d9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685a      	ldr	r2, [r3, #4]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	441a      	add	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	441a      	add	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d118      	bne.n	800da20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	4b15      	ldr	r3, [pc, #84]	; (800da48 <prvInsertBlockIntoFreeList+0xb0>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d00d      	beq.n	800da16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	441a      	add	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	e008      	b.n	800da28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da16:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <prvInsertBlockIntoFreeList+0xb0>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	e003      	b.n	800da28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d002      	beq.n	800da36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	2003382c 	.word	0x2003382c
 800da48:	20033834 	.word	0x20033834

0800da4c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800da4c:	b480      	push	{r7}
 800da4e:	af00      	add	r7, sp, #0
}
 800da50:	bf00      	nop
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800da5e:	f006 fd4d 	bl	80144fc <touchgfx_init>
}
 800da62:	bf00      	nop
 800da64:	bd80      	pop	{r7, pc}
	...

0800da68 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
    {
 800da70:	4a04      	ldr	r2, [pc, #16]	; (800da84 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	601a      	str	r2, [r3, #0]
    }
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	0802f19c 	.word	0x0802f19c

0800da88 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
    }
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ffe9 	bl	800da68 <_ZN8touchgfx12FontProviderD1Ev>
 800da96:	2104      	movs	r1, #4
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f01b fe07 	bl	80296ac <_ZdlPvj>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800dab4:	887b      	ldrh	r3, [r7, #2]
 800dab6:	2b0a      	cmp	r3, #10
 800dab8:	d84f      	bhi.n	800db5a <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 800daba:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	0800daf7 	.word	0x0800daf7
 800dac8:	0800db01 	.word	0x0800db01
 800dacc:	0800db0b 	.word	0x0800db0b
 800dad0:	0800db15 	.word	0x0800db15
 800dad4:	0800db1f 	.word	0x0800db1f
 800dad8:	0800db29 	.word	0x0800db29
 800dadc:	0800db33 	.word	0x0800db33
 800dae0:	0800db3d 	.word	0x0800db3d
 800dae4:	0800db47 	.word	0x0800db47
 800dae8:	0800db51 	.word	0x0800db51
    {
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800daec:	f004 f82a 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800daf0:	4603      	mov	r3, r0
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	e032      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800daf6:	f004 f825 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800dafa:	4603      	mov	r3, r0
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	e02d      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800db00:	f004 f820 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db04:	4603      	mov	r3, r0
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	e028      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800db0a:	f004 f81b 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db0e:	4603      	mov	r3, r0
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	e023      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800db14:	f004 f816 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db18:	4603      	mov	r3, r0
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	e01e      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800db1e:	f004 f811 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db22:	4603      	mov	r3, r0
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	e019      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800db28:	f004 f80c 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db2c:	4603      	mov	r3, r0
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	e014      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 800db32:	f004 f807 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db36:	4603      	mov	r3, r0
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	e00f      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800db3c:	f004 f802 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db40:	4603      	mov	r3, r0
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	e00a      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800db46:	f003 fffd 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db4a:	4603      	mov	r3, r0
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	e005      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800db50:	f003 fff8 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 800db54:	4603      	mov	r3, r0
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	e000      	b.n	800db5c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 800db5a:	2300      	movs	r3, #0
    }
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 1; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 4; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	4a05      	ldr	r2, [pc, #20]	; (800db84 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	601a      	str	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff ff77 	bl	800da68 <_ZN8touchgfx12FontProviderD1Ev>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4618      	mov	r0, r3
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	0802f188 	.word	0x0802f188

0800db88 <_ZN23ApplicationFontProviderD0Ev>:
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff ffe7 	bl	800db64 <_ZN23ApplicationFontProviderD1Ev>
 800db96:	2104      	movs	r1, #4
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f01b fd87 	bl	80296ac <_ZdlPvj>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4618      	mov	r0, r3
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
    {
 800dbb0:	4a04      	ldr	r2, [pc, #16]	; (800dbc4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
    }
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	0802f644 	.word	0x0802f644

0800dbc8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
    }
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7ff ffe9 	bl	800dba8 <_ZN8touchgfx4FontD1Ev>
 800dbd6:	2110      	movs	r1, #16
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f01b fd67 	bl	80296ac <_ZdlPvj>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dbe8:	b590      	push	{r4, r7, lr}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800dbf4:	887b      	ldrh	r3, [r7, #2]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e010      	b.n	800dc20 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	681c      	ldr	r4, [r3, #0]
 800dc0e:	f107 030f 	add.w	r3, r7, #15
 800dc12:	f107 0210 	add.w	r2, r7, #16
 800dc16:	8879      	ldrh	r1, [r7, #2]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	47a0      	blx	r4
 800dc1c:	6178      	str	r0, [r7, #20]
        return glyph;
 800dc1e:	697b      	ldr	r3, [r7, #20]
    }
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	895b      	ldrh	r3, [r3, #10]
    }
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	899b      	ldrh	r3, [r3, #12]
    }
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	889b      	ldrh	r3, [r3, #4]
    }
 800dc64:	4618      	mov	r0, r3
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	889a      	ldrh	r2, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	799b      	ldrb	r3, [r3, #6]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4413      	add	r3, r2
 800dc84:	b29b      	uxth	r3, r3
    }
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	79db      	ldrb	r3, [r3, #7]
 800dc9e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800dca2:	b2db      	uxtb	r3, r3
    }
 800dca4:	4618      	mov	r0, r3
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	79db      	ldrb	r3, [r3, #7]
 800dcbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800dcc0:	b2db      	uxtb	r3, r3
    }
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
	...

0800dcd0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	4a05      	ldr	r2, [pc, #20]	; (800dcf0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff ff61 	bl	800dba8 <_ZN8touchgfx4FontD1Ev>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08030430 	.word	0x08030430

0800dcf4 <_ZN8touchgfx9ConstFontD0Ev>:
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff ffe7 	bl	800dcd0 <_ZN8touchgfx9ConstFontD1Ev>
 800dd02:	2118      	movs	r1, #24
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f01b fcd1 	bl	80296ac <_ZdlPvj>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	4a05      	ldr	r2, [pc, #20]	; (800dd34 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7ff ffd3 	bl	800dcd0 <_ZN8touchgfx9ConstFontD1Ev>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	0802f1c0 	.word	0x0802f1c0

0800dd38 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ffe7 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd46:	2128      	movs	r1, #40	; 0x28
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f01b fcaf 	bl	80296ac <_ZdlPvj>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
    {
 800dd60:	4a04      	ldr	r2, [pc, #16]	; (800dd74 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	601a      	str	r2, [r3, #0]
    }
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr
 800dd74:	0802f1b0 	.word	0x0802f1b0

0800dd78 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
    }
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ffe9 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
 800dd86:	2108      	movs	r1, #8
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f01b fc8f 	bl	80296ac <_ZdlPvj>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
    }
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08c      	sub	sp, #48	; 0x30
 800ddcc:	af08      	add	r7, sp, #32
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	80fb      	strh	r3, [r7, #6]
 800ddda:	4613      	mov	r3, r2
 800dddc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	88b9      	ldrh	r1, [r7, #4]
 800dde2:	88fa      	ldrh	r2, [r7, #6]
 800dde4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dde6:	9306      	str	r3, [sp, #24]
 800dde8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ddea:	9305      	str	r3, [sp, #20]
 800ddec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddf6:	9303      	str	r3, [sp, #12]
 800ddf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddfc:	9302      	str	r3, [sp, #8]
 800ddfe:	7f3b      	ldrb	r3, [r7, #28]
 800de00:	9301      	str	r3, [sp, #4]
 800de02:	7e3b      	ldrb	r3, [r7, #24]
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	460b      	mov	r3, r1
 800de08:	68b9      	ldr	r1, [r7, #8]
 800de0a:	f00d fe77 	bl	801bafc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800de0e:	4a0a      	ldr	r2, [pc, #40]	; (800de38 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de18:	619a      	str	r2, [r3, #24]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de1e:	61da      	str	r2, [r3, #28]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de24:	621a      	str	r2, [r3, #32]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de2a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	0802f1c0 	.word	0x0802f1c0

0800de3c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	889b      	ldrh	r3, [r3, #4]
 800de50:	0adb      	lsrs	r3, r3, #11
 800de52:	b29b      	uxth	r3, r3
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	4413      	add	r3, r2
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4413      	add	r3, r2
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800de6e:	b480      	push	{r7}
 800de70:	b089      	sub	sp, #36	; 0x24
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	460b      	mov	r3, r1
 800de78:	607a      	str	r2, [r7, #4]
 800de7a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d003      	beq.n	800de8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	7b1b      	ldrb	r3, [r3, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	e030      	b.n	800def0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	69da      	ldr	r2, [r3, #28]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	7b5b      	ldrb	r3, [r3, #13]
 800de9a:	021b      	lsls	r3, r3, #8
 800de9c:	b21b      	sxth	r3, r3
 800de9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dea2:	b219      	sxth	r1, r3
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	7adb      	ldrb	r3, [r3, #11]
 800dea8:	b21b      	sxth	r3, r3
 800deaa:	430b      	orrs	r3, r1
 800deac:	b21b      	sxth	r3, r3
 800deae:	b29b      	uxth	r3, r3
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	7b1b      	ldrb	r3, [r3, #12]
 800deba:	837b      	strh	r3, [r7, #26]
 800debc:	8b7b      	ldrh	r3, [r7, #26]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d015      	beq.n	800deee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	897a      	ldrh	r2, [r7, #10]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d103      	bne.n	800ded4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ded2:	e00d      	b.n	800def0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	897a      	ldrh	r2, [r7, #10]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d306      	bcc.n	800deec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dede:	8b7b      	ldrh	r3, [r7, #26]
 800dee0:	3b01      	subs	r3, #1
 800dee2:	837b      	strh	r3, [r7, #26]
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	3304      	adds	r3, #4
 800dee8:	61fb      	str	r3, [r7, #28]
 800deea:	e7e7      	b.n	800debc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800deec:	bf00      	nop
        }
    }
    return 0;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3724      	adds	r7, #36	; 0x24
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
 800df00:	4801      	ldr	r0, [pc, #4]	; (800df08 <__tcf_0+0xc>)
 800df02:	f7ff ff07 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800df06:	bd80      	pop	{r7, pc}
 800df08:	20033844 	.word	0x20033844

0800df0c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08c      	sub	sp, #48	; 0x30
 800df10:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800df12:	4b1f      	ldr	r3, [pc, #124]	; (800df90 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	f3bf 8f5b 	dmb	ish
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	bf0c      	ite	eq
 800df24:	2301      	moveq	r3, #1
 800df26:	2300      	movne	r3, #0
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d02c      	beq.n	800df88 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800df2e:	4818      	ldr	r0, [pc, #96]	; (800df90 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800df30:	f01b fbbe 	bl	80296b0 <__cxa_guard_acquire>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	bf14      	ite	ne
 800df3a:	2301      	movne	r3, #1
 800df3c:	2300      	moveq	r3, #0
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d021      	beq.n	800df88 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800df44:	2300      	movs	r3, #0
 800df46:	930a      	str	r3, [sp, #40]	; 0x28
 800df48:	2300      	movs	r3, #0
 800df4a:	9309      	str	r3, [sp, #36]	; 0x24
 800df4c:	2300      	movs	r3, #0
 800df4e:	9308      	str	r3, [sp, #32]
 800df50:	233f      	movs	r3, #63	; 0x3f
 800df52:	9307      	str	r3, [sp, #28]
 800df54:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 800df56:	9306      	str	r3, [sp, #24]
 800df58:	4b0f      	ldr	r3, [pc, #60]	; (800df98 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800df5a:	9305      	str	r3, [sp, #20]
 800df5c:	2300      	movs	r3, #0
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	2300      	movs	r3, #0
 800df62:	9303      	str	r3, [sp, #12]
 800df64:	2301      	movs	r3, #1
 800df66:	9302      	str	r3, [sp, #8]
 800df68:	2304      	movs	r3, #4
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	2307      	movs	r3, #7
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	2328      	movs	r3, #40	; 0x28
 800df72:	2242      	movs	r2, #66	; 0x42
 800df74:	4909      	ldr	r1, [pc, #36]	; (800df9c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 800df76:	480a      	ldr	r0, [pc, #40]	; (800dfa0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 800df78:	f7ff ff26 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df7c:	4809      	ldr	r0, [pc, #36]	; (800dfa4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 800df7e:	f01b fc5d 	bl	802983c <atexit>
 800df82:	4803      	ldr	r0, [pc, #12]	; (800df90 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800df84:	f01b fba0 	bl	80296c8 <__cxa_guard_release>
    return JetBrainsMono_Regular_40_4bpp;
 800df88:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	2003386c 	.word	0x2003386c
 800df94:	080da944 	.word	0x080da944
 800df98:	080daa40 	.word	0x080daa40
 800df9c:	080d9738 	.word	0x080d9738
 800dfa0:	20033844 	.word	0x20033844
 800dfa4:	0800defd 	.word	0x0800defd

0800dfa8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	4801      	ldr	r0, [pc, #4]	; (800dfb4 <__tcf_0+0xc>)
 800dfae:	f7ff feb1 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	20033870 	.word	0x20033870

0800dfb8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08c      	sub	sp, #48	; 0x30
 800dfbc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800dfbe:	4b1f      	ldr	r3, [pc, #124]	; (800e03c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	f3bf 8f5b 	dmb	ish
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	bf0c      	ite	eq
 800dfd0:	2301      	moveq	r3, #1
 800dfd2:	2300      	movne	r3, #0
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d02c      	beq.n	800e034 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800dfda:	4818      	ldr	r0, [pc, #96]	; (800e03c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800dfdc:	f01b fb68 	bl	80296b0 <__cxa_guard_acquire>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	bf14      	ite	ne
 800dfe6:	2301      	movne	r3, #1
 800dfe8:	2300      	moveq	r3, #0
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d021      	beq.n	800e034 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800dff0:	2300      	movs	r3, #0
 800dff2:	930a      	str	r3, [sp, #40]	; 0x28
 800dff4:	2300      	movs	r3, #0
 800dff6:	9309      	str	r3, [sp, #36]	; 0x24
 800dff8:	2300      	movs	r3, #0
 800dffa:	9308      	str	r3, [sp, #32]
 800dffc:	233f      	movs	r3, #63	; 0x3f
 800dffe:	9307      	str	r3, [sp, #28]
 800e000:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 800e002:	9306      	str	r3, [sp, #24]
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	2300      	movs	r3, #0
 800e00a:	9304      	str	r3, [sp, #16]
 800e00c:	2300      	movs	r3, #0
 800e00e:	9303      	str	r3, [sp, #12]
 800e010:	2301      	movs	r3, #1
 800e012:	9302      	str	r3, [sp, #8]
 800e014:	2304      	movs	r3, #4
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	230b      	movs	r3, #11
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	233c      	movs	r3, #60	; 0x3c
 800e01e:	223f      	movs	r2, #63	; 0x3f
 800e020:	4909      	ldr	r1, [pc, #36]	; (800e048 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 800e022:	480a      	ldr	r0, [pc, #40]	; (800e04c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 800e024:	f7ff fed0 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e028:	4809      	ldr	r0, [pc, #36]	; (800e050 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 800e02a:	f01b fc07 	bl	802983c <atexit>
 800e02e:	4803      	ldr	r0, [pc, #12]	; (800e03c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800e030:	f01b fb4a 	bl	80296c8 <__cxa_guard_release>
    return JetBrainsMono_Regular_60_4bpp;
 800e034:	4b05      	ldr	r3, [pc, #20]	; (800e04c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 800e036:	4618      	mov	r0, r3
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20033898 	.word	0x20033898
 800e040:	080da948 	.word	0x080da948
 800e044:	080daa44 	.word	0x080daa44
 800e048:	080d9ad4 	.word	0x080d9ad4
 800e04c:	20033870 	.word	0x20033870
 800e050:	0800dfa9 	.word	0x0800dfa9

0800e054 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_300_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800e054:	b580      	push	{r7, lr}
 800e056:	af00      	add	r7, sp, #0
 800e058:	4801      	ldr	r0, [pc, #4]	; (800e060 <__tcf_0+0xc>)
 800e05a:	f7ff fe5b 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2003389c 	.word	0x2003389c

0800e064 <_Z24getFont_swisop3_300_4bppv>:
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08c      	sub	sp, #48	; 0x30
 800e068:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800e06a:	4b20      	ldr	r3, [pc, #128]	; (800e0ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	f3bf 8f5b 	dmb	ish
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bf0c      	ite	eq
 800e07c:	2301      	moveq	r3, #1
 800e07e:	2300      	movne	r3, #0
 800e080:	b2db      	uxtb	r3, r3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d02d      	beq.n	800e0e2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800e086:	4819      	ldr	r0, [pc, #100]	; (800e0ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e088:	f01b fb12 	bl	80296b0 <__cxa_guard_acquire>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bf14      	ite	ne
 800e092:	2301      	movne	r3, #1
 800e094:	2300      	moveq	r3, #0
 800e096:	b2db      	uxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d022      	beq.n	800e0e2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800e09c:	2300      	movs	r3, #0
 800e09e:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9308      	str	r3, [sp, #32]
 800e0a8:	233f      	movs	r3, #63	; 0x3f
 800e0aa:	9307      	str	r3, [sp, #28]
 800e0ac:	4b10      	ldr	r3, [pc, #64]	; (800e0f0 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800e0ae:	9306      	str	r3, [sp, #24]
 800e0b0:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <_Z24getFont_swisop3_300_4bppv+0x90>)
 800e0b2:	9305      	str	r3, [sp, #20]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9304      	str	r3, [sp, #16]
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9303      	str	r3, [sp, #12]
 800e0bc:	2301      	movs	r3, #1
 800e0be:	9302      	str	r3, [sp, #8]
 800e0c0:	2304      	movs	r3, #4
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	233b      	movs	r3, #59	; 0x3b
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800e0cc:	223f      	movs	r2, #63	; 0x3f
 800e0ce:	490a      	ldr	r1, [pc, #40]	; (800e0f8 <_Z24getFont_swisop3_300_4bppv+0x94>)
 800e0d0:	480a      	ldr	r0, [pc, #40]	; (800e0fc <_Z24getFont_swisop3_300_4bppv+0x98>)
 800e0d2:	f7ff fe79 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e0d6:	480a      	ldr	r0, [pc, #40]	; (800e100 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 800e0d8:	f01b fbb0 	bl	802983c <atexit>
 800e0dc:	4803      	ldr	r0, [pc, #12]	; (800e0ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e0de:	f01b faf3 	bl	80296c8 <__cxa_guard_release>
    return swisop3_300_4bpp;
 800e0e2:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	200338c4 	.word	0x200338c4
 800e0f0:	080da94c 	.word	0x080da94c
 800e0f4:	080daa48 	.word	0x080daa48
 800e0f8:	080d9e48 	.word	0x080d9e48
 800e0fc:	2003389c 	.word	0x2003389c
 800e100:	0800e055 	.word	0x0800e055

0800e104 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
 800e108:	4801      	ldr	r0, [pc, #4]	; (800e110 <__tcf_0+0xc>)
 800e10a:	f7ff fe03 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	200338c8 	.word	0x200338c8

0800e114 <_Z23getFont_swisop3_50_4bppv>:
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800e11a:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f3bf 8f5b 	dmb	ish
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bf0c      	ite	eq
 800e12c:	2301      	moveq	r3, #1
 800e12e:	2300      	movne	r3, #0
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d02c      	beq.n	800e190 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800e136:	4818      	ldr	r0, [pc, #96]	; (800e198 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e138:	f01b faba 	bl	80296b0 <__cxa_guard_acquire>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bf14      	ite	ne
 800e142:	2301      	movne	r3, #1
 800e144:	2300      	moveq	r3, #0
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d021      	beq.n	800e190 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800e14c:	2300      	movs	r3, #0
 800e14e:	930a      	str	r3, [sp, #40]	; 0x28
 800e150:	2300      	movs	r3, #0
 800e152:	9309      	str	r3, [sp, #36]	; 0x24
 800e154:	2300      	movs	r3, #0
 800e156:	9308      	str	r3, [sp, #32]
 800e158:	233f      	movs	r3, #63	; 0x3f
 800e15a:	9307      	str	r3, [sp, #28]
 800e15c:	4b0f      	ldr	r3, [pc, #60]	; (800e19c <_Z23getFont_swisop3_50_4bppv+0x88>)
 800e15e:	9306      	str	r3, [sp, #24]
 800e160:	4b0f      	ldr	r3, [pc, #60]	; (800e1a0 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	2300      	movs	r3, #0
 800e166:	9304      	str	r3, [sp, #16]
 800e168:	2300      	movs	r3, #0
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	2301      	movs	r3, #1
 800e16e:	9302      	str	r3, [sp, #8]
 800e170:	2304      	movs	r3, #4
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	230a      	movs	r3, #10
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	2332      	movs	r3, #50	; 0x32
 800e17a:	2241      	movs	r2, #65	; 0x41
 800e17c:	4909      	ldr	r1, [pc, #36]	; (800e1a4 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800e17e:	480a      	ldr	r0, [pc, #40]	; (800e1a8 <_Z23getFont_swisop3_50_4bppv+0x94>)
 800e180:	f7ff fe22 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e184:	4809      	ldr	r0, [pc, #36]	; (800e1ac <_Z23getFont_swisop3_50_4bppv+0x98>)
 800e186:	f01b fb59 	bl	802983c <atexit>
 800e18a:	4803      	ldr	r0, [pc, #12]	; (800e198 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e18c:	f01b fa9c 	bl	80296c8 <__cxa_guard_release>
    return swisop3_50_4bpp;
 800e190:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 800e192:	4618      	mov	r0, r3
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	200338f0 	.word	0x200338f0
 800e19c:	080da950 	.word	0x080da950
 800e1a0:	080daa4c 	.word	0x080daa4c
 800e1a4:	080da1bc 	.word	0x080da1bc
 800e1a8:	200338c8 	.word	0x200338c8
 800e1ac:	0800e105 	.word	0x0800e105

0800e1b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__tcf_0+0xc>)
 800e1b6:	f7ff fdad 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	200338f4 	.word	0x200338f4

0800e1c0 <_Z23getFont_verdana_10_4bppv>:
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08c      	sub	sp, #48	; 0x30
 800e1c4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e1c6:	4b1f      	ldr	r3, [pc, #124]	; (800e244 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	f3bf 8f5b 	dmb	ish
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	f003 0301 	and.w	r3, r3, #1
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	bf0c      	ite	eq
 800e1d8:	2301      	moveq	r3, #1
 800e1da:	2300      	movne	r3, #0
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d02c      	beq.n	800e23c <_Z23getFont_verdana_10_4bppv+0x7c>
 800e1e2:	4818      	ldr	r0, [pc, #96]	; (800e244 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e1e4:	f01b fa64 	bl	80296b0 <__cxa_guard_acquire>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	bf14      	ite	ne
 800e1ee:	2301      	movne	r3, #1
 800e1f0:	2300      	moveq	r3, #0
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d021      	beq.n	800e23c <_Z23getFont_verdana_10_4bppv+0x7c>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e200:	2300      	movs	r3, #0
 800e202:	9308      	str	r3, [sp, #32]
 800e204:	233f      	movs	r3, #63	; 0x3f
 800e206:	9307      	str	r3, [sp, #28]
 800e208:	4b0f      	ldr	r3, [pc, #60]	; (800e248 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e20a:	9306      	str	r3, [sp, #24]
 800e20c:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e20e:	9305      	str	r3, [sp, #20]
 800e210:	2300      	movs	r3, #0
 800e212:	9304      	str	r3, [sp, #16]
 800e214:	2300      	movs	r3, #0
 800e216:	9303      	str	r3, [sp, #12]
 800e218:	2301      	movs	r3, #1
 800e21a:	9302      	str	r3, [sp, #8]
 800e21c:	2304      	movs	r3, #4
 800e21e:	9301      	str	r3, [sp, #4]
 800e220:	2300      	movs	r3, #0
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	230a      	movs	r3, #10
 800e226:	2201      	movs	r2, #1
 800e228:	4909      	ldr	r1, [pc, #36]	; (800e250 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e22a:	480a      	ldr	r0, [pc, #40]	; (800e254 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e22c:	f7ff fdcc 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e230:	4809      	ldr	r0, [pc, #36]	; (800e258 <_Z23getFont_verdana_10_4bppv+0x98>)
 800e232:	f01b fb03 	bl	802983c <atexit>
 800e236:	4803      	ldr	r0, [pc, #12]	; (800e244 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e238:	f01b fa46 	bl	80296c8 <__cxa_guard_release>
    return verdana_10_4bpp;
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800e23e:	4618      	mov	r0, r3
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	2003391c 	.word	0x2003391c
 800e248:	080da954 	.word	0x080da954
 800e24c:	080daa50 	.word	0x080daa50
 800e250:	080da54c 	.word	0x080da54c
 800e254:	200338f4 	.word	0x200338f4
 800e258:	0800e1b1 	.word	0x0800e1b1

0800e25c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
 800e260:	4801      	ldr	r0, [pc, #4]	; (800e268 <__tcf_0+0xc>)
 800e262:	f7ff fd57 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e266:	bd80      	pop	{r7, pc}
 800e268:	20033920 	.word	0x20033920

0800e26c <_Z23getFont_verdana_12_4bppv>:
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08c      	sub	sp, #48	; 0x30
 800e270:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800e272:	4b1f      	ldr	r3, [pc, #124]	; (800e2f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	f3bf 8f5b 	dmb	ish
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	bf0c      	ite	eq
 800e284:	2301      	moveq	r3, #1
 800e286:	2300      	movne	r3, #0
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d02c      	beq.n	800e2e8 <_Z23getFont_verdana_12_4bppv+0x7c>
 800e28e:	4818      	ldr	r0, [pc, #96]	; (800e2f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e290:	f01b fa0e 	bl	80296b0 <__cxa_guard_acquire>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	bf14      	ite	ne
 800e29a:	2301      	movne	r3, #1
 800e29c:	2300      	moveq	r3, #0
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d021      	beq.n	800e2e8 <_Z23getFont_verdana_12_4bppv+0x7c>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	9308      	str	r3, [sp, #32]
 800e2b0:	233f      	movs	r3, #63	; 0x3f
 800e2b2:	9307      	str	r3, [sp, #28]
 800e2b4:	4b0f      	ldr	r3, [pc, #60]	; (800e2f4 <_Z23getFont_verdana_12_4bppv+0x88>)
 800e2b6:	9306      	str	r3, [sp, #24]
 800e2b8:	4b0f      	ldr	r3, [pc, #60]	; (800e2f8 <_Z23getFont_verdana_12_4bppv+0x8c>)
 800e2ba:	9305      	str	r3, [sp, #20]
 800e2bc:	2301      	movs	r3, #1
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9303      	str	r3, [sp, #12]
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	9302      	str	r3, [sp, #8]
 800e2c8:	2304      	movs	r3, #4
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	9300      	str	r3, [sp, #0]
 800e2d0:	230c      	movs	r3, #12
 800e2d2:	2207      	movs	r2, #7
 800e2d4:	4909      	ldr	r1, [pc, #36]	; (800e2fc <_Z23getFont_verdana_12_4bppv+0x90>)
 800e2d6:	480a      	ldr	r0, [pc, #40]	; (800e300 <_Z23getFont_verdana_12_4bppv+0x94>)
 800e2d8:	f7ff fd76 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e2dc:	4809      	ldr	r0, [pc, #36]	; (800e304 <_Z23getFont_verdana_12_4bppv+0x98>)
 800e2de:	f01b faad 	bl	802983c <atexit>
 800e2e2:	4803      	ldr	r0, [pc, #12]	; (800e2f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e2e4:	f01b f9f0 	bl	80296c8 <__cxa_guard_release>
    return verdana_12_4bpp;
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20033948 	.word	0x20033948
 800e2f4:	080da958 	.word	0x080da958
 800e2f8:	080daa54 	.word	0x080daa54
 800e2fc:	080da55c 	.word	0x080da55c
 800e300:	20033920 	.word	0x20033920
 800e304:	0800e25d 	.word	0x0800e25d

0800e308 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	4801      	ldr	r0, [pc, #4]	; (800e314 <__tcf_0+0xc>)
 800e30e:	f7ff fd01 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2003394c 	.word	0x2003394c

0800e318 <_Z23getFont_verdana_20_4bppv>:
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08c      	sub	sp, #48	; 0x30
 800e31c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e31e:	4b1f      	ldr	r3, [pc, #124]	; (800e39c <_Z23getFont_verdana_20_4bppv+0x84>)
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	f3bf 8f5b 	dmb	ish
 800e326:	b2db      	uxtb	r3, r3
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bf0c      	ite	eq
 800e330:	2301      	moveq	r3, #1
 800e332:	2300      	movne	r3, #0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d02c      	beq.n	800e394 <_Z23getFont_verdana_20_4bppv+0x7c>
 800e33a:	4818      	ldr	r0, [pc, #96]	; (800e39c <_Z23getFont_verdana_20_4bppv+0x84>)
 800e33c:	f01b f9b8 	bl	80296b0 <__cxa_guard_acquire>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	bf14      	ite	ne
 800e346:	2301      	movne	r3, #1
 800e348:	2300      	moveq	r3, #0
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d021      	beq.n	800e394 <_Z23getFont_verdana_20_4bppv+0x7c>
 800e350:	2300      	movs	r3, #0
 800e352:	930a      	str	r3, [sp, #40]	; 0x28
 800e354:	2300      	movs	r3, #0
 800e356:	9309      	str	r3, [sp, #36]	; 0x24
 800e358:	2300      	movs	r3, #0
 800e35a:	9308      	str	r3, [sp, #32]
 800e35c:	233f      	movs	r3, #63	; 0x3f
 800e35e:	9307      	str	r3, [sp, #28]
 800e360:	4b0f      	ldr	r3, [pc, #60]	; (800e3a0 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e366:	9305      	str	r3, [sp, #20]
 800e368:	2301      	movs	r3, #1
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	2301      	movs	r3, #1
 800e36e:	9303      	str	r3, [sp, #12]
 800e370:	2301      	movs	r3, #1
 800e372:	9302      	str	r3, [sp, #8]
 800e374:	2304      	movs	r3, #4
 800e376:	9301      	str	r3, [sp, #4]
 800e378:	2304      	movs	r3, #4
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	2314      	movs	r3, #20
 800e37e:	223f      	movs	r2, #63	; 0x3f
 800e380:	4909      	ldr	r1, [pc, #36]	; (800e3a8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e382:	480a      	ldr	r0, [pc, #40]	; (800e3ac <_Z23getFont_verdana_20_4bppv+0x94>)
 800e384:	f7ff fd20 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e388:	4809      	ldr	r0, [pc, #36]	; (800e3b0 <_Z23getFont_verdana_20_4bppv+0x98>)
 800e38a:	f01b fa57 	bl	802983c <atexit>
 800e38e:	4803      	ldr	r0, [pc, #12]	; (800e39c <_Z23getFont_verdana_20_4bppv+0x84>)
 800e390:	f01b f99a 	bl	80296c8 <__cxa_guard_release>
    return verdana_20_4bpp;
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800e396:	4618      	mov	r0, r3
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20033974 	.word	0x20033974
 800e3a0:	080da95c 	.word	0x080da95c
 800e3a4:	080daa58 	.word	0x080daa58
 800e3a8:	080da5c0 	.word	0x080da5c0
 800e3ac:	2003394c 	.word	0x2003394c
 800e3b0:	0800e309 	.word	0x0800e309

0800e3b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	4801      	ldr	r0, [pc, #4]	; (800e3c0 <__tcf_0+0xc>)
 800e3ba:	f7ff fcab 	bl	800dd14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20033978 	.word	0x20033978

0800e3c4 <_Z23getFont_verdana_40_4bppv>:
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08c      	sub	sp, #48	; 0x30
 800e3c8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e3ca:	4b1f      	ldr	r3, [pc, #124]	; (800e448 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f3bf 8f5b 	dmb	ish
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	bf0c      	ite	eq
 800e3dc:	2301      	moveq	r3, #1
 800e3de:	2300      	movne	r3, #0
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d02c      	beq.n	800e440 <_Z23getFont_verdana_40_4bppv+0x7c>
 800e3e6:	4818      	ldr	r0, [pc, #96]	; (800e448 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e3e8:	f01b f962 	bl	80296b0 <__cxa_guard_acquire>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	bf14      	ite	ne
 800e3f2:	2301      	movne	r3, #1
 800e3f4:	2300      	moveq	r3, #0
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d021      	beq.n	800e440 <_Z23getFont_verdana_40_4bppv+0x7c>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e400:	2300      	movs	r3, #0
 800e402:	9309      	str	r3, [sp, #36]	; 0x24
 800e404:	2300      	movs	r3, #0
 800e406:	9308      	str	r3, [sp, #32]
 800e408:	233f      	movs	r3, #63	; 0x3f
 800e40a:	9307      	str	r3, [sp, #28]
 800e40c:	4b0f      	ldr	r3, [pc, #60]	; (800e44c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e40e:	9306      	str	r3, [sp, #24]
 800e410:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	2300      	movs	r3, #0
 800e416:	9304      	str	r3, [sp, #16]
 800e418:	2300      	movs	r3, #0
 800e41a:	9303      	str	r3, [sp, #12]
 800e41c:	2301      	movs	r3, #1
 800e41e:	9302      	str	r3, [sp, #8]
 800e420:	2304      	movs	r3, #4
 800e422:	9301      	str	r3, [sp, #4]
 800e424:	2300      	movs	r3, #0
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	2328      	movs	r3, #40	; 0x28
 800e42a:	2201      	movs	r2, #1
 800e42c:	4909      	ldr	r1, [pc, #36]	; (800e454 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e42e:	480a      	ldr	r0, [pc, #40]	; (800e458 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e430:	f7ff fcca 	bl	800ddc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e434:	4809      	ldr	r0, [pc, #36]	; (800e45c <_Z23getFont_verdana_40_4bppv+0x98>)
 800e436:	f01b fa01 	bl	802983c <atexit>
 800e43a:	4803      	ldr	r0, [pc, #12]	; (800e448 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e43c:	f01b f944 	bl	80296c8 <__cxa_guard_release>
    return verdana_40_4bpp;
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800e442:	4618      	mov	r0, r3
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	200339a0 	.word	0x200339a0
 800e44c:	080daa3c 	.word	0x080daa3c
 800e450:	080daa5c 	.word	0x080daa5c
 800e454:	080da934 	.word	0x080da934
 800e458:	20033978 	.word	0x20033978
 800e45c:	0800e3b5 	.word	0x0800e3b5

0800e460 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	4618      	mov	r0, r3
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e482:	bf00      	nop
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e4ae:	bf00      	nop
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e4ba:	b480      	push	{r7}
 800e4bc:	b083      	sub	sp, #12
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e4d2:	b480      	push	{r7}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
    {
    }
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
    {
    }
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
    {
 800e504:	4a04      	ldr	r2, [pc, #16]	; (800e518 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	601a      	str	r2, [r3, #0]
    }
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	0802f328 	.word	0x0802f328

0800e51c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
    }
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff ffe9 	bl	800e4fc <_ZN8touchgfx15UIEventListenerD1Ev>
 800e52a:	2104      	movs	r1, #4
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f01b f8bd 	bl	80296ac <_ZdlPvj>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
    {
    }
 800e544:	bf00      	nop
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	683a      	ldr	r2, [r7, #0]
 800e576:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e57a:	6810      	ldr	r0, [r2, #0]
 800e57c:	6851      	ldr	r1, [r2, #4]
 800e57e:	c303      	stmia	r3!, {r0, r1}
    }
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
    {
 800e594:	4a04      	ldr	r2, [pc, #16]	; (800e5a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	601a      	str	r2, [r3, #0]
    }
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	0802f310 	.word	0x0802f310

0800e5ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
    }
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff ffe9 	bl	800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f01b f875 	bl	80296ac <_ZdlPvj>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0
    {
        return instance;
 800e5d0:	4b03      	ldr	r3, [pc, #12]	; (800e5e0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
    }
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	2003c26c 	.word	0x2003c26c

0800e5e4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e5e8:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d008      	beq.n	800e606 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e5f4:	4b08      	ldr	r3, [pc, #32]	; (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e5fe:	4b06      	ldr	r3, [pc, #24]	; (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e604:	e002      	b.n	800e60c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e606:	4b04      	ldr	r3, [pc, #16]	; (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	689b      	ldr	r3, [r3, #8]
    }
 800e60c:	4618      	mov	r0, r3
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	2003c26c 	.word	0x2003c26c

0800e61c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e624:	4a07      	ldr	r2, [pc, #28]	; (800e644 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	721a      	strb	r2, [r3, #8]
    {
    }
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	0802f2ec 	.word	0x0802f2ec

0800e648 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
    {
 800e650:	4a04      	ldr	r2, [pc, #16]	; (800e664 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	601a      	str	r2, [r3, #0]
    }
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	0802f2ec 	.word	0x0802f2ec

0800e668 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
    }
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff ffe9 	bl	800e648 <_ZN8touchgfx10TransitionD1Ev>
 800e676:	210c      	movs	r1, #12
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f01b f817 	bl	80296ac <_ZdlPvj>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4618      	mov	r0, r3
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
    {
    }
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    {
    }
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
    {
    }
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e6cc:	f00c f9d0 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f00c fd72 	bl	801b1bc <_ZN8touchgfx11Application10invalidateEv>
    }
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	683a      	ldr	r2, [r7, #0]
 800e6ee:	605a      	str	r2, [r3, #4]
    }
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	4a05      	ldr	r2, [pc, #20]	; (800e71c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff fef5 	bl	800e4fc <_ZN8touchgfx15UIEventListenerD1Ev>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	0803037c 	.word	0x0803037c

0800e720 <_ZN8touchgfx11ApplicationD0Ev>:
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ffe7 	bl	800e6fc <_ZN8touchgfx11ApplicationD1Ev>
 800e72e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f01a ffba 	bl	80296ac <_ZdlPvj>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4618      	mov	r0, r3
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	f00c f9b0 	bl	801aab4 <_ZN8touchgfx11ApplicationC1Ev>
 800e754:	4a09      	ldr	r2, [pc, #36]	; (800e77c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a04      	ldr	r2, [pc, #16]	; (800e780 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e76e:	6013      	str	r3, [r2, #0]
    }
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	0802f2a0 	.word	0x0802f2a0
 800e780:	2003c2c0 	.word	0x2003c2c0

0800e784 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f804 	bl	800e79a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e792:	bf00      	nop
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b082      	sub	sp, #8
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00f      	beq.n	800e7cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	330c      	adds	r3, #12
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4610      	mov	r0, r2
 800e7c0:	4798      	blx	r3
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e000      	b.n	800e7ce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00e      	beq.n	800e7f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800e7f0:	bf00      	nop
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	601a      	str	r2, [r3, #0]
    }
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	4a05      	ldr	r2, [pc, #20]	; (800e834 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4618      	mov	r0, r3
 800e826:	f7ff ff69 	bl	800e6fc <_ZN8touchgfx11ApplicationD1Ev>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4618      	mov	r0, r3
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	0802f2a0 	.word	0x0802f2a0

0800e838 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff ffe7 	bl	800e814 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f01a ff2e 	bl	80296ac <_ZdlPvj>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	4a08      	ldr	r2, [pc, #32]	; (800e888 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e870:	4618      	mov	r0, r3
 800e872:	f000 facb 	bl	800ee0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff ffcb 	bl	800e814 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	0802f23c 	.word	0x0802f23c

0800e88c <_ZN23FrontendApplicationBaseD0Ev>:
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff ffe1 	bl	800e85c <_ZN23FrontendApplicationBaseD1Ev>
 800e89a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f01a ff04 	bl	80296ac <_ZdlPvj>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 f87c 	bl	800e9b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	721a      	strb	r2, [r3, #8]
    }
 800e8d2:	bf00      	nop
 800e8d4:	370c      	adds	r7, #12
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e8de:	b480      	push	{r7}
 800e8e0:	b083      	sub	sp, #12
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	605a      	str	r2, [r3, #4]
    }
 800e8ee:	bf00      	nop
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
	...

0800e8fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff ff1a 	bl	800e744 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e910:	4a13      	ldr	r2, [pc, #76]	; (800e960 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	601a      	str	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 f89f 	bl	800ea60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e932:	f7ff fe4b 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 800e936:	4603      	mov	r3, r0
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	3208      	adds	r2, #8
 800e93c:	6812      	ldr	r2, [r2, #0]
 800e93e:	2100      	movs	r1, #0
 800e940:	4618      	mov	r0, r3
 800e942:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e944:	2000      	movs	r0, #0
 800e946:	f003 f885 	bl	8011a54 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e94a:	f7ff fe4b 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 800e94e:	4603      	mov	r3, r0
 800e950:	4618      	mov	r0, r3
 800e952:	f013 fd58 	bl	8022406 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
}
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	0802f23c 	.word	0x0802f23c

0800e964 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4618      	mov	r0, r3
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff ffe9 	bl	800e964 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	605a      	str	r2, [r3, #4]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	3308      	adds	r3, #8
 800e9a0:	3208      	adds	r2, #8
 800e9a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9a6:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b089      	sub	sp, #36	; 0x24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800e9c2:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800e9c4:	61bb      	str	r3, [r7, #24]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	61fb      	str	r3, [r7, #28]
 800e9ca:	f107 0008 	add.w	r0, r7, #8
 800e9ce:	f107 0318 	add.w	r3, r7, #24
 800e9d2:	cb0c      	ldmia	r3, {r2, r3}
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	f000 f85f 	bl	800ea98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e9da:	f107 0308 	add.w	r3, r7, #8
 800e9de:	4619      	mov	r1, r3
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f7ff ffcb 	bl	800e97c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e9e6:	f107 0308 	add.w	r3, r7, #8
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 fa0e 	bl	800ee0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800e9fc:	bf00      	nop
 800e9fe:	3724      	adds	r7, #36	; 0x24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd90      	pop	{r4, r7, pc}
 800ea04:	0800ea09 	.word	0x0800ea09

0800ea08 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	4b04      	ldr	r3, [pc, #16]	; (800ea38 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800ea28:	4804      	ldr	r0, [pc, #16]	; (800ea3c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800ea2a:	f000 f867 	bl	800eafc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	2003c2b4 	.word	0x2003c2b4
 800ea3c:	2003c2b0 	.word	0x2003c2b0

0800ea40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	4a04      	ldr	r2, [pc, #16]	; (800ea5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	0802f310 	.word	0x0802f310

0800ea60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff ffe8 	bl	800ea40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ea70:	4a08      	ldr	r2, [pc, #32]	; (800ea94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	605a      	str	r2, [r3, #4]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	609a      	str	r2, [r3, #8]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	60da      	str	r2, [r3, #12]
    {
    }
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	0802f288 	.word	0x0802f288

0800ea98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff ffc8 	bl	800ea40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800eab0:	4a08      	ldr	r2, [pc, #32]	; (800ead4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	605a      	str	r2, [r3, #4]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3308      	adds	r3, #8
 800eac0:	463a      	mov	r2, r7
 800eac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eac6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	0802f288 	.word	0x0802f288

0800ead8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff fd9a 	bl	800e61c <_ZN8touchgfx10TransitionC1Ev>
 800eae8:	4a03      	ldr	r2, [pc, #12]	; (800eaf8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	0802f218 	.word	0x0802f218

0800eafc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b08f      	sub	sp, #60	; 0x3c
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
 800eb08:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	689a      	ldr	r2, [r3, #8]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3320      	adds	r3, #32
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4610      	mov	r0, r2
 800eb1a:	4798      	blx	r3
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	f243 7263 	movw	r2, #14179	; 0x3763
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d805      	bhi.n	800eb32 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800eb26:	4b7f      	ldr	r3, [pc, #508]	; (800ed24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800eb28:	4a7f      	ldr	r2, [pc, #508]	; (800ed28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eb2a:	21a3      	movs	r1, #163	; 0xa3
 800eb2c:	487f      	ldr	r0, [pc, #508]	; (800ed2c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eb2e:	f01a fe67 	bl	8029800 <__assert_func>
 800eb32:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3320      	adds	r3, #32
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4610      	mov	r0, r2
 800eb44:	4798      	blx	r3
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b0f      	cmp	r3, #15
 800eb4a:	d805      	bhi.n	800eb58 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800eb4c:	4b78      	ldr	r3, [pc, #480]	; (800ed30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800eb4e:	4a76      	ldr	r2, [pc, #472]	; (800ed28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eb50:	21a4      	movs	r1, #164	; 0xa4
 800eb52:	4876      	ldr	r0, [pc, #472]	; (800ed2c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eb54:	f01a fe54 	bl	8029800 <__assert_func>
 800eb58:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	68da      	ldr	r2, [r3, #12]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3320      	adds	r3, #32
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4610      	mov	r0, r2
 800eb6a:	4798      	blx	r3
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b0b      	cmp	r3, #11
 800eb70:	d805      	bhi.n	800eb7e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800eb72:	4b70      	ldr	r3, [pc, #448]	; (800ed34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800eb74:	4a6c      	ldr	r2, [pc, #432]	; (800ed28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eb76:	21a5      	movs	r1, #165	; 0xa5
 800eb78:	486c      	ldr	r0, [pc, #432]	; (800ed2c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eb7a:	f01a fe41 	bl	8029800 <__assert_func>
 800eb7e:	bf00      	nop
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	627b      	str	r3, [r7, #36]	; 0x24
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800eb8c:	f00b ff70 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f00b ff72 	bl	801aa7c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d008      	beq.n	800ebb2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	6a3b      	ldr	r3, [r7, #32]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	330c      	adds	r3, #12
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4610      	mov	r0, r2
 800ebb0:	4798      	blx	r3
    if (*currentTrans)
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d007      	beq.n	800ebca <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	6a3b      	ldr	r3, [r7, #32]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	4798      	blx	r3
    if (*currentScreen)
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d008      	beq.n	800ebe4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800ebd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	3314      	adds	r3, #20
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	4798      	blx	r3
    if (*currentPresenter)
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d008      	beq.n	800ebfe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	4798      	blx	r3
    if (*currentScreen)
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d007      	beq.n	800ec16 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4610      	mov	r0, r2
 800ec14:	4798      	blx	r3
    if (*currentPresenter)
 800ec16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d008      	beq.n	800ec30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800ec1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3308      	adds	r3, #8
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
}
 800ec30:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	2100      	movs	r1, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f87d 	bl	800ed38 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4619      	mov	r1, r3
 800ec42:	200c      	movs	r0, #12
 800ec44:	f7ff fc0c 	bl	800e460 <_ZnwjPv>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7ff ff44 	bl	800ead8 <_ZN8touchgfx12NoTransitionC1Ev>
 800ec50:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 f880 	bl	800ed5e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4619      	mov	r1, r3
 800ec62:	f243 7064 	movw	r0, #14180	; 0x3764
 800ec66:	f7ff fbfb 	bl	800e460 <_ZnwjPv>
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f003 f943 	bl	8011ef8 <_ZN8MainViewC1Ev>
 800ec72:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f000 f882 	bl	800ed84 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800ec80:	4603      	mov	r3, r0
 800ec82:	4619      	mov	r1, r3
 800ec84:	2010      	movs	r0, #16
 800ec86:	f7ff fbeb 	bl	800e460 <_ZnwjPv>
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f003 f8da 	bl	8011e48 <_ZN13MainPresenterC1ER8MainView>
 800ec94:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec9a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eca0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eca6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d002      	beq.n	800ecb4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ecae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	e000      	b.n	800ecb6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ecba:	f7ff fd9d 	bl	800e7f8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7ff fe0a 	bl	800e8de <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 f86b 	bl	800edaa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	61fb      	str	r3, [r7, #28]
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	61bb      	str	r3, [r7, #24]
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecde:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	330c      	adds	r3, #12
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	69f8      	ldr	r0, [r7, #28]
 800ecea:	4798      	blx	r3
    newPresenter->activate();
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	69b8      	ldr	r0, [r7, #24]
 800ecf4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ecf6:	6979      	ldr	r1, [r7, #20]
 800ecf8:	69f8      	ldr	r0, [r7, #28]
 800ecfa:	f00d fb61 	bl	801c3c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3310      	adds	r3, #16
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6978      	ldr	r0, [r7, #20]
 800ed08:	4798      	blx	r3
    newTransition->invalidate();
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3314      	adds	r3, #20
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6978      	ldr	r0, [r7, #20]
 800ed14:	4798      	blx	r3
}
 800ed16:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	373c      	adds	r7, #60	; 0x3c
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd90      	pop	{r4, r7, pc}
 800ed22:	bf00      	nop
 800ed24:	0802cb20 	.word	0x0802cb20
 800ed28:	0802cbb0 	.word	0x0802cbb0
 800ed2c:	0802ccb0 	.word	0x0802ccb0
 800ed30:	0802ccf4 	.word	0x0802ccf4
 800ed34:	0802cd98 	.word	0x0802cd98

0800ed38 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	3324      	adds	r3, #36	; 0x24
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	887a      	ldrh	r2, [r7, #2]
 800ed4e:	4611      	mov	r1, r2
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	4798      	blx	r3
 800ed54:	4603      	mov	r3, r0
    }
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b082      	sub	sp, #8
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	460b      	mov	r3, r1
 800ed68:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3324      	adds	r3, #36	; 0x24
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	887a      	ldrh	r2, [r7, #2]
 800ed74:	4611      	mov	r1, r2
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	4798      	blx	r3
 800ed7a:	4603      	mov	r3, r0
    }
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3324      	adds	r3, #36	; 0x24
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	887a      	ldrh	r2, [r7, #2]
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	4798      	blx	r3
 800eda0:	4603      	mov	r3, r0
    }
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800edaa:	b480      	push	{r7}
 800edac:	b083      	sub	sp, #12
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800edba:	bf00      	nop
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
	...

0800edc8 <_ZN8touchgfx12NoTransitionD1Ev>:
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	4a05      	ldr	r2, [pc, #20]	; (800ede8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fc35 	bl	800e648 <_ZN8touchgfx10TransitionD1Ev>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0802f218 	.word	0x0802f218

0800edec <_ZN8touchgfx12NoTransitionD0Ev>:
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7ff ffe7 	bl	800edc8 <_ZN8touchgfx12NoTransitionD1Ev>
 800edfa:	210c      	movs	r1, #12
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f01a fc55 	bl	80296ac <_ZdlPvj>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	4a05      	ldr	r2, [pc, #20]	; (800ee2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	601a      	str	r2, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fbb5 	bl	800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0802f288 	.word	0x0802f288

0800ee30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7ff ffe7 	bl	800ee0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ee3e:	2110      	movs	r1, #16
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f01a fc33 	bl	80296ac <_ZdlPvj>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	68d2      	ldr	r2, [r2, #12]
 800ee60:	1052      	asrs	r2, r2, #1
 800ee62:	1899      	adds	r1, r3, r2
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d102      	bne.n	800ee76 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	e00a      	b.n	800ee8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	68d2      	ldr	r2, [r2, #12]
 800ee7e:	1052      	asrs	r2, r2, #1
 800ee80:	4413      	add	r3, r2
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	6892      	ldr	r2, [r2, #8]
 800ee88:	4413      	add	r3, r2
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	4798      	blx	r3
    }
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d010      	beq.n	800eeca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d107      	bne.n	800eec0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800eebc:	2301      	movs	r3, #1
 800eebe:	e000      	b.n	800eec2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800eec0:	2300      	movs	r3, #0
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d001      	beq.n	800eeca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e000      	b.n	800eecc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800eeca:	2300      	movs	r3, #0
    }
 800eecc:	4618      	mov	r0, r3
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	801a      	strh	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	805a      	strh	r2, [r3, #2]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	809a      	strh	r2, [r3, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	80da      	strh	r2, [r3, #6]
    {
    }
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800ef10:	4a14      	ldr	r2, [pc, #80]	; (800ef64 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff ffdc 	bl	800eed8 <_ZN8touchgfx4RectC1Ev>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	330c      	adds	r3, #12
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7ff ffd7 	bl	800eed8 <_ZN8touchgfx4RectC1Ev>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	615a      	str	r2, [r3, #20]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	619a      	str	r2, [r3, #24]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	61da      	str	r2, [r3, #28]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	841a      	strh	r2, [r3, #32]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	845a      	strh	r2, [r3, #34]	; 0x22
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	080303c8 	.word	0x080303c8

0800ef68 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
    {
 800ef70:	4a04      	ldr	r2, [pc, #16]	; (800ef84 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
    }
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	080303c8 	.word	0x080303c8

0800ef88 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
    }
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe9 	bl	800ef68 <_ZN8touchgfx8DrawableD1Ev>
 800ef96:	2128      	movs	r1, #40	; 0x28
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f01a fb87 	bl	80296ac <_ZdlPvj>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	460b      	mov	r3, r1
 800efb2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	887a      	ldrh	r2, [r7, #2]
 800efb8:	809a      	strh	r2, [r3, #4]
    }
 800efba:	bf00      	nop
 800efbc:	370c      	adds	r7, #12
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800efc6:	b480      	push	{r7}
 800efc8:	b083      	sub	sp, #12
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	460b      	mov	r3, r1
 800efd0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	887a      	ldrh	r2, [r7, #2]
 800efd6:	80da      	strh	r2, [r3, #6]
    }
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	887a      	ldrh	r2, [r7, #2]
 800eff4:	811a      	strh	r2, [r3, #8]
    }
 800eff6:	bf00      	nop
 800eff8:	370c      	adds	r7, #12
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f002:	b480      	push	{r7}
 800f004:	b083      	sub	sp, #12
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	460b      	mov	r3, r1
 800f00c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	887a      	ldrh	r2, [r7, #2]
 800f012:	815a      	strh	r2, [r3, #10]
    }
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
    {
    }
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f03e:	bf00      	nop
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f04a:	b480      	push	{r7}
 800f04c:	b083      	sub	sp, #12
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f076:	b480      	push	{r7}
 800f078:	b083      	sub	sp, #12
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
    {
    }
 800f07e:	bf00      	nop
 800f080:	370c      	adds	r7, #12
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b082      	sub	sp, #8
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	460b      	mov	r3, r1
 800f094:	807b      	strh	r3, [r7, #2]
 800f096:	4613      	mov	r3, r2
 800f098:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3354      	adds	r3, #84	; 0x54
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	8879      	ldrh	r1, [r7, #2]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f0aa:	b292      	uxth	r2, r2
 800f0ac:	1a8a      	subs	r2, r1, r2
 800f0ae:	b292      	uxth	r2, r2
 800f0b0:	b210      	sxth	r0, r2
 800f0b2:	8839      	ldrh	r1, [r7, #0]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f0ba:	b292      	uxth	r2, r2
 800f0bc:	1a8a      	subs	r2, r1, r2
 800f0be:	b292      	uxth	r2, r2
 800f0c0:	b212      	sxth	r2, r2
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	4798      	blx	r3
    }
 800f0c8:	bf00      	nop
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff ff14 	bl	800ef08 <_ZN8touchgfx8DrawableC1Ev>
 800f0e0:	4a05      	ldr	r2, [pc, #20]	; (800f0f8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0802fcf0 	.word	0x0802fcf0

0800f0fc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	4a05      	ldr	r2, [pc, #20]	; (800f134 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff ff1f 	bl	800ef68 <_ZN8touchgfx8DrawableD1Ev>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	0802fcf0 	.word	0x0802fcf0

0800f138 <_ZN8touchgfx9ContainerD0Ev>:
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ffe7 	bl	800f114 <_ZN8touchgfx9ContainerD1Ev>
 800f146:	212c      	movs	r1, #44	; 0x2c
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f01a faaf 	bl	80296ac <_ZdlPvj>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
        : color(col)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	601a      	str	r2, [r3, #0]
    }
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4618      	mov	r0, r3
 800f16c:	370c      	adds	r7, #12
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800f176:	b480      	push	{r7}
 800f178:	b085      	sub	sp, #20
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	60f8      	str	r0, [r7, #12]
 800f17e:	4608      	mov	r0, r1
 800f180:	4611      	mov	r1, r2
 800f182:	461a      	mov	r2, r3
 800f184:	4603      	mov	r3, r0
 800f186:	817b      	strh	r3, [r7, #10]
 800f188:	460b      	mov	r3, r1
 800f18a:	813b      	strh	r3, [r7, #8]
 800f18c:	4613      	mov	r3, r2
 800f18e:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	897a      	ldrh	r2, [r7, #10]
 800f194:	801a      	strh	r2, [r3, #0]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	893a      	ldrh	r2, [r7, #8]
 800f19a:	805a      	strh	r2, [r3, #2]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	88fa      	ldrh	r2, [r7, #6]
 800f1a0:	809a      	strh	r2, [r3, #4]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	8b3a      	ldrh	r2, [r7, #24]
 800f1a6:	80da      	strh	r2, [r3, #6]
    {
    }
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
    virtual void invalidateContent() const
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
        if (visible)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d005      	beq.n	800f1d4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
            invalidate();
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3314      	adds	r3, #20
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	4798      	blx	r3
    }
 800f1d4:	bf00      	nop
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
        return 0;
 800f1e4:	2300      	movs	r3, #0
    }
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b084      	sub	sp, #16
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	60f8      	str	r0, [r7, #12]
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	461a      	mov	r2, r3
 800f200:	4603      	mov	r3, r0
 800f202:	817b      	strh	r3, [r7, #10]
 800f204:	460b      	mov	r3, r1
 800f206:	813b      	strh	r3, [r7, #8]
 800f208:	4613      	mov	r3, r2
 800f20a:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800f20c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f210:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f214:	4619      	mov	r1, r3
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 f80c 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800f21c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f224:	4619      	mov	r1, r3
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 f822 	bl	800f270 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	460b      	mov	r3, r1
 800f23e:	807b      	strh	r3, [r7, #2]
 800f240:	4613      	mov	r3, r2
 800f242:	803b      	strh	r3, [r7, #0]
        setX(x);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3330      	adds	r3, #48	; 0x30
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f250:	4611      	mov	r1, r2
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	4798      	blx	r3
        setY(y);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3334      	adds	r3, #52	; 0x34
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f262:	4611      	mov	r1, r2
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	4798      	blx	r3
    }
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	807b      	strh	r3, [r7, #2]
 800f27c:	4613      	mov	r3, r2
 800f27e:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3338      	adds	r3, #56	; 0x38
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f28c:	4611      	mov	r1, r2
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	4798      	blx	r3
        setHeight(height);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	333c      	adds	r3, #60	; 0x3c
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f29e:	4611      	mov	r1, r2
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	4798      	blx	r3
    }
 800f2a4:	bf00      	nop
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
        return visible;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
        return touchable;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ee:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2f6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2fe:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f7ff ffe1 	bl	800f2e0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	601a      	str	r2, [r3, #0]
    }
 800f32c:	bf00      	nop
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	607b      	str	r3, [r7, #4]
 800f33e:	460b      	mov	r3, r1
 800f340:	817b      	strh	r3, [r7, #10]
 800f342:	4613      	mov	r3, r2
 800f344:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff ffaf 	bl	800f2ac <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d008      	beq.n	800f366 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	4618      	mov	r0, r3
 800f358:	f7ff ffb5 	bl	800f2c6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f362:	2301      	movs	r3, #1
 800f364:	e000      	b.n	800f368 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f366:	2300      	movs	r3, #0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	601a      	str	r2, [r3, #0]
        }
    }
 800f372:	bf00      	nop
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
	...

0800f37c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fdbe 	bl	800ef08 <_ZN8touchgfx8DrawableC1Ev>
 800f38c:	4a03      	ldr	r2, [pc, #12]	; (800f39c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	0802f474 	.word	0x0802f474

0800f3a0 <_ZN8touchgfx6WidgetD1Ev>:
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	4a05      	ldr	r2, [pc, #20]	; (800f3c0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	601a      	str	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fdd9 	bl	800ef68 <_ZN8touchgfx8DrawableD1Ev>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	0802f474 	.word	0x0802f474

0800f3c4 <_ZN8touchgfx6WidgetD0Ev>:
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ffe7 	bl	800f3a0 <_ZN8touchgfx6WidgetD1Ev>
 800f3d2:	2128      	movs	r1, #40	; 0x28
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f01a f969 	bl	80296ac <_ZdlPvj>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	2326      	movs	r3, #38	; 0x26
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	f01a fa8f 	bl	8029918 <memset>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff ffbd 	bl	800f37c <_ZN8touchgfx6WidgetC1Ev>
 800f402:	4a09      	ldr	r2, [pc, #36]	; (800f428 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	601a      	str	r2, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	22ff      	movs	r2, #255	; 0xff
 800f40c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	3328      	adds	r3, #40	; 0x28
 800f414:	2100      	movs	r1, #0
 800f416:	4618      	mov	r0, r3
 800f418:	f7ff fe9e 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	080301b4 	.word	0x080301b4

0800f42c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	4a05      	ldr	r2, [pc, #20]	; (800f468 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff ffa1 	bl	800f3a0 <_ZN8touchgfx6WidgetD1Ev>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	080301b4 	.word	0x080301b4

0800f46c <_ZN8touchgfx3BoxD0Ev>:
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ffe7 	bl	800f448 <_ZN8touchgfx3BoxD1Ev>
 800f47a:	212c      	movs	r1, #44	; 0x2c
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f01a f915 	bl	80296ac <_ZdlPvj>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff ffa4 	bl	800f3e4 <_ZN8touchgfx3BoxC1Ev>
 800f49c:	4a08      	ldr	r2, [pc, #32]	; (800f4c0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	332c      	adds	r3, #44	; 0x2c
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff fe55 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	080302ac 	.word	0x080302ac

0800f4c4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	887a      	ldrh	r2, [r7, #2]
 800f4f0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800f4f2:	bf00      	nop
 800f4f4:	370c      	adds	r7, #12
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
	...

0800f500 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	460b      	mov	r3, r1
 800f50a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f50c:	4a06      	ldr	r2, [pc, #24]	; (800f528 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	601a      	str	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	887a      	ldrh	r2, [r7, #2]
 800f516:	809a      	strh	r2, [r3, #4]
    }
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4618      	mov	r0, r3
 800f51c:	370c      	adds	r7, #12
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	0802f1b0 	.word	0x0802f1b0

0800f52c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4618      	mov	r0, r3
 800f538:	2326      	movs	r3, #38	; 0x26
 800f53a:	461a      	mov	r2, r3
 800f53c:	2100      	movs	r1, #0
 800f53e:	f01a f9eb 	bl	8029918 <memset>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4618      	mov	r0, r3
 800f546:	f7ff ff19 	bl	800f37c <_ZN8touchgfx6WidgetC1Ev>
 800f54a:	4a16      	ldr	r2, [pc, #88]	; (800f5a4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	3328      	adds	r3, #40	; 0x28
 800f554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f558:	4618      	mov	r0, r3
 800f55a:	f7ff ffd1 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	3330      	adds	r3, #48	; 0x30
 800f562:	2100      	movs	r1, #0
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff fdf7 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	869a      	strh	r2, [r3, #52]	; 0x34
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	22ff      	movs	r2, #255	; 0xff
 800f574:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	333c      	adds	r3, #60	; 0x3c
 800f594:	4618      	mov	r0, r3
 800f596:	f000 f8f2 	bl	800f77e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08030124 	.word	0x08030124

0800f5a8 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6178      	str	r0, [r7, #20]
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff fd11 	bl	800efe4 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3384      	adds	r3, #132	; 0x84
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	697c      	ldr	r4, [r7, #20]
 800f5cc:	463a      	mov	r2, r7
 800f5ce:	6979      	ldr	r1, [r7, #20]
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	4798      	blx	r3
 800f5d4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f5d8:	463a      	mov	r2, r7
 800f5da:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f5e0:	bf00      	nop
 800f5e2:	371c      	adds	r7, #28
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd90      	pop	{r4, r7, pc}

0800f5e8 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6178      	str	r0, [r7, #20]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fd00 	bl	800f002 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	3384      	adds	r3, #132	; 0x84
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	697c      	ldr	r4, [r7, #20]
 800f60c:	463a      	mov	r2, r7
 800f60e:	6979      	ldr	r1, [r7, #20]
 800f610:	4610      	mov	r0, r2
 800f612:	4798      	blx	r3
 800f614:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f618:	463a      	mov	r2, r7
 800f61a:	ca07      	ldmia	r2, {r0, r1, r2}
 800f61c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f620:	bf00      	nop
 800f622:	371c      	adds	r7, #28
 800f624:	46bd      	mov	sp, r7
 800f626:	bd90      	pop	{r4, r7, pc}

0800f628 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff fc50 	bl	800eed8 <_ZN8touchgfx4RectC1Ev>
    }
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	78fa      	ldrb	r2, [r7, #3]
 800f650:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800f654:	bf00      	nop
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800f66c:	687e      	ldr	r6, [r7, #4]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3334      	adds	r3, #52	; 0x34
 800f674:	681c      	ldr	r4, [r3, #0]
 800f676:	887d      	ldrh	r5, [r7, #2]
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f869 	bl	800f750 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f682:	4b1d      	ldr	r3, [pc, #116]	; (800f6f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d105      	bne.n	800f696 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800f68a:	4b1c      	ldr	r3, [pc, #112]	; (800f6fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f68c:	4a1c      	ldr	r2, [pc, #112]	; (800f700 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f68e:	216c      	movs	r1, #108	; 0x6c
 800f690:	481c      	ldr	r0, [pc, #112]	; (800f704 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f692:	f01a f8b5 	bl	8029800 <__assert_func>
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	889a      	ldrh	r2, [r3, #4]
 800f69e:	4b1a      	ldr	r3, [pc, #104]	; (800f708 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	bf34      	ite	cc
 800f6a6:	2301      	movcc	r3, #1
 800f6a8:	2300      	movcs	r3, #0
 800f6aa:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d105      	bne.n	800f6bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800f6b0:	4b16      	ldr	r3, [pc, #88]	; (800f70c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800f6b2:	4a13      	ldr	r2, [pc, #76]	; (800f700 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f6b4:	216d      	movs	r1, #109	; 0x6d
 800f6b6:	4813      	ldr	r0, [pc, #76]	; (800f704 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f6b8:	f01a f8a2 	bl	8029800 <__assert_func>
 800f6bc:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800f6be:	4b14      	ldr	r3, [pc, #80]	; (800f710 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	; (800f6f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f6c4:	6819      	ldr	r1, [r3, #0]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	889b      	ldrh	r3, [r3, #4]
 800f6ca:	005b      	lsls	r3, r3, #1
 800f6cc:	440b      	add	r3, r1
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	4413      	add	r3, r2
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	322c      	adds	r2, #44	; 0x2c
 800f6da:	6812      	ldr	r2, [r2, #0]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	4790      	blx	r2
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	1aeb      	subs	r3, r5, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	b21b      	sxth	r3, r3
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	47a0      	blx	r4
    }
 800f6ee:	bf00      	nop
 800f6f0:	3714      	adds	r7, #20
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	2003c2c4 	.word	0x2003c2c4
 800f6fc:	0802ce3c 	.word	0x0802ce3c
 800f700:	0802ce80 	.word	0x0802ce80
 800f704:	0802cebc 	.word	0x0802cebc
 800f708:	2003c2c8 	.word	0x2003c2c8
 800f70c:	0802cf00 	.word	0x0802cf00
 800f710:	2003c2cc 	.word	0x2003c2cc

0800f714 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	460b      	mov	r3, r1
 800f71e:	807b      	strh	r3, [r7, #2]
 800f720:	4613      	mov	r3, r2
 800f722:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3330      	adds	r3, #48	; 0x30
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f732:	4610      	mov	r0, r2
 800f734:	4798      	blx	r3
        setBaselineY(baselineY);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	3364      	adds	r3, #100	; 0x64
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f742:	4611      	mov	r1, r2
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	4798      	blx	r3
    }
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3328      	adds	r3, #40	; 0x28
    }
 800f75c:	4618      	mov	r0, r3
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f770:	2300      	movs	r3, #0
    }
 800f772:	4618      	mov	r0, r3
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af02      	add	r7, sp, #8
 800f784:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f04f 33ff 	mov.w	r3, #4294967295
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	f04f 33ff 	mov.w	r3, #4294967295
 800f792:	2200      	movs	r2, #0
 800f794:	2100      	movs	r1, #0
 800f796:	f7ff fcee 	bl	800f176 <_ZN8touchgfx4RectC1Essss>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	609a      	str	r2, [r3, #8]
        {
        }
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
	...

0800f7ac <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	4a08      	ldr	r2, [pc, #32]	; (800f7d8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	3328      	adds	r3, #40	; 0x28
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe faca 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7ff fdea 	bl	800f3a0 <_ZN8touchgfx6WidgetD1Ev>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	08030124 	.word	0x08030124

0800f7dc <_ZN8touchgfx8TextAreaD0Ev>:
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ffe1 	bl	800f7ac <_ZN8touchgfx8TextAreaD1Ev>
 800f7ea:	2148      	movs	r1, #72	; 0x48
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f019 ff5d 	bl	80296ac <_ZdlPvj>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
        : TextArea()
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4618      	mov	r0, r3
 800f808:	f7ff fe90 	bl	800f52c <_ZN8touchgfx8TextAreaC1Ev>
 800f80c:	4a03      	ldr	r2, [pc, #12]	; (800f81c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	601a      	str	r2, [r3, #0]
    {
    }
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	0803021c 	.word	0x0803021c

0800f820 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f7ff ffa7 	bl	800f77e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	4a05      	ldr	r2, [pc, #20]	; (800f858 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff ffaf 	bl	800f7ac <_ZN8touchgfx8TextAreaD1Ev>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	0803021c 	.word	0x0803021c

0800f85c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff ffe7 	bl	800f838 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f86a:	2148      	movs	r1, #72	; 0x48
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f019 ff1d 	bl	80296ac <_ZdlPvj>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff ffb8 	bl	800f7fc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800f88c:	4a05      	ldr	r2, [pc, #20]	; (800f8a4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	0802f3e4 	.word	0x0802f3e4

0800f8a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b095      	sub	sp, #84	; 0x54
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	6178      	str	r0, [r7, #20]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff fc00 	bl	800f0d0 <_ZN8touchgfx9ContainerC1Ev>
 800f8d0:	4a71      	ldr	r2, [pc, #452]	; (800fa98 <_ZN12alertBarBaseC1Ev+0x1d8>)
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	332c      	adds	r3, #44	; 0x2c
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff fdd6 	bl	800f48c <_ZN8touchgfx13BoxWithBorderC1Ev>
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	3360      	adds	r3, #96	; 0x60
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff ffc9 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff fb77 	bl	800efe4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	213c      	movs	r1, #60	; 0x3c
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff fb81 	bl	800f002 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800f906:	233c      	movs	r3, #60	; 0x3c
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f90e:	2200      	movs	r2, #0
 800f910:	2100      	movs	r1, #0
 800f912:	f7ff fc6e 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f91c:	23ff      	movs	r3, #255	; 0xff
 800f91e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800f922:	2300      	movs	r3, #0
 800f924:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800f928:	2300      	movs	r3, #0
 800f92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f92e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f932:	041b      	lsls	r3, r3, #16
 800f934:	461a      	mov	r2, r3
 800f936:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f93a:	021b      	lsls	r3, r3, #8
 800f93c:	431a      	orrs	r2, r3
 800f93e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f942:	4313      	orrs	r3, r2
 800f944:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f94c:	4611      	mov	r1, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff fc02 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f956:	4619      	mov	r1, r3
 800f958:	4620      	mov	r0, r4
 800f95a:	f7ff fd67 	bl	800f42c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f964:	2300      	movs	r3, #0
 800f966:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800f96a:	2300      	movs	r3, #0
 800f96c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f970:	2300      	movs	r3, #0
 800f972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f976:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f97a:	041b      	lsls	r3, r3, #16
 800f97c:	461a      	mov	r2, r3
 800f97e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f982:	021b      	lsls	r3, r3, #8
 800f984:	431a      	orrs	r2, r3
 800f986:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f98a:	4313      	orrs	r3, r2
 800f98c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f994:	4611      	mov	r1, r2
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff fbde 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800f99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99e:	4619      	mov	r1, r3
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f7ff fd8f 	bl	800f4c4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	332c      	adds	r3, #44	; 0x2c
 800f9aa:	2105      	movs	r1, #5
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7ff fd97 	bl	800f4e0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800f9b8:	233c      	movs	r3, #60	; 0x3c
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f7ff fc15 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800f9ce:	23ff      	movs	r3, #255	; 0xff
 800f9d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f9d4:	23ff      	movs	r3, #255	; 0xff
 800f9d6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800f9da:	23ff      	movs	r3, #255	; 0xff
 800f9dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800f9e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f9e4:	041b      	lsls	r3, r3, #16
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f9ec:	021b      	lsls	r3, r3, #8
 800f9ee:	431a      	orrs	r2, r3
 800f9f0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fe:	4611      	mov	r1, r2
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7ff fba9 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	63fc      	str	r4, [r7, #60]	; 0x3c
 800fa0a:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800fa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0e:	69ba      	ldr	r2, [r7, #24]
 800fa10:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fa12:	bf00      	nop
    frontText.setLinespacing(0);
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	3360      	adds	r3, #96	; 0x60
 800fa18:	647b      	str	r3, [r7, #68]	; 0x44
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800fa20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa26:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800fa28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	3384      	adds	r3, #132	; 0x84
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800fa32:	463a      	mov	r2, r7
 800fa34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa36:	4610      	mov	r0, r2
 800fa38:	4798      	blx	r3
 800fa3a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800fa3e:	463a      	mov	r2, r7
 800fa40:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800fa46:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_94W5));
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800fa4e:	f107 031c 	add.w	r3, r7, #28
 800fa52:	2105      	movs	r1, #5
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fd53 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 800fa5a:	f107 031c 	add.w	r3, r7, #28
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4620      	mov	r0, r4
 800fa62:	f008 fad1 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800fa66:	f107 031c 	add.w	r3, r7, #28
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fe f974 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	332c      	adds	r3, #44	; 0x2c
 800fa76:	4619      	mov	r1, r3
 800fa78:	4610      	mov	r0, r2
 800fa7a:	f006 f90d 	bl	8015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	3360      	adds	r3, #96	; 0x60
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f006 f906 	bl	8015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	374c      	adds	r7, #76	; 0x4c
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd90      	pop	{r4, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	0802f350 	.word	0x0802f350

0800fa9c <_ZN12alertBarBaseD1Ev>:

alertBarBase::~alertBarBase()
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <_ZN12alertBarBaseD1Ev+0x34>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3360      	adds	r3, #96	; 0x60
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f82a 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	332c      	adds	r3, #44	; 0x2c
 800fab8:	4618      	mov	r0, r3
 800faba:	f000 f847 	bl	800fb4c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7ff fb27 	bl	800f114 <_ZN8touchgfx9ContainerD1Ev>
{

}
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	0802f350 	.word	0x0802f350

0800fad4 <_ZN12alertBarBaseD0Ev>:
alertBarBase::~alertBarBase()
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
}
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff ffdd 	bl	800fa9c <_ZN12alertBarBaseD1Ev>
 800fae2:	21ac      	movs	r1, #172	; 0xac
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f019 fde1 	bl	80296ac <_ZdlPvj>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]

}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	4a05      	ldr	r2, [pc, #20]	; (800fb28 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7ff fe8d 	bl	800f838 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	0802f3e4 	.word	0x0802f3e4

0800fb2c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7ff ffe7 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fb3a:	214c      	movs	r1, #76	; 0x4c
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f019 fdb5 	bl	80296ac <_ZdlPvj>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	4a05      	ldr	r2, [pc, #20]	; (800fb6c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	601a      	str	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff fc73 	bl	800f448 <_ZN8touchgfx3BoxD1Ev>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	080302ac 	.word	0x080302ac

0800fb70 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7ff ffe7 	bl	800fb4c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800fb7e:	2134      	movs	r1, #52	; 0x34
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f019 fd93 	bl	80296ac <_ZdlPvj>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
        : color(0)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]
    }
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4618      	mov	r0, r3
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
        return color;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
    }
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800fbe4:	4a06      	ldr	r2, [pc, #24]	; (800fc00 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	809a      	strh	r2, [r3, #4]
    {
    }
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	0802f5a4 	.word	0x0802f5a4

0800fc04 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
    {
 800fc0c:	4a04      	ldr	r2, [pc, #16]	; (800fc20 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	601a      	str	r2, [r3, #0]
    }
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	0802f5a4 	.word	0x0802f5a4

0800fc24 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
    }
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff ffe9 	bl	800fc04 <_ZN8touchgfx15AbstractPainterD1Ev>
 800fc32:	2108      	movs	r1, #8
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f019 fd39 	bl	80296ac <_ZdlPvj>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800fc4c:	2300      	movs	r3, #0
    }
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800fc5a:	b480      	push	{r7}
 800fc5c:	b083      	sub	sp, #12
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	809a      	strh	r2, [r3, #4]
        return true;
 800fc6e:	2301      	movs	r3, #1
    }
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
    {
        return;
 800fc84:	bf00      	nop
    }
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
            : v(i)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	601a      	str	r2, [r3, #0]
        {
        }
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
        {
            return v;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
        }
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800fcc6:	b480      	push	{r7}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fcd6:	bf00      	nop
 800fcd8:	370c      	adds	r7, #12
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr

0800fce2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800fce2:	b590      	push	{r4, r7, lr}
 800fce4:	b083      	sub	sp, #12
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
 800fcea:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	333c      	adds	r3, #60	; 0x3c
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff ffdc 	bl	800fcae <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	463b      	mov	r3, r7
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff ffd7 	bl	800fcae <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fd00:	4603      	mov	r3, r0
 800fd02:	429c      	cmp	r4, r3
 800fd04:	bf0c      	ite	eq
 800fd06:	2301      	moveq	r3, #1
 800fd08:	2300      	movne	r3, #0
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d106      	bne.n	800fd1e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	683a      	ldr	r2, [r7, #0]
 800fd14:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f007 fc4a 	bl	80175b0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800fd1c:	e000      	b.n	800fd20 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 800fd1e:	bf00      	nop
    }
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd90      	pop	{r4, r7, pc}
	...

0800fd28 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff ff52 	bl	800fbdc <_ZN8touchgfx15AbstractPainterC1Ev>
 800fd38:	4a26      	ldr	r2, [pc, #152]	; (800fdd4 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	601a      	str	r2, [r3, #0]
 800fd3e:	2302      	movs	r3, #2
 800fd40:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800fd42:	f7fe fc4f 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 800fd46:	4603      	mov	r3, r0
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	322c      	adds	r2, #44	; 0x2c
 800fd4c:	6812      	ldr	r2, [r2, #0]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	4790      	blx	r2
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
 800fd56:	7bfb      	ldrb	r3, [r7, #15]
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	bf0c      	ite	eq
 800fd5c:	2301      	moveq	r3, #1
 800fd5e:	2300      	movne	r3, #0
 800fd60:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800fd62:	f7fe fc33 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 800fd66:	4603      	mov	r3, r0
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff ff2b 	bl	800fbc4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	bf14      	ite	ne
 800fd74:	2301      	movne	r3, #1
 800fd76:	2300      	moveq	r3, #0
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d01b      	beq.n	800fdb6 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800fd7e:	f7fe fc25 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 800fd82:	4603      	mov	r3, r0
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff ff1d 	bl	800fbc4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	322c      	adds	r2, #44	; 0x2c
 800fd90:	6812      	ldr	r2, [r2, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	4790      	blx	r2
 800fd96:	4603      	mov	r3, r0
 800fd98:	461a      	mov	r2, r3
 800fd9a:	7bfb      	ldrb	r3, [r7, #15]
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	bf0c      	ite	eq
 800fda0:	2301      	moveq	r3, #1
 800fda2:	2300      	movne	r3, #0
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	7bbb      	ldrb	r3, [r7, #14]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bf14      	ite	ne
 800fdb0:	2301      	movne	r3, #1
 800fdb2:	2300      	moveq	r3, #0
 800fdb4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800fdb6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d105      	bne.n	800fdc8 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 800fdbe:	4a07      	ldr	r2, [pc, #28]	; (800fddc <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 800fdc0:	2128      	movs	r1, #40	; 0x28
 800fdc2:	4807      	ldr	r0, [pc, #28]	; (800fde0 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 800fdc4:	f019 fd1c 	bl	8029800 <__assert_func>
 800fdc8:	bf00      	nop
    }
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	0802f584 	.word	0x0802f584
 800fdd8:	0802cf40 	.word	0x0802cf40
 800fddc:	0802cfa4 	.word	0x0802cfa4
 800fde0:	0802cfe4 	.word	0x0802cfe4

0800fde4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
    {
 800fdee:	4a08      	ldr	r2, [pc, #32]	; (800fe10 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fec9 	bl	800fb90 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f827 	bl	800fe54 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	0802f570 	.word	0x0802f570

0800fe14 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
    {
 800fe1c:	4a04      	ldr	r2, [pc, #16]	; (800fe30 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	601a      	str	r2, [r3, #0]
    }
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	0802f570 	.word	0x0802f570

0800fe34 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    }
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ffe9 	bl	800fe14 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800fe42:	2108      	movs	r1, #8
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f019 fc31 	bl	80296ac <_ZdlPvj>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	605a      	str	r2, [r3, #4]
    }
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	4a05      	ldr	r2, [pc, #20]	; (800fe90 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff febf 	bl	800fc04 <_ZN8touchgfx15AbstractPainterD1Ev>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	0802f584 	.word	0x0802f584

0800fe94 <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff ffe7 	bl	800fe70 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800fea2:	2108      	movs	r1, #8
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f019 fc01 	bl	80296ac <_ZdlPvj>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4618      	mov	r0, r3
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff ff31 	bl	800fd28 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	3308      	adds	r3, #8
 800feca:	6839      	ldr	r1, [r7, #0]
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff ff89 	bl	800fde4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800fed2:	4a05      	ldr	r2, [pc, #20]	; (800fee8 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	4a04      	ldr	r2, [pc, #16]	; (800feec <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	609a      	str	r2, [r3, #8]
    {
    }
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	0802fed8 	.word	0x0802fed8
 800feec:	0802fefc 	.word	0x0802fefc

0800fef0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	3308      	adds	r3, #8
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff ffa7 	bl	800fe54 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800ff0a:	f107 0314 	add.w	r3, r7, #20
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff fe4c 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 800ff14:	4603      	mov	r3, r0
 800ff16:	0c1b      	lsrs	r3, r3, #16
 800ff18:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	741a      	strb	r2, [r3, #16]
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800ff22:	f107 0310 	add.w	r3, r7, #16
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff fe40 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	0a1b      	lsrs	r3, r3, #8
 800ff30:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	745a      	strb	r2, [r3, #17]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800ff3a:	f107 030c 	add.w	r3, r7, #12
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7ff fe34 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 800ff44:	4603      	mov	r3, r0
 800ff46:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	749a      	strb	r2, [r3, #18]
    }
 800ff4c:	bf00      	nop
 800ff4e:	3718      	adds	r7, #24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800ff54:	f1a0 0008 	sub.w	r0, r0, #8
 800ff58:	e7ca      	b.n	800fef0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

0800ff5c <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 800ff5c:	b590      	push	{r4, r7, lr}
 800ff5e:	b095      	sub	sp, #84	; 0x54
 800ff60:	af02      	add	r7, sp, #8
 800ff62:	6178      	str	r0, [r7, #20]
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff f8b2 	bl	800f0d0 <_ZN8touchgfx9ContainerC1Ev>
 800ff6c:	4a72      	ldr	r2, [pc, #456]	; (8010138 <_ZN11tempBoxBaseC1Ev+0x1dc>)
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	332c      	adds	r3, #44	; 0x2c
 800ff76:	4618      	mov	r0, r3
 800ff78:	f007 fafa 	bl	8017570 <_ZN8touchgfx4LineC1Ev>
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800ff82:	f107 0320 	add.w	r3, r7, #32
 800ff86:	2100      	movs	r1, #0
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7ff f8e5 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 800ff8e:	6a39      	ldr	r1, [r7, #32]
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7ff ff8f 	bl	800feb4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	33b0      	adds	r3, #176	; 0xb0
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff fac6 	bl	800f52c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	21dc      	movs	r1, #220	; 0xdc
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff f81d 	bl	800efe4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	213c      	movs	r1, #60	; 0x3c
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff f827 	bl	800f002 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800ffba:	233c      	movs	r3, #60	; 0x3c
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	2364      	movs	r3, #100	; 0x64
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	f7ff f915 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800ffce:	23ff      	movs	r3, #255	; 0xff
 800ffd0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800ffd4:	23ff      	movs	r3, #255	; 0xff
 800ffd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ffda:	23ff      	movs	r3, #255	; 0xff
 800ffdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ffe0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ffe4:	041b      	lsls	r3, r3, #16
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffec:	021b      	lsls	r3, r3, #8
 800ffee:	431a      	orrs	r2, r3
 800fff0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fff4:	4313      	orrs	r3, r2
 800fff6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fffe:	4611      	mov	r1, r2
 8010000:	4618      	mov	r0, r3
 8010002:	f7ff f8a9 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	4619      	mov	r1, r3
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff ff70 	bl	800fef0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	339c      	adds	r3, #156	; 0x9c
 801001a:	4619      	mov	r1, r3
 801001c:	4610      	mov	r0, r2
 801001e:	f7ff fe52 	bl	800fcc6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	332c      	adds	r3, #44	; 0x2c
 8010026:	2200      	movs	r2, #0
 8010028:	2100      	movs	r1, #0
 801002a:	4618      	mov	r0, r3
 801002c:	f000 f8c2 	bl	80101b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	332c      	adds	r3, #44	; 0x2c
 8010034:	22dc      	movs	r2, #220	; 0xdc
 8010036:	2100      	movs	r1, #0
 8010038:	4618      	mov	r0, r3
 801003a:	f000 f8e1 	bl	8010200 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	332c      	adds	r3, #44	; 0x2c
 8010042:	2101      	movs	r1, #1
 8010044:	4618      	mov	r0, r3
 8010046:	f000 f901 	bl	801024c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	332c      	adds	r3, #44	; 0x2c
 801004e:	2101      	movs	r1, #1
 8010050:	4618      	mov	r0, r3
 8010052:	f007 fbb9 	bl	80177c8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 801005c:	233c      	movs	r3, #60	; 0x3c
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	23dc      	movs	r3, #220	; 0xdc
 8010062:	2200      	movs	r2, #0
 8010064:	2100      	movs	r1, #0
 8010066:	f7ff f8c4 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8010070:	23ff      	movs	r3, #255	; 0xff
 8010072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8010076:	23ff      	movs	r3, #255	; 0xff
 8010078:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 801007c:	23ff      	movs	r3, #255	; 0xff
 801007e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010082:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010086:	041b      	lsls	r3, r3, #16
 8010088:	461a      	mov	r2, r3
 801008a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801008e:	021b      	lsls	r3, r3, #8
 8010090:	431a      	orrs	r2, r3
 8010092:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010096:	4313      	orrs	r3, r2
 8010098:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801009c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff f858 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 80100a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100aa:	63fc      	str	r4, [r7, #60]	; 0x3c
 80100ac:	61fb      	str	r3, [r7, #28]
        color = newColor;
 80100ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100b0:	69fa      	ldr	r2, [r7, #28]
 80100b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80100b4:	bf00      	nop
    textArea1.setLinespacing(2);
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	33b0      	adds	r3, #176	; 0xb0
 80100ba:	647b      	str	r3, [r7, #68]	; 0x44
 80100bc:	2302      	movs	r3, #2
 80100be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 80100c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80100c8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80100ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	3384      	adds	r3, #132	; 0x84
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80100d4:	463a      	mov	r2, r7
 80100d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100d8:	4610      	mov	r0, r2
 80100da:	4798      	blx	r3
 80100dc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80100e0:	463a      	mov	r2, r7
 80100e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80100e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80100e8:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VVN0));
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80100f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100f4:	2104      	movs	r1, #4
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fa02 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 80100fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010100:	4619      	mov	r1, r3
 8010102:	4620      	mov	r0, r4
 8010104:	f007 ff80 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801010c:	4618      	mov	r0, r3
 801010e:	f7fd fe23 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	332c      	adds	r3, #44	; 0x2c
 8010118:	4619      	mov	r1, r3
 801011a:	4610      	mov	r0, r2
 801011c:	f005 fdbc 	bl	8015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	33b0      	adds	r3, #176	; 0xb0
 8010126:	4619      	mov	r1, r3
 8010128:	4610      	mov	r0, r2
 801012a:	f005 fdb5 	bl	8015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	4618      	mov	r0, r3
 8010132:	374c      	adds	r7, #76	; 0x4c
 8010134:	46bd      	mov	sp, r7
 8010136:	bd90      	pop	{r4, r7, pc}
 8010138:	0802f4dc 	.word	0x0802f4dc

0801013c <_ZN11tempBoxBaseD1Ev>:

tempBoxBase::~tempBoxBase()
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	4a0d      	ldr	r2, [pc, #52]	; (801017c <_ZN11tempBoxBaseD1Ev+0x40>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	33b0      	adds	r3, #176	; 0xb0
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fb2c 	bl	800f7ac <_ZN8touchgfx8TextAreaD1Ev>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	339c      	adds	r3, #156	; 0x9c
 8010158:	4618      	mov	r0, r3
 801015a:	f000 f8d3 	bl	8010304 <_ZN8touchgfx15PainterARGB8888D1Ev>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	332c      	adds	r3, #44	; 0x2c
 8010162:	4618      	mov	r0, r3
 8010164:	f000 f8ac 	bl	80102c0 <_ZN8touchgfx4LineD1Ev>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe ffd2 	bl	800f114 <_ZN8touchgfx9ContainerD1Ev>
{

}
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	0802f4dc 	.word	0x0802f4dc

08010180 <_ZN11tempBoxBaseD0Ev>:
tempBoxBase::~tempBoxBase()
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
}
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7ff ffd7 	bl	801013c <_ZN11tempBoxBaseD1Ev>
 801018e:	21f8      	movs	r1, #248	; 0xf8
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f019 fa8b 	bl	80296ac <_ZdlPvj>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]

}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80101b4:	b590      	push	{r4, r7, lr}
 80101b6:	b089      	sub	sp, #36	; 0x24
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	015a      	lsls	r2, r3, #5
 80101c8:	f107 0314 	add.w	r3, r7, #20
 80101cc:	4611      	mov	r1, r2
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff fd5e 	bl	800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	461c      	mov	r4, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	61fb      	str	r3, [r7, #28]
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	015a      	lsls	r2, r3, #5
 80101e0:	f107 0310 	add.w	r3, r7, #16
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff fd52 	bl	800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80101ec:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80101ee:	461a      	mov	r2, r3
 80101f0:	4621      	mov	r1, r4
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f007 fad2 	bl	801779c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80101f8:	bf00      	nop
 80101fa:	3724      	adds	r7, #36	; 0x24
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd90      	pop	{r4, r7, pc}

08010200 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b089      	sub	sp, #36	; 0x24
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	61bb      	str	r3, [r7, #24]
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	f107 0314 	add.w	r3, r7, #20
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff fd38 	bl	800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	461c      	mov	r4, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	61fb      	str	r3, [r7, #28]
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	f107 0310 	add.w	r3, r7, #16
 8010230:	4611      	mov	r1, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f7ff fd2c 	bl	800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010238:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801023a:	461a      	mov	r2, r3
 801023c:	4621      	mov	r1, r4
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f007 fab7 	bl	80177b2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8010244:	bf00      	nop
 8010246:	3724      	adds	r7, #36	; 0x24
 8010248:	46bd      	mov	sp, r7
 801024a:	bd90      	pop	{r4, r7, pc}

0801024c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	60fb      	str	r3, [r7, #12]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	015a      	lsls	r2, r3, #5
 801025e:	f107 0308 	add.w	r3, r7, #8
 8010262:	4611      	mov	r1, r2
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff fd13 	bl	800fc90 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801026a:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7ff fd37 	bl	800fce2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8010274:	bf00      	nop
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	4a05      	ldr	r2, [pc, #20]	; (801029c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff f887 	bl	800f3a0 <_ZN8touchgfx6WidgetD1Ev>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	0802ff10 	.word	0x0802ff10

080102a0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff ffe7 	bl	801027c <_ZN8touchgfx12CanvasWidgetD1Ev>
 80102ae:	212c      	movs	r1, #44	; 0x2c
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f019 f9fb 	bl	80296ac <_ZdlPvj>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	4a05      	ldr	r2, [pc, #20]	; (80102e0 <_ZN8touchgfx4LineD1Ev+0x20>)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ff ffd3 	bl	801027c <_ZN8touchgfx12CanvasWidgetD1Ev>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	080300ac 	.word	0x080300ac

080102e4 <_ZN8touchgfx4LineD0Ev>:
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff ffe7 	bl	80102c0 <_ZN8touchgfx4LineD1Ev>
 80102f2:	2170      	movs	r1, #112	; 0x70
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f019 f9d9 	bl	80296ac <_ZdlPvj>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	4a09      	ldr	r2, [pc, #36]	; (8010334 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	601a      	str	r2, [r3, #0]
 8010312:	4a09      	ldr	r2, [pc, #36]	; (8010338 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	609a      	str	r2, [r3, #8]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3308      	adds	r3, #8
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff fd79 	bl	800fe14 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff fda3 	bl	800fe70 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0802fed8 	.word	0x0802fed8
 8010338:	0802fefc 	.word	0x0802fefc

0801033c <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 801033c:	f1a0 0008 	sub.w	r0, r0, #8
 8010340:	e7e0      	b.n	8010304 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8010342:	bf00      	nop

08010344 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff ffd9 	bl	8010304 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8010352:	2114      	movs	r1, #20
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f019 f9a9 	bl	80296ac <_ZdlPvj>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 8010364:	f1a0 0008 	sub.w	r0, r0, #8
 8010368:	e7ec      	b.n	8010344 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

0801036c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
    {
 8010374:	4a06      	ldr	r2, [pc, #24]	; (8010390 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	601a      	str	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	3304      	adds	r3, #4
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fec8 	bl	800f114 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4618      	mov	r0, r3
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	080304c4 	.word	0x080304c4

08010394 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
    }
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ffe5 	bl	801036c <_ZN8touchgfx6ScreenD1Ev>
 80103a2:	213c      	movs	r1, #60	; 0x3c
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f019 f981 	bl	80296ac <_ZdlPvj>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4618      	mov	r0, r3
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
    {
    }
 80103bc:	bf00      	nop
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
    {
    }
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    {
    }
 80103e4:	bf00      	nop
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
    {
    }
 80103f8:	bf00      	nop
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	3304      	adds	r3, #4
 801042a:	6839      	ldr	r1, [r7, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	f005 fc33 	bl	8015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010432:	bf00      	nop
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
    void setWildcard1(const Unicode::UnicodeChar* value)
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	6039      	str	r1, [r7, #0]
        wc1 = value;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	683a      	ldr	r2, [r7, #0]
 8010448:	649a      	str	r2, [r3, #72]	; 0x48
    }
 801044a:	bf00      	nop
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010456:	b580      	push	{r7, lr}
 8010458:	b082      	sub	sp, #8
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 8010460:	6839      	ldr	r1, [r7, #0]
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7ff ffe9 	bl	801043a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 8010468:	bf00      	nop
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	4a05      	ldr	r2, [pc, #20]	; (8010490 <_ZN7tempBoxD1Ev+0x20>)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff fe5b 	bl	801013c <_ZN11tempBoxBaseD1Ev>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4618      	mov	r0, r3
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	0802f778 	.word	0x0802f778

08010494 <_ZN7tempBoxD0Ev>:
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff ffe7 	bl	8010470 <_ZN7tempBoxD1Ev>
 80104a2:	21f8      	movs	r1, #248	; 0xf8
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f019 f901 	bl	80296ac <_ZdlPvj>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	4a05      	ldr	r2, [pc, #20]	; (80104d4 <_ZN8alertBarD1Ev+0x20>)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fae9 	bl	800fa9c <_ZN12alertBarBaseD1Ev>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4618      	mov	r0, r3
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	0802f6e4 	.word	0x0802f6e4

080104d8 <_ZN8alertBarD0Ev>:
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff ffe7 	bl	80104b4 <_ZN8alertBarD1Ev>
 80104e6:	21ac      	movs	r1, #172	; 0xac
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f019 f8df 	bl	80296ac <_ZdlPvj>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	4a05      	ldr	r2, [pc, #20]	; (8010518 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff ff2f 	bl	801036c <_ZN8touchgfx6ScreenD1Ev>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	0802f5fc 	.word	0x0802f5fc

0801051c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff ffe7 	bl	80104f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801052a:	2140      	movs	r1, #64	; 0x40
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f019 f8bd 	bl	80296ac <_ZdlPvj>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	4a33      	ldr	r2, [pc, #204]	; (8010614 <_ZN12MainViewBaseD1Ev+0xd8>)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff fad9 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fad3 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff ffa3 	bl	80104b4 <_ZN8alertBarD1Ev>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff ff9d 	bl	80104b4 <_ZN8alertBarD1Ev>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff ff75 	bl	8010470 <_ZN7tempBoxD1Ev>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff ff6f 	bl	8010470 <_ZN7tempBoxD1Ev>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff ff69 	bl	8010470 <_ZN7tempBoxD1Ev>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff ff63 	bl	8010470 <_ZN7tempBoxD1Ev>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff faa9 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff faa3 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff fa9d 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7ff fe95 	bl	8010304 <_ZN8touchgfx15PainterARGB8888D1Ev>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	33e4      	adds	r3, #228	; 0xe4
 80105de:	4618      	mov	r0, r3
 80105e0:	f7ff fe6e 	bl	80102c0 <_ZN8touchgfx4LineD1Ev>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	3398      	adds	r3, #152	; 0x98
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fa8d 	bl	800fb08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	336c      	adds	r3, #108	; 0x6c
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe ff28 	bl	800f448 <_ZN8touchgfx3BoxD1Ev>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	3340      	adds	r3, #64	; 0x40
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fe ff23 	bl	800f448 <_ZN8touchgfx3BoxD1Ev>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff ff77 	bl	80104f8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	0802f5c4 	.word	0x0802f5c4

08010618 <_ZN12MainViewBaseD0Ev>:
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7ff ff8b 	bl	801053c <_ZN12MainViewBaseD1Ev>
 8010626:	f243 7164 	movw	r1, #14180	; 0x3764
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f019 f83e 	bl	80296ac <_ZdlPvj>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZN12MainViewBase9function1Ev>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 801063a:	b480      	push	{r7}
 801063c:	b083      	sub	sp, #12
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8010642:	bf00      	nop
 8010644:	370c      	adds	r7, #12
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
	...

08010650 <_ZN12MainViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


MainViewBase::MainViewBase()
 8010650:	b590      	push	{r4, r7, lr}
 8010652:	b0d3      	sub	sp, #332	; 0x14c
 8010654:	af02      	add	r7, sp, #8
 8010656:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801065a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801065e:	6018      	str	r0, [r3, #0]
 8010660:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4618      	mov	r0, r3
 801066c:	f001 f88e 	bl	801178c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010670:	4ae0      	ldr	r2, [pc, #896]	; (80109f4 <_ZN12MainViewBaseC1Ev+0x3a4>)
 8010672:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	601a      	str	r2, [r3, #0]
 801067e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	3340      	adds	r3, #64	; 0x40
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe feaa 	bl	800f3e4 <_ZN8touchgfx3BoxC1Ev>
 8010690:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	336c      	adds	r3, #108	; 0x6c
 801069c:	4618      	mov	r0, r3
 801069e:	f7fe fea1 	bl	800f3e4 <_ZN8touchgfx3BoxC1Ev>
 80106a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	3398      	adds	r3, #152	; 0x98
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff f8e4 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	33e4      	adds	r3, #228	; 0xe4
 80106c0:	4618      	mov	r0, r3
 80106c2:	f006 ff55 	bl	8017570 <_ZN8touchgfx4LineC1Ev>
 80106c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80106d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80106d8:	2100      	movs	r1, #0
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fe fd3c 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 80106e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80106e8:	6819      	ldr	r1, [r3, #0]
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7ff fbe2 	bl	800feb4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 80106f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ff f8bc 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010704:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010712:	4618      	mov	r0, r3
 8010714:	f7ff f8b2 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010718:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801071c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff f8a8 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801072c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801073a:	4618      	mov	r0, r3
 801073c:	f001 faba 	bl	8011cb4 <_ZN7tempBoxC1Ev>
 8010740:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801074e:	4618      	mov	r0, r3
 8010750:	f001 fab0 	bl	8011cb4 <_ZN7tempBoxC1Ev>
 8010754:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010762:	4618      	mov	r0, r3
 8010764:	f001 faa6 	bl	8011cb4 <_ZN7tempBoxC1Ev>
 8010768:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801076c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010776:	4618      	mov	r0, r3
 8010778:	f001 fa9c 	bl	8011cb4 <_ZN7tempBoxC1Ev>
 801077c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801078a:	4618      	mov	r0, r3
 801078c:	f001 fa74 	bl	8011c78 <_ZN8alertBarC1Ev>
 8010790:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 801079e:	4618      	mov	r0, r3
 80107a0:	f001 fa6a 	bl	8011c78 <_ZN8alertBarC1Ev>
 80107a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f203 7384 	addw	r3, r3, #1924	; 0x784
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff f862 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80107b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff f858 	bl	800f87c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80107cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f603 0384 	addw	r3, r3, #2180	; 0x884
 80107da:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80107de:	4618      	mov	r0, r3
 80107e0:	f008 fc4a 	bl	8019078 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 80107e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80107f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80107fc:	2200      	movs	r2, #0
 80107fe:	2100      	movs	r1, #0
 8010800:	f7fe fcf7 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010804:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010812:	2300      	movs	r3, #0
 8010814:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8010818:	2300      	movs	r3, #0
 801081a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 801081e:	2300      	movs	r3, #0
 8010820:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8010824:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8010828:	041b      	lsls	r3, r3, #16
 801082a:	461a      	mov	r2, r3
 801082c:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8010830:	021b      	lsls	r3, r3, #8
 8010832:	431a      	orrs	r2, r3
 8010834:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8010838:	4313      	orrs	r3, r2
 801083a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801083e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010842:	4611      	mov	r1, r2
 8010844:	4618      	mov	r0, r3
 8010846:	f7fe fc87 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 801084a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801084e:	4619      	mov	r1, r3
 8010850:	4620      	mov	r0, r4
 8010852:	f7fe fdeb 	bl	800f42c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8010856:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801085a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8010864:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	f240 3325 	movw	r3, #805	; 0x325
 801086e:	2200      	movs	r2, #0
 8010870:	2100      	movs	r1, #0
 8010872:	f7fe fcbe 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801087a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010884:	2300      	movs	r3, #0
 8010886:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 801088a:	2300      	movs	r3, #0
 801088c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8010890:	2300      	movs	r3, #0
 8010892:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8010896:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 801089a:	041b      	lsls	r3, r3, #16
 801089c:	461a      	mov	r2, r3
 801089e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80108a2:	021b      	lsls	r3, r3, #8
 80108a4:	431a      	orrs	r2, r3
 80108a6:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80108aa:	4313      	orrs	r3, r2
 80108ac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80108b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe fc4e 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 80108bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108c0:	4619      	mov	r1, r3
 80108c2:	4620      	mov	r0, r4
 80108c4:	f7fe fdb2 	bl	800f42c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 80108c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80108cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3398      	adds	r3, #152	; 0x98
 80108d4:	223c      	movs	r2, #60	; 0x3c
 80108d6:	f240 114b 	movw	r1, #331	; 0x14b
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fcaa 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80108e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80108e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80108ee:	23ff      	movs	r3, #255	; 0xff
 80108f0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80108f4:	23ff      	movs	r3, #255	; 0xff
 80108f6:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80108fa:	23ff      	movs	r3, #255	; 0xff
 80108fc:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8010900:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8010904:	041b      	lsls	r3, r3, #16
 8010906:	461a      	mov	r2, r3
 8010908:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 801090c:	021b      	lsls	r3, r3, #8
 801090e:	431a      	orrs	r2, r3
 8010910:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8010914:	4313      	orrs	r3, r2
 8010916:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801091a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801091e:	4611      	mov	r1, r2
 8010920:	4618      	mov	r0, r3
 8010922:	f7fe fc19 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801092a:	461a      	mov	r2, r3
 801092c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8010930:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010934:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010938:	601a      	str	r2, [r3, #0]
        color = newColor;
 801093a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801093e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010942:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010946:	6812      	ldr	r2, [r2, #0]
 8010948:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801094a:	bf00      	nop
    gearArea.setLinespacing(0);
 801094c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	3398      	adds	r3, #152	; 0x98
 8010958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801095c:	2300      	movs	r3, #0
 801095e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 8010962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010966:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801096a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801096c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3384      	adds	r3, #132	; 0x84
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 801097a:	463a      	mov	r2, r7
 801097c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010980:	4610      	mov	r0, r2
 8010982:	4798      	blx	r3
 8010984:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010988:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801098c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010990:	ca07      	ldmia	r2, {r0, r1, r2}
 8010992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010996:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CBCX).getText());
 8010998:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801099c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 80109a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80109aa:	210b      	movs	r1, #11
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe fda7 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80109b2:	4b11      	ldr	r3, [pc, #68]	; (80109f8 <_ZN12MainViewBaseC1Ev+0x3a8>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <_ZN12MainViewBaseC1Ev+0x376>
 80109ba:	4b10      	ldr	r3, [pc, #64]	; (80109fc <_ZN12MainViewBaseC1Ev+0x3ac>)
 80109bc:	4a10      	ldr	r2, [pc, #64]	; (8010a00 <_ZN12MainViewBaseC1Ev+0x3b0>)
 80109be:	2160      	movs	r1, #96	; 0x60
 80109c0:	4810      	ldr	r0, [pc, #64]	; (8010a04 <_ZN12MainViewBaseC1Ev+0x3b4>)
 80109c2:	f018 ff1d 	bl	8029800 <__assert_func>
 80109c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80109ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        return typedTextId < numberOfTypedTexts;
 80109ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109d2:	889a      	ldrh	r2, [r3, #4]
 80109d4:	4b0c      	ldr	r3, [pc, #48]	; (8010a08 <_ZN12MainViewBaseC1Ev+0x3b8>)
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	429a      	cmp	r2, r3
 80109da:	bf34      	ite	cc
 80109dc:	2301      	movcc	r3, #1
 80109de:	2300      	movcs	r3, #0
 80109e0:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d114      	bne.n	8010a10 <_ZN12MainViewBaseC1Ev+0x3c0>
 80109e6:	4b09      	ldr	r3, [pc, #36]	; (8010a0c <_ZN12MainViewBaseC1Ev+0x3bc>)
 80109e8:	4a05      	ldr	r2, [pc, #20]	; (8010a00 <_ZN12MainViewBaseC1Ev+0x3b0>)
 80109ea:	2161      	movs	r1, #97	; 0x61
 80109ec:	4805      	ldr	r0, [pc, #20]	; (8010a04 <_ZN12MainViewBaseC1Ev+0x3b4>)
 80109ee:	f018 ff07 	bl	8029800 <__assert_func>
 80109f2:	bf00      	nop
 80109f4:	0802f5c4 	.word	0x0802f5c4
 80109f8:	2003c2c4 	.word	0x2003c2c4
 80109fc:	0802d048 	.word	0x0802d048
 8010a00:	0802d254 	.word	0x0802d254
 8010a04:	0802d0c8 	.word	0x0802d0c8
 8010a08:	2003c2c8 	.word	0x2003c2c8
 8010a0c:	0802d10c 	.word	0x0802d10c
 8010a10:	bf00      	nop
        return texts->getText(typedTextId);
 8010a12:	4bab      	ldr	r3, [pc, #684]	; (8010cc0 <_ZN12MainViewBaseC1Ev+0x670>)
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a1e:	889b      	ldrh	r3, [r3, #4]
 8010a20:	4619      	mov	r1, r3
 8010a22:	4610      	mov	r0, r2
 8010a24:	f001 f86c 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	bf00      	nop
 8010a2c:	4aa5      	ldr	r2, [pc, #660]	; (8010cc4 <_ZN12MainViewBaseC1Ev+0x674>)
 8010a2e:	2102      	movs	r1, #2
 8010a30:	4620      	mov	r0, r4
 8010a32:	f00c ffa3 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fd f98c 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8010a40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8010a4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4610      	mov	r0, r2
 8010a60:	f7ff fcf9 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8010a64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3398      	adds	r3, #152	; 0x98
 8010a70:	4618      	mov	r0, r3
 8010a72:	f007 faa9 	bl	8017fc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T6XW));
 8010a76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8010a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a88:	2100      	movs	r1, #0
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fe fd38 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 8010a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a94:	4619      	mov	r1, r3
 8010a96:	4620      	mov	r0, r4
 8010a98:	f007 fab6 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010a9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7fd f959 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8010aa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8010ab4:	2314      	movs	r3, #20
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	2398      	movs	r3, #152	; 0x98
 8010aba:	228c      	movs	r2, #140	; 0x8c
 8010abc:	f240 1149 	movw	r1, #329	; 0x149
 8010ac0:	f7fe fb97 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010ac4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8010ad2:	23ff      	movs	r3, #255	; 0xff
 8010ad4:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8010ad8:	23ff      	movs	r3, #255	; 0xff
 8010ada:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8010ade:	23ff      	movs	r3, #255	; 0xff
 8010ae0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8010ae4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8010ae8:	041b      	lsls	r3, r3, #16
 8010aea:	461a      	mov	r2, r3
 8010aec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8010af0:	021b      	lsls	r3, r3, #8
 8010af2:	431a      	orrs	r2, r3
 8010af4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8010af8:	4313      	orrs	r3, r2
 8010afa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b02:	4611      	mov	r1, r2
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fe fb27 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b0e:	4619      	mov	r1, r3
 8010b10:	4620      	mov	r0, r4
 8010b12:	f7ff f9ed 	bl	800fef0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8010b16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8010b24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010b32:	4619      	mov	r1, r3
 8010b34:	4610      	mov	r0, r2
 8010b36:	f7ff f8c6 	bl	800fcc6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8010b3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	33e4      	adds	r3, #228	; 0xe4
 8010b46:	2200      	movs	r2, #0
 8010b48:	2100      	movs	r1, #0
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ff fb32 	bl	80101b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8010b50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	33e4      	adds	r3, #228	; 0xe4
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2196      	movs	r1, #150	; 0x96
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7ff fb4d 	bl	8010200 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8010b66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	33e4      	adds	r3, #228	; 0xe4
 8010b72:	2104      	movs	r1, #4
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7ff fb69 	bl	801024c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8010b7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	33e4      	adds	r3, #228	; 0xe4
 8010b86:	2101      	movs	r1, #1
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f006 fe1d 	bl	80177c8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 8010b8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8010b9c:	2345      	movs	r3, #69	; 0x45
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	23d4      	movs	r3, #212	; 0xd4
 8010ba2:	2247      	movs	r2, #71	; 0x47
 8010ba4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8010ba8:	f7fe fb23 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 8010bac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8010bba:	2300      	movs	r3, #0
 8010bbc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8010bc0:	2366      	movs	r3, #102	; 0x66
 8010bc2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8010bc6:	23ff      	movs	r3, #255	; 0xff
 8010bc8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8010bcc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8010bd0:	041b      	lsls	r3, r3, #16
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8010bd8:	021b      	lsls	r3, r3, #8
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8010be0:	4313      	orrs	r3, r2
 8010be2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010be6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010bea:	4611      	mov	r1, r2
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fab3 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8010bfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010c04:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c0a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010c0e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8010c12:	6812      	ldr	r2, [r2, #0]
 8010c14:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010c16:	bf00      	nop
    rpmArea.setLinespacing(0);
 8010c18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010c26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        linespace = space;
 8010c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c34:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8010c38:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010c3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	3384      	adds	r3, #132	; 0x84
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8010c48:	463a      	mov	r2, r7
 8010c4a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010c4e:	4610      	mov	r0, r2
 8010c50:	4798      	blx	r3
 8010c52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c56:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010c5a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010c64:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BKZT).getText());
 8010c66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 8010c74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c78:	210a      	movs	r1, #10
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fe fc40 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010c80:	4b11      	ldr	r3, [pc, #68]	; (8010cc8 <_ZN12MainViewBaseC1Ev+0x678>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d105      	bne.n	8010c94 <_ZN12MainViewBaseC1Ev+0x644>
 8010c88:	4b10      	ldr	r3, [pc, #64]	; (8010ccc <_ZN12MainViewBaseC1Ev+0x67c>)
 8010c8a:	4a11      	ldr	r2, [pc, #68]	; (8010cd0 <_ZN12MainViewBaseC1Ev+0x680>)
 8010c8c:	2160      	movs	r1, #96	; 0x60
 8010c8e:	4811      	ldr	r0, [pc, #68]	; (8010cd4 <_ZN12MainViewBaseC1Ev+0x684>)
 8010c90:	f018 fdb6 	bl	8029800 <__assert_func>
 8010c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        return typedTextId < numberOfTypedTexts;
 8010c9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ca0:	889a      	ldrh	r2, [r3, #4]
 8010ca2:	4b0d      	ldr	r3, [pc, #52]	; (8010cd8 <_ZN12MainViewBaseC1Ev+0x688>)
 8010ca4:	881b      	ldrh	r3, [r3, #0]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	bf34      	ite	cc
 8010caa:	2301      	movcc	r3, #1
 8010cac:	2300      	movcs	r3, #0
 8010cae:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d115      	bne.n	8010ce0 <_ZN12MainViewBaseC1Ev+0x690>
 8010cb4:	4b09      	ldr	r3, [pc, #36]	; (8010cdc <_ZN12MainViewBaseC1Ev+0x68c>)
 8010cb6:	4a06      	ldr	r2, [pc, #24]	; (8010cd0 <_ZN12MainViewBaseC1Ev+0x680>)
 8010cb8:	2161      	movs	r1, #97	; 0x61
 8010cba:	4806      	ldr	r0, [pc, #24]	; (8010cd4 <_ZN12MainViewBaseC1Ev+0x684>)
 8010cbc:	f018 fda0 	bl	8029800 <__assert_func>
 8010cc0:	2003c2d0 	.word	0x2003c2d0
 8010cc4:	0802d28c 	.word	0x0802d28c
 8010cc8:	2003c2c4 	.word	0x2003c2c4
 8010ccc:	0802d048 	.word	0x0802d048
 8010cd0:	0802d254 	.word	0x0802d254
 8010cd4:	0802d0c8 	.word	0x0802d0c8
 8010cd8:	2003c2c8 	.word	0x2003c2c8
 8010cdc:	0802d10c 	.word	0x0802d10c
 8010ce0:	bf00      	nop
        return texts->getText(typedTextId);
 8010ce2:	4bd7      	ldr	r3, [pc, #860]	; (8011040 <_ZN12MainViewBaseC1Ev+0x9f0>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8010cea:	4611      	mov	r1, r2
 8010cec:	4618      	mov	r0, r3
 8010cee:	f000 ff07 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	bf00      	nop
 8010cf6:	4ad3      	ldr	r2, [pc, #844]	; (8011044 <_ZN12MainViewBaseC1Ev+0x9f4>)
 8010cf8:	210a      	movs	r1, #10
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f00c fe3e 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fd f827 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8010d0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010d18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010d26:	4619      	mov	r1, r3
 8010d28:	4610      	mov	r0, r2
 8010d2a:	f7ff fb94 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W8VI));
 8010d2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8010d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d40:	2101      	movs	r1, #1
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fe fbdc 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 8010d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f007 f95a 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fc fffd 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 8010d5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 8010d6c:	2331      	movs	r3, #49	; 0x31
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	23f0      	movs	r3, #240	; 0xf0
 8010d72:	2252      	movs	r2, #82	; 0x52
 8010d74:	210e      	movs	r1, #14
 8010d76:	f7fe fa3c 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010d7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 8010d88:	23ff      	movs	r3, #255	; 0xff
 8010d8a:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8010d8e:	23ff      	movs	r3, #255	; 0xff
 8010d90:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8010d94:	23ff      	movs	r3, #255	; 0xff
 8010d96:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8010d9a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8010d9e:	041b      	lsls	r3, r3, #16
 8010da0:	461a      	mov	r2, r3
 8010da2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8010da6:	021b      	lsls	r3, r3, #8
 8010da8:	431a      	orrs	r2, r3
 8010daa:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8010dae:	4313      	orrs	r3, r2
 8010db0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010db4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe f9cc 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 8010dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010dce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010dd2:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dd8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010ddc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8010de0:	6812      	ldr	r2, [r2, #0]
 8010de2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010de4:	bf00      	nop
    battArea.setLinespacing(0);
 8010de6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010df4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010df8:	2300      	movs	r3, #0
 8010dfa:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
        linespace = space;
 8010dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e02:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8010e06:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3384      	adds	r3, #132	; 0x84
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8010e16:	463a      	mov	r2, r7
 8010e18:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4798      	blx	r3
 8010e20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010e24:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010e28:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010e32:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YJO6).getText());
 8010e34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f603 0434 	addw	r4, r3, #2100	; 0x834
 8010e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e46:	2108      	movs	r1, #8
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fe fb59 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e4e:	4b7e      	ldr	r3, [pc, #504]	; (8011048 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d105      	bne.n	8010e62 <_ZN12MainViewBaseC1Ev+0x812>
 8010e56:	4b7d      	ldr	r3, [pc, #500]	; (801104c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8010e58:	4a7d      	ldr	r2, [pc, #500]	; (8011050 <_ZN12MainViewBaseC1Ev+0xa00>)
 8010e5a:	2160      	movs	r1, #96	; 0x60
 8010e5c:	487d      	ldr	r0, [pc, #500]	; (8011054 <_ZN12MainViewBaseC1Ev+0xa04>)
 8010e5e:	f018 fccf 	bl	8029800 <__assert_func>
 8010e62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        return typedTextId < numberOfTypedTexts;
 8010e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e6e:	889a      	ldrh	r2, [r3, #4]
 8010e70:	4b79      	ldr	r3, [pc, #484]	; (8011058 <_ZN12MainViewBaseC1Ev+0xa08>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	bf34      	ite	cc
 8010e78:	2301      	movcc	r3, #1
 8010e7a:	2300      	movcs	r3, #0
 8010e7c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d105      	bne.n	8010e8e <_ZN12MainViewBaseC1Ev+0x83e>
 8010e82:	4b76      	ldr	r3, [pc, #472]	; (801105c <_ZN12MainViewBaseC1Ev+0xa0c>)
 8010e84:	4a72      	ldr	r2, [pc, #456]	; (8011050 <_ZN12MainViewBaseC1Ev+0xa00>)
 8010e86:	2161      	movs	r1, #97	; 0x61
 8010e88:	4872      	ldr	r0, [pc, #456]	; (8011054 <_ZN12MainViewBaseC1Ev+0xa04>)
 8010e8a:	f018 fcb9 	bl	8029800 <__assert_func>
 8010e8e:	bf00      	nop
        return texts->getText(typedTextId);
 8010e90:	4b6b      	ldr	r3, [pc, #428]	; (8011040 <_ZN12MainViewBaseC1Ev+0x9f0>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010e98:	4611      	mov	r1, r2
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f000 fe30 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	bf00      	nop
 8010ea4:	4a67      	ldr	r2, [pc, #412]	; (8011044 <_ZN12MainViewBaseC1Ev+0x9f4>)
 8010ea6:	210a      	movs	r1, #10
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f00c fd67 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010eae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fc ff50 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8010eb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8010ec6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	f7ff fabd 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X1RQ));
 8010edc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 8010eea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010eee:	2102      	movs	r1, #2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fe fb05 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 8010ef6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010efa:	4619      	mov	r1, r3
 8010efc:	4620      	mov	r0, r4
 8010efe:	f007 f883 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010f02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fc ff26 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 8010f0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8010f1a:	2331      	movs	r3, #49	; 0x31
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	23f0      	movs	r3, #240	; 0xf0
 8010f20:	2252      	movs	r2, #82	; 0x52
 8010f22:	f44f 7108 	mov.w	r1, #544	; 0x220
 8010f26:	f7fe f964 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010f2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8010f38:	23ff      	movs	r3, #255	; 0xff
 8010f3a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8010f3e:	23ff      	movs	r3, #255	; 0xff
 8010f40:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8010f44:	23ff      	movs	r3, #255	; 0xff
 8010f46:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8010f4a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8010f4e:	041b      	lsls	r3, r3, #16
 8010f50:	461a      	mov	r2, r3
 8010f52:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8010f56:	021b      	lsls	r3, r3, #8
 8010f58:	431a      	orrs	r2, r3
 8010f5a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8010f5e:	4313      	orrs	r3, r2
 8010f60:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010f64:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010f68:	4611      	mov	r1, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fe f8f4 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 8010f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f74:	461a      	mov	r2, r3
 8010f76:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8010f7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010f82:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f88:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010f8c:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8010f90:	6812      	ldr	r2, [r2, #0]
 8010f92:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010f94:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8010f96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010fa4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        linespace = space;
 8010fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010fb2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8010fb6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010fb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	3384      	adds	r3, #132	; 0x84
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8010fc6:	463a      	mov	r2, r7
 8010fc8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010fcc:	4610      	mov	r0, r2
 8010fce:	4798      	blx	r3
 8010fd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010fd4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010fd8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8010fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010fe2:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_R4GH).getText());
 8010fe4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8010ff2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ff6:	210d      	movs	r1, #13
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe fa81 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010ffe:	4b12      	ldr	r3, [pc, #72]	; (8011048 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d105      	bne.n	8011012 <_ZN12MainViewBaseC1Ev+0x9c2>
 8011006:	4b11      	ldr	r3, [pc, #68]	; (801104c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8011008:	4a11      	ldr	r2, [pc, #68]	; (8011050 <_ZN12MainViewBaseC1Ev+0xa00>)
 801100a:	2160      	movs	r1, #96	; 0x60
 801100c:	4811      	ldr	r0, [pc, #68]	; (8011054 <_ZN12MainViewBaseC1Ev+0xa04>)
 801100e:	f018 fbf7 	bl	8029800 <__assert_func>
 8011012:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011016:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        return typedTextId < numberOfTypedTexts;
 801101a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801101e:	889a      	ldrh	r2, [r3, #4]
 8011020:	4b0d      	ldr	r3, [pc, #52]	; (8011058 <_ZN12MainViewBaseC1Ev+0xa08>)
 8011022:	881b      	ldrh	r3, [r3, #0]
 8011024:	429a      	cmp	r2, r3
 8011026:	bf34      	ite	cc
 8011028:	2301      	movcc	r3, #1
 801102a:	2300      	movcs	r3, #0
 801102c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801102e:	2b00      	cmp	r3, #0
 8011030:	d116      	bne.n	8011060 <_ZN12MainViewBaseC1Ev+0xa10>
 8011032:	4b0a      	ldr	r3, [pc, #40]	; (801105c <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011034:	4a06      	ldr	r2, [pc, #24]	; (8011050 <_ZN12MainViewBaseC1Ev+0xa00>)
 8011036:	2161      	movs	r1, #97	; 0x61
 8011038:	4806      	ldr	r0, [pc, #24]	; (8011054 <_ZN12MainViewBaseC1Ev+0xa04>)
 801103a:	f018 fbe1 	bl	8029800 <__assert_func>
 801103e:	bf00      	nop
 8011040:	2003c2d0 	.word	0x2003c2d0
 8011044:	0802d28c 	.word	0x0802d28c
 8011048:	2003c2c4 	.word	0x2003c2c4
 801104c:	0802d048 	.word	0x0802d048
 8011050:	0802d254 	.word	0x0802d254
 8011054:	0802d0c8 	.word	0x0802d0c8
 8011058:	2003c2c8 	.word	0x2003c2c8
 801105c:	0802d10c 	.word	0x0802d10c
 8011060:	bf00      	nop
        return texts->getText(typedTextId);
 8011062:	4b91      	ldr	r3, [pc, #580]	; (80112a8 <_ZN12MainViewBaseC1Ev+0xc58>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f000 fd47 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8011072:	4603      	mov	r3, r0
 8011074:	bf00      	nop
 8011076:	4a8d      	ldr	r2, [pc, #564]	; (80112ac <_ZN12MainViewBaseC1Ev+0xc5c>)
 8011078:	210a      	movs	r1, #10
 801107a:	4620      	mov	r0, r4
 801107c:	f00c fc7e 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011080:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011084:	4618      	mov	r0, r3
 8011086:	f7fc fe67 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 801108a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801108e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8011098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801109c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80110a6:	4619      	mov	r1, r3
 80110a8:	4610      	mov	r0, r2
 80110aa:	f7ff f9d4 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_52EE));
 80110ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f503 7400 	add.w	r4, r3, #512	; 0x200
 80110bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80110c0:	2103      	movs	r1, #3
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe fa1c 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 80110c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80110cc:	4619      	mov	r1, r3
 80110ce:	4620      	mov	r0, r4
 80110d0:	f006 ff9a 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80110d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fc fe3d 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 80110de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80110ec:	22f8      	movs	r2, #248	; 0xf8
 80110ee:	210b      	movs	r1, #11
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fe f89f 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 80110f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011104:	f240 1249 	movw	r2, #329	; 0x149
 8011108:	210b      	movs	r1, #11
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe f892 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8011110:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801111e:	22f8      	movs	r2, #248	; 0xf8
 8011120:	f240 213a 	movw	r1, #570	; 0x23a
 8011124:	4618      	mov	r0, r3
 8011126:	f7fe f885 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 801112a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801112e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011138:	f240 1249 	movw	r2, #329	; 0x149
 801113c:	f240 213a 	movw	r1, #570	; 0x23a
 8011140:	4618      	mov	r0, r3
 8011142:	f7fe f877 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8011146:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801114a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011154:	2200      	movs	r2, #0
 8011156:	2100      	movs	r1, #0
 8011158:	4618      	mov	r0, r3
 801115a:	f7fe f86b 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 801115e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 801116c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011170:	2100      	movs	r1, #0
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe f85e 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8011178:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801117c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f203 7084 	addw	r0, r3, #1924	; 0x784
 8011186:	2331      	movs	r3, #49	; 0x31
 8011188:	9300      	str	r3, [sp, #0]
 801118a:	23ee      	movs	r3, #238	; 0xee
 801118c:	2296      	movs	r2, #150	; 0x96
 801118e:	210e      	movs	r1, #14
 8011190:	f7fe f82f 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011194:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f203 7484 	addw	r4, r3, #1924	; 0x784
 80111a2:	23ff      	movs	r3, #255	; 0xff
 80111a4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80111a8:	23ff      	movs	r3, #255	; 0xff
 80111aa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80111ae:	23ff      	movs	r3, #255	; 0xff
 80111b0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80111b4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80111b8:	041b      	lsls	r3, r3, #16
 80111ba:	461a      	mov	r2, r3
 80111bc:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80111c0:	021b      	lsls	r3, r3, #8
 80111c2:	431a      	orrs	r2, r3
 80111c4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80111c8:	4313      	orrs	r3, r2
 80111ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80111ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fd ffbf 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 80111da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111de:	461a      	mov	r2, r3
 80111e0:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 80111e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80111e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80111ec:	601a      	str	r2, [r3, #0]
        color = newColor;
 80111ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80111f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80111f6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80111fa:	6812      	ldr	r2, [r2, #0]
 80111fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80111fe:	bf00      	nop
    cltArea.setLinespacing(0);
 8011200:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801120e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011212:	2300      	movs	r3, #0
 8011214:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
        linespace = space;
 8011218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801121c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011220:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011222:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	3384      	adds	r3, #132	; 0x84
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8011230:	463a      	mov	r2, r7
 8011232:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8011236:	4610      	mov	r0, r2
 8011238:	4798      	blx	r3
 801123a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801123e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011242:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011246:	ca07      	ldmia	r2, {r0, r1, r2}
 8011248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801124c:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A40Q).getText());
 801124e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f603 045c 	addw	r4, r3, #2140	; 0x85c
 801125c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011260:	2109      	movs	r1, #9
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe f94c 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011268:	4b11      	ldr	r3, [pc, #68]	; (80112b0 <_ZN12MainViewBaseC1Ev+0xc60>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d105      	bne.n	801127c <_ZN12MainViewBaseC1Ev+0xc2c>
 8011270:	4b10      	ldr	r3, [pc, #64]	; (80112b4 <_ZN12MainViewBaseC1Ev+0xc64>)
 8011272:	4a11      	ldr	r2, [pc, #68]	; (80112b8 <_ZN12MainViewBaseC1Ev+0xc68>)
 8011274:	2160      	movs	r1, #96	; 0x60
 8011276:	4811      	ldr	r0, [pc, #68]	; (80112bc <_ZN12MainViewBaseC1Ev+0xc6c>)
 8011278:	f018 fac2 	bl	8029800 <__assert_func>
 801127c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        return typedTextId < numberOfTypedTexts;
 8011284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011288:	889a      	ldrh	r2, [r3, #4]
 801128a:	4b0d      	ldr	r3, [pc, #52]	; (80112c0 <_ZN12MainViewBaseC1Ev+0xc70>)
 801128c:	881b      	ldrh	r3, [r3, #0]
 801128e:	429a      	cmp	r2, r3
 8011290:	bf34      	ite	cc
 8011292:	2301      	movcc	r3, #1
 8011294:	2300      	movcs	r3, #0
 8011296:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011298:	2b00      	cmp	r3, #0
 801129a:	d115      	bne.n	80112c8 <_ZN12MainViewBaseC1Ev+0xc78>
 801129c:	4b09      	ldr	r3, [pc, #36]	; (80112c4 <_ZN12MainViewBaseC1Ev+0xc74>)
 801129e:	4a06      	ldr	r2, [pc, #24]	; (80112b8 <_ZN12MainViewBaseC1Ev+0xc68>)
 80112a0:	2161      	movs	r1, #97	; 0x61
 80112a2:	4806      	ldr	r0, [pc, #24]	; (80112bc <_ZN12MainViewBaseC1Ev+0xc6c>)
 80112a4:	f018 faac 	bl	8029800 <__assert_func>
 80112a8:	2003c2d0 	.word	0x2003c2d0
 80112ac:	0802d28c 	.word	0x0802d28c
 80112b0:	2003c2c4 	.word	0x2003c2c4
 80112b4:	0802d048 	.word	0x0802d048
 80112b8:	0802d254 	.word	0x0802d254
 80112bc:	0802d0c8 	.word	0x0802d0c8
 80112c0:	2003c2c8 	.word	0x2003c2c8
 80112c4:	0802d10c 	.word	0x0802d10c
 80112c8:	bf00      	nop
        return texts->getText(typedTextId);
 80112ca:	4b6b      	ldr	r3, [pc, #428]	; (8011478 <_ZN12MainViewBaseC1Ev+0xe28>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f000 fc13 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 80112da:	4603      	mov	r3, r0
 80112dc:	bf00      	nop
 80112de:	4a67      	ldr	r2, [pc, #412]	; (801147c <_ZN12MainViewBaseC1Ev+0xe2c>)
 80112e0:	210a      	movs	r1, #10
 80112e2:	4620      	mov	r0, r4
 80112e4:	f00c fb4a 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80112e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fc fd33 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 80112f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80112f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f203 7284 	addw	r2, r3, #1924	; 0x784
 8011300:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f603 035c 	addw	r3, r3, #2140	; 0x85c
 801130e:	4619      	mov	r1, r3
 8011310:	4610      	mov	r0, r2
 8011312:	f7ff f8a0 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8EGU));
 8011316:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801131a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f203 7484 	addw	r4, r3, #1924	; 0x784
 8011324:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011328:	2107      	movs	r1, #7
 801132a:	4618      	mov	r0, r3
 801132c:	f7fe f8e8 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 8011330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011334:	4619      	mov	r1, r3
 8011336:	4620      	mov	r0, r4
 8011338:	f006 fe66 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801133c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011340:	4618      	mov	r0, r3
 8011342:	f7fc fd09 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8011346:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801134a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 8011354:	2331      	movs	r3, #49	; 0x31
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	23f0      	movs	r3, #240	; 0xf0
 801135a:	2296      	movs	r2, #150	; 0x96
 801135c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8011360:	f7fd ff47 	bl	800f1f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011364:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8011372:	23ff      	movs	r3, #255	; 0xff
 8011374:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8011378:	23ff      	movs	r3, #255	; 0xff
 801137a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 801137e:	23ff      	movs	r3, #255	; 0xff
 8011380:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8011384:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8011388:	041b      	lsls	r3, r3, #16
 801138a:	461a      	mov	r2, r3
 801138c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8011390:	021b      	lsls	r3, r3, #8
 8011392:	431a      	orrs	r2, r3
 8011394:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8011398:	4313      	orrs	r3, r2
 801139a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801139e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fd fed7 	bl	800f158 <_ZN8touchgfx9colortypeC1Em>
 80113aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80113ae:	461a      	mov	r2, r3
 80113b0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80113b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80113b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113bc:	601a      	str	r2, [r3, #0]
        color = newColor;
 80113be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80113c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80113c6:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80113ca:	6812      	ldr	r2, [r2, #0]
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80113ce:	bf00      	nop
    oilTempArea.setLinespacing(0);
 80113d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80113d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80113de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80113e2:	2300      	movs	r3, #0
 80113e4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
        linespace = space;
 80113e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80113ec:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80113f0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80113f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3384      	adds	r3, #132	; 0x84
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8011400:	463a      	mov	r2, r7
 8011402:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011406:	4610      	mov	r0, r2
 8011408:	4798      	blx	r3
 801140a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801140e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011412:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011416:	ca07      	ldmia	r2, {r0, r1, r2}
 8011418:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801141c:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7JNZ).getText());
 801141e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 801142c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011430:	210e      	movs	r1, #14
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe f864 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011438:	4b11      	ldr	r3, [pc, #68]	; (8011480 <_ZN12MainViewBaseC1Ev+0xe30>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d105      	bne.n	801144c <_ZN12MainViewBaseC1Ev+0xdfc>
 8011440:	4b10      	ldr	r3, [pc, #64]	; (8011484 <_ZN12MainViewBaseC1Ev+0xe34>)
 8011442:	4a11      	ldr	r2, [pc, #68]	; (8011488 <_ZN12MainViewBaseC1Ev+0xe38>)
 8011444:	2160      	movs	r1, #96	; 0x60
 8011446:	4811      	ldr	r0, [pc, #68]	; (801148c <_ZN12MainViewBaseC1Ev+0xe3c>)
 8011448:	f018 f9da 	bl	8029800 <__assert_func>
 801144c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011450:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        return typedTextId < numberOfTypedTexts;
 8011454:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011458:	889a      	ldrh	r2, [r3, #4]
 801145a:	4b0d      	ldr	r3, [pc, #52]	; (8011490 <_ZN12MainViewBaseC1Ev+0xe40>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	bf34      	ite	cc
 8011462:	2301      	movcc	r3, #1
 8011464:	2300      	movcs	r3, #0
 8011466:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011468:	2b00      	cmp	r3, #0
 801146a:	d115      	bne.n	8011498 <_ZN12MainViewBaseC1Ev+0xe48>
 801146c:	4b09      	ldr	r3, [pc, #36]	; (8011494 <_ZN12MainViewBaseC1Ev+0xe44>)
 801146e:	4a06      	ldr	r2, [pc, #24]	; (8011488 <_ZN12MainViewBaseC1Ev+0xe38>)
 8011470:	2161      	movs	r1, #97	; 0x61
 8011472:	4806      	ldr	r0, [pc, #24]	; (801148c <_ZN12MainViewBaseC1Ev+0xe3c>)
 8011474:	f018 f9c4 	bl	8029800 <__assert_func>
 8011478:	2003c2d0 	.word	0x2003c2d0
 801147c:	0802d28c 	.word	0x0802d28c
 8011480:	2003c2c4 	.word	0x2003c2c4
 8011484:	0802d048 	.word	0x0802d048
 8011488:	0802d254 	.word	0x0802d254
 801148c:	0802d0c8 	.word	0x0802d0c8
 8011490:	2003c2c8 	.word	0x2003c2c8
 8011494:	0802d10c 	.word	0x0802d10c
 8011498:	bf00      	nop
        return texts->getText(typedTextId);
 801149a:	4b9a      	ldr	r3, [pc, #616]	; (8011704 <_ZN12MainViewBaseC1Ev+0x10b4>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80114a2:	4611      	mov	r1, r2
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 fb2b 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 80114aa:	4603      	mov	r3, r0
 80114ac:	bf00      	nop
 80114ae:	4a96      	ldr	r2, [pc, #600]	; (8011708 <_ZN12MainViewBaseC1Ev+0x10b8>)
 80114b0:	210a      	movs	r1, #10
 80114b2:	4620      	mov	r0, r4
 80114b4:	f00c fa62 	bl	801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80114b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fc fc4b 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 80114c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80114c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80114d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80114d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 80114de:	4619      	mov	r1, r3
 80114e0:	4610      	mov	r0, r2
 80114e2:	f7fe ffb8 	bl	8010456 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ILXZ));
 80114e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80114ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80114f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80114f8:	210c      	movs	r1, #12
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fe f800 	bl	800f500 <_ZN8touchgfx9TypedTextC1Et>
 8011500:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011504:	4619      	mov	r1, r3
 8011506:	4620      	mov	r0, r4
 8011508:	f006 fd7e 	bl	8018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801150c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011510:	4618      	mov	r0, r3
 8011512:	f7fc fc21 	bl	800dd58 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8011516:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801151a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3340      	adds	r3, #64	; 0x40
 801152c:	4619      	mov	r1, r3
 801152e:	4610      	mov	r0, r2
 8011530:	f7fe ff74 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8011534:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	336c      	adds	r3, #108	; 0x6c
 801154a:	4619      	mov	r1, r3
 801154c:	4610      	mov	r0, r2
 801154e:	f7fe ff65 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8011552:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	3398      	adds	r3, #152	; 0x98
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7fe ff56 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8011570:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801157e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	33e4      	adds	r3, #228	; 0xe4
 8011586:	4619      	mov	r1, r3
 8011588:	4610      	mov	r0, r2
 801158a:	f7fe ff47 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 801158e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011596:	681a      	ldr	r2, [r3, #0]
 8011598:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801159c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80115a6:	4619      	mov	r1, r3
 80115a8:	4610      	mov	r0, r2
 80115aa:	f7fe ff37 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 80115ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80115c6:	4619      	mov	r1, r3
 80115c8:	4610      	mov	r0, r2
 80115ca:	f7fe ff27 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 80115ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80115e6:	4619      	mov	r1, r3
 80115e8:	4610      	mov	r0, r2
 80115ea:	f7fe ff17 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 80115ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011606:	4619      	mov	r1, r3
 8011608:	4610      	mov	r0, r2
 801160a:	f7fe ff07 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 801160e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801161c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011626:	4619      	mov	r1, r3
 8011628:	4610      	mov	r0, r2
 801162a:	f7fe fef7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 801162e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801163c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011646:	4619      	mov	r1, r3
 8011648:	4610      	mov	r0, r2
 801164a:	f7fe fee7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 801164e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801165c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011666:	4619      	mov	r1, r3
 8011668:	4610      	mov	r0, r2
 801166a:	f7fe fed7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 801166e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801167c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011686:	4619      	mov	r1, r3
 8011688:	4610      	mov	r0, r2
 801168a:	f7fe fec7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 801168e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801169c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80116a6:	4619      	mov	r1, r3
 80116a8:	4610      	mov	r0, r2
 80116aa:	f7fe feb7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 80116ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f203 7384 	addw	r3, r3, #1924	; 0x784
 80116c6:	4619      	mov	r1, r3
 80116c8:	4610      	mov	r0, r2
 80116ca:	f7fe fea7 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 80116ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80116e6:	4619      	mov	r1, r3
 80116e8:	4610      	mov	r0, r2
 80116ea:	f7fe fe97 	bl	801041c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80116ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd90      	pop	{r4, r7, pc}
 8011702:	bf00      	nop
 8011704:	2003c2d0 	.word	0x2003c2d0
 8011708:	0802d28c 	.word	0x0802d28c

0801170c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801171a:	4618      	mov	r0, r3
 801171c:	f000 fadc 	bl	8011cd8 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011726:	4618      	mov	r0, r3
 8011728:	f000 fad6 	bl	8011cd8 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011732:	4618      	mov	r0, r3
 8011734:	f000 fad0 	bl	8011cd8 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801173e:	4618      	mov	r0, r3
 8011740:	f000 faca 	bl	8011cd8 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801174a:	4618      	mov	r0, r3
 801174c:	f000 faa6 	bl	8011c9c <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8011756:	4618      	mov	r0, r3
 8011758:	f000 faa0 	bl	8011c9c <_ZN8alertBar10initializeEv>
}
 801175c:	bf00      	nop
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	70fb      	strb	r3, [r7, #3]
    if(56 == key)
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	2b38      	cmp	r3, #56	; 0x38
 8011774:	d105      	bne.n	8011782 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Interaction1
        //When hardware button 56 clicked call virtual function
        //Call function1
        function1();
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	332c      	adds	r3, #44	; 0x2c
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	4798      	blx	r3
    }
}
 8011782:	bf00      	nop
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
	...

0801178c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	4618      	mov	r0, r3
 8011798:	f00a fc66 	bl	801c068 <_ZN8touchgfx6ScreenC1Ev>
 801179c:	4a05      	ldr	r2, [pc, #20]	; (80117b4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2200      	movs	r2, #0
 80117a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	4618      	mov	r0, r3
 80117ac:	3708      	adds	r7, #8
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	0802f5fc 	.word	0x0802f5fc

080117b8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80117b8:	b480      	push	{r7}
 80117ba:	af00      	add	r7, sp, #0
    return bitmap_database;
 80117bc:	4b02      	ldr	r3, [pc, #8]	; (80117c8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80117be:	4618      	mov	r0, r3
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr
 80117c8:	0802f628 	.word	0x0802f628

080117cc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80117cc:	b480      	push	{r7}
 80117ce:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80117d0:	2301      	movs	r3, #1
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	460b      	mov	r3, r1
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 80117ea:	2300      	movs	r3, #0
    }
 80117ec:	4618      	mov	r0, r3
 80117ee:	3714      	adds	r7, #20
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011800:	2300      	movs	r3, #0
    }
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801180e:	b480      	push	{r7}
 8011810:	b083      	sub	sp, #12
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011816:	2300      	movs	r3, #0
    }
 8011818:	4618      	mov	r0, r3
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011824:	b480      	push	{r7}
 8011826:	b085      	sub	sp, #20
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	4613      	mov	r3, r2
 8011830:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011832:	4a07      	ldr	r2, [pc, #28]	; (8011850 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011838:	4a06      	ldr	r2, [pc, #24]	; (8011854 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801183e:	4a06      	ldr	r2, [pc, #24]	; (8011858 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	8013      	strh	r3, [r2, #0]
    }
 8011844:	bf00      	nop
 8011846:	3714      	adds	r7, #20
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr
 8011850:	2003c2c4 	.word	0x2003c2c4
 8011854:	2003c2cc 	.word	0x2003c2cc
 8011858:	2003c2c8 	.word	0x2003c2c8

0801185c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801185c:	b40e      	push	{r1, r2, r3}
 801185e:	b580      	push	{r7, lr}
 8011860:	b085      	sub	sp, #20
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011866:	f107 0320 	add.w	r3, r7, #32
 801186a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	69fa      	ldr	r2, [r7, #28]
 8011870:	2100      	movs	r1, #0
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f009 ff72 	bl	801b75c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011878:	4603      	mov	r3, r0
 801187a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801187c:	89fb      	ldrh	r3, [r7, #14]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3714      	adds	r7, #20
 8011882:	46bd      	mov	sp, r7
 8011884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011888:	b003      	add	sp, #12
 801188a:	4770      	bx	lr

0801188c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801188c:	b40c      	push	{r2, r3}
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801189a:	f107 031c 	add.w	r3, r7, #28
 801189e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80118a0:	78f9      	ldrb	r1, [r7, #3]
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	69ba      	ldr	r2, [r7, #24]
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f009 ff58 	bl	801b75c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80118ac:	4603      	mov	r3, r0
 80118ae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80118b0:	89fb      	ldrh	r3, [r7, #14]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80118bc:	b002      	add	sp, #8
 80118be:	4770      	bx	lr

080118c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08a      	sub	sp, #40	; 0x28
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d016      	beq.n	8011902 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3322      	adds	r3, #34	; 0x22
 80118d8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	8adb      	ldrh	r3, [r3, #22]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d105      	bne.n	80118ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80118e2:	4b43      	ldr	r3, [pc, #268]	; (80119f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80118e4:	4a43      	ldr	r2, [pc, #268]	; (80119f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80118e6:	21c0      	movs	r1, #192	; 0xc0
 80118e8:	4843      	ldr	r0, [pc, #268]	; (80119f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80118ea:	f017 ff89 	bl	8029800 <__assert_func>
            return buffer[pos];
 80118ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f0:	8a9b      	ldrh	r3, [r3, #20]
 80118f2:	461a      	mov	r2, r3
 80118f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80118fe:	2301      	movs	r3, #1
 8011900:	e000      	b.n	8011904 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011902:	2300      	movs	r3, #0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d06a      	beq.n	80119de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f00b fa89 	bl	801ce20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	3322      	adds	r3, #34	; 0x22
 8011912:	623b      	str	r3, [r7, #32]
 8011914:	2301      	movs	r3, #1
 8011916:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	8adb      	ldrh	r3, [r3, #22]
 801191c:	8bfa      	ldrh	r2, [r7, #30]
 801191e:	429a      	cmp	r2, r3
 8011920:	d305      	bcc.n	801192e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011922:	4b36      	ldr	r3, [pc, #216]	; (80119fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011924:	4a36      	ldr	r2, [pc, #216]	; (8011a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011926:	21c5      	movs	r1, #197	; 0xc5
 8011928:	4833      	ldr	r0, [pc, #204]	; (80119f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801192a:	f017 ff69 	bl	8029800 <__assert_func>
            const uint16_t index = pos + offset;
 801192e:	6a3b      	ldr	r3, [r7, #32]
 8011930:	8a9a      	ldrh	r2, [r3, #20]
 8011932:	8bfb      	ldrh	r3, [r7, #30]
 8011934:	4413      	add	r3, r2
 8011936:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011938:	8bbb      	ldrh	r3, [r7, #28]
 801193a:	2b09      	cmp	r3, #9
 801193c:	d801      	bhi.n	8011942 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801193e:	8bbb      	ldrh	r3, [r7, #28]
 8011940:	e001      	b.n	8011946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011942:	8bbb      	ldrh	r3, [r7, #28]
 8011944:	3b0a      	subs	r3, #10
 8011946:	6a3a      	ldr	r2, [r7, #32]
 8011948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801194c:	f640 123f 	movw	r2, #2367	; 0x93f
 8011950:	4293      	cmp	r3, r2
 8011952:	bf0c      	ite	eq
 8011954:	2301      	moveq	r3, #1
 8011956:	2300      	movne	r3, #0
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b00      	cmp	r3, #0
 801195c:	d03f      	beq.n	80119de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3322      	adds	r3, #34	; 0x22
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	3222      	adds	r2, #34	; 0x22
 8011966:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011968:	68ba      	ldr	r2, [r7, #8]
 801196a:	8ad2      	ldrh	r2, [r2, #22]
 801196c:	2a00      	cmp	r2, #0
 801196e:	d105      	bne.n	801197c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011970:	4b1f      	ldr	r3, [pc, #124]	; (80119f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011972:	4a20      	ldr	r2, [pc, #128]	; (80119f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011974:	21c0      	movs	r1, #192	; 0xc0
 8011976:	4820      	ldr	r0, [pc, #128]	; (80119f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011978:	f017 ff42 	bl	8029800 <__assert_func>
            return buffer[pos];
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	8a92      	ldrh	r2, [r2, #20]
 8011980:	4611      	mov	r1, r2
 8011982:	68ba      	ldr	r2, [r7, #8]
 8011984:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011988:	613b      	str	r3, [r7, #16]
 801198a:	4613      	mov	r3, r2
 801198c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	8adb      	ldrh	r3, [r3, #22]
 8011992:	2b01      	cmp	r3, #1
 8011994:	d806      	bhi.n	80119a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011996:	4b1b      	ldr	r3, [pc, #108]	; (8011a04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011998:	4a1b      	ldr	r2, [pc, #108]	; (8011a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801199a:	f240 110d 	movw	r1, #269	; 0x10d
 801199e:	4816      	ldr	r0, [pc, #88]	; (80119f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80119a0:	f017 ff2e 	bl	8029800 <__assert_func>
            const uint16_t index = pos + 1;
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	8a9b      	ldrh	r3, [r3, #20]
 80119a8:	3301      	adds	r3, #1
 80119aa:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80119ac:	89bb      	ldrh	r3, [r7, #12]
 80119ae:	2b09      	cmp	r3, #9
 80119b0:	d801      	bhi.n	80119b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80119b2:	89bb      	ldrh	r3, [r7, #12]
 80119b4:	e000      	b.n	80119b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80119b6:	2300      	movs	r3, #0
 80119b8:	693a      	ldr	r2, [r7, #16]
 80119ba:	89f9      	ldrh	r1, [r7, #14]
 80119bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80119c0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	3322      	adds	r3, #34	; 0x22
 80119c6:	61bb      	str	r3, [r7, #24]
 80119c8:	f640 133f 	movw	r3, #2367	; 0x93f
 80119cc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	8a9b      	ldrh	r3, [r3, #20]
 80119d2:	4619      	mov	r1, r3
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	8afa      	ldrh	r2, [r7, #22]
 80119d8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80119dc:	bf00      	nop
        }
    }
    return getNextChar();
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f00b f920 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80119e4:	4603      	mov	r3, r0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3728      	adds	r7, #40	; 0x28
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	0802d290 	.word	0x0802d290
 80119f4:	0802d29c 	.word	0x0802d29c
 80119f8:	0802d348 	.word	0x0802d348
 80119fc:	0802d390 	.word	0x0802d390
 8011a00:	0802d3a0 	.word	0x0802d3a0
 8011a04:	0802d474 	.word	0x0802d474
 8011a08:	0802d480 	.word	0x0802d480

08011a0c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f00b f8ce 	bl	801cbb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011a1a:	bf00      	nop
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b088      	sub	sp, #32
 8011a26:	af02      	add	r7, sp, #8
 8011a28:	60f8      	str	r0, [r7, #12]
 8011a2a:	1d38      	adds	r0, r7, #4
 8011a2c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011a30:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a36:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011a38:	1d39      	adds	r1, r7, #4
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	9301      	str	r3, [sp, #4]
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	6a3b      	ldr	r3, [r7, #32]
 8011a44:	683a      	ldr	r2, [r7, #0]
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f008 fb52 	bl	801a0f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011a4c:	bf00      	nop
 8011a4e:	3718      	adds	r7, #24
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011a54:	b590      	push	{r4, r7, lr}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011a62:	88fb      	ldrh	r3, [r7, #6]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d127      	bne.n	8011ab8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011a68:	88fb      	ldrh	r3, [r7, #6]
 8011a6a:	4a1e      	ldr	r2, [pc, #120]	; (8011ae4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d016      	beq.n	8011aa2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011a74:	88fb      	ldrh	r3, [r7, #6]
 8011a76:	4a1b      	ldr	r2, [pc, #108]	; (8011ae4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a7c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	4413      	add	r3, r2
 8011a86:	4a18      	ldr	r2, [pc, #96]	; (8011ae8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011a88:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	4413      	add	r3, r2
 8011a92:	4a16      	ldr	r2, [pc, #88]	; (8011aec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011a94:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	689b      	ldr	r3, [r3, #8]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	e00a      	b.n	8011ab8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011aa2:	4b11      	ldr	r3, [pc, #68]	; (8011ae8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011aa4:	4a12      	ldr	r2, [pc, #72]	; (8011af0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011aa6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011aa8:	4a12      	ldr	r2, [pc, #72]	; (8011af4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011aaa:	4b10      	ldr	r3, [pc, #64]	; (8011aec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011aac:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011aae:	88fb      	ldrh	r3, [r7, #6]
 8011ab0:	4a11      	ldr	r2, [pc, #68]	; (8011af8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ab6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00d      	beq.n	8011ada <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011abe:	4a0f      	ldr	r2, [pc, #60]	; (8011afc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011ac0:	88fb      	ldrh	r3, [r7, #6]
 8011ac2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011ac4:	f000 f83e 	bl	8011b44 <_ZN17TypedTextDatabase8getFontsEv>
 8011ac8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011aca:	f000 f833 	bl	8011b34 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f7ff fea5 	bl	8011824 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011ada:	bf00      	nop
 8011adc:	3714      	adds	r7, #20
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd90      	pop	{r4, r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	200339a4 	.word	0x200339a4
 8011ae8:	200339ac 	.word	0x200339ac
 8011aec:	200339b0 	.word	0x200339b0
 8011af0:	081644bc 	.word	0x081644bc
 8011af4:	08164328 	.word	0x08164328
 8011af8:	08164630 	.word	0x08164630
 8011afc:	200339a8 	.word	0x200339a8

08011b00 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	460b      	mov	r3, r1
 8011b0a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011b0c:	4b07      	ldr	r3, [pc, #28]	; (8011b2c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	4b07      	ldr	r3, [pc, #28]	; (8011b30 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011b12:	6819      	ldr	r1, [r3, #0]
 8011b14:	887b      	ldrh	r3, [r7, #2]
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	440b      	add	r3, r1
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	005b      	lsls	r3, r3, #1
 8011b1e:	4413      	add	r3, r2
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	200339ac 	.word	0x200339ac
 8011b30:	200339b0 	.word	0x200339b0

08011b34 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011b34:	b480      	push	{r7}
 8011b36:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011b38:	2365      	movs	r3, #101	; 0x65
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011b44:	b480      	push	{r7}
 8011b46:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011b48:	4b02      	ldr	r3, [pc, #8]	; (8011b54 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	200339b4 	.word	0x200339b4

08011b58 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d12c      	bne.n	8011bc2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d127      	bne.n	8011bc2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_swisop3_300_4bpp()),
 8011b72:	f7fc fa77 	bl	800e064 <_Z24getFont_swisop3_300_4bppv>
 8011b76:	4603      	mov	r3, r0
};
 8011b78:	4a14      	ldr	r2, [pc, #80]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011b7a:	6013      	str	r3, [r2, #0]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 8011b7c:	f7fc fa1c 	bl	800dfb8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 8011b80:	4603      	mov	r3, r0
};
 8011b82:	4a12      	ldr	r2, [pc, #72]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011b84:	6053      	str	r3, [r2, #4]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8011b86:	f7fc f9c1 	bl	800df0c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8011b8a:	4603      	mov	r3, r0
};
 8011b8c:	4a0f      	ldr	r2, [pc, #60]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011b8e:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_50_4bpp()),
 8011b90:	f7fc fac0 	bl	800e114 <_Z23getFont_swisop3_50_4bppv>
 8011b94:	4603      	mov	r3, r0
};
 8011b96:	4a0d      	ldr	r2, [pc, #52]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011b98:	60d3      	str	r3, [r2, #12]
    &(getFont_verdana_20_4bpp()),
 8011b9a:	f7fc fbbd 	bl	800e318 <_Z23getFont_verdana_20_4bppv>
 8011b9e:	4603      	mov	r3, r0
};
 8011ba0:	4a0a      	ldr	r2, [pc, #40]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011ba2:	6113      	str	r3, [r2, #16]
    &(getFont_verdana_12_4bpp()),
 8011ba4:	f7fc fb62 	bl	800e26c <_Z23getFont_verdana_12_4bppv>
 8011ba8:	4603      	mov	r3, r0
};
 8011baa:	4a08      	ldr	r2, [pc, #32]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011bac:	6153      	str	r3, [r2, #20]
    &(getFont_verdana_40_4bpp()),
 8011bae:	f7fc fc09 	bl	800e3c4 <_Z23getFont_verdana_40_4bppv>
 8011bb2:	4603      	mov	r3, r0
};
 8011bb4:	4a05      	ldr	r2, [pc, #20]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011bb6:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_10_4bpp())
 8011bb8:	f7fc fb02 	bl	800e1c0 <_Z23getFont_verdana_10_4bppv>
 8011bbc:	4603      	mov	r3, r0
};
 8011bbe:	4a03      	ldr	r2, [pc, #12]	; (8011bcc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011bc0:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 8011bc2:	bf00      	nop
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	200339b4 	.word	0x200339b4

08011bd0 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011bd8:	2001      	movs	r0, #1
 8011bda:	f7ff ffbd 	bl	8011b58 <_Z41__static_initialization_and_destruction_0ii>
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	4a05      	ldr	r2, [pc, #20]	; (8011c00 <_ZN19FrontendApplicationD1Ev+0x20>)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	601a      	str	r2, [r3, #0]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fc fe33 	bl	800e85c <_ZN23FrontendApplicationBaseD1Ev>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	0802f698 	.word	0x0802f698

08011c04 <_ZN19FrontendApplicationD0Ev>:
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7ff ffe7 	bl	8011be0 <_ZN19FrontendApplicationD1Ev>
 8011c12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f017 fd48 	bl	80296ac <_ZdlPvj>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b082      	sub	sp, #8
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011c34:	4618      	mov	r0, r3
 8011c36:	f000 f997 	bl	8011f68 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f008 fdcf 	bl	801a7e0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011c42:	bf00      	nop
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
	...

08011c4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7fc fe4c 	bl	800e8fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011c64:	4a03      	ldr	r2, [pc, #12]	; (8011c74 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	601a      	str	r2, [r3, #0]
{

}
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	0802f698 	.word	0x0802f698

08011c78 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>

alertBar::alertBar()
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fd fe1c 	bl	800f8c0 <_ZN12alertBarBaseC1Ev>
 8011c88:	4a03      	ldr	r2, [pc, #12]	; (8011c98 <_ZN8alertBarC1Ev+0x20>)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	601a      	str	r2, [r3, #0]
{

}
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0802f6e4 	.word	0x0802f6e4

08011c9c <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7fd ff24 	bl	800faf4 <_ZN12alertBarBase10initializeEv>
}
 8011cac:	bf00      	nop
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>

tempBox::tempBox()
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe f94c 	bl	800ff5c <_ZN11tempBoxBaseC1Ev>
 8011cc4:	4a03      	ldr	r2, [pc, #12]	; (8011cd4 <_ZN7tempBoxC1Ev+0x20>)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	601a      	str	r2, [r3, #0]
{

}
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	0802f778 	.word	0x0802f778

08011cd8 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fe fa5c 	bl	80101a0 <_ZN11tempBoxBase10initializeEv>
}
 8011ce8:	bf00      	nop
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
    {
    }
 8011cf8:	bf00      	nop
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
    {
    }
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
    {
 8011d20:	4a04      	ldr	r2, [pc, #16]	; (8011d34 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	601a      	str	r2, [r3, #0]
    }
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	370c      	adds	r7, #12
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	0802f81c 	.word	0x0802f81c

08011d38 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
    }
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff ffe9 	bl	8011d18 <_ZN8touchgfx9PresenterD1Ev>
 8011d46:	2104      	movs	r1, #4
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f017 fcaf 	bl	80296ac <_ZdlPvj>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4618      	mov	r0, r3
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
    {
 8011d60:	4a04      	ldr	r2, [pc, #16]	; (8011d74 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	601a      	str	r2, [r3, #0]
    }
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	370c      	adds	r7, #12
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr
 8011d74:	0802f81c 	.word	0x0802f81c

08011d78 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	4a06      	ldr	r2, [pc, #24]	; (8011d9c <_ZN13ModelListenerC1Ev+0x24>)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	605a      	str	r2, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr
 8011d9a:	bf00      	nop
 8011d9c:	0802f80c 	.word	0x0802f80c

08011da0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	4a04      	ldr	r2, [pc, #16]	; (8011dbc <_ZN13ModelListenerD1Ev+0x1c>)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	601a      	str	r2, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4618      	mov	r0, r3
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	0802f80c 	.word	0x0802f80c

08011dc0 <_ZN13ModelListenerD0Ev>:
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff ffe9 	bl	8011da0 <_ZN13ModelListenerD1Ev>
 8011dce:	2108      	movs	r1, #8
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f017 fc6b 	bl	80296ac <_ZdlPvj>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	4a09      	ldr	r2, [pc, #36]	; (8011e10 <_ZN13MainPresenterD1Ev+0x30>)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	601a      	str	r2, [r3, #0]
 8011dee:	4a09      	ldr	r2, [pc, #36]	; (8011e14 <_ZN13MainPresenterD1Ev+0x34>)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	605a      	str	r2, [r3, #4]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3304      	adds	r3, #4
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7ff ffd1 	bl	8011da0 <_ZN13ModelListenerD1Ev>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7ff ff89 	bl	8011d18 <_ZN8touchgfx9PresenterD1Ev>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	0802f834 	.word	0x0802f834
 8011e14:	0802f84c 	.word	0x0802f84c

08011e18 <_ZThn4_N13MainPresenterD1Ev>:
 8011e18:	f1a0 0004 	sub.w	r0, r0, #4
 8011e1c:	e7e0      	b.n	8011de0 <_ZN13MainPresenterD1Ev>
 8011e1e:	bf00      	nop

08011e20 <_ZN13MainPresenterD0Ev>:
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7ff ffd9 	bl	8011de0 <_ZN13MainPresenterD1Ev>
 8011e2e:	2110      	movs	r1, #16
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f017 fc3b 	bl	80296ac <_ZdlPvj>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <_ZThn4_N13MainPresenterD0Ev>:
 8011e40:	f1a0 0004 	sub.w	r0, r0, #4
 8011e44:	e7ec      	b.n	8011e20 <_ZN13MainPresenterD0Ev>
	...

08011e48 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
    : view(v)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7ff ff7f 	bl	8011d58 <_ZN8touchgfx9PresenterC1Ev>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	3304      	adds	r3, #4
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff ff8a 	bl	8011d78 <_ZN13ModelListenerC1Ev>
 8011e64:	4a06      	ldr	r2, [pc, #24]	; (8011e80 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	601a      	str	r2, [r3, #0]
 8011e6a:	4a06      	ldr	r2, [pc, #24]	; (8011e84 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	605a      	str	r2, [r3, #4]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	683a      	ldr	r2, [r7, #0]
 8011e74:	60da      	str	r2, [r3, #12]
{

}
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	0802f834 	.word	0x0802f834
 8011e84:	0802f84c 	.word	0x0802f84c

08011e88 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]

}
 8011e90:	bf00      	nop
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]

}
 8011ea4:	bf00      	nop
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	4a05      	ldr	r2, [pc, #20]	; (8011ed0 <_ZN8MainViewD1Ev+0x20>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fe fb3b 	bl	801053c <_ZN12MainViewBaseD1Ev>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	0802f85c 	.word	0x0802f85c

08011ed4 <_ZN8MainViewD0Ev>:
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7ff ffe7 	bl	8011eb0 <_ZN8MainViewD1Ev>
 8011ee2:	f243 7164 	movw	r1, #14180	; 0x3764
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f017 fbe0 	bl	80296ac <_ZdlPvj>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
	...

08011ef8 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fba4 	bl	8010650 <_ZN12MainViewBaseC1Ev>
 8011f08:	4a03      	ldr	r2, [pc, #12]	; (8011f18 <_ZN8MainViewC1Ev+0x20>)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	601a      	str	r2, [r3, #0]
{

}
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	0802f85c 	.word	0x0802f85c

08011f1c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7ff fbf0 	bl	801170c <_ZN12MainViewBase11setupScreenEv>
}
 8011f2c:	bf00      	nop
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fe fa4c 	bl	80103dc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011f44:	bf00      	nop
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2200      	movs	r2, #0
 8011f58:	601a      	str	r2, [r3, #0]
{

}
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]

}
 8011f70:	bf00      	nop
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
    {
 8011f84:	4a04      	ldr	r2, [pc, #16]	; (8011f98 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	601a      	str	r2, [r3, #0]
    }
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr
 8011f98:	0802f8ac 	.word	0x0802f8ac

08011f9c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
    }
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff ffe9 	bl	8011f7c <_ZN8touchgfx15TouchControllerD1Ev>
 8011faa:	2104      	movs	r1, #4
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f017 fb7d 	bl	80296ac <_ZdlPvj>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3714      	adds	r7, #20
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr
	...

08011fec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	4a05      	ldr	r2, [pc, #20]	; (801200c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	601a      	str	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7ff ffbd 	bl	8011f7c <_ZN8touchgfx15TouchControllerD1Ev>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	0802f894 	.word	0x0802f894

08012010 <_ZN20STM32TouchControllerD0Ev>:
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7ff ffe7 	bl	8011fec <_ZN20STM32TouchControllerD1Ev>
 801201e:	2104      	movs	r1, #4
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f017 fb43 	bl	80296ac <_ZdlPvj>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	4603      	mov	r3, r0
 8012038:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801203a:	79fb      	ldrb	r3, [r7, #7]
 801203c:	2b03      	cmp	r3, #3
 801203e:	d80c      	bhi.n	801205a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8012040:	a201      	add	r2, pc, #4	; (adr r2, 8012048 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8012042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012046:	bf00      	nop
 8012048:	08012059 	.word	0x08012059
 801204c:	08012059 	.word	0x08012059
 8012050:	08012059 	.word	0x08012059
 8012054:	08012059 	.word	0x08012059
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8012058:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801205a:	bf00      	nop
 801205c:	370c      	adds	r7, #12
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop

08012068 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012072:	79fb      	ldrb	r3, [r7, #7]
 8012074:	2b03      	cmp	r3, #3
 8012076:	d80c      	bhi.n	8012092 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8012078:	a201      	add	r2, pc, #4	; (adr r2, 8012080 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801207e:	bf00      	nop
 8012080:	08012091 	.word	0x08012091
 8012084:	08012091 	.word	0x08012091
 8012088:	08012091 	.word	0x08012091
 801208c:	08012091 	.word	0x08012091
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8012090:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	2b03      	cmp	r3, #3
 80120ae:	d80c      	bhi.n	80120ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80120b0:	a201      	add	r2, pc, #4	; (adr r2, 80120b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80120b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b6:	bf00      	nop
 80120b8:	080120c9 	.word	0x080120c9
 80120bc:	080120c9 	.word	0x080120c9
 80120c0:	080120c9 	.word	0x080120c9
 80120c4:	080120c9 	.word	0x080120c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80120c8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80120ca:	bf00      	nop
 80120cc:	370c      	adds	r7, #12
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop

080120d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
    {
 80120e0:	4a04      	ldr	r2, [pc, #16]	; (80120f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	601a      	str	r2, [r3, #0]
    }
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	4618      	mov	r0, r3
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	0802fd8c 	.word	0x0802fd8c

080120f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
    }
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff ffe9 	bl	80120d8 <_ZN8touchgfx3HALD1Ev>
 8012106:	217c      	movs	r1, #124	; 0x7c
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f017 facf 	bl	80296ac <_ZdlPvj>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	78fa      	ldrb	r2, [r7, #3]
 8012128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012134:	bf00      	nop
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	460b      	mov	r3, r1
 801214a:	807b      	strh	r3, [r7, #2]
 801214c:	4613      	mov	r3, r2
 801214e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8012150:	4b0c      	ldr	r3, [pc, #48]	; (8012184 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8012152:	881b      	ldrh	r3, [r3, #0]
 8012154:	887a      	ldrh	r2, [r7, #2]
 8012156:	429a      	cmp	r2, r3
 8012158:	d304      	bcc.n	8012164 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801215a:	4b0b      	ldr	r3, [pc, #44]	; (8012188 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801215c:	881b      	ldrh	r3, [r3, #0]
 801215e:	883a      	ldrh	r2, [r7, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d205      	bcs.n	8012170 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8012164:	4b09      	ldr	r3, [pc, #36]	; (801218c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8012166:	4a0a      	ldr	r2, [pc, #40]	; (8012190 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8012168:	219e      	movs	r1, #158	; 0x9e
 801216a:	480a      	ldr	r0, [pc, #40]	; (8012194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801216c:	f017 fb48 	bl	8029800 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8012170:	4a09      	ldr	r2, [pc, #36]	; (8012198 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8012172:	887b      	ldrh	r3, [r7, #2]
 8012174:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8012176:	4a09      	ldr	r2, [pc, #36]	; (801219c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8012178:	883b      	ldrh	r3, [r7, #0]
 801217a:	8013      	strh	r3, [r2, #0]
    }
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	2003c260 	.word	0x2003c260
 8012188:	2003c262 	.word	0x2003c262
 801218c:	0802d534 	.word	0x0802d534
 8012190:	0802d598 	.word	0x0802d598
 8012194:	0802d5dc 	.word	0x0802d5dc
 8012198:	2003c266 	.word	0x2003c266
 801219c:	2003c268 	.word	0x2003c268

080121a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d009      	beq.n	80121c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4610      	mov	r0, r2
 80121c0:	4798      	blx	r3
 80121c2:	4603      	mov	r3, r0
 80121c4:	e000      	b.n	80121c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 80121c6:	2300      	movs	r3, #0
    }
 80121c8:	4618      	mov	r0, r3
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f004 fd93 	bl	8016d04 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	33ac      	adds	r3, #172	; 0xac
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	4798      	blx	r3
    }
 80121ea:	bf00      	nop
 80121ec:	3708      	adds	r7, #8
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
        return false;
 80121fc:	2300      	movs	r3, #0
    }
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
	...

0801220c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d106      	bne.n	801222e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012220:	4b0f      	ldr	r3, [pc, #60]	; (8012260 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012222:	4a10      	ldr	r2, [pc, #64]	; (8012264 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012224:	f240 21d2 	movw	r1, #722	; 0x2d2
 8012228:	480f      	ldr	r0, [pc, #60]	; (8012268 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801222a:	f017 fae9 	bl	8029800 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2b00      	cmp	r3, #0
 801223e:	bf14      	ite	ne
 8012240:	2301      	movne	r3, #1
 8012242:	2300      	moveq	r3, #0
 8012244:	b2da      	uxtb	r2, r3
 8012246:	4b09      	ldr	r3, [pc, #36]	; (801226c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012248:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	338c      	adds	r3, #140	; 0x8c
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	6839      	ldr	r1, [r7, #0]
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	4798      	blx	r3
    }
 8012258:	bf00      	nop
 801225a:	3710      	adds	r7, #16
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	0802d620 	.word	0x0802d620
 8012264:	0802d658 	.word	0x0802d658
 8012268:	0802d5dc 	.word	0x0802d5dc
 801226c:	2003c26a 	.word	0x2003c26a

08012270 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	bf14      	ite	ne
 8012286:	2301      	movne	r3, #1
 8012288:	2300      	moveq	r3, #0
 801228a:	b2da      	uxtb	r2, r3
 801228c:	4b03      	ldr	r3, [pc, #12]	; (801229c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801228e:	701a      	strb	r2, [r3, #0]
    }
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	2003c26b 	.word	0x2003c26b

080122a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
        return 0;
 80122a8:	2300      	movs	r3, #0
    }
 80122aa:	4618      	mov	r0, r3
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80122b6:	b580      	push	{r7, lr}
 80122b8:	b082      	sub	sp, #8
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	460b      	mov	r3, r1
 80122c0:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d004      	beq.n	80122d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122ce:	887a      	ldrh	r2, [r7, #2]
 80122d0:	4610      	mov	r0, r2
 80122d2:	4798      	blx	r3
    }
 80122d4:	bf00      	nop
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	685a      	ldr	r2, [r3, #4]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	3318      	adds	r3, #24
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4610      	mov	r0, r2
 80122f4:	4798      	blx	r3
 80122f6:	4603      	mov	r3, r0
    }
 80122f8:	4618      	mov	r0, r3
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012314:	429a      	cmp	r2, r3
 8012316:	d011      	beq.n	801233c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012318:	4b14      	ldr	r3, [pc, #80]	; (801236c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d11e      	bne.n	801235e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012320:	4b13      	ldr	r3, [pc, #76]	; (8012370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8012326:	4b13      	ldr	r3, [pc, #76]	; (8012374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012328:	881a      	ldrh	r2, [r3, #0]
 801232a:	4b11      	ldr	r3, [pc, #68]	; (8012370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801232c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801232e:	4a11      	ldr	r2, [pc, #68]	; (8012374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012330:	89bb      	ldrh	r3, [r7, #12]
 8012332:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012334:	4b0d      	ldr	r3, [pc, #52]	; (801236c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012336:	2201      	movs	r2, #1
 8012338:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801233a:	e010      	b.n	801235e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801233c:	4b0b      	ldr	r3, [pc, #44]	; (801236c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00c      	beq.n	801235e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8012344:	4b0a      	ldr	r3, [pc, #40]	; (8012370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012346:	881b      	ldrh	r3, [r3, #0]
 8012348:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801234a:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801234c:	881a      	ldrh	r2, [r3, #0]
 801234e:	4b08      	ldr	r3, [pc, #32]	; (8012370 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012350:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8012352:	4a08      	ldr	r2, [pc, #32]	; (8012374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012354:	89fb      	ldrh	r3, [r7, #14]
 8012356:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8012358:	4b04      	ldr	r3, [pc, #16]	; (801236c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801235a:	2200      	movs	r2, #0
 801235c:	701a      	strb	r2, [r3, #0]
    }
 801235e:	bf00      	nop
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	2003c264 	.word	0x2003c264
 8012370:	2003c262 	.word	0x2003c262
 8012374:	2003c260 	.word	0x2003c260

08012378 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4618      	mov	r0, r3
 8012384:	f003 ff23 	bl	80161ce <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012388:	bf00      	nop
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	4a05      	ldr	r2, [pc, #20]	; (80123b0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	601a      	str	r2, [r3, #0]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff fe99 	bl	80120d8 <_ZN8touchgfx3HALD1Ev>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4618      	mov	r0, r3
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	0802fbe4 	.word	0x0802fbe4

080123b4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7ff ffe7 	bl	8012390 <_ZN20TouchGFXGeneratedHALD1Ev>
 80123c2:	217c      	movs	r1, #124	; 0x7c
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f017 f971 	bl	80296ac <_ZdlPvj>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7ff ffca 	bl	8012378 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80123e4:	bf00      	nop
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f002 fbf8 	bl	8014bec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80123fc:	bf00      	nop
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	f002 fcae 	bl	8014d70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012414:	4603      	mov	r3, r0
}
 8012416:	4618      	mov	r0, r3
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b082      	sub	sp, #8
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6839      	ldr	r1, [r7, #0]
 801242c:	4618      	mov	r0, r3
 801242e:	f002 fcad 	bl	8014d8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012432:	bf00      	nop
 8012434:	3708      	adds	r7, #8
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b082      	sub	sp, #8
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
 8012442:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6839      	ldr	r1, [r7, #0]
 8012448:	4618      	mov	r0, r3
 801244a:	f002 fcb5 	bl	8014db8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801244e:	bf00      	nop
 8012450:	3708      	adds	r7, #8
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b084      	sub	sp, #16
 801245a:	af00      	add	r7, sp, #0
 801245c:	60f8      	str	r0, [r7, #12]
 801245e:	60b9      	str	r1, [r7, #8]
 8012460:	607a      	str	r2, [r7, #4]
 8012462:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	68b9      	ldr	r1, [r7, #8]
 801246c:	f002 fcc2 	bl	8014df4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012470:	4603      	mov	r3, r0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b082      	sub	sp, #8
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4618      	mov	r0, r3
 8012486:	f002 fbef 	bl	8014c68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801248a:	bf00      	nop
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b082      	sub	sp, #8
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4618      	mov	r0, r3
 801249e:	f002 fbf3 	bl	8014c88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80124a2:	bf00      	nop
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b082      	sub	sp, #8
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f002 fbf5 	bl	8014ca4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80124ba:	bf00      	nop
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4618      	mov	r0, r3
 80124ce:	f002 fbf7 	bl	8014cc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b082      	sub	sp, #8
 80124de:	af00      	add	r7, sp, #0
 80124e0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f002 fc19 	bl	8014d1c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80124ea:	4603      	mov	r3, r0
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	4618      	mov	r0, r3
 8012500:	f002 fc1a 	bl	8014d38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012504:	bf00      	nop
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	4a05      	ldr	r2, [pc, #20]	; (801252c <_ZN11TouchGFXHALD1Ev+0x20>)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	601a      	str	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	f7ff ff37 	bl	8012390 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	0802f8c4 	.word	0x0802f8c4

08012530 <_ZN11TouchGFXHALD0Ev>:
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff ffe7 	bl	801250c <_ZN11TouchGFXHALD1Ev>
 801253e:	217c      	movs	r1, #124	; 0x7c
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f017 f8b3 	bl	80296ac <_ZdlPvj>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4618      	mov	r0, r3
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
    {
 8012558:	4a04      	ldr	r2, [pc, #16]	; (801256c <_ZN12MJPEGDecoderD1Ev+0x1c>)
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	601a      	str	r2, [r3, #0]
    }
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr
 801256c:	0802f9e0 	.word	0x0802f9e0

08012570 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
    }
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7ff ffe9 	bl	8012550 <_ZN12MJPEGDecoderD1Ev>
 801257e:	2104      	movs	r1, #4
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f017 f893 	bl	80296ac <_ZdlPvj>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	4618      	mov	r0, r3
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125b6:	4618      	mov	r0, r3
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
	...

080125c4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80125ca:	4b21      	ldr	r3, [pc, #132]	; (8012650 <SCB_CleanInvalidateDCache+0x8c>)
 80125cc:	2200      	movs	r2, #0
 80125ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80125d2:	f3bf 8f4f 	dsb	sy
}
 80125d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80125d8:	4b1d      	ldr	r3, [pc, #116]	; (8012650 <SCB_CleanInvalidateDCache+0x8c>)
 80125da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125de:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	0b5b      	lsrs	r3, r3, #13
 80125e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80125e8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	08db      	lsrs	r3, r3, #3
 80125ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80125f2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	015a      	lsls	r2, r3, #5
 80125f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80125fc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80125fe:	68ba      	ldr	r2, [r7, #8]
 8012600:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012602:	4913      	ldr	r1, [pc, #76]	; (8012650 <SCB_CleanInvalidateDCache+0x8c>)
 8012604:	4313      	orrs	r3, r2
 8012606:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	1e5a      	subs	r2, r3, #1
 801260e:	60ba      	str	r2, [r7, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	bf14      	ite	ne
 8012614:	2301      	movne	r3, #1
 8012616:	2300      	moveq	r3, #0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d000      	beq.n	8012620 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801261e:	e7e9      	b.n	80125f4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	1e5a      	subs	r2, r3, #1
 8012624:	60fa      	str	r2, [r7, #12]
 8012626:	2b00      	cmp	r3, #0
 8012628:	bf14      	ite	ne
 801262a:	2301      	movne	r3, #1
 801262c:	2300      	moveq	r3, #0
 801262e:	b2db      	uxtb	r3, r3
 8012630:	2b00      	cmp	r3, #0
 8012632:	d000      	beq.n	8012636 <SCB_CleanInvalidateDCache+0x72>
    do {
 8012634:	e7d9      	b.n	80125ea <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8012636:	f3bf 8f4f 	dsb	sy
}
 801263a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801263c:	f3bf 8f6f 	isb	sy
}
 8012640:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8012642:	bf00      	nop
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	e000ed00 	.word	0xe000ed00

08012654 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	4a04      	ldr	r2, [pc, #16]	; (8012670 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4618      	mov	r0, r3
 8012666:	370c      	adds	r7, #12
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr
 8012670:	0802f9e0 	.word	0x0802f9e0

08012674 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4618      	mov	r0, r3
 8012680:	f7ff ffe8 	bl	8012654 <_ZN12MJPEGDecoderC1Ev>
 8012684:	4a21      	ldr	r2, [pc, #132]	; (801270c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	615a      	str	r2, [r3, #20]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	619a      	str	r2, [r3, #24]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2200      	movs	r2, #0
 801269a:	61da      	str	r2, [r3, #28]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	621a      	str	r2, [r3, #32]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2200      	movs	r2, #0
 80126a6:	625a      	str	r2, [r3, #36]	; 0x24
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	629a      	str	r2, [r3, #40]	; 0x28
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2200      	movs	r2, #0
 80126b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	631a      	str	r2, [r3, #48]	; 0x30
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2200      	movs	r2, #0
 80126be:	635a      	str	r2, [r3, #52]	; 0x34
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	639a      	str	r2, [r3, #56]	; 0x38
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 80126ec:	f003 f904 	bl	80158f8 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 80126f0:	2200      	movs	r2, #0
 80126f2:	2100      	movs	r1, #0
 80126f4:	2001      	movs	r0, #1
 80126f6:	f7f7 fd3b 	bl	800a170 <osSemaphoreNew>
 80126fa:	4603      	mov	r3, r0
 80126fc:	4a04      	ldr	r2, [pc, #16]	; (8012710 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 80126fe:	6013      	str	r3, [r2, #0]
}
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	0802f99c 	.word	0x0802f99c
 8012710:	20033a04 	.word	0x20033a04

08012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012726:	2b00      	cmp	r3, #0
 8012728:	d008      	beq.n	801273c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012732:	68b9      	ldr	r1, [r7, #8]
 8012734:	1acb      	subs	r3, r1, r3
 8012736:	4413      	add	r3, r2
 8012738:	617b      	str	r3, [r7, #20]
 801273a:	e004      	b.n	8012746 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	4413      	add	r3, r2
 8012744:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8012746:	683a      	ldr	r2, [r7, #0]
 8012748:	6879      	ldr	r1, [r7, #4]
 801274a:	6978      	ldr	r0, [r7, #20]
 801274c:	f017 fff1 	bl	802a732 <strncmp>
 8012750:	4603      	mov	r3, r0
}
 8012752:	4618      	mov	r0, r3
 8012754:	3718      	adds	r7, #24
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}

0801275a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 801275a:	b480      	push	{r7}
 801275c:	b085      	sub	sp, #20
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
 8012762:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012768:	2b00      	cmp	r3, #0
 801276a:	d024      	beq.n	80127b6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	4413      	add	r3, r2
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	4619      	mov	r1, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	3301      	adds	r3, #1
 801278a:	4413      	add	r3, r2
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	021b      	lsls	r3, r3, #8
 8012790:	ea41 0203 	orr.w	r2, r1, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	3302      	adds	r3, #2
 801279c:	440b      	add	r3, r1
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	041b      	lsls	r3, r3, #16
 80127a2:	431a      	orrs	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	3303      	adds	r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	061b      	lsls	r3, r3, #24
 80127b2:	4313      	orrs	r3, r2
 80127b4:	e016      	b.n	80127e4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	4413      	add	r3, r2
 80127be:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	461a      	mov	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	3301      	adds	r3, #1
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	021b      	lsls	r3, r3, #8
 80127ce:	431a      	orrs	r2, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3302      	adds	r3, #2
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	041b      	lsls	r3, r3, #16
 80127d8:	431a      	orrs	r2, r3
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	3303      	adds	r3, #3
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	061b      	lsls	r3, r3, #24
 80127e2:	4313      	orrs	r3, r2
    }
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr

080127f0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d013      	beq.n	801282a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012806:	683a      	ldr	r2, [r7, #0]
 8012808:	1ad3      	subs	r3, r2, r3
 801280a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	4413      	add	r3, r2
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	4619      	mov	r1, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	3301      	adds	r3, #1
 8012820:	4413      	add	r3, r2
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	021b      	lsls	r3, r3, #8
 8012826:	430b      	orrs	r3, r1
 8012828:	e00c      	b.n	8012844 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	4413      	add	r3, r2
 8012832:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	461a      	mov	r2, r3
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3301      	adds	r3, #1
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	021b      	lsls	r3, r3, #8
 8012842:	4313      	orrs	r3, r2
    }
}
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012860:	2b00      	cmp	r3, #0
 8012862:	d033      	beq.n	80128cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	429a      	cmp	r2, r3
 801286c:	d909      	bls.n	8012882 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2209      	movs	r2, #9
 8012872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8012876:	4b19      	ldr	r3, [pc, #100]	; (80128dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8012878:	4a19      	ldr	r2, [pc, #100]	; (80128e0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 801287a:	21ad      	movs	r1, #173	; 0xad
 801287c:	4819      	ldr	r0, [pc, #100]	; (80128e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 801287e:	f016 ffbf 	bl	8029800 <__assert_func>
        }

        reader->seek(offset);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	330c      	adds	r3, #12
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	4610      	mov	r0, r2
 8012894:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	3310      	adds	r3, #16
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	4798      	blx	r3
 80128ac:	4603      	mov	r3, r0
 80128ae:	f083 0301 	eor.w	r3, r3, #1
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d003      	beq.n	80128c0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	220d      	movs	r2, #13
 80128bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ca:	e003      	b.n	80128d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	4413      	add	r3, r2
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3710      	adds	r7, #16
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	0802d6a8 	.word	0x0802d6a8
 80128e0:	0802d6bc 	.word	0x0802d6bc
 80128e4:	0802d700 	.word	0x0802d700

080128e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08e      	sub	sp, #56	; 0x38
 80128ec:	af04      	add	r7, sp, #16
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	4611      	mov	r1, r2
 80128f4:	461a      	mov	r2, r3
 80128f6:	460b      	mov	r3, r1
 80128f8:	80fb      	strh	r3, [r7, #6]
 80128fa:	4613      	mov	r3, r2
 80128fc:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	695b      	ldr	r3, [r3, #20]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8012906:	4b4e      	ldr	r3, [pc, #312]	; (8012a40 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8012908:	4a4e      	ldr	r2, [pc, #312]	; (8012a44 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 801290a:	21bf      	movs	r1, #191	; 0xbf
 801290c:	484e      	ldr	r0, [pc, #312]	; (8012a48 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 801290e:	f016 ff77 	bl	8029800 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	699b      	ldr	r3, [r3, #24]
 8012916:	2208      	movs	r2, #8
 8012918:	4619      	mov	r1, r3
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f7ff ff98 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	699b      	ldr	r3, [r3, #24]
 8012924:	4619      	mov	r1, r3
 8012926:	68f8      	ldr	r0, [r7, #12]
 8012928:	f7ff ff62 	bl	80127f0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801292c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	699b      	ldr	r3, [r3, #24]
 8012932:	3302      	adds	r3, #2
 8012934:	4619      	mov	r1, r3
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f7ff ff5a 	bl	80127f0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801293c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	3304      	adds	r3, #4
 8012944:	4619      	mov	r1, r3
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f7ff ff07 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801294c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 801294e:	f243 0330 	movw	r3, #12336	; 0x3030
 8012952:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8012954:	f246 3364 	movw	r3, #25444	; 0x6364
 8012958:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	699a      	ldr	r2, [r3, #24]
 801295e:	69bb      	ldr	r3, [r7, #24]
 8012960:	4413      	add	r3, r2
 8012962:	f103 0208 	add.w	r2, r3, #8
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801296a:	429a      	cmp	r2, r3
 801296c:	d255      	bcs.n	8012a1a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 801296e:	6a3b      	ldr	r3, [r7, #32]
 8012970:	f243 0230 	movw	r2, #12336	; 0x3030
 8012974:	4293      	cmp	r3, r2
 8012976:	d126      	bne.n	80129c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	f246 3264 	movw	r2, #25444	; 0x6364
 801297e:	4293      	cmp	r3, r2
 8012980:	d121      	bne.n	80129c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d01e      	beq.n	80129c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	699b      	ldr	r3, [r3, #24]
 801298c:	f103 0208 	add.w	r2, r3, #8
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	699b      	ldr	r3, [r3, #24]
 8012998:	69ba      	ldr	r2, [r7, #24]
 801299a:	4619      	mov	r1, r3
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f7ff ff57 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80129a2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	9302      	str	r3, [sp, #8]
 80129a8:	88bb      	ldrh	r3, [r7, #4]
 80129aa:	9301      	str	r3, [sp, #4]
 80129ac:	88fb      	ldrh	r3, [r7, #6]
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	69ba      	ldr	r2, [r7, #24]
 80129b4:	6939      	ldr	r1, [r7, #16]
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f000 fa8e 	bl	8012ed8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	695b      	ldr	r3, [r3, #20]
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 80129c6:	2300      	movs	r3, #0
 80129c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	699a      	ldr	r2, [r3, #24]
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	441a      	add	r2, r3
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d105      	bne.n	80129ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	699b      	ldr	r3, [r3, #24]
 80129e2:	f103 0208 	add.w	r2, r3, #8
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	3301      	adds	r3, #1
 80129f0:	f023 0201 	bic.w	r2, r3, #1
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	699a      	ldr	r2, [r3, #24]
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d114      	bne.n	8012a2e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2201      	movs	r2, #1
 8012a08:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	6a1a      	ldr	r2, [r3, #32]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8012a12:	2301      	movs	r3, #1
 8012a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a18:	e009      	b.n	8012a2e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	6a1a      	ldr	r2, [r3, #32]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8012a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a32:	f083 0301 	eor.w	r3, r3, #1
 8012a36:	b2db      	uxtb	r3, r3
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3728      	adds	r7, #40	; 0x28
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	0802d738 	.word	0x0802d738
 8012a44:	0802d784 	.word	0x0802d784
 8012a48:	0802d700 	.word	0x0802d700

08012a4c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	695b      	ldr	r3, [r3, #20]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d105      	bne.n	8012a68 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 8012a5c:	4b37      	ldr	r3, [pc, #220]	; (8012b3c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 8012a5e:	4a38      	ldr	r2, [pc, #224]	; (8012b40 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8012a60:	21f3      	movs	r1, #243	; 0xf3
 8012a62:	4838      	ldr	r0, [pc, #224]	; (8012b44 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8012a64:	f016 fecc 	bl	8029800 <__assert_func>

    readData(currentMovieOffset, 8);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	699b      	ldr	r3, [r3, #24]
 8012a6c:	2208      	movs	r2, #8
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7ff feed 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	699b      	ldr	r3, [r3, #24]
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f7ff fe6b 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012a84:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	699a      	ldr	r2, [r3, #24]
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	f103 0208 	add.w	r2, r3, #8
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d243      	bcs.n	8012b22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	699a      	ldr	r2, [r3, #24]
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	f103 0208 	add.w	r2, r3, #8
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	699b      	ldr	r3, [r3, #24]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	f023 0201 	bic.w	r2, r3, #1
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	695b      	ldr	r3, [r3, #20]
 8012abc:	1c5a      	adds	r2, r3, #1
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	699b      	ldr	r3, [r3, #24]
 8012ac6:	2208      	movs	r2, #8
 8012ac8:	4619      	mov	r1, r3
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7ff fec0 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	699b      	ldr	r3, [r3, #24]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff fe8a 	bl	80127f0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8012adc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	699b      	ldr	r3, [r3, #24]
 8012ae2:	3302      	adds	r3, #2
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff fe82 	bl	80127f0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8012aec:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	699b      	ldr	r3, [r3, #24]
 8012af2:	3304      	adds	r3, #4
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7ff fe2f 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012afc:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8012afe:	f243 0330 	movw	r3, #12336	; 0x3030
 8012b02:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8012b04:	f246 3364 	movw	r3, #25444	; 0x6364
 8012b08:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	f243 0230 	movw	r2, #12336	; 0x3030
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d1b8      	bne.n	8012a86 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f246 3264 	movw	r2, #25444	; 0x6364
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d1b3      	bne.n	8012a86 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e007      	b.n	8012b32 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2201      	movs	r2, #1
 8012b26:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6a1a      	ldr	r2, [r3, #32]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	619a      	str	r2, [r3, #24]
    return false;
 8012b30:	2300      	movs	r3, #0
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3718      	adds	r7, #24
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	0802d738 	.word	0x0802d738
 8012b40:	0802d7e0 	.word	0x0802d7e0
 8012b44:	0802d700 	.word	0x0802d700

08012b48 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	68ba      	ldr	r2, [r7, #8]
 8012b58:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2200      	movs	r2, #0
 8012b64:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f000 f834 	bl	8012bd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	683a      	ldr	r2, [r7, #0]
 8012b82:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	3308      	adds	r3, #8
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	6838      	ldr	r0, [r7, #0]
 8012b94:	4798      	blx	r3
 8012b96:	4602      	mov	r2, r0
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 f819 	bl	8012bd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8012ba2:	bf00      	nop
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 8012baa:	b480      	push	{r7}
 8012bac:	b083      	sub	sp, #12
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d103      	bne.n	8012bc2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d001      	beq.n	8012bc6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e000      	b.n	8012bc8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 8012bc6:	2300      	movs	r3, #0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b08a      	sub	sp, #40	; 0x28
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 8012bea:	2248      	movs	r2, #72	; 0x48
 8012bec:	2100      	movs	r1, #0
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f7ff fe2e 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6999      	ldr	r1, [r3, #24]
 8012bf8:	2304      	movs	r3, #4
 8012bfa:	4aa5      	ldr	r2, [pc, #660]	; (8012e90 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff fd89 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	bf14      	ite	ne
 8012c08:	2301      	movne	r3, #1
 8012c0a:	2300      	moveq	r3, #0
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00a      	beq.n	8012c28 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2203      	movs	r2, #3
 8012c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 8012c1a:	4b9e      	ldr	r3, [pc, #632]	; (8012e94 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8012c1c:	4a9e      	ldr	r2, [pc, #632]	; (8012e98 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8012c1e:	f240 113b 	movw	r1, #315	; 0x13b
 8012c22:	489e      	ldr	r0, [pc, #632]	; (8012e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012c24:	f016 fdec 	bl	8029800 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	699b      	ldr	r3, [r3, #24]
 8012c2c:	f103 0208 	add.w	r2, r3, #8
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6999      	ldr	r1, [r3, #24]
 8012c38:	2304      	movs	r3, #4
 8012c3a:	4a99      	ldr	r2, [pc, #612]	; (8012ea0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff fd69 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	bf14      	ite	ne
 8012c48:	2301      	movne	r3, #1
 8012c4a:	2300      	moveq	r3, #0
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00a      	beq.n	8012c68 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2204      	movs	r2, #4
 8012c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 8012c5a:	4b92      	ldr	r3, [pc, #584]	; (8012ea4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 8012c5c:	4a8e      	ldr	r2, [pc, #568]	; (8012e98 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8012c5e:	f240 1143 	movw	r1, #323	; 0x143
 8012c62:	488e      	ldr	r0, [pc, #568]	; (8012e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012c64:	f016 fdcc 	bl	8029800 <__assert_func>
    }

    currentMovieOffset += 4;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	699b      	ldr	r3, [r3, #24]
 8012c6c:	1d1a      	adds	r2, r3, #4
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6999      	ldr	r1, [r3, #24]
 8012c76:	2304      	movs	r3, #4
 8012c78:	4a8b      	ldr	r2, [pc, #556]	; (8012ea8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7ff fd4a 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	bf14      	ite	ne
 8012c86:	2301      	movne	r3, #1
 8012c88:	2300      	moveq	r3, #0
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00a      	beq.n	8012ca6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2205      	movs	r2, #5
 8012c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8012c98:	4b84      	ldr	r3, [pc, #528]	; (8012eac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8012c9a:	4a7f      	ldr	r2, [pc, #508]	; (8012e98 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8012c9c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8012ca0:	487e      	ldr	r0, [pc, #504]	; (8012e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012ca2:	f016 fdad 	bl	8029800 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	699b      	ldr	r3, [r3, #24]
 8012caa:	3304      	adds	r3, #4
 8012cac:	4619      	mov	r1, r3
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7ff fd53 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012cb4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	699b      	ldr	r3, [r3, #24]
 8012cba:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8012cc2:	4b7b      	ldr	r3, [pc, #492]	; (8012eb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8012cc4:	4a74      	ldr	r2, [pc, #464]	; (8012e98 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8012cc6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012cca:	4874      	ldr	r0, [pc, #464]	; (8012e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012ccc:	f016 fd98 	bl	8029800 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	699b      	ldr	r3, [r3, #24]
 8012cda:	3308      	adds	r3, #8
 8012cdc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8012cde:	2304      	movs	r3, #4
 8012ce0:	4a74      	ldr	r2, [pc, #464]	; (8012eb4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8012ce2:	6979      	ldr	r1, [r7, #20]
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff fd15 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	bf14      	ite	ne
 8012cf0:	2301      	movne	r3, #1
 8012cf2:	2300      	moveq	r3, #0
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d006      	beq.n	8012d08 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2206      	movs	r2, #6
 8012cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8012d02:	2300      	movs	r3, #0
 8012d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8012d0e:	2304      	movs	r3, #4
 8012d10:	4a69      	ldr	r2, [pc, #420]	; (8012eb8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8012d12:	6979      	ldr	r1, [r7, #20]
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7ff fcfd 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	bf14      	ite	ne
 8012d20:	2301      	movne	r3, #1
 8012d22:	2300      	moveq	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d006      	beq.n	8012d38 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2207      	movs	r2, #7
 8012d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8012d32:	2300      	movs	r3, #0
 8012d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8012d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d028      	beq.n	8012d92 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	3308      	adds	r3, #8
 8012d44:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8012d46:	6979      	ldr	r1, [r7, #20]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7ff fd06 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	4a5a      	ldr	r2, [pc, #360]	; (8012ebc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8012d52:	fba2 2303 	umull	r2, r3, r2, r3
 8012d56:	099a      	lsrs	r2, r3, #6
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	3310      	adds	r3, #16
 8012d60:	4619      	mov	r1, r3
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f7ff fcf9 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012d68:	4602      	mov	r2, r0
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	3320      	adds	r3, #32
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ff fcf0 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	3324      	adds	r3, #36	; 0x24
 8012d84:	4619      	mov	r1, r3
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fce7 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8012d92:	69ba      	ldr	r2, [r7, #24]
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	4413      	add	r3, r2
 8012d98:	3308      	adds	r3, #8
 8012d9a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 8012d9c:	220c      	movs	r2, #12
 8012d9e:	6a39      	ldr	r1, [r7, #32]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7ff fd55 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8012da6:	6a3b      	ldr	r3, [r7, #32]
 8012da8:	f103 0108 	add.w	r1, r3, #8
 8012dac:	2304      	movs	r3, #4
 8012dae:	4a44      	ldr	r2, [pc, #272]	; (8012ec0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff fcaf 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00b      	beq.n	8012dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d106      	bne.n	8012dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dca:	6a3a      	ldr	r2, [r7, #32]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d201      	bcs.n	8012dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e000      	b.n	8012dd6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d012      	beq.n	8012e00 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8012dda:	6a3b      	ldr	r3, [r7, #32]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	4619      	mov	r1, r3
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f7ff fcba 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012de6:	4603      	mov	r3, r0
 8012de8:	3308      	adds	r3, #8
 8012dea:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8012dec:	6a3a      	ldr	r2, [r7, #32]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	4413      	add	r3, r2
 8012df2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8012df4:	220c      	movs	r2, #12
 8012df6:	6a39      	ldr	r1, [r7, #32]
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff fd29 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8012dfe:	e7d2      	b.n	8012da6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d004      	beq.n	8012e14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	220a      	movs	r2, #10
 8012e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8012e12:	e05e      	b.n	8012ed2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8012e14:	6a3b      	ldr	r3, [r7, #32]
 8012e16:	f103 020c 	add.w	r2, r3, #12
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8012e1e:	6a3b      	ldr	r3, [r7, #32]
 8012e20:	3304      	adds	r3, #4
 8012e22:	4619      	mov	r1, r3
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7ff fc98 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	4413      	add	r3, r2
 8012e30:	f103 0208 	add.w	r2, r3, #8
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8012e38:	6a3b      	ldr	r3, [r7, #32]
 8012e3a:	3304      	adds	r3, #4
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff fc8b 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012e44:	4603      	mov	r3, r0
 8012e46:	3308      	adds	r3, #8
 8012e48:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 8012e4a:	6a3a      	ldr	r2, [r7, #32]
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	4413      	add	r3, r2
 8012e50:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8012e52:	2204      	movs	r2, #4
 8012e54:	6a39      	ldr	r1, [r7, #32]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7ff fcfa 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8012e5c:	2304      	movs	r3, #4
 8012e5e:	4a19      	ldr	r2, [pc, #100]	; (8012ec4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8012e60:	6a39      	ldr	r1, [r7, #32]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7ff fc56 	bl	8012714 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	bf0c      	ite	eq
 8012e6e:	2301      	moveq	r3, #1
 8012e70:	2300      	movne	r3, #0
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d027      	beq.n	8012ec8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6a3a      	ldr	r2, [r7, #32]
 8012e7c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2201      	movs	r2, #1
 8012e82:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	699a      	ldr	r2, [r3, #24]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	621a      	str	r2, [r3, #32]
 8012e8c:	e021      	b.n	8012ed2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 8012e8e:	bf00      	nop
 8012e90:	0802d814 	.word	0x0802d814
 8012e94:	0802d81c 	.word	0x0802d81c
 8012e98:	0802d838 	.word	0x0802d838
 8012e9c:	0802d700 	.word	0x0802d700
 8012ea0:	0802d868 	.word	0x0802d868
 8012ea4:	0802d870 	.word	0x0802d870
 8012ea8:	0802d888 	.word	0x0802d888
 8012eac:	0802d890 	.word	0x0802d890
 8012eb0:	0802d8a8 	.word	0x0802d8a8
 8012eb4:	0802d8b4 	.word	0x0802d8b4
 8012eb8:	0802d8bc 	.word	0x0802d8bc
 8012ebc:	10624dd3 	.word	0x10624dd3
 8012ec0:	0802d8c4 	.word	0x0802d8c4
 8012ec4:	0802d8cc 	.word	0x0802d8cc
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	220b      	movs	r2, #11
 8012ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8012ed0:	bf00      	nop
}
 8012ed2:	3728      	adds	r7, #40	; 0x28
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b084      	sub	sp, #16
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d04c      	beq.n	8012f86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xae>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d04a      	beq.n	8012f88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 4;
 8012ef2:	4b27      	ldr	r3, [pc, #156]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	68db      	ldr	r3, [r3, #12]
 8012efc:	4a24      	ldr	r2, [pc, #144]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012efe:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8012f00:	4b23      	ldr	r3, [pc, #140]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f003 030f 	and.w	r3, r3, #15
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d006      	beq.n	8012f1a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8012f0c:	4b20      	ldr	r3, [pc, #128]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f023 030f 	bic.w	r3, r3, #15
 8012f14:	3310      	adds	r3, #16
 8012f16:	4a1e      	ldr	r2, [pc, #120]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f18:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 0 * JPEG_ConvertorParams.bytes_pr_pixel;
 8012f1a:	4b1d      	ldr	r3, [pc, #116]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8012f20:	4b1b      	ldr	r3, [pc, #108]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	091b      	lsrs	r3, r3, #4
 8012f26:	4a1a      	ldr	r2, [pc, #104]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f28:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	f003 030f 	and.w	r3, r3, #15
 8012f32:	f1c3 0310 	rsb	r3, r3, #16
 8012f36:	4a16      	ldr	r2, [pc, #88]	; (8012f90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012f38:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	68b9      	ldr	r1, [r7, #8]
 8012f40:	4814      	ldr	r0, [pc, #80]	; (8012f94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012f42:	f000 f8ed 	bl	8013120 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8012f46:	4813      	ldr	r0, [pc, #76]	; (8012f94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012f48:	f000 fa08 	bl	801335c <JPEG_OutputHandler>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	4a12      	ldr	r2, [pc, #72]	; (8012f98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012f50:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8012f52:	4b11      	ldr	r3, [pc, #68]	; (8012f98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	bf0c      	ite	eq
 8012f5a:	2301      	moveq	r3, #1
 8012f5c:	2300      	movne	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d006      	beq.n	8012f72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x9a>
        {
          SEM_WAIT(semDecodingDone);
 8012f64:	4b0d      	ldr	r3, [pc, #52]	; (8012f9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f04f 31ff 	mov.w	r1, #4294967295
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f7 f99b 	bl	800a2a8 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8012f72:	4b09      	ldr	r3, [pc, #36]	; (8012f98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	bf14      	ite	ne
 8012f7a:	2301      	movne	r3, #1
 8012f7c:	2300      	moveq	r3, #0
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
      do
 8012f84:	e7df      	b.n	8012f46 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6e>
        return;
 8012f86:	bf00      	nop
    }
}
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	20033a08 	.word	0x20033a08
 8012f94:	20000800 	.word	0x20000800
 8012f98:	200339f4 	.word	0x200339f4
 8012f9c:	20033a04 	.word	0x20033a04

08012fa0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b086      	sub	sp, #24
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]
 8012fac:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	2208      	movs	r2, #8
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	f7ff fc4a 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	699b      	ldr	r3, [r3, #24]
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f7ff fbc8 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012fca:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	699b      	ldr	r3, [r3, #24]
 8012fd0:	3308      	adds	r3, #8
 8012fd2:	697a      	ldr	r2, [r7, #20]
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f7ff fc3a 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8012fdc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d015      	beq.n	8013010 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	697a      	ldr	r2, [r7, #20]
 8012fe8:	6939      	ldr	r1, [r7, #16]
 8012fea:	480c      	ldr	r0, [pc, #48]	; (801301c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8012fec:	f000 f898 	bl	8013120 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8012ff0:	480a      	ldr	r0, [pc, #40]	; (801301c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8012ff2:	f000 f9b3 	bl	801335c <JPEG_OutputHandler>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	4a09      	ldr	r2, [pc, #36]	; (8013020 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8012ffa:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 8012ffc:	4b08      	ldr	r3, [pc, #32]	; (8013020 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	bf0c      	ite	eq
 8013004:	2301      	moveq	r3, #1
 8013006:	2300      	movne	r3, #0
 8013008:	b2db      	uxtb	r3, r3
 801300a:	2b00      	cmp	r3, #0
 801300c:	d000      	beq.n	8013010 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 801300e:	e7ef      	b.n	8012ff0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8013010:	2301      	movs	r3, #1
}
 8013012:	4618      	mov	r0, r3
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	20000800 	.word	0x20000800
 8013020:	200339f4 	.word	0x200339f4

08013024 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
 8013030:	807b      	strh	r3, [r7, #2]
    assert(0);
 8013032:	4b03      	ldr	r3, [pc, #12]	; (8013040 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8013034:	4a03      	ldr	r2, [pc, #12]	; (8013044 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8013036:	f240 11d1 	movw	r1, #465	; 0x1d1
 801303a:	4803      	ldr	r0, [pc, #12]	; (8013048 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 801303c:	f016 fbe0 	bl	8029800 <__assert_func>
 8013040:	0802d8d4 	.word	0x0802d8d4
 8013044:	0802d8d8 	.word	0x0802d8d8
 8013048:	0802d700 	.word	0x0802d700

0801304c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d101      	bne.n	8013060 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 801305c:	2301      	movs	r3, #1
 801305e:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	332c      	adds	r3, #44	; 0x2c
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	4798      	blx	r3
 801306c:	4602      	mov	r2, r0
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	4293      	cmp	r3, r2
 8013072:	bf8c      	ite	hi
 8013074:	2301      	movhi	r3, #1
 8013076:	2300      	movls	r3, #0
 8013078:	b2db      	uxtb	r3, r3
 801307a:	2b00      	cmp	r3, #0
 801307c:	d006      	beq.n	801308c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	332c      	adds	r3, #44	; 0x2c
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	4798      	blx	r3
 801308a:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	69da      	ldr	r2, [r3, #28]
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	3b01      	subs	r3, #1
 8013094:	011b      	lsls	r3, r3, #4
 8013096:	4413      	add	r3, r2
 8013098:	3308      	adds	r3, #8
 801309a:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 801309c:	2210      	movs	r2, #16
 801309e:	68f9      	ldr	r1, [r7, #12]
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff fbd5 	bl	8012850 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	3308      	adds	r3, #8
 80130aa:	4619      	mov	r1, r3
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7ff fb54 	bl	801275a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80130b2:	4602      	mov	r2, r0
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a1b      	ldr	r3, [r3, #32]
 80130b8:	4413      	add	r3, r2
 80130ba:	1f1a      	subs	r2, r3, #4
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	615a      	str	r2, [r3, #20]
}
 80130c6:	bf00      	nop
 80130c8:	3710      	adds	r7, #16
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 80130ce:	b480      	push	{r7}
 80130d0:	b083      	sub	sp, #12
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	689b      	ldr	r3, [r3, #8]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	370c      	adds	r7, #12
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr

080130e6 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 80130e6:	b480      	push	{r7}
 80130e8:	b083      	sub	sp, #12
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	460b      	mov	r3, r1
 80130f0:	70fb      	strb	r3, [r7, #3]

}
 80130f2:	bf00      	nop
 80130f4:	370c      	adds	r7, #12
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr

080130fe <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 80130fe:	b490      	push	{r4, r7}
 8013100:	b082      	sub	sp, #8
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
 8013106:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8013108:	683a      	ldr	r2, [r7, #0]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4614      	mov	r4, r2
 801310e:	3304      	adds	r3, #4
 8013110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013116:	bf00      	nop
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bc90      	pop	{r4, r7}
 801311e:	4770      	bx	lr

08013120 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b088      	sub	sp, #32
 8013124:	af02      	add	r7, sp, #8
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
 801312c:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 801312e:	4a28      	ldr	r2, [pc, #160]	; (80131d0 <JPEG_Decode_DMA+0xb0>)
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8013134:	4b27      	ldr	r3, [pc, #156]	; (80131d4 <JPEG_Decode_DMA+0xb4>)
 8013136:	2200      	movs	r2, #0
 8013138:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 801313a:	4b27      	ldr	r3, [pc, #156]	; (80131d8 <JPEG_Decode_DMA+0xb8>)
 801313c:	2200      	movs	r2, #0
 801313e:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8013140:	4b26      	ldr	r3, [pc, #152]	; (80131dc <JPEG_Decode_DMA+0xbc>)
 8013142:	2200      	movs	r2, #0
 8013144:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8013146:	4b26      	ldr	r3, [pc, #152]	; (80131e0 <JPEG_Decode_DMA+0xc0>)
 8013148:	2200      	movs	r2, #0
 801314a:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	4a25      	ldr	r2, [pc, #148]	; (80131e4 <JPEG_Decode_DMA+0xc4>)
 8013150:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8013152:	4a25      	ldr	r2, [pc, #148]	; (80131e8 <JPEG_Decode_DMA+0xc8>)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8013158:	4b24      	ldr	r3, [pc, #144]	; (80131ec <JPEG_Decode_DMA+0xcc>)
 801315a:	2200      	movs	r2, #0
 801315c:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 801315e:	2300      	movs	r3, #0
 8013160:	617b      	str	r3, [r7, #20]
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	2b01      	cmp	r3, #1
 8013166:	d816      	bhi.n	8013196 <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8013168:	4921      	ldr	r1, [pc, #132]	; (80131f0 <JPEG_Decode_DMA+0xd0>)
 801316a:	697a      	ldr	r2, [r7, #20]
 801316c:	4613      	mov	r3, r2
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	4413      	add	r3, r2
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	440b      	add	r3, r1
 8013176:	2200      	movs	r2, #0
 8013178:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 801317a:	491d      	ldr	r1, [pc, #116]	; (80131f0 <JPEG_Decode_DMA+0xd0>)
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	4613      	mov	r3, r2
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	4413      	add	r3, r2
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	440b      	add	r3, r1
 8013188:	3308      	adds	r3, #8
 801318a:	2200      	movs	r2, #0
 801318c:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	3301      	adds	r3, #1
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e7e5      	b.n	8013162 <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8013196:	4b11      	ldr	r3, [pc, #68]	; (80131dc <JPEG_Decode_DMA+0xbc>)
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	4915      	ldr	r1, [pc, #84]	; (80131f0 <JPEG_Decode_DMA+0xd0>)
 801319c:	4613      	mov	r3, r2
 801319e:	005b      	lsls	r3, r3, #1
 80131a0:	4413      	add	r3, r2
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	440b      	add	r3, r1
 80131a6:	3304      	adds	r3, #4
 80131a8:	6819      	ldr	r1, [r3, #0]
 80131aa:	4b12      	ldr	r3, [pc, #72]	; (80131f4 <JPEG_Decode_DMA+0xd4>)
 80131ac:	68da      	ldr	r2, [r3, #12]
 80131ae:	4613      	mov	r3, r2
 80131b0:	005b      	lsls	r3, r3, #1
 80131b2:	4413      	add	r3, r2
 80131b4:	01db      	lsls	r3, r3, #7
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	460b      	mov	r3, r1
 80131ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80131be:	68b9      	ldr	r1, [r7, #8]
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f7f1 fadf 	bl	8004784 <HAL_JPEG_Decode_DMA>

    return 0;
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3718      	adds	r7, #24
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	200339d4 	.word	0x200339d4
 80131d4:	200339f0 	.word	0x200339f0
 80131d8:	200339e8 	.word	0x200339e8
 80131dc:	200339ec 	.word	0x200339ec
 80131e0:	200339d8 	.word	0x200339d8
 80131e4:	200339e0 	.word	0x200339e0
 80131e8:	200339dc 	.word	0x200339dc
 80131ec:	20033a00 	.word	0x20033a00
 80131f0:	20000024 	.word	0x20000024
 80131f4:	20033a08 	.word	0x20033a08

080131f8 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8013202:	4b14      	ldr	r3, [pc, #80]	; (8013254 <HAL_JPEG_GetDataCallback+0x5c>)
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	4413      	add	r3, r2
 801320a:	4a12      	ldr	r2, [pc, #72]	; (8013254 <HAL_JPEG_GetDataCallback+0x5c>)
 801320c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 801320e:	4b11      	ldr	r3, [pc, #68]	; (8013254 <HAL_JPEG_GetDataCallback+0x5c>)
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	4b11      	ldr	r3, [pc, #68]	; (8013258 <HAL_JPEG_GetDataCallback+0x60>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	429a      	cmp	r2, r3
 8013218:	d218      	bcs.n	801324c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 801321a:	4b10      	ldr	r3, [pc, #64]	; (801325c <HAL_JPEG_GetDataCallback+0x64>)
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	4413      	add	r3, r2
 8013222:	4a0e      	ldr	r2, [pc, #56]	; (801325c <HAL_JPEG_GetDataCallback+0x64>)
 8013224:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8013226:	4b0c      	ldr	r3, [pc, #48]	; (8013258 <HAL_JPEG_GetDataCallback+0x60>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	4b0a      	ldr	r3, [pc, #40]	; (8013254 <HAL_JPEG_GetDataCallback+0x5c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8013232:	4b0a      	ldr	r3, [pc, #40]	; (801325c <HAL_JPEG_GetDataCallback+0x64>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4619      	mov	r1, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801323e:	bf28      	it	cs
 8013240:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8013244:	461a      	mov	r2, r3
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7f1 fc27 	bl	8004a9a <HAL_JPEG_ConfigInputBuffer>
  }
}
 801324c:	bf00      	nop
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	200339d8 	.word	0x200339d8
 8013258:	200339dc 	.word	0x200339dc
 801325c:	200339e0 	.word	0x200339e0

08013260 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 801326c:	4b27      	ldr	r3, [pc, #156]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	4927      	ldr	r1, [pc, #156]	; (8013310 <HAL_JPEG_DataReadyCallback+0xb0>)
 8013272:	4613      	mov	r3, r2
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	4413      	add	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	440b      	add	r3, r1
 801327c:	2201      	movs	r2, #1
 801327e:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8013280:	4b22      	ldr	r3, [pc, #136]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	4922      	ldr	r1, [pc, #136]	; (8013310 <HAL_JPEG_DataReadyCallback+0xb0>)
 8013286:	4613      	mov	r3, r2
 8013288:	005b      	lsls	r3, r3, #1
 801328a:	4413      	add	r3, r2
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	440b      	add	r3, r1
 8013290:	3308      	adds	r3, #8
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 8013296:	4b1d      	ldr	r3, [pc, #116]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	3301      	adds	r3, #1
 801329c:	4a1b      	ldr	r2, [pc, #108]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 801329e:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80132a0:	4b1a      	ldr	r3, [pc, #104]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d902      	bls.n	80132ae <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80132a8:	4b18      	ldr	r3, [pc, #96]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 80132aa:	2200      	movs	r2, #0
 80132ac:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80132ae:	4b17      	ldr	r3, [pc, #92]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	4917      	ldr	r1, [pc, #92]	; (8013310 <HAL_JPEG_DataReadyCallback+0xb0>)
 80132b4:	4613      	mov	r3, r2
 80132b6:	005b      	lsls	r3, r3, #1
 80132b8:	4413      	add	r3, r2
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	440b      	add	r3, r1
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d006      	beq.n	80132d2 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80132c4:	2102      	movs	r1, #2
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f7f1 fabf 	bl	800484a <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 80132cc:	4b11      	ldr	r3, [pc, #68]	; (8013314 <HAL_JPEG_DataReadyCallback+0xb4>)
 80132ce:	2201      	movs	r2, #1
 80132d0:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80132d2:	4b0e      	ldr	r3, [pc, #56]	; (801330c <HAL_JPEG_DataReadyCallback+0xac>)
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	490e      	ldr	r1, [pc, #56]	; (8013310 <HAL_JPEG_DataReadyCallback+0xb0>)
 80132d8:	4613      	mov	r3, r2
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	4413      	add	r3, r2
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	440b      	add	r3, r1
 80132e2:	3304      	adds	r3, #4
 80132e4:	6819      	ldr	r1, [r3, #0]
 80132e6:	4b0c      	ldr	r3, [pc, #48]	; (8013318 <HAL_JPEG_DataReadyCallback+0xb8>)
 80132e8:	68da      	ldr	r2, [r3, #12]
 80132ea:	4613      	mov	r3, r2
 80132ec:	005b      	lsls	r3, r3, #1
 80132ee:	4413      	add	r3, r2
 80132f0:	01db      	lsls	r3, r3, #7
 80132f2:	461a      	mov	r2, r3
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	f7f1 fbe2 	bl	8004abe <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 80132fa:	4b08      	ldr	r3, [pc, #32]	; (801331c <HAL_JPEG_DataReadyCallback+0xbc>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7f7 f838 	bl	800a374 <osSemaphoreRelease>
}
 8013304:	bf00      	nop
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	200339ec 	.word	0x200339ec
 8013310:	20000024 	.word	0x20000024
 8013314:	200339f0 	.word	0x200339f0
 8013318:	20033a08 	.word	0x20033a08
 801331c:	20033a04 	.word	0x20033a04

08013320 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7f1 fbe4 	bl	8004af6 <HAL_JPEG_GetState>
 801332e:	4603      	mov	r3, r0
 8013330:	73fb      	strb	r3, [r7, #15]
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7f1 fbed 	bl	8004b12 <HAL_JPEG_GetError>
 8013338:	60b8      	str	r0, [r7, #8]
  while(1){}
 801333a:	e7fe      	b.n	801333a <HAL_JPEG_ErrorCallback+0x1a>

0801333c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8013344:	4b04      	ldr	r3, [pc, #16]	; (8013358 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8013346:	2201      	movs	r2, #1
 8013348:	601a      	str	r2, [r3, #0]
}
 801334a:	bf00      	nop
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	200339e4 	.word	0x200339e4

0801335c <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 801335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801335e:	b087      	sub	sp, #28
 8013360:	af02      	add	r7, sp, #8
 8013362:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8013364:	4b55      	ldr	r3, [pc, #340]	; (80134bc <JPEG_OutputHandler+0x160>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	4955      	ldr	r1, [pc, #340]	; (80134c0 <JPEG_OutputHandler+0x164>)
 801336a:	4613      	mov	r3, r2
 801336c:	005b      	lsls	r3, r3, #1
 801336e:	4413      	add	r3, r2
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	440b      	add	r3, r1
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	2b01      	cmp	r3, #1
 8013378:	d160      	bne.n	801343c <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801337a:	4b52      	ldr	r3, [pc, #328]	; (80134c4 <JPEG_OutputHandler+0x168>)
 801337c:	695b      	ldr	r3, [r3, #20]
 801337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013382:	2b00      	cmp	r3, #0
 8013384:	bf14      	ite	ne
 8013386:	2301      	movne	r3, #1
 8013388:	2300      	moveq	r3, #0
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d001      	beq.n	8013394 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 8013390:	f7ff f918 	bl	80125c4 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8013394:	4b4c      	ldr	r3, [pc, #304]	; (80134c8 <JPEG_OutputHandler+0x16c>)
 8013396:	681c      	ldr	r4, [r3, #0]
 8013398:	4b48      	ldr	r3, [pc, #288]	; (80134bc <JPEG_OutputHandler+0x160>)
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	4948      	ldr	r1, [pc, #288]	; (80134c0 <JPEG_OutputHandler+0x164>)
 801339e:	4613      	mov	r3, r2
 80133a0:	005b      	lsls	r3, r3, #1
 80133a2:	4413      	add	r3, r2
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	440b      	add	r3, r1
 80133a8:	3304      	adds	r3, #4
 80133aa:	6818      	ldr	r0, [r3, #0]
 80133ac:	4b47      	ldr	r3, [pc, #284]	; (80134cc <JPEG_OutputHandler+0x170>)
 80133ae:	6819      	ldr	r1, [r3, #0]
 80133b0:	4b47      	ldr	r3, [pc, #284]	; (80134d0 <JPEG_OutputHandler+0x174>)
 80133b2:	681d      	ldr	r5, [r3, #0]
 80133b4:	4b41      	ldr	r3, [pc, #260]	; (80134bc <JPEG_OutputHandler+0x160>)
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	4e41      	ldr	r6, [pc, #260]	; (80134c0 <JPEG_OutputHandler+0x164>)
 80133ba:	4613      	mov	r3, r2
 80133bc:	005b      	lsls	r3, r3, #1
 80133be:	4413      	add	r3, r2
 80133c0:	009b      	lsls	r3, r3, #2
 80133c2:	4433      	add	r3, r6
 80133c4:	3308      	adds	r3, #8
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	f107 030c 	add.w	r3, r7, #12
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	4613      	mov	r3, r2
 80133d0:	462a      	mov	r2, r5
 80133d2:	47a0      	blx	r4
 80133d4:	4602      	mov	r2, r0
 80133d6:	4b3e      	ldr	r3, [pc, #248]	; (80134d0 <JPEG_OutputHandler+0x174>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4413      	add	r3, r2
 80133dc:	4a3c      	ldr	r2, [pc, #240]	; (80134d0 <JPEG_OutputHandler+0x174>)
 80133de:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80133e0:	4b36      	ldr	r3, [pc, #216]	; (80134bc <JPEG_OutputHandler+0x160>)
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	4936      	ldr	r1, [pc, #216]	; (80134c0 <JPEG_OutputHandler+0x164>)
 80133e6:	4613      	mov	r3, r2
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	4413      	add	r3, r2
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	440b      	add	r3, r1
 80133f0:	2200      	movs	r2, #0
 80133f2:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80133f4:	4b31      	ldr	r3, [pc, #196]	; (80134bc <JPEG_OutputHandler+0x160>)
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	4931      	ldr	r1, [pc, #196]	; (80134c0 <JPEG_OutputHandler+0x164>)
 80133fa:	4613      	mov	r3, r2
 80133fc:	005b      	lsls	r3, r3, #1
 80133fe:	4413      	add	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	440b      	add	r3, r1
 8013404:	3308      	adds	r3, #8
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 801340a:	4b2c      	ldr	r3, [pc, #176]	; (80134bc <JPEG_OutputHandler+0x160>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	3301      	adds	r3, #1
 8013410:	4a2a      	ldr	r2, [pc, #168]	; (80134bc <JPEG_OutputHandler+0x160>)
 8013412:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8013414:	4b29      	ldr	r3, [pc, #164]	; (80134bc <JPEG_OutputHandler+0x160>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	2b01      	cmp	r3, #1
 801341a:	d902      	bls.n	8013422 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 801341c:	4b27      	ldr	r3, [pc, #156]	; (80134bc <JPEG_OutputHandler+0x160>)
 801341e:	2200      	movs	r2, #0
 8013420:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8013422:	4b2b      	ldr	r3, [pc, #172]	; (80134d0 <JPEG_OutputHandler+0x174>)
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	4b2b      	ldr	r3, [pc, #172]	; (80134d4 <JPEG_OutputHandler+0x178>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	429a      	cmp	r2, r3
 801342c:	bf0c      	ite	eq
 801342e:	2301      	moveq	r3, #1
 8013430:	2300      	movne	r3, #0
 8013432:	b2db      	uxtb	r3, r3
 8013434:	2b00      	cmp	r3, #0
 8013436:	d02a      	beq.n	801348e <JPEG_OutputHandler+0x132>
    {
      return 1;
 8013438:	2301      	movs	r3, #1
 801343a:	e03a      	b.n	80134b2 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 801343c:	4b26      	ldr	r3, [pc, #152]	; (80134d8 <JPEG_OutputHandler+0x17c>)
 801343e:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8013440:	2b01      	cmp	r3, #1
 8013442:	d117      	bne.n	8013474 <JPEG_OutputHandler+0x118>
 8013444:	4b25      	ldr	r3, [pc, #148]	; (80134dc <JPEG_OutputHandler+0x180>)
 8013446:	681a      	ldr	r2, [r3, #0]
 8013448:	491d      	ldr	r1, [pc, #116]	; (80134c0 <JPEG_OutputHandler+0x164>)
 801344a:	4613      	mov	r3, r2
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	4413      	add	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	440b      	add	r3, r1
 8013454:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 8013456:	2b00      	cmp	r3, #0
 8013458:	d10c      	bne.n	8013474 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 801345a:	4b18      	ldr	r3, [pc, #96]	; (80134bc <JPEG_OutputHandler+0x160>)
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	4918      	ldr	r1, [pc, #96]	; (80134c0 <JPEG_OutputHandler+0x164>)
 8013460:	4613      	mov	r3, r2
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4413      	add	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	440b      	add	r3, r1
 801346a:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 801346c:	2b00      	cmp	r3, #0
 801346e:	d101      	bne.n	8013474 <JPEG_OutputHandler+0x118>
 8013470:	2301      	movs	r3, #1
 8013472:	e000      	b.n	8013476 <JPEG_OutputHandler+0x11a>
 8013474:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 8013476:	2b00      	cmp	r3, #0
 8013478:	d007      	beq.n	801348a <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 801347a:	4b17      	ldr	r3, [pc, #92]	; (80134d8 <JPEG_OutputHandler+0x17c>)
 801347c:	2200      	movs	r2, #0
 801347e:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8013480:	2102      	movs	r1, #2
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7f1 fa4c 	bl	8004920 <HAL_JPEG_Resume>
 8013488:	e001      	b.n	801348e <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 801348a:	2302      	movs	r3, #2
 801348c:	e011      	b.n	80134b2 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 801348e:	4b10      	ldr	r3, [pc, #64]	; (80134d0 <JPEG_OutputHandler+0x174>)
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	4b10      	ldr	r3, [pc, #64]	; (80134d4 <JPEG_OutputHandler+0x178>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	429a      	cmp	r2, r3
 8013498:	d105      	bne.n	80134a6 <JPEG_OutputHandler+0x14a>
 801349a:	4b11      	ldr	r3, [pc, #68]	; (80134e0 <JPEG_OutputHandler+0x184>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d001      	beq.n	80134a6 <JPEG_OutputHandler+0x14a>
 80134a2:	2301      	movs	r3, #1
 80134a4:	e000      	b.n	80134a8 <JPEG_OutputHandler+0x14c>
 80134a6:	2300      	movs	r3, #0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d001      	beq.n	80134b0 <JPEG_OutputHandler+0x154>
  {
    return 1;
 80134ac:	2301      	movs	r3, #1
 80134ae:	e000      	b.n	80134b2 <JPEG_OutputHandler+0x156>
  }

  return 0;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3714      	adds	r7, #20
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ba:	bf00      	nop
 80134bc:	200339e8 	.word	0x200339e8
 80134c0:	20000024 	.word	0x20000024
 80134c4:	e000ed00 	.word	0xe000ed00
 80134c8:	200339fc 	.word	0x200339fc
 80134cc:	200339d4 	.word	0x200339d4
 80134d0:	20033a00 	.word	0x20033a00
 80134d4:	200339f8 	.word	0x200339f8
 80134d8:	200339f0 	.word	0x200339f0
 80134dc:	200339ec 	.word	0x200339ec
 80134e0:	200339e4 	.word	0x200339e4

080134e4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	4a05      	ldr	r2, [pc, #20]	; (8013504 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7ff f82b 	bl	8012550 <_ZN12MJPEGDecoderD1Ev>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4618      	mov	r0, r3
 80134fe:	3708      	adds	r7, #8
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	0802f99c 	.word	0x0802f99c

08013508 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ff ffe7 	bl	80134e4 <_ZN20HardwareMJPEGDecoderD1Ev>
 8013516:	2144      	movs	r1, #68	; 0x44
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f016 f8c7 	bl	80296ac <_ZdlPvj>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013528:	b580      	push	{r7, lr}
 801352a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 801352c:	2200      	movs	r2, #0
 801352e:	2101      	movs	r1, #1
 8013530:	2001      	movs	r0, #1
 8013532:	f7f6 fe1d 	bl	800a170 <osSemaphoreNew>
 8013536:	4603      	mov	r3, r0
 8013538:	4a0f      	ldr	r2, [pc, #60]	; (8013578 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801353a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801353c:	4b0e      	ldr	r3, [pc, #56]	; (8013578 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d105      	bne.n	8013550 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013544:	4b0d      	ldr	r3, [pc, #52]	; (801357c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013546:	4a0e      	ldr	r2, [pc, #56]	; (8013580 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013548:	2128      	movs	r1, #40	; 0x28
 801354a:	480e      	ldr	r0, [pc, #56]	; (8013584 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801354c:	f016 f958 	bl	8029800 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8013550:	2200      	movs	r2, #0
 8013552:	2104      	movs	r1, #4
 8013554:	2001      	movs	r0, #1
 8013556:	f7f6 ff65 	bl	800a424 <osMessageQueueNew>
 801355a:	4603      	mov	r3, r0
 801355c:	4a0a      	ldr	r2, [pc, #40]	; (8013588 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801355e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8013560:	4b09      	ldr	r3, [pc, #36]	; (8013588 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d105      	bne.n	8013574 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013568:	4b08      	ldr	r3, [pc, #32]	; (801358c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801356a:	4a05      	ldr	r2, [pc, #20]	; (8013580 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801356c:	212c      	movs	r1, #44	; 0x2c
 801356e:	4805      	ldr	r0, [pc, #20]	; (8013584 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013570:	f016 f946 	bl	8029800 <__assert_func>
}
 8013574:	bf00      	nop
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20033a1c 	.word	0x20033a1c
 801357c:	0802d990 	.word	0x0802d990
 8013580:	0802d9dc 	.word	0x0802d9dc
 8013584:	0802da0c 	.word	0x0802da0c
 8013588:	20033a20 	.word	0x20033a20
 801358c:	0802da38 	.word	0x0802da38

08013590 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013590:	b580      	push	{r7, lr}
 8013592:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013594:	4b04      	ldr	r3, [pc, #16]	; (80135a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f04f 31ff 	mov.w	r1, #4294967295
 801359c:	4618      	mov	r0, r3
 801359e:	f7f6 fe83 	bl	800a2a8 <osSemaphoreAcquire>
}
 80135a2:	bf00      	nop
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	20033a1c 	.word	0x20033a1c

080135ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80135b0:	4b03      	ldr	r3, [pc, #12]	; (80135c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7f6 fedd 	bl	800a374 <osSemaphoreRelease>
}
 80135ba:	bf00      	nop
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20033a1c 	.word	0x20033a1c

080135c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80135c8:	4b03      	ldr	r3, [pc, #12]	; (80135d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2100      	movs	r1, #0
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7f6 fe6a 	bl	800a2a8 <osSemaphoreAcquire>
}
 80135d4:	bf00      	nop
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	20033a1c 	.word	0x20033a1c

080135dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80135e0:	4b03      	ldr	r3, [pc, #12]	; (80135f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7f6 fec5 	bl	800a374 <osSemaphoreRelease>
}
 80135ea:	bf00      	nop
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20033a1c 	.word	0x20033a1c

080135f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80135f8:	4b04      	ldr	r3, [pc, #16]	; (801360c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80135fa:	6818      	ldr	r0, [r3, #0]
 80135fc:	2300      	movs	r3, #0
 80135fe:	2200      	movs	r2, #0
 8013600:	4903      	ldr	r1, [pc, #12]	; (8013610 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8013602:	f7f6 ff95 	bl	800a530 <osMessageQueuePut>
}
 8013606:	bf00      	nop
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	20033a20 	.word	0x20033a20
 8013610:	2000003c 	.word	0x2000003c

08013614 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801361a:	4b09      	ldr	r3, [pc, #36]	; (8013640 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	1d39      	adds	r1, r7, #4
 8013620:	2300      	movs	r3, #0
 8013622:	2200      	movs	r2, #0
 8013624:	f7f6 fff8 	bl	800a618 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8013628:	4b05      	ldr	r3, [pc, #20]	; (8013640 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801362a:	6818      	ldr	r0, [r3, #0]
 801362c:	1d39      	adds	r1, r7, #4
 801362e:	f04f 33ff 	mov.w	r3, #4294967295
 8013632:	2200      	movs	r2, #0
 8013634:	f7f6 fff0 	bl	800a618 <osMessageQueueGet>
}
 8013638:	bf00      	nop
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	20033a20 	.word	0x20033a20

08013644 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	4603      	mov	r3, r0
 801364c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801364e:	88fb      	ldrh	r3, [r7, #6]
 8013650:	4618      	mov	r0, r3
 8013652:	f7f6 fc17 	bl	8009e84 <osDelay>
}
 8013656:	bf00      	nop
 8013658:	3708      	adds	r7, #8
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <__NVIC_DisableIRQ>:
{
 8013660:	b480      	push	{r7}
 8013662:	b083      	sub	sp, #12
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801366e:	2b00      	cmp	r3, #0
 8013670:	db12      	blt.n	8013698 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	f003 021f 	and.w	r2, r3, #31
 8013678:	490a      	ldr	r1, [pc, #40]	; (80136a4 <__NVIC_DisableIRQ+0x44>)
 801367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801367e:	095b      	lsrs	r3, r3, #5
 8013680:	2001      	movs	r0, #1
 8013682:	fa00 f202 	lsl.w	r2, r0, r2
 8013686:	3320      	adds	r3, #32
 8013688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801368c:	f3bf 8f4f 	dsb	sy
}
 8013690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013692:	f3bf 8f6f 	isb	sy
}
 8013696:	bf00      	nop
}
 8013698:	bf00      	nop
 801369a:	370c      	adds	r7, #12
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr
 80136a4:	e000e100 	.word	0xe000e100

080136a8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
    {
 80136b0:	4a04      	ldr	r2, [pc, #16]	; (80136c4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	601a      	str	r2, [r3, #0]
    }
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	4618      	mov	r0, r3
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	0802fa70 	.word	0x0802fa70

080136c8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
    }
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7ff ffe9 	bl	80136a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80136d6:	2104      	movs	r1, #4
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f015 ffe7 	bl	80296ac <_ZdlPvj>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4618      	mov	r0, r3
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3344      	adds	r3, #68	; 0x44
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	4798      	blx	r3
    }
 80136fc:	bf00      	nop
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    {
 801370c:	4a04      	ldr	r2, [pc, #16]	; (8013720 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	601a      	str	r2, [r3, #0]
    }
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4618      	mov	r0, r3
 8013716:	370c      	adds	r7, #12
 8013718:	46bd      	mov	sp, r7
 801371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371e:	4770      	bx	lr
 8013720:	0802fe64 	.word	0x0802fe64

08013724 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
    }
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7ff ffe9 	bl	8013704 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013732:	210c      	movs	r1, #12
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f015 ffb9 	bl	80296ac <_ZdlPvj>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	4618      	mov	r0, r3
 801373e:	3708      	adds	r7, #8
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801374e:	4a09      	ldr	r2, [pc, #36]	; (8013774 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	683a      	ldr	r2, [r7, #0]
 8013758:	605a      	str	r2, [r3, #4]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	721a      	strb	r2, [r3, #8]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	725a      	strb	r2, [r3, #9]
    {
    }
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	4618      	mov	r0, r3
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	0802fe64 	.word	0x0802fe64

08013778 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8013778:	b480      	push	{r7}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8013780:	2301      	movs	r3, #1
    }
 8013782:	4618      	mov	r0, r3
 8013784:	370c      	adds	r7, #12
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr

0801378e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801378e:	b580      	push	{r7, lr}
 8013790:	b082      	sub	sp, #8
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	3328      	adds	r3, #40	; 0x28
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4610      	mov	r0, r2
 80137a2:	4798      	blx	r3
    }
 80137a4:	bf00      	nop
 80137a6:	3708      	adds	r7, #8
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	685a      	ldr	r2, [r3, #4]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	3314      	adds	r3, #20
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4610      	mov	r0, r2
 80137c4:	4798      	blx	r3
    }
 80137c6:	bf00      	nop
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
	...

080137d0 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80137d4:	4b13      	ldr	r3, [pc, #76]	; (8013824 <DMA2D_IRQHandler+0x54>)
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	f003 0302 	and.w	r3, r3, #2
 80137dc:	2b00      	cmp	r3, #0
 80137de:	bf14      	ite	ne
 80137e0:	2301      	movne	r3, #1
 80137e2:	2300      	moveq	r3, #0
 80137e4:	b2db      	uxtb	r3, r3
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d019      	beq.n	801381e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 80137ea:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <DMA2D_IRQHandler+0x54>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	bf14      	ite	ne
 80137f6:	2301      	movne	r3, #1
 80137f8:	2300      	moveq	r3, #0
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00e      	beq.n	801381e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8013800:	4b08      	ldr	r3, [pc, #32]	; (8013824 <DMA2D_IRQHandler+0x54>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a07      	ldr	r2, [pc, #28]	; (8013824 <DMA2D_IRQHandler+0x54>)
 8013806:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801380a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 801380c:	4b05      	ldr	r3, [pc, #20]	; (8013824 <DMA2D_IRQHandler+0x54>)
 801380e:	2202      	movs	r2, #2
 8013810:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013812:	f7fa fedb 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8013816:	4603      	mov	r3, r0
 8013818:	4618      	mov	r0, r3
 801381a:	f7ff ffc7 	bl	80137ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801381e:	bf00      	nop
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	4002b000 	.word	0x4002b000

08013828 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	330c      	adds	r3, #12
 8013834:	4618      	mov	r0, r3
 8013836:	f7fc f9ab 	bl	800fb90 <_ZN8touchgfx9colortypeC1Ev>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8013844:	b5b0      	push	{r4, r5, r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	330c      	adds	r3, #12
 8013852:	4619      	mov	r1, r3
 8013854:	4610      	mov	r0, r2
 8013856:	f7ff ff75 	bl	8013744 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801385a:	4a0e      	ldr	r2, [pc, #56]	; (8013894 <_ZN8STM32DMAC1Ev+0x50>)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f103 000c 	add.w	r0, r3, #12
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	3320      	adds	r3, #32
 801386a:	2260      	movs	r2, #96	; 0x60
 801386c:	4619      	mov	r1, r3
 801386e:	f003 fb9b 	bl	8016fa8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3320      	adds	r3, #32
 8013876:	245f      	movs	r4, #95	; 0x5f
 8013878:	461d      	mov	r5, r3
 801387a:	2c00      	cmp	r4, #0
 801387c:	db05      	blt.n	801388a <_ZN8STM32DMAC1Ev+0x46>
 801387e:	4628      	mov	r0, r5
 8013880:	f7ff ffd2 	bl	8013828 <_ZN8touchgfx6BlitOpC1Ev>
 8013884:	3524      	adds	r5, #36	; 0x24
 8013886:	3c01      	subs	r4, #1
 8013888:	e7f7      	b.n	801387a <_ZN8STM32DMAC1Ev+0x36>
{
}
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4618      	mov	r0, r3
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bdb0      	pop	{r4, r5, r7, pc}
 8013894:	0802fa20 	.word	0x0802fa20

08013898 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	4a09      	ldr	r2, [pc, #36]	; (80138c8 <_ZN8STM32DMAD1Ev+0x30>)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80138a6:	205a      	movs	r0, #90	; 0x5a
 80138a8:	f7ff feda 	bl	8013660 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	330c      	adds	r3, #12
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fb3b 	bl	8013f2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff ff23 	bl	8013704 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4618      	mov	r0, r3
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	0802fa20 	.word	0x0802fa20

080138cc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
}
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff ffdf 	bl	8013898 <_ZN8STM32DMAD1Ev>
 80138da:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f015 fee4 	bl	80296ac <_ZdlPvj>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4618      	mov	r0, r3
 80138e8:	3708      	adds	r7, #8
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
	...

080138f0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80138f8:	4b11      	ldr	r3, [pc, #68]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 80138fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138fc:	4a10      	ldr	r2, [pc, #64]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 80138fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013902:	6313      	str	r3, [r2, #48]	; 0x30
 8013904:	4b0e      	ldr	r3, [pc, #56]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 8013906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801390c:	60fb      	str	r3, [r7, #12]
 801390e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013910:	4b0b      	ldr	r3, [pc, #44]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	4a0a      	ldr	r2, [pc, #40]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 8013916:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801391a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801391c:	4b08      	ldr	r3, [pc, #32]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	4a07      	ldr	r2, [pc, #28]	; (8013940 <_ZN8STM32DMA10initializeEv+0x50>)
 8013922:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013926:	6113      	str	r3, [r2, #16]

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8013928:	2200      	movs	r2, #0
 801392a:	2105      	movs	r1, #5
 801392c:	205a      	movs	r0, #90	; 0x5a
 801392e:	f7ef fe35 	bl	800359c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8013932:	205a      	movs	r0, #90	; 0x5a
 8013934:	f7ef fe4e 	bl	80035d4 <HAL_NVIC_EnableIRQ>
}
 8013938:	bf00      	nop
 801393a:	3710      	adds	r7, #16
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	40023800 	.word	0x40023800

08013944 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	460b      	mov	r3, r1
 801394e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013950:	2300      	movs	r3, #0
 8013952:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013954:	78fb      	ldrb	r3, [r7, #3]
 8013956:	2b0b      	cmp	r3, #11
 8013958:	d826      	bhi.n	80139a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801395a:	a201      	add	r2, pc, #4	; (adr r2, 8013960 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013960:	0801399d 	.word	0x0801399d
 8013964:	08013997 	.word	0x08013997
 8013968:	08013991 	.word	0x08013991
 801396c:	080139a9 	.word	0x080139a9
 8013970:	080139a9 	.word	0x080139a9
 8013974:	080139a9 	.word	0x080139a9
 8013978:	080139a9 	.word	0x080139a9
 801397c:	080139a3 	.word	0x080139a3
 8013980:	080139a3 	.word	0x080139a3
 8013984:	080139a3 	.word	0x080139a3
 8013988:	080139a3 	.word	0x080139a3
 801398c:	080139a3 	.word	0x080139a3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013990:	2300      	movs	r3, #0
 8013992:	60fb      	str	r3, [r7, #12]
        break;
 8013994:	e00e      	b.n	80139b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8013996:	2301      	movs	r3, #1
 8013998:	60fb      	str	r3, [r7, #12]
        break;
 801399a:	e00b      	b.n	80139b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 801399c:	2302      	movs	r3, #2
 801399e:	60fb      	str	r3, [r7, #12]
        break;
 80139a0:	e008      	b.n	80139b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80139a2:	2305      	movs	r3, #5
 80139a4:	60fb      	str	r3, [r7, #12]
        break;
 80139a6:	e005      	b.n	80139b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80139a8:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80139aa:	4a06      	ldr	r2, [pc, #24]	; (80139c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80139ac:	216e      	movs	r1, #110	; 0x6e
 80139ae:	4806      	ldr	r0, [pc, #24]	; (80139c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80139b0:	f015 ff26 	bl	8029800 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80139b4:	68fb      	ldr	r3, [r7, #12]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	0802da7c 	.word	0x0802da7c
 80139c4:	0802da98 	.word	0x0802da98
 80139c8:	0802dae4 	.word	0x0802dae4

080139cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	460b      	mov	r3, r1
 80139d6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80139d8:	2300      	movs	r3, #0
 80139da:	60fb      	str	r3, [r7, #12]

    switch (format)
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	2b0a      	cmp	r3, #10
 80139e0:	d821      	bhi.n	8013a26 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80139e2:	a201      	add	r2, pc, #4	; (adr r2, 80139e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80139e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139e8:	08013a21 	.word	0x08013a21
 80139ec:	08013a1b 	.word	0x08013a1b
 80139f0:	08013a15 	.word	0x08013a15
 80139f4:	08013a27 	.word	0x08013a27
 80139f8:	08013a27 	.word	0x08013a27
 80139fc:	08013a27 	.word	0x08013a27
 8013a00:	08013a27 	.word	0x08013a27
 8013a04:	08013a1b 	.word	0x08013a1b
 8013a08:	08013a1b 	.word	0x08013a1b
 8013a0c:	08013a1b 	.word	0x08013a1b
 8013a10:	08013a1b 	.word	0x08013a1b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013a14:	2300      	movs	r3, #0
 8013a16:	60fb      	str	r3, [r7, #12]
        break;
 8013a18:	e00b      	b.n	8013a32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	60fb      	str	r3, [r7, #12]
        break;
 8013a1e:	e008      	b.n	8013a32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8013a20:	2302      	movs	r3, #2
 8013a22:	60fb      	str	r3, [r7, #12]
        break;
 8013a24:	e005      	b.n	8013a32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013a26:	4b05      	ldr	r3, [pc, #20]	; (8013a3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013a28:	4a05      	ldr	r2, [pc, #20]	; (8013a40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013a2a:	218f      	movs	r1, #143	; 0x8f
 8013a2c:	4805      	ldr	r0, [pc, #20]	; (8013a44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8013a2e:	f015 fee7 	bl	8029800 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013a32:	68fb      	ldr	r3, [r7, #12]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	0802da7c 	.word	0x0802da7c
 8013a40:	0802db10 	.word	0x0802db10
 8013a44:	0802dae4 	.word	0x0802dae4

08013a48 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8013a50:	f640 73ef 	movw	r3, #4079	; 0xfef
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	7f5b      	ldrb	r3, [r3, #29]
 8013a6e:	4619      	mov	r1, r3
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7ff ff67 	bl	8013944 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013a76:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	7f9b      	ldrb	r3, [r3, #30]
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff ff60 	bl	8013944 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013a84:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	7f9b      	ldrb	r3, [r3, #30]
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff ff9d 	bl	80139cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013a92:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	8b5b      	ldrh	r3, [r3, #26]
 8013a98:	461a      	mov	r2, r3
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	8a9b      	ldrh	r3, [r3, #20]
 8013a9e:	1ad2      	subs	r2, r2, r3
 8013aa0:	4b91      	ldr	r3, [pc, #580]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	8b5b      	ldrh	r3, [r3, #26]
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	8a9b      	ldrh	r3, [r3, #20]
 8013aae:	1ad2      	subs	r2, r2, r3
 8013ab0:	4b8d      	ldr	r3, [pc, #564]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ab2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	8b1b      	ldrh	r3, [r3, #24]
 8013ab8:	461a      	mov	r2, r3
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	8a9b      	ldrh	r3, [r3, #20]
 8013abe:	1ad2      	subs	r2, r2, r3
 8013ac0:	4b89      	ldr	r3, [pc, #548]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ac2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013ac4:	4a88      	ldr	r2, [pc, #544]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	8adb      	ldrh	r3, [r3, #22]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	8a9b      	ldrh	r3, [r3, #20]
 8013ad4:	041b      	lsls	r3, r3, #16
 8013ad6:	431a      	orrs	r2, r3
 8013ad8:	4b83      	ldr	r3, [pc, #524]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ada:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	691a      	ldr	r2, [r3, #16]
 8013ae0:	4b81      	ldr	r3, [pc, #516]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	685a      	ldr	r2, [r3, #4]
 8013ae8:	4b7f      	ldr	r3, [pc, #508]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013aea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013af4:	d042      	beq.n	8013b7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8013af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013afa:	f200 8152 	bhi.w	8013da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b02:	d014      	beq.n	8013b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8013b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b08:	f200 814b 	bhi.w	8013da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013b0c:	2b80      	cmp	r3, #128	; 0x80
 8013b0e:	d07b      	beq.n	8013c08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8013b10:	2b80      	cmp	r3, #128	; 0x80
 8013b12:	f200 8146 	bhi.w	8013da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013b16:	2b40      	cmp	r3, #64	; 0x40
 8013b18:	f000 8124 	beq.w	8013d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>
 8013b1c:	2b40      	cmp	r3, #64	; 0x40
 8013b1e:	f200 8140 	bhi.w	8013da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013b22:	2b04      	cmp	r3, #4
 8013b24:	d051      	beq.n	8013bca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
 8013b26:	2b20      	cmp	r3, #32
 8013b28:	f000 80f4 	beq.w	8013d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>
 8013b2c:	e139      	b.n	8013da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	7f1b      	ldrb	r3, [r3, #28]
 8013b32:	061b      	lsls	r3, r3, #24
 8013b34:	4619      	mov	r1, r3
 8013b36:	4a6c      	ldr	r2, [pc, #432]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b38:	4b6c      	ldr	r3, [pc, #432]	; (8013cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8013b3a:	430b      	orrs	r3, r1
 8013b3c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	330c      	adds	r3, #12
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fc f832 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	4a67      	ldr	r2, [pc, #412]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b50:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	7fdb      	ldrb	r3, [r3, #31]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d005      	beq.n	8013b66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013b5a:	4963      	ldr	r1, [pc, #396]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	4b64      	ldr	r3, [pc, #400]	; (8013cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8013b60:	4313      	orrs	r3, r2
 8013b62:	624b      	str	r3, [r1, #36]	; 0x24
 8013b64:	e002      	b.n	8013b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013b66:	4a60      	ldr	r2, [pc, #384]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	691a      	ldr	r2, [r3, #16]
 8013b70:	4b5d      	ldr	r3, [pc, #372]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b72:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013b74:	4b5c      	ldr	r3, [pc, #368]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b76:	4a5f      	ldr	r2, [pc, #380]	; (8013cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013b78:	601a      	str	r2, [r3, #0]
        break;
 8013b7a:	e133      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	7f1b      	ldrb	r3, [r3, #28]
 8013b80:	061b      	lsls	r3, r3, #24
 8013b82:	4619      	mov	r1, r3
 8013b84:	4a58      	ldr	r2, [pc, #352]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b86:	4b5c      	ldr	r3, [pc, #368]	; (8013cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8013b88:	430b      	orrs	r3, r1
 8013b8a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	330c      	adds	r3, #12
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7fc f80b 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 8013b96:	4603      	mov	r3, r0
 8013b98:	4a53      	ldr	r2, [pc, #332]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b9e:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	7fdb      	ldrb	r3, [r3, #31]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d005      	beq.n	8013bb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013ba8:	494f      	ldr	r1, [pc, #316]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013baa:	697a      	ldr	r2, [r7, #20]
 8013bac:	4b50      	ldr	r3, [pc, #320]	; (8013cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8013bae:	4313      	orrs	r3, r2
 8013bb0:	624b      	str	r3, [r1, #36]	; 0x24
 8013bb2:	e002      	b.n	8013bba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013bb4:	4a4c      	ldr	r2, [pc, #304]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	691a      	ldr	r2, [r3, #16]
 8013bbe:	4b4a      	ldr	r3, [pc, #296]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bc0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013bc2:	4b49      	ldr	r3, [pc, #292]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bc4:	4a4b      	ldr	r2, [pc, #300]	; (8013cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013bc6:	601a      	str	r2, [r3, #0]
        break;
 8013bc8:	e10c      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	7f1b      	ldrb	r3, [r3, #28]
 8013bce:	061b      	lsls	r3, r3, #24
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	4313      	orrs	r3, r2
 8013bd6:	4a44      	ldr	r2, [pc, #272]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013bdc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	7fdb      	ldrb	r3, [r3, #31]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d005      	beq.n	8013bf2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013be6:	4940      	ldr	r1, [pc, #256]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013be8:	697a      	ldr	r2, [r7, #20]
 8013bea:	4b41      	ldr	r3, [pc, #260]	; (8013cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8013bec:	4313      	orrs	r3, r2
 8013bee:	624b      	str	r3, [r1, #36]	; 0x24
 8013bf0:	e002      	b.n	8013bf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013bf2:	4a3d      	ldr	r2, [pc, #244]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	691a      	ldr	r2, [r3, #16]
 8013bfc:	4b3a      	ldr	r3, [pc, #232]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013bfe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013c00:	4b39      	ldr	r3, [pc, #228]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c02:	4a3c      	ldr	r2, [pc, #240]	; (8013cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013c04:	601a      	str	r2, [r3, #0]
        break;
 8013c06:	e0ed      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8013c08:	2301      	movs	r3, #1
 8013c0a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	1d1a      	adds	r2, r3, #4
 8013c16:	4b34      	ldr	r3, [pc, #208]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c18:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	7f1b      	ldrb	r3, [r3, #28]
 8013c1e:	061b      	lsls	r3, r3, #24
 8013c20:	461a      	mov	r2, r3
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	4a30      	ldr	r2, [pc, #192]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013c2c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	7fdb      	ldrb	r3, [r3, #31]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d005      	beq.n	8013c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013c36:	492c      	ldr	r1, [pc, #176]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c38:	697a      	ldr	r2, [r7, #20]
 8013c3a:	4b2d      	ldr	r3, [pc, #180]	; (8013cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	624b      	str	r3, [r1, #36]	; 0x24
 8013c40:	e002      	b.n	8013c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e8>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013c42:	4a29      	ldr	r2, [pc, #164]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	6253      	str	r3, [r2, #36]	; 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	691a      	ldr	r2, [r3, #16]
 8013c4c:	4b26      	ldr	r3, [pc, #152]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c4e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d002      	beq.n	8013c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
 8013c5a:	2b01      	cmp	r3, #1
 8013c5c:	d00d      	beq.n	8013c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
 8013c5e:	e020      	b.n	8013ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
            {
                case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                    /* Write foreground CLUT size and CLUT color mode */
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013c60:	4b21      	ldr	r3, [pc, #132]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c62:	69da      	ldr	r2, [r3, #28]
 8013c64:	4b25      	ldr	r3, [pc, #148]	; (8013cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c66:	4013      	ands	r3, r2
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	8852      	ldrh	r2, [r2, #2]
 8013c6c:	3a01      	subs	r2, #1
 8013c6e:	0212      	lsls	r2, r2, #8
 8013c70:	4611      	mov	r1, r2
 8013c72:	4a1d      	ldr	r2, [pc, #116]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c74:	430b      	orrs	r3, r1
 8013c76:	61d3      	str	r3, [r2, #28]
                    break;
 8013c78:	e01a      	b.n	8013cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB888:
                    if(blitOp.alpha == 255)
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	7f1b      	ldrb	r3, [r3, #28]
 8013c7e:	2bff      	cmp	r3, #255	; 0xff
 8013c80:	d101      	bne.n	8013c86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
                    {
                        blend = false;
 8013c82:	2300      	movs	r3, #0
 8013c84:	77fb      	strb	r3, [r7, #31]
                    }
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013c86:	4b18      	ldr	r3, [pc, #96]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c88:	69da      	ldr	r2, [r3, #28]
 8013c8a:	4b1c      	ldr	r3, [pc, #112]	; (8013cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	68fa      	ldr	r2, [r7, #12]
 8013c90:	8852      	ldrh	r2, [r2, #2]
 8013c92:	3a01      	subs	r2, #1
 8013c94:	0212      	lsls	r2, r2, #8
 8013c96:	4313      	orrs	r3, r2
 8013c98:	4a13      	ldr	r2, [pc, #76]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013c9a:	f043 0310 	orr.w	r3, r3, #16
 8013c9e:	61d3      	str	r3, [r2, #28]
                    break;
 8013ca0:	e006      	b.n	8013cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB565:
                default:
                    assert(0 && "Unsupported format");
 8013ca2:	4b17      	ldr	r3, [pc, #92]	; (8013d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013ca4:	4a17      	ldr	r2, [pc, #92]	; (8013d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013ca6:	f240 1137 	movw	r1, #311	; 0x137
 8013caa:	4817      	ldr	r0, [pc, #92]	; (8013d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8013cac:	f015 fda8 	bl	8029800 <__assert_func>
                    break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8013cb0:	4b0d      	ldr	r3, [pc, #52]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013cb2:	69db      	ldr	r3, [r3, #28]
 8013cb4:	4a0c      	ldr	r2, [pc, #48]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013cb6:	f043 0320 	orr.w	r3, r3, #32
 8013cba:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8013cbc:	4b0a      	ldr	r3, [pc, #40]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013cbe:	69db      	ldr	r3, [r3, #28]
 8013cc0:	f003 0320 	and.w	r3, r3, #32
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	bf14      	ite	ne
 8013cc8:	2301      	movne	r3, #1
 8013cca:	2300      	moveq	r3, #0
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d000      	beq.n	8013cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>
 8013cd2:	e7f3      	b.n	8013cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8013cd4:	4b04      	ldr	r3, [pc, #16]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013cd6:	2210      	movs	r2, #16
 8013cd8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8013cda:	7ffb      	ldrb	r3, [r7, #31]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d015      	beq.n	8013d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013ce0:	4b01      	ldr	r3, [pc, #4]	; (8013ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ce2:	4a04      	ldr	r2, [pc, #16]	; (8013cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013ce4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8013ce6:	e07d      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
 8013ce8:	4002b000 	.word	0x4002b000
 8013cec:	0002000a 	.word	0x0002000a
 8013cf0:	ff010000 	.word	0xff010000
 8013cf4:	00020201 	.word	0x00020201
 8013cf8:	00020009 	.word	0x00020009
 8013cfc:	ffff00ef 	.word	0xffff00ef
 8013d00:	0802db5c 	.word	0x0802db5c
 8013d04:	0802db78 	.word	0x0802db78
 8013d08:	0802dae4 	.word	0x0802dae4
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8013d0c:	4b37      	ldr	r3, [pc, #220]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d0e:	4a38      	ldr	r2, [pc, #224]	; (8013df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8013d10:	601a      	str	r2, [r3, #0]
        break;
 8013d12:	e067      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d00a      	beq.n	8013d34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	7f1b      	ldrb	r3, [r3, #28]
 8013d22:	061b      	lsls	r3, r3, #24
 8013d24:	461a      	mov	r2, r3
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	4313      	orrs	r3, r2
 8013d2a:	4a30      	ldr	r2, [pc, #192]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d30:	61d3      	str	r3, [r2, #28]
 8013d32:	e002      	b.n	8013d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2da>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013d34:	4a2d      	ldr	r2, [pc, #180]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	7fdb      	ldrb	r3, [r3, #31]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d005      	beq.n	8013d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013d42:	492a      	ldr	r1, [pc, #168]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d44:	697a      	ldr	r2, [r7, #20]
 8013d46:	4b2b      	ldr	r3, [pc, #172]	; (8013df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8013d48:	4313      	orrs	r3, r2
 8013d4a:	624b      	str	r3, [r1, #36]	; 0x24
 8013d4c:	e002      	b.n	8013d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2f4>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013d4e:	4a27      	ldr	r2, [pc, #156]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	691a      	ldr	r2, [r3, #16]
 8013d58:	4b24      	ldr	r3, [pc, #144]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d5a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013d5c:	4b23      	ldr	r3, [pc, #140]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d5e:	4a26      	ldr	r2, [pc, #152]	; (8013df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 8013d60:	601a      	str	r2, [r3, #0]
        break;
 8013d62:	e03f      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	7f1b      	ldrb	r3, [r3, #28]
 8013d68:	061b      	lsls	r3, r3, #24
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	4a1e      	ldr	r2, [pc, #120]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013d76:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	7fdb      	ldrb	r3, [r3, #31]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d005      	beq.n	8013d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013d80:	491a      	ldr	r1, [pc, #104]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d82:	697a      	ldr	r2, [r7, #20]
 8013d84:	4b1b      	ldr	r3, [pc, #108]	; (8013df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8013d86:	4313      	orrs	r3, r2
 8013d88:	624b      	str	r3, [r1, #36]	; 0x24
 8013d8a:	e002      	b.n	8013d92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x332>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013d8c:	4a17      	ldr	r2, [pc, #92]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	691a      	ldr	r2, [r3, #16]
 8013d96:	4b15      	ldr	r3, [pc, #84]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d98:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013d9a:	4b14      	ldr	r3, [pc, #80]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013d9c:	4a16      	ldr	r2, [pc, #88]	; (8013df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 8013d9e:	601a      	str	r2, [r3, #0]
        break;
 8013da0:	e020      	b.n	8013de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x358>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013dac:	490f      	ldr	r1, [pc, #60]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013dae:	69ba      	ldr	r2, [r7, #24]
 8013db0:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8013db2:	4313      	orrs	r3, r2
 8013db4:	61cb      	str	r3, [r1, #28]
 8013db6:	e002      	b.n	8013dbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x35e>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013db8:	4a0c      	ldr	r2, [pc, #48]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	7f5a      	ldrb	r2, [r3, #29]
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	7f9b      	ldrb	r3, [r3, #30]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d007      	beq.n	8013dda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	691a      	ldr	r2, [r3, #16]
 8013dce:	4b07      	ldr	r3, [pc, #28]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013dd0:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8013dd2:	4b06      	ldr	r3, [pc, #24]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013dd4:	4a06      	ldr	r2, [pc, #24]	; (8013df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8013dd6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8013dd8:	e003      	b.n	8013de2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x382>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8013dda:	4b04      	ldr	r3, [pc, #16]	; (8013dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013ddc:	f240 2201 	movw	r2, #513	; 0x201
 8013de0:	601a      	str	r2, [r3, #0]
        break;
 8013de2:	bf00      	nop
    }
}
 8013de4:	bf00      	nop
 8013de6:	3720      	adds	r7, #32
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	4002b000 	.word	0x4002b000
 8013df0:	00010201 	.word	0x00010201
 8013df4:	ff010000 	.word	0xff010000
 8013df8:	00020201 	.word	0x00020201

08013dfc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8013dfc:	b590      	push	{r4, r7, lr}
 8013dfe:	b085      	sub	sp, #20
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	7f9b      	ldrb	r3, [r3, #30]
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f7ff fddd 	bl	80139cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013e12:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013e14:	4a40      	ldr	r2, [pc, #256]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	8adb      	ldrh	r3, [r3, #22]
 8013e1e:	461a      	mov	r2, r3
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	8a9b      	ldrh	r3, [r3, #20]
 8013e24:	041b      	lsls	r3, r3, #16
 8013e26:	431a      	orrs	r2, r3
 8013e28:	4b3b      	ldr	r3, [pc, #236]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	691a      	ldr	r2, [r3, #16]
 8013e30:	4b39      	ldr	r3, [pc, #228]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	8b5b      	ldrh	r3, [r3, #26]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	8a9b      	ldrh	r3, [r3, #20]
 8013e3e:	1ad2      	subs	r2, r2, r3
 8013e40:	4b35      	ldr	r3, [pc, #212]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e42:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b08      	cmp	r3, #8
 8013e4a:	d13a      	bne.n	8013ec2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc6>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	8b5b      	ldrh	r3, [r3, #26]
 8013e50:	461a      	mov	r2, r3
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	8a9b      	ldrh	r3, [r3, #20]
 8013e56:	1ad2      	subs	r2, r2, r3
 8013e58:	4b2f      	ldr	r3, [pc, #188]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e5a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	8b5b      	ldrh	r3, [r3, #26]
 8013e60:	461a      	mov	r2, r3
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	8a9b      	ldrh	r3, [r3, #20]
 8013e66:	1ad2      	subs	r2, r2, r3
 8013e68:	4b2b      	ldr	r3, [pc, #172]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e6a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	7fdb      	ldrb	r3, [r3, #31]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d005      	beq.n	8013e80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013e74:	4928      	ldr	r1, [pc, #160]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	4b28      	ldr	r3, [pc, #160]	; (8013f1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013e7a:	4313      	orrs	r3, r2
 8013e7c:	624b      	str	r3, [r1, #36]	; 0x24
 8013e7e:	e002      	b.n	8013e86 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013e80:	4a25      	ldr	r2, [pc, #148]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	7f1b      	ldrb	r3, [r3, #28]
 8013e8a:	061b      	lsls	r3, r3, #24
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4a22      	ldr	r2, [pc, #136]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013e90:	4b23      	ldr	r3, [pc, #140]	; (8013f20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 8013e92:	430b      	orrs	r3, r1
 8013e94:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	330c      	adds	r3, #12
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fb fe86 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	4a1d      	ldr	r2, [pc, #116]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013ea8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	691a      	ldr	r2, [r3, #16]
 8013eae:	4b1a      	ldr	r3, [pc, #104]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013eb0:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	691a      	ldr	r2, [r3, #16]
 8013eb6:	4b18      	ldr	r3, [pc, #96]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013eb8:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8013eba:	4b17      	ldr	r3, [pc, #92]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013ebc:	4a19      	ldr	r2, [pc, #100]	; (8013f24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 8013ebe:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8013ec0:	e025      	b.n	8013f0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013ec2:	4a15      	ldr	r2, [pc, #84]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8013ec8:	4b13      	ldr	r3, [pc, #76]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013eca:	2200      	movs	r2, #0
 8013ecc:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	7f9b      	ldrb	r3, [r3, #30]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d109      	bne.n	8013eea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xee>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	330c      	adds	r3, #12
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fb fe66 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	4a0d      	ldr	r2, [pc, #52]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	6393      	str	r3, [r2, #56]	; 0x38
 8013ee8:	e00e      	b.n	8013f08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	7f1b      	ldrb	r3, [r3, #28]
 8013eee:	061b      	lsls	r3, r3, #24
 8013ef0:	461c      	mov	r4, r3
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	330c      	adds	r3, #12
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fb fe58 	bl	800fbac <_ZNK8touchgfx9colortypecvmEv>
 8013efc:	4603      	mov	r3, r0
 8013efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013f02:	4a05      	ldr	r2, [pc, #20]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013f04:	4323      	orrs	r3, r4
 8013f06:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8013f08:	4b03      	ldr	r3, [pc, #12]	; (8013f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013f0a:	4a07      	ldr	r2, [pc, #28]	; (8013f28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>)
 8013f0c:	601a      	str	r2, [r3, #0]
}
 8013f0e:	bf00      	nop
 8013f10:	3714      	adds	r7, #20
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd90      	pop	{r4, r7, pc}
 8013f16:	bf00      	nop
 8013f18:	4002b000 	.word	0x4002b000
 8013f1c:	ff010000 	.word	0xff010000
 8013f20:	00010009 	.word	0x00010009
 8013f24:	00020201 	.word	0x00020201
 8013f28:	00030201 	.word	0x00030201

08013f2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	4a05      	ldr	r2, [pc, #20]	; (8013f4c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	601a      	str	r2, [r3, #0]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7ff fbb3 	bl	80136a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4618      	mov	r0, r3
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	0802feb4 	.word	0x0802feb4

08013f50 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7ff ffe7 	bl	8013f2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013f5e:	2114      	movs	r1, #20
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f015 fba3 	bl	80296ac <_ZdlPvj>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8013f78:	4a04      	ldr	r2, [pc, #16]	; (8013f8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6013      	str	r3, [r2, #0]
    }
 8013f7e:	bf00      	nop
 8013f80:	370c      	adds	r7, #12
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	2003c2d0 	.word	0x2003c2d0

08013f90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013f90:	b480      	push	{r7}
 8013f92:	b085      	sub	sp, #20
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	60f8      	str	r0, [r7, #12]
 8013f98:	60b9      	str	r1, [r7, #8]
 8013f9a:	607a      	str	r2, [r7, #4]
 8013f9c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8013f9e:	4a0b      	ldr	r2, [pc, #44]	; (8013fcc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	601a      	str	r2, [r3, #0]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	68ba      	ldr	r2, [r7, #8]
 8013fa8:	605a      	str	r2, [r3, #4]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	609a      	str	r2, [r3, #8]
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	683a      	ldr	r2, [r7, #0]
 8013fb4:	60da      	str	r2, [r3, #12]
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	69ba      	ldr	r2, [r7, #24]
 8013fba:	611a      	str	r2, [r3, #16]
    {
    }
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3714      	adds	r7, #20
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr
 8013fca:	bf00      	nop
 8013fcc:	0802fb58 	.word	0x0802fb58

08013fd0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8013fd0:	b480      	push	{r7}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
    {
 8013fd8:	4a04      	ldr	r2, [pc, #16]	; (8013fec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	601a      	str	r2, [r3, #0]
    }
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	370c      	adds	r7, #12
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr
 8013fec:	0802fb58 	.word	0x0802fb58

08013ff0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
    }
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7ff ffe9 	bl	8013fd0 <_ZN8touchgfx7MVPHeapD1Ev>
 8013ffe:	2114      	movs	r1, #20
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f015 fb53 	bl	80296ac <_ZdlPvj>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
    {
 8014018:	4a04      	ldr	r2, [pc, #16]	; (801402c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]
    }
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	370c      	adds	r7, #12
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	08030324 	.word	0x08030324

08014030 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
    }
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7ff ffe9 	bl	8014010 <_ZN8touchgfx3LCDD1Ev>
 801403e:	2108      	movs	r1, #8
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f015 fb33 	bl	80296ac <_ZdlPvj>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	801a      	strh	r2, [r3, #0]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	805a      	strh	r2, [r3, #2]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2200      	movs	r2, #0
 8014068:	809a      	strh	r2, [r3, #4]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2200      	movs	r2, #0
 801406e:	80da      	strh	r2, [r3, #6]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2200      	movs	r2, #0
 8014074:	811a      	strh	r2, [r3, #8]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	815a      	strh	r2, [r3, #10]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2200      	movs	r2, #0
 8014080:	819a      	strh	r2, [r3, #12]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2200      	movs	r2, #0
 8014086:	739a      	strb	r2, [r3, #14]
        {
        }
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	370c      	adds	r7, #12
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr

08014096 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014096:	b580      	push	{r7, lr}
 8014098:	b082      	sub	sp, #8
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7ff ffd5 	bl	8014050 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	611a      	str	r2, [r3, #16]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2200      	movs	r2, #0
 80140b0:	829a      	strh	r2, [r3, #20]
    {
    }
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4618      	mov	r0, r3
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80140ca:	4a55      	ldr	r2, [pc, #340]	; (8014220 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	601a      	str	r2, [r3, #0]
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	605a      	str	r2, [r3, #4]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	609a      	str	r2, [r3, #8]
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	60da      	str	r2, [r3, #12]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2200      	movs	r2, #0
 80140e6:	611a      	str	r2, [r3, #16]
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2200      	movs	r2, #0
 80140ec:	615a      	str	r2, [r3, #20]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2200      	movs	r2, #0
 80140f2:	619a      	str	r2, [r3, #24]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	331c      	adds	r3, #28
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff ffcc 	bl	8014096 <_ZN8touchgfx8GesturesC1Ev>
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	2200      	movs	r2, #0
 8014102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	2200      	movs	r2, #0
 801410a:	639a      	str	r2, [r3, #56]	; 0x38
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2200      	movs	r2, #0
 8014110:	63da      	str	r2, [r3, #60]	; 0x3c
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2200      	movs	r2, #0
 8014116:	641a      	str	r2, [r3, #64]	; 0x40
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2200      	movs	r2, #0
 801411c:	645a      	str	r2, [r3, #68]	; 0x44
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2200      	movs	r2, #0
 8014122:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2201      	movs	r2, #1
 801412a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2200      	movs	r2, #0
 8014132:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2200      	movs	r2, #0
 801413a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2200      	movs	r2, #0
 8014142:	64da      	str	r2, [r3, #76]	; 0x4c
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	3350      	adds	r3, #80	; 0x50
 8014148:	4618      	mov	r0, r3
 801414a:	f7fa fec5 	bl	800eed8 <_ZN8touchgfx4RectC1Ev>
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2200      	movs	r2, #0
 8014152:	659a      	str	r2, [r3, #88]	; 0x58
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	65da      	str	r2, [r3, #92]	; 0x5c
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2200      	movs	r2, #0
 801415e:	661a      	str	r2, [r3, #96]	; 0x60
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2201      	movs	r2, #1
 8014164:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2200      	movs	r2, #0
 801416c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2200      	movs	r2, #0
 8014174:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	2201      	movs	r2, #1
 801417c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2200      	movs	r2, #0
 8014184:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2200      	movs	r2, #0
 801418c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	2200      	movs	r2, #0
 8014194:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2200      	movs	r2, #0
 801419c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2200      	movs	r2, #0
 80141a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2200      	movs	r2, #0
 80141ac:	671a      	str	r2, [r3, #112]	; 0x70
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	2200      	movs	r2, #0
 80141b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2200      	movs	r2, #0
 80141ba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	2201      	movs	r2, #1
 80141ca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	2201      	movs	r2, #1
 80141d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80141d6:	4a13      	ldr	r2, [pc, #76]	; (8014224 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80141dc:	4a12      	ldr	r2, [pc, #72]	; (8014228 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80141de:	8b3b      	ldrh	r3, [r7, #24]
 80141e0:	8013      	strh	r3, [r2, #0]
 80141e2:	4b11      	ldr	r3, [pc, #68]	; (8014228 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80141e4:	881a      	ldrh	r2, [r3, #0]
 80141e6:	4b11      	ldr	r3, [pc, #68]	; (801422c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80141e8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80141ea:	4a11      	ldr	r2, [pc, #68]	; (8014230 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80141ec:	8bbb      	ldrh	r3, [r7, #28]
 80141ee:	8013      	strh	r3, [r2, #0]
 80141f0:	4b0f      	ldr	r3, [pc, #60]	; (8014230 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80141f2:	881a      	ldrh	r2, [r3, #0]
 80141f4:	4b0f      	ldr	r3, [pc, #60]	; (8014234 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80141f6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80141f8:	4b0f      	ldr	r3, [pc, #60]	; (8014238 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80141fa:	2200      	movs	r2, #0
 80141fc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80141fe:	8b3a      	ldrh	r2, [r7, #24]
 8014200:	8bbb      	ldrh	r3, [r7, #28]
 8014202:	429a      	cmp	r2, r3
 8014204:	bf34      	ite	cc
 8014206:	2301      	movcc	r3, #1
 8014208:	2300      	movcs	r3, #0
 801420a:	b2db      	uxtb	r3, r3
 801420c:	461a      	mov	r2, r3
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	0802fd8c 	.word	0x0802fd8c
 8014224:	2003c26c 	.word	0x2003c26c
 8014228:	2003c260 	.word	0x2003c260
 801422c:	2003c266 	.word	0x2003c266
 8014230:	2003c262 	.word	0x2003c262
 8014234:	2003c268 	.word	0x2003c268
 8014238:	2003c264 	.word	0x2003c264

0801423c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	f7fa fbb3 	bl	800e9b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801424e:	bf00      	nop
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af02      	add	r7, sp, #8
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	607a      	str	r2, [r7, #4]
 8014264:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	68b9      	ldr	r1, [r7, #8]
 8014272:	f7ff fe8d 	bl	8013f90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014276:	4a04      	ldr	r2, [pc, #16]	; (8014288 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	601a      	str	r2, [r3, #0]
    {

    }
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	0802fb44 	.word	0x0802fb44

0801428c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801428c:	b580      	push	{r7, lr}
 801428e:	af00      	add	r7, sp, #0
 8014290:	4801      	ldr	r0, [pc, #4]	; (8014298 <__tcf_0+0xc>)
 8014292:	f000 f95d 	bl	8014550 <_ZN12FrontendHeapD1Ev>
 8014296:	bd80      	pop	{r7, pc}
 8014298:	20033a24 	.word	0x20033a24

0801429c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801429c:	b580      	push	{r7, lr}
 801429e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80142a0:	4b12      	ldr	r3, [pc, #72]	; (80142ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	f3bf 8f5b 	dmb	ish
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	f003 0301 	and.w	r3, r3, #1
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	bf0c      	ite	eq
 80142b2:	2301      	moveq	r3, #1
 80142b4:	2300      	movne	r3, #0
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d013      	beq.n	80142e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80142bc:	480b      	ldr	r0, [pc, #44]	; (80142ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80142be:	f015 f9f7 	bl	80296b0 <__cxa_guard_acquire>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	bf14      	ite	ne
 80142c8:	2301      	movne	r3, #1
 80142ca:	2300      	moveq	r3, #0
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d008      	beq.n	80142e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80142d2:	4807      	ldr	r0, [pc, #28]	; (80142f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80142d4:	f000 f868 	bl	80143a8 <_ZN12FrontendHeapC1Ev>
 80142d8:	4806      	ldr	r0, [pc, #24]	; (80142f4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80142da:	f015 faaf 	bl	802983c <atexit>
 80142de:	4803      	ldr	r0, [pc, #12]	; (80142ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80142e0:	f015 f9f2 	bl	80296c8 <__cxa_guard_release>
        return instance;
 80142e4:	4b02      	ldr	r3, [pc, #8]	; (80142f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80142e6:	4618      	mov	r0, r3
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	2003732c 	.word	0x2003732c
 80142f0:	20033a24 	.word	0x20033a24
 80142f4:	0801428d 	.word	0x0801428d

080142f8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	4a05      	ldr	r2, [pc, #20]	; (8014318 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	601a      	str	r2, [r3, #0]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4618      	mov	r0, r3
 801430a:	f7ff fe61 	bl	8013fd0 <_ZN8touchgfx7MVPHeapD1Ev>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	0802fb44 	.word	0x0802fb44

0801431c <_ZN16FrontendHeapBaseD0Ev>:
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f7ff ffe7 	bl	80142f8 <_ZN16FrontendHeapBaseD1Ev>
 801432a:	2114      	movs	r1, #20
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f015 f9bd 	bl	80296ac <_ZdlPvj>
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	4618      	mov	r0, r3
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}

0801433c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f001 fc94 	bl	8015c74 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801434c:	4a03      	ldr	r2, [pc, #12]	; (801435c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	601a      	str	r2, [r3, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4618      	mov	r0, r3
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	0802fb10 	.word	0x0802fb10

08014360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	f001 fc82 	bl	8015c74 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014370:	4a03      	ldr	r2, [pc, #12]	; (8014380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	601a      	str	r2, [r3, #0]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	4618      	mov	r0, r3
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	0802fadc 	.word	0x0802fadc

08014384 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	4618      	mov	r0, r3
 8014390:	f001 fc70 	bl	8015c74 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014394:	4a03      	ldr	r2, [pc, #12]	; (80143a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	601a      	str	r2, [r3, #0]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	4618      	mov	r0, r3
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	0802faa8 	.word	0x0802faa8

080143a8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80143a8:	b5b0      	push	{r4, r5, r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af02      	add	r7, sp, #8
 80143ae:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f103 0414 	add.w	r4, r3, #20
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f243 7298 	movw	r2, #14232	; 0x3798
 80143c4:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80143c6:	6879      	ldr	r1, [r7, #4]
 80143c8:	f243 73b0 	movw	r3, #14256	; 0x37b0
 80143cc:	440b      	add	r3, r1
                     app(model, *this)
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	4613      	mov	r3, r2
 80143d2:	462a      	mov	r2, r5
 80143d4:	4621      	mov	r1, r4
 80143d6:	f7ff ff3f 	bl	8014258 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80143da:	4a1a      	ldr	r2, [pc, #104]	; (8014444 <_ZN12FrontendHeapC1Ev+0x9c>)
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	3314      	adds	r3, #20
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7ff ffa9 	bl	801433c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	332c      	adds	r3, #44	; 0x2c
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff ffb6 	bl	8014360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	f243 7398 	movw	r3, #14232	; 0x3798
 80143fa:	4413      	add	r3, r2
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7ff ffc1 	bl	8014384 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	f243 73ac 	movw	r3, #14252	; 0x37ac
 8014408:	4413      	add	r3, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f7fd fd9e 	bl	8011f4c <_ZN5ModelC1Ev>
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014416:	4413      	add	r3, r2
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	f243 71ac 	movw	r1, #14252	; 0x37ac
 801441e:	4411      	add	r1, r2
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	4618      	mov	r0, r3
 8014424:	f7fd fc12 	bl	8011c4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014430:	4413      	add	r3, r2
 8014432:	4619      	mov	r1, r3
 8014434:	f7ff ff02 	bl	801423c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	4618      	mov	r0, r3
 801443c:	3708      	adds	r7, #8
 801443e:	46bd      	mov	sp, r7
 8014440:	bdb0      	pop	{r4, r5, r7, pc}
 8014442:	bf00      	nop
 8014444:	0802fa94 	.word	0x0802fa94

08014448 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af02      	add	r7, sp, #8
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8014456:	68f8      	ldr	r0, [r7, #12]
 8014458:	8bbb      	ldrh	r3, [r7, #28]
 801445a:	9301      	str	r3, [sp, #4]
 801445c:	8b3b      	ldrh	r3, [r7, #24]
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	68b9      	ldr	r1, [r7, #8]
 8014466:	f7ff fe29 	bl	80140bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801446a:	4a04      	ldr	r2, [pc, #16]	; (801447c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	601a      	str	r2, [r3, #0]
    }
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	4618      	mov	r0, r3
 8014474:	3710      	adds	r7, #16
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	0802fbe4 	.word	0x0802fbe4

08014480 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af02      	add	r7, sp, #8
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	607a      	str	r2, [r7, #4]
 801448c:	603b      	str	r3, [r7, #0]
 801448e:	68f8      	ldr	r0, [r7, #12]
 8014490:	8bbb      	ldrh	r3, [r7, #28]
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	8b3b      	ldrh	r3, [r7, #24]
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	68b9      	ldr	r1, [r7, #8]
 801449e:	f7ff ffd3 	bl	8014448 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80144a2:	4a04      	ldr	r2, [pc, #16]	; (80144b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	601a      	str	r2, [r3, #0]
    }
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	4618      	mov	r0, r3
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	0802f8c4 	.word	0x0802f8c4

080144b8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	4a04      	ldr	r2, [pc, #16]	; (80144d4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	601a      	str	r2, [r3, #0]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr
 80144d4:	0802f8ac 	.word	0x0802f8ac

080144d8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7ff ffe8 	bl	80144b8 <_ZN8touchgfx15TouchControllerC1Ev>
 80144e8:	4a03      	ldr	r2, [pc, #12]	; (80144f8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	601a      	str	r2, [r3, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4618      	mov	r0, r3
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	0802f894 	.word	0x0802f894

080144fc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80144fc:	b590      	push	{r4, r7, lr}
 80144fe:	b085      	sub	sp, #20
 8014500:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014502:	f7fd f959 	bl	80117b8 <_ZN14BitmapDatabase11getInstanceEv>
 8014506:	4604      	mov	r4, r0
 8014508:	f7fd f960 	bl	80117cc <_ZN14BitmapDatabase15getInstanceSizeEv>
 801450c:	4603      	mov	r3, r0
 801450e:	4619      	mov	r1, r3
 8014510:	2300      	movs	r3, #0
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	2300      	movs	r3, #0
 8014516:	2200      	movs	r2, #0
 8014518:	4620      	mov	r0, r4
 801451a:	f009 fb85 	bl	801dc28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801451e:	4809      	ldr	r0, [pc, #36]	; (8014544 <touchgfx_init+0x48>)
 8014520:	f7ff fd26 	bl	8013f70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8014524:	2000      	movs	r0, #0
 8014526:	f7fd fa95 	bl	8011a54 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801452a:	4807      	ldr	r0, [pc, #28]	; (8014548 <touchgfx_init+0x4c>)
 801452c:	f009 fa34 	bl	801d998 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8014530:	f7ff feb4 	bl	801429c <_ZN12FrontendHeap11getInstanceEv>
 8014534:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8014536:	4805      	ldr	r0, [pc, #20]	; (801454c <touchgfx_init+0x50>)
 8014538:	f7fd ff58 	bl	80123ec <_ZN11TouchGFXHAL10initializeEv>
}
 801453c:	bf00      	nop
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	bd90      	pop	{r4, r7, pc}
 8014544:	2003814c 	.word	0x2003814c
 8014548:	20000040 	.word	0x20000040
 801454c:	20038150 	.word	0x20038150

08014550 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	4a11      	ldr	r2, [pc, #68]	; (80145a0 <_ZN12FrontendHeapD1Ev+0x50>)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014564:	4413      	add	r3, r2
 8014566:	4618      	mov	r0, r3
 8014568:	f7fd fb3a 	bl	8011be0 <_ZN19FrontendApplicationD1Ev>
 801456c:	687a      	ldr	r2, [r7, #4]
 801456e:	f243 7398 	movw	r3, #14232	; 0x3798
 8014572:	4413      	add	r3, r2
 8014574:	4618      	mov	r0, r3
 8014576:	f000 f827 	bl	80145c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	332c      	adds	r3, #44	; 0x2c
 801457e:	4618      	mov	r0, r3
 8014580:	f000 f844 	bl	801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	3314      	adds	r3, #20
 8014588:	4618      	mov	r0, r3
 801458a:	f000 f863 	bl	8014654 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	f7ff feb1 	bl	80142f8 <_ZN16FrontendHeapBaseD1Ev>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	0802fa94 	.word	0x0802fa94

080145a4 <_ZN12FrontendHeapD0Ev>:
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7ff ffcf 	bl	8014550 <_ZN12FrontendHeapD1Ev>
 80145b2:	f643 1108 	movw	r1, #14600	; 0x3908
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f015 f878 	bl	80296ac <_ZdlPvj>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4618      	mov	r0, r3
 80145c0:	3708      	adds	r7, #8
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
	...

080145c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	4a05      	ldr	r2, [pc, #20]	; (80145e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	601a      	str	r2, [r3, #0]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	f001 fb4a 	bl	8015c72 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4618      	mov	r0, r3
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	0802faa8 	.word	0x0802faa8

080145ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ff ffe7 	bl	80145c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80145fa:	2114      	movs	r1, #20
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f015 f855 	bl	80296ac <_ZdlPvj>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	4a05      	ldr	r2, [pc, #20]	; (801462c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	f001 fb28 	bl	8015c72 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4618      	mov	r0, r3
 8014626:	3708      	adds	r7, #8
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	0802fadc 	.word	0x0802fadc

08014630 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014630:	b580      	push	{r7, lr}
 8014632:	b082      	sub	sp, #8
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7ff ffe7 	bl	801460c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801463e:	f243 716c 	movw	r1, #14188	; 0x376c
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f015 f832 	bl	80296ac <_ZdlPvj>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	4618      	mov	r0, r3
 801464c:	3708      	adds	r7, #8
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
	...

08014654 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	4a05      	ldr	r2, [pc, #20]	; (8014674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	601a      	str	r2, [r3, #0]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	f001 fb04 	bl	8015c72 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	0802fb10 	.word	0x0802fb10

08014678 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7ff ffe7 	bl	8014654 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014686:	2118      	movs	r1, #24
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f015 f80f 	bl	80296ac <_ZdlPvj>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	4618      	mov	r0, r3
 8014692:	3708      	adds	r7, #8
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	4a05      	ldr	r2, [pc, #20]	; (80146b8 <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7ff fcb1 	bl	8014010 <_ZN8touchgfx3LCDD1Ev>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	08030728 	.word	0x08030728

080146bc <_ZN8touchgfx8LCD32bppD0Ev>:
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7ff ffe7 	bl	8014698 <_ZN8touchgfx8LCD32bppD1Ev>
 80146ca:	2178      	movs	r1, #120	; 0x78
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f014 ffed 	bl	80296ac <_ZdlPvj>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	3708      	adds	r7, #8
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af02      	add	r7, sp, #8
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d119      	bne.n	8014720 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d114      	bne.n	8014720 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80146f6:	4818      	ldr	r0, [pc, #96]	; (8014758 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80146f8:	f7ff feee 	bl	80144d8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80146fc:	4817      	ldr	r0, [pc, #92]	; (801475c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80146fe:	f7ff f8a1 	bl	8013844 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 8014702:	4817      	ldr	r0, [pc, #92]	; (8014760 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014704:	f00c fb56 	bl	8020db4 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8014708:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801470c:	9301      	str	r3, [sp, #4]
 801470e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	4b10      	ldr	r3, [pc, #64]	; (8014758 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014716:	4a12      	ldr	r2, [pc, #72]	; (8014760 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014718:	4910      	ldr	r1, [pc, #64]	; (801475c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801471a:	4812      	ldr	r0, [pc, #72]	; (8014764 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801471c:	f7ff feb0 	bl	8014480 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d113      	bne.n	801474e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801472c:	4293      	cmp	r3, r2
 801472e:	d10e      	bne.n	801474e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014730:	480c      	ldr	r0, [pc, #48]	; (8014764 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014732:	f7fd feeb 	bl	801250c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014736:	480c      	ldr	r0, [pc, #48]	; (8014768 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014738:	f7f9 fa14 	bl	800db64 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 801473c:	4808      	ldr	r0, [pc, #32]	; (8014760 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801473e:	f7ff ffab 	bl	8014698 <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8014742:	4806      	ldr	r0, [pc, #24]	; (801475c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014744:	f7ff f8a8 	bl	8013898 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8014748:	4803      	ldr	r0, [pc, #12]	; (8014758 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801474a:	f7fd fc4f 	bl	8011fec <_ZN20STM32TouchControllerD1Ev>
}
 801474e:	bf00      	nop
 8014750:	3708      	adds	r7, #8
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	20037330 	.word	0x20037330
 801475c:	20037334 	.word	0x20037334
 8014760:	200380d4 	.word	0x200380d4
 8014764:	20038150 	.word	0x20038150
 8014768:	20000040 	.word	0x20000040

0801476c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014774:	2301      	movs	r3, #1
    }
 8014776:	4618      	mov	r0, r3
 8014778:	370c      	adds	r7, #12
 801477a:	46bd      	mov	sp, r7
 801477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014780:	4770      	bx	lr

08014782 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014782:	b480      	push	{r7}
 8014784:	b083      	sub	sp, #12
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801478a:	230c      	movs	r3, #12
    }
 801478c:	4618      	mov	r0, r3
 801478e:	370c      	adds	r7, #12
 8014790:	46bd      	mov	sp, r7
 8014792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014796:	4770      	bx	lr

08014798 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80147a4:	887a      	ldrh	r2, [r7, #2]
 80147a6:	4613      	mov	r3, r2
 80147a8:	005b      	lsls	r3, r3, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	3308      	adds	r3, #8
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	4413      	add	r3, r2
    }
 80147b4:	4618      	mov	r0, r3
 80147b6:	370c      	adds	r7, #12
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr

080147c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80147c0:	b480      	push	{r7}
 80147c2:	b083      	sub	sp, #12
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	460b      	mov	r3, r1
 80147ca:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80147cc:	887a      	ldrh	r2, [r7, #2]
 80147ce:	4613      	mov	r3, r2
 80147d0:	005b      	lsls	r3, r3, #1
 80147d2:	4413      	add	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	3308      	adds	r3, #8
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	4413      	add	r3, r2
    }
 80147dc:	4618      	mov	r0, r3
 80147de:	370c      	adds	r7, #12
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr

080147e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80147f0:	2301      	movs	r3, #1
    }
 80147f2:	4618      	mov	r0, r3
 80147f4:	370c      	adds	r7, #12
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr

080147fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80147fe:	b480      	push	{r7}
 8014800:	b083      	sub	sp, #12
 8014802:	af00      	add	r7, sp, #0
 8014804:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014806:	f243 7364 	movw	r3, #14180	; 0x3764
    }
 801480a:	4618      	mov	r0, r3
 801480c:	370c      	adds	r7, #12
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr

08014816 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014816:	b480      	push	{r7}
 8014818:	b083      	sub	sp, #12
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
 801481e:	460b      	mov	r3, r1
 8014820:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014822:	887b      	ldrh	r3, [r7, #2]
 8014824:	f243 7264 	movw	r2, #14180	; 0x3764
 8014828:	fb02 f303 	mul.w	r3, r2, r3
 801482c:	3308      	adds	r3, #8
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4413      	add	r3, r2
    }
 8014832:	4618      	mov	r0, r3
 8014834:	370c      	adds	r7, #12
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr

0801483e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801483e:	b480      	push	{r7}
 8014840:	b083      	sub	sp, #12
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
 8014846:	460b      	mov	r3, r1
 8014848:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801484a:	887b      	ldrh	r3, [r7, #2]
 801484c:	f243 7264 	movw	r2, #14180	; 0x3764
 8014850:	fb02 f303 	mul.w	r3, r2, r3
 8014854:	3308      	adds	r3, #8
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	4413      	add	r3, r2
    }
 801485a:	4618      	mov	r0, r3
 801485c:	370c      	adds	r7, #12
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr

08014866 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014866:	b480      	push	{r7}
 8014868:	b083      	sub	sp, #12
 801486a:	af00      	add	r7, sp, #0
 801486c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801486e:	2301      	movs	r3, #1
    }
 8014870:	4618      	mov	r0, r3
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014884:	2310      	movs	r3, #16
    }
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr

08014892 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014892:	b480      	push	{r7}
 8014894:	b083      	sub	sp, #12
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	460b      	mov	r3, r1
 801489c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801489e:	887b      	ldrh	r3, [r7, #2]
 80148a0:	011b      	lsls	r3, r3, #4
 80148a2:	3308      	adds	r3, #8
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	4413      	add	r3, r2
    }
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	460b      	mov	r3, r1
 80148be:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148c0:	887b      	ldrh	r3, [r7, #2]
 80148c2:	011b      	lsls	r3, r3, #4
 80148c4:	3308      	adds	r3, #8
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	4413      	add	r3, r2
    }
 80148ca:	4618      	mov	r0, r3
 80148cc:	370c      	adds	r7, #12
 80148ce:	46bd      	mov	sp, r7
 80148d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d4:	4770      	bx	lr

080148d6 <_GLOBAL__sub_I_touchgfx_init>:
 80148d6:	b580      	push	{r7, lr}
 80148d8:	af00      	add	r7, sp, #0
 80148da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148de:	2001      	movs	r0, #1
 80148e0:	f7ff fefc 	bl	80146dc <_Z41__static_initialization_and_destruction_0ii>
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <_GLOBAL__sub_D_touchgfx_init>:
 80148e6:	b580      	push	{r7, lr}
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148ee:	2000      	movs	r0, #0
 80148f0:	f7ff fef4 	bl	80146dc <_Z41__static_initialization_and_destruction_0ii>
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b082      	sub	sp, #8
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	3320      	adds	r3, #32
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	4798      	blx	r3
    }
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8014912:	b480      	push	{r7}
 8014914:	b083      	sub	sp, #12
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8014920:	4618      	mov	r0, r3
 8014922:	370c      	adds	r7, #12
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr

0801492c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801492c:	b480      	push	{r7}
 801492e:	b083      	sub	sp, #12
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801493a:	3301      	adds	r3, #1
 801493c:	b2da      	uxtb	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014944:	bf00      	nop
 8014946:	370c      	adds	r7, #12
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	460b      	mov	r3, r1
 801495a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801495c:	78fb      	ldrb	r3, [r7, #3]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d002      	beq.n	8014968 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014962:	78fb      	ldrb	r3, [r7, #3]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d105      	bne.n	8014974 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	78fa      	ldrb	r2, [r7, #3]
 801496c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014970:	2301      	movs	r3, #1
 8014972:	e027      	b.n	80149c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014974:	78fb      	ldrb	r3, [r7, #3]
 8014976:	2b01      	cmp	r3, #1
 8014978:	d123      	bne.n	80149c2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801497e:	2b00      	cmp	r3, #0
 8014980:	d014      	beq.n	80149ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	339c      	adds	r3, #156	; 0x9c
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	4798      	blx	r3
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014996:	429a      	cmp	r2, r3
 8014998:	d008      	beq.n	80149ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801499a:	4b0c      	ldr	r3, [pc, #48]	; (80149cc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	f083 0301 	eor.w	r3, r3, #1
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d001      	beq.n	80149ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80149a8:	2301      	movs	r3, #1
 80149aa:	e000      	b.n	80149ae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80149ac:	2300      	movs	r3, #0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d005      	beq.n	80149be <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	78fa      	ldrb	r2, [r7, #3]
 80149b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80149ba:	2301      	movs	r3, #1
 80149bc:	e002      	b.n	80149c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80149be:	2300      	movs	r3, #0
 80149c0:	e000      	b.n	80149c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80149c2:	2300      	movs	r3, #0
    }
 80149c4:	4618      	mov	r0, r3
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	2003c26a 	.word	0x2003c26a

080149d0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	683a      	ldr	r2, [r7, #0]
 80149de:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80149e0:	bf00      	nop
 80149e2:	370c      	adds	r7, #12
 80149e4:	46bd      	mov	sp, r7
 80149e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ea:	4770      	bx	lr

080149ec <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
    {
 80149f4:	4a04      	ldr	r2, [pc, #16]	; (8014a08 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	601a      	str	r2, [r3, #0]
    }
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4618      	mov	r0, r3
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr
 8014a08:	0802fba8 	.word	0x0802fba8

08014a0c <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
    }
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7ff ffe9 	bl	80149ec <_ZN8touchgfx15VideoControllerD1Ev>
 8014a1a:	2104      	movs	r1, #4
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f014 fe45 	bl	80296ac <_ZdlPvj>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	4618      	mov	r0, r3
 8014a26:	3708      	adds	r7, #8
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	683a      	ldr	r2, [r7, #0]
 8014a3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014a3c:	bf00      	nop
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr

08014a48 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8014a48:	b480      	push	{r7}
 8014a4a:	b085      	sub	sp, #20
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	4608      	mov	r0, r1
 8014a52:	4611      	mov	r1, r2
 8014a54:	461a      	mov	r2, r3
 8014a56:	4603      	mov	r3, r0
 8014a58:	72fb      	strb	r3, [r7, #11]
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	813b      	strh	r3, [r7, #8]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	7afa      	ldrb	r2, [r7, #11]
 8014a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	893a      	ldrh	r2, [r7, #8]
 8014a6e:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	88fa      	ldrh	r2, [r7, #6]
 8014a74:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8014a76:	bf00      	nop
 8014a78:	3714      	adds	r7, #20
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a80:	4770      	bx	lr
	...

08014a84 <__NVIC_EnableIRQ>:
{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	db0b      	blt.n	8014aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a96:	79fb      	ldrb	r3, [r7, #7]
 8014a98:	f003 021f 	and.w	r2, r3, #31
 8014a9c:	4907      	ldr	r1, [pc, #28]	; (8014abc <__NVIC_EnableIRQ+0x38>)
 8014a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aa2:	095b      	lsrs	r3, r3, #5
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8014aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014aae:	bf00      	nop
 8014ab0:	370c      	adds	r7, #12
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	e000e100 	.word	0xe000e100

08014ac0 <__NVIC_DisableIRQ>:
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	db12      	blt.n	8014af8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014ad2:	79fb      	ldrb	r3, [r7, #7]
 8014ad4:	f003 021f 	and.w	r2, r3, #31
 8014ad8:	490a      	ldr	r1, [pc, #40]	; (8014b04 <__NVIC_DisableIRQ+0x44>)
 8014ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ade:	095b      	lsrs	r3, r3, #5
 8014ae0:	2001      	movs	r0, #1
 8014ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8014ae6:	3320      	adds	r3, #32
 8014ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014aec:	f3bf 8f4f 	dsb	sy
}
 8014af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014af2:	f3bf 8f6f 	isb	sy
}
 8014af6:	bf00      	nop
}
 8014af8:	bf00      	nop
 8014afa:	370c      	adds	r7, #12
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr
 8014b04:	e000e100 	.word	0xe000e100

08014b08 <__NVIC_SetPriority>:
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	4603      	mov	r3, r0
 8014b10:	6039      	str	r1, [r7, #0]
 8014b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	db0a      	blt.n	8014b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	490c      	ldr	r1, [pc, #48]	; (8014b54 <__NVIC_SetPriority+0x4c>)
 8014b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b26:	0112      	lsls	r2, r2, #4
 8014b28:	b2d2      	uxtb	r2, r2
 8014b2a:	440b      	add	r3, r1
 8014b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014b30:	e00a      	b.n	8014b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	b2da      	uxtb	r2, r3
 8014b36:	4908      	ldr	r1, [pc, #32]	; (8014b58 <__NVIC_SetPriority+0x50>)
 8014b38:	79fb      	ldrb	r3, [r7, #7]
 8014b3a:	f003 030f 	and.w	r3, r3, #15
 8014b3e:	3b04      	subs	r3, #4
 8014b40:	0112      	lsls	r2, r2, #4
 8014b42:	b2d2      	uxtb	r2, r2
 8014b44:	440b      	add	r3, r1
 8014b46:	761a      	strb	r2, [r3, #24]
}
 8014b48:	bf00      	nop
 8014b4a:	370c      	adds	r7, #12
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b52:	4770      	bx	lr
 8014b54:	e000e100 	.word	0xe000e100
 8014b58:	e000ed00 	.word	0xe000ed00

08014b5c <SCB_CleanInvalidateDCache>:
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8014b62:	4b21      	ldr	r3, [pc, #132]	; (8014be8 <SCB_CleanInvalidateDCache+0x8c>)
 8014b64:	2200      	movs	r2, #0
 8014b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8014b6a:	f3bf 8f4f 	dsb	sy
}
 8014b6e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8014b70:	4b1d      	ldr	r3, [pc, #116]	; (8014be8 <SCB_CleanInvalidateDCache+0x8c>)
 8014b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b76:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	0b5b      	lsrs	r3, r3, #13
 8014b7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014b80:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	08db      	lsrs	r3, r3, #3
 8014b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014b8a:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	015a      	lsls	r2, r3, #5
 8014b90:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8014b94:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8014b9a:	4913      	ldr	r1, [pc, #76]	; (8014be8 <SCB_CleanInvalidateDCache+0x8c>)
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	1e5a      	subs	r2, r3, #1
 8014ba6:	60ba      	str	r2, [r7, #8]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	bf14      	ite	ne
 8014bac:	2301      	movne	r3, #1
 8014bae:	2300      	moveq	r3, #0
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d000      	beq.n	8014bb8 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8014bb6:	e7e9      	b.n	8014b8c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	1e5a      	subs	r2, r3, #1
 8014bbc:	60fa      	str	r2, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	bf14      	ite	ne
 8014bc2:	2301      	movne	r3, #1
 8014bc4:	2300      	moveq	r3, #0
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d000      	beq.n	8014bce <SCB_CleanInvalidateDCache+0x72>
    do {
 8014bcc:	e7d9      	b.n	8014b82 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8014bce:	f3bf 8f4f 	dsb	sy
}
 8014bd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014bd4:	f3bf 8f6f 	isb	sy
}
 8014bd8:	bf00      	nop
}
 8014bda:	bf00      	nop
 8014bdc:	3714      	adds	r7, #20
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr
 8014be6:	bf00      	nop
 8014be8:	e000ed00 	.word	0xe000ed00

08014bec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014bec:	b5b0      	push	{r4, r5, r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f001 fb3f 	bl	801627a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8014bfc:	687d      	ldr	r5, [r7, #4]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	3364      	adds	r3, #100	; 0x64
 8014c04:	681c      	ldr	r4, [r3, #0]
 8014c06:	f005 ff33 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	4628      	mov	r0, r5
 8014c10:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4910      	ldr	r1, [pc, #64]	; (8014c58 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff feda 	bl	80149d0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2101      	movs	r1, #1
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7ff fe95 	bl	8014950 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	3388      	adds	r3, #136	; 0x88
 8014c2e:	681c      	ldr	r4, [r3, #0]
 8014c30:	2300      	movs	r3, #0
 8014c32:	2200      	movs	r2, #0
 8014c34:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014c38:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	4907      	ldr	r1, [pc, #28]	; (8014c5c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 8014c3e:	4808      	ldr	r0, [pc, #32]	; (8014c60 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8014c40:	f000 f9ee 	bl	8015020 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8014c44:	2200      	movs	r2, #0
 8014c46:	4907      	ldr	r1, [pc, #28]	; (8014c64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8014c48:	4805      	ldr	r0, [pc, #20]	; (8014c60 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8014c4a:	f000 fa09 	bl	8015060 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>
}
 8014c4e:	bf00      	nop
 8014c50:	3708      	adds	r7, #8
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bdb0      	pop	{r4, r5, r7, pc}
 8014c56:	bf00      	nop
 8014c58:	08013645 	.word	0x08013645
 8014c5c:	200381cc 	.word	0x200381cc
 8014c60:	20038210 	.word	0x20038210
 8014c64:	200002f4 	.word	0x200002f4

08014c68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014c70:	2109      	movs	r1, #9
 8014c72:	205a      	movs	r0, #90	; 0x5a
 8014c74:	f7ff ff48 	bl	8014b08 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014c78:	2109      	movs	r1, #9
 8014c7a:	2058      	movs	r0, #88	; 0x58
 8014c7c:	f7ff ff44 	bl	8014b08 <__NVIC_SetPriority>
}
 8014c80:	bf00      	nop
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b082      	sub	sp, #8
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014c90:	205a      	movs	r0, #90	; 0x5a
 8014c92:	f7ff fef7 	bl	8014a84 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014c96:	2058      	movs	r0, #88	; 0x58
 8014c98:	f7ff fef4 	bl	8014a84 <__NVIC_EnableIRQ>
}
 8014c9c:	bf00      	nop
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014cac:	205a      	movs	r0, #90	; 0x5a
 8014cae:	f7ff ff07 	bl	8014ac0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014cb2:	2058      	movs	r0, #88	; 0x58
 8014cb4:	f7ff ff04 	bl	8014ac0 <__NVIC_DisableIRQ>
}
 8014cb8:	bf00      	nop
 8014cba:	3708      	adds	r7, #8
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014cc8:	4b11      	ldr	r3, [pc, #68]	; (8014d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	3b01      	subs	r3, #1
 8014cd6:	b29a      	uxth	r2, r3
 8014cd8:	4b0e      	ldr	r3, [pc, #56]	; (8014d14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014cda:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014cdc:	4b0c      	ldr	r3, [pc, #48]	; (8014d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014cde:	691b      	ldr	r3, [r3, #16]
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	b29a      	uxth	r2, r3
 8014cec:	4b0a      	ldr	r3, [pc, #40]	; (8014d18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014cee:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014cf0:	4b08      	ldr	r3, [pc, #32]	; (8014d14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014cf2:	881a      	ldrh	r2, [r3, #0]
 8014cf4:	4b06      	ldr	r3, [pc, #24]	; (8014d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014cf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014cf8:	4b05      	ldr	r3, [pc, #20]	; (8014d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cfc:	4a04      	ldr	r2, [pc, #16]	; (8014d10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014cfe:	f043 0301 	orr.w	r3, r3, #1
 8014d02:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014d04:	bf00      	nop
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr
 8014d10:	40016800 	.word	0x40016800
 8014d14:	2003825a 	.word	0x2003825a
 8014d18:	2003825c 	.word	0x2003825c

08014d1c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	4618      	mov	r0, r3
 8014d28:	f001 fa8e 	bl	8016248 <_ZN8touchgfx3HAL10beginFrameEv>
 8014d2c:	4603      	mov	r3, r0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
	...

08014d38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d002      	beq.n	8014d50 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8014d4a:	4b07      	ldr	r3, [pc, #28]	; (8014d68 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f001 fa84 	bl	8016260 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8014d58:	4804      	ldr	r0, [pc, #16]	; (8014d6c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 8014d5a:	f000 f997 	bl	801508c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>
}
 8014d5e:	bf00      	nop
 8014d60:	3708      	adds	r7, #8
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	20038258 	.word	0x20038258
 8014d6c:	20038210 	.word	0x20038210

08014d70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014d70:	b480      	push	{r7}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014d78:	4b03      	ldr	r3, [pc, #12]	; (8014d88 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	370c      	adds	r7, #12
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr
 8014d88:	40016884 	.word	0x40016884

08014d8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014d96:	4a06      	ldr	r2, [pc, #24]	; (8014db0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014d9c:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014d9e:	2201      	movs	r2, #1
 8014da0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014da2:	bf00      	nop
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop
 8014db0:	40016884 	.word	0x40016884
 8014db4:	40016800 	.word	0x40016800

08014db8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6839      	ldr	r1, [r7, #0]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f001 fa07 	bl	80161da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014dcc:	4b08      	ldr	r3, [pc, #32]	; (8014df0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8014dce:	695b      	ldr	r3, [r3, #20]
 8014dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	bf14      	ite	ne
 8014dd8:	2301      	movne	r3, #1
 8014dda:	2300      	moveq	r3, #0
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d001      	beq.n	8014de6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8014de2:	f7ff febb 	bl	8014b5c <SCB_CleanInvalidateDCache>
    }
}
 8014de6:	bf00      	nop
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	e000ed00 	.word	0xe000ed00

08014df4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
 8014e00:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	68b9      	ldr	r1, [r7, #8]
 8014e0a:	f001 fb50 	bl	80164ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8014e0e:	4603      	mov	r3, r0
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3710      	adds	r7, #16
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b085      	sub	sp, #20
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014e20:	4b0d      	ldr	r3, [pc, #52]	; (8014e58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e24:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014e26:	4b0c      	ldr	r3, [pc, #48]	; (8014e58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014e28:	68db      	ldr	r3, [r3, #12]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	3301      	adds	r3, #1
 8014e34:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8014e36:	89fa      	ldrh	r2, [r7, #14]
 8014e38:	89bb      	ldrh	r3, [r7, #12]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d304      	bcc.n	8014e48 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8014e3e:	89fa      	ldrh	r2, [r7, #14]
 8014e40:	89bb      	ldrh	r3, [r7, #12]
 8014e42:	1ad3      	subs	r3, r2, r3
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	e000      	b.n	8014e4a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8014e48:	2300      	movs	r3, #0
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3714      	adds	r7, #20
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop
 8014e58:	40016800 	.word	0x40016800

08014e5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014e64:	4b08      	ldr	r3, [pc, #32]	; (8014e88 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8014e66:	695b      	ldr	r3, [r3, #20]
 8014e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	bf14      	ite	ne
 8014e70:	2301      	movne	r3, #1
 8014e72:	2300      	moveq	r3, #0
 8014e74:	b2db      	uxtb	r3, r3
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8014e7a:	f7ff fe6f 	bl	8014b5c <SCB_CleanInvalidateDCache>
    }
}
 8014e7e:	bf00      	nop
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	e000ed00 	.word	0xe000ed00

08014e8c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014e94:	4b08      	ldr	r3, [pc, #32]	; (8014eb8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8014e96:	695b      	ldr	r3, [r3, #20]
 8014e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	bf14      	ite	ne
 8014ea0:	2301      	movne	r3, #1
 8014ea2:	2300      	moveq	r3, #0
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d001      	beq.n	8014eae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8014eaa:	f7ff fe57 	bl	8014b5c <SCB_CleanInvalidateDCache>
    }
}
 8014eae:	bf00      	nop
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	e000ed00 	.word	0xe000ed00

08014ebc <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8014ec4:	f7f9 fb82 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	bf0c      	ite	eq
 8014ece:	2301      	moveq	r3, #1
 8014ed0:	2300      	movne	r3, #0
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d132      	bne.n	8014f3e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8014ed8:	4b1b      	ldr	r3, [pc, #108]	; (8014f48 <HAL_LTDC_LineEventCallback+0x8c>)
 8014eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014edc:	4a1b      	ldr	r2, [pc, #108]	; (8014f4c <HAL_LTDC_LineEventCallback+0x90>)
 8014ede:	8812      	ldrh	r2, [r2, #0]
 8014ee0:	4293      	cmp	r3, r2
 8014ee2:	bf0c      	ite	eq
 8014ee4:	2301      	moveq	r3, #1
 8014ee6:	2300      	movne	r3, #0
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d017      	beq.n	8014f1e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014eee:	4b18      	ldr	r3, [pc, #96]	; (8014f50 <HAL_LTDC_LineEventCallback+0x94>)
 8014ef0:	881b      	ldrh	r3, [r3, #0]
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7f1 f8b9 	bl	800606c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8014efa:	f7f9 fb67 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014efe:	4603      	mov	r3, r0
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7ff fd13 	bl	801492c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014f06:	f7fe fb75 	bl	80135f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8014f0a:	f7f9 fb5f 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	4618      	mov	r0, r3
 8014f12:	f001 fef7 	bl	8016d04 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014f16:	2000      	movs	r0, #0
 8014f18:	f7fd f88a 	bl	8012030 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014f1c:	e010      	b.n	8014f40 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014f1e:	4b0b      	ldr	r3, [pc, #44]	; (8014f4c <HAL_LTDC_LineEventCallback+0x90>)
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	4619      	mov	r1, r3
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f7f1 f8a1 	bl	800606c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8014f2a:	f7f9 fb4f 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7ff fce0 	bl	80148f6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014f36:	2000      	movs	r0, #0
 8014f38:	f7fd f896 	bl	8012068 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014f3c:	e000      	b.n	8014f40 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8014f3e:	bf00      	nop
        }
    }
 8014f40:	3708      	adds	r7, #8
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	40016800 	.word	0x40016800
 8014f4c:	2003825a 	.word	0x2003825a
 8014f50:	2003825c 	.word	0x2003825c

08014f54 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	4a04      	ldr	r2, [pc, #16]	; (8014f70 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	4618      	mov	r0, r3
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	0802fba8 	.word	0x0802fba8

08014f74 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8014f74:	b5b0      	push	{r4, r5, r7, lr}
 8014f76:	b082      	sub	sp, #8
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff ffe8 	bl	8014f54 <_ZN8touchgfx15VideoControllerC1Ev>
 8014f84:	4a25      	ldr	r2, [pc, #148]	; (801501c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0xa8>)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	601a      	str	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	330c      	adds	r3, #12
 8014f8e:	2400      	movs	r4, #0
 8014f90:	461d      	mov	r5, r3
 8014f92:	2c00      	cmp	r4, #0
 8014f94:	db05      	blt.n	8014fa2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x2e>
 8014f96:	4628      	mov	r0, r5
 8014f98:	f000 f8bd 	bl	8015116 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 8014f9c:	3524      	adds	r5, #36	; 0x24
 8014f9e:	3c01      	subs	r4, #1
 8014fa0:	e7f7      	b.n	8014f92 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x1e>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2200      	movs	r2, #0
 8014fac:	635a      	str	r2, [r3, #52]	; 0x34
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	3308      	adds	r3, #8
 8014fdc:	2204      	movs	r2, #4
 8014fde:	2100      	movs	r1, #0
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f014 fc99 	bl	8029918 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	3304      	adds	r3, #4
 8014fea:	2204      	movs	r2, #4
 8014fec:	2100      	movs	r1, #0
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f014 fc92 	bl	8029918 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	2001      	movs	r0, #1
 8014ffa:	f7f5 f8b9 	bl	800a170 <osSemaphoreNew>
 8014ffe:	4602      	mov	r2, r0
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8015004:	2000      	movs	r0, #0
 8015006:	f7f4 ff6b 	bl	8009ee0 <osMutexNew>
 801500a:	4602      	mov	r2, r0
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	4618      	mov	r0, r3
 8015014:	3708      	adds	r7, #8
 8015016:	46bd      	mov	sp, r7
 8015018:	bdb0      	pop	{r4, r5, r7, pc}
 801501a:	bf00      	nop
 801501c:	0802fb68 	.word	0x0802fb68

08015020 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d006      	beq.n	8015040 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x20>
 8015032:	4b08      	ldr	r3, [pc, #32]	; (8015054 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x34>)
 8015034:	4a08      	ldr	r2, [pc, #32]	; (8015058 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x38>)
 8015036:	f240 1103 	movw	r1, #259	; 0x103
 801503a:	4808      	ldr	r0, [pc, #32]	; (801505c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801503c:	f014 fbe0 	bl	8029800 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8015040:	68fa      	ldr	r2, [r7, #12]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	4413      	add	r3, r2
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	605a      	str	r2, [r3, #4]
    }
 801504c:	bf00      	nop
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	0802dd2c 	.word	0x0802dd2c
 8015058:	0802dd40 	.word	0x0802dd40
 801505c:	0802dea0 	.word	0x0802dea0

08015060 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68ba      	ldr	r2, [r7, #8]
 8015070:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	687a      	ldr	r2, [r7, #4]
 801507e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8015080:	bf00      	nop
 8015082:	3714      	adds	r7, #20
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>:

    void endFrame()
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8015094:	2300      	movs	r3, #0
 8015096:	60fb      	str	r3, [r7, #12]
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d120      	bne.n	80150e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	4613      	mov	r3, r2
 80150a2:	00db      	lsls	r3, r3, #3
 80150a4:	4413      	add	r3, r2
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	3308      	adds	r3, #8
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	4413      	add	r3, r2
 80150ae:	3304      	adds	r3, #4
 80150b0:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	7f5b      	ldrb	r3, [r3, #29]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d103      	bne.n	80150c2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x36>
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	7f9b      	ldrb	r3, [r3, #30]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00a      	beq.n	80150d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 80150c2:	68b9      	ldr	r1, [r7, #8]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f000 f85e 	bl	8015186 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d003      	beq.n	80150d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2201      	movs	r2, #1
 80150d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	3301      	adds	r3, #1
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	e7db      	b.n	8015098 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2201      	movs	r2, #1
 80150e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f5 f941 	bl	800a374 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d008      	beq.n	801510e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015100:	4618      	mov	r0, r3
 8015102:	f7f4 ffe5 	bl	800a0d0 <osMutexRelease>
            uiHasMutex = false;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2200      	movs	r2, #0
 801510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 801510e:	bf00      	nop
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8015116:	b480      	push	{r7}
 8015118:	b083      	sub	sp, #12
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2200      	movs	r2, #0
 8015128:	605a      	str	r2, [r3, #4]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	609a      	str	r2, [r3, #8]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2200      	movs	r2, #0
 8015134:	60da      	str	r2, [r3, #12]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2200      	movs	r2, #0
 801513a:	611a      	str	r2, [r3, #16]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	615a      	str	r2, [r3, #20]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2200      	movs	r2, #0
 8015146:	619a      	str	r2, [r3, #24]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	771a      	strb	r2, [r3, #28]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2200      	movs	r2, #0
 8015152:	775a      	strb	r2, [r3, #29]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2200      	movs	r2, #0
 8015158:	779a      	strb	r2, [r3, #30]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2200      	movs	r2, #0
 801515e:	77da      	strb	r2, [r3, #31]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2200      	movs	r2, #0
 8015164:	f883 2020 	strb.w	r2, [r3, #32]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2201      	movs	r2, #1
 801516c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2200      	movs	r2, #0
 8015174:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	4618      	mov	r0, r3
 801517c:	370c      	adds	r7, #12
 801517e:	46bd      	mov	sp, r7
 8015180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015184:	4770      	bx	lr

08015186 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8015186:	b480      	push	{r7}
 8015188:	b083      	sub	sp, #12
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	683a      	ldr	r2, [r7, #0]
 8015196:	68d2      	ldr	r2, [r2, #12]
 8015198:	fb03 f202 	mul.w	r2, r3, r2
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	691b      	ldr	r3, [r3, #16]
 80151a0:	6839      	ldr	r1, [r7, #0]
 80151a2:	6849      	ldr	r1, [r1, #4]
 80151a4:	fb01 f303 	mul.w	r3, r1, r3
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d322      	bcc.n	80151f2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d01b      	beq.n	80151ee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	689b      	ldr	r3, [r3, #8]
 80151ba:	683a      	ldr	r2, [r7, #0]
 80151bc:	68d2      	ldr	r2, [r2, #12]
 80151be:	fb03 f202 	mul.w	r2, r3, r2
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	691b      	ldr	r3, [r3, #16]
 80151c6:	6839      	ldr	r1, [r7, #0]
 80151c8:	6849      	ldr	r1, [r1, #4]
 80151ca:	fb01 f303 	mul.w	r3, r1, r3
 80151ce:	1ad2      	subs	r2, r2, r3
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	691b      	ldr	r3, [r3, #16]
 80151d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	699b      	ldr	r3, [r3, #24]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d004      	beq.n	80151ee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	699b      	ldr	r3, [r3, #24]
 80151e8:	1e5a      	subs	r2, r3, #1
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80151ee:	2301      	movs	r3, #1
 80151f0:	e000      	b.n	80151f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80151f2:	2300      	movs	r3, #0
    }
 80151f4:	4618      	mov	r0, r3
 80151f6:	370c      	adds	r7, #12
 80151f8:	46bd      	mov	sp, r7
 80151fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fe:	4770      	bx	lr

08015200 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8015200:	b580      	push	{r7, lr}
 8015202:	b082      	sub	sp, #8
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	4a05      	ldr	r2, [pc, #20]	; (8015220 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev+0x20>)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	601a      	str	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4618      	mov	r0, r3
 8015212:	f7ff fbeb 	bl	80149ec <_ZN8touchgfx15VideoControllerD1Ev>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4618      	mov	r0, r3
 801521a:	3708      	adds	r7, #8
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	0802fb68 	.word	0x0802fb68

08015224 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED0Ev>:
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7ff ffe7 	bl	8015200 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
 8015232:	2148      	movs	r1, #72	; 0x48
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f014 fa39 	bl	80296ac <_ZdlPvj>
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	4618      	mov	r0, r3
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <_Z41__static_initialization_and_destruction_0ii>:
}
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d10a      	bne.n	801526a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801525a:	4293      	cmp	r3, r2
 801525c:	d105      	bne.n	801526a <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 801525e:	480c      	ldr	r0, [pc, #48]	; (8015290 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8015260:	f7fd fa08 	bl	8012674 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 0, 0, 0*4U, Bitmap::ARGB8888> videoController;
 8015264:	480b      	ldr	r0, [pc, #44]	; (8015294 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8015266:	f7ff fe85 	bl	8014f74 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10a      	bne.n	8015286 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015276:	4293      	cmp	r3, r2
 8015278:	d105      	bne.n	8015286 <_Z41__static_initialization_and_destruction_0ii+0x42>
 801527a:	4806      	ldr	r0, [pc, #24]	; (8015294 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801527c:	f7ff ffc0 	bl	8015200 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8015280:	4803      	ldr	r0, [pc, #12]	; (8015290 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8015282:	f7fe f92f 	bl	80134e4 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8015286:	bf00      	nop
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	200381cc 	.word	0x200381cc
 8015294:	20038210 	.word	0x20038210

08015298 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80152a2:	2300      	movs	r3, #0
 80152a4:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 fa7a 	bl	80157a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>
 80152ac:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	68ba      	ldr	r2, [r7, #8]
 80152b2:	4613      	mov	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	4413      	add	r3, r2
 80152b8:	009b      	lsls	r3, r3, #2
 80152ba:	440b      	add	r3, r1
 80152bc:	3328      	adds	r3, #40	; 0x28
 80152be:	2201      	movs	r2, #1
 80152c0:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152ce:	440b      	add	r3, r1
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d905      	bls.n	80152e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80152d4:	4b0f      	ldr	r3, [pc, #60]	; (8015314 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 80152d6:	4a10      	ldr	r2, [pc, #64]	; (8015318 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
 80152d8:	2152      	movs	r1, #82	; 0x52
 80152da:	4810      	ldr	r0, [pc, #64]	; (801531c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 80152dc:	f014 fa90 	bl	8029800 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	68ba      	ldr	r2, [r7, #8]
 80152e8:	3202      	adds	r2, #2
 80152ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	639a      	str	r2, [r3, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 80152f6:	2300      	movs	r3, #0
 80152f8:	2200      	movs	r2, #0
 80152fa:	2102      	movs	r1, #2
 80152fc:	6838      	ldr	r0, [r7, #0]
 80152fe:	f7ff fba3 	bl	8014a48 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8015302:	2100      	movs	r1, #0
 8015304:	6838      	ldr	r0, [r7, #0]
 8015306:	f7ff fb91 	bl	8014a2c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 801530a:	68bb      	ldr	r3, [r7, #8]
    }
 801530c:	4618      	mov	r0, r3
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	0802dee0 	.word	0x0802dee0
 8015318:	0802df1c 	.word	0x0802df1c
 801531c:	0802dea0 	.word	0x0802dea0

08015320 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801532e:	f04f 31ff 	mov.w	r1, #4294967295
 8015332:	4618      	mov	r0, r3
 8015334:	f7f4 fe6e 	bl	800a014 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801533c:	4618      	mov	r0, r3
 801533e:	f7f4 fec7 	bl	800a0d0 <osMutexRelease>
        streams[handle].isActive = false;
 8015342:	6879      	ldr	r1, [r7, #4]
 8015344:	683a      	ldr	r2, [r7, #0]
 8015346:	4613      	mov	r3, r2
 8015348:	00db      	lsls	r3, r3, #3
 801534a:	4413      	add	r3, r2
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	440b      	add	r3, r1
 8015350:	3328      	adds	r3, #40	; 0x28
 8015352:	2200      	movs	r2, #0
 8015354:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8015356:	2300      	movs	r3, #0
 8015358:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 801535a:	2300      	movs	r3, #0
 801535c:	60bb      	str	r3, [r7, #8]
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d114      	bne.n	801538e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8015364:	6879      	ldr	r1, [r7, #4]
 8015366:	68ba      	ldr	r2, [r7, #8]
 8015368:	4613      	mov	r3, r2
 801536a:	00db      	lsls	r3, r3, #3
 801536c:	4413      	add	r3, r2
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	440b      	add	r3, r1
 8015372:	3328      	adds	r3, #40	; 0x28
 8015374:	781a      	ldrb	r2, [r3, #0]
 8015376:	7bfb      	ldrb	r3, [r7, #15]
 8015378:	4313      	orrs	r3, r2
 801537a:	b2db      	uxtb	r3, r3
 801537c:	2b00      	cmp	r3, #0
 801537e:	bf14      	ite	ne
 8015380:	2301      	movne	r3, #1
 8015382:	2300      	moveq	r3, #0
 8015384:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	3301      	adds	r3, #1
 801538a:	60bb      	str	r3, [r7, #8]
 801538c:	e7e7      	b.n	801535e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 801538e:	7bfb      	ldrb	r3, [r7, #15]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d103      	bne.n	801539c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801539c:	bf00      	nop
 801539e:	3710      	adds	r7, #16
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b086      	sub	sp, #24
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	60b9      	str	r1, [r7, #8]
 80153ae:	607a      	str	r2, [r7, #4]
 80153b0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d005      	beq.n	80153c4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x20>
 80153b8:	4b0f      	ldr	r3, [pc, #60]	; (80153f8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x54>)
 80153ba:	4a10      	ldr	r2, [pc, #64]	; (80153fc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x58>)
 80153bc:	2182      	movs	r1, #130	; 0x82
 80153be:	4810      	ldr	r0, [pc, #64]	; (8015400 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x5c>)
 80153c0:	f014 fa1e 	bl	8029800 <__assert_func>
        Stream& stream = streams[handle];
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	4613      	mov	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	4413      	add	r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	3308      	adds	r3, #8
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	4413      	add	r3, r2
 80153d4:	3304      	adds	r3, #4
 80153d6:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	2200      	movs	r2, #0
 80153dc:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	2200      	movs	r2, #0
 80153e2:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	687a      	ldr	r2, [r7, #4]
 80153e8:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	683a      	ldr	r2, [r7, #0]
 80153ee:	60da      	str	r2, [r3, #12]
    }
 80153f0:	bf00      	nop
 80153f2:	3718      	adds	r7, #24
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	0802e0bc 	.word	0x0802e0bc
 80153fc:	0802e0d0 	.word	0x0802e0d0
 8015400:	0802dea0 	.word	0x0802dea0

08015404 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8015404:	b580      	push	{r7, lr}
 8015406:	b086      	sub	sp, #24
 8015408:	af00      	add	r7, sp, #0
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d005      	beq.n	8015422 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8015416:	4b29      	ldr	r3, [pc, #164]	; (80154bc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8015418:	4a29      	ldr	r2, [pc, #164]	; (80154c0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 801541a:	21d0      	movs	r1, #208	; 0xd0
 801541c:	4829      	ldr	r0, [pc, #164]	; (80154c4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 801541e:	f014 f9ef 	bl	8029800 <__assert_func>
        Stream& stream = streams[handle];
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	4613      	mov	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	4413      	add	r3, r2
 801542a:	009b      	lsls	r3, r3, #2
 801542c:	3308      	adds	r3, #8
 801542e:	68fa      	ldr	r2, [r7, #12]
 8015430:	4413      	add	r3, r2
 8015432:	3304      	adds	r3, #4
 8015434:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	7f5b      	ldrb	r3, [r3, #29]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d00b      	beq.n	8015456 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 801543e:	f7f9 f8c5 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8015442:	4603      	mov	r3, r0
 8015444:	4618      	mov	r0, r3
 8015446:	f7ff fa64 	bl	8014912 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 801544a:	4602      	mov	r2, r0
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	441a      	add	r2, r3
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	7fdb      	ldrb	r3, [r3, #31]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d029      	beq.n	80154b2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	68ba      	ldr	r2, [r7, #8]
 8015462:	3202      	adds	r2, #2
 8015464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015468:	4619      	mov	r1, r3
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f7ff fade 	bl	8014a2c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	3314      	adds	r3, #20
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	4610      	mov	r0, r2
 801547c:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	2200      	movs	r2, #0
 8015482:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	f893 3020 	ldrb.w	r3, [r3, #32]
 801548a:	f083 0301 	eor.w	r3, r3, #1
 801548e:	b2db      	uxtb	r3, r3
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00a      	beq.n	80154aa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801549a:	f083 0301 	eor.w	r3, r3, #1
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d002      	beq.n	80154aa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	2200      	movs	r2, #0
 80154a8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154b0:	e000      	b.n	80154b4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 80154b2:	2301      	movs	r3, #1
    }
 80154b4:	4618      	mov	r0, r3
 80154b6:	3718      	adds	r7, #24
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	0802e0bc 	.word	0x0802e0bc
 80154c0:	0802e288 	.word	0x0802e288
 80154c4:	0802dea0 	.word	0x0802dea0

080154c8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00e      	beq.n	80154fe <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154e4:	f04f 31ff 	mov.w	r1, #4294967295
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7f4 fd93 	bl	800a014 <osMutexAcquire>
            firstDrawThisFrame = false;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2200      	movs	r2, #0
 80154f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 80154fe:	bf00      	nop
 8015500:	3710      	adds	r7, #16
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
	...

08015508 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8015508:	b580      	push	{r7, lr}
 801550a:	b086      	sub	sp, #24
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
 8015514:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d005      	beq.n	8015528 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x20>
 801551c:	4b13      	ldr	r3, [pc, #76]	; (801556c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x64>)
 801551e:	4a14      	ldr	r2, [pc, #80]	; (8015570 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x68>)
 8015520:	2190      	movs	r1, #144	; 0x90
 8015522:	4814      	ldr	r0, [pc, #80]	; (8015574 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x6c>)
 8015524:	f014 f96c 	bl	8029800 <__assert_func>
        Stream& stream = streams[handle];
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	4613      	mov	r3, r2
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	4413      	add	r3, r2
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	3308      	adds	r3, #8
 8015534:	68fa      	ldr	r2, [r7, #12]
 8015536:	4413      	add	r3, r2
 8015538:	3304      	adds	r3, #4
 801553a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	2200      	movs	r2, #0
 8015540:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8015542:	68fa      	ldr	r2, [r7, #12]
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	009b      	lsls	r3, r3, #2
 8015548:	4413      	add	r3, r2
 801554a:	6858      	ldr	r0, [r3, #4]
 801554c:	68fa      	ldr	r2, [r7, #12]
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	4413      	add	r3, r2
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	3308      	adds	r3, #8
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	683a      	ldr	r2, [r7, #0]
 801555e:	6879      	ldr	r1, [r7, #4]
 8015560:	4798      	blx	r3
    }
 8015562:	bf00      	nop
 8015564:	3718      	adds	r7, #24
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	0802e0bc 	.word	0x0802e0bc
 8015570:	0802e424 	.word	0x0802e424
 8015574:	0802dea0 	.word	0x0802dea0

08015578 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	4413      	add	r3, r2
 801558c:	6858      	ldr	r0, [r3, #4]
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	009b      	lsls	r3, r3, #2
 8015594:	4413      	add	r3, r2
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	330c      	adds	r3, #12
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	6879      	ldr	r1, [r7, #4]
 80155a0:	4798      	blx	r3
    }
 80155a2:	bf00      	nop
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
	...

080155ac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b086      	sub	sp, #24
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	603b      	str	r3, [r7, #0]
 80155b8:	4613      	mov	r3, r2
 80155ba:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d005      	beq.n	80155ce <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 80155c2:	4b3a      	ldr	r3, [pc, #232]	; (80156ac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 80155c4:	4a3a      	ldr	r2, [pc, #232]	; (80156b0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 80155c6:	21a2      	movs	r1, #162	; 0xa2
 80155c8:	483a      	ldr	r0, [pc, #232]	; (80156b4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 80155ca:	f014 f919 	bl	8029800 <__assert_func>
        Stream& stream = streams[handle];
 80155ce:	68ba      	ldr	r2, [r7, #8]
 80155d0:	4613      	mov	r3, r2
 80155d2:	00db      	lsls	r3, r3, #3
 80155d4:	4413      	add	r3, r2
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	3308      	adds	r3, #8
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	4413      	add	r3, r2
 80155de:	3304      	adds	r3, #4
 80155e0:	617b      	str	r3, [r7, #20]
        switch (cmd)
 80155e2:	79fb      	ldrb	r3, [r7, #7]
 80155e4:	2b05      	cmp	r3, #5
 80155e6:	d85c      	bhi.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 80155e8:	a201      	add	r2, pc, #4	; (adr r2, 80155f0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 80155ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ee:	bf00      	nop
 80155f0:	08015609 	.word	0x08015609
 80155f4:	08015649 	.word	0x08015649
 80155f8:	08015651 	.word	0x08015651
 80155fc:	08015665 	.word	0x08015665
 8015600:	0801567f 	.word	0x0801567f
 8015604:	0801568d 	.word	0x0801568d
            if (mjpegDecoders[handle]->hasVideo())
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	4413      	add	r3, r2
 8015610:	6859      	ldr	r1, [r3, #4]
 8015612:	68fa      	ldr	r2, [r7, #12]
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	4413      	add	r3, r2
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	3310      	adds	r3, #16
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4608      	mov	r0, r1
 8015624:	4798      	blx	r3
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d039      	beq.n	80156a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2201      	movs	r2, #1
 8015630:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	2201      	movs	r2, #1
 8015636:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	2200      	movs	r2, #0
 801563e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	2200      	movs	r2, #0
 8015644:	609a      	str	r2, [r3, #8]
            break;
 8015646:	e02b      	b.n	80156a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	2200      	movs	r2, #0
 801564c:	775a      	strb	r2, [r3, #29]
            break;
 801564e:	e028      	b.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	2200      	movs	r2, #0
 801565a:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	2200      	movs	r2, #0
 8015660:	609a      	str	r2, [r3, #8]
            break;
 8015662:	e01e      	b.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	683a      	ldr	r2, [r7, #0]
 8015668:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	2201      	movs	r2, #1
 801566e:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	2200      	movs	r2, #0
 8015674:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	2200      	movs	r2, #0
 801567a:	609a      	str	r2, [r3, #8]
            break;
 801567c:	e011      	b.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	2200      	movs	r2, #0
 8015682:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	2201      	movs	r2, #1
 8015688:	615a      	str	r2, [r3, #20]
            break;
 801568a:	e00a      	b.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	bf14      	ite	ne
 8015692:	2301      	movne	r3, #1
 8015694:	2300      	moveq	r3, #0
 8015696:	b2da      	uxtb	r2, r3
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 801569e:	e000      	b.n	80156a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 80156a0:	bf00      	nop
    }
 80156a2:	bf00      	nop
 80156a4:	3718      	adds	r7, #24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	0802e0bc 	.word	0x0802e0bc
 80156b0:	0802e5fc 	.word	0x0802e5fc
 80156b4:	0802dea0 	.word	0x0802dea0

080156b8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b084      	sub	sp, #16
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d005      	beq.n	80156d4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x1c>
 80156c8:	4b0a      	ldr	r3, [pc, #40]	; (80156f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x3c>)
 80156ca:	4a0b      	ldr	r2, [pc, #44]	; (80156f8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x40>)
 80156cc:	2179      	movs	r1, #121	; 0x79
 80156ce:	480b      	ldr	r0, [pc, #44]	; (80156fc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x44>)
 80156d0:	f014 f896 	bl	8029800 <__assert_func>
        const Stream& stream = streams[handle];
 80156d4:	683a      	ldr	r2, [r7, #0]
 80156d6:	4613      	mov	r3, r2
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	4413      	add	r3, r2
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	3308      	adds	r3, #8
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	4413      	add	r3, r2
 80156e4:	3304      	adds	r3, #4
 80156e6:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
    }
 80156ec:	4618      	mov	r0, r3
 80156ee:	3710      	adds	r7, #16
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	0802e0bc 	.word	0x0802e0bc
 80156f8:	0802e7cc 	.word	0x0802e7cc
 80156fc:	0802dea0 	.word	0x0802dea0

08015700 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d006      	beq.n	8015720 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8015712:	4b0d      	ldr	r3, [pc, #52]	; (8015748 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8015714:	4a0d      	ldr	r2, [pc, #52]	; (801574c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8015716:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801571a:	480d      	ldr	r0, [pc, #52]	; (8015750 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 801571c:	f014 f870 	bl	8029800 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8015720:	68fa      	ldr	r2, [r7, #12]
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	009b      	lsls	r3, r3, #2
 8015726:	4413      	add	r3, r2
 8015728:	6858      	ldr	r0, [r3, #4]
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	4413      	add	r3, r2
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	3330      	adds	r3, #48	; 0x30
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	6879      	ldr	r1, [r7, #4]
 801573c:	4798      	blx	r3
    }
 801573e:	bf00      	nop
 8015740:	3710      	adds	r7, #16
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	0802e0bc 	.word	0x0802e0bc
 801574c:	0802e97c 	.word	0x0802e97c
 8015750:	0802dea0 	.word	0x0802dea0

08015754 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d006      	beq.n	8015772 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x1e>
 8015764:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x40>)
 8015766:	4a0c      	ldr	r2, [pc, #48]	; (8015798 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x44>)
 8015768:	f44f 71b8 	mov.w	r1, #368	; 0x170
 801576c:	480b      	ldr	r0, [pc, #44]	; (801579c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x48>)
 801576e:	f014 f847 	bl	8029800 <__assert_func>
        Stream& stream = streams[handle];
 8015772:	683a      	ldr	r2, [r7, #0]
 8015774:	4613      	mov	r3, r2
 8015776:	00db      	lsls	r3, r3, #3
 8015778:	4413      	add	r3, r2
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	3308      	adds	r3, #8
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	4413      	add	r3, r2
 8015782:	3304      	adds	r3, #4
 8015784:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	7f5b      	ldrb	r3, [r3, #29]
    }
 801578a:	4618      	mov	r0, r3
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	0802e0bc 	.word	0x0802e0bc
 8015798:	0802eb28 	.word	0x0802eb28
 801579c:	0802dea0 	.word	0x0802dea0

080157a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157a2:	b08d      	sub	sp, #52	; 0x34
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80157a8:	2300      	movs	r3, #0
 80157aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80157ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d135      	bne.n	801581e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80157b2:	6879      	ldr	r1, [r7, #4]
 80157b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157b6:	4613      	mov	r3, r2
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	4413      	add	r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	440b      	add	r3, r1
 80157c0:	3328      	adds	r3, #40	; 0x28
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d126      	bne.n	8015816 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80157c8:	f107 0308 	add.w	r3, r7, #8
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7ff fca2 	bl	8015116 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 80157d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157d4:	4613      	mov	r3, r2
 80157d6:	00db      	lsls	r3, r3, #3
 80157d8:	4413      	add	r3, r2
 80157da:	009b      	lsls	r3, r3, #2
 80157dc:	3308      	adds	r3, #8
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	4413      	add	r3, r2
 80157e2:	3304      	adds	r3, #4
 80157e4:	f107 0408 	add.w	r4, r7, #8
 80157e8:	469c      	mov	ip, r3
 80157ea:	f104 0e20 	add.w	lr, r4, #32
 80157ee:	4665      	mov	r5, ip
 80157f0:	4626      	mov	r6, r4
 80157f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80157f4:	6028      	str	r0, [r5, #0]
 80157f6:	6069      	str	r1, [r5, #4]
 80157f8:	60aa      	str	r2, [r5, #8]
 80157fa:	60eb      	str	r3, [r5, #12]
 80157fc:	3410      	adds	r4, #16
 80157fe:	f10c 0c10 	add.w	ip, ip, #16
 8015802:	4574      	cmp	r4, lr
 8015804:	d1f3      	bne.n	80157ee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x4e>
 8015806:	4663      	mov	r3, ip
 8015808:	4622      	mov	r2, r4
 801580a:	8811      	ldrh	r1, [r2, #0]
 801580c:	7892      	ldrb	r2, [r2, #2]
 801580e:	8019      	strh	r1, [r3, #0]
 8015810:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8015812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015814:	e00a      	b.n	801582c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	3301      	adds	r3, #1
 801581a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801581c:	e7c6      	b.n	80157ac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 801581e:	4b05      	ldr	r3, [pc, #20]	; (8015834 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x94>)
 8015820:	4a05      	ldr	r2, [pc, #20]	; (8015838 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x98>)
 8015822:	f240 11c5 	movw	r1, #453	; 0x1c5
 8015826:	4805      	ldr	r0, [pc, #20]	; (801583c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x9c>)
 8015828:	f013 ffea 	bl	8029800 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 801582c:	4618      	mov	r0, r3
 801582e:	3734      	adds	r7, #52	; 0x34
 8015830:	46bd      	mov	sp, r7
 8015832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015834:	0802ecb0 	.word	0x0802ecb0
 8015838:	0802ece0 	.word	0x0802ece0
 801583c:	0802dea0 	.word	0x0802dea0

08015840 <_GLOBAL__sub_I_mjpegdecoder1>:
 8015840:	b580      	push	{r7, lr}
 8015842:	af00      	add	r7, sp, #0
 8015844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015848:	2001      	movs	r0, #1
 801584a:	f7ff fcfb 	bl	8015244 <_Z41__static_initialization_and_destruction_0ii>
 801584e:	bd80      	pop	{r7, pc}

08015850 <_GLOBAL__sub_D_mjpegdecoder1>:
 8015850:	b580      	push	{r7, lr}
 8015852:	af00      	add	r7, sp, #0
 8015854:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015858:	2000      	movs	r0, #0
 801585a:	f7ff fcf3 	bl	8015244 <_Z41__static_initialization_and_destruction_0ii>
 801585e:	bd80      	pop	{r7, pc}

08015860 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8015866:	2300      	movs	r3, #0
 8015868:	607b      	str	r3, [r7, #4]
 801586a:	e02e      	b.n	80158ca <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	3b80      	subs	r3, #128	; 0x80
 8015870:	005b      	lsls	r3, r3, #1
 8015872:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	f24b 3274 	movw	r2, #45940	; 0xb374
 801587a:	fb02 f303 	mul.w	r3, r2, r3
 801587e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015882:	141a      	asrs	r2, r3, #16
 8015884:	4916      	ldr	r1, [pc, #88]	; (80158e0 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8015892:	fb02 f303 	mul.w	r3, r2, r3
 8015896:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801589a:	141a      	asrs	r2, r3, #16
 801589c:	4911      	ldr	r1, [pc, #68]	; (80158e4 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	4a10      	ldr	r2, [pc, #64]	; (80158e8 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 80158a8:	fb03 f202 	mul.w	r2, r3, r2
 80158ac:	490f      	ldr	r1, [pc, #60]	; (80158ec <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	4a0e      	ldr	r2, [pc, #56]	; (80158f0 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 80158b8:	fb03 f202 	mul.w	r2, r3, r2
 80158bc:	490d      	ldr	r1, [pc, #52]	; (80158f4 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3301      	adds	r3, #1
 80158c8:	607b      	str	r3, [r7, #4]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2bff      	cmp	r3, #255	; 0xff
 80158ce:	ddcd      	ble.n	801586c <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 80158d0:	bf00      	nop
 80158d2:	bf00      	nop
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	20038260 	.word	0x20038260
 80158e4:	20038660 	.word	0x20038660
 80158e8:	ffffa498 	.word	0xffffa498
 80158ec:	20038a60 	.word	0x20038a60
 80158f0:	ffffd3f4 	.word	0xffffd3f4
 80158f4:	20038e60 	.word	0x20038e60

080158f8 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 80158fc:	f000 f806 	bl	801590c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8015900:	f000 f888 	bl	8015a14 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8015904:	f7ff ffac 	bl	8015860 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8015908:	bf00      	nop
 801590a:	bd80      	pop	{r7, pc}

0801590c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 801590c:	b480      	push	{r7}
 801590e:	b083      	sub	sp, #12
 8015910:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8015912:	2300      	movs	r3, #0
 8015914:	607b      	str	r3, [r7, #4]
 8015916:	e05a      	b.n	80159ce <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 801591e:	fb02 f303 	mul.w	r3, r2, r3
 8015922:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015926:	141a      	asrs	r2, r3, #16
 8015928:	492e      	ldr	r1, [pc, #184]	; (80159e4 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f249 6245 	movw	r2, #38469	; 0x9645
 8015936:	fb02 f303 	mul.w	r3, r2, r3
 801593a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801593e:	141a      	asrs	r2, r3, #16
 8015940:	4929      	ldr	r1, [pc, #164]	; (80159e8 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 801594e:	fb02 f303 	mul.w	r3, r2, r3
 8015952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015956:	141a      	asrs	r2, r3, #16
 8015958:	4924      	ldr	r1, [pc, #144]	; (80159ec <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	4a23      	ldr	r2, [pc, #140]	; (80159f0 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8015964:	fb02 f303 	mul.w	r3, r2, r3
 8015968:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801596c:	141a      	asrs	r2, r3, #16
 801596e:	4921      	ldr	r1, [pc, #132]	; (80159f4 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	4a1f      	ldr	r2, [pc, #124]	; (80159f8 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 801597a:	fb02 f303 	mul.w	r3, r2, r3
 801597e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015982:	141a      	asrs	r2, r3, #16
 8015984:	491d      	ldr	r1, [pc, #116]	; (80159fc <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	3301      	adds	r3, #1
 8015990:	03db      	lsls	r3, r3, #15
 8015992:	141a      	asrs	r2, r3, #16
 8015994:	491a      	ldr	r1, [pc, #104]	; (8015a00 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	4a19      	ldr	r2, [pc, #100]	; (8015a04 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 80159a0:	fb02 f303 	mul.w	r3, r2, r3
 80159a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80159a8:	141a      	asrs	r2, r3, #16
 80159aa:	4917      	ldr	r1, [pc, #92]	; (8015a08 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a15      	ldr	r2, [pc, #84]	; (8015a0c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 80159b6:	fb02 f303 	mul.w	r3, r2, r3
 80159ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80159be:	141a      	asrs	r2, r3, #16
 80159c0:	4913      	ldr	r1, [pc, #76]	; (8015a10 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	3301      	adds	r3, #1
 80159cc:	607b      	str	r3, [r7, #4]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2bff      	cmp	r3, #255	; 0xff
 80159d2:	dda1      	ble.n	8015918 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	20039260 	.word	0x20039260
 80159e8:	20039e60 	.word	0x20039e60
 80159ec:	2003aa60 	.word	0x2003aa60
 80159f0:	ffffd4d1 	.word	0xffffd4d1
 80159f4:	20039660 	.word	0x20039660
 80159f8:	ffffab30 	.word	0xffffab30
 80159fc:	2003a660 	.word	0x2003a660
 8015a00:	20039a60 	.word	0x20039a60
 8015a04:	ffff94d1 	.word	0xffff94d1
 8015a08:	2003a260 	.word	0x2003a260
 8015a0c:	ffffeb30 	.word	0xffffeb30
 8015a10:	2003ae60 	.word	0x2003ae60

08015a14 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e036      	b.n	8015a8e <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8015a20:	2300      	movs	r3, #0
 8015a22:	60bb      	str	r3, [r7, #8]
 8015a24:	e02d      	b.n	8015a82 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	00db      	lsls	r3, r3, #3
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	2b07      	cmp	r3, #7
 8015a34:	d906      	bls.n	8015a44 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2b07      	cmp	r3, #7
 8015a3a:	d903      	bls.n	8015a44 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	3378      	adds	r3, #120	; 0x78
 8015a40:	607b      	str	r3, [r7, #4]
 8015a42:	e012      	b.n	8015a6a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	2b07      	cmp	r3, #7
 8015a48:	d906      	bls.n	8015a58 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	2b07      	cmp	r3, #7
 8015a4e:	d803      	bhi.n	8015a58 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	3338      	adds	r3, #56	; 0x38
 8015a54:	607b      	str	r3, [r7, #4]
 8015a56:	e008      	b.n	8015a6a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	2b07      	cmp	r3, #7
 8015a5c:	d805      	bhi.n	8015a6a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2b07      	cmp	r3, #7
 8015a62:	d902      	bls.n	8015a6a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	3340      	adds	r3, #64	; 0x40
 8015a68:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	011a      	lsls	r2, r3, #4
 8015a6e:	68bb      	ldr	r3, [r7, #8]
 8015a70:	4413      	add	r3, r2
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	b291      	uxth	r1, r2
 8015a76:	4a62      	ldr	r2, [pc, #392]	; (8015c00 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8015a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	3301      	adds	r3, #1
 8015a80:	60bb      	str	r3, [r7, #8]
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	2b0f      	cmp	r3, #15
 8015a86:	d9ce      	bls.n	8015a26 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2b0f      	cmp	r3, #15
 8015a92:	d9c5      	bls.n	8015a20 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8015a94:	2300      	movs	r3, #0
 8015a96:	60fb      	str	r3, [r7, #12]
 8015a98:	e072      	b.n	8015b80 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	60bb      	str	r3, [r7, #8]
 8015a9e:	e069      	b.n	8015b74 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	011b      	lsls	r3, r3, #4
 8015aa4:	68ba      	ldr	r2, [r7, #8]
 8015aa6:	4413      	add	r3, r2
 8015aa8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	085b      	lsrs	r3, r3, #1
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	085b      	lsrs	r3, r3, #1
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	b29b      	uxth	r3, r3
 8015aba:	4413      	add	r3, r2
 8015abc:	b29b      	uxth	r3, r3
 8015abe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015ac2:	b299      	uxth	r1, r3
 8015ac4:	4a4f      	ldr	r2, [pc, #316]	; (8015c04 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	085b      	lsrs	r3, r3, #1
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	00db      	lsls	r3, r3, #3
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	4413      	add	r3, r2
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	3380      	adds	r3, #128	; 0x80
 8015ae0:	b299      	uxth	r1, r3
 8015ae2:	4a49      	ldr	r2, [pc, #292]	; (8015c08 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	085b      	lsrs	r3, r3, #1
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	085b      	lsrs	r3, r3, #1
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	00db      	lsls	r3, r3, #3
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	4413      	add	r3, r2
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015b02:	b299      	uxth	r1, r3
 8015b04:	4a41      	ldr	r2, [pc, #260]	; (8015c0c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	085b      	lsrs	r3, r3, #1
 8015b10:	b29a      	uxth	r2, r3
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	00db      	lsls	r3, r3, #3
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	4413      	add	r3, r2
 8015b1c:	b29b      	uxth	r3, r3
 8015b1e:	33c0      	adds	r3, #192	; 0xc0
 8015b20:	b299      	uxth	r1, r3
 8015b22:	4a3b      	ldr	r2, [pc, #236]	; (8015c10 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	085b      	lsrs	r3, r3, #1
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	085b      	lsrs	r3, r3, #1
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	4413      	add	r3, r2
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8015b42:	b299      	uxth	r1, r3
 8015b44:	4a33      	ldr	r2, [pc, #204]	; (8015c14 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	085b      	lsrs	r3, r3, #1
 8015b50:	b29a      	uxth	r2, r3
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	085b      	lsrs	r3, r3, #1
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	b29b      	uxth	r3, r3
 8015b5c:	4413      	add	r3, r2
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015b64:	b299      	uxth	r1, r3
 8015b66:	4a2c      	ldr	r2, [pc, #176]	; (8015c18 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	3301      	adds	r3, #1
 8015b72:	60bb      	str	r3, [r7, #8]
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	2b0f      	cmp	r3, #15
 8015b78:	d992      	bls.n	8015aa0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	3301      	adds	r3, #1
 8015b7e:	60fb      	str	r3, [r7, #12]
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	2b0f      	cmp	r3, #15
 8015b84:	d989      	bls.n	8015a9a <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8015b86:	2300      	movs	r3, #0
 8015b88:	60fb      	str	r3, [r7, #12]
 8015b8a:	e02e      	b.n	8015bea <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	60bb      	str	r3, [r7, #8]
 8015b90:	e025      	b.n	8015bde <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	68ba      	ldr	r2, [r7, #8]
 8015b98:	4413      	add	r3, r2
 8015b9a:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	b299      	uxth	r1, r3
 8015ba0:	4a1e      	ldr	r2, [pc, #120]	; (8015c1c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	3340      	adds	r3, #64	; 0x40
 8015bae:	b299      	uxth	r1, r3
 8015bb0:	4a1b      	ldr	r2, [pc, #108]	; (8015c20 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	3380      	adds	r3, #128	; 0x80
 8015bbe:	b299      	uxth	r1, r3
 8015bc0:	4a18      	ldr	r2, [pc, #96]	; (8015c24 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	33c0      	adds	r3, #192	; 0xc0
 8015bce:	b299      	uxth	r1, r3
 8015bd0:	4a15      	ldr	r2, [pc, #84]	; (8015c28 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	60bb      	str	r3, [r7, #8]
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	2b07      	cmp	r3, #7
 8015be2:	d9d6      	bls.n	8015b92 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	3301      	adds	r3, #1
 8015be8:	60fb      	str	r3, [r7, #12]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	2b07      	cmp	r3, #7
 8015bee:	d9cd      	bls.n	8015b8c <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8015bf0:	bf00      	nop
 8015bf2:	bf00      	nop
 8015bf4:	3714      	adds	r7, #20
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr
 8015bfe:	bf00      	nop
 8015c00:	2003b260 	.word	0x2003b260
 8015c04:	2003b4e0 	.word	0x2003b4e0
 8015c08:	2003b6e0 	.word	0x2003b6e0
 8015c0c:	2003b960 	.word	0x2003b960
 8015c10:	2003bb60 	.word	0x2003bb60
 8015c14:	2003bde0 	.word	0x2003bde0
 8015c18:	2003bfe0 	.word	0x2003bfe0
 8015c1c:	2003b460 	.word	0x2003b460
 8015c20:	2003b8e0 	.word	0x2003b8e0
 8015c24:	2003bd60 	.word	0x2003bd60
 8015c28:	2003c1e0 	.word	0x2003c1e0

08015c2c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015c2c:	8880      	ldrh	r0, [r0, #4]
 8015c2e:	4770      	bx	lr

08015c30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015c30:	b570      	push	{r4, r5, r6, lr}
 8015c32:	6803      	ldr	r3, [r0, #0]
 8015c34:	460c      	mov	r4, r1
 8015c36:	2100      	movs	r1, #0
 8015c38:	4605      	mov	r5, r0
 8015c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c3c:	4798      	blx	r3
 8015c3e:	4606      	mov	r6, r0
 8015c40:	682b      	ldr	r3, [r5, #0]
 8015c42:	4628      	mov	r0, r5
 8015c44:	1ba4      	subs	r4, r4, r6
 8015c46:	6a1b      	ldr	r3, [r3, #32]
 8015c48:	b2a4      	uxth	r4, r4
 8015c4a:	4798      	blx	r3
 8015c4c:	fbb4 f0f0 	udiv	r0, r4, r0
 8015c50:	bd70      	pop	{r4, r5, r6, pc}

08015c52 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015c52:	2300      	movs	r3, #0
 8015c54:	8083      	strh	r3, [r0, #4]
 8015c56:	4770      	bx	lr

08015c58 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015c58:	b510      	push	{r4, lr}
 8015c5a:	6803      	ldr	r3, [r0, #0]
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	8881      	ldrh	r1, [r0, #4]
 8015c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c62:	4798      	blx	r3
 8015c64:	88a3      	ldrh	r3, [r4, #4]
 8015c66:	3301      	adds	r3, #1
 8015c68:	80a3      	strh	r3, [r4, #4]
 8015c6a:	bd10      	pop	{r4, pc}

08015c6c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015c6c:	6803      	ldr	r3, [r0, #0]
 8015c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c70:	4718      	bx	r3

08015c72 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015c72:	4770      	bx	lr

08015c74 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015c74:	4a02      	ldr	r2, [pc, #8]	; (8015c80 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015c76:	6002      	str	r2, [r0, #0]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	8082      	strh	r2, [r0, #4]
 8015c7c:	4770      	bx	lr
 8015c7e:	bf00      	nop
 8015c80:	0802fcbc 	.word	0x0802fcbc

08015c84 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015c84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015c86:	2000      	movs	r0, #0
 8015c88:	b12b      	cbz	r3, 8015c96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015c8a:	b920      	cbnz	r0, 8015c96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015c8c:	1a5a      	subs	r2, r3, r1
 8015c8e:	699b      	ldr	r3, [r3, #24]
 8015c90:	4250      	negs	r0, r2
 8015c92:	4150      	adcs	r0, r2
 8015c94:	e7f8      	b.n	8015c88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015c96:	4770      	bx	lr

08015c98 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015c98:	2300      	movs	r3, #0
 8015c9a:	6148      	str	r0, [r1, #20]
 8015c9c:	618b      	str	r3, [r1, #24]
 8015c9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ca0:	b913      	cbnz	r3, 8015ca8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8015ca2:	6281      	str	r1, [r0, #40]	; 0x28
 8015ca4:	4770      	bx	lr
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	699a      	ldr	r2, [r3, #24]
 8015caa:	2a00      	cmp	r2, #0
 8015cac:	d1fb      	bne.n	8015ca6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8015cae:	6199      	str	r1, [r3, #24]
 8015cb0:	4770      	bx	lr

08015cb2 <_ZN8touchgfx9Container9removeAllEv>:
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015cb6:	b123      	cbz	r3, 8015cc2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015cb8:	6999      	ldr	r1, [r3, #24]
 8015cba:	6281      	str	r1, [r0, #40]	; 0x28
 8015cbc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015cc0:	e7f8      	b.n	8015cb4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015cc2:	4770      	bx	lr

08015cc4 <_ZN8touchgfx9Container6unlinkEv>:
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	6283      	str	r3, [r0, #40]	; 0x28
 8015cc8:	4770      	bx	lr

08015cca <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015cca:	2200      	movs	r2, #0
 8015ccc:	8002      	strh	r2, [r0, #0]
 8015cce:	8042      	strh	r2, [r0, #2]
 8015cd0:	8082      	strh	r2, [r0, #4]
 8015cd2:	80c2      	strh	r2, [r0, #6]
 8015cd4:	4770      	bx	lr

08015cd6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015cd6:	b570      	push	{r4, r5, r6, lr}
 8015cd8:	460d      	mov	r5, r1
 8015cda:	4616      	mov	r6, r2
 8015cdc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cde:	b13c      	cbz	r4, 8015cf0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015ce0:	6823      	ldr	r3, [r4, #0]
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	4632      	mov	r2, r6
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015cea:	4798      	blx	r3
 8015cec:	69a4      	ldr	r4, [r4, #24]
 8015cee:	e7f6      	b.n	8015cde <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015cf0:	bd70      	pop	{r4, r5, r6, pc}

08015cf2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015cf2:	b538      	push	{r3, r4, r5, lr}
 8015cf4:	460d      	mov	r5, r1
 8015cf6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cf8:	b134      	cbz	r4, 8015d08 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015cfa:	682b      	ldr	r3, [r5, #0]
 8015cfc:	4621      	mov	r1, r4
 8015cfe:	4628      	mov	r0, r5
 8015d00:	689b      	ldr	r3, [r3, #8]
 8015d02:	4798      	blx	r3
 8015d04:	69a4      	ldr	r4, [r4, #24]
 8015d06:	e7f7      	b.n	8015cf8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015d08:	bd38      	pop	{r3, r4, r5, pc}

08015d0a <_ZNK8touchgfx9Container17invalidateContentEv>:
 8015d0a:	b510      	push	{r4, lr}
 8015d0c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015d0e:	b12c      	cbz	r4, 8015d1c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	4620      	mov	r0, r4
 8015d14:	699b      	ldr	r3, [r3, #24]
 8015d16:	4798      	blx	r3
 8015d18:	69a4      	ldr	r4, [r4, #24]
 8015d1a:	e7f8      	b.n	8015d0e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8015d1c:	bd10      	pop	{r4, pc}

08015d1e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015d1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015d20:	b19b      	cbz	r3, 8015d4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015d22:	428b      	cmp	r3, r1
 8015d24:	d109      	bne.n	8015d3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015d26:	699a      	ldr	r2, [r3, #24]
 8015d28:	2100      	movs	r1, #0
 8015d2a:	6159      	str	r1, [r3, #20]
 8015d2c:	6282      	str	r2, [r0, #40]	; 0x28
 8015d2e:	b902      	cbnz	r2, 8015d32 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015d30:	4770      	bx	lr
 8015d32:	6199      	str	r1, [r3, #24]
 8015d34:	4770      	bx	lr
 8015d36:	4613      	mov	r3, r2
 8015d38:	b13a      	cbz	r2, 8015d4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015d3a:	699a      	ldr	r2, [r3, #24]
 8015d3c:	428a      	cmp	r2, r1
 8015d3e:	d1fa      	bne.n	8015d36 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015d40:	698a      	ldr	r2, [r1, #24]
 8015d42:	619a      	str	r2, [r3, #24]
 8015d44:	2300      	movs	r3, #0
 8015d46:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015d4a:	4770      	bx	lr

08015d4c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015d4c:	b410      	push	{r4}
 8015d4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015d50:	4604      	mov	r4, r0
 8015d52:	b92b      	cbnz	r3, 8015d60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015d54:	6803      	ldr	r3, [r0, #0]
 8015d56:	4611      	mov	r1, r2
 8015d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d5e:	4718      	bx	r3
 8015d60:	b941      	cbnz	r1, 8015d74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015d62:	6193      	str	r3, [r2, #24]
 8015d64:	6282      	str	r2, [r0, #40]	; 0x28
 8015d66:	6154      	str	r4, [r2, #20]
 8015d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d6c:	4770      	bx	lr
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d0f9      	beq.n	8015d68 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015d74:	4299      	cmp	r1, r3
 8015d76:	6998      	ldr	r0, [r3, #24]
 8015d78:	d1f9      	bne.n	8015d6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015d7a:	6190      	str	r0, [r2, #24]
 8015d7c:	618a      	str	r2, [r1, #24]
 8015d7e:	e7f2      	b.n	8015d66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08015d80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d84:	461f      	mov	r7, r3
 8015d86:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015d8a:	460d      	mov	r5, r1
 8015d8c:	4616      	mov	r6, r2
 8015d8e:	b103      	cbz	r3, 8015d92 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015d90:	6038      	str	r0, [r7, #0]
 8015d92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015d94:	b314      	cbz	r4, 8015ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015d96:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015d9a:	b1eb      	cbz	r3, 8015dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015d9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015da0:	428d      	cmp	r5, r1
 8015da2:	db19      	blt.n	8015dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015da4:	b289      	uxth	r1, r1
 8015da6:	8923      	ldrh	r3, [r4, #8]
 8015da8:	440b      	add	r3, r1
 8015daa:	b21b      	sxth	r3, r3
 8015dac:	429d      	cmp	r5, r3
 8015dae:	da13      	bge.n	8015dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015db0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015db4:	4296      	cmp	r6, r2
 8015db6:	db0f      	blt.n	8015dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015db8:	b292      	uxth	r2, r2
 8015dba:	8963      	ldrh	r3, [r4, #10]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	b21b      	sxth	r3, r3
 8015dc0:	429e      	cmp	r6, r3
 8015dc2:	da09      	bge.n	8015dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	1ab2      	subs	r2, r6, r2
 8015dc8:	1a69      	subs	r1, r5, r1
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8015dd0:	b212      	sxth	r2, r2
 8015dd2:	463b      	mov	r3, r7
 8015dd4:	b209      	sxth	r1, r1
 8015dd6:	47c0      	blx	r8
 8015dd8:	69a4      	ldr	r4, [r4, #24]
 8015dda:	e7db      	b.n	8015d94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015de0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8015de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de4:	4c6d      	ldr	r4, [pc, #436]	; (8015f9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8015de6:	b0a1      	sub	sp, #132	; 0x84
 8015de8:	4606      	mov	r6, r0
 8015dea:	6824      	ldr	r4, [r4, #0]
 8015dec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8015dee:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8015df2:	2400      	movs	r4, #0
 8015df4:	9303      	str	r3, [sp, #12]
 8015df6:	802c      	strh	r4, [r5, #0]
 8015df8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015dfa:	802c      	strh	r4, [r5, #0]
 8015dfc:	601c      	str	r4, [r3, #0]
 8015dfe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015e02:	f7ff ffbd 	bl	8015d80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015e06:	f1b9 0f03 	cmp.w	r9, #3
 8015e0a:	f340 80c1 	ble.w	8015f90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8015e0e:	4631      	mov	r1, r6
 8015e10:	a80c      	add	r0, sp, #48	; 0x30
 8015e12:	f005 fe61 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e16:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8015e1a:	9306      	str	r3, [sp, #24]
 8015e1c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015e20:	9307      	str	r3, [sp, #28]
 8015e22:	9b03      	ldr	r3, [sp, #12]
 8015e24:	f8d3 a000 	ldr.w	sl, [r3]
 8015e28:	f1ba 0f00 	cmp.w	sl, #0
 8015e2c:	f000 80b3 	beq.w	8015f96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8015e30:	4651      	mov	r1, sl
 8015e32:	a810      	add	r0, sp, #64	; 0x40
 8015e34:	f005 fe50 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e38:	2002      	movs	r0, #2
 8015e3a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8015e3e:	9b01      	ldr	r3, [sp, #4]
 8015e40:	9a06      	ldr	r2, [sp, #24]
 8015e42:	fb91 f1f0 	sdiv	r1, r1, r0
 8015e46:	189d      	adds	r5, r3, r2
 8015e48:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8015e4c:	9a07      	ldr	r2, [sp, #28]
 8015e4e:	4419      	add	r1, r3
 8015e50:	9b02      	ldr	r3, [sp, #8]
 8015e52:	4413      	add	r3, r2
 8015e54:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8015e58:	1a6d      	subs	r5, r5, r1
 8015e5a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015e5e:	fb92 f2f0 	sdiv	r2, r2, r0
 8015e62:	440a      	add	r2, r1
 8015e64:	1a9b      	subs	r3, r3, r2
 8015e66:	435b      	muls	r3, r3
 8015e68:	fb05 3505 	mla	r5, r5, r5, r3
 8015e6c:	4f4c      	ldr	r7, [pc, #304]	; (8015fa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8015e6e:	ac10      	add	r4, sp, #64	; 0x40
 8015e70:	f1b9 0f0c 	cmp.w	r9, #12
 8015e74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e80:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8015e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015e88:	f04f 0303 	mov.w	r3, #3
 8015e8c:	bfd8      	it	le
 8015e8e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8015e92:	f04f 0400 	mov.w	r4, #0
 8015e96:	f8cd 9000 	str.w	r9, [sp]
 8015e9a:	bfcc      	ite	gt
 8015e9c:	4698      	movgt	r8, r3
 8015e9e:	fb92 f8f3 	sdivle	r8, r2, r3
 8015ea2:	1c63      	adds	r3, r4, #1
 8015ea4:	aa10      	add	r2, sp, #64	; 0x40
 8015ea6:	f004 0401 	and.w	r4, r4, #1
 8015eaa:	f04f 0b00 	mov.w	fp, #0
 8015eae:	9308      	str	r3, [sp, #32]
 8015eb0:	9b00      	ldr	r3, [sp, #0]
 8015eb2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8015eb6:	fb93 f3f8 	sdiv	r3, r3, r8
 8015eba:	3404      	adds	r4, #4
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	9304      	str	r3, [sp, #16]
 8015ec0:	9a04      	ldr	r2, [sp, #16]
 8015ec2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015ec6:	fb13 f302 	smulbb	r3, r3, r2
 8015eca:	9a01      	ldr	r2, [sp, #4]
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	1899      	adds	r1, r3, r2
 8015ed0:	9305      	str	r3, [sp, #20]
 8015ed2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015ed6:	b209      	sxth	r1, r1
 8015ed8:	4299      	cmp	r1, r3
 8015eda:	db4d      	blt.n	8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015edc:	8932      	ldrh	r2, [r6, #8]
 8015ede:	4413      	add	r3, r2
 8015ee0:	b21b      	sxth	r3, r3
 8015ee2:	4299      	cmp	r1, r3
 8015ee4:	da48      	bge.n	8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015ee6:	9b04      	ldr	r3, [sp, #16]
 8015ee8:	6827      	ldr	r7, [r4, #0]
 8015eea:	fb17 f703 	smulbb	r7, r7, r3
 8015eee:	9b02      	ldr	r3, [sp, #8]
 8015ef0:	b2bf      	uxth	r7, r7
 8015ef2:	18fa      	adds	r2, r7, r3
 8015ef4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015ef8:	b212      	sxth	r2, r2
 8015efa:	429a      	cmp	r2, r3
 8015efc:	db3c      	blt.n	8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015efe:	8970      	ldrh	r0, [r6, #10]
 8015f00:	4403      	add	r3, r0
 8015f02:	b21b      	sxth	r3, r3
 8015f04:	429a      	cmp	r2, r3
 8015f06:	da37      	bge.n	8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f0e:	ab0b      	add	r3, sp, #44	; 0x2c
 8015f10:	f7ff ff36 	bl	8015d80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f16:	b37a      	cbz	r2, 8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015f18:	4552      	cmp	r2, sl
 8015f1a:	d02d      	beq.n	8015f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015f1c:	4611      	mov	r1, r2
 8015f1e:	a80e      	add	r0, sp, #56	; 0x38
 8015f20:	9209      	str	r2, [sp, #36]	; 0x24
 8015f22:	f005 fdd9 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015f26:	f04f 0e02 	mov.w	lr, #2
 8015f2a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8015f2e:	9a06      	ldr	r2, [sp, #24]
 8015f30:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8015f34:	9b01      	ldr	r3, [sp, #4]
 8015f36:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8015f3a:	4413      	add	r3, r2
 8015f3c:	9a07      	ldr	r2, [sp, #28]
 8015f3e:	fb91 f1fe 	sdiv	r1, r1, lr
 8015f42:	fb9c fcfe 	sdiv	ip, ip, lr
 8015f46:	4401      	add	r1, r0
 8015f48:	1a58      	subs	r0, r3, r1
 8015f4a:	9b02      	ldr	r3, [sp, #8]
 8015f4c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8015f50:	4413      	add	r3, r2
 8015f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f54:	448c      	add	ip, r1
 8015f56:	eba3 030c 	sub.w	r3, r3, ip
 8015f5a:	435b      	muls	r3, r3
 8015f5c:	fb00 3300 	mla	r3, r0, r0, r3
 8015f60:	42ab      	cmp	r3, r5
 8015f62:	d208      	bcs.n	8015f76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8015f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f66:	461d      	mov	r5, r3
 8015f68:	9803      	ldr	r0, [sp, #12]
 8015f6a:	6001      	str	r1, [r0, #0]
 8015f6c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015f6e:	9805      	ldr	r0, [sp, #20]
 8015f70:	8008      	strh	r0, [r1, #0]
 8015f72:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015f74:	800f      	strh	r7, [r1, #0]
 8015f76:	4692      	mov	sl, r2
 8015f78:	f10b 0b01 	add.w	fp, fp, #1
 8015f7c:	3408      	adds	r4, #8
 8015f7e:	f1bb 0f04 	cmp.w	fp, #4
 8015f82:	d19d      	bne.n	8015ec0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8015f84:	9b00      	ldr	r3, [sp, #0]
 8015f86:	9c08      	ldr	r4, [sp, #32]
 8015f88:	444b      	add	r3, r9
 8015f8a:	4544      	cmp	r4, r8
 8015f8c:	9300      	str	r3, [sp, #0]
 8015f8e:	d188      	bne.n	8015ea2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8015f90:	b021      	add	sp, #132	; 0x84
 8015f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f96:	f04f 35ff 	mov.w	r5, #4294967295
 8015f9a:	e767      	b.n	8015e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8015f9c:	2003c26c 	.word	0x2003c26c
 8015fa0:	0802ee64 	.word	0x0802ee64

08015fa4 <_ZN8touchgfx4RectaNERKS0_>:
 8015fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fa8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015fac:	888c      	ldrh	r4, [r1, #4]
 8015fae:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015fb2:	443c      	add	r4, r7
 8015fb4:	b2a4      	uxth	r4, r4
 8015fb6:	fa0f f884 	sxth.w	r8, r4
 8015fba:	45c1      	cmp	r9, r8
 8015fbc:	da2f      	bge.n	801601e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015fbe:	8882      	ldrh	r2, [r0, #4]
 8015fc0:	444a      	add	r2, r9
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	fa0f fe82 	sxth.w	lr, r2
 8015fc8:	4577      	cmp	r7, lr
 8015fca:	da28      	bge.n	801601e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015fcc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015fd0:	88cb      	ldrh	r3, [r1, #6]
 8015fd2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015fd6:	442b      	add	r3, r5
 8015fd8:	b21b      	sxth	r3, r3
 8015fda:	429e      	cmp	r6, r3
 8015fdc:	da1f      	bge.n	801601e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015fde:	88c3      	ldrh	r3, [r0, #6]
 8015fe0:	4433      	add	r3, r6
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	fa0f fc83 	sxth.w	ip, r3
 8015fe8:	4565      	cmp	r5, ip
 8015fea:	da18      	bge.n	801601e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015fec:	454f      	cmp	r7, r9
 8015fee:	bfb8      	it	lt
 8015ff0:	464f      	movlt	r7, r9
 8015ff2:	42b5      	cmp	r5, r6
 8015ff4:	bfb8      	it	lt
 8015ff6:	4635      	movlt	r5, r6
 8015ff8:	45f0      	cmp	r8, lr
 8015ffa:	bfd8      	it	le
 8015ffc:	4622      	movle	r2, r4
 8015ffe:	1bd2      	subs	r2, r2, r7
 8016000:	8082      	strh	r2, [r0, #4]
 8016002:	884a      	ldrh	r2, [r1, #2]
 8016004:	88c9      	ldrh	r1, [r1, #6]
 8016006:	8007      	strh	r7, [r0, #0]
 8016008:	440a      	add	r2, r1
 801600a:	8045      	strh	r5, [r0, #2]
 801600c:	b292      	uxth	r2, r2
 801600e:	b211      	sxth	r1, r2
 8016010:	458c      	cmp	ip, r1
 8016012:	bfa8      	it	ge
 8016014:	4613      	movge	r3, r2
 8016016:	1b5b      	subs	r3, r3, r5
 8016018:	80c3      	strh	r3, [r0, #6]
 801601a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801601e:	2300      	movs	r3, #0
 8016020:	8003      	strh	r3, [r0, #0]
 8016022:	8043      	strh	r3, [r0, #2]
 8016024:	8083      	strh	r3, [r0, #4]
 8016026:	80c3      	strh	r3, [r0, #6]
 8016028:	e7f7      	b.n	801601a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801602a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801602a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	dd06      	ble.n	8016040 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016032:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016036:	2800      	cmp	r0, #0
 8016038:	bfcc      	ite	gt
 801603a:	2000      	movgt	r0, #0
 801603c:	2001      	movle	r0, #1
 801603e:	4770      	bx	lr
 8016040:	2001      	movs	r0, #1
 8016042:	4770      	bx	lr

08016044 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016048:	2300      	movs	r3, #0
 801604a:	4604      	mov	r4, r0
 801604c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801604e:	8003      	strh	r3, [r0, #0]
 8016050:	8043      	strh	r3, [r0, #2]
 8016052:	8083      	strh	r3, [r0, #4]
 8016054:	80c3      	strh	r3, [r0, #6]
 8016056:	2d00      	cmp	r5, #0
 8016058:	d040      	beq.n	80160dc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801605a:	1d28      	adds	r0, r5, #4
 801605c:	f7ff ffe5 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016060:	b988      	cbnz	r0, 8016086 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016062:	4620      	mov	r0, r4
 8016064:	f7ff ffe1 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016068:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801606c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016070:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016074:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016078:	b138      	cbz	r0, 801608a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801607a:	8022      	strh	r2, [r4, #0]
 801607c:	8063      	strh	r3, [r4, #2]
 801607e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016082:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016086:	69ad      	ldr	r5, [r5, #24]
 8016088:	e7e5      	b.n	8016056 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801608a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801608e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016092:	4290      	cmp	r0, r2
 8016094:	4607      	mov	r7, r0
 8016096:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801609a:	460e      	mov	r6, r1
 801609c:	bfa8      	it	ge
 801609e:	4617      	movge	r7, r2
 80160a0:	4299      	cmp	r1, r3
 80160a2:	4472      	add	r2, lr
 80160a4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80160a8:	bfa8      	it	ge
 80160aa:	461e      	movge	r6, r3
 80160ac:	4440      	add	r0, r8
 80160ae:	4471      	add	r1, lr
 80160b0:	4463      	add	r3, ip
 80160b2:	b200      	sxth	r0, r0
 80160b4:	8027      	strh	r7, [r4, #0]
 80160b6:	b212      	sxth	r2, r2
 80160b8:	8066      	strh	r6, [r4, #2]
 80160ba:	b209      	sxth	r1, r1
 80160bc:	b21b      	sxth	r3, r3
 80160be:	4290      	cmp	r0, r2
 80160c0:	bfac      	ite	ge
 80160c2:	ebc7 0200 	rsbge	r2, r7, r0
 80160c6:	ebc7 0202 	rsblt	r2, r7, r2
 80160ca:	4299      	cmp	r1, r3
 80160cc:	bfac      	ite	ge
 80160ce:	ebc6 0301 	rsbge	r3, r6, r1
 80160d2:	ebc6 0303 	rsblt	r3, r6, r3
 80160d6:	80a2      	strh	r2, [r4, #4]
 80160d8:	80e3      	strh	r3, [r4, #6]
 80160da:	e7d4      	b.n	8016086 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80160dc:	4620      	mov	r0, r4
 80160de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80160e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80160e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80160ea:	b383      	cbz	r3, 801614e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80160ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80160ee:	b374      	cbz	r4, 801614e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80160f0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80160f4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80160f8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80160fc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016100:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016104:	b303      	cbz	r3, 8016148 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016106:	4668      	mov	r0, sp
 8016108:	1d21      	adds	r1, r4, #4
 801610a:	f8ad 5000 	strh.w	r5, [sp]
 801610e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016112:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016116:	f8ad 8006 	strh.w	r8, [sp, #6]
 801611a:	f7ff ff43 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801611e:	4668      	mov	r0, sp
 8016120:	f7ff ff83 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016124:	b980      	cbnz	r0, 8016148 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016126:	f8bd 3000 	ldrh.w	r3, [sp]
 801612a:	4669      	mov	r1, sp
 801612c:	88a2      	ldrh	r2, [r4, #4]
 801612e:	4620      	mov	r0, r4
 8016130:	1a9b      	subs	r3, r3, r2
 8016132:	88e2      	ldrh	r2, [r4, #6]
 8016134:	f8ad 3000 	strh.w	r3, [sp]
 8016138:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801613c:	1a9b      	subs	r3, r3, r2
 801613e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016142:	6823      	ldr	r3, [r4, #0]
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	4798      	blx	r3
 8016148:	69a4      	ldr	r4, [r4, #24]
 801614a:	2c00      	cmp	r4, #0
 801614c:	d1d8      	bne.n	8016100 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801614e:	b002      	add	sp, #8
 8016150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016154 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016154:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016156:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801615a:	460d      	mov	r5, r1
 801615c:	4616      	mov	r6, r2
 801615e:	b323      	cbz	r3, 80161aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016160:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016162:	b314      	cbz	r4, 80161aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016164:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016168:	b1eb      	cbz	r3, 80161a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801616a:	6828      	ldr	r0, [r5, #0]
 801616c:	466b      	mov	r3, sp
 801616e:	6869      	ldr	r1, [r5, #4]
 8016170:	c303      	stmia	r3!, {r0, r1}
 8016172:	4668      	mov	r0, sp
 8016174:	1d21      	adds	r1, r4, #4
 8016176:	f7ff ff15 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801617a:	4668      	mov	r0, sp
 801617c:	f7ff ff55 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016180:	b988      	cbnz	r0, 80161a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016182:	f8bd 3000 	ldrh.w	r3, [sp]
 8016186:	4669      	mov	r1, sp
 8016188:	88a2      	ldrh	r2, [r4, #4]
 801618a:	4620      	mov	r0, r4
 801618c:	1a9b      	subs	r3, r3, r2
 801618e:	88e2      	ldrh	r2, [r4, #6]
 8016190:	f8ad 3000 	strh.w	r3, [sp]
 8016194:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016198:	1a9b      	subs	r3, r3, r2
 801619a:	4632      	mov	r2, r6
 801619c:	f8ad 3002 	strh.w	r3, [sp, #2]
 80161a0:	6823      	ldr	r3, [r4, #0]
 80161a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161a4:	4798      	blx	r3
 80161a6:	69a4      	ldr	r4, [r4, #24]
 80161a8:	e7db      	b.n	8016162 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80161aa:	b002      	add	sp, #8
 80161ac:	bd70      	pop	{r4, r5, r6, pc}

080161ae <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80161ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80161b2:	4770      	bx	lr

080161b4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80161b4:	4770      	bx	lr

080161b6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80161b6:	4770      	bx	lr

080161b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80161b8:	6803      	ldr	r3, [r0, #0]
 80161ba:	b513      	push	{r0, r1, r4, lr}
 80161bc:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80161c0:	2300      	movs	r3, #0
 80161c2:	e9cd 3300 	strd	r3, r3, [sp]
 80161c6:	466b      	mov	r3, sp
 80161c8:	47a0      	blx	r4
 80161ca:	b002      	add	sp, #8
 80161cc:	bd10      	pop	{r4, pc}

080161ce <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80161ce:	2301      	movs	r3, #1
 80161d0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80161d4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80161d8:	4770      	bx	lr

080161da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80161da:	2301      	movs	r3, #1
 80161dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80161e0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80161e4:	4770      	bx	lr

080161e6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80161e6:	6843      	ldr	r3, [r0, #4]
 80161e8:	2201      	movs	r2, #1
 80161ea:	725a      	strb	r2, [r3, #9]
 80161ec:	6840      	ldr	r0, [r0, #4]
 80161ee:	6803      	ldr	r3, [r0, #0]
 80161f0:	691b      	ldr	r3, [r3, #16]
 80161f2:	4718      	bx	r3

080161f4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80161f4:	6840      	ldr	r0, [r0, #4]
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	689b      	ldr	r3, [r3, #8]
 80161fa:	4718      	bx	r3

080161fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80161fc:	b530      	push	{r4, r5, lr}
 80161fe:	b08b      	sub	sp, #44	; 0x2c
 8016200:	6804      	ldr	r4, [r0, #0]
 8016202:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016206:	9509      	str	r5, [sp, #36]	; 0x24
 8016208:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801620c:	9508      	str	r5, [sp, #32]
 801620e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016212:	9507      	str	r5, [sp, #28]
 8016214:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016218:	9506      	str	r5, [sp, #24]
 801621a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801621e:	9505      	str	r5, [sp, #20]
 8016220:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016224:	9504      	str	r5, [sp, #16]
 8016226:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801622a:	9503      	str	r5, [sp, #12]
 801622c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016230:	9502      	str	r5, [sp, #8]
 8016232:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016236:	e9cd 3500 	strd	r3, r5, [sp]
 801623a:	4613      	mov	r3, r2
 801623c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801623e:	2200      	movs	r2, #0
 8016240:	47a0      	blx	r4
 8016242:	b00b      	add	sp, #44	; 0x2c
 8016244:	bd30      	pop	{r4, r5, pc}
	...

08016248 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016248:	4b04      	ldr	r3, [pc, #16]	; (801625c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	b123      	cbz	r3, 8016258 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801624e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016252:	f080 0001 	eor.w	r0, r0, #1
 8016256:	4770      	bx	lr
 8016258:	2001      	movs	r0, #1
 801625a:	4770      	bx	lr
 801625c:	2003c26a 	.word	0x2003c26a

08016260 <_ZN8touchgfx3HAL8endFrameEv>:
 8016260:	b510      	push	{r4, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	6840      	ldr	r0, [r0, #4]
 8016266:	6803      	ldr	r3, [r0, #0]
 8016268:	689b      	ldr	r3, [r3, #8]
 801626a:	4798      	blx	r3
 801626c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016270:	b113      	cbz	r3, 8016278 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016272:	2301      	movs	r3, #1
 8016274:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016278:	bd10      	pop	{r4, pc}

0801627a <_ZN8touchgfx3HAL10initializeEv>:
 801627a:	b510      	push	{r4, lr}
 801627c:	4604      	mov	r4, r0
 801627e:	f7fd f953 	bl	8013528 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016282:	6860      	ldr	r0, [r4, #4]
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	68db      	ldr	r3, [r3, #12]
 8016288:	4798      	blx	r3
 801628a:	68e0      	ldr	r0, [r4, #12]
 801628c:	6803      	ldr	r3, [r0, #0]
 801628e:	689b      	ldr	r3, [r3, #8]
 8016290:	4798      	blx	r3
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	4620      	mov	r0, r4
 8016296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801629c:	4718      	bx	r3

0801629e <_ZN8touchgfx3HAL9taskEntryEv>:
 801629e:	b508      	push	{r3, lr}
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	4604      	mov	r4, r0
 80162a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162a8:	4798      	blx	r3
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162ae:	4620      	mov	r0, r4
 80162b0:	4798      	blx	r3
 80162b2:	f7fd f9af 	bl	8013614 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162ba:	e7f8      	b.n	80162ae <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080162bc <_ZN8touchgfx3HAL4tickEv>:
 80162bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	4604      	mov	r4, r0
 80162c2:	4d5b      	ldr	r5, [pc, #364]	; (8016430 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80162c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80162c8:	4798      	blx	r3
 80162ca:	2800      	cmp	r0, #0
 80162cc:	f000 8095 	beq.w	80163fa <_ZN8touchgfx3HAL4tickEv+0x13e>
 80162d0:	2001      	movs	r0, #1
 80162d2:	2600      	movs	r6, #0
 80162d4:	f7fb feac 	bl	8012030 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80162d8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80162dc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80162e0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80162e4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80162e8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80162ec:	b133      	cbz	r3, 80162fc <_ZN8touchgfx3HAL4tickEv+0x40>
 80162ee:	6823      	ldr	r3, [r4, #0]
 80162f0:	4620      	mov	r0, r4
 80162f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80162f6:	4798      	blx	r3
 80162f8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80162fc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016300:	2601      	movs	r6, #1
 8016302:	6862      	ldr	r2, [r4, #4]
 8016304:	f083 0301 	eor.w	r3, r3, #1
 8016308:	702e      	strb	r6, [r5, #0]
 801630a:	7253      	strb	r3, [r2, #9]
 801630c:	f004 fbb0 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 8016310:	6803      	ldr	r3, [r0, #0]
 8016312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016314:	4798      	blx	r3
 8016316:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801631a:	b90b      	cbnz	r3, 8016320 <_ZN8touchgfx3HAL4tickEv+0x64>
 801631c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016320:	f004 fba6 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 8016324:	6803      	ldr	r3, [r0, #0]
 8016326:	695b      	ldr	r3, [r3, #20]
 8016328:	4798      	blx	r3
 801632a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801632c:	6803      	ldr	r3, [r0, #0]
 801632e:	691b      	ldr	r3, [r3, #16]
 8016330:	4798      	blx	r3
 8016332:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016336:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801633a:	3b01      	subs	r3, #1
 801633c:	b2db      	uxtb	r3, r3
 801633e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016342:	b10a      	cbz	r2, 8016348 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1eb      	bne.n	8016320 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016348:	4a3a      	ldr	r2, [pc, #232]	; (8016434 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801634a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801634e:	7813      	ldrb	r3, [r2, #0]
 8016350:	3301      	adds	r3, #1
 8016352:	b25b      	sxtb	r3, r3
 8016354:	4299      	cmp	r1, r3
 8016356:	7013      	strb	r3, [r2, #0]
 8016358:	dc10      	bgt.n	801637c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801635a:	2300      	movs	r3, #0
 801635c:	68e0      	ldr	r0, [r4, #12]
 801635e:	a902      	add	r1, sp, #8
 8016360:	7013      	strb	r3, [r2, #0]
 8016362:	aa03      	add	r2, sp, #12
 8016364:	6803      	ldr	r3, [r0, #0]
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	4798      	blx	r3
 801636a:	6823      	ldr	r3, [r4, #0]
 801636c:	2800      	cmp	r0, #0
 801636e:	d050      	beq.n	8016412 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016374:	4620      	mov	r0, r4
 8016376:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801637a:	4798      	blx	r3
 801637c:	2300      	movs	r3, #0
 801637e:	6960      	ldr	r0, [r4, #20]
 8016380:	f88d 3007 	strb.w	r3, [sp, #7]
 8016384:	b158      	cbz	r0, 801639e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016386:	6803      	ldr	r3, [r0, #0]
 8016388:	f10d 0107 	add.w	r1, sp, #7
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	4798      	blx	r3
 8016390:	b128      	cbz	r0, 801639e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016392:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016394:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016398:	6803      	ldr	r3, [r0, #0]
 801639a:	68db      	ldr	r3, [r3, #12]
 801639c:	4798      	blx	r3
 801639e:	f104 001c 	add.w	r0, r4, #28
 80163a2:	f012 fdbf 	bl	8028f24 <_ZN8touchgfx8Gestures4tickEv>
 80163a6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80163aa:	b30b      	cbz	r3, 80163f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80163ac:	6920      	ldr	r0, [r4, #16]
 80163ae:	6803      	ldr	r3, [r0, #0]
 80163b0:	691b      	ldr	r3, [r3, #16]
 80163b2:	4798      	blx	r3
 80163b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163b6:	4606      	mov	r6, r0
 80163b8:	b903      	cbnz	r3, 80163bc <_ZN8touchgfx3HAL4tickEv+0x100>
 80163ba:	6720      	str	r0, [r4, #112]	; 0x70
 80163bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163be:	4a1e      	ldr	r2, [pc, #120]	; (8016438 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80163c0:	1af3      	subs	r3, r6, r3
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d914      	bls.n	80163f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80163c6:	6920      	ldr	r0, [r4, #16]
 80163c8:	6803      	ldr	r3, [r0, #0]
 80163ca:	699b      	ldr	r3, [r3, #24]
 80163cc:	4798      	blx	r3
 80163ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163d0:	2264      	movs	r2, #100	; 0x64
 80163d2:	1af3      	subs	r3, r6, r3
 80163d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80163d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80163dc:	2800      	cmp	r0, #0
 80163de:	dc1d      	bgt.n	801641c <_ZN8touchgfx3HAL4tickEv+0x160>
 80163e0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80163e4:	6920      	ldr	r0, [r4, #16]
 80163e6:	2100      	movs	r1, #0
 80163e8:	6803      	ldr	r3, [r0, #0]
 80163ea:	69db      	ldr	r3, [r3, #28]
 80163ec:	4798      	blx	r3
 80163ee:	6726      	str	r6, [r4, #112]	; 0x70
 80163f0:	f004 fb3e 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 80163f4:	6803      	ldr	r3, [r0, #0]
 80163f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163f8:	4798      	blx	r3
 80163fa:	6823      	ldr	r3, [r4, #0]
 80163fc:	4620      	mov	r0, r4
 80163fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016402:	4798      	blx	r3
 8016404:	2001      	movs	r0, #1
 8016406:	f7fb fe2f 	bl	8012068 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801640a:	2300      	movs	r3, #0
 801640c:	702b      	strb	r3, [r5, #0]
 801640e:	b004      	add	sp, #16
 8016410:	bd70      	pop	{r4, r5, r6, pc}
 8016412:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016416:	4620      	mov	r0, r4
 8016418:	4798      	blx	r3
 801641a:	e7af      	b.n	801637c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801641c:	2863      	cmp	r0, #99	; 0x63
 801641e:	bfcb      	itete	gt
 8016420:	2300      	movgt	r3, #0
 8016422:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016426:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801642a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801642e:	e7d9      	b.n	80163e4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016430:	2003c270 	.word	0x2003c270
 8016434:	2003c271 	.word	0x2003c271
 8016438:	05f5e100 	.word	0x05f5e100

0801643c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801643c:	f7fd b8b6 	b.w	80135ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016440 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016440:	6581      	str	r1, [r0, #88]	; 0x58
 8016442:	301c      	adds	r0, #28
 8016444:	f012 bd6c 	b.w	8028f20 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016448 <_ZN8touchgfx3HAL5touchEll>:
 8016448:	b530      	push	{r4, r5, lr}
 801644a:	b087      	sub	sp, #28
 801644c:	4604      	mov	r4, r0
 801644e:	a804      	add	r0, sp, #16
 8016450:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016454:	f004 f892 	bl	801a57c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016458:	9b04      	ldr	r3, [sp, #16]
 801645a:	a906      	add	r1, sp, #24
 801645c:	a803      	add	r0, sp, #12
 801645e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016462:	9b05      	ldr	r3, [sp, #20]
 8016464:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016468:	f004 f8da 	bl	801a620 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801646c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016470:	f104 001c 	add.w	r0, r4, #28
 8016474:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016478:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801647c:	b189      	cbz	r1, 80164a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801647e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	4613      	mov	r3, r2
 8016486:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801648a:	462a      	mov	r2, r5
 801648c:	f012 fd58 	bl	8028f40 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016490:	b128      	cbz	r0, 801649e <_ZN8touchgfx3HAL5touchEll+0x56>
 8016492:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016496:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016498:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801649c:	6623      	str	r3, [r4, #96]	; 0x60
 801649e:	b007      	add	sp, #28
 80164a0:	bd30      	pop	{r4, r5, pc}
 80164a2:	f012 fd8d 	bl	8028fc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80164a6:	2301      	movs	r3, #1
 80164a8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80164ac:	e7f1      	b.n	8016492 <_ZN8touchgfx3HAL5touchEll+0x4a>

080164ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80164ae:	b510      	push	{r4, lr}
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d046      	beq.n	8016542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80164b4:	ea81 0002 	eor.w	r0, r1, r2
 80164b8:	07c4      	lsls	r4, r0, #31
 80164ba:	d508      	bpl.n	80164ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80164bc:	440b      	add	r3, r1
 80164be:	3a01      	subs	r2, #1
 80164c0:	428b      	cmp	r3, r1
 80164c2:	d93e      	bls.n	8016542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80164c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80164c8:	f801 0b01 	strb.w	r0, [r1], #1
 80164cc:	e7f8      	b.n	80164c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80164ce:	07d0      	lsls	r0, r2, #31
 80164d0:	bf42      	ittt	mi
 80164d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80164d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80164da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80164de:	2b01      	cmp	r3, #1
 80164e0:	d911      	bls.n	8016506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80164e2:	ea81 0402 	eor.w	r4, r1, r2
 80164e6:	4610      	mov	r0, r2
 80164e8:	07a4      	lsls	r4, r4, #30
 80164ea:	d022      	beq.n	8016532 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80164ec:	f023 0401 	bic.w	r4, r3, #1
 80164f0:	440c      	add	r4, r1
 80164f2:	428c      	cmp	r4, r1
 80164f4:	4602      	mov	r2, r0
 80164f6:	d904      	bls.n	8016502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80164f8:	8812      	ldrh	r2, [r2, #0]
 80164fa:	3002      	adds	r0, #2
 80164fc:	f821 2b02 	strh.w	r2, [r1], #2
 8016500:	e7f7      	b.n	80164f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016502:	f003 0301 	and.w	r3, r3, #1
 8016506:	f023 0003 	bic.w	r0, r3, #3
 801650a:	4408      	add	r0, r1
 801650c:	4288      	cmp	r0, r1
 801650e:	4614      	mov	r4, r2
 8016510:	d904      	bls.n	801651c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016512:	6824      	ldr	r4, [r4, #0]
 8016514:	3204      	adds	r2, #4
 8016516:	f841 4b04 	str.w	r4, [r1], #4
 801651a:	e7f7      	b.n	801650c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801651c:	f003 0303 	and.w	r3, r3, #3
 8016520:	3a01      	subs	r2, #1
 8016522:	440b      	add	r3, r1
 8016524:	428b      	cmp	r3, r1
 8016526:	d90c      	bls.n	8016542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016528:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801652c:	f801 0b01 	strb.w	r0, [r1], #1
 8016530:	e7f8      	b.n	8016524 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016532:	0790      	lsls	r0, r2, #30
 8016534:	d0e7      	beq.n	8016506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016536:	f832 0b02 	ldrh.w	r0, [r2], #2
 801653a:	3b02      	subs	r3, #2
 801653c:	f821 0b02 	strh.w	r0, [r1], #2
 8016540:	e7e1      	b.n	8016506 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016542:	2001      	movs	r0, #1
 8016544:	bd10      	pop	{r4, pc}

08016546 <_ZN8touchgfx3HAL7noTouchEv>:
 8016546:	b510      	push	{r4, lr}
 8016548:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801654c:	4604      	mov	r4, r0
 801654e:	b153      	cbz	r3, 8016566 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016550:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016554:	2101      	movs	r1, #1
 8016556:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801655a:	301c      	adds	r0, #28
 801655c:	f012 fd30 	bl	8028fc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016560:	2300      	movs	r3, #0
 8016562:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016566:	bd10      	pop	{r4, pc}

08016568 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801656c:	b085      	sub	sp, #20
 801656e:	4604      	mov	r4, r0
 8016570:	2000      	movs	r0, #0
 8016572:	4699      	mov	r9, r3
 8016574:	ad04      	add	r5, sp, #16
 8016576:	460f      	mov	r7, r1
 8016578:	4690      	mov	r8, r2
 801657a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801657e:	69a0      	ldr	r0, [r4, #24]
 8016580:	6806      	ldr	r6, [r0, #0]
 8016582:	9501      	str	r5, [sp, #4]
 8016584:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016588:	9500      	str	r5, [sp, #0]
 801658a:	6835      	ldr	r5, [r6, #0]
 801658c:	47a8      	blx	r5
 801658e:	4d10      	ldr	r5, [pc, #64]	; (80165d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8016590:	4606      	mov	r6, r0
 8016592:	f8a5 9000 	strh.w	r9, [r5]
 8016596:	f7f8 f825 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801659a:	6803      	ldr	r3, [r0, #0]
 801659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801659e:	4798      	blx	r3
 80165a0:	b128      	cbz	r0, 80165ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80165a2:	2801      	cmp	r0, #1
 80165a4:	d00b      	beq.n	80165be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80165a6:	4630      	mov	r0, r6
 80165a8:	b005      	add	sp, #20
 80165aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ae:	882b      	ldrh	r3, [r5, #0]
 80165b0:	fb08 7203 	mla	r2, r8, r3, r7
 80165b4:	9b03      	ldr	r3, [sp, #12]
 80165b6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80165ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 80165bc:	e7f3      	b.n	80165a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80165be:	882a      	ldrh	r2, [r5, #0]
 80165c0:	9b03      	ldr	r3, [sp, #12]
 80165c2:	fb08 7202 	mla	r2, r8, r2, r7
 80165c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80165ca:	1a9a      	subs	r2, r3, r2
 80165cc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80165ce:	e7ea      	b.n	80165a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80165d0:	2003c266 	.word	0x2003c266

080165d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80165d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165d6:	b08b      	sub	sp, #44	; 0x2c
 80165d8:	4617      	mov	r7, r2
 80165da:	4604      	mov	r4, r0
 80165dc:	460e      	mov	r6, r1
 80165de:	461d      	mov	r5, r3
 80165e0:	f7f8 f800 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 80165e4:	6803      	ldr	r3, [r0, #0]
 80165e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165e8:	4798      	blx	r3
 80165ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80165ee:	9007      	str	r0, [sp, #28]
 80165f0:	4631      	mov	r1, r6
 80165f2:	6822      	ldr	r2, [r4, #0]
 80165f4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80165f8:	4b0c      	ldr	r3, [pc, #48]	; (801662c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80165fa:	4620      	mov	r0, r4
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	9306      	str	r3, [sp, #24]
 8016600:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016604:	9305      	str	r3, [sp, #20]
 8016606:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801660a:	9304      	str	r3, [sp, #16]
 801660c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016610:	9303      	str	r3, [sp, #12]
 8016612:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016616:	9302      	str	r3, [sp, #8]
 8016618:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801661c:	e9cd 5300 	strd	r5, r3, [sp]
 8016620:	463b      	mov	r3, r7
 8016622:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016624:	2200      	movs	r2, #0
 8016626:	47a8      	blx	r5
 8016628:	b00b      	add	sp, #44	; 0x2c
 801662a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801662c:	2003c266 	.word	0x2003c266

08016630 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016634:	4698      	mov	r8, r3
 8016636:	6803      	ldr	r3, [r0, #0]
 8016638:	b08b      	sub	sp, #44	; 0x2c
 801663a:	4617      	mov	r7, r2
 801663c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801663e:	460e      	mov	r6, r1
 8016640:	4b13      	ldr	r3, [pc, #76]	; (8016690 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016642:	4604      	mov	r4, r0
 8016644:	f8b3 9000 	ldrh.w	r9, [r3]
 8016648:	f7f7 ffcc 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801664c:	6803      	ldr	r3, [r0, #0]
 801664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016650:	4798      	blx	r3
 8016652:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016656:	2200      	movs	r2, #0
 8016658:	4631      	mov	r1, r6
 801665a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801665e:	2302      	movs	r3, #2
 8016660:	4620      	mov	r0, r4
 8016662:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016666:	2301      	movs	r3, #1
 8016668:	9305      	str	r3, [sp, #20]
 801666a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801666e:	9304      	str	r3, [sp, #16]
 8016670:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016674:	9303      	str	r3, [sp, #12]
 8016676:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801667a:	9302      	str	r3, [sp, #8]
 801667c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016680:	e9cd 8300 	strd	r8, r3, [sp]
 8016684:	463b      	mov	r3, r7
 8016686:	47a8      	blx	r5
 8016688:	b00b      	add	sp, #44	; 0x2c
 801668a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801668e:	bf00      	nop
 8016690:	2003c266 	.word	0x2003c266

08016694 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016698:	4698      	mov	r8, r3
 801669a:	6803      	ldr	r3, [r0, #0]
 801669c:	b087      	sub	sp, #28
 801669e:	460e      	mov	r6, r1
 80166a0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80166a2:	4617      	mov	r7, r2
 80166a4:	4b0f      	ldr	r3, [pc, #60]	; (80166e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80166a6:	4604      	mov	r4, r0
 80166a8:	f8b3 9000 	ldrh.w	r9, [r3]
 80166ac:	f7f7 ff9a 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 80166b0:	6803      	ldr	r3, [r0, #0]
 80166b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166b4:	4798      	blx	r3
 80166b6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80166ba:	463a      	mov	r2, r7
 80166bc:	4631      	mov	r1, r6
 80166be:	f8cd 900c 	str.w	r9, [sp, #12]
 80166c2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80166c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80166ca:	4620      	mov	r0, r4
 80166cc:	9302      	str	r3, [sp, #8]
 80166ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80166d2:	9301      	str	r3, [sp, #4]
 80166d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	4643      	mov	r3, r8
 80166dc:	47a8      	blx	r5
 80166de:	b007      	add	sp, #28
 80166e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166e4:	2003c266 	.word	0x2003c266

080166e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	4604      	mov	r4, r0
 80166ee:	b08f      	sub	sp, #60	; 0x3c
 80166f0:	4610      	mov	r0, r2
 80166f2:	460d      	mov	r5, r1
 80166f4:	4691      	mov	r9, r2
 80166f6:	461e      	mov	r6, r3
 80166f8:	f007 f966 	bl	801d9c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80166fc:	2800      	cmp	r0, #0
 80166fe:	f000 809d 	beq.w	801683c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	4620      	mov	r0, r4
 8016706:	f8df b198 	ldr.w	fp, [pc, #408]	; 80168a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801670a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016710:	4798      	blx	r3
 8016712:	6823      	ldr	r3, [r4, #0]
 8016714:	4620      	mov	r0, r4
 8016716:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80168a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801671c:	4798      	blx	r3
 801671e:	f8bb 3000 	ldrh.w	r3, [fp]
 8016722:	4f5c      	ldr	r7, [pc, #368]	; (8016894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016724:	9301      	str	r3, [sp, #4]
 8016726:	f8ba 3000 	ldrh.w	r3, [sl]
 801672a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801672e:	4640      	mov	r0, r8
 8016730:	9302      	str	r3, [sp, #8]
 8016732:	883b      	ldrh	r3, [r7, #0]
 8016734:	9303      	str	r3, [sp, #12]
 8016736:	4b58      	ldr	r3, [pc, #352]	; (8016898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016738:	881a      	ldrh	r2, [r3, #0]
 801673a:	9305      	str	r3, [sp, #20]
 801673c:	9204      	str	r2, [sp, #16]
 801673e:	f007 fa87 	bl	801dc50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016742:	8038      	strh	r0, [r7, #0]
 8016744:	4640      	mov	r0, r8
 8016746:	f007 fab7 	bl	801dcb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801674a:	9b05      	ldr	r3, [sp, #20]
 801674c:	b280      	uxth	r0, r0
 801674e:	8018      	strh	r0, [r3, #0]
 8016750:	4b52      	ldr	r3, [pc, #328]	; (801689c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d174      	bne.n	8016842 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8016758:	883b      	ldrh	r3, [r7, #0]
 801675a:	f8aa 0000 	strh.w	r0, [sl]
 801675e:	f8ab 3000 	strh.w	r3, [fp]
 8016762:	4648      	mov	r0, r9
 8016764:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016768:	f007 f92e 	bl	801d9c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801676c:	2200      	movs	r2, #0
 801676e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016772:	4611      	mov	r1, r2
 8016774:	4628      	mov	r0, r5
 8016776:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801677a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801677e:	f7f8 fd59 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>
 8016782:	2301      	movs	r3, #1
 8016784:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016788:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801678c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016790:	2b00      	cmp	r3, #0
 8016792:	dd5c      	ble.n	801684e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016794:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016798:	2b00      	cmp	r3, #0
 801679a:	dd58      	ble.n	801684e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801679c:	462a      	mov	r2, r5
 801679e:	ab0a      	add	r3, sp, #40	; 0x28
 80167a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80167a4:	6851      	ldr	r1, [r2, #4]
 80167a6:	c303      	stmia	r3!, {r0, r1}
 80167a8:	4631      	mov	r1, r6
 80167aa:	a80a      	add	r0, sp, #40	; 0x28
 80167ac:	f7ff fbfa 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 80167b0:	4b38      	ldr	r3, [pc, #224]	; (8016894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80167b2:	2100      	movs	r1, #0
 80167b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80167b8:	4b37      	ldr	r3, [pc, #220]	; (8016898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80167ba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80167be:	aa0a      	add	r2, sp, #40	; 0x28
 80167c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167c4:	910c      	str	r1, [sp, #48]	; 0x30
 80167c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80167ca:	ab08      	add	r3, sp, #32
 80167cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80167d4:	4618      	mov	r0, r3
 80167d6:	a90c      	add	r1, sp, #48	; 0x30
 80167d8:	f7ff fbe4 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 80167dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d13c      	bne.n	801685c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80167e2:	2000      	movs	r0, #0
 80167e4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80167e8:	2600      	movs	r6, #0
 80167ea:	696b      	ldr	r3, [r5, #20]
 80167ec:	a908      	add	r1, sp, #32
 80167ee:	682a      	ldr	r2, [r5, #0]
 80167f0:	4628      	mov	r0, r5
 80167f2:	9305      	str	r3, [sp, #20]
 80167f4:	616e      	str	r6, [r5, #20]
 80167f6:	6892      	ldr	r2, [r2, #8]
 80167f8:	4790      	blx	r2
 80167fa:	9b05      	ldr	r3, [sp, #20]
 80167fc:	4652      	mov	r2, sl
 80167fe:	4649      	mov	r1, r9
 8016800:	616b      	str	r3, [r5, #20]
 8016802:	4628      	mov	r0, r5
 8016804:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8016808:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801680c:	f7f8 fd12 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>
 8016810:	9a01      	ldr	r2, [sp, #4]
 8016812:	4b23      	ldr	r3, [pc, #140]	; (80168a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016814:	4620      	mov	r0, r4
 8016816:	801a      	strh	r2, [r3, #0]
 8016818:	9a02      	ldr	r2, [sp, #8]
 801681a:	4b22      	ldr	r3, [pc, #136]	; (80168a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801681c:	801a      	strh	r2, [r3, #0]
 801681e:	9a03      	ldr	r2, [sp, #12]
 8016820:	4b1c      	ldr	r3, [pc, #112]	; (8016894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016822:	801a      	strh	r2, [r3, #0]
 8016824:	4b1c      	ldr	r3, [pc, #112]	; (8016898 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016826:	9a04      	ldr	r2, [sp, #16]
 8016828:	801a      	strh	r2, [r3, #0]
 801682a:	6823      	ldr	r3, [r4, #0]
 801682c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016832:	4798      	blx	r3
 8016834:	6823      	ldr	r3, [r4, #0]
 8016836:	4620      	mov	r0, r4
 8016838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801683a:	4798      	blx	r3
 801683c:	b00f      	add	sp, #60	; 0x3c
 801683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016842:	883b      	ldrh	r3, [r7, #0]
 8016844:	f8ab 0000 	strh.w	r0, [fp]
 8016848:	f8aa 3000 	strh.w	r3, [sl]
 801684c:	e789      	b.n	8016762 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801684e:	462a      	mov	r2, r5
 8016850:	ab0a      	add	r3, sp, #40	; 0x28
 8016852:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016856:	6851      	ldr	r1, [r2, #4]
 8016858:	c303      	stmia	r3!, {r0, r1}
 801685a:	e7a9      	b.n	80167b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801685c:	a807      	add	r0, sp, #28
 801685e:	f007 fb1b 	bl	801de98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016862:	4606      	mov	r6, r0
 8016864:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016866:	6803      	ldr	r3, [r0, #0]
 8016868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801686a:	4798      	blx	r3
 801686c:	4286      	cmp	r6, r0
 801686e:	d1b8      	bne.n	80167e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016870:	f7f7 feb8 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	4606      	mov	r6, r0
 8016878:	a807      	add	r0, sp, #28
 801687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801687c:	9305      	str	r3, [sp, #20]
 801687e:	f007 fb0b 	bl	801de98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016882:	9b05      	ldr	r3, [sp, #20]
 8016884:	4601      	mov	r1, r0
 8016886:	4630      	mov	r0, r6
 8016888:	4798      	blx	r3
 801688a:	f080 0001 	eor.w	r0, r0, #1
 801688e:	b2c0      	uxtb	r0, r0
 8016890:	e7a8      	b.n	80167e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8016892:	bf00      	nop
 8016894:	2003c260 	.word	0x2003c260
 8016898:	2003c262 	.word	0x2003c262
 801689c:	2003c264 	.word	0x2003c264
 80168a0:	2003c266 	.word	0x2003c266
 80168a4:	2003c268 	.word	0x2003c268

080168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80168a8:	4b07      	ldr	r3, [pc, #28]	; (80168c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80168aa:	b510      	push	{r4, lr}
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	4604      	mov	r4, r0
 80168b0:	b13b      	cbz	r3, 80168c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80168b2:	6803      	ldr	r3, [r0, #0]
 80168b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168b6:	4798      	blx	r3
 80168b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80168ba:	4283      	cmp	r3, r0
 80168bc:	d101      	bne.n	80168c2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80168be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80168c0:	bd10      	pop	{r4, pc}
 80168c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80168c4:	e7fc      	b.n	80168c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80168c6:	bf00      	nop
 80168c8:	2003c26a 	.word	0x2003c26a

080168cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80168cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168d0:	461d      	mov	r5, r3
 80168d2:	b08a      	sub	sp, #40	; 0x28
 80168d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168d8:	4690      	mov	r8, r2
 80168da:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80168de:	2400      	movs	r4, #0
 80168e0:	4607      	mov	r7, r0
 80168e2:	fb06 8505 	mla	r5, r6, r5, r8
 80168e6:	9404      	str	r4, [sp, #16]
 80168e8:	f88d 4020 	strb.w	r4, [sp, #32]
 80168ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80168f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80168f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80168f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80168fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016900:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016904:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016908:	f7ff ffce 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801690c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016916:	a901      	add	r1, sp, #4
 8016918:	9505      	str	r5, [sp, #20]
 801691a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801691e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8016922:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016926:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801692a:	6803      	ldr	r3, [r0, #0]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	4798      	blx	r3
 8016930:	b00a      	add	sp, #40	; 0x28
 8016932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016936 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801693a:	b08b      	sub	sp, #44	; 0x2c
 801693c:	2400      	movs	r4, #0
 801693e:	4691      	mov	r9, r2
 8016940:	461d      	mov	r5, r3
 8016942:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801694a:	4688      	mov	r8, r1
 801694c:	4607      	mov	r7, r0
 801694e:	9404      	str	r4, [sp, #16]
 8016950:	fb06 9505 	mla	r5, r6, r5, r9
 8016954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016958:	f7ff ffa6 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801695c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016960:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f8ad 3018 	strh.w	r3, [sp, #24]
 801696a:	a901      	add	r1, sp, #4
 801696c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016970:	9505      	str	r5, [sp, #20]
 8016972:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016976:	f8ad 401c 	strh.w	r4, [sp, #28]
 801697a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801697e:	f8cd 8010 	str.w	r8, [sp, #16]
 8016982:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016986:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801698a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801698e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016992:	6803      	ldr	r3, [r0, #0]
 8016994:	685b      	ldr	r3, [r3, #4]
 8016996:	4798      	blx	r3
 8016998:	b00b      	add	sp, #44	; 0x2c
 801699a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080169a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80169a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169a4:	b08a      	sub	sp, #40	; 0x28
 80169a6:	4698      	mov	r8, r3
 80169a8:	2300      	movs	r3, #0
 80169aa:	4606      	mov	r6, r0
 80169ac:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80169b0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80169b4:	2d0b      	cmp	r5, #11
 80169b6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80169ba:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80169be:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80169c2:	9304      	str	r3, [sp, #16]
 80169c4:	d137      	bne.n	8016a36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80169c6:	2380      	movs	r3, #128	; 0x80
 80169c8:	f88d 0020 	strb.w	r0, [sp, #32]
 80169cc:	4630      	mov	r0, r6
 80169ce:	9203      	str	r2, [sp, #12]
 80169d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80169d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80169d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80169dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80169e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80169e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80169e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80169ec:	f7ff ff5c 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80169f0:	2c0b      	cmp	r4, #11
 80169f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80169f6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80169fa:	bf94      	ite	ls
 80169fc:	4b19      	ldrls	r3, [pc, #100]	; (8016a64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80169fe:	2100      	movhi	r1, #0
 8016a00:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8016a04:	bf98      	it	ls
 8016a06:	5d19      	ldrbls	r1, [r3, r4]
 8016a08:	fb02 8307 	mla	r3, r2, r7, r8
 8016a0c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016a10:	10c9      	asrs	r1, r1, #3
 8016a12:	fb01 0003 	mla	r0, r1, r3, r0
 8016a16:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8016a1a:	a901      	add	r1, sp, #4
 8016a1c:	9005      	str	r0, [sp, #20]
 8016a1e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016a22:	2300      	movs	r3, #0
 8016a24:	6870      	ldr	r0, [r6, #4]
 8016a26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a2a:	6803      	ldr	r3, [r0, #0]
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	4798      	blx	r3
 8016a30:	b00a      	add	sp, #40	; 0x28
 8016a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a36:	2d02      	cmp	r5, #2
 8016a38:	d109      	bne.n	8016a4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8016a3a:	28ff      	cmp	r0, #255	; 0xff
 8016a3c:	d105      	bne.n	8016a4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8016a3e:	f1bc 0f00 	cmp.w	ip, #0
 8016a42:	bf14      	ite	ne
 8016a44:	2340      	movne	r3, #64	; 0x40
 8016a46:	2320      	moveq	r3, #32
 8016a48:	e7be      	b.n	80169c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016a4a:	2340      	movs	r3, #64	; 0x40
 8016a4c:	e7bc      	b.n	80169c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016a4e:	28ff      	cmp	r0, #255	; 0xff
 8016a50:	d105      	bne.n	8016a5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016a52:	f1bc 0f00 	cmp.w	ip, #0
 8016a56:	bf14      	ite	ne
 8016a58:	2304      	movne	r3, #4
 8016a5a:	2301      	moveq	r3, #1
 8016a5c:	e7b4      	b.n	80169c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016a5e:	2304      	movs	r3, #4
 8016a60:	e7b2      	b.n	80169c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016a62:	bf00      	nop
 8016a64:	0802fd78 	.word	0x0802fd78

08016a68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a6c:	b08b      	sub	sp, #44	; 0x2c
 8016a6e:	461d      	mov	r5, r3
 8016a70:	2400      	movs	r4, #0
 8016a72:	4688      	mov	r8, r1
 8016a74:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016a78:	4693      	mov	fp, r2
 8016a7a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8016a7e:	4607      	mov	r7, r0
 8016a80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016a84:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016a88:	9404      	str	r4, [sp, #16]
 8016a8a:	bf14      	ite	ne
 8016a8c:	2308      	movne	r3, #8
 8016a8e:	2302      	moveq	r3, #2
 8016a90:	fb05 b50a 	mla	r5, r5, sl, fp
 8016a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a98:	f7ff ff06 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a9c:	2e0b      	cmp	r6, #11
 8016a9e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016aa2:	a901      	add	r1, sp, #4
 8016aa4:	bf98      	it	ls
 8016aa6:	4b13      	ldrls	r3, [pc, #76]	; (8016af4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8016aa8:	f8ad a01e 	strh.w	sl, [sp, #30]
 8016aac:	bf98      	it	ls
 8016aae:	5d9c      	ldrbls	r4, [r3, r6]
 8016ab0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016ab4:	10e4      	asrs	r4, r4, #3
 8016ab6:	f8cd 8010 	str.w	r8, [sp, #16]
 8016aba:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016abe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016ac2:	fb04 0405 	mla	r4, r4, r5, r0
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016acc:	2300      	movs	r3, #0
 8016ace:	9405      	str	r4, [sp, #20]
 8016ad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ad4:	f88d 9020 	strb.w	r9, [sp, #32]
 8016ad8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8016adc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016ae0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8016ae4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8016ae8:	6803      	ldr	r3, [r0, #0]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	4798      	blx	r3
 8016aee:	b00b      	add	sp, #44	; 0x2c
 8016af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af4:	0802fd78 	.word	0x0802fd78

08016af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016afc:	461e      	mov	r6, r3
 8016afe:	4b0a      	ldr	r3, [pc, #40]	; (8016b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8016b00:	460f      	mov	r7, r1
 8016b02:	4690      	mov	r8, r2
 8016b04:	881d      	ldrh	r5, [r3, #0]
 8016b06:	f7f7 fd6d 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016b0a:	6803      	ldr	r3, [r0, #0]
 8016b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b0e:	4798      	blx	r3
 8016b10:	280b      	cmp	r0, #11
 8016b12:	bf96      	itet	ls
 8016b14:	4b05      	ldrls	r3, [pc, #20]	; (8016b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016b16:	2400      	movhi	r4, #0
 8016b18:	5c1c      	ldrbls	r4, [r3, r0]
 8016b1a:	fb08 7005 	mla	r0, r8, r5, r7
 8016b1e:	10e4      	asrs	r4, r4, #3
 8016b20:	fb04 6000 	mla	r0, r4, r0, r6
 8016b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b28:	2003c266 	.word	0x2003c266
 8016b2c:	0802fd78 	.word	0x0802fd78

08016b30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b32:	b08b      	sub	sp, #44	; 0x2c
 8016b34:	461f      	mov	r7, r3
 8016b36:	4604      	mov	r4, r0
 8016b38:	4616      	mov	r6, r2
 8016b3a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016b3e:	2500      	movs	r5, #0
 8016b40:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016b44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016b48:	9504      	str	r5, [sp, #16]
 8016b4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016b4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016b52:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016b56:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016b5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016b5e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016b62:	f88d 3020 	strb.w	r3, [sp, #32]
 8016b66:	f7ff fe9f 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016b6a:	463a      	mov	r2, r7
 8016b6c:	4631      	mov	r1, r6
 8016b6e:	4603      	mov	r3, r0
 8016b70:	4620      	mov	r0, r4
 8016b72:	f7ff ffc1 	bl	8016af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016b76:	4b0e      	ldr	r3, [pc, #56]	; (8016bb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016b78:	9005      	str	r0, [sp, #20]
 8016b7a:	881b      	ldrh	r3, [r3, #0]
 8016b7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016b80:	f7f7 fd30 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016b84:	6803      	ldr	r3, [r0, #0]
 8016b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b88:	4798      	blx	r3
 8016b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b8c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016b90:	a901      	add	r1, sp, #4
 8016b92:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016b96:	9304      	str	r3, [sp, #16]
 8016b98:	6860      	ldr	r0, [r4, #4]
 8016b9a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016b9e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016ba2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016ba6:	6803      	ldr	r3, [r0, #0]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	4798      	blx	r3
 8016bac:	b00b      	add	sp, #44	; 0x2c
 8016bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bb0:	2003c266 	.word	0x2003c266

08016bb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bb6:	b08d      	sub	sp, #52	; 0x34
 8016bb8:	2501      	movs	r5, #1
 8016bba:	4604      	mov	r4, r0
 8016bbc:	466b      	mov	r3, sp
 8016bbe:	9503      	str	r5, [sp, #12]
 8016bc0:	e883 0006 	stmia.w	r3, {r1, r2}
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	f8bd 6000 	ldrh.w	r6, [sp]
 8016bca:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016bce:	9306      	str	r3, [sp, #24]
 8016bd0:	6803      	ldr	r3, [r0, #0]
 8016bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bd4:	4798      	blx	r3
 8016bd6:	463a      	mov	r2, r7
 8016bd8:	4631      	mov	r1, r6
 8016bda:	4603      	mov	r3, r0
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f7ff ff8b 	bl	8016af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016be4:	9004      	str	r0, [sp, #16]
 8016be6:	9307      	str	r3, [sp, #28]
 8016be8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016bec:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016bf4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016bf8:	4b0e      	ldr	r3, [pc, #56]	; (8016c34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8016bfa:	881b      	ldrh	r3, [r3, #0]
 8016bfc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016c00:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016c04:	f7f7 fcee 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016c08:	6803      	ldr	r3, [r0, #0]
 8016c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c0c:	4798      	blx	r3
 8016c0e:	23ff      	movs	r3, #255	; 0xff
 8016c10:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016c14:	a903      	add	r1, sp, #12
 8016c16:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016c1a:	6860      	ldr	r0, [r4, #4]
 8016c1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016c20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016c24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016c28:	6803      	ldr	r3, [r0, #0]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	4798      	blx	r3
 8016c2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016c30:	b00d      	add	sp, #52	; 0x34
 8016c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c34:	2003c266 	.word	0x2003c266

08016c38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c3c:	b08c      	sub	sp, #48	; 0x30
 8016c3e:	461e      	mov	r6, r3
 8016c40:	2300      	movs	r3, #0
 8016c42:	4604      	mov	r4, r0
 8016c44:	466d      	mov	r5, sp
 8016c46:	9306      	str	r3, [sp, #24]
 8016c48:	6803      	ldr	r3, [r0, #0]
 8016c4a:	e885 0006 	stmia.w	r5, {r1, r2}
 8016c4e:	2501      	movs	r5, #1
 8016c50:	f8bd 7000 	ldrh.w	r7, [sp]
 8016c54:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016c58:	9503      	str	r5, [sp, #12]
 8016c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c5c:	4798      	blx	r3
 8016c5e:	4642      	mov	r2, r8
 8016c60:	4639      	mov	r1, r7
 8016c62:	4603      	mov	r3, r0
 8016c64:	4620      	mov	r0, r4
 8016c66:	f7ff ff47 	bl	8016af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016c6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016c6e:	9004      	str	r0, [sp, #16]
 8016c70:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016c74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016c78:	9607      	str	r6, [sp, #28]
 8016c7a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016c7e:	4b10      	ldr	r3, [pc, #64]	; (8016cc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016c80:	881b      	ldrh	r3, [r3, #0]
 8016c82:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c88:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016c8c:	f7f7 fcaa 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016c90:	6803      	ldr	r3, [r0, #0]
 8016c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c94:	4798      	blx	r3
 8016c96:	23ff      	movs	r3, #255	; 0xff
 8016c98:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016c9c:	a903      	add	r1, sp, #12
 8016c9e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016ca2:	6860      	ldr	r0, [r4, #4]
 8016ca4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016ca8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016cac:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016cb0:	6803      	ldr	r3, [r0, #0]
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	4798      	blx	r3
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	b00c      	add	sp, #48	; 0x30
 8016cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cbe:	bf00      	nop
 8016cc0:	2003c266 	.word	0x2003c266

08016cc4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc6:	b085      	sub	sp, #20
 8016cc8:	4605      	mov	r5, r0
 8016cca:	ac02      	add	r4, sp, #8
 8016ccc:	e884 0006 	stmia.w	r4, {r1, r2}
 8016cd0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016cd4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016cd8:	f7ff fde6 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016cdc:	4631      	mov	r1, r6
 8016cde:	4603      	mov	r3, r0
 8016ce0:	463a      	mov	r2, r7
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	f7ff ff08 	bl	8016af8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016ce8:	4a05      	ldr	r2, [pc, #20]	; (8016d00 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016cea:	682b      	ldr	r3, [r5, #0]
 8016cec:	8812      	ldrh	r2, [r2, #0]
 8016cee:	9200      	str	r2, [sp, #0]
 8016cf0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016cfa:	47b0      	blx	r6
 8016cfc:	b005      	add	sp, #20
 8016cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d00:	2003c266 	.word	0x2003c266

08016d04 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016d04:	b570      	push	{r4, r5, r6, lr}
 8016d06:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	b19b      	cbz	r3, 8016d36 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016d0e:	2002      	movs	r0, #2
 8016d10:	f7fb f9c6 	bl	80120a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016d14:	2300      	movs	r3, #0
 8016d16:	4620      	mov	r0, r4
 8016d18:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016d1c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8016d26:	f7ff fdbf 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	462b      	mov	r3, r5
 8016d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d34:	4718      	bx	r3
 8016d36:	bd70      	pop	{r4, r5, r6, pc}

08016d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016d38:	b538      	push	{r3, r4, r5, lr}
 8016d3a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8016d3e:	4604      	mov	r4, r0
 8016d40:	460d      	mov	r5, r1
 8016d42:	428b      	cmp	r3, r1
 8016d44:	d006      	beq.n	8016d54 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016d46:	6803      	ldr	r3, [r0, #0]
 8016d48:	b929      	cbnz	r1, 8016d56 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016d4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016d4e:	4798      	blx	r3
 8016d50:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016d54:	bd38      	pop	{r3, r4, r5, pc}
 8016d56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016d5a:	e7f8      	b.n	8016d4e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08016d5c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016d5c:	4b0d      	ldr	r3, [pc, #52]	; (8016d94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016d5e:	b510      	push	{r4, lr}
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	4604      	mov	r4, r0
 8016d64:	b95b      	cbnz	r3, 8016d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016d66:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016d6a:	2b02      	cmp	r3, #2
 8016d6c:	d007      	beq.n	8016d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016d6e:	6840      	ldr	r0, [r0, #4]
 8016d70:	f000 f926 	bl	8016fc0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016d74:	b118      	cbz	r0, 8016d7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016d76:	6862      	ldr	r2, [r4, #4]
 8016d78:	7a53      	ldrb	r3, [r2, #9]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d0fc      	beq.n	8016d78 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016d7e:	f7fc fc07 	bl	8013590 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016d82:	4620      	mov	r0, r4
 8016d84:	2100      	movs	r1, #0
 8016d86:	f7ff ffd7 	bl	8016d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7ff fd8c 	bl	80168a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016d90:	bd10      	pop	{r4, pc}
 8016d92:	bf00      	nop
 8016d94:	2003c26a 	.word	0x2003c26a

08016d98 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8016d98:	b570      	push	{r4, r5, r6, lr}
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	6803      	ldr	r3, [r0, #0]
 8016d9e:	b919      	cbnz	r1, 8016da8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8016da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da6:	4718      	bx	r3
 8016da8:	2200      	movs	r2, #0
 8016daa:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8016dae:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8016db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016db4:	4798      	blx	r3
 8016db6:	4605      	mov	r5, r0
 8016db8:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	2101      	movs	r1, #1
 8016dc0:	f7ff ffba 	bl	8016d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	bd70      	pop	{r4, r5, r6, pc}

08016dc8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016dc8:	4770      	bx	lr

08016dca <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016dca:	2000      	movs	r0, #0
 8016dcc:	4770      	bx	lr

08016dce <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016dce:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016dd2:	1a13      	subs	r3, r2, r0
 8016dd4:	4258      	negs	r0, r3
 8016dd6:	4158      	adcs	r0, r3
 8016dd8:	4770      	bx	lr

08016dda <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016dda:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016dde:	1a9b      	subs	r3, r3, r2
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	bfdc      	itt	le
 8016de4:	6882      	ldrle	r2, [r0, #8]
 8016de6:	189b      	addle	r3, r3, r2
 8016de8:	2b01      	cmp	r3, #1
 8016dea:	bfcc      	ite	gt
 8016dec:	2000      	movgt	r0, #0
 8016dee:	2001      	movle	r0, #1
 8016df0:	4770      	bx	lr

08016df2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016df2:	6902      	ldr	r2, [r0, #16]
 8016df4:	6843      	ldr	r3, [r0, #4]
 8016df6:	2024      	movs	r0, #36	; 0x24
 8016df8:	fb00 3002 	mla	r0, r0, r2, r3
 8016dfc:	4770      	bx	lr

08016dfe <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016dfe:	6803      	ldr	r3, [r0, #0]
 8016e00:	691b      	ldr	r3, [r3, #16]
 8016e02:	4718      	bx	r3

08016e04 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016e04:	2301      	movs	r3, #1
 8016e06:	b570      	push	{r4, r5, r6, lr}
 8016e08:	7203      	strb	r3, [r0, #8]
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	6840      	ldr	r0, [r0, #4]
 8016e0e:	6803      	ldr	r3, [r0, #0]
 8016e10:	699b      	ldr	r3, [r3, #24]
 8016e12:	4798      	blx	r3
 8016e14:	6803      	ldr	r3, [r0, #0]
 8016e16:	4605      	mov	r5, r0
 8016e18:	2b40      	cmp	r3, #64	; 0x40
 8016e1a:	d00c      	beq.n	8016e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016e1c:	d810      	bhi.n	8016e40 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	d01d      	beq.n	8016e5e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8016e22:	d804      	bhi.n	8016e2e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	d006      	beq.n	8016e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016e28:	2b02      	cmp	r3, #2
 8016e2a:	d02c      	beq.n	8016e86 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016e2c:	bd70      	pop	{r4, r5, r6, pc}
 8016e2e:	2b08      	cmp	r3, #8
 8016e30:	d01d      	beq.n	8016e6e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8016e32:	2b20      	cmp	r3, #32
 8016e34:	d1fa      	bne.n	8016e2c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8016e36:	6823      	ldr	r3, [r4, #0]
 8016e38:	4620      	mov	r0, r4
 8016e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e3c:	4798      	blx	r3
 8016e3e:	e013      	b.n	8016e68 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e44:	d0f7      	beq.n	8016e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016e46:	d804      	bhi.n	8016e52 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8016e48:	2b80      	cmp	r3, #128	; 0x80
 8016e4a:	d0f4      	beq.n	8016e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e50:	e7f0      	b.n	8016e34 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e56:	d0ee      	beq.n	8016e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016e5c:	e7e5      	b.n	8016e2a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016e5e:	6823      	ldr	r3, [r4, #0]
 8016e60:	7f01      	ldrb	r1, [r0, #28]
 8016e62:	4620      	mov	r0, r4
 8016e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e66:	4798      	blx	r3
 8016e68:	6823      	ldr	r3, [r4, #0]
 8016e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e6c:	e006      	b.n	8016e7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016e6e:	6823      	ldr	r3, [r4, #0]
 8016e70:	7f01      	ldrb	r1, [r0, #28]
 8016e72:	4620      	mov	r0, r4
 8016e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e76:	4798      	blx	r3
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4620      	mov	r0, r4
 8016e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e84:	4718      	bx	r3
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	4620      	mov	r0, r4
 8016e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e8c:	4798      	blx	r3
 8016e8e:	e7f3      	b.n	8016e78 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016e90 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016e90:	4770      	bx	lr

08016e92 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016e92:	4770      	bx	lr

08016e94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016e94:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016e98:	b510      	push	{r4, lr}
 8016e9a:	1ad2      	subs	r2, r2, r3
 8016e9c:	2a00      	cmp	r2, #0
 8016e9e:	bfdc      	itt	le
 8016ea0:	6884      	ldrle	r4, [r0, #8]
 8016ea2:	1912      	addle	r2, r2, r4
 8016ea4:	2a01      	cmp	r2, #1
 8016ea6:	dd16      	ble.n	8016ed6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016ea8:	6842      	ldr	r2, [r0, #4]
 8016eaa:	2424      	movs	r4, #36	; 0x24
 8016eac:	fb04 2303 	mla	r3, r4, r3, r2
 8016eb0:	f101 0220 	add.w	r2, r1, #32
 8016eb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8016eb8:	4291      	cmp	r1, r2
 8016eba:	f843 4b04 	str.w	r4, [r3], #4
 8016ebe:	d1f9      	bne.n	8016eb4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016ec0:	780a      	ldrb	r2, [r1, #0]
 8016ec2:	701a      	strb	r2, [r3, #0]
 8016ec4:	68c3      	ldr	r3, [r0, #12]
 8016ec6:	6882      	ldr	r2, [r0, #8]
 8016ec8:	f3bf 8f5b 	dmb	ish
 8016ecc:	3301      	adds	r3, #1
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	bfd8      	it	le
 8016ed2:	1a9b      	suble	r3, r3, r2
 8016ed4:	60c3      	str	r3, [r0, #12]
 8016ed6:	bd10      	pop	{r4, pc}

08016ed8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016ed8:	6903      	ldr	r3, [r0, #16]
 8016eda:	6882      	ldr	r2, [r0, #8]
 8016edc:	f3bf 8f5b 	dmb	ish
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	bfd8      	it	le
 8016ee6:	1a9b      	suble	r3, r3, r2
 8016ee8:	6103      	str	r3, [r0, #16]
 8016eea:	4770      	bx	lr

08016eec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016eec:	b570      	push	{r4, r5, r6, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	460e      	mov	r6, r1
 8016ef2:	6860      	ldr	r0, [r4, #4]
 8016ef4:	6803      	ldr	r3, [r0, #0]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	4798      	blx	r3
 8016efa:	2800      	cmp	r0, #0
 8016efc:	d1f9      	bne.n	8016ef2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016efe:	4d0d      	ldr	r5, [pc, #52]	; (8016f34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016f00:	6828      	ldr	r0, [r5, #0]
 8016f02:	6803      	ldr	r3, [r0, #0]
 8016f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016f06:	4798      	blx	r3
 8016f08:	f7fc fb5c 	bl	80135c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016f0c:	6828      	ldr	r0, [r5, #0]
 8016f0e:	2101      	movs	r1, #1
 8016f10:	f7ff ff12 	bl	8016d38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016f14:	6860      	ldr	r0, [r4, #4]
 8016f16:	4631      	mov	r1, r6
 8016f18:	6803      	ldr	r3, [r0, #0]
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	4798      	blx	r3
 8016f1e:	6823      	ldr	r3, [r4, #0]
 8016f20:	4620      	mov	r0, r4
 8016f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f24:	4798      	blx	r3
 8016f26:	6828      	ldr	r0, [r5, #0]
 8016f28:	6803      	ldr	r3, [r0, #0]
 8016f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f30:	4718      	bx	r3
 8016f32:	bf00      	nop
 8016f34:	2003c26c 	.word	0x2003c26c

08016f38 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016f38:	b508      	push	{r3, lr}
 8016f3a:	f7fc fb29 	bl	8013590 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016f42:	f7fc bb33 	b.w	80135ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016f46 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016f46:	b510      	push	{r4, lr}
 8016f48:	4604      	mov	r4, r0
 8016f4a:	6840      	ldr	r0, [r0, #4]
 8016f4c:	6803      	ldr	r3, [r0, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	4798      	blx	r3
 8016f52:	b948      	cbnz	r0, 8016f68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016f54:	7a63      	ldrb	r3, [r4, #9]
 8016f56:	b13b      	cbz	r3, 8016f68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016f58:	7a23      	ldrb	r3, [r4, #8]
 8016f5a:	b92b      	cbnz	r3, 8016f68 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016f5c:	6823      	ldr	r3, [r4, #0]
 8016f5e:	4620      	mov	r0, r4
 8016f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f66:	4718      	bx	r3
 8016f68:	bd10      	pop	{r4, pc}

08016f6a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016f6a:	b570      	push	{r4, r5, r6, lr}
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	6840      	ldr	r0, [r0, #4]
 8016f70:	6803      	ldr	r3, [r0, #0]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	4798      	blx	r3
 8016f76:	4605      	mov	r5, r0
 8016f78:	b930      	cbnz	r0, 8016f88 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016f7a:	7a23      	ldrb	r3, [r4, #8]
 8016f7c:	b123      	cbz	r3, 8016f88 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016f7e:	6860      	ldr	r0, [r4, #4]
 8016f80:	6803      	ldr	r3, [r0, #0]
 8016f82:	695b      	ldr	r3, [r3, #20]
 8016f84:	4798      	blx	r3
 8016f86:	7225      	strb	r5, [r4, #8]
 8016f88:	6860      	ldr	r0, [r4, #4]
 8016f8a:	6803      	ldr	r3, [r0, #0]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	4798      	blx	r3
 8016f90:	b928      	cbnz	r0, 8016f9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016f92:	6823      	ldr	r3, [r4, #0]
 8016f94:	4620      	mov	r0, r4
 8016f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f9c:	4718      	bx	r3
 8016f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fa2:	f7fc bb1b 	b.w	80135dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08016fa8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016fa8:	b510      	push	{r4, lr}
 8016faa:	6082      	str	r2, [r0, #8]
 8016fac:	2200      	movs	r2, #0
 8016fae:	4c03      	ldr	r4, [pc, #12]	; (8016fbc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016fb0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016fb4:	e9c0 4100 	strd	r4, r1, [r0]
 8016fb8:	bd10      	pop	{r4, pc}
 8016fba:	bf00      	nop
 8016fbc:	0802feb4 	.word	0x0802feb4

08016fc0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016fc0:	6840      	ldr	r0, [r0, #4]
 8016fc2:	6803      	ldr	r3, [r0, #0]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	4718      	bx	r3

08016fc8 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 8016fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016fd0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8016fd4:	68c1      	ldr	r1, [r0, #12]
 8016fd6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8016fda:	2fff      	cmp	r7, #255	; 0xff
 8016fdc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8016fe0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8016fe4:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8016fe8:	d105      	bne.n	8016ff6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8016fea:	f842 1b04 	str.w	r1, [r2], #4
 8016fee:	4594      	cmp	ip, r2
 8016ff0:	d8fb      	bhi.n	8016fea <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 8016ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ff6:	6816      	ldr	r6, [r2, #0]
 8016ff8:	ea5f 6916 	movs.w	r9, r6, lsr #24
 8016ffc:	d104      	bne.n	8017008 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 8016ffe:	6011      	str	r1, [r2, #0]
 8017000:	3204      	adds	r2, #4
 8017002:	4594      	cmp	ip, r2
 8017004:	d8f7      	bhi.n	8016ff6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8017006:	e7f4      	b.n	8016ff2 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 8017008:	2f00      	cmp	r7, #0
 801700a:	d0f9      	beq.n	8017000 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 801700c:	fb07 f809 	mul.w	r8, r7, r9
 8017010:	b2f5      	uxtb	r5, r6
 8017012:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8017016:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801701a:	f108 0301 	add.w	r3, r8, #1
 801701e:	fb09 fa05 	mul.w	sl, r9, r5
 8017022:	eb03 2328 	add.w	r3, r3, r8, asr #8
 8017026:	ea4f 2823 	mov.w	r8, r3, asr #8
 801702a:	eb07 0309 	add.w	r3, r7, r9
 801702e:	eba3 0308 	sub.w	r3, r3, r8
 8017032:	fa5f fe83 	uxtb.w	lr, r3
 8017036:	7c83      	ldrb	r3, [r0, #18]
 8017038:	fb03 a307 	mla	r3, r3, r7, sl
 801703c:	fb04 fa09 	mul.w	sl, r4, r9
 8017040:	fb08 3515 	mls	r5, r8, r5, r3
 8017044:	7c43      	ldrb	r3, [r0, #17]
 8017046:	fb03 a307 	mla	r3, r3, r7, sl
 801704a:	fb95 f5fe 	sdiv	r5, r5, lr
 801704e:	fb08 3414 	mls	r4, r8, r4, r3
 8017052:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 8017056:	fb06 f309 	mul.w	r3, r6, r9
 801705a:	fb94 f4fe 	sdiv	r4, r4, lr
 801705e:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8017062:	7c05      	ldrb	r5, [r0, #16]
 8017064:	fb05 3307 	mla	r3, r5, r7, r3
 8017068:	fb08 3316 	mls	r3, r8, r6, r3
 801706c:	fb93 f3fe 	sdiv	r3, r3, lr
 8017070:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8017074:	6013      	str	r3, [r2, #0]
 8017076:	e7c3      	b.n	8017000 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

08017078 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8017078:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801707c:	4770      	bx	lr

0801707e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801707e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8017082:	4770      	bx	lr

08017084 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8017084:	b510      	push	{r4, lr}
 8017086:	2200      	movs	r2, #0
 8017088:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801708c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8017090:	8002      	strh	r2, [r0, #0]
 8017092:	8042      	strh	r2, [r0, #2]
 8017094:	8084      	strh	r4, [r0, #4]
 8017096:	80c1      	strh	r1, [r0, #6]
 8017098:	bd10      	pop	{r4, pc}

0801709a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801709a:	2200      	movs	r2, #0
 801709c:	8002      	strh	r2, [r0, #0]
 801709e:	8042      	strh	r2, [r0, #2]
 80170a0:	8082      	strh	r2, [r0, #4]
 80170a2:	80c2      	strh	r2, [r0, #6]
 80170a4:	4770      	bx	lr
	...

080170a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80170a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80170aa:	6803      	ldr	r3, [r0, #0]
 80170ac:	460d      	mov	r5, r1
 80170ae:	4604      	mov	r4, r0
 80170b0:	4601      	mov	r1, r0
 80170b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80170b4:	a802      	add	r0, sp, #8
 80170b6:	4798      	blx	r3
 80170b8:	6828      	ldr	r0, [r5, #0]
 80170ba:	6869      	ldr	r1, [r5, #4]
 80170bc:	466b      	mov	r3, sp
 80170be:	c303      	stmia	r3!, {r0, r1}
 80170c0:	4668      	mov	r0, sp
 80170c2:	4619      	mov	r1, r3
 80170c4:	f7fe ff6e 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 80170c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80170ca:	b1a8      	cbz	r0, 80170f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80170cc:	6803      	ldr	r3, [r0, #0]
 80170ce:	1d21      	adds	r1, r4, #4
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	4798      	blx	r3
 80170d4:	b180      	cbz	r0, 80170f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80170d6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	dd0c      	ble.n	80170f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80170de:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80170e2:	2d00      	cmp	r5, #0
 80170e4:	dd08      	ble.n	80170f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80170e6:	4a2d      	ldr	r2, [pc, #180]	; (801719c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 80170e8:	7812      	ldrb	r2, [r2, #0]
 80170ea:	b13a      	cbz	r2, 80170fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 80170ec:	2a01      	cmp	r2, #1
 80170ee:	d02d      	beq.n	801714c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 80170f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80170f2:	6803      	ldr	r3, [r0, #0]
 80170f4:	691b      	ldr	r3, [r3, #16]
 80170f6:	4798      	blx	r3
 80170f8:	b004      	add	sp, #16
 80170fa:	bd70      	pop	{r4, r5, r6, pc}
 80170fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017100:	441d      	add	r5, r3
 8017102:	b2ad      	uxth	r5, r5
 8017104:	b22e      	sxth	r6, r5
 8017106:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801710a:	42b3      	cmp	r3, r6
 801710c:	daf0      	bge.n	80170f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	4669      	mov	r1, sp
 8017112:	4620      	mov	r0, r4
 8017114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017116:	4798      	blx	r3
 8017118:	b940      	cbnz	r0, 801712c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801711a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801711e:	2b01      	cmp	r3, #1
 8017120:	d004      	beq.n	801712c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8017122:	3301      	adds	r3, #1
 8017124:	105b      	asrs	r3, r3, #1
 8017126:	f8ad 3006 	strh.w	r3, [sp, #6]
 801712a:	e7f0      	b.n	801710e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801712c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017130:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017134:	4413      	add	r3, r2
 8017136:	b29b      	uxth	r3, r3
 8017138:	441a      	add	r2, r3
 801713a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801713e:	b212      	sxth	r2, r2
 8017140:	4296      	cmp	r6, r2
 8017142:	dae0      	bge.n	8017106 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017144:	1aeb      	subs	r3, r5, r3
 8017146:	f8ad 3006 	strh.w	r3, [sp, #6]
 801714a:	e7dc      	b.n	8017106 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801714c:	f8bd 5000 	ldrh.w	r5, [sp]
 8017150:	441d      	add	r5, r3
 8017152:	b2ad      	uxth	r5, r5
 8017154:	b22e      	sxth	r6, r5
 8017156:	f9bd 3000 	ldrsh.w	r3, [sp]
 801715a:	42b3      	cmp	r3, r6
 801715c:	dac8      	bge.n	80170f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	4669      	mov	r1, sp
 8017162:	4620      	mov	r0, r4
 8017164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017166:	4798      	blx	r3
 8017168:	b940      	cbnz	r0, 801717c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801716a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801716e:	2b01      	cmp	r3, #1
 8017170:	d004      	beq.n	801717c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8017172:	3301      	adds	r3, #1
 8017174:	105b      	asrs	r3, r3, #1
 8017176:	f8ad 3004 	strh.w	r3, [sp, #4]
 801717a:	e7f0      	b.n	801715e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801717c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017180:	f8bd 3000 	ldrh.w	r3, [sp]
 8017184:	4413      	add	r3, r2
 8017186:	b29b      	uxth	r3, r3
 8017188:	441a      	add	r2, r3
 801718a:	f8ad 3000 	strh.w	r3, [sp]
 801718e:	b212      	sxth	r2, r2
 8017190:	4296      	cmp	r6, r2
 8017192:	dae0      	bge.n	8017156 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8017194:	1aeb      	subs	r3, r5, r3
 8017196:	f8ad 3004 	strh.w	r3, [sp, #4]
 801719a:	e7dc      	b.n	8017156 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801719c:	2003c264 	.word	0x2003c264

080171a0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80171a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171a2:	6803      	ldr	r3, [r0, #0]
 80171a4:	4604      	mov	r4, r0
 80171a6:	4601      	mov	r1, r0
 80171a8:	4668      	mov	r0, sp
 80171aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80171ac:	4798      	blx	r3
 80171ae:	2100      	movs	r1, #0
 80171b0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80171b4:	4668      	mov	r0, sp
 80171b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80171ba:	9102      	str	r1, [sp, #8]
 80171bc:	a902      	add	r1, sp, #8
 80171be:	f8ad 200c 	strh.w	r2, [sp, #12]
 80171c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80171c6:	f7fe feed 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 80171ca:	6823      	ldr	r3, [r4, #0]
 80171cc:	4669      	mov	r1, sp
 80171ce:	4620      	mov	r0, r4
 80171d0:	691b      	ldr	r3, [r3, #16]
 80171d2:	4798      	blx	r3
 80171d4:	b004      	add	sp, #16
 80171d6:	bd10      	pop	{r4, pc}

080171d8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80171d8:	2101      	movs	r1, #1
 80171da:	2200      	movs	r2, #0
 80171dc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80171e0:	490a      	ldr	r1, [pc, #40]	; (801720c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80171e2:	8082      	strh	r2, [r0, #4]
 80171e4:	6001      	str	r1, [r0, #0]
 80171e6:	21ff      	movs	r1, #255	; 0xff
 80171e8:	80c2      	strh	r2, [r0, #6]
 80171ea:	8102      	strh	r2, [r0, #8]
 80171ec:	8142      	strh	r2, [r0, #10]
 80171ee:	8182      	strh	r2, [r0, #12]
 80171f0:	81c2      	strh	r2, [r0, #14]
 80171f2:	8202      	strh	r2, [r0, #16]
 80171f4:	8242      	strh	r2, [r0, #18]
 80171f6:	61c2      	str	r2, [r0, #28]
 80171f8:	8402      	strh	r2, [r0, #32]
 80171fa:	8442      	strh	r2, [r0, #34]	; 0x22
 80171fc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017200:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8017204:	6282      	str	r2, [r0, #40]	; 0x28
 8017206:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801720a:	4770      	bx	lr
 801720c:	0802ff10 	.word	0x0802ff10

08017210 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8017210:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8017214:	4602      	mov	r2, r0
 8017216:	cb03      	ldmia	r3!, {r0, r1}
 8017218:	6010      	str	r0, [r2, #0]
 801721a:	4610      	mov	r0, r2
 801721c:	6051      	str	r1, [r2, #4]
 801721e:	4770      	bx	lr

08017220 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017220:	b507      	push	{r0, r1, r2, lr}
 8017222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017226:	ab01      	add	r3, sp, #4
 8017228:	6809      	ldr	r1, [r1, #0]
 801722a:	6800      	ldr	r0, [r0, #0]
 801722c:	f004 fd5b 	bl	801bce6 <_ZN8touchgfx6muldivElllRl>
 8017230:	b003      	add	sp, #12
 8017232:	f85d fb04 	ldr.w	pc, [sp], #4

08017236 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8017236:	6800      	ldr	r0, [r0, #0]
 8017238:	2800      	cmp	r0, #0
 801723a:	bfb9      	ittee	lt
 801723c:	2320      	movlt	r3, #32
 801723e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8017242:	301f      	addge	r0, #31
 8017244:	1140      	asrge	r0, r0, #5
 8017246:	4770      	bx	lr

08017248 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8017248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801724c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8017250:	b089      	sub	sp, #36	; 0x24
 8017252:	4604      	mov	r4, r0
 8017254:	b353      	cbz	r3, 80172ac <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	4601      	mov	r1, r0
 801725a:	a802      	add	r0, sp, #8
 801725c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801725e:	4798      	blx	r3
 8017260:	2220      	movs	r2, #32
 8017262:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8017266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801726a:	f8d4 b000 	ldr.w	fp, [r4]
 801726e:	fb9a f0f2 	sdiv	r0, sl, r2
 8017272:	fb91 f5f2 	sdiv	r5, r1, r2
 8017276:	fb93 f6f2 	sdiv	r6, r3, r2
 801727a:	1b40      	subs	r0, r0, r5
 801727c:	0076      	lsls	r6, r6, #1
 801727e:	2800      	cmp	r0, #0
 8017280:	bfb8      	it	lt
 8017282:	4240      	neglt	r0, r0
 8017284:	4286      	cmp	r6, r0
 8017286:	dc0c      	bgt.n	80172a2 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8017288:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801728a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801728e:	fb95 f0f2 	sdiv	r0, r5, r2
 8017292:	fb98 f7f2 	sdiv	r7, r8, r2
 8017296:	1bc0      	subs	r0, r0, r7
 8017298:	2800      	cmp	r0, #0
 801729a:	bfb8      	it	lt
 801729c:	4240      	neglt	r0, r0
 801729e:	4286      	cmp	r6, r0
 80172a0:	dd07      	ble.n	80172b2 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 80172a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80172a6:	a902      	add	r1, sp, #8
 80172a8:	4620      	mov	r0, r4
 80172aa:	4798      	blx	r3
 80172ac:	b009      	add	sp, #36	; 0x24
 80172ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b2:	eb01 060a 	add.w	r6, r1, sl
 80172b6:	2002      	movs	r0, #2
 80172b8:	eb08 0705 	add.w	r7, r8, r5
 80172bc:	3301      	adds	r3, #1
 80172be:	f10d 0920 	add.w	r9, sp, #32
 80172c2:	9101      	str	r1, [sp, #4]
 80172c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80172c8:	fb96 f6f0 	sdiv	r6, r6, r0
 80172cc:	fb97 f7f0 	sdiv	r7, r7, r0
 80172d0:	4103      	asrs	r3, r0
 80172d2:	b236      	sxth	r6, r6
 80172d4:	b23f      	sxth	r7, r7
 80172d6:	f849 3d08 	str.w	r3, [r9, #-8]!
 80172da:	4648      	mov	r0, r9
 80172dc:	fb96 f6f2 	sdiv	r6, r6, r2
 80172e0:	fb97 f7f2 	sdiv	r7, r7, r2
 80172e4:	f7ff ffa7 	bl	8017236 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80172e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80172ec:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80172f0:	fa1f fe87 	uxth.w	lr, r7
 80172f4:	9901      	ldr	r1, [sp, #4]
 80172f6:	fa1f fc86 	uxth.w	ip, r6
 80172fa:	4293      	cmp	r3, r2
 80172fc:	b280      	uxth	r0, r0
 80172fe:	eba1 0a0a 	sub.w	sl, r1, sl
 8017302:	da54      	bge.n	80173ae <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8017304:	ebac 0100 	sub.w	r1, ip, r0
 8017308:	f1ba 0f00 	cmp.w	sl, #0
 801730c:	4460      	add	r0, ip
 801730e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8017312:	b289      	uxth	r1, r1
 8017314:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8017318:	b280      	uxth	r0, r0
 801731a:	b20e      	sxth	r6, r1
 801731c:	da29      	bge.n	8017372 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801731e:	eba8 0505 	sub.w	r5, r8, r5
 8017322:	2d00      	cmp	r5, #0
 8017324:	da2a      	bge.n	801737c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8017326:	fa1f f88a 	uxth.w	r8, sl
 801732a:	f8ad a010 	strh.w	sl, [sp, #16]
 801732e:	fa1f f58c 	uxth.w	r5, ip
 8017332:	f8ad c012 	strh.w	ip, [sp, #18]
 8017336:	eba0 0008 	sub.w	r0, r0, r8
 801733a:	4443      	add	r3, r8
 801733c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017340:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017344:	1a59      	subs	r1, r3, r1
 8017346:	ebae 0005 	sub.w	r0, lr, r5
 801734a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801734e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017352:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017356:	442a      	add	r2, r5
 8017358:	eba2 0e0e 	sub.w	lr, r2, lr
 801735c:	f8ad e01e 	strh.w	lr, [sp, #30]
 8017360:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017364:	a904      	add	r1, sp, #16
 8017366:	4620      	mov	r0, r4
 8017368:	4798      	blx	r3
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	4649      	mov	r1, r9
 801736e:	691b      	ldr	r3, [r3, #16]
 8017370:	e79a      	b.n	80172a8 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8017372:	d003      	beq.n	801737c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8017374:	eba8 0505 	sub.w	r5, r8, r5
 8017378:	2d00      	cmp	r5, #0
 801737a:	dcd4      	bgt.n	8017326 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801737c:	fa1f f88a 	uxth.w	r8, sl
 8017380:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017384:	fa1f f58c 	uxth.w	r5, ip
 8017388:	f8ad c012 	strh.w	ip, [sp, #18]
 801738c:	4443      	add	r3, r8
 801738e:	eba0 0008 	sub.w	r0, r0, r8
 8017392:	f8ad a018 	strh.w	sl, [sp, #24]
 8017396:	1a59      	subs	r1, r3, r1
 8017398:	ebae 0305 	sub.w	r3, lr, r5
 801739c:	f8ad 701a 	strh.w	r7, [sp, #26]
 80173a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80173a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173a8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80173ac:	e7d3      	b.n	8017356 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 80173ae:	ebae 0100 	sub.w	r1, lr, r0
 80173b2:	f1ba 0f00 	cmp.w	sl, #0
 80173b6:	4470      	add	r0, lr
 80173b8:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80173bc:	b289      	uxth	r1, r1
 80173be:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 80173c2:	b280      	uxth	r0, r0
 80173c4:	b20f      	sxth	r7, r1
 80173c6:	da20      	bge.n	801740a <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 80173c8:	eba8 0505 	sub.w	r5, r8, r5
 80173cc:	2d00      	cmp	r5, #0
 80173ce:	da21      	bge.n	8017414 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80173d0:	fa1f f88e 	uxth.w	r8, lr
 80173d4:	f8ad e010 	strh.w	lr, [sp, #16]
 80173d8:	fa1f f58a 	uxth.w	r5, sl
 80173dc:	f8ad a012 	strh.w	sl, [sp, #18]
 80173e0:	4443      	add	r3, r8
 80173e2:	ebac 0e08 	sub.w	lr, ip, r8
 80173e6:	442a      	add	r2, r5
 80173e8:	1b40      	subs	r0, r0, r5
 80173ea:	eba3 0c0c 	sub.w	ip, r3, ip
 80173ee:	f8ad e014 	strh.w	lr, [sp, #20]
 80173f2:	1a51      	subs	r1, r2, r1
 80173f4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80173f8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80173fc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017400:	f8ad c01c 	strh.w	ip, [sp, #28]
 8017404:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017408:	e7aa      	b.n	8017360 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801740a:	d003      	beq.n	8017414 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801740c:	eba8 0505 	sub.w	r5, r8, r5
 8017410:	2d00      	cmp	r5, #0
 8017412:	dcdd      	bgt.n	80173d0 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8017414:	fa1f f58e 	uxth.w	r5, lr
 8017418:	f8ad 7012 	strh.w	r7, [sp, #18]
 801741c:	fa1f f88a 	uxth.w	r8, sl
 8017420:	f8ad e010 	strh.w	lr, [sp, #16]
 8017424:	442b      	add	r3, r5
 8017426:	ebac 0705 	sub.w	r7, ip, r5
 801742a:	4442      	add	r2, r8
 801742c:	eba0 0008 	sub.w	r0, r0, r8
 8017430:	eba3 0c0c 	sub.w	ip, r3, ip
 8017434:	f8ad 7014 	strh.w	r7, [sp, #20]
 8017438:	1a51      	subs	r1, r2, r1
 801743a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801743e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8017442:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017446:	f8ad c01c 	strh.w	ip, [sp, #28]
 801744a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801744e:	e787      	b.n	8017360 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08017450 <_ZN8touchgfx7CWRUtil4sineEi>:
 8017450:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017454:	fb90 f2f3 	sdiv	r2, r0, r3
 8017458:	fb02 0013 	mls	r0, r2, r3, r0
 801745c:	2800      	cmp	r0, #0
 801745e:	bfb8      	it	lt
 8017460:	18c0      	addlt	r0, r0, r3
 8017462:	4b0a      	ldr	r3, [pc, #40]	; (801748c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8017464:	285a      	cmp	r0, #90	; 0x5a
 8017466:	dc02      	bgt.n	801746e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8017468:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801746c:	4770      	bx	lr
 801746e:	28b4      	cmp	r0, #180	; 0xb4
 8017470:	dc02      	bgt.n	8017478 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8017472:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017476:	e7f7      	b.n	8017468 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8017478:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801747c:	bfd4      	ite	le
 801747e:	38b4      	suble	r0, #180	; 0xb4
 8017480:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017484:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017488:	4240      	negs	r0, r0
 801748a:	4770      	bx	lr
 801748c:	0802ffec 	.word	0x0802ffec

08017490 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8017490:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8017494:	f04f 0300 	mov.w	r3, #0
 8017498:	bf2c      	ite	cs
 801749a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801749e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80174a2:	1899      	adds	r1, r3, r2
 80174a4:	4288      	cmp	r0, r1
 80174a6:	bf24      	itt	cs
 80174a8:	1853      	addcs	r3, r2, r1
 80174aa:	1a40      	subcs	r0, r0, r1
 80174ac:	0892      	lsrs	r2, r2, #2
 80174ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80174b2:	d1f6      	bne.n	80174a2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80174b4:	4618      	mov	r0, r3
 80174b6:	4770      	bx	lr

080174b8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80174b8:	b510      	push	{r4, lr}
 80174ba:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80174be:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80174c2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80174c6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80174ca:	139b      	asrs	r3, r3, #14
 80174cc:	13a4      	asrs	r4, r4, #14
 80174ce:	429c      	cmp	r4, r3
 80174d0:	bfb8      	it	lt
 80174d2:	461c      	movlt	r4, r3
 80174d4:	2c01      	cmp	r4, #1
 80174d6:	dd07      	ble.n	80174e8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80174d8:	fb91 f1f4 	sdiv	r1, r1, r4
 80174dc:	fb90 f0f4 	sdiv	r0, r0, r4
 80174e0:	f7ff ffea 	bl	80174b8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80174e4:	4360      	muls	r0, r4
 80174e6:	bd10      	pop	{r4, pc}
 80174e8:	4340      	muls	r0, r0
 80174ea:	fb01 0001 	mla	r0, r1, r1, r0
 80174ee:	f7ff ffcf 	bl	8017490 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80174f2:	e7f8      	b.n	80174e6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080174f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80174f4:	2800      	cmp	r0, #0
 80174f6:	b508      	push	{r3, lr}
 80174f8:	da05      	bge.n	8017506 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80174fa:	4240      	negs	r0, r0
 80174fc:	f7ff fffa 	bl	80174f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017500:	4240      	negs	r0, r0
 8017502:	b240      	sxtb	r0, r0
 8017504:	bd08      	pop	{r3, pc}
 8017506:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801750a:	dc11      	bgt.n	8017530 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801750c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8017510:	dd09      	ble.n	8017526 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8017512:	4340      	muls	r0, r0
 8017514:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8017518:	f7ff ffba 	bl	8017490 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801751c:	f7ff ffea 	bl	80174f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017520:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017524:	e7ed      	b.n	8017502 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8017526:	3003      	adds	r0, #3
 8017528:	4b02      	ldr	r3, [pc, #8]	; (8017534 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801752a:	10c0      	asrs	r0, r0, #3
 801752c:	5618      	ldrsb	r0, [r3, r0]
 801752e:	e7e9      	b.n	8017504 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017530:	2000      	movs	r0, #0
 8017532:	e7e7      	b.n	8017504 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017534:	0802ff90 	.word	0x0802ff90

08017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017538:	4281      	cmp	r1, r0
 801753a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801753c:	460c      	mov	r4, r1
 801753e:	4615      	mov	r5, r2
 8017540:	dd07      	ble.n	8017552 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8017542:	4601      	mov	r1, r0
 8017544:	4620      	mov	r0, r4
 8017546:	f7ff fff7 	bl	8017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801754a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801754e:	b003      	add	sp, #12
 8017550:	bd30      	pop	{r4, r5, pc}
 8017552:	f7ff ffb1 	bl	80174b8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017556:	6028      	str	r0, [r5, #0]
 8017558:	2800      	cmp	r0, #0
 801755a:	d0f8      	beq.n	801754e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 801755c:	4602      	mov	r2, r0
 801755e:	ab01      	add	r3, sp, #4
 8017560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017564:	4620      	mov	r0, r4
 8017566:	f004 fbbe 	bl	801bce6 <_ZN8touchgfx6muldivElllRl>
 801756a:	f7ff ffc3 	bl	80174f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801756e:	e7ee      	b.n	801754e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08017570 <_ZN8touchgfx4LineC1Ev>:
 8017570:	b510      	push	{r4, lr}
 8017572:	4604      	mov	r4, r0
 8017574:	f7ff fe30 	bl	80171d8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017578:	4b0c      	ldr	r3, [pc, #48]	; (80175ac <_ZN8touchgfx4LineC1Ev+0x3c>)
 801757a:	2220      	movs	r2, #32
 801757c:	4620      	mov	r0, r4
 801757e:	6023      	str	r3, [r4, #0]
 8017580:	2300      	movs	r3, #0
 8017582:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017584:	2212      	movs	r2, #18
 8017586:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801758a:	66e2      	str	r2, [r4, #108]	; 0x6c
 801758c:	60a3      	str	r3, [r4, #8]
 801758e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8017592:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8017596:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 801759a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801759e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80175a2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80175a6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80175aa:	bd10      	pop	{r4, pc}
 80175ac:	080300ac 	.word	0x080300ac

080175b0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80175b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80175b4:	6b47      	ldr	r7, [r0, #52]	; 0x34
 80175b6:	4604      	mov	r4, r0
 80175b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80175ba:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80175bc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80175be:	1aff      	subs	r7, r7, r3
 80175c0:	eba5 0502 	sub.w	r5, r5, r2
 80175c4:	d142      	bne.n	801764c <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 80175c6:	b955      	cbnz	r5, 80175de <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 80175c8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 80175cc:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 80175d0:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 80175d4:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 80175d8:	b002      	add	sp, #8
 80175da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175de:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 80175e2:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 80175e6:	4629      	mov	r1, r5
 80175e8:	2502      	movs	r5, #2
 80175ea:	4642      	mov	r2, r8
 80175ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80175ee:	f004 fb99 	bl	801bd24 <_ZN8touchgfx6muldivElll>
 80175f2:	4642      	mov	r2, r8
 80175f4:	4639      	mov	r1, r7
 80175f6:	fb90 f6f5 	sdiv	r6, r0, r5
 80175fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80175fc:	f004 fb92 	bl	801bd24 <_ZN8touchgfx6muldivElll>
 8017600:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8017604:	fb90 f5f5 	sdiv	r5, r0, r5
 8017608:	f1b9 0f00 	cmp.w	r9, #0
 801760c:	d067      	beq.n	80176de <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 801760e:	f1b9 0f02 	cmp.w	r9, #2
 8017612:	d878      	bhi.n	8017706 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8017614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017616:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8017618:	1b93      	subs	r3, r2, r6
 801761a:	4432      	add	r2, r6
 801761c:	1b5b      	subs	r3, r3, r5
 801761e:	1b52      	subs	r2, r2, r5
 8017620:	6463      	str	r3, [r4, #68]	; 0x44
 8017622:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017624:	6522      	str	r2, [r4, #80]	; 0x50
 8017626:	18e9      	adds	r1, r5, r3
 8017628:	1b5b      	subs	r3, r3, r5
 801762a:	1b89      	subs	r1, r1, r6
 801762c:	1b9b      	subs	r3, r3, r6
 801762e:	6561      	str	r1, [r4, #84]	; 0x54
 8017630:	1b81      	subs	r1, r0, r6
 8017632:	4430      	add	r0, r6
 8017634:	4429      	add	r1, r5
 8017636:	4428      	add	r0, r5
 8017638:	64a1      	str	r1, [r4, #72]	; 0x48
 801763a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801763c:	64e0      	str	r0, [r4, #76]	; 0x4c
 801763e:	186f      	adds	r7, r5, r1
 8017640:	1b49      	subs	r1, r1, r5
 8017642:	4437      	add	r7, r6
 8017644:	4431      	add	r1, r6
 8017646:	65a7      	str	r7, [r4, #88]	; 0x58
 8017648:	65e1      	str	r1, [r4, #92]	; 0x5c
 801764a:	e05b      	b.n	8017704 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 801764c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8017650:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8017654:	2d00      	cmp	r5, #0
 8017656:	d0c6      	beq.n	80175e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8017658:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801765c:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8017660:	fb93 f2f8 	sdiv	r2, r3, r8
 8017664:	fb08 3312 	mls	r3, r8, r2, r3
 8017668:	b353      	cbz	r3, 80176c0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 801766a:	fb98 f2f3 	sdiv	r2, r8, r3
 801766e:	fb03 8812 	mls	r8, r3, r2, r8
 8017672:	f1b8 0f00 	cmp.w	r8, #0
 8017676:	d1f3      	bne.n	8017660 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8017678:	2b01      	cmp	r3, #1
 801767a:	f24b 5104 	movw	r1, #46340	; 0xb504
 801767e:	bf1c      	itt	ne
 8017680:	fb97 f7f3 	sdivne	r7, r7, r3
 8017684:	fb95 f5f3 	sdivne	r5, r5, r3
 8017688:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 801768c:	4608      	mov	r0, r1
 801768e:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8017692:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8017696:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 801769a:	428b      	cmp	r3, r1
 801769c:	dd01      	ble.n	80176a2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 801769e:	428a      	cmp	r2, r1
 80176a0:	dc10      	bgt.n	80176c4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 80176a2:	fb90 f3f3 	sdiv	r3, r0, r3
 80176a6:	fb90 f2f2 	sdiv	r2, r0, r2
 80176aa:	4293      	cmp	r3, r2
 80176ac:	bfa8      	it	ge
 80176ae:	4613      	movge	r3, r2
 80176b0:	435f      	muls	r7, r3
 80176b2:	435d      	muls	r5, r3
 80176b4:	4629      	mov	r1, r5
 80176b6:	4638      	mov	r0, r7
 80176b8:	f7ff fefe 	bl	80174b8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80176bc:	4680      	mov	r8, r0
 80176be:	e792      	b.n	80175e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 80176c0:	4643      	mov	r3, r8
 80176c2:	e7d9      	b.n	8017678 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 80176c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80176c8:	fb92 f2f1 	sdiv	r2, r2, r1
 80176cc:	4293      	cmp	r3, r2
 80176ce:	bfcc      	ite	gt
 80176d0:	3301      	addgt	r3, #1
 80176d2:	1c53      	addle	r3, r2, #1
 80176d4:	fb97 f7f3 	sdiv	r7, r7, r3
 80176d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80176dc:	e7ea      	b.n	80176b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 80176de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80176e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80176e2:	1b93      	subs	r3, r2, r6
 80176e4:	4432      	add	r2, r6
 80176e6:	6463      	str	r3, [r4, #68]	; 0x44
 80176e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80176ea:	6522      	str	r2, [r4, #80]	; 0x50
 80176ec:	18e9      	adds	r1, r5, r3
 80176ee:	1b5b      	subs	r3, r3, r5
 80176f0:	6561      	str	r1, [r4, #84]	; 0x54
 80176f2:	1b81      	subs	r1, r0, r6
 80176f4:	4430      	add	r0, r6
 80176f6:	64a1      	str	r1, [r4, #72]	; 0x48
 80176f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80176fa:	64e0      	str	r0, [r4, #76]	; 0x4c
 80176fc:	186f      	adds	r7, r5, r1
 80176fe:	1b49      	subs	r1, r1, r5
 8017700:	65a7      	str	r7, [r4, #88]	; 0x58
 8017702:	65e1      	str	r1, [r4, #92]	; 0x5c
 8017704:	6623      	str	r3, [r4, #96]	; 0x60
 8017706:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8017708:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801770c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801770e:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8017712:	9200      	str	r2, [sp, #0]
 8017714:	9301      	str	r3, [sp, #4]
 8017716:	680f      	ldr	r7, [r1, #0]
 8017718:	3104      	adds	r1, #4
 801771a:	9800      	ldr	r0, [sp, #0]
 801771c:	42ba      	cmp	r2, r7
 801771e:	bfa8      	it	ge
 8017720:	463a      	movge	r2, r7
 8017722:	4287      	cmp	r7, r0
 8017724:	9801      	ldr	r0, [sp, #4]
 8017726:	bfc8      	it	gt
 8017728:	9700      	strgt	r7, [sp, #0]
 801772a:	68cf      	ldr	r7, [r1, #12]
 801772c:	42bb      	cmp	r3, r7
 801772e:	bfa8      	it	ge
 8017730:	463b      	movge	r3, r7
 8017732:	4287      	cmp	r7, r0
 8017734:	bfc8      	it	gt
 8017736:	9701      	strgt	r7, [sp, #4]
 8017738:	458c      	cmp	ip, r1
 801773a:	d1ec      	bne.n	8017716 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801773c:	2720      	movs	r7, #32
 801773e:	4668      	mov	r0, sp
 8017740:	fb92 f8f7 	sdiv	r8, r2, r7
 8017744:	fb93 f7f7 	sdiv	r7, r3, r7
 8017748:	f7ff fd75 	bl	8017236 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801774c:	4682      	mov	sl, r0
 801774e:	a801      	add	r0, sp, #4
 8017750:	f7ff fd71 	bl	8017236 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017754:	ebaa 0208 	sub.w	r2, sl, r8
 8017758:	1bc0      	subs	r0, r0, r7
 801775a:	f1b9 0f01 	cmp.w	r9, #1
 801775e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8017762:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8017766:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 801776a:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 801776e:	f47f af33 	bne.w	80175d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8017772:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017776:	1b83      	subs	r3, r0, r6
 8017778:	6463      	str	r3, [r4, #68]	; 0x44
 801777a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801777c:	18ea      	adds	r2, r5, r3
 801777e:	6562      	str	r2, [r4, #84]	; 0x54
 8017780:	1b8a      	subs	r2, r1, r6
 8017782:	4431      	add	r1, r6
 8017784:	4406      	add	r6, r0
 8017786:	64a2      	str	r2, [r4, #72]	; 0x48
 8017788:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801778a:	64e1      	str	r1, [r4, #76]	; 0x4c
 801778c:	18af      	adds	r7, r5, r2
 801778e:	1b52      	subs	r2, r2, r5
 8017790:	1b5d      	subs	r5, r3, r5
 8017792:	6526      	str	r6, [r4, #80]	; 0x50
 8017794:	65a7      	str	r7, [r4, #88]	; 0x58
 8017796:	65e2      	str	r2, [r4, #92]	; 0x5c
 8017798:	6625      	str	r5, [r4, #96]	; 0x60
 801779a:	e71d      	b.n	80175d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

0801779c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801779c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801779e:	428b      	cmp	r3, r1
 80177a0:	d102      	bne.n	80177a8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80177a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80177a4:	4293      	cmp	r3, r2
 80177a6:	d003      	beq.n	80177b0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80177a8:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 80177ac:	f7ff bf00 	b.w	80175b0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80177b0:	4770      	bx	lr

080177b2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80177b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80177b4:	428b      	cmp	r3, r1
 80177b6:	d102      	bne.n	80177be <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 80177b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80177ba:	4293      	cmp	r3, r2
 80177bc:	d003      	beq.n	80177c6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 80177be:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80177c2:	f7ff bef5 	b.w	80175b0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80177c6:	4770      	bx	lr

080177c8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80177c8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 80177cc:	f7ff bef0 	b.w	80175b0 <_ZN8touchgfx4Line17updateCachedShapeEv>

080177d0 <_ZN8touchgfx6CanvasD1Ev>:
 80177d0:	4b04      	ldr	r3, [pc, #16]	; (80177e4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80177d2:	b510      	push	{r4, lr}
 80177d4:	4604      	mov	r4, r0
 80177d6:	f840 3b20 	str.w	r3, [r0], #32
 80177da:	f000 fdd0 	bl	801837e <_ZN8touchgfx7OutlineD1Ev>
 80177de:	4620      	mov	r0, r4
 80177e0:	bd10      	pop	{r4, pc}
 80177e2:	bf00      	nop
 80177e4:	0802ff88 	.word	0x0802ff88

080177e8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 80177e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177ec:	b0a0      	sub	sp, #128	; 0x80
 80177ee:	4604      	mov	r4, r0
 80177f0:	460a      	mov	r2, r1
 80177f2:	4601      	mov	r1, r0
 80177f4:	a804      	add	r0, sp, #16
 80177f6:	f011 fd31 	bl	802925c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80177fa:	2300      	movs	r3, #0
 80177fc:	9301      	str	r3, [sp, #4]
 80177fe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8017802:	2b01      	cmp	r3, #1
 8017804:	d17c      	bne.n	8017900 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8017806:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801780a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801780c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801780e:	1ac0      	subs	r0, r0, r3
 8017810:	eba1 0102 	sub.w	r1, r1, r2
 8017814:	d437      	bmi.n	8017886 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8017816:	2900      	cmp	r1, #0
 8017818:	aa01      	add	r2, sp, #4
 801781a:	db2e      	blt.n	801787a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 801781c:	f7ff fe8c 	bl	8017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017820:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8017824:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8017826:	a804      	add	r0, sp, #16
 8017828:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801782a:	f011 feed 	bl	8029608 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801782e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017830:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017832:	a804      	add	r0, sp, #16
 8017834:	f011 fdc0 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017838:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801783a:	2db3      	cmp	r5, #179	; 0xb3
 801783c:	dc33      	bgt.n	80178a6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801783e:	eba6 0805 	sub.w	r8, r6, r5
 8017842:	4640      	mov	r0, r8
 8017844:	f7ff fe04 	bl	8017450 <_ZN8touchgfx7CWRUtil4sineEi>
 8017848:	a902      	add	r1, sp, #8
 801784a:	9002      	str	r0, [sp, #8]
 801784c:	a801      	add	r0, sp, #4
 801784e:	f7ff fce7 	bl	8017220 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017854:	1847      	adds	r7, r0, r1
 8017856:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801785a:	f7ff fdf9 	bl	8017450 <_ZN8touchgfx7CWRUtil4sineEi>
 801785e:	a903      	add	r1, sp, #12
 8017860:	9003      	str	r0, [sp, #12]
 8017862:	a801      	add	r0, sp, #4
 8017864:	f7ff fcdc 	bl	8017220 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017868:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801786a:	4639      	mov	r1, r7
 801786c:	1a12      	subs	r2, r2, r0
 801786e:	a804      	add	r0, sp, #16
 8017870:	f011 fda2 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017874:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017876:	441d      	add	r5, r3
 8017878:	e7df      	b.n	801783a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 801787a:	4249      	negs	r1, r1
 801787c:	f7ff fe5c 	bl	8017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017880:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8017884:	e7ce      	b.n	8017824 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8017886:	2900      	cmp	r1, #0
 8017888:	f1c0 0000 	rsb	r0, r0, #0
 801788c:	aa01      	add	r2, sp, #4
 801788e:	db04      	blt.n	801789a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8017890:	f7ff fe52 	bl	8017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017894:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8017898:	e7c4      	b.n	8017824 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801789a:	4249      	negs	r1, r1
 801789c:	f7ff fe4c 	bl	8017538 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80178a0:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 80178a4:	e7be      	b.n	8017824 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80178a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80178a8:	a804      	add	r0, sp, #16
 80178aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80178ac:	f011 fd84 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80178b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80178b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80178b4:	a804      	add	r0, sp, #16
 80178b6:	f011 fd7f 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80178ba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80178bc:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 80178c0:	2d00      	cmp	r5, #0
 80178c2:	dd31      	ble.n	8017928 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 80178c4:	eb05 0806 	add.w	r8, r5, r6
 80178c8:	4640      	mov	r0, r8
 80178ca:	f7ff fdc1 	bl	8017450 <_ZN8touchgfx7CWRUtil4sineEi>
 80178ce:	a902      	add	r1, sp, #8
 80178d0:	9002      	str	r0, [sp, #8]
 80178d2:	a801      	add	r0, sp, #4
 80178d4:	f7ff fca4 	bl	8017220 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80178d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80178da:	1847      	adds	r7, r0, r1
 80178dc:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 80178e0:	f7ff fdb6 	bl	8017450 <_ZN8touchgfx7CWRUtil4sineEi>
 80178e4:	a903      	add	r1, sp, #12
 80178e6:	9003      	str	r0, [sp, #12]
 80178e8:	a801      	add	r0, sp, #4
 80178ea:	f7ff fc99 	bl	8017220 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80178ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80178f0:	4639      	mov	r1, r7
 80178f2:	1a12      	subs	r2, r2, r0
 80178f4:	a804      	add	r0, sp, #16
 80178f6:	f011 fd5f 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80178fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80178fc:	1aed      	subs	r5, r5, r3
 80178fe:	e7df      	b.n	80178c0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8017900:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8017902:	a804      	add	r0, sp, #16
 8017904:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017906:	f011 fe7f 	bl	8029608 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801790a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801790c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801790e:	a804      	add	r0, sp, #16
 8017910:	f011 fd52 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017914:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017916:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017918:	a804      	add	r0, sp, #16
 801791a:	f011 fd4d 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801791e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017920:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017922:	a804      	add	r0, sp, #16
 8017924:	f011 fd48 	bl	80293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017928:	21ff      	movs	r1, #255	; 0xff
 801792a:	a804      	add	r0, sp, #16
 801792c:	f011 fdc0 	bl	80294b0 <_ZN8touchgfx6Canvas6renderEh>
 8017930:	4604      	mov	r4, r0
 8017932:	a804      	add	r0, sp, #16
 8017934:	f7ff ff4c 	bl	80177d0 <_ZN8touchgfx6CanvasD1Ev>
 8017938:	4620      	mov	r0, r4
 801793a:	b020      	add	sp, #128	; 0x80
 801793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017940 <_ZN8touchgfx6CanvasD0Ev>:
 8017940:	b510      	push	{r4, lr}
 8017942:	4604      	mov	r4, r0
 8017944:	f7ff ff44 	bl	80177d0 <_ZN8touchgfx6CanvasD1Ev>
 8017948:	2170      	movs	r1, #112	; 0x70
 801794a:	4620      	mov	r0, r4
 801794c:	f011 feae 	bl	80296ac <_ZdlPvj>
 8017950:	4620      	mov	r0, r4
 8017952:	bd10      	pop	{r4, pc}

08017954 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017954:	2000      	movs	r0, #0
 8017956:	4770      	bx	lr

08017958 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017958:	4b07      	ldr	r3, [pc, #28]	; (8017978 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801795a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801795c:	881b      	ldrh	r3, [r3, #0]
 801795e:	4293      	cmp	r3, r2
 8017960:	bf81      	itttt	hi
 8017962:	4b06      	ldrhi	r3, [pc, #24]	; (801797c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017964:	681b      	ldrhi	r3, [r3, #0]
 8017966:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801796a:	7858      	ldrbhi	r0, [r3, #1]
 801796c:	bf8c      	ite	hi
 801796e:	f000 0003 	andhi.w	r0, r0, #3
 8017972:	2000      	movls	r0, #0
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	2003c2c8 	.word	0x2003c2c8
 801797c:	2003c2c4 	.word	0x2003c2c4

08017980 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017980:	4b11      	ldr	r3, [pc, #68]	; (80179c8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017986:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017988:	4604      	mov	r4, r0
 801798a:	881b      	ldrh	r3, [r3, #0]
 801798c:	428b      	cmp	r3, r1
 801798e:	d918      	bls.n	80179c2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017990:	6803      	ldr	r3, [r0, #0]
 8017992:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8017994:	4b0d      	ldr	r3, [pc, #52]	; (80179cc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017996:	6818      	ldr	r0, [r3, #0]
 8017998:	f7fa f8b2 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	4606      	mov	r6, r0
 80179a0:	4620      	mov	r0, r4
 80179a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80179a4:	4798      	blx	r3
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	4607      	mov	r7, r0
 80179aa:	4620      	mov	r0, r4
 80179ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80179b0:	4798      	blx	r3
 80179b2:	463a      	mov	r2, r7
 80179b4:	4603      	mov	r3, r0
 80179b6:	4631      	mov	r1, r6
 80179b8:	4620      	mov	r0, r4
 80179ba:	46ac      	mov	ip, r5
 80179bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179c0:	4760      	bx	ip
 80179c2:	2000      	movs	r0, #0
 80179c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c8:	2003c2c8 	.word	0x2003c2c8
 80179cc:	2003c2d0 	.word	0x2003c2d0

080179d0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80179d0:	4b18      	ldr	r3, [pc, #96]	; (8017a34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80179d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80179d6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80179d8:	4604      	mov	r4, r0
 80179da:	881b      	ldrh	r3, [r3, #0]
 80179dc:	428b      	cmp	r3, r1
 80179de:	d926      	bls.n	8017a2e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80179e0:	4b15      	ldr	r3, [pc, #84]	; (8017a38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80179e8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80179ec:	4b13      	ldr	r3, [pc, #76]	; (8017a3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80179ee:	7855      	ldrb	r5, [r2, #1]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80179f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80179fa:	6833      	ldr	r3, [r6, #0]
 80179fc:	69df      	ldr	r7, [r3, #28]
 80179fe:	4b10      	ldr	r3, [pc, #64]	; (8017a40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017a00:	6818      	ldr	r0, [r3, #0]
 8017a02:	f7fa f87d 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017a06:	6823      	ldr	r3, [r4, #0]
 8017a08:	4680      	mov	r8, r0
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a0e:	4798      	blx	r3
 8017a10:	6823      	ldr	r3, [r4, #0]
 8017a12:	4681      	mov	r9, r0
 8017a14:	4620      	mov	r0, r4
 8017a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017a1a:	4798      	blx	r3
 8017a1c:	464b      	mov	r3, r9
 8017a1e:	9000      	str	r0, [sp, #0]
 8017a20:	4642      	mov	r2, r8
 8017a22:	4629      	mov	r1, r5
 8017a24:	4630      	mov	r0, r6
 8017a26:	47b8      	blx	r7
 8017a28:	b003      	add	sp, #12
 8017a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a2e:	2000      	movs	r0, #0
 8017a30:	e7fa      	b.n	8017a28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017a32:	bf00      	nop
 8017a34:	2003c2c8 	.word	0x2003c2c8
 8017a38:	2003c2c4 	.word	0x2003c2c4
 8017a3c:	2003c2cc 	.word	0x2003c2cc
 8017a40:	2003c2d0 	.word	0x2003c2d0

08017a44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017a44:	b40e      	push	{r1, r2, r3}
 8017a46:	4b30      	ldr	r3, [pc, #192]	; (8017b08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a4c:	881a      	ldrh	r2, [r3, #0]
 8017a4e:	b09d      	sub	sp, #116	; 0x74
 8017a50:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017a52:	4604      	mov	r4, r0
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d954      	bls.n	8017b02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017a58:	aa26      	add	r2, sp, #152	; 0x98
 8017a5a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017b0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017a5e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017b10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017a62:	9202      	str	r2, [sp, #8]
 8017a64:	f8d9 2000 	ldr.w	r2, [r9]
 8017a68:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a70:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	4628      	mov	r0, r5
 8017a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a7a:	4798      	blx	r3
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	b207      	sxth	r7, r0
 8017a80:	a803      	add	r0, sp, #12
 8017a82:	f004 fca3 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017a86:	682b      	ldr	r3, [r5, #0]
 8017a88:	4628      	mov	r0, r5
 8017a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a8c:	4798      	blx	r3
 8017a8e:	682b      	ldr	r3, [r5, #0]
 8017a90:	4682      	mov	sl, r0
 8017a92:	4628      	mov	r0, r5
 8017a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a96:	4798      	blx	r3
 8017a98:	4653      	mov	r3, sl
 8017a9a:	9000      	str	r0, [sp, #0]
 8017a9c:	a803      	add	r0, sp, #12
 8017a9e:	9a02      	ldr	r2, [sp, #8]
 8017aa0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017aa2:	f004 fcee 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017aa6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017aa8:	f8d9 3000 	ldr.w	r3, [r9]
 8017aac:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8017ab0:	8925      	ldrh	r5, [r4, #8]
 8017ab2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017ab6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017aba:	eba5 050c 	sub.w	r5, r5, ip
 8017abe:	784a      	ldrb	r2, [r1, #1]
 8017ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8017ac4:	b22d      	sxth	r5, r5
 8017ac6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017aca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017ace:	9500      	str	r5, [sp, #0]
 8017ad0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017ad4:	a803      	add	r0, sp, #12
 8017ad6:	f002 fae6 	bl	801a0a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017ada:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017ade:	b203      	sxth	r3, r0
 8017ae0:	18b9      	adds	r1, r7, r2
 8017ae2:	2900      	cmp	r1, #0
 8017ae4:	dd0b      	ble.n	8017afe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017ae6:	3b01      	subs	r3, #1
 8017ae8:	fb13 f302 	smulbb	r3, r3, r2
 8017aec:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017af0:	b21f      	sxth	r7, r3
 8017af2:	4638      	mov	r0, r7
 8017af4:	b01d      	add	sp, #116	; 0x74
 8017af6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017afa:	b003      	add	sp, #12
 8017afc:	4770      	bx	lr
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	dcf7      	bgt.n	8017af2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017b02:	2700      	movs	r7, #0
 8017b04:	e7f5      	b.n	8017af2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017b06:	bf00      	nop
 8017b08:	2003c2c8 	.word	0x2003c2c8
 8017b0c:	2003c2c4 	.word	0x2003c2c4
 8017b10:	2003c2cc 	.word	0x2003c2cc

08017b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017b14:	4bbc      	ldr	r3, [pc, #752]	; (8017e08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8017b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b1a:	460c      	mov	r4, r1
 8017b1c:	881b      	ldrh	r3, [r3, #0]
 8017b1e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8017b20:	b0a9      	sub	sp, #164	; 0xa4
 8017b22:	4681      	mov	r9, r0
 8017b24:	428b      	cmp	r3, r1
 8017b26:	d809      	bhi.n	8017b3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017b28:	2300      	movs	r3, #0
 8017b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b2e:	6083      	str	r3, [r0, #8]
 8017b30:	e9c0 3200 	strd	r3, r2, [r0]
 8017b34:	4648      	mov	r0, r9
 8017b36:	b029      	add	sp, #164	; 0xa4
 8017b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8017e10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017b40:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017b44:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8017e14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8017b48:	f8db 3000 	ldr.w	r3, [fp]
 8017b4c:	f8d8 0000 	ldr.w	r0, [r8]
 8017b50:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017b54:	4bad      	ldr	r3, [pc, #692]	; (8017e0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017b5c:	f7f9 ffd0 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017b60:	4607      	mov	r7, r0
 8017b62:	682b      	ldr	r3, [r5, #0]
 8017b64:	4628      	mov	r0, r5
 8017b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b68:	4798      	blx	r3
 8017b6a:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8017b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b70:	4430      	add	r0, r6
 8017b72:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8017b76:	b283      	uxth	r3, r0
 8017b78:	4650      	mov	r0, sl
 8017b7a:	9302      	str	r3, [sp, #8]
 8017b7c:	2e00      	cmp	r6, #0
 8017b7e:	f040 8090 	bne.w	8017ca2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017b82:	f004 fc23 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017b86:	682b      	ldr	r3, [r5, #0]
 8017b88:	4628      	mov	r0, r5
 8017b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b8c:	4798      	blx	r3
 8017b8e:	682b      	ldr	r3, [r5, #0]
 8017b90:	9005      	str	r0, [sp, #20]
 8017b92:	4628      	mov	r0, r5
 8017b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b96:	4798      	blx	r3
 8017b98:	6823      	ldr	r3, [r4, #0]
 8017b9a:	4680      	mov	r8, r0
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ba0:	4798      	blx	r3
 8017ba2:	6822      	ldr	r2, [r4, #0]
 8017ba4:	9004      	str	r0, [sp, #16]
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8017bac:	4790      	blx	r2
 8017bae:	9905      	ldr	r1, [sp, #20]
 8017bb0:	9b04      	ldr	r3, [sp, #16]
 8017bb2:	460a      	mov	r2, r1
 8017bb4:	4639      	mov	r1, r7
 8017bb6:	4637      	mov	r7, r6
 8017bb8:	9001      	str	r0, [sp, #4]
 8017bba:	9300      	str	r3, [sp, #0]
 8017bbc:	4650      	mov	r0, sl
 8017bbe:	4643      	mov	r3, r8
 8017bc0:	f004 fc74 	bl	801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017bc4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017bc6:	4629      	mov	r1, r5
 8017bc8:	f8db 3000 	ldr.w	r3, [fp]
 8017bcc:	4650      	mov	r0, sl
 8017bce:	3601      	adds	r6, #1
 8017bd0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017bd4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017bd8:	b2b6      	uxth	r6, r6
 8017bda:	785b      	ldrb	r3, [r3, #1]
 8017bdc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017be0:	f001 ffb2 	bl	8019b48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017be4:	4287      	cmp	r7, r0
 8017be6:	bfb8      	it	lt
 8017be8:	b207      	sxthlt	r7, r0
 8017bea:	4650      	mov	r0, sl
 8017bec:	f004 fc15 	bl	801c41a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017bf0:	2800      	cmp	r0, #0
 8017bf2:	d0e7      	beq.n	8017bc4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8017bf4:	9b02      	ldr	r3, [sp, #8]
 8017bf6:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8017bfa:	fb13 f606 	smulbb	r6, r3, r6
 8017bfe:	eba6 0608 	sub.w	r6, r6, r8
 8017c02:	b2b6      	uxth	r6, r6
 8017c04:	fa0f f886 	sxth.w	r8, r6
 8017c08:	f1b8 0f00 	cmp.w	r8, #0
 8017c0c:	dd06      	ble.n	8017c1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8017c0e:	682b      	ldr	r3, [r5, #0]
 8017c10:	4628      	mov	r0, r5
 8017c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c14:	4798      	blx	r3
 8017c16:	4430      	add	r0, r6
 8017c18:	fa0f f880 	sxth.w	r8, r0
 8017c1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017c20:	4620      	mov	r0, r4
 8017c22:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017c26:	6823      	ldr	r3, [r4, #0]
 8017c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c2a:	bf0c      	ite	eq
 8017c2c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8017c30:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8017c34:	4798      	blx	r3
 8017c36:	2801      	cmp	r0, #1
 8017c38:	b2ba      	uxth	r2, r7
 8017c3a:	f000 80d2 	beq.w	8017de2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8017c3e:	2802      	cmp	r0, #2
 8017c40:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017c44:	f000 80d3 	beq.w	8017dee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8017c48:	b21e      	sxth	r6, r3
 8017c4a:	7a29      	ldrb	r1, [r5, #8]
 8017c4c:	7a6d      	ldrb	r5, [r5, #9]
 8017c4e:	1a76      	subs	r6, r6, r1
 8017c50:	4429      	add	r1, r5
 8017c52:	b2b3      	uxth	r3, r6
 8017c54:	440a      	add	r2, r1
 8017c56:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8017c5a:	b21f      	sxth	r7, r3
 8017c5c:	b292      	uxth	r2, r2
 8017c5e:	2902      	cmp	r1, #2
 8017c60:	b216      	sxth	r6, r2
 8017c62:	f000 80c7 	beq.w	8017df4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8017c66:	2903      	cmp	r1, #3
 8017c68:	f000 80d6 	beq.w	8017e18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8017c6c:	2901      	cmp	r1, #1
 8017c6e:	f040 80dc 	bne.w	8017e2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8017c72:	8923      	ldrh	r3, [r4, #8]
 8017c74:	4632      	mov	r2, r6
 8017c76:	463d      	mov	r5, r7
 8017c78:	4646      	mov	r6, r8
 8017c7a:	eba3 0308 	sub.w	r3, r3, r8
 8017c7e:	4690      	mov	r8, r2
 8017c80:	b21f      	sxth	r7, r3
 8017c82:	9b03      	ldr	r3, [sp, #12]
 8017c84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017c86:	6818      	ldr	r0, [r3, #0]
 8017c88:	f7f9 ff3a 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017c8c:	f8a9 7000 	strh.w	r7, [r9]
 8017c90:	f8a9 5002 	strh.w	r5, [r9, #2]
 8017c94:	f8a9 6004 	strh.w	r6, [r9, #4]
 8017c98:	f8a9 8006 	strh.w	r8, [r9, #6]
 8017c9c:	f8c9 0008 	str.w	r0, [r9, #8]
 8017ca0:	e748      	b.n	8017b34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8017ca2:	f004 fb93 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017ca6:	682b      	ldr	r3, [r5, #0]
 8017ca8:	4628      	mov	r0, r5
 8017caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cac:	4798      	blx	r3
 8017cae:	682b      	ldr	r3, [r5, #0]
 8017cb0:	4606      	mov	r6, r0
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cb6:	4798      	blx	r3
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	4680      	mov	r8, r0
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017cc0:	4798      	blx	r3
 8017cc2:	6822      	ldr	r2, [r4, #0]
 8017cc4:	9004      	str	r0, [sp, #16]
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8017ccc:	4790      	blx	r2
 8017cce:	9b04      	ldr	r3, [sp, #16]
 8017cd0:	4632      	mov	r2, r6
 8017cd2:	9001      	str	r0, [sp, #4]
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	4639      	mov	r1, r7
 8017cd8:	4643      	mov	r3, r8
 8017cda:	4650      	mov	r0, sl
 8017cdc:	f004 fbe6 	bl	801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017ce0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017ce4:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8017ce8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017cec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017cf0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017cf2:	bf0a      	itet	eq
 8017cf4:	4642      	moveq	r2, r8
 8017cf6:	461a      	movne	r2, r3
 8017cf8:	4698      	moveq	r8, r3
 8017cfa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017cfe:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8017d02:	1ad2      	subs	r2, r2, r3
 8017d04:	f8db 3000 	ldr.w	r3, [fp]
 8017d08:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017d0c:	7859      	ldrb	r1, [r3, #1]
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f8cd a020 	str.w	sl, [sp, #32]
 8017d14:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017d18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017d1c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017d20:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017d24:	950a      	str	r5, [sp, #40]	; 0x28
 8017d26:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017d2a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017d2e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017d32:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017d36:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017d3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d3e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017d42:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017d46:	b350      	cbz	r0, 8017d9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017d48:	682b      	ldr	r3, [r5, #0]
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	695b      	ldr	r3, [r3, #20]
 8017d4e:	4798      	blx	r3
 8017d50:	4607      	mov	r7, r0
 8017d52:	b320      	cbz	r0, 8017d9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017d54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d56:	4639      	mov	r1, r7
 8017d58:	6803      	ldr	r3, [r0, #0]
 8017d5a:	68db      	ldr	r3, [r3, #12]
 8017d5c:	4798      	blx	r3
 8017d5e:	4606      	mov	r6, r0
 8017d60:	b1e8      	cbz	r0, 8017d9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017d62:	7b43      	ldrb	r3, [r0, #13]
 8017d64:	7a82      	ldrb	r2, [r0, #10]
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d6c:	4313      	orrs	r3, r2
 8017d6e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017d72:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8017d76:	2b04      	cmp	r3, #4
 8017d78:	d111      	bne.n	8017d9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d7c:	4632      	mov	r2, r6
 8017d7e:	4639      	mov	r1, r7
 8017d80:	6803      	ldr	r3, [r0, #0]
 8017d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d84:	4798      	blx	r3
 8017d86:	7b73      	ldrb	r3, [r6, #13]
 8017d88:	005b      	lsls	r3, r3, #1
 8017d8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d8e:	7ab3      	ldrb	r3, [r6, #10]
 8017d90:	4313      	orrs	r3, r2
 8017d92:	4418      	add	r0, r3
 8017d94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017d98:	4418      	add	r0, r3
 8017d9a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8017d9e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8017da2:	2600      	movs	r6, #0
 8017da4:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8017da8:	4637      	mov	r7, r6
 8017daa:	45c3      	cmp	fp, r8
 8017dac:	a807      	add	r0, sp, #28
 8017dae:	f106 0601 	add.w	r6, r6, #1
 8017db2:	bfd4      	ite	le
 8017db4:	2100      	movle	r1, #0
 8017db6:	2101      	movgt	r1, #1
 8017db8:	f002 f8a6 	bl	8019f08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017dbc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8017dc0:	b2b6      	uxth	r6, r6
 8017dc2:	429f      	cmp	r7, r3
 8017dc4:	bfb8      	it	lt
 8017dc6:	b21f      	sxthlt	r7, r3
 8017dc8:	9b02      	ldr	r3, [sp, #8]
 8017dca:	eba8 0803 	sub.w	r8, r8, r3
 8017dce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017dd2:	fa0f f888 	sxth.w	r8, r8
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	f43f af0c 	beq.w	8017bf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8017ddc:	45c2      	cmp	sl, r8
 8017dde:	dbe4      	blt.n	8017daa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8017de0:	e708      	b.n	8017bf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8017de2:	1bf6      	subs	r6, r6, r7
 8017de4:	2702      	movs	r7, #2
 8017de6:	fb96 f6f7 	sdiv	r6, r6, r7
 8017dea:	b236      	sxth	r6, r6
 8017dec:	e72d      	b.n	8017c4a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 8017dee:	4413      	add	r3, r2
 8017df0:	1af6      	subs	r6, r6, r3
 8017df2:	e7fa      	b.n	8017dea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8017df4:	8925      	ldrh	r5, [r4, #8]
 8017df6:	1aad      	subs	r5, r5, r2
 8017df8:	1aed      	subs	r5, r5, r3
 8017dfa:	b22f      	sxth	r7, r5
 8017dfc:	8965      	ldrh	r5, [r4, #10]
 8017dfe:	eba5 0508 	sub.w	r5, r5, r8
 8017e02:	b22d      	sxth	r5, r5
 8017e04:	e73d      	b.n	8017c82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8017e06:	bf00      	nop
 8017e08:	2003c2c8 	.word	0x2003c2c8
 8017e0c:	2003c2cc 	.word	0x2003c2cc
 8017e10:	2003c2c4 	.word	0x2003c2c4
 8017e14:	2003c2d0 	.word	0x2003c2d0
 8017e18:	8965      	ldrh	r5, [r4, #10]
 8017e1a:	2700      	movs	r7, #0
 8017e1c:	1aad      	subs	r5, r5, r2
 8017e1e:	1aed      	subs	r5, r5, r3
 8017e20:	4633      	mov	r3, r6
 8017e22:	4646      	mov	r6, r8
 8017e24:	b22d      	sxth	r5, r5
 8017e26:	4698      	mov	r8, r3
 8017e28:	e72b      	b.n	8017c82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8017e2a:	2500      	movs	r5, #0
 8017e2c:	e729      	b.n	8017c82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8017e2e:	bf00      	nop

08017e30 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017e30:	b513      	push	{r0, r1, r4, lr}
 8017e32:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8017e36:	4604      	mov	r4, r0
 8017e38:	b1fb      	cbz	r3, 8017e7a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017e3a:	4b16      	ldr	r3, [pc, #88]	; (8017e94 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8017e3c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017e3e:	881b      	ldrh	r3, [r3, #0]
 8017e40:	428b      	cmp	r3, r1
 8017e42:	d91a      	bls.n	8017e7a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017e44:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	dd16      	ble.n	8017e7a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017e4c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	dd12      	ble.n	8017e7a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017e54:	4b10      	ldr	r3, [pc, #64]	; (8017e98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8017e56:	6818      	ldr	r0, [r3, #0]
 8017e58:	f7f9 fe52 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017e5c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8017e60:	6822      	ldr	r2, [r4, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	db06      	blt.n	8017e74 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017e66:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	db02      	blt.n	8017e74 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017e6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017e70:	4298      	cmp	r0, r3
 8017e72:	d004      	beq.n	8017e7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8017e74:	6953      	ldr	r3, [r2, #20]
 8017e76:	4620      	mov	r0, r4
 8017e78:	4798      	blx	r3
 8017e7a:	b002      	add	sp, #8
 8017e7c:	bd10      	pop	{r4, pc}
 8017e7e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8017e82:	466b      	mov	r3, sp
 8017e84:	6912      	ldr	r2, [r2, #16]
 8017e86:	c903      	ldmia	r1, {r0, r1}
 8017e88:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e8c:	4619      	mov	r1, r3
 8017e8e:	4620      	mov	r0, r4
 8017e90:	4790      	blx	r2
 8017e92:	e7f2      	b.n	8017e7a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017e94:	2003c2c8 	.word	0x2003c2c8
 8017e98:	2003c2d0 	.word	0x2003c2d0

08017e9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017e9c:	4b45      	ldr	r3, [pc, #276]	; (8017fb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8017e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017ea4:	b08e      	sub	sp, #56	; 0x38
 8017ea6:	881b      	ldrh	r3, [r3, #0]
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d97e      	bls.n	8017fac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017eae:	6808      	ldr	r0, [r1, #0]
 8017eb0:	ab05      	add	r3, sp, #20
 8017eb2:	6849      	ldr	r1, [r1, #4]
 8017eb4:	4d40      	ldr	r5, [pc, #256]	; (8017fb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8017eb6:	c303      	stmia	r3!, {r0, r1}
 8017eb8:	4611      	mov	r1, r2
 8017eba:	6828      	ldr	r0, [r5, #0]
 8017ebc:	f7f9 fe20 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017ec0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	db11      	blt.n	8017eec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017ec8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	db0d      	blt.n	8017eec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017ed0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017ed2:	4298      	cmp	r0, r3
 8017ed4:	d10a      	bne.n	8017eec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017ed6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8017eda:	ab09      	add	r3, sp, #36	; 0x24
 8017edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ee0:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ee4:	4619      	mov	r1, r3
 8017ee6:	a805      	add	r0, sp, #20
 8017ee8:	f7fe f85c 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 8017eec:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	dd5b      	ble.n	8017fac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017ef4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	dd57      	ble.n	8017fac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017efc:	4f2f      	ldr	r7, [pc, #188]	; (8017fbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8017efe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017f06:	4b2e      	ldr	r3, [pc, #184]	; (8017fc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017f0e:	2e00      	cmp	r6, #0
 8017f10:	d04c      	beq.n	8017fac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017f12:	6823      	ldr	r3, [r4, #0]
 8017f14:	4620      	mov	r0, r4
 8017f16:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8017f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f1c:	4798      	blx	r3
 8017f1e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8017f26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017f2a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8017f2e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8017f32:	785b      	ldrb	r3, [r3, #1]
 8017f34:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8017f38:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017f3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017f3e:	9609      	str	r6, [sp, #36]	; 0x24
 8017f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f44:	4b1f      	ldr	r3, [pc, #124]	; (8017fc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017f46:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8017f50:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f52:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8017f56:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8017f5a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8017f5e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8017f62:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017f66:	b10a      	cbz	r2, 8017f6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8017f68:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8017f6a:	b906      	cbnz	r6, 8017f6e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8017f6c:	689e      	ldr	r6, [r3, #8]
 8017f6e:	af07      	add	r7, sp, #28
 8017f70:	4621      	mov	r1, r4
 8017f72:	4638      	mov	r0, r7
 8017f74:	f003 fdb0 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017f78:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017f7a:	6828      	ldr	r0, [r5, #0]
 8017f7c:	f7f9 fdc0 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	4605      	mov	r5, r0
 8017f84:	4620      	mov	r0, r4
 8017f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f88:	4798      	blx	r3
 8017f8a:	6823      	ldr	r3, [r4, #0]
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f94:	4798      	blx	r3
 8017f96:	ab09      	add	r3, sp, #36	; 0x24
 8017f98:	9501      	str	r5, [sp, #4]
 8017f9a:	9300      	str	r3, [sp, #0]
 8017f9c:	ab05      	add	r3, sp, #20
 8017f9e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017fa8:	f7f9 fd3b 	bl	8011a22 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017fac:	b00e      	add	sp, #56	; 0x38
 8017fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb2:	bf00      	nop
 8017fb4:	2003c2c8 	.word	0x2003c2c8
 8017fb8:	2003c2d0 	.word	0x2003c2d0
 8017fbc:	2003c2c4 	.word	0x2003c2c4
 8017fc0:	2003c2cc 	.word	0x2003c2cc
 8017fc4:	2003c26c 	.word	0x2003c26c

08017fc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017fc8:	b538      	push	{r3, r4, r5, lr}
 8017fca:	4b0e      	ldr	r3, [pc, #56]	; (8018004 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8017fcc:	4604      	mov	r4, r0
 8017fce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017fd0:	881b      	ldrh	r3, [r3, #0]
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d214      	bcs.n	8018000 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017fd6:	6803      	ldr	r3, [r0, #0]
 8017fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017fda:	4798      	blx	r3
 8017fdc:	6823      	ldr	r3, [r4, #0]
 8017fde:	4605      	mov	r5, r0
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fe4:	4798      	blx	r3
 8017fe6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017fea:	b22d      	sxth	r5, r5
 8017fec:	4601      	mov	r1, r0
 8017fee:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017ff2:	bf06      	itte	eq
 8017ff4:	4602      	moveq	r2, r0
 8017ff6:	4629      	moveq	r1, r5
 8017ff8:	462a      	movne	r2, r5
 8017ffa:	4620      	mov	r0, r4
 8017ffc:	f7f7 f938 	bl	800f270 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018000:	bd38      	pop	{r3, r4, r5, pc}
 8018002:	bf00      	nop
 8018004:	2003c2c8 	.word	0x2003c2c8

08018008 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018008:	b530      	push	{r4, r5, lr}
 801800a:	888b      	ldrh	r3, [r1, #4]
 801800c:	b085      	sub	sp, #20
 801800e:	4604      	mov	r4, r0
 8018010:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018012:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018016:	b923      	cbnz	r3, 8018022 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018018:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801801c:	b90b      	cbnz	r3, 8018022 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801801e:	f7ff ffd3 	bl	8017fc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018022:	6823      	ldr	r3, [r4, #0]
 8018024:	466d      	mov	r5, sp
 8018026:	4621      	mov	r1, r4
 8018028:	343c      	adds	r4, #60	; 0x3c
 801802a:	4628      	mov	r0, r5
 801802c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018030:	4798      	blx	r3
 8018032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801803a:	b005      	add	sp, #20
 801803c:	bd30      	pop	{r4, r5, pc}

0801803e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801803e:	2300      	movs	r3, #0
 8018040:	8083      	strh	r3, [r0, #4]
 8018042:	80c3      	strh	r3, [r0, #6]
 8018044:	8003      	strh	r3, [r0, #0]
 8018046:	8043      	strh	r3, [r0, #2]
 8018048:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801804c:	2bff      	cmp	r3, #255	; 0xff
 801804e:	bf01      	itttt	eq
 8018050:	890b      	ldrheq	r3, [r1, #8]
 8018052:	8083      	strheq	r3, [r0, #4]
 8018054:	894b      	ldrheq	r3, [r1, #10]
 8018056:	80c3      	strheq	r3, [r0, #6]
 8018058:	4770      	bx	lr
	...

0801805c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801805e:	4604      	mov	r4, r0
 8018060:	466b      	mov	r3, sp
 8018062:	6808      	ldr	r0, [r1, #0]
 8018064:	6849      	ldr	r1, [r1, #4]
 8018066:	c303      	stmia	r3!, {r0, r1}
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	4669      	mov	r1, sp
 801806c:	4620      	mov	r0, r4
 801806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018070:	4798      	blx	r3
 8018072:	4b08      	ldr	r3, [pc, #32]	; (8018094 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801807a:	b10a      	cbz	r2, 8018080 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801807c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801807e:	b900      	cbnz	r0, 8018082 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018080:	6898      	ldr	r0, [r3, #8]
 8018082:	6803      	ldr	r3, [r0, #0]
 8018084:	4669      	mov	r1, sp
 8018086:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018088:	6a1d      	ldr	r5, [r3, #32]
 801808a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801808e:	47a8      	blx	r5
 8018090:	b003      	add	sp, #12
 8018092:	bd30      	pop	{r4, r5, pc}
 8018094:	2003c26c 	.word	0x2003c26c

08018098 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018098:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801809c:	b12a      	cbz	r2, 80180aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801809e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80180a2:	b112      	cbz	r2, 80180aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80180a4:	6803      	ldr	r3, [r0, #0]
 80180a6:	695b      	ldr	r3, [r3, #20]
 80180a8:	4718      	bx	r3
 80180aa:	4770      	bx	lr

080180ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80180ac:	4b30      	ldr	r3, [pc, #192]	; (8018170 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80180ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80180b4:	b08d      	sub	sp, #52	; 0x34
 80180b6:	881b      	ldrh	r3, [r3, #0]
 80180b8:	4604      	mov	r4, r0
 80180ba:	460f      	mov	r7, r1
 80180bc:	4293      	cmp	r3, r2
 80180be:	d954      	bls.n	801816a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80180c0:	4b2c      	ldr	r3, [pc, #176]	; (8018174 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80180c2:	6819      	ldr	r1, [r3, #0]
 80180c4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80180c8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80180cc:	4a2a      	ldr	r2, [pc, #168]	; (8018178 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80180ce:	6812      	ldr	r2, [r2, #0]
 80180d0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80180d4:	2900      	cmp	r1, #0
 80180d6:	d048      	beq.n	801816a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80180d8:	785a      	ldrb	r2, [r3, #1]
 80180da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80180de:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80180e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80180e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80180ea:	4b24      	ldr	r3, [pc, #144]	; (801817c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80180ec:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80180f0:	681a      	ldr	r2, [r3, #0]
 80180f2:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80180f6:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80180fa:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80180fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8018100:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8018104:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8018108:	9107      	str	r1, [sp, #28]
 801810a:	f88d 8020 	strb.w	r8, [sp, #32]
 801810e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018112:	9609      	str	r6, [sp, #36]	; 0x24
 8018114:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018118:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801811c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8018120:	b10b      	cbz	r3, 8018126 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8018122:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8018124:	b905      	cbnz	r5, 8018128 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8018126:	6895      	ldr	r5, [r2, #8]
 8018128:	ae05      	add	r6, sp, #20
 801812a:	4621      	mov	r1, r4
 801812c:	4630      	mov	r0, r6
 801812e:	f003 fcd3 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018132:	4b13      	ldr	r3, [pc, #76]	; (8018180 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8018134:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018136:	6818      	ldr	r0, [r3, #0]
 8018138:	f7f9 fce2 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 801813c:	6823      	ldr	r3, [r4, #0]
 801813e:	4680      	mov	r8, r0
 8018140:	4620      	mov	r0, r4
 8018142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018144:	4798      	blx	r3
 8018146:	6823      	ldr	r3, [r4, #0]
 8018148:	4681      	mov	r9, r0
 801814a:	4620      	mov	r0, r4
 801814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018150:	4798      	blx	r3
 8018152:	ab07      	add	r3, sp, #28
 8018154:	f8cd 8004 	str.w	r8, [sp, #4]
 8018158:	9300      	str	r3, [sp, #0]
 801815a:	463b      	mov	r3, r7
 801815c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8018160:	4628      	mov	r0, r5
 8018162:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018166:	f7f9 fc5c 	bl	8011a22 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801816a:	b00d      	add	sp, #52	; 0x34
 801816c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018170:	2003c2c8 	.word	0x2003c2c8
 8018174:	2003c2c4 	.word	0x2003c2c4
 8018178:	2003c2cc 	.word	0x2003c2cc
 801817c:	2003c26c 	.word	0x2003c26c
 8018180:	2003c2d0 	.word	0x2003c2d0

08018184 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8018184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018188:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801818c:	b0a0      	sub	sp, #128	; 0x80
 801818e:	4604      	mov	r4, r0
 8018190:	b193      	cbz	r3, 80181b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018192:	4b30      	ldr	r3, [pc, #192]	; (8018254 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8018194:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018196:	881b      	ldrh	r3, [r3, #0]
 8018198:	428b      	cmp	r3, r1
 801819a:	d90d      	bls.n	80181b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801819c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	dd09      	ble.n	80181b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80181a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	dd05      	ble.n	80181b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80181ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80181b0:	b12b      	cbz	r3, 80181be <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80181b2:	6803      	ldr	r3, [r0, #0]
 80181b4:	695b      	ldr	r3, [r3, #20]
 80181b6:	4798      	blx	r3
 80181b8:	b020      	add	sp, #128	; 0x80
 80181ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181be:	4b26      	ldr	r3, [pc, #152]	; (8018258 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80181c6:	4b25      	ldr	r3, [pc, #148]	; (801825c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80181ce:	4b24      	ldr	r3, [pc, #144]	; (8018260 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80181d0:	6818      	ldr	r0, [r3, #0]
 80181d2:	f7f9 fc95 	bl	8011b00 <_ZNK8touchgfx5Texts7getTextEt>
 80181d6:	4606      	mov	r6, r0
 80181d8:	a807      	add	r0, sp, #28
 80181da:	f004 f8f7 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 80181de:	682b      	ldr	r3, [r5, #0]
 80181e0:	4628      	mov	r0, r5
 80181e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181e4:	4798      	blx	r3
 80181e6:	682b      	ldr	r3, [r5, #0]
 80181e8:	4607      	mov	r7, r0
 80181ea:	4628      	mov	r0, r5
 80181ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80181ee:	4798      	blx	r3
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	4605      	mov	r5, r0
 80181f4:	4620      	mov	r0, r4
 80181f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80181f8:	4798      	blx	r3
 80181fa:	6823      	ldr	r3, [r4, #0]
 80181fc:	4680      	mov	r8, r0
 80181fe:	4620      	mov	r0, r4
 8018200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018204:	4798      	blx	r3
 8018206:	462b      	mov	r3, r5
 8018208:	463a      	mov	r2, r7
 801820a:	4631      	mov	r1, r6
 801820c:	e9cd 8000 	strd	r8, r0, [sp]
 8018210:	a807      	add	r0, sp, #28
 8018212:	f004 f94b 	bl	801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018216:	a807      	add	r0, sp, #28
 8018218:	f004 fd04 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801821c:	280a      	cmp	r0, #10
 801821e:	d103      	bne.n	8018228 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8018220:	6823      	ldr	r3, [r4, #0]
 8018222:	4620      	mov	r0, r4
 8018224:	695b      	ldr	r3, [r3, #20]
 8018226:	e7c6      	b.n	80181b6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8018228:	a807      	add	r0, sp, #28
 801822a:	f004 fcfb 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801822e:	2800      	cmp	r0, #0
 8018230:	d1f4      	bne.n	801821c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8018232:	ad04      	add	r5, sp, #16
 8018234:	4621      	mov	r1, r4
 8018236:	4628      	mov	r0, r5
 8018238:	f7ff fc6c 	bl	8017b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801823c:	ab02      	add	r3, sp, #8
 801823e:	6822      	ldr	r2, [r4, #0]
 8018240:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018244:	6912      	ldr	r2, [r2, #16]
 8018246:	e883 0003 	stmia.w	r3, {r0, r1}
 801824a:	4619      	mov	r1, r3
 801824c:	4620      	mov	r0, r4
 801824e:	4790      	blx	r2
 8018250:	e7b2      	b.n	80181b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8018252:	bf00      	nop
 8018254:	2003c2c8 	.word	0x2003c2c8
 8018258:	2003c2c4 	.word	0x2003c2c4
 801825c:	2003c2cc 	.word	0x2003c2cc
 8018260:	2003c2d0 	.word	0x2003c2d0

08018264 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8018264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018268:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801826a:	4604      	mov	r4, r0
 801826c:	460e      	mov	r6, r1
 801826e:	b08e      	sub	sp, #56	; 0x38
 8018270:	b218      	sxth	r0, r3
 8018272:	8921      	ldrh	r1, [r4, #8]
 8018274:	005b      	lsls	r3, r3, #1
 8018276:	8962      	ldrh	r2, [r4, #10]
 8018278:	f8ad 0000 	strh.w	r0, [sp]
 801827c:	b29b      	uxth	r3, r3
 801827e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8018282:	1ac9      	subs	r1, r1, r3
 8018284:	1ad3      	subs	r3, r2, r3
 8018286:	b209      	sxth	r1, r1
 8018288:	b21b      	sxth	r3, r3
 801828a:	2900      	cmp	r1, #0
 801828c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018290:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018294:	dd5e      	ble.n	8018354 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8018296:	2b00      	cmp	r3, #0
 8018298:	dd5c      	ble.n	8018354 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801829a:	6830      	ldr	r0, [r6, #0]
 801829c:	ab02      	add	r3, sp, #8
 801829e:	6871      	ldr	r1, [r6, #4]
 80182a0:	c303      	stmia	r3!, {r0, r1}
 80182a2:	4669      	mov	r1, sp
 80182a4:	a802      	add	r0, sp, #8
 80182a6:	f7fd fe7d 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 80182aa:	4620      	mov	r0, r4
 80182ac:	a902      	add	r1, sp, #8
 80182ae:	f7ff fed5 	bl	801805c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80182b2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80182b4:	2800      	cmp	r0, #0
 80182b6:	d05f      	beq.n	8018378 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80182b8:	8963      	ldrh	r3, [r4, #10]
 80182ba:	b202      	sxth	r2, r0
 80182bc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80182c0:	2500      	movs	r5, #0
 80182c2:	1a1f      	subs	r7, r3, r0
 80182c4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80182c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80182cc:	b21b      	sxth	r3, r3
 80182ce:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80182d2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80182d6:	af04      	add	r7, sp, #16
 80182d8:	1a09      	subs	r1, r1, r0
 80182da:	9506      	str	r5, [sp, #24]
 80182dc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80182e0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80182e4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80182e8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80182ec:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80182f0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80182f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80182f8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80182fc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018300:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018304:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018308:	ab06      	add	r3, sp, #24
 801830a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801830e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018312:	e887 0003 	stmia.w	r7, {r0, r1}
 8018316:	4631      	mov	r1, r6
 8018318:	4638      	mov	r0, r7
 801831a:	f7fd fe43 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801831e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018322:	2b00      	cmp	r3, #0
 8018324:	dd12      	ble.n	801834c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8018326:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801832a:	2b00      	cmp	r3, #0
 801832c:	dd0e      	ble.n	801834c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801832e:	6823      	ldr	r3, [r4, #0]
 8018330:	4639      	mov	r1, r7
 8018332:	4620      	mov	r0, r4
 8018334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018336:	4798      	blx	r3
 8018338:	f7f6 f954 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801833c:	6803      	ldr	r3, [r0, #0]
 801833e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018340:	4639      	mov	r1, r7
 8018342:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8018346:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801834a:	47c0      	blx	r8
 801834c:	3501      	adds	r5, #1
 801834e:	2d04      	cmp	r5, #4
 8018350:	d1da      	bne.n	8018308 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8018352:	e011      	b.n	8018378 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018354:	6830      	ldr	r0, [r6, #0]
 8018356:	ab06      	add	r3, sp, #24
 8018358:	6871      	ldr	r1, [r6, #4]
 801835a:	c303      	stmia	r3!, {r0, r1}
 801835c:	6823      	ldr	r3, [r4, #0]
 801835e:	a906      	add	r1, sp, #24
 8018360:	4620      	mov	r0, r4
 8018362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018364:	4798      	blx	r3
 8018366:	f7f6 f93d 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801836a:	6803      	ldr	r3, [r0, #0]
 801836c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801836e:	a906      	add	r1, sp, #24
 8018370:	6a1d      	ldr	r5, [r3, #32]
 8018372:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018376:	47a8      	blx	r5
 8018378:	b00e      	add	sp, #56	; 0x38
 801837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801837e <_ZN8touchgfx7OutlineD1Ev>:
 801837e:	4770      	bx	lr

08018380 <_ZN8touchgfx7OutlineD0Ev>:
 8018380:	b510      	push	{r4, lr}
 8018382:	4604      	mov	r4, r0
 8018384:	2130      	movs	r1, #48	; 0x30
 8018386:	f011 f991 	bl	80296ac <_ZdlPvj>
 801838a:	4620      	mov	r0, r4
 801838c:	bd10      	pop	{r4, pc}

0801838e <_ZN8touchgfx7Outline5resetEv>:
 801838e:	b510      	push	{r4, lr}
 8018390:	4604      	mov	r4, r0
 8018392:	f000 fe7b 	bl	801908c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018396:	60e0      	str	r0, [r4, #12]
 8018398:	f000 fe7e 	bl	8019098 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801839c:	68e3      	ldr	r3, [r4, #12]
 801839e:	08c0      	lsrs	r0, r0, #3
 80183a0:	2200      	movs	r2, #0
 80183a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80183a6:	6123      	str	r3, [r4, #16]
 80183a8:	3801      	subs	r0, #1
 80183aa:	60a2      	str	r2, [r4, #8]
 80183ac:	6060      	str	r0, [r4, #4]
 80183ae:	8019      	strh	r1, [r3, #0]
 80183b0:	8059      	strh	r1, [r3, #2]
 80183b2:	809a      	strh	r2, [r3, #4]
 80183b4:	80da      	strh	r2, [r3, #6]
 80183b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80183b8:	f023 0301 	bic.w	r3, r3, #1
 80183bc:	f043 0302 	orr.w	r3, r3, #2
 80183c0:	6263      	str	r3, [r4, #36]	; 0x24
 80183c2:	bd10      	pop	{r4, pc}

080183c4 <_ZN8touchgfx7OutlineC1Ev>:
 80183c4:	4b0a      	ldr	r3, [pc, #40]	; (80183f0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80183c6:	b510      	push	{r4, lr}
 80183c8:	6003      	str	r3, [r0, #0]
 80183ca:	2300      	movs	r3, #0
 80183cc:	4604      	mov	r4, r0
 80183ce:	6243      	str	r3, [r0, #36]	; 0x24
 80183d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80183d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80183d8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80183dc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80183e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80183e4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80183e8:	f7ff ffd1 	bl	801838e <_ZN8touchgfx7Outline5resetEv>
 80183ec:	4620      	mov	r0, r4
 80183ee:	bd10      	pop	{r4, pc}
 80183f0:	08030314 	.word	0x08030314

080183f4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80183f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f8:	b093      	sub	sp, #76	; 0x4c
 80183fa:	1156      	asrs	r6, r2, #5
 80183fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80183fe:	9305      	str	r3, [sp, #20]
 8018400:	1153      	asrs	r3, r2, #5
 8018402:	f004 051f 	and.w	r5, r4, #31
 8018406:	9303      	str	r3, [sp, #12]
 8018408:	1163      	asrs	r3, r4, #5
 801840a:	9504      	str	r5, [sp, #16]
 801840c:	1165      	asrs	r5, r4, #5
 801840e:	9306      	str	r3, [sp, #24]
 8018410:	f002 031f 	and.w	r3, r2, #31
 8018414:	42ae      	cmp	r6, r5
 8018416:	f040 80f4 	bne.w	8018602 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801841a:	9c04      	ldr	r4, [sp, #16]
 801841c:	9a05      	ldr	r2, [sp, #20]
 801841e:	42a3      	cmp	r3, r4
 8018420:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018424:	6902      	ldr	r2, [r0, #16]
 8018426:	d125      	bne.n	8018474 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018428:	f9b2 3000 	ldrsh.w	r3, [r2]
 801842c:	459e      	cmp	lr, r3
 801842e:	d103      	bne.n	8018438 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8018430:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018434:	429e      	cmp	r6, r3
 8018436:	d035      	beq.n	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018438:	88d1      	ldrh	r1, [r2, #6]
 801843a:	8893      	ldrh	r3, [r2, #4]
 801843c:	430b      	orrs	r3, r1
 801843e:	d010      	beq.n	8018462 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018440:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018444:	2b00      	cmp	r3, #0
 8018446:	db0c      	blt.n	8018462 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018448:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801844a:	428b      	cmp	r3, r1
 801844c:	da09      	bge.n	8018462 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801844e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018452:	428b      	cmp	r3, r1
 8018454:	f103 0301 	add.w	r3, r3, #1
 8018458:	bf38      	it	cc
 801845a:	3208      	addcc	r2, #8
 801845c:	6083      	str	r3, [r0, #8]
 801845e:	bf38      	it	cc
 8018460:	6102      	strcc	r2, [r0, #16]
 8018462:	6903      	ldr	r3, [r0, #16]
 8018464:	9a03      	ldr	r2, [sp, #12]
 8018466:	f8a3 e000 	strh.w	lr, [r3]
 801846a:	805a      	strh	r2, [r3, #2]
 801846c:	2200      	movs	r2, #0
 801846e:	809a      	strh	r2, [r3, #4]
 8018470:	80da      	strh	r2, [r3, #6]
 8018472:	e017      	b.n	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018474:	9c05      	ldr	r4, [sp, #20]
 8018476:	114e      	asrs	r6, r1, #5
 8018478:	f001 0c1f 	and.w	ip, r1, #31
 801847c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018480:	f004 041f 	and.w	r4, r4, #31
 8018484:	4576      	cmp	r6, lr
 8018486:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801848a:	9402      	str	r4, [sp, #8]
 801848c:	9c04      	ldr	r4, [sp, #16]
 801848e:	eba4 0403 	sub.w	r4, r4, r3
 8018492:	d10a      	bne.n	80184aa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8018494:	9b02      	ldr	r3, [sp, #8]
 8018496:	44a0      	add	r8, r4
 8018498:	449c      	add	ip, r3
 801849a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801849e:	fb04 a40c 	mla	r4, r4, ip, sl
 80184a2:	80d4      	strh	r4, [r2, #6]
 80184a4:	b013      	add	sp, #76	; 0x4c
 80184a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184aa:	9d05      	ldr	r5, [sp, #20]
 80184ac:	1a69      	subs	r1, r5, r1
 80184ae:	bf51      	iteee	pl
 80184b0:	f1cc 0520 	rsbpl	r5, ip, #32
 80184b4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80184b8:	4249      	negmi	r1, r1
 80184ba:	2500      	movmi	r5, #0
 80184bc:	bf5d      	ittte	pl
 80184be:	436c      	mulpl	r4, r5
 80184c0:	2520      	movpl	r5, #32
 80184c2:	f04f 0901 	movpl.w	r9, #1
 80184c6:	f04f 39ff 	movmi.w	r9, #4294967295
 80184ca:	9501      	str	r5, [sp, #4]
 80184cc:	9f01      	ldr	r7, [sp, #4]
 80184ce:	444e      	add	r6, r9
 80184d0:	fb94 f5f1 	sdiv	r5, r4, r1
 80184d4:	fb01 4415 	mls	r4, r1, r5, r4
 80184d8:	44bc      	add	ip, r7
 80184da:	2c00      	cmp	r4, #0
 80184dc:	bfbc      	itt	lt
 80184de:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80184e2:	1864      	addlt	r4, r4, r1
 80184e4:	44a8      	add	r8, r5
 80184e6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80184ea:	f8a2 8004 	strh.w	r8, [r2, #4]
 80184ee:	f8a2 c006 	strh.w	ip, [r2, #6]
 80184f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80184f6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80184fa:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80184fe:	ea58 0202 	orrs.w	r2, r8, r2
 8018502:	d011      	beq.n	8018528 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018504:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018508:	f1b8 0f00 	cmp.w	r8, #0
 801850c:	db0c      	blt.n	8018528 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801850e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018510:	4590      	cmp	r8, r2
 8018512:	da09      	bge.n	8018528 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018514:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018518:	4590      	cmp	r8, r2
 801851a:	bf3c      	itt	cc
 801851c:	f10c 0208 	addcc.w	r2, ip, #8
 8018520:	6102      	strcc	r2, [r0, #16]
 8018522:	f108 0201 	add.w	r2, r8, #1
 8018526:	6082      	str	r2, [r0, #8]
 8018528:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801852c:	2700      	movs	r7, #0
 801852e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018532:	45b6      	cmp	lr, r6
 8018534:	f8ac 6000 	strh.w	r6, [ip]
 8018538:	442b      	add	r3, r5
 801853a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801853e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018542:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018546:	d04b      	beq.n	80185e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018548:	9f04      	ldr	r7, [sp, #16]
 801854a:	1a64      	subs	r4, r4, r1
 801854c:	f04f 0a00 	mov.w	sl, #0
 8018550:	1aff      	subs	r7, r7, r3
 8018552:	443d      	add	r5, r7
 8018554:	016d      	lsls	r5, r5, #5
 8018556:	fb95 f8f1 	sdiv	r8, r5, r1
 801855a:	fb01 5518 	mls	r5, r1, r8, r5
 801855e:	2d00      	cmp	r5, #0
 8018560:	bfbc      	itt	lt
 8018562:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018566:	186d      	addlt	r5, r5, r1
 8018568:	f108 0701 	add.w	r7, r8, #1
 801856c:	9703      	str	r7, [sp, #12]
 801856e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018572:	1964      	adds	r4, r4, r5
 8018574:	444e      	add	r6, r9
 8018576:	bf54      	ite	pl
 8018578:	9f03      	ldrpl	r7, [sp, #12]
 801857a:	4647      	movmi	r7, r8
 801857c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018580:	bf58      	it	pl
 8018582:	1a64      	subpl	r4, r4, r1
 8018584:	443b      	add	r3, r7
 8018586:	44bb      	add	fp, r7
 8018588:	f8ac b004 	strh.w	fp, [ip, #4]
 801858c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018590:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018594:	f8ac b006 	strh.w	fp, [ip, #6]
 8018598:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801859c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80185a0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80185a4:	ea5b 0707 	orrs.w	r7, fp, r7
 80185a8:	d011      	beq.n	80185ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80185aa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80185ae:	f1bb 0f00 	cmp.w	fp, #0
 80185b2:	db0c      	blt.n	80185ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80185b4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80185b6:	45bb      	cmp	fp, r7
 80185b8:	da09      	bge.n	80185ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80185ba:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80185be:	45bb      	cmp	fp, r7
 80185c0:	bf3c      	itt	cc
 80185c2:	f10c 0708 	addcc.w	r7, ip, #8
 80185c6:	6107      	strcc	r7, [r0, #16]
 80185c8:	f10b 0701 	add.w	r7, fp, #1
 80185cc:	6087      	str	r7, [r0, #8]
 80185ce:	6907      	ldr	r7, [r0, #16]
 80185d0:	45b6      	cmp	lr, r6
 80185d2:	803e      	strh	r6, [r7, #0]
 80185d4:	807a      	strh	r2, [r7, #2]
 80185d6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80185da:	f8a7 a006 	strh.w	sl, [r7, #6]
 80185de:	d1c6      	bne.n	801856e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80185e0:	9a04      	ldr	r2, [sp, #16]
 80185e2:	1ad3      	subs	r3, r2, r3
 80185e4:	6902      	ldr	r2, [r0, #16]
 80185e6:	8891      	ldrh	r1, [r2, #4]
 80185e8:	88d6      	ldrh	r6, [r2, #6]
 80185ea:	4419      	add	r1, r3
 80185ec:	8091      	strh	r1, [r2, #4]
 80185ee:	9902      	ldr	r1, [sp, #8]
 80185f0:	f101 0c20 	add.w	ip, r1, #32
 80185f4:	9901      	ldr	r1, [sp, #4]
 80185f6:	ebac 0c01 	sub.w	ip, ip, r1
 80185fa:	fb03 630c 	mla	r3, r3, ip, r6
 80185fe:	80d3      	strh	r3, [r2, #6]
 8018600:	e750      	b.n	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018602:	9d05      	ldr	r5, [sp, #20]
 8018604:	1aa2      	subs	r2, r4, r2
 8018606:	eba5 0501 	sub.w	r5, r5, r1
 801860a:	9202      	str	r2, [sp, #8]
 801860c:	9508      	str	r5, [sp, #32]
 801860e:	f140 8128 	bpl.w	8018862 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018612:	9a03      	ldr	r2, [sp, #12]
 8018614:	2a00      	cmp	r2, #0
 8018616:	f6ff af45 	blt.w	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801861a:	9a02      	ldr	r2, [sp, #8]
 801861c:	f04f 34ff 	mov.w	r4, #4294967295
 8018620:	4252      	negs	r2, r2
 8018622:	940b      	str	r4, [sp, #44]	; 0x2c
 8018624:	2400      	movs	r4, #0
 8018626:	9202      	str	r2, [sp, #8]
 8018628:	9a06      	ldr	r2, [sp, #24]
 801862a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801862e:	9206      	str	r2, [sp, #24]
 8018630:	462a      	mov	r2, r5
 8018632:	435a      	muls	r2, r3
 8018634:	9401      	str	r4, [sp, #4]
 8018636:	9c02      	ldr	r4, [sp, #8]
 8018638:	9d02      	ldr	r5, [sp, #8]
 801863a:	fb92 f4f4 	sdiv	r4, r2, r4
 801863e:	fb05 2214 	mls	r2, r5, r4, r2
 8018642:	2a00      	cmp	r2, #0
 8018644:	9207      	str	r2, [sp, #28]
 8018646:	bfbc      	itt	lt
 8018648:	1952      	addlt	r2, r2, r5
 801864a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801864e:	6905      	ldr	r5, [r0, #16]
 8018650:	bfb8      	it	lt
 8018652:	9207      	strlt	r2, [sp, #28]
 8018654:	eb04 0901 	add.w	r9, r4, r1
 8018658:	9a01      	ldr	r2, [sp, #4]
 801865a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801865e:	429a      	cmp	r2, r3
 8018660:	f040 8111 	bne.w	8018886 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018664:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018668:	429e      	cmp	r6, r3
 801866a:	d104      	bne.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801866c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018670:	9a03      	ldr	r2, [sp, #12]
 8018672:	429a      	cmp	r2, r3
 8018674:	d01b      	beq.n	80186ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018676:	88ea      	ldrh	r2, [r5, #6]
 8018678:	88ab      	ldrh	r3, [r5, #4]
 801867a:	4313      	orrs	r3, r2
 801867c:	d010      	beq.n	80186a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801867e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018682:	2a00      	cmp	r2, #0
 8018684:	db0c      	blt.n	80186a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018686:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018688:	429a      	cmp	r2, r3
 801868a:	da09      	bge.n	80186a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801868c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018690:	429a      	cmp	r2, r3
 8018692:	f102 0201 	add.w	r2, r2, #1
 8018696:	bf38      	it	cc
 8018698:	3508      	addcc	r5, #8
 801869a:	6082      	str	r2, [r0, #8]
 801869c:	bf38      	it	cc
 801869e:	6105      	strcc	r5, [r0, #16]
 80186a0:	6903      	ldr	r3, [r0, #16]
 80186a2:	9a03      	ldr	r2, [sp, #12]
 80186a4:	801e      	strh	r6, [r3, #0]
 80186a6:	805a      	strh	r2, [r3, #2]
 80186a8:	2200      	movs	r2, #0
 80186aa:	809a      	strh	r2, [r3, #4]
 80186ac:	80da      	strh	r2, [r3, #6]
 80186ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186b0:	9a03      	ldr	r2, [sp, #12]
 80186b2:	6901      	ldr	r1, [r0, #16]
 80186b4:	441a      	add	r2, r3
 80186b6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80186ba:	42b3      	cmp	r3, r6
 80186bc:	d103      	bne.n	80186c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80186be:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d01a      	beq.n	80186fc <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80186c6:	88cc      	ldrh	r4, [r1, #6]
 80186c8:	888b      	ldrh	r3, [r1, #4]
 80186ca:	4323      	orrs	r3, r4
 80186cc:	d010      	beq.n	80186f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80186ce:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80186d2:	2c00      	cmp	r4, #0
 80186d4:	db0c      	blt.n	80186f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80186d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80186d8:	429c      	cmp	r4, r3
 80186da:	da09      	bge.n	80186f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80186dc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80186e0:	429c      	cmp	r4, r3
 80186e2:	f104 0401 	add.w	r4, r4, #1
 80186e6:	bf38      	it	cc
 80186e8:	3108      	addcc	r1, #8
 80186ea:	6084      	str	r4, [r0, #8]
 80186ec:	bf38      	it	cc
 80186ee:	6101      	strcc	r1, [r0, #16]
 80186f0:	6903      	ldr	r3, [r0, #16]
 80186f2:	2100      	movs	r1, #0
 80186f4:	801e      	strh	r6, [r3, #0]
 80186f6:	805a      	strh	r2, [r3, #2]
 80186f8:	8099      	strh	r1, [r3, #4]
 80186fa:	80d9      	strh	r1, [r3, #6]
 80186fc:	9b06      	ldr	r3, [sp, #24]
 80186fe:	4293      	cmp	r3, r2
 8018700:	f000 8082 	beq.w	8018808 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018704:	9b08      	ldr	r3, [sp, #32]
 8018706:	9902      	ldr	r1, [sp, #8]
 8018708:	015b      	lsls	r3, r3, #5
 801870a:	9c02      	ldr	r4, [sp, #8]
 801870c:	fb93 f1f1 	sdiv	r1, r3, r1
 8018710:	fb04 3311 	mls	r3, r4, r1, r3
 8018714:	9103      	str	r1, [sp, #12]
 8018716:	2b00      	cmp	r3, #0
 8018718:	9308      	str	r3, [sp, #32]
 801871a:	da04      	bge.n	8018726 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801871c:	1e4b      	subs	r3, r1, #1
 801871e:	9303      	str	r3, [sp, #12]
 8018720:	9b08      	ldr	r3, [sp, #32]
 8018722:	4423      	add	r3, r4
 8018724:	9308      	str	r3, [sp, #32]
 8018726:	9b07      	ldr	r3, [sp, #28]
 8018728:	464f      	mov	r7, r9
 801872a:	9902      	ldr	r1, [sp, #8]
 801872c:	2600      	movs	r6, #0
 801872e:	1a5b      	subs	r3, r3, r1
 8018730:	9307      	str	r3, [sp, #28]
 8018732:	9b01      	ldr	r3, [sp, #4]
 8018734:	f1c3 0320 	rsb	r3, r3, #32
 8018738:	930e      	str	r3, [sp, #56]	; 0x38
 801873a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801873c:	9b01      	ldr	r3, [sp, #4]
 801873e:	1a5b      	subs	r3, r3, r1
 8018740:	930a      	str	r3, [sp, #40]	; 0x28
 8018742:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018746:	185b      	adds	r3, r3, r1
 8018748:	bf58      	it	pl
 801874a:	9902      	ldrpl	r1, [sp, #8]
 801874c:	9307      	str	r3, [sp, #28]
 801874e:	bf57      	itett	pl
 8018750:	1a5b      	subpl	r3, r3, r1
 8018752:	9903      	ldrmi	r1, [sp, #12]
 8018754:	9307      	strpl	r3, [sp, #28]
 8018756:	9b03      	ldrpl	r3, [sp, #12]
 8018758:	bf58      	it	pl
 801875a:	1c59      	addpl	r1, r3, #1
 801875c:	2a00      	cmp	r2, #0
 801875e:	4489      	add	r9, r1
 8018760:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018764:	db2e      	blt.n	80187c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018766:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018768:	4293      	cmp	r3, r2
 801876a:	dd2b      	ble.n	80187c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801876c:	9c01      	ldr	r4, [sp, #4]
 801876e:	6905      	ldr	r5, [r0, #16]
 8018770:	46a0      	mov	r8, r4
 8018772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018774:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018778:	45a0      	cmp	r8, r4
 801877a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801877e:	f040 814c 	bne.w	8018a1a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018782:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018786:	4551      	cmp	r1, sl
 8018788:	d103      	bne.n	8018792 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801878a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801878e:	4291      	cmp	r1, r2
 8018790:	d018      	beq.n	80187c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018792:	ea5c 010e 	orrs.w	r1, ip, lr
 8018796:	d00f      	beq.n	80187b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018798:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801879c:	2900      	cmp	r1, #0
 801879e:	db0b      	blt.n	80187b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80187a0:	428b      	cmp	r3, r1
 80187a2:	dd09      	ble.n	80187b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80187a4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80187a8:	4299      	cmp	r1, r3
 80187aa:	f101 0101 	add.w	r1, r1, #1
 80187ae:	bf38      	it	cc
 80187b0:	3508      	addcc	r5, #8
 80187b2:	6081      	str	r1, [r0, #8]
 80187b4:	bf38      	it	cc
 80187b6:	6105      	strcc	r5, [r0, #16]
 80187b8:	6903      	ldr	r3, [r0, #16]
 80187ba:	f8a3 a000 	strh.w	sl, [r3]
 80187be:	805a      	strh	r2, [r3, #2]
 80187c0:	809e      	strh	r6, [r3, #4]
 80187c2:	80de      	strh	r6, [r3, #6]
 80187c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187c6:	6901      	ldr	r1, [r0, #16]
 80187c8:	441a      	add	r2, r3
 80187ca:	88cc      	ldrh	r4, [r1, #6]
 80187cc:	888b      	ldrh	r3, [r1, #4]
 80187ce:	4323      	orrs	r3, r4
 80187d0:	d010      	beq.n	80187f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80187d2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80187d6:	2c00      	cmp	r4, #0
 80187d8:	db0c      	blt.n	80187f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80187da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80187dc:	429c      	cmp	r4, r3
 80187de:	da09      	bge.n	80187f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80187e0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80187e4:	429c      	cmp	r4, r3
 80187e6:	f104 0401 	add.w	r4, r4, #1
 80187ea:	bf38      	it	cc
 80187ec:	3108      	addcc	r1, #8
 80187ee:	6084      	str	r4, [r0, #8]
 80187f0:	bf38      	it	cc
 80187f2:	6101      	strcc	r1, [r0, #16]
 80187f4:	6903      	ldr	r3, [r0, #16]
 80187f6:	464f      	mov	r7, r9
 80187f8:	f8a3 a000 	strh.w	sl, [r3]
 80187fc:	805a      	strh	r2, [r3, #2]
 80187fe:	809e      	strh	r6, [r3, #4]
 8018800:	80de      	strh	r6, [r3, #6]
 8018802:	9b06      	ldr	r3, [sp, #24]
 8018804:	4293      	cmp	r3, r2
 8018806:	d19c      	bne.n	8018742 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018808:	9b01      	ldr	r3, [sp, #4]
 801880a:	6907      	ldr	r7, [r0, #16]
 801880c:	f1c3 0620 	rsb	r6, r3, #32
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018816:	9b04      	ldr	r3, [sp, #16]
 8018818:	429e      	cmp	r6, r3
 801881a:	f040 81c7 	bne.w	8018bac <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801881e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018822:	459e      	cmp	lr, r3
 8018824:	d104      	bne.n	8018830 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018826:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801882a:	429a      	cmp	r2, r3
 801882c:	f43f ae3a 	beq.w	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018830:	88f9      	ldrh	r1, [r7, #6]
 8018832:	88bb      	ldrh	r3, [r7, #4]
 8018834:	430b      	orrs	r3, r1
 8018836:	d010      	beq.n	801885a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801883c:	2b00      	cmp	r3, #0
 801883e:	db0c      	blt.n	801885a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018840:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018842:	428b      	cmp	r3, r1
 8018844:	da09      	bge.n	801885a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018846:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801884a:	428b      	cmp	r3, r1
 801884c:	f103 0301 	add.w	r3, r3, #1
 8018850:	bf38      	it	cc
 8018852:	3708      	addcc	r7, #8
 8018854:	6083      	str	r3, [r0, #8]
 8018856:	bf38      	it	cc
 8018858:	6107      	strcc	r7, [r0, #16]
 801885a:	6903      	ldr	r3, [r0, #16]
 801885c:	f8a3 e000 	strh.w	lr, [r3]
 8018860:	e603      	b.n	801846a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018862:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018864:	9c03      	ldr	r4, [sp, #12]
 8018866:	42a2      	cmp	r2, r4
 8018868:	f6ff ae1c 	blt.w	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801886c:	9c06      	ldr	r4, [sp, #24]
 801886e:	42a2      	cmp	r2, r4
 8018870:	9c08      	ldr	r4, [sp, #32]
 8018872:	bfbc      	itt	lt
 8018874:	3201      	addlt	r2, #1
 8018876:	9206      	strlt	r2, [sp, #24]
 8018878:	f1c3 0220 	rsb	r2, r3, #32
 801887c:	4362      	muls	r2, r4
 801887e:	2401      	movs	r4, #1
 8018880:	940b      	str	r4, [sp, #44]	; 0x2c
 8018882:	2420      	movs	r4, #32
 8018884:	e6d6      	b.n	8018634 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018886:	ea4f 1861 	mov.w	r8, r1, asr #5
 801888a:	f009 021f 	and.w	r2, r9, #31
 801888e:	f001 011f 	and.w	r1, r1, #31
 8018892:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018896:	920c      	str	r2, [sp, #48]	; 0x30
 8018898:	45b0      	cmp	r8, r6
 801889a:	9a01      	ldr	r2, [sp, #4]
 801889c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80188a0:	eba2 0203 	sub.w	r2, r2, r3
 80188a4:	d108      	bne.n	80188b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80188a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188a8:	4496      	add	lr, r2
 80188aa:	4419      	add	r1, r3
 80188ac:	f8a5 e004 	strh.w	lr, [r5, #4]
 80188b0:	fb02 a101 	mla	r1, r2, r1, sl
 80188b4:	80e9      	strh	r1, [r5, #6]
 80188b6:	e6fa      	b.n	80186ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80188b8:	2c00      	cmp	r4, #0
 80188ba:	f2c0 80a7 	blt.w	8018a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80188be:	2701      	movs	r7, #1
 80188c0:	f1c1 0c20 	rsb	ip, r1, #32
 80188c4:	970a      	str	r7, [sp, #40]	; 0x28
 80188c6:	2720      	movs	r7, #32
 80188c8:	fb02 f20c 	mul.w	r2, r2, ip
 80188cc:	9709      	str	r7, [sp, #36]	; 0x24
 80188ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80188d0:	fb92 fcf4 	sdiv	ip, r2, r4
 80188d4:	fb04 221c 	mls	r2, r4, ip, r2
 80188d8:	4439      	add	r1, r7
 80188da:	2a00      	cmp	r2, #0
 80188dc:	bfbc      	itt	lt
 80188de:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80188e2:	1912      	addlt	r2, r2, r4
 80188e4:	fb0c a101 	mla	r1, ip, r1, sl
 80188e8:	44e6      	add	lr, ip
 80188ea:	80e9      	strh	r1, [r5, #6]
 80188ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80188ee:	f8a5 e004 	strh.w	lr, [r5, #4]
 80188f2:	eb08 0501 	add.w	r5, r8, r1
 80188f6:	6901      	ldr	r1, [r0, #16]
 80188f8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80188fc:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018900:	ea58 070e 	orrs.w	r7, r8, lr
 8018904:	d010      	beq.n	8018928 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018906:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801890a:	f1be 0f00 	cmp.w	lr, #0
 801890e:	db0b      	blt.n	8018928 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018910:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018912:	45be      	cmp	lr, r7
 8018914:	da08      	bge.n	8018928 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018916:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801891a:	45be      	cmp	lr, r7
 801891c:	bf3c      	itt	cc
 801891e:	3108      	addcc	r1, #8
 8018920:	6101      	strcc	r1, [r0, #16]
 8018922:	f10e 0101 	add.w	r1, lr, #1
 8018926:	6081      	str	r1, [r0, #8]
 8018928:	6901      	ldr	r1, [r0, #16]
 801892a:	f04f 0e00 	mov.w	lr, #0
 801892e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018932:	42ae      	cmp	r6, r5
 8018934:	800d      	strh	r5, [r1, #0]
 8018936:	4463      	add	r3, ip
 8018938:	f8a1 8002 	strh.w	r8, [r1, #2]
 801893c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018940:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018944:	d053      	beq.n	80189ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018946:	9901      	ldr	r1, [sp, #4]
 8018948:	1b12      	subs	r2, r2, r4
 801894a:	1ac9      	subs	r1, r1, r3
 801894c:	4461      	add	r1, ip
 801894e:	0149      	lsls	r1, r1, #5
 8018950:	fb91 fef4 	sdiv	lr, r1, r4
 8018954:	fb04 111e 	mls	r1, r4, lr, r1
 8018958:	2900      	cmp	r1, #0
 801895a:	bfbc      	itt	lt
 801895c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018960:	1909      	addlt	r1, r1, r4
 8018962:	f10e 0701 	add.w	r7, lr, #1
 8018966:	970d      	str	r7, [sp, #52]	; 0x34
 8018968:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801896c:	1852      	adds	r2, r2, r1
 801896e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018970:	bf54      	ite	pl
 8018972:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8018976:	46f4      	movmi	ip, lr
 8018978:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801897c:	bf58      	it	pl
 801897e:	1b12      	subpl	r2, r2, r4
 8018980:	4463      	add	r3, ip
 8018982:	443d      	add	r5, r7
 8018984:	44e3      	add	fp, ip
 8018986:	f8aa b004 	strh.w	fp, [sl, #4]
 801898a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801898e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8018992:	f8aa b006 	strh.w	fp, [sl, #6]
 8018996:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801899a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801899e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80189a2:	ea5b 070a 	orrs.w	r7, fp, sl
 80189a6:	d014      	beq.n	80189d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80189a8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80189ac:	f1ba 0f00 	cmp.w	sl, #0
 80189b0:	db0f      	blt.n	80189d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80189b2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80189b4:	45ba      	cmp	sl, r7
 80189b6:	da0c      	bge.n	80189d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80189b8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80189bc:	45ba      	cmp	sl, r7
 80189be:	f10a 0a01 	add.w	sl, sl, #1
 80189c2:	bf38      	it	cc
 80189c4:	f10c 0c08 	addcc.w	ip, ip, #8
 80189c8:	f8c0 a008 	str.w	sl, [r0, #8]
 80189cc:	bf38      	it	cc
 80189ce:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80189d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80189d6:	f04f 0700 	mov.w	r7, #0
 80189da:	42ae      	cmp	r6, r5
 80189dc:	f8ac 5000 	strh.w	r5, [ip]
 80189e0:	f8ac 8002 	strh.w	r8, [ip, #2]
 80189e4:	f8ac 7004 	strh.w	r7, [ip, #4]
 80189e8:	f8ac 7006 	strh.w	r7, [ip, #6]
 80189ec:	d1bc      	bne.n	8018968 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80189ee:	6904      	ldr	r4, [r0, #16]
 80189f0:	9a01      	ldr	r2, [sp, #4]
 80189f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189f4:	1ad3      	subs	r3, r2, r3
 80189f6:	88a2      	ldrh	r2, [r4, #4]
 80189f8:	3120      	adds	r1, #32
 80189fa:	441a      	add	r2, r3
 80189fc:	80a2      	strh	r2, [r4, #4]
 80189fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a00:	1a89      	subs	r1, r1, r2
 8018a02:	88e2      	ldrh	r2, [r4, #6]
 8018a04:	fb03 2301 	mla	r3, r3, r1, r2
 8018a08:	80e3      	strh	r3, [r4, #6]
 8018a0a:	e650      	b.n	80186ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8018a10:	434a      	muls	r2, r1
 8018a12:	4264      	negs	r4, r4
 8018a14:	970a      	str	r7, [sp, #40]	; 0x28
 8018a16:	2700      	movs	r7, #0
 8018a18:	e758      	b.n	80188cc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8018a1a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8018a1e:	f009 031f 	and.w	r3, r9, #31
 8018a22:	f007 071f 	and.w	r7, r7, #31
 8018a26:	fa1f fc8c 	uxth.w	ip, ip
 8018a2a:	45d0      	cmp	r8, sl
 8018a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a2e:	fa1f fe8e 	uxth.w	lr, lr
 8018a32:	d10a      	bne.n	8018a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a36:	449c      	add	ip, r3
 8018a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a3a:	441f      	add	r7, r3
 8018a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a3e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018a42:	fb03 e707 	mla	r7, r3, r7, lr
 8018a46:	80ef      	strh	r7, [r5, #6]
 8018a48:	e6bc      	b.n	80187c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018a4a:	2900      	cmp	r1, #0
 8018a4c:	f2c0 80a6 	blt.w	8018b9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018a52:	f1c7 0320 	rsb	r3, r7, #32
 8018a56:	4363      	muls	r3, r4
 8018a58:	2401      	movs	r4, #1
 8018a5a:	940d      	str	r4, [sp, #52]	; 0x34
 8018a5c:	2420      	movs	r4, #32
 8018a5e:	940c      	str	r4, [sp, #48]	; 0x30
 8018a60:	fb93 f4f1 	sdiv	r4, r3, r1
 8018a64:	fb01 3b14 	mls	fp, r1, r4, r3
 8018a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a6a:	f1bb 0f00 	cmp.w	fp, #0
 8018a6e:	441f      	add	r7, r3
 8018a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a72:	bfbc      	itt	lt
 8018a74:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018a78:	448b      	addlt	fp, r1
 8018a7a:	fb04 e707 	mla	r7, r4, r7, lr
 8018a7e:	44a4      	add	ip, r4
 8018a80:	80ef      	strh	r7, [r5, #6]
 8018a82:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018a86:	eb08 0503 	add.w	r5, r8, r3
 8018a8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a8e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018a92:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018a96:	ea5e 0307 	orrs.w	r3, lr, r7
 8018a9a:	d011      	beq.n	8018ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018a9c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018aa0:	f1be 0f00 	cmp.w	lr, #0
 8018aa4:	db0c      	blt.n	8018ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018aa6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018aa8:	45be      	cmp	lr, r7
 8018aaa:	da09      	bge.n	8018ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018aac:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018ab0:	45be      	cmp	lr, r7
 8018ab2:	bf3c      	itt	cc
 8018ab4:	f10c 0708 	addcc.w	r7, ip, #8
 8018ab8:	6107      	strcc	r7, [r0, #16]
 8018aba:	f10e 0701 	add.w	r7, lr, #1
 8018abe:	6087      	str	r7, [r0, #8]
 8018ac0:	6907      	ldr	r7, [r0, #16]
 8018ac2:	b213      	sxth	r3, r2
 8018ac4:	4555      	cmp	r5, sl
 8018ac6:	9310      	str	r3, [sp, #64]	; 0x40
 8018ac8:	807b      	strh	r3, [r7, #2]
 8018aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018acc:	803d      	strh	r5, [r7, #0]
 8018ace:	80be      	strh	r6, [r7, #4]
 8018ad0:	eb04 0c03 	add.w	ip, r4, r3
 8018ad4:	80fe      	strh	r6, [r7, #6]
 8018ad6:	d050      	beq.n	8018b7a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	eba3 070c 	sub.w	r7, r3, ip
 8018ade:	ebab 0301 	sub.w	r3, fp, r1
 8018ae2:	443c      	add	r4, r7
 8018ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ae6:	0164      	lsls	r4, r4, #5
 8018ae8:	fb94 f8f1 	sdiv	r8, r4, r1
 8018aec:	fb01 4418 	mls	r4, r1, r8, r4
 8018af0:	2c00      	cmp	r4, #0
 8018af2:	bfbc      	itt	lt
 8018af4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018af8:	1864      	addlt	r4, r4, r1
 8018afa:	f108 0701 	add.w	r7, r8, #1
 8018afe:	9711      	str	r7, [sp, #68]	; 0x44
 8018b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b02:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018b06:	191b      	adds	r3, r3, r4
 8018b08:	f8be b004 	ldrh.w	fp, [lr, #4]
 8018b0c:	bf54      	ite	pl
 8018b0e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8018b10:	4647      	movmi	r7, r8
 8018b12:	9309      	str	r3, [sp, #36]	; 0x24
 8018b14:	bf58      	it	pl
 8018b16:	1a5b      	subpl	r3, r3, r1
 8018b18:	44bb      	add	fp, r7
 8018b1a:	44bc      	add	ip, r7
 8018b1c:	bf58      	it	pl
 8018b1e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8018b20:	f8ae b004 	strh.w	fp, [lr, #4]
 8018b24:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018b28:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018b2e:	f8ae b006 	strh.w	fp, [lr, #6]
 8018b32:	443d      	add	r5, r7
 8018b34:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018b38:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018b3c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8018b40:	ea5b 0307 	orrs.w	r3, fp, r7
 8018b44:	d011      	beq.n	8018b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018b46:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8018b4a:	f1bb 0f00 	cmp.w	fp, #0
 8018b4e:	db0c      	blt.n	8018b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018b50:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018b52:	45bb      	cmp	fp, r7
 8018b54:	da09      	bge.n	8018b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018b56:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018b5a:	45bb      	cmp	fp, r7
 8018b5c:	bf3c      	itt	cc
 8018b5e:	f10e 0708 	addcc.w	r7, lr, #8
 8018b62:	6107      	strcc	r7, [r0, #16]
 8018b64:	f10b 0701 	add.w	r7, fp, #1
 8018b68:	6087      	str	r7, [r0, #8]
 8018b6a:	6907      	ldr	r7, [r0, #16]
 8018b6c:	4555      	cmp	r5, sl
 8018b6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b70:	803d      	strh	r5, [r7, #0]
 8018b72:	807b      	strh	r3, [r7, #2]
 8018b74:	80be      	strh	r6, [r7, #4]
 8018b76:	80fe      	strh	r6, [r7, #6]
 8018b78:	d1c2      	bne.n	8018b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8018b7a:	9b01      	ldr	r3, [sp, #4]
 8018b7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018b7e:	eba3 0c0c 	sub.w	ip, r3, ip
 8018b82:	6903      	ldr	r3, [r0, #16]
 8018b84:	3720      	adds	r7, #32
 8018b86:	8899      	ldrh	r1, [r3, #4]
 8018b88:	4461      	add	r1, ip
 8018b8a:	8099      	strh	r1, [r3, #4]
 8018b8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018b8e:	1a7f      	subs	r7, r7, r1
 8018b90:	88d9      	ldrh	r1, [r3, #6]
 8018b92:	fb0c 1c07 	mla	ip, ip, r7, r1
 8018b96:	f8a3 c006 	strh.w	ip, [r3, #6]
 8018b9a:	e613      	b.n	80187c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8018ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ba2:	4249      	negs	r1, r1
 8018ba4:	940d      	str	r4, [sp, #52]	; 0x34
 8018ba6:	2400      	movs	r4, #0
 8018ba8:	437b      	muls	r3, r7
 8018baa:	e758      	b.n	8018a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8018bac:	9905      	ldr	r1, [sp, #20]
 8018bae:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8018bb2:	f009 0c1f 	and.w	ip, r9, #31
 8018bb6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8018bba:	f001 011f 	and.w	r1, r1, #31
 8018bbe:	45f3      	cmp	fp, lr
 8018bc0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8018bc4:	9102      	str	r1, [sp, #8]
 8018bc6:	9904      	ldr	r1, [sp, #16]
 8018bc8:	eba1 0406 	sub.w	r4, r1, r6
 8018bcc:	d108      	bne.n	8018be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8018bce:	9b02      	ldr	r3, [sp, #8]
 8018bd0:	44a0      	add	r8, r4
 8018bd2:	449c      	add	ip, r3
 8018bd4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018bd8:	fb04 a40c 	mla	r4, r4, ip, sl
 8018bdc:	80fc      	strh	r4, [r7, #6]
 8018bde:	e461      	b.n	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018be0:	9905      	ldr	r1, [sp, #20]
 8018be2:	ebb1 0109 	subs.w	r1, r1, r9
 8018be6:	bf51      	iteee	pl
 8018be8:	f1cc 0520 	rsbpl	r5, ip, #32
 8018bec:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018bf0:	4249      	negmi	r1, r1
 8018bf2:	2500      	movmi	r5, #0
 8018bf4:	bf5d      	ittte	pl
 8018bf6:	436c      	mulpl	r4, r5
 8018bf8:	2520      	movpl	r5, #32
 8018bfa:	f04f 0901 	movpl.w	r9, #1
 8018bfe:	f04f 39ff 	movmi.w	r9, #4294967295
 8018c02:	9501      	str	r5, [sp, #4]
 8018c04:	9b01      	ldr	r3, [sp, #4]
 8018c06:	fb94 f5f1 	sdiv	r5, r4, r1
 8018c0a:	fb01 4415 	mls	r4, r1, r5, r4
 8018c0e:	449c      	add	ip, r3
 8018c10:	eb0b 0309 	add.w	r3, fp, r9
 8018c14:	2c00      	cmp	r4, #0
 8018c16:	bfbc      	itt	lt
 8018c18:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018c1c:	1864      	addlt	r4, r4, r1
 8018c1e:	44a8      	add	r8, r5
 8018c20:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018c24:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018c28:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018c2c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c30:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018c34:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018c38:	ea58 0707 	orrs.w	r7, r8, r7
 8018c3c:	d011      	beq.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018c3e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018c42:	f1b8 0f00 	cmp.w	r8, #0
 8018c46:	db0c      	blt.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018c48:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018c4a:	45b8      	cmp	r8, r7
 8018c4c:	da09      	bge.n	8018c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018c4e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8018c52:	45b8      	cmp	r8, r7
 8018c54:	bf3c      	itt	cc
 8018c56:	f10c 0708 	addcc.w	r7, ip, #8
 8018c5a:	6107      	strcc	r7, [r0, #16]
 8018c5c:	f108 0701 	add.w	r7, r8, #1
 8018c60:	6087      	str	r7, [r0, #8]
 8018c62:	6907      	ldr	r7, [r0, #16]
 8018c64:	f04f 0c00 	mov.w	ip, #0
 8018c68:	b212      	sxth	r2, r2
 8018c6a:	459e      	cmp	lr, r3
 8018c6c:	803b      	strh	r3, [r7, #0]
 8018c6e:	442e      	add	r6, r5
 8018c70:	807a      	strh	r2, [r7, #2]
 8018c72:	f8a7 c004 	strh.w	ip, [r7, #4]
 8018c76:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018c7a:	d04b      	beq.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8018c7c:	9f04      	ldr	r7, [sp, #16]
 8018c7e:	1a64      	subs	r4, r4, r1
 8018c80:	f04f 0a00 	mov.w	sl, #0
 8018c84:	1bbf      	subs	r7, r7, r6
 8018c86:	443d      	add	r5, r7
 8018c88:	016d      	lsls	r5, r5, #5
 8018c8a:	fb95 f8f1 	sdiv	r8, r5, r1
 8018c8e:	fb01 5518 	mls	r5, r1, r8, r5
 8018c92:	4565      	cmp	r5, ip
 8018c94:	bfbc      	itt	lt
 8018c96:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018c9a:	186d      	addlt	r5, r5, r1
 8018c9c:	f108 0701 	add.w	r7, r8, #1
 8018ca0:	9703      	str	r7, [sp, #12]
 8018ca2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018ca6:	1964      	adds	r4, r4, r5
 8018ca8:	444b      	add	r3, r9
 8018caa:	bf54      	ite	pl
 8018cac:	9f03      	ldrpl	r7, [sp, #12]
 8018cae:	4647      	movmi	r7, r8
 8018cb0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018cb4:	bf58      	it	pl
 8018cb6:	1a64      	subpl	r4, r4, r1
 8018cb8:	443e      	add	r6, r7
 8018cba:	44bb      	add	fp, r7
 8018cbc:	f8ac b004 	strh.w	fp, [ip, #4]
 8018cc0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018cc4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018cc8:	f8ac b006 	strh.w	fp, [ip, #6]
 8018ccc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018cd0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018cd4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018cd8:	ea5b 0707 	orrs.w	r7, fp, r7
 8018cdc:	d011      	beq.n	8018d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018cde:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018ce2:	f1bb 0f00 	cmp.w	fp, #0
 8018ce6:	db0c      	blt.n	8018d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018ce8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018cea:	45bb      	cmp	fp, r7
 8018cec:	da09      	bge.n	8018d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018cee:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018cf2:	45bb      	cmp	fp, r7
 8018cf4:	bf3c      	itt	cc
 8018cf6:	f10c 0708 	addcc.w	r7, ip, #8
 8018cfa:	6107      	strcc	r7, [r0, #16]
 8018cfc:	f10b 0701 	add.w	r7, fp, #1
 8018d00:	6087      	str	r7, [r0, #8]
 8018d02:	6907      	ldr	r7, [r0, #16]
 8018d04:	459e      	cmp	lr, r3
 8018d06:	803b      	strh	r3, [r7, #0]
 8018d08:	807a      	strh	r2, [r7, #2]
 8018d0a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018d0e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018d12:	d1c6      	bne.n	8018ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8018d14:	9b04      	ldr	r3, [sp, #16]
 8018d16:	1b9e      	subs	r6, r3, r6
 8018d18:	6903      	ldr	r3, [r0, #16]
 8018d1a:	889a      	ldrh	r2, [r3, #4]
 8018d1c:	4432      	add	r2, r6
 8018d1e:	809a      	strh	r2, [r3, #4]
 8018d20:	9a02      	ldr	r2, [sp, #8]
 8018d22:	f102 0c20 	add.w	ip, r2, #32
 8018d26:	9a01      	ldr	r2, [sp, #4]
 8018d28:	ebac 0c02 	sub.w	ip, ip, r2
 8018d2c:	88da      	ldrh	r2, [r3, #6]
 8018d2e:	fb06 260c 	mla	r6, r6, ip, r2
 8018d32:	80de      	strh	r6, [r3, #6]
 8018d34:	f7ff bbb6 	b.w	80184a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08018d38 <_ZN8touchgfx7Outline6lineToEii>:
 8018d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018d3a:	079b      	lsls	r3, r3, #30
 8018d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d3e:	460e      	mov	r6, r1
 8018d40:	4615      	mov	r5, r2
 8018d42:	d511      	bpl.n	8018d68 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018d44:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8018d48:	ea86 0701 	eor.w	r7, r6, r1
 8018d4c:	ea85 0302 	eor.w	r3, r5, r2
 8018d50:	433b      	orrs	r3, r7
 8018d52:	d009      	beq.n	8018d68 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018d54:	4633      	mov	r3, r6
 8018d56:	9500      	str	r5, [sp, #0]
 8018d58:	f7ff fb4c 	bl	80183f4 <_ZN8touchgfx7Outline10renderLineEiiii>
 8018d5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018d5e:	f043 0301 	orr.w	r3, r3, #1
 8018d62:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018d66:	6243      	str	r3, [r0, #36]	; 0x24
 8018d68:	b003      	add	sp, #12
 8018d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d6c <_ZN8touchgfx7Outline6moveToEii>:
 8018d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018d70:	4615      	mov	r5, r2
 8018d72:	4604      	mov	r4, r0
 8018d74:	460e      	mov	r6, r1
 8018d76:	079a      	lsls	r2, r3, #30
 8018d78:	d401      	bmi.n	8018d7e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8018d7a:	f7ff fb08 	bl	801838e <_ZN8touchgfx7Outline5resetEv>
 8018d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d80:	07db      	lsls	r3, r3, #31
 8018d82:	d504      	bpl.n	8018d8e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018d84:	4620      	mov	r0, r4
 8018d86:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8018d8a:	f7ff ffd5 	bl	8018d38 <_ZN8touchgfx7Outline6lineToEii>
 8018d8e:	6923      	ldr	r3, [r4, #16]
 8018d90:	1170      	asrs	r0, r6, #5
 8018d92:	1169      	asrs	r1, r5, #5
 8018d94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d98:	4290      	cmp	r0, r2
 8018d9a:	d103      	bne.n	8018da4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8018d9c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018da0:	4291      	cmp	r1, r2
 8018da2:	d01a      	beq.n	8018dda <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018da4:	88df      	ldrh	r7, [r3, #6]
 8018da6:	889a      	ldrh	r2, [r3, #4]
 8018da8:	433a      	orrs	r2, r7
 8018daa:	d010      	beq.n	8018dce <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018dac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018db0:	2a00      	cmp	r2, #0
 8018db2:	db0c      	blt.n	8018dce <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018db4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8018db6:	42ba      	cmp	r2, r7
 8018db8:	da09      	bge.n	8018dce <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018dba:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8018dbe:	42ba      	cmp	r2, r7
 8018dc0:	f102 0201 	add.w	r2, r2, #1
 8018dc4:	bf38      	it	cc
 8018dc6:	3308      	addcc	r3, #8
 8018dc8:	60a2      	str	r2, [r4, #8]
 8018dca:	bf38      	it	cc
 8018dcc:	6123      	strcc	r3, [r4, #16]
 8018dce:	6923      	ldr	r3, [r4, #16]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	8018      	strh	r0, [r3, #0]
 8018dd4:	8059      	strh	r1, [r3, #2]
 8018dd6:	809a      	strh	r2, [r3, #4]
 8018dd8:	80da      	strh	r2, [r3, #6]
 8018dda:	6166      	str	r6, [r4, #20]
 8018ddc:	6225      	str	r5, [r4, #32]
 8018dde:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018de4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018de8:	b0d0      	sub	sp, #320	; 0x140
 8018dea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018dee:	466c      	mov	r4, sp
 8018df0:	4627      	mov	r7, r4
 8018df2:	1a0d      	subs	r5, r1, r0
 8018df4:	f100 0308 	add.w	r3, r0, #8
 8018df8:	2d48      	cmp	r5, #72	; 0x48
 8018dfa:	f340 80d5 	ble.w	8018fa8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018dfe:	112d      	asrs	r5, r5, #4
 8018e00:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018e04:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018e08:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8018e0c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018e10:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018e14:	6816      	ldr	r6, [r2, #0]
 8018e16:	6006      	str	r6, [r0, #0]
 8018e18:	6856      	ldr	r6, [r2, #4]
 8018e1a:	6046      	str	r6, [r0, #4]
 8018e1c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018e20:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018e24:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018e28:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018e2c:	f1a1 0208 	sub.w	r2, r1, #8
 8018e30:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018e34:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018e38:	4565      	cmp	r5, ip
 8018e3a:	db06      	blt.n	8018e4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8018e3c:	d119      	bne.n	8018e72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018e3e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8018e42:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8018e46:	42ae      	cmp	r6, r5
 8018e48:	dd13      	ble.n	8018e72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018e4a:	460e      	mov	r6, r1
 8018e4c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018e50:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018e54:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018e58:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8018e5c:	601d      	str	r5, [r3, #0]
 8018e5e:	6875      	ldr	r5, [r6, #4]
 8018e60:	605d      	str	r5, [r3, #4]
 8018e62:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018e66:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018e6a:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018e6e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018e72:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018e76:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8018e7a:	42ae      	cmp	r6, r5
 8018e7c:	db06      	blt.n	8018e8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8018e7e:	d116      	bne.n	8018eae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018e80:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018e84:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018e88:	45ac      	cmp	ip, r5
 8018e8a:	da10      	bge.n	8018eae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018e8c:	681d      	ldr	r5, [r3, #0]
 8018e8e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018e92:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018e96:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018e9a:	6005      	str	r5, [r0, #0]
 8018e9c:	685d      	ldr	r5, [r3, #4]
 8018e9e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018ea2:	6045      	str	r5, [r0, #4]
 8018ea4:	8146      	strh	r6, [r0, #10]
 8018ea6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8018eaa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018eae:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018eb2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018eb6:	4565      	cmp	r5, ip
 8018eb8:	db06      	blt.n	8018ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8018eba:	d119      	bne.n	8018ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018ebc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018ec0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018ec4:	42ae      	cmp	r6, r5
 8018ec6:	da13      	bge.n	8018ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018ec8:	460e      	mov	r6, r1
 8018eca:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018ece:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018ed2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018ed6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8018eda:	6005      	str	r5, [r0, #0]
 8018edc:	6875      	ldr	r5, [r6, #4]
 8018ede:	6045      	str	r5, [r0, #4]
 8018ee0:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018ee4:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018ee8:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018eec:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018ef0:	3308      	adds	r3, #8
 8018ef2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018ef6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8018efa:	45e6      	cmp	lr, ip
 8018efc:	dbf8      	blt.n	8018ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018efe:	d105      	bne.n	8018f0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018f00:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018f04:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018f08:	42ae      	cmp	r6, r5
 8018f0a:	dbf1      	blt.n	8018ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018f0c:	4615      	mov	r5, r2
 8018f0e:	3a08      	subs	r2, #8
 8018f10:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018f14:	45b4      	cmp	ip, r6
 8018f16:	dbf9      	blt.n	8018f0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018f18:	d105      	bne.n	8018f26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8018f1a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018f1e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018f22:	45b0      	cmp	r8, r6
 8018f24:	dbf2      	blt.n	8018f0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018f26:	4293      	cmp	r3, r2
 8018f28:	f1a5 0608 	sub.w	r6, r5, #8
 8018f2c:	d816      	bhi.n	8018f5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8018f2e:	f8d6 c000 	ldr.w	ip, [r6]
 8018f32:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018f36:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8018f3a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8018f3e:	f8c3 c000 	str.w	ip, [r3]
 8018f42:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018f46:	f8c3 c004 	str.w	ip, [r3, #4]
 8018f4a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018f4e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018f52:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018f56:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018f5a:	e7c9      	b.n	8018ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018f5c:	f8d6 e000 	ldr.w	lr, [r6]
 8018f60:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018f64:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018f68:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8018f6c:	f8c0 e000 	str.w	lr, [r0]
 8018f70:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018f74:	1a16      	subs	r6, r2, r0
 8018f76:	f8c0 e004 	str.w	lr, [r0, #4]
 8018f7a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018f7e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018f82:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018f86:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018f8a:	1acd      	subs	r5, r1, r3
 8018f8c:	10ed      	asrs	r5, r5, #3
 8018f8e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018f92:	bfb5      	itete	lt
 8018f94:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018f98:	e9c4 3100 	strdge	r3, r1, [r4]
 8018f9c:	460a      	movlt	r2, r1
 8018f9e:	4603      	movge	r3, r0
 8018fa0:	3408      	adds	r4, #8
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	4611      	mov	r1, r2
 8018fa6:	e724      	b.n	8018df2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018fa8:	4299      	cmp	r1, r3
 8018faa:	d927      	bls.n	8018ffc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8018fac:	f1a3 0210 	sub.w	r2, r3, #16
 8018fb0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018fb4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018fb8:	45ac      	cmp	ip, r5
 8018fba:	db06      	blt.n	8018fca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8018fbc:	d11c      	bne.n	8018ff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8018fbe:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018fc2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018fc6:	42ae      	cmp	r6, r5
 8018fc8:	da16      	bge.n	8018ff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8018fca:	4615      	mov	r5, r2
 8018fcc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018fd0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018fd4:	3a08      	subs	r2, #8
 8018fd6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018fda:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8018fde:	6196      	str	r6, [r2, #24]
 8018fe0:	42a8      	cmp	r0, r5
 8018fe2:	686e      	ldr	r6, [r5, #4]
 8018fe4:	f8a2 9010 	strh.w	r9, [r2, #16]
 8018fe8:	61d6      	str	r6, [r2, #28]
 8018fea:	f8a2 c012 	strh.w	ip, [r2, #18]
 8018fee:	f8a2 8014 	strh.w	r8, [r2, #20]
 8018ff2:	f8a2 e016 	strh.w	lr, [r2, #22]
 8018ff6:	d1db      	bne.n	8018fb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018ff8:	3308      	adds	r3, #8
 8018ffa:	e7d5      	b.n	8018fa8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018ffc:	42bc      	cmp	r4, r7
 8018ffe:	d903      	bls.n	8019008 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8019000:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8019004:	3c08      	subs	r4, #8
 8019006:	e6f4      	b.n	8018df2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8019008:	b050      	add	sp, #320	; 0x140
 801900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801900e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801900e:	b510      	push	{r4, lr}
 8019010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019012:	4604      	mov	r4, r0
 8019014:	07da      	lsls	r2, r3, #31
 8019016:	d507      	bpl.n	8019028 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8019018:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801901c:	f7ff fe8c 	bl	8018d38 <_ZN8touchgfx7Outline6lineToEii>
 8019020:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019022:	f023 0301 	bic.w	r3, r3, #1
 8019026:	6243      	str	r3, [r0, #36]	; 0x24
 8019028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801902a:	079b      	lsls	r3, r3, #30
 801902c:	d521      	bpl.n	8019072 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801902e:	6923      	ldr	r3, [r4, #16]
 8019030:	88d9      	ldrh	r1, [r3, #6]
 8019032:	889a      	ldrh	r2, [r3, #4]
 8019034:	430a      	orrs	r2, r1
 8019036:	d010      	beq.n	801905a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019038:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801903c:	2a00      	cmp	r2, #0
 801903e:	db0c      	blt.n	801905a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019040:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019042:	428a      	cmp	r2, r1
 8019044:	da09      	bge.n	801905a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019046:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801904a:	4291      	cmp	r1, r2
 801904c:	f102 0201 	add.w	r2, r2, #1
 8019050:	bf88      	it	hi
 8019052:	3308      	addhi	r3, #8
 8019054:	60a2      	str	r2, [r4, #8]
 8019056:	bf88      	it	hi
 8019058:	6123      	strhi	r3, [r4, #16]
 801905a:	68a1      	ldr	r1, [r4, #8]
 801905c:	b129      	cbz	r1, 801906a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801905e:	6863      	ldr	r3, [r4, #4]
 8019060:	4299      	cmp	r1, r3
 8019062:	d802      	bhi.n	801906a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019064:	68e0      	ldr	r0, [r4, #12]
 8019066:	f7ff febd 	bl	8018de4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801906a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801906c:	f023 0302 	bic.w	r3, r3, #2
 8019070:	6263      	str	r3, [r4, #36]	; 0x24
 8019072:	68e0      	ldr	r0, [r4, #12]
 8019074:	bd10      	pop	{r4, pc}
	...

08019078 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019078:	4b02      	ldr	r3, [pc, #8]	; (8019084 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801907a:	6018      	str	r0, [r3, #0]
 801907c:	4b02      	ldr	r3, [pc, #8]	; (8019088 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801907e:	6019      	str	r1, [r3, #0]
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	2003c274 	.word	0x2003c274
 8019088:	2003c278 	.word	0x2003c278

0801908c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801908c:	4b01      	ldr	r3, [pc, #4]	; (8019094 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801908e:	6818      	ldr	r0, [r3, #0]
 8019090:	4770      	bx	lr
 8019092:	bf00      	nop
 8019094:	2003c274 	.word	0x2003c274

08019098 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019098:	4b01      	ldr	r3, [pc, #4]	; (80190a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801909a:	6818      	ldr	r0, [r3, #0]
 801909c:	4770      	bx	lr
 801909e:	bf00      	nop
 80190a0:	2003c278 	.word	0x2003c278

080190a4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80190a4:	b510      	push	{r4, lr}
 80190a6:	6803      	ldr	r3, [r0, #0]
 80190a8:	460c      	mov	r4, r1
 80190aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190ac:	4798      	blx	r3
 80190ae:	1b03      	subs	r3, r0, r4
 80190b0:	4258      	negs	r0, r3
 80190b2:	4158      	adcs	r0, r3
 80190b4:	bd10      	pop	{r4, pc}
	...

080190b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80190b8:	4b01      	ldr	r3, [pc, #4]	; (80190c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80190ba:	6019      	str	r1, [r3, #0]
 80190bc:	4770      	bx	lr
 80190be:	bf00      	nop
 80190c0:	2003c27c 	.word	0x2003c27c

080190c4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80190c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c8:	4696      	mov	lr, r2
 80190ca:	b097      	sub	sp, #92	; 0x5c
 80190cc:	4605      	mov	r5, r0
 80190ce:	4614      	mov	r4, r2
 80190d0:	460e      	mov	r6, r1
 80190d2:	461f      	mov	r7, r3
 80190d4:	f10d 0c1c 	add.w	ip, sp, #28
 80190d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80190dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80190e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80190e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80190e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190ec:	f8de 3000 	ldr.w	r3, [lr]
 80190f0:	f104 0e14 	add.w	lr, r4, #20
 80190f4:	f8cc 3000 	str.w	r3, [ip]
 80190f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80190fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019100:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019104:	f8de 3000 	ldr.w	r3, [lr]
 8019108:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801910c:	f8cc 3000 	str.w	r3, [ip]
 8019110:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019114:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019118:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801911c:	f8de 3000 	ldr.w	r3, [lr]
 8019120:	4631      	mov	r1, r6
 8019122:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019124:	4628      	mov	r0, r5
 8019126:	f8cc 3000 	str.w	r3, [ip]
 801912a:	682b      	ldr	r3, [r5, #0]
 801912c:	9201      	str	r2, [sp, #4]
 801912e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019130:	f8cd 8008 	str.w	r8, [sp, #8]
 8019134:	9200      	str	r2, [sp, #0]
 8019136:	aa07      	add	r2, sp, #28
 8019138:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801913c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019140:	463b      	mov	r3, r7
 8019142:	47d8      	blx	fp
 8019144:	46a6      	mov	lr, r4
 8019146:	f10d 0c1c 	add.w	ip, sp, #28
 801914a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801914e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019152:	f8de 3000 	ldr.w	r3, [lr]
 8019156:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801915a:	343c      	adds	r4, #60	; 0x3c
 801915c:	f8cc 3000 	str.w	r3, [ip]
 8019160:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019164:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019168:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801916c:	f8de 3000 	ldr.w	r3, [lr]
 8019170:	f8cc 3000 	str.w	r3, [ip]
 8019174:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801917a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	4631      	mov	r1, r6
 8019182:	4628      	mov	r0, r5
 8019184:	f8cc 3000 	str.w	r3, [ip]
 8019188:	682b      	ldr	r3, [r5, #0]
 801918a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801918e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019190:	f8cd 8008 	str.w	r8, [sp, #8]
 8019194:	9201      	str	r2, [sp, #4]
 8019196:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019198:	9200      	str	r2, [sp, #0]
 801919a:	aa07      	add	r2, sp, #28
 801919c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801919e:	463b      	mov	r3, r7
 80191a0:	47a0      	blx	r4
 80191a2:	b017      	add	sp, #92	; 0x5c
 80191a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191a8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80191a8:	2000      	movs	r0, #0
 80191aa:	4770      	bx	lr

080191ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80191ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b0:	b08d      	sub	sp, #52	; 0x34
 80191b2:	4688      	mov	r8, r1
 80191b4:	f8d3 c000 	ldr.w	ip, [r3]
 80191b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80191ba:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80191be:	680f      	ldr	r7, [r1, #0]
 80191c0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80191c4:	eba7 070c 	sub.w	r7, r7, ip
 80191c8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80191cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80191d0:	42bc      	cmp	r4, r7
 80191d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80191d4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80191d8:	bfa8      	it	ge
 80191da:	463c      	movge	r4, r7
 80191dc:	f9b1 9000 	ldrsh.w	r9, [r1]
 80191e0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80191e4:	ee07 4a90 	vmov	s15, r4
 80191e8:	eb09 0e0c 	add.w	lr, r9, ip
 80191ec:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80191f0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80191f4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80191f8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80191fc:	4571      	cmp	r1, lr
 80191fe:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019202:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019206:	ee25 5a27 	vmul.f32	s10, s10, s15
 801920a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801920e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019212:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019216:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801921a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801921e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019222:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019226:	f340 808c 	ble.w	8019342 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801922a:	eba1 060e 	sub.w	r6, r1, lr
 801922e:	fb96 f5f4 	sdiv	r5, r6, r4
 8019232:	ee07 5a10 	vmov	s14, r5
 8019236:	2d00      	cmp	r5, #0
 8019238:	fb04 6615 	mls	r6, r4, r5, r6
 801923c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019240:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019244:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019248:	eea7 1a05 	vfma.f32	s2, s14, s10
 801924c:	dd12      	ble.n	8019274 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801924e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019252:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019256:	ee31 2a45 	vsub.f32	s4, s2, s10
 801925a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019262:	bf14      	ite	ne
 8019264:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019268:	eeb0 7a67 	vmoveq.f32	s14, s15
 801926c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019270:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019274:	fb05 f204 	mul.w	r2, r5, r4
 8019278:	1abf      	subs	r7, r7, r2
 801927a:	4494      	add	ip, r2
 801927c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019280:	4411      	add	r1, r2
 8019282:	eb09 020c 	add.w	r2, r9, ip
 8019286:	b209      	sxth	r1, r1
 8019288:	443a      	add	r2, r7
 801928a:	428a      	cmp	r2, r1
 801928c:	bfc4      	itt	gt
 801928e:	eba1 0209 	subgt.w	r2, r1, r9
 8019292:	eba2 070c 	subgt.w	r7, r2, ip
 8019296:	2f00      	cmp	r7, #0
 8019298:	dd50      	ble.n	801933c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801929a:	fb97 f1f4 	sdiv	r1, r7, r4
 801929e:	fb04 7211 	mls	r2, r4, r1, r7
 80192a2:	b90a      	cbnz	r2, 80192a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80192a4:	3901      	subs	r1, #1
 80192a6:	4622      	mov	r2, r4
 80192a8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80192ac:	6840      	ldr	r0, [r0, #4]
 80192ae:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80192b2:	44b6      	add	lr, r6
 80192b4:	f8d0 a000 	ldr.w	sl, [r0]
 80192b8:	2900      	cmp	r1, #0
 80192ba:	bfcc      	ite	gt
 80192bc:	46a1      	movgt	r9, r4
 80192be:	4691      	movle	r9, r2
 80192c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80192c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80192c4:	fb04 e505 	mla	r5, r4, r5, lr
 80192c8:	eef0 6a42 	vmov.f32	s13, s4
 80192cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80192d0:	9008      	str	r0, [sp, #32]
 80192d2:	eeb0 7a61 	vmov.f32	s14, s3
 80192d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80192d8:	695b      	ldr	r3, [r3, #20]
 80192da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80192de:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80192e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80192e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80192e8:	445b      	add	r3, fp
 80192ea:	9307      	str	r3, [sp, #28]
 80192ec:	ee16 3a90 	vmov	r3, s13
 80192f0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80192f4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80192f8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80192fc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019300:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019304:	ee17 7a90 	vmov	r7, s15
 8019308:	ee73 7a42 	vsub.f32	s15, s6, s4
 801930c:	fb97 f7f4 	sdiv	r7, r7, r4
 8019310:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019314:	ee17 ca90 	vmov	ip, s15
 8019318:	fb9c fcf4 	sdiv	ip, ip, r4
 801931c:	fb0c 3306 	mla	r3, ip, r6, r3
 8019320:	9302      	str	r3, [sp, #8]
 8019322:	ee17 3a10 	vmov	r3, s14
 8019326:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801932a:	fb07 3706 	mla	r7, r7, r6, r3
 801932e:	eba9 0306 	sub.w	r3, r9, r6
 8019332:	e9cd 4700 	strd	r4, r7, [sp]
 8019336:	f8da 4008 	ldr.w	r4, [sl, #8]
 801933a:	47a0      	blx	r4
 801933c:	b00d      	add	sp, #52	; 0x34
 801933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019342:	2500      	movs	r5, #0
 8019344:	462e      	mov	r6, r5
 8019346:	e799      	b.n	801927c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801934c:	b0db      	sub	sp, #364	; 0x16c
 801934e:	461d      	mov	r5, r3
 8019350:	4614      	mov	r4, r2
 8019352:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019356:	910f      	str	r1, [sp, #60]	; 0x3c
 8019358:	4629      	mov	r1, r5
 801935a:	930a      	str	r3, [sp, #40]	; 0x28
 801935c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019360:	9009      	str	r0, [sp, #36]	; 0x24
 8019362:	930b      	str	r3, [sp, #44]	; 0x2c
 8019364:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019368:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801936c:	9310      	str	r3, [sp, #64]	; 0x40
 801936e:	6803      	ldr	r3, [r0, #0]
 8019370:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8019372:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019376:	47b8      	blx	r7
 8019378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801937a:	6058      	str	r0, [r3, #4]
 801937c:	2800      	cmp	r0, #0
 801937e:	f000 83a1 	beq.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019382:	682b      	ldr	r3, [r5, #0]
 8019384:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019388:	ed94 7a02 	vldr	s14, [r4, #8]
 801938c:	9314      	str	r3, [sp, #80]	; 0x50
 801938e:	686b      	ldr	r3, [r5, #4]
 8019390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019394:	9315      	str	r3, [sp, #84]	; 0x54
 8019396:	4bc1      	ldr	r3, [pc, #772]	; (801969c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019398:	7819      	ldrb	r1, [r3, #0]
 801939a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801939e:	2900      	cmp	r1, #0
 80193a0:	bf16      	itet	ne
 80193a2:	4619      	movne	r1, r3
 80193a4:	4611      	moveq	r1, r2
 80193a6:	4613      	movne	r3, r2
 80193a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ac:	9116      	str	r1, [sp, #88]	; 0x58
 80193ae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80193b2:	f240 8387 	bls.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193b6:	ed94 7a07 	vldr	s14, [r4, #28]
 80193ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80193be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193c2:	f240 837f 	bls.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193c6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80193ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80193ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193d2:	f240 8377 	bls.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193d6:	6822      	ldr	r2, [r4, #0]
 80193d8:	4bb1      	ldr	r3, [pc, #708]	; (80196a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80193da:	429a      	cmp	r2, r3
 80193dc:	f2c0 8372 	blt.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193e0:	49b0      	ldr	r1, [pc, #704]	; (80196a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80193e2:	6963      	ldr	r3, [r4, #20]
 80193e4:	428a      	cmp	r2, r1
 80193e6:	f300 836d 	bgt.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193ea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80193ee:	48ae      	ldr	r0, [pc, #696]	; (80196a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80193f0:	33ff      	adds	r3, #255	; 0xff
 80193f2:	4283      	cmp	r3, r0
 80193f4:	f200 8366 	bhi.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80193f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80193fa:	4dac      	ldr	r5, [pc, #688]	; (80196ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80193fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019400:	33ff      	adds	r3, #255	; 0xff
 8019402:	42ab      	cmp	r3, r5
 8019404:	f200 835e 	bhi.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019408:	6862      	ldr	r2, [r4, #4]
 801940a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801940e:	33ff      	adds	r3, #255	; 0xff
 8019410:	4283      	cmp	r3, r0
 8019412:	f200 8357 	bhi.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019416:	69a1      	ldr	r1, [r4, #24]
 8019418:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801941c:	33ff      	adds	r3, #255	; 0xff
 801941e:	4283      	cmp	r3, r0
 8019420:	f200 8350 	bhi.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019426:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801942a:	30ff      	adds	r0, #255	; 0xff
 801942c:	42a8      	cmp	r0, r5
 801942e:	f200 8349 	bhi.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019432:	428a      	cmp	r2, r1
 8019434:	f280 8110 	bge.w	8019658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019438:	429a      	cmp	r2, r3
 801943a:	f300 8119 	bgt.w	8019670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801943e:	4299      	cmp	r1, r3
 8019440:	f280 811d 	bge.w	801967e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019444:	2502      	movs	r5, #2
 8019446:	2701      	movs	r7, #1
 8019448:	46a9      	mov	r9, r5
 801944a:	46b8      	mov	r8, r7
 801944c:	f04f 0a00 	mov.w	sl, #0
 8019450:	4621      	mov	r1, r4
 8019452:	a849      	add	r0, sp, #292	; 0x124
 8019454:	f003 fd04 	bl	801ce60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019458:	4622      	mov	r2, r4
 801945a:	4653      	mov	r3, sl
 801945c:	a949      	add	r1, sp, #292	; 0x124
 801945e:	f8cd 9000 	str.w	r9, [sp]
 8019462:	a819      	add	r0, sp, #100	; 0x64
 8019464:	f003 fe2c 	bl	801d0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019468:	4622      	mov	r2, r4
 801946a:	4653      	mov	r3, sl
 801946c:	a949      	add	r1, sp, #292	; 0x124
 801946e:	f8cd 8000 	str.w	r8, [sp]
 8019472:	a829      	add	r0, sp, #164	; 0xa4
 8019474:	f003 fe24 	bl	801d0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019478:	4643      	mov	r3, r8
 801947a:	4622      	mov	r2, r4
 801947c:	a949      	add	r1, sp, #292	; 0x124
 801947e:	f8cd 9000 	str.w	r9, [sp]
 8019482:	a839      	add	r0, sp, #228	; 0xe4
 8019484:	f003 fe1c 	bl	801d0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019488:	42af      	cmp	r7, r5
 801948a:	af12      	add	r7, sp, #72	; 0x48
 801948c:	bfb7      	itett	lt
 801948e:	2300      	movlt	r3, #0
 8019490:	2301      	movge	r3, #1
 8019492:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019494:	ac19      	addlt	r4, sp, #100	; 0x64
 8019496:	bfb1      	iteee	lt
 8019498:	930e      	strlt	r3, [sp, #56]	; 0x38
 801949a:	ad19      	addge	r5, sp, #100	; 0x64
 801949c:	930e      	strge	r3, [sp, #56]	; 0x38
 801949e:	ac29      	addge	r4, sp, #164	; 0xa4
 80194a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80194a6:	e887 0003 	stmia.w	r7, {r0, r1}
 80194aa:	b928      	cbnz	r0, 80194b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80194ac:	4b80      	ldr	r3, [pc, #512]	; (80196b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80194ae:	6818      	ldr	r0, [r3, #0]
 80194b0:	6803      	ldr	r3, [r0, #0]
 80194b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194b4:	4798      	blx	r3
 80194b6:	6038      	str	r0, [r7, #0]
 80194b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80194ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80194be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80194c4:	930c      	str	r3, [sp, #48]	; 0x30
 80194c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80194c8:	6963      	ldr	r3, [r4, #20]
 80194ca:	440b      	add	r3, r1
 80194cc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80194d0:	4408      	add	r0, r1
 80194d2:	b200      	sxth	r0, r0
 80194d4:	4283      	cmp	r3, r0
 80194d6:	900d      	str	r0, [sp, #52]	; 0x34
 80194d8:	f280 80dd 	bge.w	8019696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80194dc:	428b      	cmp	r3, r1
 80194de:	da08      	bge.n	80194f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80194e0:	2a00      	cmp	r2, #0
 80194e2:	dd06      	ble.n	80194f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80194e4:	1acb      	subs	r3, r1, r3
 80194e6:	429a      	cmp	r2, r3
 80194e8:	f2c0 80e4 	blt.w	80196b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	f300 80e2 	bgt.w	80196b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80194f2:	6967      	ldr	r7, [r4, #20]
 80194f4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80194f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194fa:	443b      	add	r3, r7
 80194fc:	461f      	mov	r7, r3
 80194fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019500:	1bdf      	subs	r7, r3, r7
 8019502:	4297      	cmp	r7, r2
 8019504:	bfa8      	it	ge
 8019506:	4617      	movge	r7, r2
 8019508:	2f00      	cmp	r7, #0
 801950a:	f340 8166 	ble.w	80197da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801950e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019510:	6829      	ldr	r1, [r5, #0]
 8019512:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019516:	f9bb 3000 	ldrsh.w	r3, [fp]
 801951a:	4411      	add	r1, r2
 801951c:	6820      	ldr	r0, [r4, #0]
 801951e:	4299      	cmp	r1, r3
 8019520:	dd1a      	ble.n	8019558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019522:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019526:	4402      	add	r2, r0
 8019528:	440b      	add	r3, r1
 801952a:	b21b      	sxth	r3, r3
 801952c:	429a      	cmp	r2, r3
 801952e:	dc13      	bgt.n	8019558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019530:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019532:	a912      	add	r1, sp, #72	; 0x48
 8019534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	9206      	str	r2, [sp, #24]
 801953c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801953e:	9500      	str	r5, [sp, #0]
 8019540:	9205      	str	r2, [sp, #20]
 8019542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019544:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019548:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801954a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801954e:	aa49      	add	r2, sp, #292	; 0x124
 8019550:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019554:	4623      	mov	r3, r4
 8019556:	47c8      	blx	r9
 8019558:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801955c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019560:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019568:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801956c:	68a1      	ldr	r1, [r4, #8]
 801956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019572:	ed94 6a08 	vldr	s12, [r4, #32]
 8019576:	edd4 6a07 	vldr	s13, [r4, #28]
 801957a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801957e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019582:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019586:	e9d4 2300 	ldrd	r2, r3, [r4]
 801958a:	edc4 6a07 	vstr	s13, [r4, #28]
 801958e:	441a      	add	r2, r3
 8019590:	6963      	ldr	r3, [r4, #20]
 8019592:	3301      	adds	r3, #1
 8019594:	6022      	str	r2, [r4, #0]
 8019596:	6163      	str	r3, [r4, #20]
 8019598:	69a3      	ldr	r3, [r4, #24]
 801959a:	3b01      	subs	r3, #1
 801959c:	61a3      	str	r3, [r4, #24]
 801959e:	6923      	ldr	r3, [r4, #16]
 80195a0:	440b      	add	r3, r1
 80195a2:	68e1      	ldr	r1, [r4, #12]
 80195a4:	428b      	cmp	r3, r1
 80195a6:	6123      	str	r3, [r4, #16]
 80195a8:	db15      	blt.n	80195d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80195aa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80195ae:	3201      	adds	r2, #1
 80195b0:	1a5b      	subs	r3, r3, r1
 80195b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80195b6:	6022      	str	r2, [r4, #0]
 80195b8:	6123      	str	r3, [r4, #16]
 80195ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80195be:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80195c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80195c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80195ca:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80195ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80195d2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80195d6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80195da:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80195de:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80195e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80195e6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80195ea:	68a9      	ldr	r1, [r5, #8]
 80195ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80195f0:	ed95 6a08 	vldr	s12, [r5, #32]
 80195f4:	edd5 6a07 	vldr	s13, [r5, #28]
 80195f8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80195fc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019600:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019604:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019608:	edc5 6a07 	vstr	s13, [r5, #28]
 801960c:	441a      	add	r2, r3
 801960e:	696b      	ldr	r3, [r5, #20]
 8019610:	3301      	adds	r3, #1
 8019612:	602a      	str	r2, [r5, #0]
 8019614:	616b      	str	r3, [r5, #20]
 8019616:	69ab      	ldr	r3, [r5, #24]
 8019618:	3b01      	subs	r3, #1
 801961a:	61ab      	str	r3, [r5, #24]
 801961c:	692b      	ldr	r3, [r5, #16]
 801961e:	440b      	add	r3, r1
 8019620:	68e9      	ldr	r1, [r5, #12]
 8019622:	428b      	cmp	r3, r1
 8019624:	612b      	str	r3, [r5, #16]
 8019626:	db15      	blt.n	8019654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019628:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801962c:	3201      	adds	r2, #1
 801962e:	1a5b      	subs	r3, r3, r1
 8019630:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019634:	602a      	str	r2, [r5, #0]
 8019636:	612b      	str	r3, [r5, #16]
 8019638:	edc5 6a07 	vstr	s13, [r5, #28]
 801963c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019640:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019644:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019648:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801964c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019650:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019654:	3f01      	subs	r7, #1
 8019656:	e757      	b.n	8019508 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019658:	4299      	cmp	r1, r3
 801965a:	dc13      	bgt.n	8019684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801965c:	429a      	cmp	r2, r3
 801965e:	da14      	bge.n	801968a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019660:	2502      	movs	r5, #2
 8019662:	2703      	movs	r7, #3
 8019664:	f04f 0800 	mov.w	r8, #0
 8019668:	46a9      	mov	r9, r5
 801966a:	f04f 0a01 	mov.w	sl, #1
 801966e:	e6ef      	b.n	8019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019670:	2501      	movs	r5, #1
 8019672:	2700      	movs	r7, #0
 8019674:	46a9      	mov	r9, r5
 8019676:	46b8      	mov	r8, r7
 8019678:	f04f 0a02 	mov.w	sl, #2
 801967c:	e6e8      	b.n	8019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801967e:	2501      	movs	r5, #1
 8019680:	2702      	movs	r7, #2
 8019682:	e6e1      	b.n	8019448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019684:	2500      	movs	r5, #0
 8019686:	2701      	movs	r7, #1
 8019688:	e7f4      	b.n	8019674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801968a:	2702      	movs	r7, #2
 801968c:	2503      	movs	r5, #3
 801968e:	f04f 0900 	mov.w	r9, #0
 8019692:	46b8      	mov	r8, r7
 8019694:	e7e9      	b.n	801966a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019696:	4613      	mov	r3, r2
 8019698:	e728      	b.n	80194ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801969a:	bf00      	nop
 801969c:	2003c264 	.word	0x2003c264
 80196a0:	fffd8f01 	.word	0xfffd8f01
 80196a4:	00027100 	.word	0x00027100
 80196a8:	0004e1ff 	.word	0x0004e1ff
 80196ac:	0004e1fe 	.word	0x0004e1fe
 80196b0:	2003c26c 	.word	0x2003c26c
 80196b4:	4613      	mov	r3, r2
 80196b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80196b8:	469e      	mov	lr, r3
 80196ba:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80196bc:	469c      	mov	ip, r3
 80196be:	9111      	str	r1, [sp, #68]	; 0x44
 80196c0:	f04f 0900 	mov.w	r9, #0
 80196c4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80196c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80196cc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80196d0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80196d4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80196d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80196dc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80196e0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80196e4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80196e8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80196ec:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80196f0:	f1bc 0f00 	cmp.w	ip, #0
 80196f4:	d147      	bne.n	8019786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80196f6:	eb03 0c07 	add.w	ip, r3, r7
 80196fa:	1ad7      	subs	r7, r2, r3
 80196fc:	f1b9 0f00 	cmp.w	r9, #0
 8019700:	d009      	beq.n	8019716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019702:	9029      	str	r0, [sp, #164]	; 0xa4
 8019704:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019708:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801970c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019710:	912d      	str	r1, [sp, #180]	; 0xb4
 8019712:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019716:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019718:	f04f 0800 	mov.w	r8, #0
 801971c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019720:	9111      	str	r1, [sp, #68]	; 0x44
 8019722:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019726:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801972a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801972e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019732:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019736:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801973a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801973e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019742:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019746:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801974a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801974e:	f1be 0f00 	cmp.w	lr, #0
 8019752:	d031      	beq.n	80197b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019754:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019756:	4450      	add	r0, sl
 8019758:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801975c:	4431      	add	r1, r6
 801975e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019762:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019766:	4549      	cmp	r1, r9
 8019768:	db08      	blt.n	801977c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801976a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801976e:	3001      	adds	r0, #1
 8019770:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019774:	eba1 0109 	sub.w	r1, r1, r9
 8019778:	ee37 7a06 	vadd.f32	s14, s14, s12
 801977c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019780:	f04f 0801 	mov.w	r8, #1
 8019784:	e7e3      	b.n	801974e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019786:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019788:	4450      	add	r0, sl
 801978a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801978e:	4431      	add	r1, r6
 8019790:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019794:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019798:	4541      	cmp	r1, r8
 801979a:	db08      	blt.n	80197ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801979c:	ee76 6a85 	vadd.f32	s13, s13, s10
 80197a0:	3001      	adds	r0, #1
 80197a2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80197a6:	eba1 0108 	sub.w	r1, r1, r8
 80197aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80197ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80197b2:	f04f 0901 	mov.w	r9, #1
 80197b6:	e79b      	b.n	80196f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80197b8:	449c      	add	ip, r3
 80197ba:	1aff      	subs	r7, r7, r3
 80197bc:	f1b8 0f00 	cmp.w	r8, #0
 80197c0:	d009      	beq.n	80197d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80197c2:	9019      	str	r0, [sp, #100]	; 0x64
 80197c4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80197c8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80197cc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80197d0:	911d      	str	r1, [sp, #116]	; 0x74
 80197d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80197d6:	1ad2      	subs	r2, r2, r3
 80197d8:	e68b      	b.n	80194f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80197da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197dc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f000 80d1 	beq.w	8019986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80197e4:	ad19      	add	r5, sp, #100	; 0x64
 80197e6:	ac39      	add	r4, sp, #228	; 0xe4
 80197e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80197ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80197ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80197f2:	930c      	str	r3, [sp, #48]	; 0x30
 80197f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80197f6:	6963      	ldr	r3, [r4, #20]
 80197f8:	440b      	add	r3, r1
 80197fa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80197fe:	4408      	add	r0, r1
 8019800:	b200      	sxth	r0, r0
 8019802:	4283      	cmp	r3, r0
 8019804:	900d      	str	r0, [sp, #52]	; 0x34
 8019806:	f280 80c1 	bge.w	801998c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801980a:	428b      	cmp	r3, r1
 801980c:	da08      	bge.n	8019820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801980e:	2a00      	cmp	r2, #0
 8019810:	dd06      	ble.n	8019820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019812:	1acb      	subs	r3, r1, r3
 8019814:	429a      	cmp	r2, r3
 8019816:	f2c0 80bb 	blt.w	8019990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801981a:	2b00      	cmp	r3, #0
 801981c:	f300 80b9 	bgt.w	8019992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019820:	6967      	ldr	r7, [r4, #20]
 8019822:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019828:	443b      	add	r3, r7
 801982a:	461f      	mov	r7, r3
 801982c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801982e:	1bdf      	subs	r7, r3, r7
 8019830:	4297      	cmp	r7, r2
 8019832:	bfa8      	it	ge
 8019834:	4617      	movge	r7, r2
 8019836:	2f00      	cmp	r7, #0
 8019838:	f340 813c 	ble.w	8019ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801983c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801983e:	6829      	ldr	r1, [r5, #0]
 8019840:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019844:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019848:	4411      	add	r1, r2
 801984a:	6820      	ldr	r0, [r4, #0]
 801984c:	4299      	cmp	r1, r3
 801984e:	dd1a      	ble.n	8019886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019850:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019854:	4402      	add	r2, r0
 8019856:	440b      	add	r3, r1
 8019858:	b21b      	sxth	r3, r3
 801985a:	429a      	cmp	r2, r3
 801985c:	dc13      	bgt.n	8019886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801985e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019860:	a912      	add	r1, sp, #72	; 0x48
 8019862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	9206      	str	r2, [sp, #24]
 801986a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801986c:	9500      	str	r5, [sp, #0]
 801986e:	9205      	str	r2, [sp, #20]
 8019870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019872:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019876:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019878:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801987c:	aa49      	add	r2, sp, #292	; 0x124
 801987e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019882:	4623      	mov	r3, r4
 8019884:	47c8      	blx	r9
 8019886:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801988a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801988e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019896:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801989a:	68a1      	ldr	r1, [r4, #8]
 801989c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80198a0:	ed94 6a08 	vldr	s12, [r4, #32]
 80198a4:	edd4 6a07 	vldr	s13, [r4, #28]
 80198a8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80198ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80198b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80198b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80198b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80198bc:	441a      	add	r2, r3
 80198be:	6963      	ldr	r3, [r4, #20]
 80198c0:	3301      	adds	r3, #1
 80198c2:	6022      	str	r2, [r4, #0]
 80198c4:	6163      	str	r3, [r4, #20]
 80198c6:	69a3      	ldr	r3, [r4, #24]
 80198c8:	3b01      	subs	r3, #1
 80198ca:	61a3      	str	r3, [r4, #24]
 80198cc:	6923      	ldr	r3, [r4, #16]
 80198ce:	440b      	add	r3, r1
 80198d0:	68e1      	ldr	r1, [r4, #12]
 80198d2:	428b      	cmp	r3, r1
 80198d4:	6123      	str	r3, [r4, #16]
 80198d6:	db15      	blt.n	8019904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80198d8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80198dc:	3201      	adds	r2, #1
 80198de:	1a5b      	subs	r3, r3, r1
 80198e0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80198e4:	6022      	str	r2, [r4, #0]
 80198e6:	6123      	str	r3, [r4, #16]
 80198e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80198ec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80198f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80198f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80198f8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80198fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019900:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019904:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019908:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801990c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019914:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019918:	68a9      	ldr	r1, [r5, #8]
 801991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801991e:	ed95 6a08 	vldr	s12, [r5, #32]
 8019922:	edd5 6a07 	vldr	s13, [r5, #28]
 8019926:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801992a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801992e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019932:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019936:	edc5 6a07 	vstr	s13, [r5, #28]
 801993a:	441a      	add	r2, r3
 801993c:	696b      	ldr	r3, [r5, #20]
 801993e:	3301      	adds	r3, #1
 8019940:	602a      	str	r2, [r5, #0]
 8019942:	616b      	str	r3, [r5, #20]
 8019944:	69ab      	ldr	r3, [r5, #24]
 8019946:	3b01      	subs	r3, #1
 8019948:	61ab      	str	r3, [r5, #24]
 801994a:	692b      	ldr	r3, [r5, #16]
 801994c:	440b      	add	r3, r1
 801994e:	68e9      	ldr	r1, [r5, #12]
 8019950:	428b      	cmp	r3, r1
 8019952:	612b      	str	r3, [r5, #16]
 8019954:	db15      	blt.n	8019982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019956:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801995a:	3201      	adds	r2, #1
 801995c:	1a5b      	subs	r3, r3, r1
 801995e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019962:	602a      	str	r2, [r5, #0]
 8019964:	612b      	str	r3, [r5, #16]
 8019966:	edc5 6a07 	vstr	s13, [r5, #28]
 801996a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801996e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019972:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019976:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801997a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801997e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019982:	3f01      	subs	r7, #1
 8019984:	e757      	b.n	8019836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019986:	ad39      	add	r5, sp, #228	; 0xe4
 8019988:	ac19      	add	r4, sp, #100	; 0x64
 801998a:	e72d      	b.n	80197e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801998c:	4613      	mov	r3, r2
 801998e:	e744      	b.n	801981a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019990:	4613      	mov	r3, r2
 8019992:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019994:	469e      	mov	lr, r3
 8019996:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801999a:	461f      	mov	r7, r3
 801999c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80199a0:	f04f 0900 	mov.w	r9, #0
 80199a4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80199a8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80199ac:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80199b0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80199b4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80199b8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80199ba:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80199be:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80199c2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80199c6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80199ca:	960e      	str	r6, [sp, #56]	; 0x38
 80199cc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80199d0:	2f00      	cmp	r7, #0
 80199d2:	d146      	bne.n	8019a62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80199d4:	449c      	add	ip, r3
 80199d6:	1ad7      	subs	r7, r2, r3
 80199d8:	f1b9 0f00 	cmp.w	r9, #0
 80199dc:	d009      	beq.n	80199f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80199de:	9039      	str	r0, [sp, #228]	; 0xe4
 80199e0:	913d      	str	r1, [sp, #244]	; 0xf4
 80199e2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80199e6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80199ea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80199ee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80199f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80199f4:	f04f 0800 	mov.w	r8, #0
 80199f8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80199fc:	910e      	str	r1, [sp, #56]	; 0x38
 80199fe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019a02:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019a06:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019a0a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019a0e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019a12:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019a16:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019a1a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019a1e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019a22:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019a26:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019a2a:	f1be 0f00 	cmp.w	lr, #0
 8019a2e:	d030      	beq.n	8019a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019a30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019a32:	4450      	add	r0, sl
 8019a34:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019a38:	4431      	add	r1, r6
 8019a3a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019a3e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019a42:	4549      	cmp	r1, r9
 8019a44:	db08      	blt.n	8019a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019a46:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019a4a:	3001      	adds	r0, #1
 8019a4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019a50:	eba1 0109 	sub.w	r1, r1, r9
 8019a54:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019a58:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019a5c:	f04f 0801 	mov.w	r8, #1
 8019a60:	e7e3      	b.n	8019a2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019a62:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019a64:	4450      	add	r0, sl
 8019a66:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019a6a:	4431      	add	r1, r6
 8019a6c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019a70:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019a74:	4541      	cmp	r1, r8
 8019a76:	db08      	blt.n	8019a8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019a78:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019a7c:	3001      	adds	r0, #1
 8019a7e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019a82:	eba1 0108 	sub.w	r1, r1, r8
 8019a86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019a8a:	3f01      	subs	r7, #1
 8019a8c:	f04f 0901 	mov.w	r9, #1
 8019a90:	e79e      	b.n	80199d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019a92:	449c      	add	ip, r3
 8019a94:	1aff      	subs	r7, r7, r3
 8019a96:	f1b8 0f00 	cmp.w	r8, #0
 8019a9a:	d009      	beq.n	8019ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019a9c:	9019      	str	r0, [sp, #100]	; 0x64
 8019a9e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019aa2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019aa6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019aaa:	911d      	str	r1, [sp, #116]	; 0x74
 8019aac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019ab0:	1ad2      	subs	r2, r2, r3
 8019ab2:	e6b5      	b.n	8019820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	b923      	cbnz	r3, 8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aba:	4b04      	ldr	r3, [pc, #16]	; (8019acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019abc:	6818      	ldr	r0, [r3, #0]
 8019abe:	6803      	ldr	r3, [r0, #0]
 8019ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ac2:	4798      	blx	r3
 8019ac4:	b05b      	add	sp, #364	; 0x16c
 8019ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aca:	bf00      	nop
 8019acc:	2003c26c 	.word	0x2003c26c

08019ad0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019ad0:	b570      	push	{r4, r5, r6, lr}
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	2500      	movs	r5, #0
 8019ad6:	9804      	ldr	r0, [sp, #16]
 8019ad8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019adc:	8025      	strh	r5, [r4, #0]
 8019ade:	6061      	str	r1, [r4, #4]
 8019ae0:	7223      	strb	r3, [r4, #8]
 8019ae2:	7266      	strb	r6, [r4, #9]
 8019ae4:	60e0      	str	r0, [r4, #12]
 8019ae6:	8222      	strh	r2, [r4, #16]
 8019ae8:	8265      	strh	r5, [r4, #18]
 8019aea:	82a5      	strh	r5, [r4, #20]
 8019aec:	82e5      	strh	r5, [r4, #22]
 8019aee:	8325      	strh	r5, [r4, #24]
 8019af0:	8365      	strh	r5, [r4, #26]
 8019af2:	83a5      	strh	r5, [r4, #28]
 8019af4:	77a5      	strb	r5, [r4, #30]
 8019af6:	b32e      	cbz	r6, 8019b44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019af8:	6803      	ldr	r3, [r0, #0]
 8019afa:	695b      	ldr	r3, [r3, #20]
 8019afc:	4798      	blx	r3
 8019afe:	4606      	mov	r6, r0
 8019b00:	b300      	cbz	r0, 8019b44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019b02:	68e0      	ldr	r0, [r4, #12]
 8019b04:	4631      	mov	r1, r6
 8019b06:	6803      	ldr	r3, [r0, #0]
 8019b08:	68db      	ldr	r3, [r3, #12]
 8019b0a:	4798      	blx	r3
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	b1c8      	cbz	r0, 8019b44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019b10:	7b43      	ldrb	r3, [r0, #13]
 8019b12:	7a82      	ldrb	r2, [r0, #10]
 8019b14:	005b      	lsls	r3, r3, #1
 8019b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b1a:	4313      	orrs	r3, r2
 8019b1c:	83a3      	strh	r3, [r4, #28]
 8019b1e:	7a63      	ldrb	r3, [r4, #9]
 8019b20:	2b04      	cmp	r3, #4
 8019b22:	d10f      	bne.n	8019b44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019b24:	68e0      	ldr	r0, [r4, #12]
 8019b26:	462a      	mov	r2, r5
 8019b28:	4631      	mov	r1, r6
 8019b2a:	6803      	ldr	r3, [r0, #0]
 8019b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b2e:	4798      	blx	r3
 8019b30:	7b6b      	ldrb	r3, [r5, #13]
 8019b32:	005b      	lsls	r3, r3, #1
 8019b34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b38:	7aab      	ldrb	r3, [r5, #10]
 8019b3a:	4313      	orrs	r3, r2
 8019b3c:	4418      	add	r0, r3
 8019b3e:	8ba3      	ldrh	r3, [r4, #28]
 8019b40:	4418      	add	r0, r3
 8019b42:	83a0      	strh	r0, [r4, #28]
 8019b44:	4620      	mov	r0, r4
 8019b46:	bd70      	pop	{r4, r5, r6, pc}

08019b48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b4c:	2400      	movs	r4, #0
 8019b4e:	b085      	sub	sp, #20
 8019b50:	4681      	mov	r9, r0
 8019b52:	4688      	mov	r8, r1
 8019b54:	4692      	mov	sl, r2
 8019b56:	469b      	mov	fp, r3
 8019b58:	4627      	mov	r7, r4
 8019b5a:	4625      	mov	r5, r4
 8019b5c:	4626      	mov	r6, r4
 8019b5e:	4554      	cmp	r4, sl
 8019b60:	da2a      	bge.n	8019bb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019b62:	2300      	movs	r3, #0
 8019b64:	9303      	str	r3, [sp, #12]
 8019b66:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019b6a:	429d      	cmp	r5, r3
 8019b6c:	d004      	beq.n	8019b78 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019b6e:	f242 030b 	movw	r3, #8203	; 0x200b
 8019b72:	429d      	cmp	r5, r3
 8019b74:	bf18      	it	ne
 8019b76:	462f      	movne	r7, r5
 8019b78:	ab03      	add	r3, sp, #12
 8019b7a:	4642      	mov	r2, r8
 8019b7c:	4659      	mov	r1, fp
 8019b7e:	4648      	mov	r0, r9
 8019b80:	f002 ff84 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b84:	4605      	mov	r5, r0
 8019b86:	b1b8      	cbz	r0, 8019bb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019b88:	280a      	cmp	r0, #10
 8019b8a:	d015      	beq.n	8019bb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019b8c:	9a03      	ldr	r2, [sp, #12]
 8019b8e:	b18a      	cbz	r2, 8019bb4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019b90:	7b50      	ldrb	r0, [r2, #13]
 8019b92:	4639      	mov	r1, r7
 8019b94:	7a93      	ldrb	r3, [r2, #10]
 8019b96:	0040      	lsls	r0, r0, #1
 8019b98:	8895      	ldrh	r5, [r2, #4]
 8019b9a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019b9e:	4303      	orrs	r3, r0
 8019ba0:	4640      	mov	r0, r8
 8019ba2:	9301      	str	r3, [sp, #4]
 8019ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8019ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019baa:	4798      	blx	r3
 8019bac:	9b01      	ldr	r3, [sp, #4]
 8019bae:	4418      	add	r0, r3
 8019bb0:	4406      	add	r6, r0
 8019bb2:	b2b6      	uxth	r6, r6
 8019bb4:	3401      	adds	r4, #1
 8019bb6:	e7d2      	b.n	8019b5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019bb8:	4630      	mov	r0, r6
 8019bba:	b005      	add	sp, #20
 8019bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019bc0:	2a02      	cmp	r2, #2
 8019bc2:	b530      	push	{r4, r5, lr}
 8019bc4:	d011      	beq.n	8019bea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019bc6:	2a03      	cmp	r2, #3
 8019bc8:	d01c      	beq.n	8019c04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019bca:	2a01      	cmp	r2, #1
 8019bcc:	d10c      	bne.n	8019be8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019bce:	888b      	ldrh	r3, [r1, #4]
 8019bd0:	8801      	ldrh	r1, [r0, #0]
 8019bd2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019bd6:	1a5b      	subs	r3, r3, r1
 8019bd8:	8844      	ldrh	r4, [r0, #2]
 8019bda:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019bde:	1a9b      	subs	r3, r3, r2
 8019be0:	8004      	strh	r4, [r0, #0]
 8019be2:	8081      	strh	r1, [r0, #4]
 8019be4:	8043      	strh	r3, [r0, #2]
 8019be6:	80c2      	strh	r2, [r0, #6]
 8019be8:	bd30      	pop	{r4, r5, pc}
 8019bea:	88cb      	ldrh	r3, [r1, #6]
 8019bec:	8842      	ldrh	r2, [r0, #2]
 8019bee:	1a9b      	subs	r3, r3, r2
 8019bf0:	88c2      	ldrh	r2, [r0, #6]
 8019bf2:	1a9b      	subs	r3, r3, r2
 8019bf4:	888a      	ldrh	r2, [r1, #4]
 8019bf6:	8801      	ldrh	r1, [r0, #0]
 8019bf8:	8043      	strh	r3, [r0, #2]
 8019bfa:	1a52      	subs	r2, r2, r1
 8019bfc:	8881      	ldrh	r1, [r0, #4]
 8019bfe:	1a52      	subs	r2, r2, r1
 8019c00:	8002      	strh	r2, [r0, #0]
 8019c02:	e7f1      	b.n	8019be8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019c04:	88cb      	ldrh	r3, [r1, #6]
 8019c06:	8841      	ldrh	r1, [r0, #2]
 8019c08:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019c0c:	1a5b      	subs	r3, r3, r1
 8019c0e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019c12:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019c16:	1a9b      	subs	r3, r3, r2
 8019c18:	8045      	strh	r5, [r0, #2]
 8019c1a:	8082      	strh	r2, [r0, #4]
 8019c1c:	8003      	strh	r3, [r0, #0]
 8019c1e:	80c4      	strh	r4, [r0, #6]
 8019c20:	e7e2      	b.n	8019be8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019c22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c26:	b09f      	sub	sp, #124	; 0x7c
 8019c28:	9116      	str	r1, [sp, #88]	; 0x58
 8019c2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c2c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019c2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019c30:	8809      	ldrh	r1, [r1, #0]
 8019c32:	889b      	ldrh	r3, [r3, #4]
 8019c34:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019c38:	440b      	add	r3, r1
 8019c3a:	9212      	str	r2, [sp, #72]	; 0x48
 8019c3c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019c40:	b21b      	sxth	r3, r3
 8019c42:	9011      	str	r0, [sp, #68]	; 0x44
 8019c44:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019c48:	9310      	str	r3, [sp, #64]	; 0x40
 8019c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8019c4e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8019c52:	7a59      	ldrb	r1, [r3, #9]
 8019c54:	7a1b      	ldrb	r3, [r3, #8]
 8019c56:	9114      	str	r1, [sp, #80]	; 0x50
 8019c58:	9315      	str	r3, [sp, #84]	; 0x54
 8019c5a:	2a00      	cmp	r2, #0
 8019c5c:	d06a      	beq.n	8019d34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019c5e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019c62:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019c64:	2b04      	cmp	r3, #4
 8019c66:	bf14      	ite	ne
 8019c68:	2301      	movne	r3, #1
 8019c6a:	2302      	moveq	r3, #2
 8019c6c:	4413      	add	r3, r2
 8019c6e:	f04f 0900 	mov.w	r9, #0
 8019c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c74:	464c      	mov	r4, r9
 8019c76:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019c7a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019c7e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019c82:	4293      	cmp	r3, r2
 8019c84:	f280 808f 	bge.w	8019da6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019c88:	2300      	movs	r3, #0
 8019c8a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8019c8e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019c92:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019c96:	429c      	cmp	r4, r3
 8019c98:	d006      	beq.n	8019ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8019c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c9c:	f242 020b 	movw	r2, #8203	; 0x200b
 8019ca0:	4294      	cmp	r4, r2
 8019ca2:	bf18      	it	ne
 8019ca4:	4623      	movne	r3, r4
 8019ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8019ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019caa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019cac:	f8d8 2000 	ldr.w	r2, [r8]
 8019cb0:	428b      	cmp	r3, r1
 8019cb2:	db41      	blt.n	8019d38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019cb4:	6813      	ldr	r3, [r2, #0]
 8019cb6:	4610      	mov	r0, r2
 8019cb8:	695b      	ldr	r3, [r3, #20]
 8019cba:	4798      	blx	r3
 8019cbc:	4604      	mov	r4, r0
 8019cbe:	f8d8 0000 	ldr.w	r0, [r8]
 8019cc2:	aa1d      	add	r2, sp, #116	; 0x74
 8019cc4:	4621      	mov	r1, r4
 8019cc6:	6803      	ldr	r3, [r0, #0]
 8019cc8:	689e      	ldr	r6, [r3, #8]
 8019cca:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019cce:	47b0      	blx	r6
 8019cd0:	901c      	str	r0, [sp, #112]	; 0x70
 8019cd2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019cd6:	429c      	cmp	r4, r3
 8019cd8:	f000 80ea 	beq.w	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019cdc:	f242 030b 	movw	r3, #8203	; 0x200b
 8019ce0:	429c      	cmp	r4, r3
 8019ce2:	f000 80e5 	beq.w	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019ce6:	2c00      	cmp	r4, #0
 8019ce8:	f000 80f7 	beq.w	8019eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019cec:	2c0a      	cmp	r4, #10
 8019cee:	d060      	beq.n	8019db2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019cf0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019cf2:	b36a      	cbz	r2, 8019d50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019cf4:	8894      	ldrh	r4, [r2, #4]
 8019cf6:	f1bb 0f00 	cmp.w	fp, #0
 8019cfa:	d03b      	beq.n	8019d74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019cfc:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019d00:	f1bb 0f01 	cmp.w	fp, #1
 8019d04:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019d08:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019d0c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019d10:	ea49 0903 	orr.w	r9, r9, r3
 8019d14:	d134      	bne.n	8019d80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8019d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d18:	eba5 0509 	sub.w	r5, r5, r9
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d14f      	bne.n	8019dc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019d20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d22:	eb09 0305 	add.w	r3, r9, r5
 8019d26:	4413      	add	r3, r2
 8019d28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019d2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019d2e:	4293      	cmp	r3, r2
 8019d30:	da51      	bge.n	8019dd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019d32:	e038      	b.n	8019da6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019d34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019d36:	e79a      	b.n	8019c6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8019d38:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019d3c:	4659      	mov	r1, fp
 8019d3e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019d40:	9301      	str	r3, [sp, #4]
 8019d42:	ab1d      	add	r3, sp, #116	; 0x74
 8019d44:	9300      	str	r3, [sp, #0]
 8019d46:	ab1c      	add	r3, sp, #112	; 0x70
 8019d48:	f002 fee9 	bl	801cb1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	e7c0      	b.n	8019cd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019d50:	f8d8 0000 	ldr.w	r0, [r8]
 8019d54:	6803      	ldr	r3, [r0, #0]
 8019d56:	691b      	ldr	r3, [r3, #16]
 8019d58:	4798      	blx	r3
 8019d5a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019d5e:	4298      	cmp	r0, r3
 8019d60:	f000 80a6 	beq.w	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019d64:	f242 030b 	movw	r3, #8203	; 0x200b
 8019d68:	4298      	cmp	r0, r3
 8019d6a:	f000 80a1 	beq.w	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019d6e:	f1bb 0f00 	cmp.w	fp, #0
 8019d72:	d100      	bne.n	8019d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019d74:	444d      	add	r5, r9
 8019d76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019d78:	2a00      	cmp	r2, #0
 8019d7a:	d1bf      	bne.n	8019cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019d7c:	4691      	mov	r9, r2
 8019d7e:	e097      	b.n	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	f000 80ab 	beq.w	8019ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019d88:	f1bb 0f00 	cmp.w	fp, #0
 8019d8c:	d118      	bne.n	8019dc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019d8e:	f8d8 0000 	ldr.w	r0, [r8]
 8019d92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019d94:	6803      	ldr	r3, [r0, #0]
 8019d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d98:	4798      	blx	r3
 8019d9a:	4405      	add	r5, r0
 8019d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019da0:	1aeb      	subs	r3, r5, r3
 8019da2:	4293      	cmp	r3, r2
 8019da4:	dd17      	ble.n	8019dd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019da6:	2c00      	cmp	r4, #0
 8019da8:	f000 8097 	beq.w	8019eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019dac:	2c0a      	cmp	r4, #10
 8019dae:	f040 8085 	bne.w	8019ebc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019db2:	240a      	movs	r4, #10
 8019db4:	fab4 f084 	clz	r0, r4
 8019db8:	0940      	lsrs	r0, r0, #5
 8019dba:	b01f      	add	sp, #124	; 0x7c
 8019dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc0:	f8d8 0000 	ldr.w	r0, [r8]
 8019dc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019dc6:	6803      	ldr	r3, [r0, #0]
 8019dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dca:	4798      	blx	r3
 8019dcc:	f1bb 0f01 	cmp.w	fp, #1
 8019dd0:	eba5 0500 	sub.w	r5, r5, r0
 8019dd4:	d0a4      	beq.n	8019d20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019dd6:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019dd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019dda:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019dde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019de2:	7b43      	ldrb	r3, [r0, #13]
 8019de4:	4429      	add	r1, r5
 8019de6:	015b      	lsls	r3, r3, #5
 8019de8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dec:	7983      	ldrb	r3, [r0, #6]
 8019dee:	4313      	orrs	r3, r2
 8019df0:	440b      	add	r3, r1
 8019df2:	42b3      	cmp	r3, r6
 8019df4:	db5c      	blt.n	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019df8:	4299      	cmp	r1, r3
 8019dfa:	da59      	bge.n	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019dfc:	f8d8 0000 	ldr.w	r0, [r8]
 8019e00:	42ae      	cmp	r6, r5
 8019e02:	6803      	ldr	r3, [r0, #0]
 8019e04:	bfcc      	ite	gt
 8019e06:	1b76      	subgt	r6, r6, r5
 8019e08:	2600      	movle	r6, #0
 8019e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e0c:	bfc8      	it	gt
 8019e0e:	b2b6      	uxthgt	r6, r6
 8019e10:	4798      	blx	r3
 8019e12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019e14:	7b5a      	ldrb	r2, [r3, #13]
 8019e16:	00d1      	lsls	r1, r2, #3
 8019e18:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019e1c:	7a19      	ldrb	r1, [r3, #8]
 8019e1e:	4339      	orrs	r1, r7
 8019e20:	0657      	lsls	r7, r2, #25
 8019e22:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019e24:	bf48      	it	mi
 8019e26:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019e2a:	4407      	add	r7, r0
 8019e2c:	bf48      	it	mi
 8019e2e:	b209      	sxthmi	r1, r1
 8019e30:	1a7f      	subs	r7, r7, r1
 8019e32:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019e34:	b2bf      	uxth	r7, r7
 8019e36:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019e3a:	fa0f fa87 	sxth.w	sl, r7
 8019e3e:	4551      	cmp	r1, sl
 8019e40:	dd3a      	ble.n	8019eb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019e42:	0112      	lsls	r2, r2, #4
 8019e44:	79d8      	ldrb	r0, [r3, #7]
 8019e46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019e4a:	4302      	orrs	r2, r0
 8019e4c:	4492      	add	sl, r2
 8019e4e:	4551      	cmp	r1, sl
 8019e50:	dc2e      	bgt.n	8019eb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019e52:	1bcf      	subs	r7, r1, r7
 8019e54:	468a      	mov	sl, r1
 8019e56:	b2bf      	uxth	r7, r7
 8019e58:	9319      	str	r3, [sp, #100]	; 0x64
 8019e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e5c:	f8d8 0000 	ldr.w	r0, [r8]
 8019e60:	681a      	ldr	r2, [r3, #0]
 8019e62:	6801      	ldr	r1, [r0, #0]
 8019e64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019e66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e6a:	9218      	str	r2, [sp, #96]	; 0x60
 8019e6c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019e6e:	4788      	blx	r1
 8019e70:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019e74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e76:	910b      	str	r1, [sp, #44]	; 0x2c
 8019e78:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019e7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019e7e:	910a      	str	r1, [sp, #40]	; 0x28
 8019e80:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019e84:	9109      	str	r1, [sp, #36]	; 0x24
 8019e86:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019e8a:	9305      	str	r3, [sp, #20]
 8019e8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e8e:	9206      	str	r2, [sp, #24]
 8019e90:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019e94:	442e      	add	r6, r5
 8019e96:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019e9a:	b236      	sxth	r6, r6
 8019e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e9e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019ea2:	9600      	str	r6, [sp, #0]
 8019ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019eae:	47b0      	blx	r6
 8019eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8019eb6:	e6e2      	b.n	8019c7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8019eb8:	2700      	movs	r7, #0
 8019eba:	e7cd      	b.n	8019e58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8019ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019ebe:	3501      	adds	r5, #1
 8019ec0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ec2:	429d      	cmp	r5, r3
 8019ec4:	f6bf af76 	bge.w	8019db4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019ec8:	4659      	mov	r1, fp
 8019eca:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019ecc:	f7f7 fcf8 	bl	80118c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ed0:	4604      	mov	r4, r0
 8019ed2:	b110      	cbz	r0, 8019eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019ed4:	280a      	cmp	r0, #10
 8019ed6:	d1f2      	bne.n	8019ebe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8019ed8:	e76b      	b.n	8019db2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019eda:	2400      	movs	r4, #0
 8019edc:	e76a      	b.n	8019db4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019ede:	f1bb 0f00 	cmp.w	fp, #0
 8019ee2:	f43f af5b 	beq.w	8019d9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8019ee6:	e776      	b.n	8019dd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08019ee8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019ee8:	b530      	push	{r4, r5, lr}
 8019eea:	8a44      	ldrh	r4, [r0, #18]
 8019eec:	8ac5      	ldrh	r5, [r0, #22]
 8019eee:	82c3      	strh	r3, [r0, #22]
 8019ef0:	442c      	add	r4, r5
 8019ef2:	1ae4      	subs	r4, r4, r3
 8019ef4:	8b03      	ldrh	r3, [r0, #24]
 8019ef6:	8244      	strh	r4, [r0, #18]
 8019ef8:	8a84      	ldrh	r4, [r0, #20]
 8019efa:	4422      	add	r2, r4
 8019efc:	440c      	add	r4, r1
 8019efe:	1a59      	subs	r1, r3, r1
 8019f00:	8342      	strh	r2, [r0, #26]
 8019f02:	8284      	strh	r4, [r0, #20]
 8019f04:	8301      	strh	r1, [r0, #24]
 8019f06:	bd30      	pop	{r4, r5, pc}

08019f08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0c:	7a43      	ldrb	r3, [r0, #9]
 8019f0e:	b087      	sub	sp, #28
 8019f10:	4604      	mov	r4, r0
 8019f12:	460f      	mov	r7, r1
 8019f14:	1eda      	subs	r2, r3, #3
 8019f16:	b2d2      	uxtb	r2, r2
 8019f18:	2900      	cmp	r1, #0
 8019f1a:	d036      	beq.n	8019f8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019f1c:	2a01      	cmp	r2, #1
 8019f1e:	d932      	bls.n	8019f86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019f20:	1e58      	subs	r0, r3, #1
 8019f22:	f1d0 0b00 	rsbs	fp, r0, #0
 8019f26:	eb4b 0b00 	adc.w	fp, fp, r0
 8019f2a:	1e99      	subs	r1, r3, #2
 8019f2c:	424b      	negs	r3, r1
 8019f2e:	414b      	adcs	r3, r1
 8019f30:	9303      	str	r3, [sp, #12]
 8019f32:	2300      	movs	r3, #0
 8019f34:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019f38:	2500      	movs	r5, #0
 8019f3a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019f3e:	46a9      	mov	r9, r5
 8019f40:	8265      	strh	r5, [r4, #18]
 8019f42:	82a5      	strh	r5, [r4, #20]
 8019f44:	2300      	movs	r3, #0
 8019f46:	9305      	str	r3, [sp, #20]
 8019f48:	8823      	ldrh	r3, [r4, #0]
 8019f4a:	2b20      	cmp	r3, #32
 8019f4c:	d02b      	beq.n	8019fa6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019f4e:	eba3 020a 	sub.w	r2, r3, sl
 8019f52:	4256      	negs	r6, r2
 8019f54:	4156      	adcs	r6, r2
 8019f56:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019f5a:	4293      	cmp	r3, r2
 8019f5c:	d004      	beq.n	8019f68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019f5e:	4553      	cmp	r3, sl
 8019f60:	bf16      	itet	ne
 8019f62:	4699      	movne	r9, r3
 8019f64:	2601      	moveq	r6, #1
 8019f66:	2600      	movne	r6, #0
 8019f68:	ab05      	add	r3, sp, #20
 8019f6a:	68e2      	ldr	r2, [r4, #12]
 8019f6c:	7a21      	ldrb	r1, [r4, #8]
 8019f6e:	6860      	ldr	r0, [r4, #4]
 8019f70:	f002 fd8c 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019f74:	8020      	strh	r0, [r4, #0]
 8019f76:	b9c8      	cbnz	r0, 8019fac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019f78:	8b22      	ldrh	r2, [r4, #24]
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4620      	mov	r0, r4
 8019f80:	f7ff ffb2 	bl	8019ee8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019f84:	e066      	b.n	801a054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019f86:	468b      	mov	fp, r1
 8019f88:	e7cf      	b.n	8019f2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019f8a:	3b01      	subs	r3, #1
 8019f8c:	2a01      	cmp	r2, #1
 8019f8e:	9103      	str	r1, [sp, #12]
 8019f90:	468b      	mov	fp, r1
 8019f92:	bf8c      	ite	hi
 8019f94:	2200      	movhi	r2, #0
 8019f96:	2201      	movls	r2, #1
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	9202      	str	r2, [sp, #8]
 8019f9c:	bf8c      	ite	hi
 8019f9e:	2300      	movhi	r3, #0
 8019fa0:	2301      	movls	r3, #1
 8019fa2:	9301      	str	r3, [sp, #4]
 8019fa4:	e7c8      	b.n	8019f38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019fa6:	4699      	mov	r9, r3
 8019fa8:	2601      	movs	r6, #1
 8019faa:	e7dd      	b.n	8019f68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019fac:	8ae3      	ldrh	r3, [r4, #22]
 8019fae:	280a      	cmp	r0, #10
 8019fb0:	f103 0301 	add.w	r3, r3, #1
 8019fb4:	82e3      	strh	r3, [r4, #22]
 8019fb6:	d0df      	beq.n	8019f78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019fb8:	9a05      	ldr	r2, [sp, #20]
 8019fba:	bb42      	cbnz	r2, 801a00e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8019fbc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019fc0:	4298      	cmp	r0, r3
 8019fc2:	d001      	beq.n	8019fc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019fc4:	4550      	cmp	r0, sl
 8019fc6:	d1bd      	bne.n	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019fc8:	8823      	ldrh	r3, [r4, #0]
 8019fca:	8b21      	ldrh	r1, [r4, #24]
 8019fcc:	2b20      	cmp	r3, #32
 8019fce:	d001      	beq.n	8019fd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019fd0:	4553      	cmp	r3, sl
 8019fd2:	d131      	bne.n	801a038 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019fd4:	2e00      	cmp	r6, #0
 8019fd6:	bf0a      	itet	eq
 8019fd8:	460d      	moveq	r5, r1
 8019fda:	4630      	movne	r0, r6
 8019fdc:	2001      	moveq	r0, #1
 8019fde:	440a      	add	r2, r1
 8019fe0:	8aa3      	ldrh	r3, [r4, #20]
 8019fe2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019fe6:	b292      	uxth	r2, r2
 8019fe8:	8322      	strh	r2, [r4, #24]
 8019fea:	4413      	add	r3, r2
 8019fec:	2f00      	cmp	r7, #0
 8019fee:	d03a      	beq.n	801a066 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019ff0:	f1bb 0f00 	cmp.w	fp, #0
 8019ff4:	d102      	bne.n	8019ffc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019ff6:	9903      	ldr	r1, [sp, #12]
 8019ff8:	b301      	cbz	r1, 801a03c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019ffa:	b1f8      	cbz	r0, 801a03c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019ffc:	8ba1      	ldrh	r1, [r4, #28]
 8019ffe:	4419      	add	r1, r3
 801a000:	458c      	cmp	ip, r1
 801a002:	da2a      	bge.n	801a05a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a004:	8a61      	ldrh	r1, [r4, #18]
 801a006:	b341      	cbz	r1, 801a05a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a008:	4563      	cmp	r3, ip
 801a00a:	dd9b      	ble.n	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a00c:	e01c      	b.n	801a048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a00e:	8893      	ldrh	r3, [r2, #4]
 801a010:	4649      	mov	r1, r9
 801a012:	8023      	strh	r3, [r4, #0]
 801a014:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a018:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a01c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a020:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a024:	ea48 0800 	orr.w	r8, r8, r0
 801a028:	68e0      	ldr	r0, [r4, #12]
 801a02a:	6803      	ldr	r3, [r0, #0]
 801a02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a02e:	4798      	blx	r3
 801a030:	eb08 0200 	add.w	r2, r8, r0
 801a034:	b292      	uxth	r2, r2
 801a036:	e7c7      	b.n	8019fc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a038:	2000      	movs	r0, #0
 801a03a:	e7d0      	b.n	8019fde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a03c:	4563      	cmp	r3, ip
 801a03e:	dd81      	ble.n	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a040:	8a63      	ldrh	r3, [r4, #18]
 801a042:	2b00      	cmp	r3, #0
 801a044:	f43f af7e 	beq.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a048:	2301      	movs	r3, #1
 801a04a:	8ba2      	ldrh	r2, [r4, #28]
 801a04c:	77a3      	strb	r3, [r4, #30]
 801a04e:	8b63      	ldrh	r3, [r4, #26]
 801a050:	4413      	add	r3, r2
 801a052:	8363      	strh	r3, [r4, #26]
 801a054:	b007      	add	sp, #28
 801a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05a:	2300      	movs	r3, #0
 801a05c:	4611      	mov	r1, r2
 801a05e:	4620      	mov	r0, r4
 801a060:	f7ff ff42 	bl	8019ee8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a064:	e76e      	b.n	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a066:	4563      	cmp	r3, ip
 801a068:	dd14      	ble.n	801a094 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a06a:	9b02      	ldr	r3, [sp, #8]
 801a06c:	b113      	cbz	r3, 801a074 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a06e:	2301      	movs	r3, #1
 801a070:	460a      	mov	r2, r1
 801a072:	e783      	b.n	8019f7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a074:	9b01      	ldr	r3, [sp, #4]
 801a076:	2b00      	cmp	r3, #0
 801a078:	f43f af64 	beq.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a07c:	2800      	cmp	r0, #0
 801a07e:	f47f af61 	bne.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a082:	b116      	cbz	r6, 801a08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a084:	2301      	movs	r3, #1
 801a086:	462a      	mov	r2, r5
 801a088:	e779      	b.n	8019f7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a08a:	8a63      	ldrh	r3, [r4, #18]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	f43f af59 	beq.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a092:	e7df      	b.n	801a054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a094:	2800      	cmp	r0, #0
 801a096:	f47f af55 	bne.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a09a:	2e00      	cmp	r6, #0
 801a09c:	f43f af52 	beq.w	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a0a0:	2301      	movs	r3, #1
 801a0a2:	462a      	mov	r2, r5
 801a0a4:	e7db      	b.n	801a05e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a0a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a0a6:	b530      	push	{r4, r5, lr}
 801a0a8:	4605      	mov	r5, r0
 801a0aa:	b08b      	sub	sp, #44	; 0x2c
 801a0ac:	b191      	cbz	r1, 801a0d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a0ae:	2401      	movs	r4, #1
 801a0b0:	e9cd 3100 	strd	r3, r1, [sp]
 801a0b4:	4613      	mov	r3, r2
 801a0b6:	4601      	mov	r1, r0
 801a0b8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a0bc:	a802      	add	r0, sp, #8
 801a0be:	f7ff fd07 	bl	8019ad0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a0c2:	2100      	movs	r1, #0
 801a0c4:	a802      	add	r0, sp, #8
 801a0c6:	f7ff ff1f 	bl	8019f08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a0ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a0ce:	b163      	cbz	r3, 801a0ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a0d0:	3401      	adds	r4, #1
 801a0d2:	e7f6      	b.n	801a0c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a0d4:	2401      	movs	r4, #1
 801a0d6:	f002 fda5 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0da:	280a      	cmp	r0, #10
 801a0dc:	4628      	mov	r0, r5
 801a0de:	bf08      	it	eq
 801a0e0:	3401      	addeq	r4, #1
 801a0e2:	f002 fd9f 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0e6:	2800      	cmp	r0, #0
 801a0e8:	d1f7      	bne.n	801a0da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a0ea:	b2a0      	uxth	r0, r4
 801a0ec:	b00b      	add	sp, #44	; 0x2c
 801a0ee:	bd30      	pop	{r4, r5, pc}

0801a0f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f4:	b0e5      	sub	sp, #404	; 0x194
 801a0f6:	4689      	mov	r9, r1
 801a0f8:	461c      	mov	r4, r3
 801a0fa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801a0fe:	900a      	str	r0, [sp, #40]	; 0x28
 801a100:	f1ba 0f00 	cmp.w	sl, #0
 801a104:	f000 80b4 	beq.w	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	f000 80b0 	beq.w	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a110:	7ba3      	ldrb	r3, [r4, #14]
 801a112:	2b00      	cmp	r3, #0
 801a114:	f000 80ac 	beq.w	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a118:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a11c:	6810      	ldr	r0, [r2, #0]
 801a11e:	6851      	ldr	r1, [r2, #4]
 801a120:	2500      	movs	r5, #0
 801a122:	4643      	mov	r3, r8
 801a124:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a128:	950f      	str	r5, [sp, #60]	; 0x3c
 801a12a:	af19      	add	r7, sp, #100	; 0x64
 801a12c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a130:	79a2      	ldrb	r2, [r4, #6]
 801a132:	c303      	stmia	r3!, {r0, r1}
 801a134:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a138:	a90f      	add	r1, sp, #60	; 0x3c
 801a13a:	4640      	mov	r0, r8
 801a13c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a140:	f7ff fd3e 	bl	8019bc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a144:	a90f      	add	r1, sp, #60	; 0x3c
 801a146:	79a2      	ldrb	r2, [r4, #6]
 801a148:	4608      	mov	r0, r1
 801a14a:	f7ff fd39 	bl	8019bc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a14e:	4638      	mov	r0, r7
 801a150:	f002 f93c 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801a154:	6820      	ldr	r0, [r4, #0]
 801a156:	6803      	ldr	r3, [r0, #0]
 801a158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a15a:	4798      	blx	r3
 801a15c:	4606      	mov	r6, r0
 801a15e:	6820      	ldr	r0, [r4, #0]
 801a160:	6803      	ldr	r3, [r0, #0]
 801a162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a164:	4798      	blx	r3
 801a166:	4633      	mov	r3, r6
 801a168:	9000      	str	r0, [sp, #0]
 801a16a:	4651      	mov	r1, sl
 801a16c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a16e:	4638      	mov	r0, r7
 801a170:	f002 f987 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a174:	7923      	ldrb	r3, [r4, #4]
 801a176:	6820      	ldr	r0, [r4, #0]
 801a178:	9308      	str	r3, [sp, #32]
 801a17a:	6803      	ldr	r3, [r0, #0]
 801a17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a17e:	4798      	blx	r3
 801a180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a184:	181e      	adds	r6, r3, r0
 801a186:	42ae      	cmp	r6, r5
 801a188:	dd06      	ble.n	801a198 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a18a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a18e:	4282      	cmp	r2, r0
 801a190:	bfa4      	itt	ge
 801a192:	189d      	addge	r5, r3, r2
 801a194:	fb95 f5f6 	sdivge	r5, r5, r6
 801a198:	a832      	add	r0, sp, #200	; 0xc8
 801a19a:	f002 f917 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801a19e:	7c23      	ldrb	r3, [r4, #16]
 801a1a0:	b17b      	cbz	r3, 801a1c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a1a2:	6820      	ldr	r0, [r4, #0]
 801a1a4:	6803      	ldr	r3, [r0, #0]
 801a1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1a8:	4798      	blx	r3
 801a1aa:	4683      	mov	fp, r0
 801a1ac:	6820      	ldr	r0, [r4, #0]
 801a1ae:	6803      	ldr	r3, [r0, #0]
 801a1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a1b2:	4798      	blx	r3
 801a1b4:	465b      	mov	r3, fp
 801a1b6:	9000      	str	r0, [sp, #0]
 801a1b8:	4651      	mov	r1, sl
 801a1ba:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a1bc:	a832      	add	r0, sp, #200	; 0xc8
 801a1be:	f002 f960 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a1c2:	7be1      	ldrb	r1, [r4, #15]
 801a1c4:	a811      	add	r0, sp, #68	; 0x44
 801a1c6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a1ca:	7963      	ldrb	r3, [r4, #5]
 801a1cc:	1a52      	subs	r2, r2, r1
 801a1ce:	7c21      	ldrb	r1, [r4, #16]
 801a1d0:	9101      	str	r1, [sp, #4]
 801a1d2:	b292      	uxth	r2, r2
 801a1d4:	6821      	ldr	r1, [r4, #0]
 801a1d6:	9100      	str	r1, [sp, #0]
 801a1d8:	a932      	add	r1, sp, #200	; 0xc8
 801a1da:	f7ff fc79 	bl	8019ad0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a1de:	7c23      	ldrb	r3, [r4, #16]
 801a1e0:	b9bb      	cbnz	r3, 801a212 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801a1e2:	fa1f fa86 	uxth.w	sl, r6
 801a1e6:	2d00      	cmp	r5, #0
 801a1e8:	dd45      	ble.n	801a276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a1ea:	4638      	mov	r0, r7
 801a1ec:	f002 fd1a 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a1f0:	2800      	cmp	r0, #0
 801a1f2:	d03d      	beq.n	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a1f4:	280a      	cmp	r0, #10
 801a1f6:	d1f6      	bne.n	801a1e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a1f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a1fc:	3d01      	subs	r5, #1
 801a1fe:	4453      	add	r3, sl
 801a200:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a204:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a208:	eba3 030a 	sub.w	r3, r3, sl
 801a20c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a210:	e7e9      	b.n	801a1e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a212:	0073      	lsls	r3, r6, #1
 801a214:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a218:	fa1f fa86 	uxth.w	sl, r6
 801a21c:	9309      	str	r3, [sp, #36]	; 0x24
 801a21e:	2d00      	cmp	r5, #0
 801a220:	dd29      	ble.n	801a276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a222:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a226:	a811      	add	r0, sp, #68	; 0x44
 801a228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a22a:	428b      	cmp	r3, r1
 801a22c:	bfd4      	ite	le
 801a22e:	2100      	movle	r1, #0
 801a230:	2101      	movgt	r1, #1
 801a232:	f7ff fe69 	bl	8019f08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a236:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a23a:	3b01      	subs	r3, #1
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	455b      	cmp	r3, fp
 801a240:	930b      	str	r3, [sp, #44]	; 0x2c
 801a242:	d005      	beq.n	801a250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801a244:	7961      	ldrb	r1, [r4, #5]
 801a246:	4638      	mov	r0, r7
 801a248:	f7f7 fb3a 	bl	80118c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a24e:	e7f4      	b.n	801a23a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801a250:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a254:	3d01      	subs	r5, #1
 801a256:	4453      	add	r3, sl
 801a258:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a25c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a260:	eba3 030a 	sub.w	r3, r3, sl
 801a264:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a268:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d1d6      	bne.n	801a21e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801a270:	b065      	add	sp, #404	; 0x194
 801a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a276:	0075      	lsls	r5, r6, #1
 801a278:	f04f 0a00 	mov.w	sl, #0
 801a27c:	7c23      	ldrb	r3, [r4, #16]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d066      	beq.n	801a350 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a282:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a286:	a811      	add	r0, sp, #68	; 0x44
 801a288:	428d      	cmp	r5, r1
 801a28a:	bfd4      	ite	le
 801a28c:	2100      	movle	r1, #0
 801a28e:	2101      	movgt	r1, #1
 801a290:	f7ff fe3a 	bl	8019f08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a294:	9b08      	ldr	r3, [sp, #32]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d055      	beq.n	801a346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a29a:	f894 b010 	ldrb.w	fp, [r4, #16]
 801a29e:	2264      	movs	r2, #100	; 0x64
 801a2a0:	4639      	mov	r1, r7
 801a2a2:	a84b      	add	r0, sp, #300	; 0x12c
 801a2a4:	f00f fb2a 	bl	80298fc <memcpy>
 801a2a8:	f1bb 0f00 	cmp.w	fp, #0
 801a2ac:	d058      	beq.n	801a360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a2ae:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a2b2:	7922      	ldrb	r2, [r4, #4]
 801a2b4:	2a01      	cmp	r2, #1
 801a2b6:	d13c      	bne.n	801a332 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a2b8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a2bc:	1ac0      	subs	r0, r0, r3
 801a2be:	2302      	movs	r3, #2
 801a2c0:	fb90 f0f3 	sdiv	r0, r0, r3
 801a2c4:	b200      	sxth	r0, r0
 801a2c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a2ca:	4418      	add	r0, r3
 801a2cc:	7c23      	ldrb	r3, [r4, #16]
 801a2ce:	b200      	sxth	r0, r0
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d03a      	beq.n	801a34a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801a2d4:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a2d8:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a2dc:	9000      	str	r0, [sp, #0]
 801a2de:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a2e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a2e4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a2e8:	e9cd a703 	strd	sl, r7, [sp, #12]
 801a2ec:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a2f0:	464a      	mov	r2, r9
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	f7ff fc95 	bl	8019c22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	d1b9      	bne.n	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a2fc:	b2b2      	uxth	r2, r6
 801a2fe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a302:	4611      	mov	r1, r2
 801a304:	4413      	add	r3, r2
 801a306:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a30a:	b21b      	sxth	r3, r3
 801a30c:	1a52      	subs	r2, r2, r1
 801a30e:	7c21      	ldrb	r1, [r4, #16]
 801a310:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a314:	b212      	sxth	r2, r2
 801a316:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a31a:	b109      	cbz	r1, 801a320 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801a31c:	42b2      	cmp	r2, r6
 801a31e:	dba7      	blt.n	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a320:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a324:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a328:	440a      	add	r2, r1
 801a32a:	b212      	sxth	r2, r2
 801a32c:	4293      	cmp	r3, r2
 801a32e:	dda5      	ble.n	801a27c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801a330:	e79e      	b.n	801a270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a332:	2a02      	cmp	r2, #2
 801a334:	d105      	bne.n	801a342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a336:	7be2      	ldrb	r2, [r4, #15]
 801a338:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a33c:	1a80      	subs	r0, r0, r2
 801a33e:	1ac0      	subs	r0, r0, r3
 801a340:	e7c0      	b.n	801a2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a342:	2000      	movs	r0, #0
 801a344:	e7bf      	b.n	801a2c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801a346:	7be0      	ldrb	r0, [r4, #15]
 801a348:	e7bd      	b.n	801a2c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801a34a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a34e:	e7c3      	b.n	801a2d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801a350:	9b08      	ldr	r3, [sp, #32]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d0f7      	beq.n	801a346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a356:	2264      	movs	r2, #100	; 0x64
 801a358:	4639      	mov	r1, r7
 801a35a:	a84b      	add	r0, sp, #300	; 0x12c
 801a35c:	f00f face 	bl	80298fc <memcpy>
 801a360:	2300      	movs	r3, #0
 801a362:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a366:	6821      	ldr	r1, [r4, #0]
 801a368:	a84b      	add	r0, sp, #300	; 0x12c
 801a36a:	f7ff fbed 	bl	8019b48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a36e:	b203      	sxth	r3, r0
 801a370:	e79f      	b.n	801a2b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801a372 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a372:	2b03      	cmp	r3, #3
 801a374:	d818      	bhi.n	801a3a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a376:	e8df f003 	tbb	[pc, r3]
 801a37a:	0602      	.short	0x0602
 801a37c:	130d      	.short	0x130d
 801a37e:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a382:	1850      	adds	r0, r2, r1
 801a384:	4770      	bx	lr
 801a386:	8803      	ldrh	r3, [r0, #0]
 801a388:	8880      	ldrh	r0, [r0, #4]
 801a38a:	4418      	add	r0, r3
 801a38c:	b200      	sxth	r0, r0
 801a38e:	1a80      	subs	r0, r0, r2
 801a390:	3801      	subs	r0, #1
 801a392:	4770      	bx	lr
 801a394:	8803      	ldrh	r3, [r0, #0]
 801a396:	8880      	ldrh	r0, [r0, #4]
 801a398:	4418      	add	r0, r3
 801a39a:	b200      	sxth	r0, r0
 801a39c:	1a40      	subs	r0, r0, r1
 801a39e:	e7f7      	b.n	801a390 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a3a0:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a3a4:	4410      	add	r0, r2
 801a3a6:	4770      	bx	lr
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	4770      	bx	lr

0801a3ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a3ac:	2b03      	cmp	r3, #3
 801a3ae:	d817      	bhi.n	801a3e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a3b0:	e8df f003 	tbb	[pc, r3]
 801a3b4:	10090602 	.word	0x10090602
 801a3b8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a3bc:	1850      	adds	r0, r2, r1
 801a3be:	4770      	bx	lr
 801a3c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a3c4:	e7fa      	b.n	801a3bc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a3c6:	8843      	ldrh	r3, [r0, #2]
 801a3c8:	88c0      	ldrh	r0, [r0, #6]
 801a3ca:	4418      	add	r0, r3
 801a3cc:	b200      	sxth	r0, r0
 801a3ce:	1a80      	subs	r0, r0, r2
 801a3d0:	3801      	subs	r0, #1
 801a3d2:	4770      	bx	lr
 801a3d4:	8843      	ldrh	r3, [r0, #2]
 801a3d6:	88c0      	ldrh	r0, [r0, #6]
 801a3d8:	4418      	add	r0, r3
 801a3da:	b200      	sxth	r0, r0
 801a3dc:	1a40      	subs	r0, r0, r1
 801a3de:	e7f7      	b.n	801a3d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	4770      	bx	lr

0801a3e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a3e4:	4b01      	ldr	r3, [pc, #4]	; (801a3ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	601a      	str	r2, [r3, #0]
 801a3ea:	4770      	bx	lr
 801a3ec:	2003c27c 	.word	0x2003c27c

0801a3f0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	b1c8      	cbz	r0, 801a428 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a3f4:	0c02      	lsrs	r2, r0, #16
 801a3f6:	0412      	lsls	r2, r2, #16
 801a3f8:	b9a2      	cbnz	r2, 801a424 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a3fa:	0403      	lsls	r3, r0, #16
 801a3fc:	2010      	movs	r0, #16
 801a3fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a402:	bf04      	itt	eq
 801a404:	021b      	lsleq	r3, r3, #8
 801a406:	3008      	addeq	r0, #8
 801a408:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a40c:	bf04      	itt	eq
 801a40e:	011b      	lsleq	r3, r3, #4
 801a410:	3004      	addeq	r0, #4
 801a412:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a416:	bf04      	itt	eq
 801a418:	009b      	lsleq	r3, r3, #2
 801a41a:	3002      	addeq	r0, #2
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	db04      	blt.n	801a42a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a420:	3001      	adds	r0, #1
 801a422:	4770      	bx	lr
 801a424:	2000      	movs	r0, #0
 801a426:	e7ea      	b.n	801a3fe <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a428:	2020      	movs	r0, #32
 801a42a:	4770      	bx	lr

0801a42c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a430:	b087      	sub	sp, #28
 801a432:	4681      	mov	r9, r0
 801a434:	4698      	mov	r8, r3
 801a436:	4610      	mov	r0, r2
 801a438:	460d      	mov	r5, r1
 801a43a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a43e:	b981      	cbnz	r1, 801a462 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a440:	b14b      	cbz	r3, 801a456 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a442:	460b      	mov	r3, r1
 801a444:	464a      	mov	r2, r9
 801a446:	4641      	mov	r1, r8
 801a448:	e9cd 4700 	strd	r4, r7, [sp]
 801a44c:	f7ff ffee 	bl	801a42c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a450:	b007      	add	sp, #28
 801a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a456:	f04f 33ff 	mov.w	r3, #4294967295
 801a45a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a45e:	603b      	str	r3, [r7, #0]
 801a460:	e7f6      	b.n	801a450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a462:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a466:	d107      	bne.n	801a478 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a468:	fb09 f602 	mul.w	r6, r9, r2
 801a46c:	fbb6 f0f4 	udiv	r0, r6, r4
 801a470:	fb04 6610 	mls	r6, r4, r0, r6
 801a474:	603e      	str	r6, [r7, #0]
 801a476:	e7eb      	b.n	801a450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a478:	2601      	movs	r6, #1
 801a47a:	fa09 fb01 	lsl.w	fp, r9, r1
 801a47e:	408e      	lsls	r6, r1
 801a480:	fbbb f3f4 	udiv	r3, fp, r4
 801a484:	3e01      	subs	r6, #1
 801a486:	9302      	str	r3, [sp, #8]
 801a488:	fb0a f303 	mul.w	r3, sl, r3
 801a48c:	4016      	ands	r6, r2
 801a48e:	9303      	str	r3, [sp, #12]
 801a490:	4630      	mov	r0, r6
 801a492:	f7ff ffad 	bl	801a3f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a496:	464a      	mov	r2, r9
 801a498:	460b      	mov	r3, r1
 801a49a:	4601      	mov	r1, r0
 801a49c:	4630      	mov	r0, r6
 801a49e:	e9cd 4700 	strd	r4, r7, [sp]
 801a4a2:	f7ff ffc3 	bl	801a42c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a4a6:	9b02      	ldr	r3, [sp, #8]
 801a4a8:	4606      	mov	r6, r0
 801a4aa:	eb05 0108 	add.w	r1, r5, r8
 801a4ae:	fb04 bb13 	mls	fp, r4, r3, fp
 801a4b2:	4658      	mov	r0, fp
 801a4b4:	f7ff ff9c 	bl	801a3f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a4b8:	ab05      	add	r3, sp, #20
 801a4ba:	465a      	mov	r2, fp
 801a4bc:	e9cd 4300 	strd	r4, r3, [sp]
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	4650      	mov	r0, sl
 801a4c4:	f7ff ffb2 	bl	801a42c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a4c8:	6839      	ldr	r1, [r7, #0]
 801a4ca:	9a05      	ldr	r2, [sp, #20]
 801a4cc:	9b03      	ldr	r3, [sp, #12]
 801a4ce:	4411      	add	r1, r2
 801a4d0:	fbb1 f2f4 	udiv	r2, r1, r4
 801a4d4:	18d3      	adds	r3, r2, r3
 801a4d6:	fb04 1412 	mls	r4, r4, r2, r1
 801a4da:	441e      	add	r6, r3
 801a4dc:	603c      	str	r4, [r7, #0]
 801a4de:	4430      	add	r0, r6
 801a4e0:	e7b6      	b.n	801a450 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a4e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	f1b0 0900 	subs.w	r9, r0, #0
 801a4ec:	461d      	mov	r5, r3
 801a4ee:	4617      	mov	r7, r2
 801a4f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a4f2:	bfbb      	ittet	lt
 801a4f4:	f1c9 0900 	rsblt	r9, r9, #0
 801a4f8:	f04f 36ff 	movlt.w	r6, #4294967295
 801a4fc:	2601      	movge	r6, #1
 801a4fe:	6823      	ldrlt	r3, [r4, #0]
 801a500:	bfbc      	itt	lt
 801a502:	425b      	neglt	r3, r3
 801a504:	6023      	strlt	r3, [r4, #0]
 801a506:	2a00      	cmp	r2, #0
 801a508:	da04      	bge.n	801a514 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a50a:	6823      	ldr	r3, [r4, #0]
 801a50c:	4257      	negs	r7, r2
 801a50e:	4276      	negs	r6, r6
 801a510:	425b      	negs	r3, r3
 801a512:	6023      	str	r3, [r4, #0]
 801a514:	2d00      	cmp	r5, #0
 801a516:	4638      	mov	r0, r7
 801a518:	bfba      	itte	lt
 801a51a:	426d      	neglt	r5, r5
 801a51c:	f04f 38ff 	movlt.w	r8, #4294967295
 801a520:	f04f 0801 	movge.w	r8, #1
 801a524:	f7ff ff64 	bl	801a3f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a528:	ab03      	add	r3, sp, #12
 801a52a:	463a      	mov	r2, r7
 801a52c:	e9cd 5300 	strd	r5, r3, [sp]
 801a530:	4603      	mov	r3, r0
 801a532:	4648      	mov	r0, r9
 801a534:	f7ff ff7a 	bl	801a42c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a538:	6823      	ldr	r3, [r4, #0]
 801a53a:	9a03      	ldr	r2, [sp, #12]
 801a53c:	4546      	cmp	r6, r8
 801a53e:	441a      	add	r2, r3
 801a540:	fb92 f3f5 	sdiv	r3, r2, r5
 801a544:	4418      	add	r0, r3
 801a546:	fb05 2313 	mls	r3, r5, r3, r2
 801a54a:	bf18      	it	ne
 801a54c:	4240      	negne	r0, r0
 801a54e:	1c72      	adds	r2, r6, #1
 801a550:	6023      	str	r3, [r4, #0]
 801a552:	d105      	bne.n	801a560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a554:	2b00      	cmp	r3, #0
 801a556:	f1c3 0200 	rsb	r2, r3, #0
 801a55a:	db0b      	blt.n	801a574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a55c:	6022      	str	r2, [r4, #0]
 801a55e:	e006      	b.n	801a56e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a560:	2e01      	cmp	r6, #1
 801a562:	d104      	bne.n	801a56e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a564:	2b00      	cmp	r3, #0
 801a566:	da02      	bge.n	801a56e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a568:	442b      	add	r3, r5
 801a56a:	3801      	subs	r0, #1
 801a56c:	6023      	str	r3, [r4, #0]
 801a56e:	b005      	add	sp, #20
 801a570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a574:	3801      	subs	r0, #1
 801a576:	1b52      	subs	r2, r2, r5
 801a578:	e7f0      	b.n	801a55c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a57c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a57c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a580:	4c1c      	ldr	r4, [pc, #112]	; (801a5f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a582:	4605      	mov	r5, r0
 801a584:	6807      	ldr	r7, [r0, #0]
 801a586:	69a3      	ldr	r3, [r4, #24]
 801a588:	b92b      	cbnz	r3, 801a596 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a58a:	6840      	ldr	r0, [r0, #4]
 801a58c:	e9c5 7000 	strd	r7, r0, [r5]
 801a590:	b004      	add	sp, #16
 801a592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a596:	f04f 0802 	mov.w	r8, #2
 801a59a:	68a2      	ldr	r2, [r4, #8]
 801a59c:	ae04      	add	r6, sp, #16
 801a59e:	6820      	ldr	r0, [r4, #0]
 801a5a0:	fb93 f1f8 	sdiv	r1, r3, r8
 801a5a4:	440a      	add	r2, r1
 801a5a6:	69e1      	ldr	r1, [r4, #28]
 801a5a8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a5ac:	463a      	mov	r2, r7
 801a5ae:	9600      	str	r6, [sp, #0]
 801a5b0:	f7ff ff97 	bl	801a4e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5b4:	69a3      	ldr	r3, [r4, #24]
 801a5b6:	4607      	mov	r7, r0
 801a5b8:	686a      	ldr	r2, [r5, #4]
 801a5ba:	6a21      	ldr	r1, [r4, #32]
 801a5bc:	9600      	str	r6, [sp, #0]
 801a5be:	6860      	ldr	r0, [r4, #4]
 801a5c0:	f7ff ff8f 	bl	801a4e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5c4:	69a3      	ldr	r3, [r4, #24]
 801a5c6:	6962      	ldr	r2, [r4, #20]
 801a5c8:	4407      	add	r7, r0
 801a5ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a5cc:	9600      	str	r6, [sp, #0]
 801a5ce:	68e0      	ldr	r0, [r4, #12]
 801a5d0:	fb93 f8f8 	sdiv	r8, r3, r8
 801a5d4:	4442      	add	r2, r8
 801a5d6:	9203      	str	r2, [sp, #12]
 801a5d8:	682a      	ldr	r2, [r5, #0]
 801a5da:	f7ff ff82 	bl	801a4e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5de:	4680      	mov	r8, r0
 801a5e0:	9600      	str	r6, [sp, #0]
 801a5e2:	69a3      	ldr	r3, [r4, #24]
 801a5e4:	686a      	ldr	r2, [r5, #4]
 801a5e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a5e8:	6920      	ldr	r0, [r4, #16]
 801a5ea:	f7ff ff7a 	bl	801a4e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5ee:	4440      	add	r0, r8
 801a5f0:	e7cc      	b.n	801a58c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a5f2:	bf00      	nop
 801a5f4:	2003c280 	.word	0x2003c280

0801a5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a5f8:	4b07      	ldr	r3, [pc, #28]	; (801a618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d109      	bne.n	801a614 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a600:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a604:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a608:	8003      	strh	r3, [r0, #0]
 801a60a:	4b04      	ldr	r3, [pc, #16]	; (801a61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a60c:	881b      	ldrh	r3, [r3, #0]
 801a60e:	3b01      	subs	r3, #1
 801a610:	1a9b      	subs	r3, r3, r2
 801a612:	800b      	strh	r3, [r1, #0]
 801a614:	4770      	bx	lr
 801a616:	bf00      	nop
 801a618:	2003c264 	.word	0x2003c264
 801a61c:	2003c260 	.word	0x2003c260

0801a620 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a620:	4b07      	ldr	r3, [pc, #28]	; (801a640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a622:	b510      	push	{r4, lr}
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	2b01      	cmp	r3, #1
 801a628:	d108      	bne.n	801a63c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a62a:	4b06      	ldr	r3, [pc, #24]	; (801a644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a62c:	880c      	ldrh	r4, [r1, #0]
 801a62e:	881b      	ldrh	r3, [r3, #0]
 801a630:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a634:	3b01      	subs	r3, #1
 801a636:	1b1b      	subs	r3, r3, r4
 801a638:	8003      	strh	r3, [r0, #0]
 801a63a:	800a      	strh	r2, [r1, #0]
 801a63c:	bd10      	pop	{r4, pc}
 801a63e:	bf00      	nop
 801a640:	2003c264 	.word	0x2003c264
 801a644:	2003c260 	.word	0x2003c260

0801a648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a648:	4b0a      	ldr	r3, [pc, #40]	; (801a674 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a64a:	b510      	push	{r4, lr}
 801a64c:	781b      	ldrb	r3, [r3, #0]
 801a64e:	2b01      	cmp	r3, #1
 801a650:	d10e      	bne.n	801a670 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a652:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a656:	8843      	ldrh	r3, [r0, #2]
 801a658:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a65c:	18ca      	adds	r2, r1, r3
 801a65e:	4b06      	ldr	r3, [pc, #24]	; (801a678 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a660:	8044      	strh	r4, [r0, #2]
 801a662:	881b      	ldrh	r3, [r3, #0]
 801a664:	1a9b      	subs	r3, r3, r2
 801a666:	8003      	strh	r3, [r0, #0]
 801a668:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a66c:	8081      	strh	r1, [r0, #4]
 801a66e:	80c3      	strh	r3, [r0, #6]
 801a670:	bd10      	pop	{r4, pc}
 801a672:	bf00      	nop
 801a674:	2003c264 	.word	0x2003c264
 801a678:	2003c260 	.word	0x2003c260

0801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a67c:	4b08      	ldr	r3, [pc, #32]	; (801a6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	2b01      	cmp	r3, #1
 801a682:	d10c      	bne.n	801a69e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a684:	8803      	ldrh	r3, [r0, #0]
 801a686:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a68a:	8842      	ldrh	r2, [r0, #2]
 801a68c:	8002      	strh	r2, [r0, #0]
 801a68e:	185a      	adds	r2, r3, r1
 801a690:	4b04      	ldr	r3, [pc, #16]	; (801a6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a692:	881b      	ldrh	r3, [r3, #0]
 801a694:	1a9b      	subs	r3, r3, r2
 801a696:	8043      	strh	r3, [r0, #2]
 801a698:	88c3      	ldrh	r3, [r0, #6]
 801a69a:	80c1      	strh	r1, [r0, #6]
 801a69c:	8083      	strh	r3, [r0, #4]
 801a69e:	4770      	bx	lr
 801a6a0:	2003c264 	.word	0x2003c264
 801a6a4:	2003c260 	.word	0x2003c260

0801a6a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a6a8:	4b07      	ldr	r3, [pc, #28]	; (801a6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a6aa:	b510      	push	{r4, lr}
 801a6ac:	781b      	ldrb	r3, [r3, #0]
 801a6ae:	2b01      	cmp	r3, #1
 801a6b0:	d108      	bne.n	801a6c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a6b2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a6b6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a6ba:	8003      	strh	r3, [r0, #0]
 801a6bc:	8893      	ldrh	r3, [r2, #4]
 801a6be:	3b01      	subs	r3, #1
 801a6c0:	1b1b      	subs	r3, r3, r4
 801a6c2:	800b      	strh	r3, [r1, #0]
 801a6c4:	bd10      	pop	{r4, pc}
 801a6c6:	bf00      	nop
 801a6c8:	2003c264 	.word	0x2003c264

0801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a6cc:	4b0a      	ldr	r3, [pc, #40]	; (801a6f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a6ce:	460a      	mov	r2, r1
 801a6d0:	b510      	push	{r4, lr}
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	2b01      	cmp	r3, #1
 801a6d6:	d10d      	bne.n	801a6f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a6d8:	8881      	ldrh	r1, [r0, #4]
 801a6da:	8803      	ldrh	r3, [r0, #0]
 801a6dc:	440b      	add	r3, r1
 801a6de:	4601      	mov	r1, r0
 801a6e0:	3b01      	subs	r3, #1
 801a6e2:	f821 3b02 	strh.w	r3, [r1], #2
 801a6e6:	f7ff ffdf 	bl	801a6a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a6ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a6ee:	88c2      	ldrh	r2, [r0, #6]
 801a6f0:	80c3      	strh	r3, [r0, #6]
 801a6f2:	8082      	strh	r2, [r0, #4]
 801a6f4:	bd10      	pop	{r4, pc}
 801a6f6:	bf00      	nop
 801a6f8:	2003c264 	.word	0x2003c264

0801a6fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a6fc:	b570      	push	{r4, r5, r6, lr}
 801a6fe:	2300      	movs	r3, #0
 801a700:	4c0a      	ldr	r4, [pc, #40]	; (801a72c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801a702:	4605      	mov	r5, r0
 801a704:	460e      	mov	r6, r1
 801a706:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a70a:	6820      	ldr	r0, [r4, #0]
 801a70c:	b110      	cbz	r0, 801a714 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801a70e:	6803      	ldr	r3, [r0, #0]
 801a710:	695b      	ldr	r3, [r3, #20]
 801a712:	4798      	blx	r3
 801a714:	6026      	str	r6, [r4, #0]
 801a716:	4630      	mov	r0, r6
 801a718:	6833      	ldr	r3, [r6, #0]
 801a71a:	68db      	ldr	r3, [r3, #12]
 801a71c:	4798      	blx	r3
 801a71e:	682b      	ldr	r3, [r5, #0]
 801a720:	4628      	mov	r0, r5
 801a722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a728:	4718      	bx	r3
 801a72a:	bf00      	nop
 801a72c:	2003c2b0 	.word	0x2003c2b0

0801a730 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a730:	4b06      	ldr	r3, [pc, #24]	; (801a74c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a732:	2100      	movs	r1, #0
 801a734:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a738:	4b05      	ldr	r3, [pc, #20]	; (801a750 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a73a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a742:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a746:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a74a:	4770      	bx	lr
 801a74c:	2003c260 	.word	0x2003c260
 801a750:	2003c262 	.word	0x2003c262

0801a754 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a754:	4b03      	ldr	r3, [pc, #12]	; (801a764 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a756:	6818      	ldr	r0, [r3, #0]
 801a758:	b110      	cbz	r0, 801a760 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a75a:	6803      	ldr	r3, [r0, #0]
 801a75c:	699b      	ldr	r3, [r3, #24]
 801a75e:	4718      	bx	r3
 801a760:	4770      	bx	lr
 801a762:	bf00      	nop
 801a764:	2003c2b0 	.word	0x2003c2b0

0801a768 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a768:	4770      	bx	lr
	...

0801a76c <_ZN8touchgfx11Application4drawEv>:
 801a76c:	4b09      	ldr	r3, [pc, #36]	; (801a794 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a76e:	b507      	push	{r0, r1, r2, lr}
 801a770:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a774:	2100      	movs	r1, #0
 801a776:	4b08      	ldr	r3, [pc, #32]	; (801a798 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a778:	9100      	str	r1, [sp, #0]
 801a77a:	4669      	mov	r1, sp
 801a77c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a780:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a784:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a788:	6803      	ldr	r3, [r0, #0]
 801a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a78c:	4798      	blx	r3
 801a78e:	b003      	add	sp, #12
 801a790:	f85d fb04 	ldr.w	pc, [sp], #4
 801a794:	2003c260 	.word	0x2003c260
 801a798:	2003c262 	.word	0x2003c262

0801a79c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a79c:	4b03      	ldr	r3, [pc, #12]	; (801a7ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a79e:	6818      	ldr	r0, [r3, #0]
 801a7a0:	b110      	cbz	r0, 801a7a8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a7a2:	6803      	ldr	r3, [r0, #0]
 801a7a4:	69db      	ldr	r3, [r3, #28]
 801a7a6:	4718      	bx	r3
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	2003c2b0 	.word	0x2003c2b0

0801a7b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a7b0:	4b03      	ldr	r3, [pc, #12]	; (801a7c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a7b2:	6818      	ldr	r0, [r3, #0]
 801a7b4:	b110      	cbz	r0, 801a7bc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a7b6:	6803      	ldr	r3, [r0, #0]
 801a7b8:	6a1b      	ldr	r3, [r3, #32]
 801a7ba:	4718      	bx	r3
 801a7bc:	4770      	bx	lr
 801a7be:	bf00      	nop
 801a7c0:	2003c2b0 	.word	0x2003c2b0

0801a7c4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a7ca:	4770      	bx	lr

0801a7cc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a7cc:	4b03      	ldr	r3, [pc, #12]	; (801a7dc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a7ce:	6818      	ldr	r0, [r3, #0]
 801a7d0:	b110      	cbz	r0, 801a7d8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a7d2:	6803      	ldr	r3, [r0, #0]
 801a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7d6:	4718      	bx	r3
 801a7d8:	4770      	bx	lr
 801a7da:	bf00      	nop
 801a7dc:	2003c2b0 	.word	0x2003c2b0

0801a7e0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a7e0:	b570      	push	{r4, r5, r6, lr}
 801a7e2:	4d32      	ldr	r5, [pc, #200]	; (801a8ac <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	6828      	ldr	r0, [r5, #0]
 801a7e8:	b140      	cbz	r0, 801a7fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a7ea:	7a03      	ldrb	r3, [r0, #8]
 801a7ec:	b933      	cbnz	r3, 801a7fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a7ee:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801a7f2:	6803      	ldr	r3, [r0, #0]
 801a7f4:	689b      	ldr	r3, [r3, #8]
 801a7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7fa:	4718      	bx	r3
 801a7fc:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801a800:	b97b      	cbnz	r3, 801a822 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a802:	b170      	cbz	r0, 801a822 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a804:	7a03      	ldrb	r3, [r0, #8]
 801a806:	b163      	cbz	r3, 801a822 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a808:	4b29      	ldr	r3, [pc, #164]	; (801a8b0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801a80a:	6818      	ldr	r0, [r3, #0]
 801a80c:	b110      	cbz	r0, 801a814 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a80e:	6803      	ldr	r3, [r0, #0]
 801a810:	691b      	ldr	r3, [r3, #16]
 801a812:	4798      	blx	r3
 801a814:	6828      	ldr	r0, [r5, #0]
 801a816:	6803      	ldr	r3, [r0, #0]
 801a818:	68db      	ldr	r3, [r3, #12]
 801a81a:	4798      	blx	r3
 801a81c:	2301      	movs	r3, #1
 801a81e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801a822:	2500      	movs	r5, #0
 801a824:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a828:	42a8      	cmp	r0, r5
 801a82a:	dd0c      	ble.n	801a846 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a82c:	1963      	adds	r3, r4, r5
 801a82e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a832:	b132      	cbz	r2, 801a842 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a834:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a838:	4413      	add	r3, r2
 801a83a:	6858      	ldr	r0, [r3, #4]
 801a83c:	6803      	ldr	r3, [r0, #0]
 801a83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a840:	4798      	blx	r3
 801a842:	3501      	adds	r5, #1
 801a844:	e7ee      	b.n	801a824 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a846:	2300      	movs	r3, #0
 801a848:	461a      	mov	r2, r3
 801a84a:	4298      	cmp	r0, r3
 801a84c:	d015      	beq.n	801a87a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801a84e:	18e1      	adds	r1, r4, r3
 801a850:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a854:	b16d      	cbz	r5, 801a872 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801a856:	429a      	cmp	r2, r3
 801a858:	d00a      	beq.n	801a870 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801a85a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a85e:	4431      	add	r1, r6
 801a860:	684e      	ldr	r6, [r1, #4]
 801a862:	b291      	uxth	r1, r2
 801a864:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a868:	604e      	str	r6, [r1, #4]
 801a86a:	18a1      	adds	r1, r4, r2
 801a86c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a870:	3201      	adds	r2, #1
 801a872:	3301      	adds	r3, #1
 801a874:	e7e9      	b.n	801a84a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a876:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801a87a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801a87e:	4295      	cmp	r5, r2
 801a880:	dd0d      	ble.n	801a89e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801a882:	1e6b      	subs	r3, r5, #1
 801a884:	b29b      	uxth	r3, r3
 801a886:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801a88a:	4618      	mov	r0, r3
 801a88c:	3104      	adds	r1, #4
 801a88e:	4285      	cmp	r5, r0
 801a890:	ddf1      	ble.n	801a876 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801a892:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801a896:	3001      	adds	r0, #1
 801a898:	f841 6c04 	str.w	r6, [r1, #-4]
 801a89c:	e7f7      	b.n	801a88e <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801a89e:	4b04      	ldr	r3, [pc, #16]	; (801a8b0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801a8a0:	6818      	ldr	r0, [r3, #0]
 801a8a2:	b110      	cbz	r0, 801a8aa <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801a8a4:	6803      	ldr	r3, [r0, #0]
 801a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8a8:	e7a5      	b.n	801a7f6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a8aa:	bd70      	pop	{r4, r5, r6, pc}
 801a8ac:	2003c2b4 	.word	0x2003c2b4
 801a8b0:	2003c2b0 	.word	0x2003c2b0

0801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a8b4:	b510      	push	{r4, lr}
 801a8b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a8ba:	888a      	ldrh	r2, [r1, #4]
 801a8bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a8c0:	4422      	add	r2, r4
 801a8c2:	b212      	sxth	r2, r2
 801a8c4:	4293      	cmp	r3, r2
 801a8c6:	da15      	bge.n	801a8f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a8c8:	8882      	ldrh	r2, [r0, #4]
 801a8ca:	4413      	add	r3, r2
 801a8cc:	b21b      	sxth	r3, r3
 801a8ce:	429c      	cmp	r4, r3
 801a8d0:	da10      	bge.n	801a8f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a8d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a8d6:	88c9      	ldrh	r1, [r1, #6]
 801a8d8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a8dc:	4419      	add	r1, r3
 801a8de:	b209      	sxth	r1, r1
 801a8e0:	428a      	cmp	r2, r1
 801a8e2:	da07      	bge.n	801a8f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a8e4:	88c0      	ldrh	r0, [r0, #6]
 801a8e6:	4410      	add	r0, r2
 801a8e8:	b200      	sxth	r0, r0
 801a8ea:	4283      	cmp	r3, r0
 801a8ec:	bfac      	ite	ge
 801a8ee:	2000      	movge	r0, #0
 801a8f0:	2001      	movlt	r0, #1
 801a8f2:	bd10      	pop	{r4, pc}
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	e7fc      	b.n	801a8f2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a8f8 <_ZN8touchgfx4Rect10restrictToEss>:
 801a8f8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	b510      	push	{r4, lr}
 801a900:	da04      	bge.n	801a90c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a902:	8884      	ldrh	r4, [r0, #4]
 801a904:	4423      	add	r3, r4
 801a906:	8083      	strh	r3, [r0, #4]
 801a908:	2300      	movs	r3, #0
 801a90a:	8003      	strh	r3, [r0, #0]
 801a90c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a910:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a914:	1b09      	subs	r1, r1, r4
 801a916:	428b      	cmp	r3, r1
 801a918:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a91c:	bfc8      	it	gt
 801a91e:	8081      	strhgt	r1, [r0, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	da04      	bge.n	801a92e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a924:	88c1      	ldrh	r1, [r0, #6]
 801a926:	440b      	add	r3, r1
 801a928:	80c3      	strh	r3, [r0, #6]
 801a92a:	2300      	movs	r3, #0
 801a92c:	8043      	strh	r3, [r0, #2]
 801a92e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a932:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a936:	1a52      	subs	r2, r2, r1
 801a938:	4293      	cmp	r3, r2
 801a93a:	bfc8      	it	gt
 801a93c:	80c2      	strhgt	r2, [r0, #6]
 801a93e:	bd10      	pop	{r4, pc}

0801a940 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a940:	4b10      	ldr	r3, [pc, #64]	; (801a984 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a942:	b510      	push	{r4, lr}
 801a944:	460c      	mov	r4, r1
 801a946:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a94a:	4b0f      	ldr	r3, [pc, #60]	; (801a988 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a94c:	4620      	mov	r0, r4
 801a94e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a952:	f7ff ffd1 	bl	801a8f8 <_ZN8touchgfx4Rect10restrictToEss>
 801a956:	4b0d      	ldr	r3, [pc, #52]	; (801a98c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a958:	6818      	ldr	r0, [r3, #0]
 801a95a:	b190      	cbz	r0, 801a982 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a95c:	6803      	ldr	r3, [r0, #0]
 801a95e:	4621      	mov	r1, r4
 801a960:	689b      	ldr	r3, [r3, #8]
 801a962:	4798      	blx	r3
 801a964:	4b0a      	ldr	r3, [pc, #40]	; (801a990 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a966:	6818      	ldr	r0, [r3, #0]
 801a968:	b118      	cbz	r0, 801a972 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a96a:	6803      	ldr	r3, [r0, #0]
 801a96c:	4621      	mov	r1, r4
 801a96e:	689b      	ldr	r3, [r3, #8]
 801a970:	4798      	blx	r3
 801a972:	4b08      	ldr	r3, [pc, #32]	; (801a994 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a974:	4621      	mov	r1, r4
 801a976:	6818      	ldr	r0, [r3, #0]
 801a978:	6803      	ldr	r3, [r0, #0]
 801a97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a97e:	69db      	ldr	r3, [r3, #28]
 801a980:	4718      	bx	r3
 801a982:	bd10      	pop	{r4, pc}
 801a984:	2003c262 	.word	0x2003c262
 801a988:	2003c260 	.word	0x2003c260
 801a98c:	2003c2b0 	.word	0x2003c2b0
 801a990:	2003c2ac 	.word	0x2003c2ac
 801a994:	2003c26c 	.word	0x2003c26c

0801a998 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a99a:	4606      	mov	r6, r0
 801a99c:	4608      	mov	r0, r1
 801a99e:	460f      	mov	r7, r1
 801a9a0:	f7fb fb43 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9a4:	b9e8      	cbnz	r0, 801a9e2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a9a6:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a9aa:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a9ae:	42a5      	cmp	r5, r4
 801a9b0:	db17      	blt.n	801a9e2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a9b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a9b6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a9ba:	429a      	cmp	r2, r3
 801a9bc:	db11      	blt.n	801a9e2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a9be:	88b9      	ldrh	r1, [r7, #4]
 801a9c0:	440d      	add	r5, r1
 801a9c2:	88b1      	ldrh	r1, [r6, #4]
 801a9c4:	440c      	add	r4, r1
 801a9c6:	b22d      	sxth	r5, r5
 801a9c8:	b224      	sxth	r4, r4
 801a9ca:	42a5      	cmp	r5, r4
 801a9cc:	dc09      	bgt.n	801a9e2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a9ce:	88f8      	ldrh	r0, [r7, #6]
 801a9d0:	4410      	add	r0, r2
 801a9d2:	88f2      	ldrh	r2, [r6, #6]
 801a9d4:	4413      	add	r3, r2
 801a9d6:	b200      	sxth	r0, r0
 801a9d8:	b21b      	sxth	r3, r3
 801a9da:	4298      	cmp	r0, r3
 801a9dc:	bfcc      	ite	gt
 801a9de:	2000      	movgt	r0, #0
 801a9e0:	2001      	movle	r0, #1
 801a9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	4608      	mov	r0, r1
 801a9ea:	460d      	mov	r5, r1
 801a9ec:	f7fb fb1d 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9f0:	b978      	cbnz	r0, 801aa12 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	f7fb fb19 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9f8:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a9fc:	b150      	cbz	r0, 801aa14 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a9fe:	8026      	strh	r6, [r4, #0]
 801aa00:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801aa04:	8063      	strh	r3, [r4, #2]
 801aa06:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801aa0a:	80a3      	strh	r3, [r4, #4]
 801aa0c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801aa10:	80e3      	strh	r3, [r4, #6]
 801aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa14:	f9b4 1000 	ldrsh.w	r1, [r4]
 801aa18:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa1c:	42b1      	cmp	r1, r6
 801aa1e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801aa22:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801aa26:	460f      	mov	r7, r1
 801aa28:	88ed      	ldrh	r5, [r5, #6]
 801aa2a:	bfa8      	it	ge
 801aa2c:	4637      	movge	r7, r6
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	4618      	mov	r0, r3
 801aa32:	4466      	add	r6, ip
 801aa34:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801aa38:	bfa8      	it	ge
 801aa3a:	4610      	movge	r0, r2
 801aa3c:	442a      	add	r2, r5
 801aa3e:	88e5      	ldrh	r5, [r4, #6]
 801aa40:	4461      	add	r1, ip
 801aa42:	b236      	sxth	r6, r6
 801aa44:	8027      	strh	r7, [r4, #0]
 801aa46:	442b      	add	r3, r5
 801aa48:	b209      	sxth	r1, r1
 801aa4a:	b212      	sxth	r2, r2
 801aa4c:	8060      	strh	r0, [r4, #2]
 801aa4e:	b21b      	sxth	r3, r3
 801aa50:	428e      	cmp	r6, r1
 801aa52:	bfac      	ite	ge
 801aa54:	ebc7 0106 	rsbge	r1, r7, r6
 801aa58:	ebc7 0101 	rsblt	r1, r7, r1
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	bfac      	ite	ge
 801aa60:	ebc0 0202 	rsbge	r2, r0, r2
 801aa64:	ebc0 0203 	rsblt	r2, r0, r3
 801aa68:	80a1      	strh	r1, [r4, #4]
 801aa6a:	80e2      	strh	r2, [r4, #6]
 801aa6c:	e7d1      	b.n	801aa12 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801aa70 <_ZN8touchgfx11Application11getInstanceEv>:
 801aa70:	4b01      	ldr	r3, [pc, #4]	; (801aa78 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801aa72:	6818      	ldr	r0, [r3, #0]
 801aa74:	4770      	bx	lr
 801aa76:	bf00      	nop
 801aa78:	2003c2c0 	.word	0x2003c2c0

0801aa7c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801aa82:	30a8      	adds	r0, #168	; 0xa8
 801aa84:	f820 3c24 	strh.w	r3, [r0, #-36]
 801aa88:	f802 3b01 	strb.w	r3, [r2], #1
 801aa8c:	4282      	cmp	r2, r0
 801aa8e:	d1fb      	bne.n	801aa88 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801aa90:	4770      	bx	lr

0801aa92 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801aa92:	4603      	mov	r3, r0
 801aa94:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801aa98:	2200      	movs	r2, #0
 801aa9a:	801a      	strh	r2, [r3, #0]
 801aa9c:	3308      	adds	r3, #8
 801aa9e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801aaa2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801aaa6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801aaaa:	428b      	cmp	r3, r1
 801aaac:	d1f5      	bne.n	801aa9a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801aaae:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801aab2:	4770      	bx	lr

0801aab4 <_ZN8touchgfx11ApplicationC1Ev>:
 801aab4:	b570      	push	{r4, r5, r6, lr}
 801aab6:	4b19      	ldr	r3, [pc, #100]	; (801ab1c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801aab8:	2500      	movs	r5, #0
 801aaba:	4604      	mov	r4, r0
 801aabc:	30a8      	adds	r0, #168	; 0xa8
 801aabe:	f840 3ca8 	str.w	r3, [r0, #-168]
 801aac2:	f820 5c24 	strh.w	r5, [r0, #-36]
 801aac6:	f7ff ffe4 	bl	801aa92 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aaca:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801aace:	f7ff ffe0 	bl	801aa92 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aad2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801aad6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801aada:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801aade:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801aae2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801aae6:	490e      	ldr	r1, [pc, #56]	; (801ab20 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801aae8:	480e      	ldr	r0, [pc, #56]	; (801ab24 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801aaea:	f00e f9c7 	bl	8028e7c <CRC_Lock>
 801aaee:	4e0e      	ldr	r6, [pc, #56]	; (801ab28 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801aaf0:	4b0e      	ldr	r3, [pc, #56]	; (801ab2c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801aaf2:	b158      	cbz	r0, 801ab0c <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801aaf4:	801d      	strh	r5, [r3, #0]
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	4a0d      	ldr	r2, [pc, #52]	; (801ab30 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801aafa:	4620      	mov	r0, r4
 801aafc:	6013      	str	r3, [r2, #0]
 801aafe:	4a0d      	ldr	r2, [pc, #52]	; (801ab34 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ab00:	6033      	str	r3, [r6, #0]
 801ab02:	6013      	str	r3, [r2, #0]
 801ab04:	f7ff ffba 	bl	801aa7c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ab08:	4620      	mov	r0, r4
 801ab0a:	bd70      	pop	{r4, r5, r6, pc}
 801ab0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ab10:	2002      	movs	r0, #2
 801ab12:	801a      	strh	r2, [r3, #0]
 801ab14:	6030      	str	r0, [r6, #0]
 801ab16:	f001 fadf 	bl	801c0d8 <_ZN8touchgfx6Screen4drawEv>
 801ab1a:	e7ec      	b.n	801aaf6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801ab1c:	0803037c 	.word	0x0803037c
 801ab20:	b5e8b5cd 	.word	0xb5e8b5cd
 801ab24:	f407a5c2 	.word	0xf407a5c2
 801ab28:	2003c2b0 	.word	0x2003c2b0
 801ab2c:	20000044 	.word	0x20000044
 801ab30:	2003c2c0 	.word	0x2003c2c0
 801ab34:	2003c2b4 	.word	0x2003c2b4

0801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ab38:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ab3c:	3b01      	subs	r3, #1
 801ab3e:	b29b      	uxth	r3, r3
 801ab40:	428b      	cmp	r3, r1
 801ab42:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ab46:	b510      	push	{r4, lr}
 801ab48:	d908      	bls.n	801ab5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801ab4a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ab4e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ab52:	681a      	ldr	r2, [r3, #0]
 801ab54:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ab58:	685a      	ldr	r2, [r3, #4]
 801ab5a:	6062      	str	r2, [r4, #4]
 801ab5c:	bd10      	pop	{r4, pc}
	...

0801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab64:	b08f      	sub	sp, #60	; 0x3c
 801ab66:	4b94      	ldr	r3, [pc, #592]	; (801adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801ab68:	4683      	mov	fp, r0
 801ab6a:	ac0a      	add	r4, sp, #40	; 0x28
 801ab6c:	e884 0006 	stmia.w	r4, {r1, r2}
 801ab70:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab74:	4620      	mov	r0, r4
 801ab76:	4b91      	ldr	r3, [pc, #580]	; (801adbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801ab78:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ab7c:	f7ff febc 	bl	801a8f8 <_ZN8touchgfx4Rect10restrictToEss>
 801ab80:	4620      	mov	r0, r4
 801ab82:	f7fb fa52 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab86:	2800      	cmp	r0, #0
 801ab88:	d16a      	bne.n	801ac60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ab8a:	9403      	str	r4, [sp, #12]
 801ab8c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ab90:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ab94:	2400      	movs	r4, #0
 801ab96:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801ab9a:	9301      	str	r3, [sp, #4]
 801ab9c:	36a0      	adds	r6, #160	; 0xa0
 801ab9e:	42a5      	cmp	r5, r4
 801aba0:	d00d      	beq.n	801abbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801aba2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801aba6:	9803      	ldr	r0, [sp, #12]
 801aba8:	f7ff fef6 	bl	801a998 <_ZNK8touchgfx4Rect8includesERKS0_>
 801abac:	b128      	cbz	r0, 801abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801abae:	1e69      	subs	r1, r5, #1
 801abb0:	9801      	ldr	r0, [sp, #4]
 801abb2:	1b09      	subs	r1, r1, r4
 801abb4:	b289      	uxth	r1, r1
 801abb6:	f7ff ffbf 	bl	801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801abba:	3401      	adds	r4, #1
 801abbc:	e7ef      	b.n	801ab9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801abbe:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801abc2:	1e7b      	subs	r3, r7, #1
 801abc4:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801abc8:	9704      	str	r7, [sp, #16]
 801abca:	9302      	str	r3, [sp, #8]
 801abcc:	2400      	movs	r4, #0
 801abce:	4655      	mov	r5, sl
 801abd0:	9705      	str	r7, [sp, #20]
 801abd2:	4626      	mov	r6, r4
 801abd4:	9b05      	ldr	r3, [sp, #20]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d078      	beq.n	801accc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801abda:	9903      	ldr	r1, [sp, #12]
 801abdc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801abe0:	f7ff fe68 	bl	801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801abe4:	b360      	cbz	r0, 801ac40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801abe6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801abea:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801abee:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801abf2:	45e6      	cmp	lr, ip
 801abf4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801abf8:	db35      	blt.n	801ac66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801abfa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801abfe:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ac02:	4472      	add	r2, lr
 801ac04:	4463      	add	r3, ip
 801ac06:	b212      	sxth	r2, r2
 801ac08:	b21b      	sxth	r3, r3
 801ac0a:	429a      	cmp	r2, r3
 801ac0c:	dc2b      	bgt.n	801ac66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ac0e:	fa1f f288 	uxth.w	r2, r8
 801ac12:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ac16:	45c1      	cmp	r9, r8
 801ac18:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ac1c:	4413      	add	r3, r2
 801ac1e:	fa1f fc89 	uxth.w	ip, r9
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	fa0f fe83 	sxth.w	lr, r3
 801ac28:	db0f      	blt.n	801ac4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ac2a:	eba3 030c 	sub.w	r3, r3, ip
 801ac2e:	1ac9      	subs	r1, r1, r3
 801ac30:	b209      	sxth	r1, r1
 801ac32:	2900      	cmp	r1, #0
 801ac34:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ac38:	dd12      	ble.n	801ac60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ac3a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ac3e:	4604      	mov	r4, r0
 801ac40:	9b05      	ldr	r3, [sp, #20]
 801ac42:	3d08      	subs	r5, #8
 801ac44:	3b01      	subs	r3, #1
 801ac46:	9305      	str	r3, [sp, #20]
 801ac48:	e7c4      	b.n	801abd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801ac4a:	4461      	add	r1, ip
 801ac4c:	b209      	sxth	r1, r1
 801ac4e:	4571      	cmp	r1, lr
 801ac50:	dc3a      	bgt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ac52:	eba2 020c 	sub.w	r2, r2, ip
 801ac56:	b212      	sxth	r2, r2
 801ac58:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ac5c:	2a00      	cmp	r2, #0
 801ac5e:	dcee      	bgt.n	801ac3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ac60:	b00f      	add	sp, #60	; 0x3c
 801ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac66:	45c1      	cmp	r9, r8
 801ac68:	db2e      	blt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ac6a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801ac6e:	4499      	add	r9, r3
 801ac70:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ac74:	4498      	add	r8, r3
 801ac76:	fa0f f989 	sxth.w	r9, r9
 801ac7a:	fa0f f888 	sxth.w	r8, r8
 801ac7e:	45c1      	cmp	r9, r8
 801ac80:	dc22      	bgt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ac82:	fa1f f28c 	uxth.w	r2, ip
 801ac86:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ac8a:	45e6      	cmp	lr, ip
 801ac8c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ac90:	4413      	add	r3, r2
 801ac92:	fa1f f88e 	uxth.w	r8, lr
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	fa0f f983 	sxth.w	r9, r3
 801ac9c:	db0a      	blt.n	801acb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801ac9e:	eba3 0308 	sub.w	r3, r3, r8
 801aca2:	1ac9      	subs	r1, r1, r3
 801aca4:	b209      	sxth	r1, r1
 801aca6:	2900      	cmp	r1, #0
 801aca8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801acac:	ddd8      	ble.n	801ac60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801acae:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801acb2:	e7c4      	b.n	801ac3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801acb4:	4441      	add	r1, r8
 801acb6:	b209      	sxth	r1, r1
 801acb8:	4549      	cmp	r1, r9
 801acba:	dc05      	bgt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801acbc:	eba2 0208 	sub.w	r2, r2, r8
 801acc0:	b212      	sxth	r2, r2
 801acc2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801acc6:	e7c9      	b.n	801ac5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801acc8:	4606      	mov	r6, r0
 801acca:	e7b9      	b.n	801ac40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801accc:	2c00      	cmp	r4, #0
 801acce:	f47f af7d 	bne.w	801abcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801acd2:	2e00      	cmp	r6, #0
 801acd4:	f000 81e1 	beq.w	801b09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801acd8:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801acdc:	4655      	mov	r5, sl
 801acde:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801ace2:	b2b9      	uxth	r1, r7
 801ace4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ace8:	b2b3      	uxth	r3, r6
 801acea:	9105      	str	r1, [sp, #20]
 801acec:	9805      	ldr	r0, [sp, #20]
 801acee:	441a      	add	r2, r3
 801acf0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801acf4:	b292      	uxth	r2, r2
 801acf6:	4401      	add	r1, r0
 801acf8:	fa0f f882 	sxth.w	r8, r2
 801acfc:	b289      	uxth	r1, r1
 801acfe:	9106      	str	r1, [sp, #24]
 801ad00:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801ad04:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801ad08:	9b04      	ldr	r3, [sp, #16]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d058      	beq.n	801adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801ad0e:	9903      	ldr	r1, [sp, #12]
 801ad10:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ad14:	f7ff fdce 	bl	801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ad1c:	b1d8      	cbz	r0, 801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801ad1e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801ad22:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801ad26:	4576      	cmp	r6, lr
 801ad28:	dc26      	bgt.n	801ad78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801ad2a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801ad2e:	44f4      	add	ip, lr
 801ad30:	fa0f fc8c 	sxth.w	ip, ip
 801ad34:	45e0      	cmp	r8, ip
 801ad36:	db1f      	blt.n	801ad78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801ad38:	428f      	cmp	r7, r1
 801ad3a:	fa1f fc81 	uxth.w	ip, r1
 801ad3e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801ad42:	dc0f      	bgt.n	801ad64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801ad44:	9806      	ldr	r0, [sp, #24]
 801ad46:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801ad4a:	eba0 0c0c 	sub.w	ip, r0, ip
 801ad4e:	eba1 010c 	sub.w	r1, r1, ip
 801ad52:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801ad56:	4620      	mov	r0, r4
 801ad58:	9904      	ldr	r1, [sp, #16]
 801ad5a:	3d08      	subs	r5, #8
 801ad5c:	4604      	mov	r4, r0
 801ad5e:	3901      	subs	r1, #1
 801ad60:	9104      	str	r1, [sp, #16]
 801ad62:	e7cf      	b.n	801ad04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801ad64:	4461      	add	r1, ip
 801ad66:	b209      	sxth	r1, r1
 801ad68:	4549      	cmp	r1, r9
 801ad6a:	dcf5      	bgt.n	801ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801ad6c:	9905      	ldr	r1, [sp, #20]
 801ad6e:	eba1 0c0c 	sub.w	ip, r1, ip
 801ad72:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801ad76:	e7ee      	b.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801ad78:	428f      	cmp	r7, r1
 801ad7a:	dced      	bgt.n	801ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801ad7c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801ad80:	4461      	add	r1, ip
 801ad82:	b209      	sxth	r1, r1
 801ad84:	4589      	cmp	r9, r1
 801ad86:	dbe7      	blt.n	801ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801ad88:	4576      	cmp	r6, lr
 801ad8a:	fa1f fc8e 	uxth.w	ip, lr
 801ad8e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801ad92:	dc08      	bgt.n	801ada6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ad94:	eba2 0c0c 	sub.w	ip, r2, ip
 801ad98:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801ad9c:	eba1 010c 	sub.w	r1, r1, ip
 801ada0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801ada4:	e7d7      	b.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801ada6:	4461      	add	r1, ip
 801ada8:	b209      	sxth	r1, r1
 801adaa:	4588      	cmp	r8, r1
 801adac:	dbd4      	blt.n	801ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801adae:	eba3 0c0c 	sub.w	ip, r3, ip
 801adb2:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801adb6:	e7ce      	b.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801adb8:	2003c262 	.word	0x2003c262
 801adbc:	2003c260 	.word	0x2003c260
 801adc0:	2c00      	cmp	r4, #0
 801adc2:	f000 816a 	beq.w	801b09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801adc6:	9b02      	ldr	r3, [sp, #8]
 801adc8:	3301      	adds	r3, #1
 801adca:	f000 8166 	beq.w	801b09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801adce:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801add2:	9803      	ldr	r0, [sp, #12]
 801add4:	4621      	mov	r1, r4
 801add6:	f7ff fddf 	bl	801a998 <_ZNK8touchgfx4Rect8includesERKS0_>
 801adda:	b120      	cbz	r0, 801ade6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801addc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ade0:	9801      	ldr	r0, [sp, #4]
 801ade2:	f7ff fea9 	bl	801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ade6:	9903      	ldr	r1, [sp, #12]
 801ade8:	4620      	mov	r0, r4
 801adea:	f7ff fd63 	bl	801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801adee:	2800      	cmp	r0, #0
 801adf0:	f000 809b 	beq.w	801af2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801adf4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801adf8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801adfc:	b281      	uxth	r1, r0
 801adfe:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801ae02:	9309      	str	r3, [sp, #36]	; 0x24
 801ae04:	eb01 0c03 	add.w	ip, r1, r3
 801ae08:	b2ab      	uxth	r3, r5
 801ae0a:	4285      	cmp	r5, r0
 801ae0c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801ae10:	fa1f f98c 	uxth.w	r9, ip
 801ae14:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801ae18:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801ae1c:	eb03 040c 	add.w	r4, r3, ip
 801ae20:	b2a4      	uxth	r4, r4
 801ae22:	9405      	str	r4, [sp, #20]
 801ae24:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801ae28:	9404      	str	r4, [sp, #16]
 801ae2a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801ae2e:	f340 809a 	ble.w	801af66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801ae32:	1a5b      	subs	r3, r3, r1
 801ae34:	4596      	cmp	lr, r2
 801ae36:	fa0f f589 	sxth.w	r5, r9
 801ae3a:	b29b      	uxth	r3, r3
 801ae3c:	b21e      	sxth	r6, r3
 801ae3e:	dd2e      	ble.n	801ae9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801ae40:	9f02      	ldr	r7, [sp, #8]
 801ae42:	fa1f fe8e 	uxth.w	lr, lr
 801ae46:	b292      	uxth	r2, r2
 801ae48:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ae4c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801ae50:	9f04      	ldr	r7, [sp, #16]
 801ae52:	ebae 0102 	sub.w	r1, lr, r2
 801ae56:	4486      	add	lr, r0
 801ae58:	1b7f      	subs	r7, r7, r5
 801ae5a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801ae5e:	b289      	uxth	r1, r1
 801ae60:	442a      	add	r2, r5
 801ae62:	fa0f fe8e 	sxth.w	lr, lr
 801ae66:	b20c      	sxth	r4, r1
 801ae68:	b212      	sxth	r2, r2
 801ae6a:	4367      	muls	r7, r4
 801ae6c:	ebae 0202 	sub.w	r2, lr, r2
 801ae70:	4372      	muls	r2, r6
 801ae72:	4297      	cmp	r7, r2
 801ae74:	db09      	blt.n	801ae8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801ae76:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801ae7a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801ae7e:	449c      	add	ip, r3
 801ae80:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ae84:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801ae88:	e680      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae8a:	4401      	add	r1, r0
 801ae8c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801ae90:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801ae94:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ae98:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ae9c:	e676      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae9e:	9f04      	ldr	r7, [sp, #16]
 801aea0:	42bd      	cmp	r5, r7
 801aea2:	da27      	bge.n	801aef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801aea4:	9902      	ldr	r1, [sp, #8]
 801aea6:	1b7f      	subs	r7, r7, r5
 801aea8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801aeac:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801aeb0:	eb04 010e 	add.w	r1, r4, lr
 801aeb4:	fa1f f881 	uxth.w	r8, r1
 801aeb8:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801aebc:	4411      	add	r1, r2
 801aebe:	fa0f f988 	sxth.w	r9, r8
 801aec2:	eba2 020e 	sub.w	r2, r2, lr
 801aec6:	eba1 0108 	sub.w	r1, r1, r8
 801aeca:	4372      	muls	r2, r6
 801aecc:	b289      	uxth	r1, r1
 801aece:	fa0f f881 	sxth.w	r8, r1
 801aed2:	fb08 f707 	mul.w	r7, r8, r7
 801aed6:	42ba      	cmp	r2, r7
 801aed8:	dc06      	bgt.n	801aee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801aeda:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801aede:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801aee2:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801aee6:	e7ca      	b.n	801ae7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801aee8:	4421      	add	r1, r4
 801aeea:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801aeee:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801aef2:	e64b      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801aef4:	9d05      	ldr	r5, [sp, #20]
 801aef6:	2c06      	cmp	r4, #6
 801aef8:	eba9 0505 	sub.w	r5, r9, r5
 801aefc:	b2ad      	uxth	r5, r5
 801aefe:	fa0f fe85 	sxth.w	lr, r5
 801af02:	d818      	bhi.n	801af36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801af04:	9b04      	ldr	r3, [sp, #16]
 801af06:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801af0a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801af0e:	1c63      	adds	r3, r4, #1
 801af10:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801af14:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801af18:	9b01      	ldr	r3, [sp, #4]
 801af1a:	9d01      	ldr	r5, [sp, #4]
 801af1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801af20:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801af24:	805a      	strh	r2, [r3, #2]
 801af26:	809e      	strh	r6, [r3, #4]
 801af28:	80d9      	strh	r1, [r3, #6]
 801af2a:	9b02      	ldr	r3, [sp, #8]
 801af2c:	f1aa 0a08 	sub.w	sl, sl, #8
 801af30:	3b01      	subs	r3, #1
 801af32:	9302      	str	r3, [sp, #8]
 801af34:	e747      	b.n	801adc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801af36:	9a02      	ldr	r2, [sp, #8]
 801af38:	45b6      	cmp	lr, r6
 801af3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801af3e:	db0d      	blt.n	801af5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801af40:	449c      	add	ip, r3
 801af42:	445a      	add	r2, fp
 801af44:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801af48:	fa1f fc8c 	uxth.w	ip, ip
 801af4c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801af50:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801af54:	448c      	add	ip, r1
 801af56:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801af5a:	e617      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af5c:	445a      	add	r2, fp
 801af5e:	44ac      	add	ip, r5
 801af60:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801af64:	e78e      	b.n	801ae84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801af66:	fa1f f18e 	uxth.w	r1, lr
 801af6a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801af6e:	b293      	uxth	r3, r2
 801af70:	4596      	cmp	lr, r2
 801af72:	eb01 0806 	add.w	r8, r1, r6
 801af76:	9306      	str	r3, [sp, #24]
 801af78:	fa1f f888 	uxth.w	r8, r8
 801af7c:	9f06      	ldr	r7, [sp, #24]
 801af7e:	fa0f f388 	sxth.w	r3, r8
 801af82:	9307      	str	r3, [sp, #28]
 801af84:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801af88:	443b      	add	r3, r7
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	9308      	str	r3, [sp, #32]
 801af8e:	da25      	bge.n	801afdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801af90:	9905      	ldr	r1, [sp, #20]
 801af92:	eba3 0308 	sub.w	r3, r3, r8
 801af96:	eba2 020e 	sub.w	r2, r2, lr
 801af9a:	1b40      	subs	r0, r0, r5
 801af9c:	eba9 0401 	sub.w	r4, r9, r1
 801afa0:	b29b      	uxth	r3, r3
 801afa2:	b2a4      	uxth	r4, r4
 801afa4:	b219      	sxth	r1, r3
 801afa6:	fa0f f984 	sxth.w	r9, r4
 801afaa:	4348      	muls	r0, r1
 801afac:	fb09 f202 	mul.w	r2, r9, r2
 801afb0:	4282      	cmp	r2, r0
 801afb2:	9a02      	ldr	r2, [sp, #8]
 801afb4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801afb8:	445a      	add	r2, fp
 801afba:	dc06      	bgt.n	801afca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801afbc:	9b07      	ldr	r3, [sp, #28]
 801afbe:	44a4      	add	ip, r4
 801afc0:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801afc4:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801afc8:	e75c      	b.n	801ae84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801afca:	9904      	ldr	r1, [sp, #16]
 801afcc:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801afd0:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801afd4:	4433      	add	r3, r6
 801afd6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801afda:	e5d7      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801afdc:	9f06      	ldr	r7, [sp, #24]
 801afde:	9b04      	ldr	r3, [sp, #16]
 801afe0:	1bc9      	subs	r1, r1, r7
 801afe2:	fa0f f789 	sxth.w	r7, r9
 801afe6:	b289      	uxth	r1, r1
 801afe8:	429f      	cmp	r7, r3
 801afea:	fa0f fe81 	sxth.w	lr, r1
 801afee:	dd22      	ble.n	801b036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801aff0:	9a05      	ldr	r2, [sp, #20]
 801aff2:	1b40      	subs	r0, r0, r5
 801aff4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801aff8:	eba9 0202 	sub.w	r2, r9, r2
 801affc:	9d07      	ldr	r5, [sp, #28]
 801affe:	fb0e f000 	mul.w	r0, lr, r0
 801b002:	b292      	uxth	r2, r2
 801b004:	eba5 0a03 	sub.w	sl, r5, r3
 801b008:	9b02      	ldr	r3, [sp, #8]
 801b00a:	b214      	sxth	r4, r2
 801b00c:	00db      	lsls	r3, r3, #3
 801b00e:	fb04 fa0a 	mul.w	sl, r4, sl
 801b012:	445b      	add	r3, fp
 801b014:	4550      	cmp	r0, sl
 801b016:	db03      	blt.n	801b020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801b018:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801b01c:	4494      	add	ip, r2
 801b01e:	e731      	b.n	801ae84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b020:	9a04      	ldr	r2, [sp, #16]
 801b022:	4431      	add	r1, r6
 801b024:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801b028:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b02c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b030:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b034:	e75b      	b.n	801aeee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801b036:	9b08      	ldr	r3, [sp, #32]
 801b038:	2c06      	cmp	r4, #6
 801b03a:	eba3 0308 	sub.w	r3, r3, r8
 801b03e:	b29b      	uxth	r3, r3
 801b040:	b21d      	sxth	r5, r3
 801b042:	d813      	bhi.n	801b06c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801b044:	9b07      	ldr	r3, [sp, #28]
 801b046:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801b04a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b04e:	1c63      	adds	r3, r4, #1
 801b050:	9901      	ldr	r1, [sp, #4]
 801b052:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b056:	9b01      	ldr	r3, [sp, #4]
 801b058:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801b05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b060:	805a      	strh	r2, [r3, #2]
 801b062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b064:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b068:	809a      	strh	r2, [r3, #4]
 801b06a:	e75e      	b.n	801af2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b06c:	9802      	ldr	r0, [sp, #8]
 801b06e:	4575      	cmp	r5, lr
 801b070:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b074:	db0d      	blt.n	801b092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801b076:	4431      	add	r1, r6
 801b078:	9b06      	ldr	r3, [sp, #24]
 801b07a:	4458      	add	r0, fp
 801b07c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b080:	b289      	uxth	r1, r1
 801b082:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801b086:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b08a:	4419      	add	r1, r3
 801b08c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801b090:	e57c      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b092:	4458      	add	r0, fp
 801b094:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801b098:	e79c      	b.n	801afd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801b09a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801b09e:	2e07      	cmp	r6, #7
 801b0a0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b0a4:	d812      	bhi.n	801b0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801b0a6:	1c75      	adds	r5, r6, #1
 801b0a8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b0ac:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b0b0:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801b0b4:	9d01      	ldr	r5, [sp, #4]
 801b0b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b0ba:	442c      	add	r4, r5
 801b0bc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b0c0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b0c4:	8061      	strh	r1, [r4, #2]
 801b0c6:	80a2      	strh	r2, [r4, #4]
 801b0c8:	80e3      	strh	r3, [r4, #6]
 801b0ca:	e5c9      	b.n	801ac60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b0cc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b0d0:	3e01      	subs	r6, #1
 801b0d2:	445c      	add	r4, fp
 801b0d4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b0d8:	f04f 37ff 	mov.w	r7, #4294967295
 801b0dc:	2500      	movs	r5, #0
 801b0de:	9305      	str	r3, [sp, #20]
 801b0e0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801b0e4:	1e72      	subs	r2, r6, #1
 801b0e6:	9302      	str	r3, [sp, #8]
 801b0e8:	4691      	mov	r9, r2
 801b0ea:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801b0ee:	9304      	str	r3, [sp, #16]
 801b0f0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801b0f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b0f8:	6818      	ldr	r0, [r3, #0]
 801b0fa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b0fe:	9207      	str	r2, [sp, #28]
 801b100:	bf16      	itet	ne
 801b102:	9905      	ldrne	r1, [sp, #20]
 801b104:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b108:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b10c:	9306      	str	r3, [sp, #24]
 801b10e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b112:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b116:	fb18 f801 	smulbb	r8, r8, r1
 801b11a:	6859      	ldr	r1, [r3, #4]
 801b11c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b120:	4671      	mov	r1, lr
 801b122:	a80c      	add	r0, sp, #48	; 0x30
 801b124:	f7ff fc5e 	bl	801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b128:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b12c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b130:	f04f 0c08 	mov.w	ip, #8
 801b134:	9b04      	ldr	r3, [sp, #16]
 801b136:	9a02      	ldr	r2, [sp, #8]
 801b138:	fb10 f001 	smulbb	r0, r0, r1
 801b13c:	fb02 8803 	mla	r8, r2, r3, r8
 801b140:	eba0 0108 	sub.w	r1, r0, r8
 801b144:	fb90 f0fc 	sdiv	r0, r0, ip
 801b148:	4288      	cmp	r0, r1
 801b14a:	dc20      	bgt.n	801b18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801b14c:	4551      	cmp	r1, sl
 801b14e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b152:	da03      	bge.n	801b15c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b154:	b1d9      	cbz	r1, 801b18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801b156:	468a      	mov	sl, r1
 801b158:	464f      	mov	r7, r9
 801b15a:	4635      	mov	r5, r6
 801b15c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b160:	f119 0f02 	cmn.w	r9, #2
 801b164:	d1c6      	bne.n	801b0f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b166:	4616      	mov	r6, r2
 801b168:	3201      	adds	r2, #1
 801b16a:	f1a4 0408 	sub.w	r4, r4, #8
 801b16e:	d1b7      	bne.n	801b0e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801b170:	9b01      	ldr	r3, [sp, #4]
 801b172:	b2ac      	uxth	r4, r5
 801b174:	00ed      	lsls	r5, r5, #3
 801b176:	1958      	adds	r0, r3, r5
 801b178:	1c7b      	adds	r3, r7, #1
 801b17a:	d10b      	bne.n	801b194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801b17c:	4601      	mov	r1, r0
 801b17e:	9803      	ldr	r0, [sp, #12]
 801b180:	f7ff fc30 	bl	801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b184:	4621      	mov	r1, r4
 801b186:	9801      	ldr	r0, [sp, #4]
 801b188:	f7ff fcd6 	bl	801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b18c:	e4fe      	b.n	801ab8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b18e:	464f      	mov	r7, r9
 801b190:	4635      	mov	r5, r6
 801b192:	e7ed      	b.n	801b170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b194:	9b01      	ldr	r3, [sp, #4]
 801b196:	00ff      	lsls	r7, r7, #3
 801b198:	445d      	add	r5, fp
 801b19a:	19d9      	adds	r1, r3, r7
 801b19c:	445f      	add	r7, fp
 801b19e:	f7ff fc21 	bl	801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b1a2:	9b03      	ldr	r3, [sp, #12]
 801b1a4:	cb03      	ldmia	r3!, {r0, r1}
 801b1a6:	9b03      	ldr	r3, [sp, #12]
 801b1a8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801b1ac:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801b1b0:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801b1b4:	6869      	ldr	r1, [r5, #4]
 801b1b6:	c303      	stmia	r3!, {r0, r1}
 801b1b8:	e7e4      	b.n	801b184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b1ba:	bf00      	nop

0801b1bc <_ZN8touchgfx11Application10invalidateEv>:
 801b1bc:	4b09      	ldr	r3, [pc, #36]	; (801b1e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801b1be:	b082      	sub	sp, #8
 801b1c0:	2100      	movs	r1, #0
 801b1c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b1c6:	4b08      	ldr	r3, [pc, #32]	; (801b1e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801b1c8:	9100      	str	r1, [sp, #0]
 801b1ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b1ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b1d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b1d6:	ab02      	add	r3, sp, #8
 801b1d8:	e913 0006 	ldmdb	r3, {r1, r2}
 801b1dc:	b002      	add	sp, #8
 801b1de:	f7ff bcbf 	b.w	801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b1e2:	bf00      	nop
 801b1e4:	2003c260 	.word	0x2003c260
 801b1e8:	2003c262 	.word	0x2003c262

0801b1ec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b1f4:	b09b      	sub	sp, #108	; 0x6c
 801b1f6:	4604      	mov	r4, r0
 801b1f8:	4630      	mov	r0, r6
 801b1fa:	f7fa ff16 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1fe:	4605      	mov	r5, r0
 801b200:	b940      	cbnz	r0, 801b214 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801b202:	4620      	mov	r0, r4
 801b204:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b208:	f7ff fcaa 	bl	801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b20c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b210:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b214:	4bc8      	ldr	r3, [pc, #800]	; (801b538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d03e      	beq.n	801b29a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801b21c:	4dc7      	ldr	r5, [pc, #796]	; (801b53c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b21e:	4628      	mov	r0, r5
 801b220:	f7fa ff03 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b224:	4606      	mov	r6, r0
 801b226:	2800      	cmp	r0, #0
 801b228:	d137      	bne.n	801b29a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801b22a:	4628      	mov	r0, r5
 801b22c:	f7ff fa0c 	bl	801a648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b230:	6829      	ldr	r1, [r5, #0]
 801b232:	686a      	ldr	r2, [r5, #4]
 801b234:	4620      	mov	r0, r4
 801b236:	f7ff fc93 	bl	801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b23a:	802e      	strh	r6, [r5, #0]
 801b23c:	806e      	strh	r6, [r5, #2]
 801b23e:	80ae      	strh	r6, [r5, #4]
 801b240:	80ee      	strh	r6, [r5, #6]
 801b242:	ae09      	add	r6, sp, #36	; 0x24
 801b244:	4630      	mov	r0, r6
 801b246:	f7ff fc24 	bl	801aa92 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b24a:	4abd      	ldr	r2, [pc, #756]	; (801b540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b24c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801b250:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801b254:	8815      	ldrh	r5, [r2, #0]
 801b256:	9202      	str	r2, [sp, #8]
 801b258:	462b      	mov	r3, r5
 801b25a:	429f      	cmp	r7, r3
 801b25c:	d924      	bls.n	801b2a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801b25e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801b262:	2907      	cmp	r1, #7
 801b264:	d816      	bhi.n	801b294 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801b266:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b26a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801b26e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801b272:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b276:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b27a:	1c4a      	adds	r2, r1, #1
 801b27c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801b280:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801b284:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801b288:	f8a2 9002 	strh.w	r9, [r2, #2]
 801b28c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b290:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b294:	3301      	adds	r3, #1
 801b296:	b29b      	uxth	r3, r3
 801b298:	e7df      	b.n	801b25a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801b29a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d1cf      	bne.n	801b242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801b2a2:	b01b      	add	sp, #108	; 0x6c
 801b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a8:	462f      	mov	r7, r5
 801b2aa:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b2ae:	42bb      	cmp	r3, r7
 801b2b0:	d90b      	bls.n	801b2ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801b2b2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801b2b6:	3701      	adds	r7, #1
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b2be:	b2bf      	uxth	r7, r7
 801b2c0:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b2c4:	f7ff fc4c 	bl	801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b2c8:	e7ef      	b.n	801b2aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801b2ca:	4a9e      	ldr	r2, [pc, #632]	; (801b544 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b2cc:	6813      	ldr	r3, [r2, #0]
 801b2ce:	4690      	mov	r8, r2
 801b2d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b2d4:	2b01      	cmp	r3, #1
 801b2d6:	f040 80e4 	bne.w	801b4a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801b2da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b2de:	4629      	mov	r1, r5
 801b2e0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801b2e4:	2500      	movs	r5, #0
 801b2e6:	33aa      	adds	r3, #170	; 0xaa
 801b2e8:	428f      	cmp	r7, r1
 801b2ea:	f103 0308 	add.w	r3, r3, #8
 801b2ee:	dd0a      	ble.n	801b306 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801b2f0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b2f4:	3101      	adds	r1, #1
 801b2f6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801b2fa:	4402      	add	r2, r0
 801b2fc:	b212      	sxth	r2, r2
 801b2fe:	4295      	cmp	r5, r2
 801b300:	bfb8      	it	lt
 801b302:	4615      	movlt	r5, r2
 801b304:	e7f0      	b.n	801b2e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801b306:	4b90      	ldr	r3, [pc, #576]	; (801b548 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b308:	f8df b238 	ldr.w	fp, [pc, #568]	; 801b544 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801b30c:	881b      	ldrh	r3, [r3, #0]
 801b30e:	46d8      	mov	r8, fp
 801b310:	2b0f      	cmp	r3, #15
 801b312:	bf8c      	ite	hi
 801b314:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801b318:	f04f 0a01 	movls.w	sl, #1
 801b31c:	2300      	movs	r3, #0
 801b31e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b322:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801b326:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801b32a:	4438      	add	r0, r7
 801b32c:	b207      	sxth	r7, r0
 801b32e:	f8db 0000 	ldr.w	r0, [fp]
 801b332:	42bd      	cmp	r5, r7
 801b334:	6803      	ldr	r3, [r0, #0]
 801b336:	f340 8084 	ble.w	801b442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801b33a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b33e:	4798      	blx	r3
 801b340:	eb07 030a 	add.w	r3, r7, sl
 801b344:	4298      	cmp	r0, r3
 801b346:	da07      	bge.n	801b358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801b348:	4285      	cmp	r5, r0
 801b34a:	dd05      	ble.n	801b358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801b34c:	4287      	cmp	r7, r0
 801b34e:	dd6d      	ble.n	801b42c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b350:	2f00      	cmp	r7, #0
 801b352:	dd6b      	ble.n	801b42c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b354:	4628      	mov	r0, r5
 801b356:	e004      	b.n	801b362 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801b358:	4287      	cmp	r7, r0
 801b35a:	dcfb      	bgt.n	801b354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801b35c:	42a8      	cmp	r0, r5
 801b35e:	bfa8      	it	ge
 801b360:	4628      	movge	r0, r5
 801b362:	4b7a      	ldr	r3, [pc, #488]	; (801b54c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801b364:	1bc0      	subs	r0, r0, r7
 801b366:	2200      	movs	r2, #0
 801b368:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b370:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b374:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b378:	9b02      	ldr	r3, [sp, #8]
 801b37a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b37e:	881f      	ldrh	r7, [r3, #0]
 801b380:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b384:	42bb      	cmp	r3, r7
 801b386:	d9cc      	bls.n	801b322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801b388:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b38c:	ab07      	add	r3, sp, #28
 801b38e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b392:	6851      	ldr	r1, [r2, #4]
 801b394:	c303      	stmia	r3!, {r0, r1}
 801b396:	a905      	add	r1, sp, #20
 801b398:	a807      	add	r0, sp, #28
 801b39a:	f7ff fa8b 	bl	801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b39e:	2800      	cmp	r0, #0
 801b3a0:	d04c      	beq.n	801b43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801b3a2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b3a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b3aa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801b3ae:	4686      	mov	lr, r0
 801b3b0:	4290      	cmp	r0, r2
 801b3b2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b3b6:	4448      	add	r0, r9
 801b3b8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801b3bc:	bfb8      	it	lt
 801b3be:	4696      	movlt	lr, r2
 801b3c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b3c4:	444a      	add	r2, r9
 801b3c6:	b280      	uxth	r0, r0
 801b3c8:	4299      	cmp	r1, r3
 801b3ca:	468c      	mov	ip, r1
 801b3cc:	b292      	uxth	r2, r2
 801b3ce:	9303      	str	r3, [sp, #12]
 801b3d0:	bfb8      	it	lt
 801b3d2:	469c      	movlt	ip, r3
 801b3d4:	b203      	sxth	r3, r0
 801b3d6:	fa0f f982 	sxth.w	r9, r2
 801b3da:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b3de:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b3e2:	454b      	cmp	r3, r9
 801b3e4:	bfb8      	it	lt
 801b3e6:	4602      	movlt	r2, r0
 801b3e8:	9b03      	ldr	r3, [sp, #12]
 801b3ea:	eba2 020e 	sub.w	r2, r2, lr
 801b3ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b3f2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b3f6:	4411      	add	r1, r2
 801b3f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	b289      	uxth	r1, r1
 801b400:	b29b      	uxth	r3, r3
 801b402:	b208      	sxth	r0, r1
 801b404:	b21a      	sxth	r2, r3
 801b406:	4290      	cmp	r0, r2
 801b408:	bfb8      	it	lt
 801b40a:	460b      	movlt	r3, r1
 801b40c:	eba3 030c 	sub.w	r3, r3, ip
 801b410:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b414:	a807      	add	r0, sp, #28
 801b416:	f7fa fe08 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b41a:	b920      	cbnz	r0, 801b426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801b41c:	6823      	ldr	r3, [r4, #0]
 801b41e:	a907      	add	r1, sp, #28
 801b420:	4620      	mov	r0, r4
 801b422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b424:	4798      	blx	r3
 801b426:	3701      	adds	r7, #1
 801b428:	b2bf      	uxth	r7, r7
 801b42a:	e7a9      	b.n	801b380 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801b42c:	f8d8 0000 	ldr.w	r0, [r8]
 801b430:	2101      	movs	r1, #1
 801b432:	6803      	ldr	r3, [r0, #0]
 801b434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b438:	4798      	blx	r3
 801b43a:	e772      	b.n	801b322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801b43c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b440:	e7e8      	b.n	801b414 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b444:	4798      	blx	r3
 801b446:	4b42      	ldr	r3, [pc, #264]	; (801b550 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	f43f af29 	beq.w	801b2a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801b450:	2300      	movs	r3, #0
 801b452:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801b456:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b45a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801b45e:	9b02      	ldr	r3, [sp, #8]
 801b460:	881b      	ldrh	r3, [r3, #0]
 801b462:	429d      	cmp	r5, r3
 801b464:	f67f af1d 	bls.w	801b2a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801b468:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801b46c:	2907      	cmp	r1, #7
 801b46e:	d815      	bhi.n	801b49c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801b470:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801b474:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801b478:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801b47c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801b480:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801b484:	1c4a      	adds	r2, r1, #1
 801b486:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801b48a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b48e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801b492:	f8a2 e002 	strh.w	lr, [r2, #2]
 801b496:	f8a2 c004 	strh.w	ip, [r2, #4]
 801b49a:	80d7      	strh	r7, [r2, #6]
 801b49c:	3301      	adds	r3, #1
 801b49e:	b29b      	uxth	r3, r3
 801b4a0:	e7df      	b.n	801b462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801b4a2:	2b02      	cmp	r3, #2
 801b4a4:	f040 8135 	bne.w	801b712 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801b4a8:	4b2a      	ldr	r3, [pc, #168]	; (801b554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801b4aa:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b4ae:	781b      	ldrb	r3, [r3, #0]
 801b4b0:	2b01      	cmp	r3, #1
 801b4b2:	f000 809c 	beq.w	801b5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801b4b6:	9b02      	ldr	r3, [sp, #8]
 801b4b8:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801b4bc:	f8b3 b000 	ldrh.w	fp, [r3]
 801b4c0:	f10b 0b01 	add.w	fp, fp, #1
 801b4c4:	fa1f fb8b 	uxth.w	fp, fp
 801b4c8:	2a00      	cmp	r2, #0
 801b4ca:	d0bc      	beq.n	801b446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b4cc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b4d0:	4659      	mov	r1, fp
 801b4d2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b4d6:	f04f 0800 	mov.w	r8, #0
 801b4da:	441d      	add	r5, r3
 801b4dc:	b22d      	sxth	r5, r5
 801b4de:	b28b      	uxth	r3, r1
 801b4e0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	f240 80c0 	bls.w	801b66a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801b4ea:	4427      	add	r7, r4
 801b4ec:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801b4f0:	4608      	mov	r0, r1
 801b4f2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801b4f6:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801b4fa:	4563      	cmp	r3, ip
 801b4fc:	f340 80a2 	ble.w	801b644 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801b500:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801b504:	4465      	add	r5, ip
 801b506:	b22d      	sxth	r5, r5
 801b508:	429d      	cmp	r5, r3
 801b50a:	bfa8      	it	ge
 801b50c:	461d      	movge	r5, r3
 801b50e:	3101      	adds	r1, #1
 801b510:	4680      	mov	r8, r0
 801b512:	e7e4      	b.n	801b4de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801b514:	d10b      	bne.n	801b52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801b516:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b51a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b51e:	458c      	cmp	ip, r1
 801b520:	bfb4      	ite	lt
 801b522:	469c      	movlt	ip, r3
 801b524:	46bc      	movge	ip, r7
 801b526:	4572      	cmp	r2, lr
 801b528:	bfb8      	it	lt
 801b52a:	4672      	movlt	r2, lr
 801b52c:	e087      	b.n	801b63e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801b52e:	428a      	cmp	r2, r1
 801b530:	46bc      	mov	ip, r7
 801b532:	bfb8      	it	lt
 801b534:	460a      	movlt	r2, r1
 801b536:	e082      	b.n	801b63e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801b538:	2003c2ac 	.word	0x2003c2ac
 801b53c:	2003c2b8 	.word	0x2003c2b8
 801b540:	20000044 	.word	0x20000044
 801b544:	2003c26c 	.word	0x2003c26c
 801b548:	2003c262 	.word	0x2003c262
 801b54c:	2003c260 	.word	0x2003c260
 801b550:	2003c26a 	.word	0x2003c26a
 801b554:	2003c264 	.word	0x2003c264
 801b558:	1961      	adds	r1, r4, r5
 801b55a:	ab07      	add	r3, sp, #28
 801b55c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b560:	6849      	ldr	r1, [r1, #4]
 801b562:	c303      	stmia	r3!, {r0, r1}
 801b564:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b568:	a807      	add	r0, sp, #28
 801b56a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b56e:	2b13      	cmp	r3, #19
 801b570:	440b      	add	r3, r1
 801b572:	bfd8      	it	le
 801b574:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b578:	1a9b      	subs	r3, r3, r2
 801b57a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b57e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b582:	f7ff f87b 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b586:	a807      	add	r0, sp, #28
 801b588:	f7fa fd4f 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b58c:	bb78      	cbnz	r0, 801b5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801b58e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b592:	4425      	add	r5, r4
 801b594:	f8d8 0000 	ldr.w	r0, [r8]
 801b598:	f1bc 0f14 	cmp.w	ip, #20
 801b59c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b5a0:	f8d0 e000 	ldr.w	lr, [r0]
 801b5a4:	bfa8      	it	ge
 801b5a6:	f04f 0c14 	movge.w	ip, #20
 801b5aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b5ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b5b2:	fa1f fc8c 	uxth.w	ip, ip
 801b5b6:	f8cd c000 	str.w	ip, [sp]
 801b5ba:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801b5be:	47d0      	blx	sl
 801b5c0:	4682      	mov	sl, r0
 801b5c2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b5c6:	a807      	add	r0, sp, #28
 801b5c8:	f7ff f83e 	bl	801a648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b5cc:	6823      	ldr	r3, [r4, #0]
 801b5ce:	4620      	mov	r0, r4
 801b5d0:	a907      	add	r1, sp, #28
 801b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5d4:	4798      	blx	r3
 801b5d6:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b5da:	eba0 000a 	sub.w	r0, r0, sl
 801b5de:	b200      	sxth	r0, r0
 801b5e0:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b5e4:	b918      	cbnz	r0, 801b5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801b5e6:	b2b9      	uxth	r1, r7
 801b5e8:	4648      	mov	r0, r9
 801b5ea:	f7ff faa5 	bl	801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b5ee:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b5f2:	f1bb 0f00 	cmp.w	fp, #0
 801b5f6:	f43f af26 	beq.w	801b446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b5fa:	9b02      	ldr	r3, [sp, #8]
 801b5fc:	2700      	movs	r7, #0
 801b5fe:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b602:	881b      	ldrh	r3, [r3, #0]
 801b604:	3301      	adds	r3, #1
 801b606:	b29b      	uxth	r3, r3
 801b608:	b299      	uxth	r1, r3
 801b60a:	00fd      	lsls	r5, r7, #3
 801b60c:	458b      	cmp	fp, r1
 801b60e:	d9a3      	bls.n	801b558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801b610:	4425      	add	r5, r4
 801b612:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b616:	469c      	mov	ip, r3
 801b618:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b61c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b620:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b624:	4408      	add	r0, r1
 801b626:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b62a:	4471      	add	r1, lr
 801b62c:	b200      	sxth	r0, r0
 801b62e:	b209      	sxth	r1, r1
 801b630:	4288      	cmp	r0, r1
 801b632:	f6bf af6f 	bge.w	801b514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801b636:	4586      	cmp	lr, r0
 801b638:	4672      	mov	r2, lr
 801b63a:	bfb8      	it	lt
 801b63c:	4602      	movlt	r2, r0
 801b63e:	3301      	adds	r3, #1
 801b640:	4667      	mov	r7, ip
 801b642:	e7e1      	b.n	801b608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801b644:	d10c      	bne.n	801b660 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801b646:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801b64a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801b64e:	4287      	cmp	r7, r0
 801b650:	bfb4      	ite	lt
 801b652:	4608      	movlt	r0, r1
 801b654:	4640      	movge	r0, r8
 801b656:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801b65a:	443b      	add	r3, r7
 801b65c:	b21b      	sxth	r3, r3
 801b65e:	e753      	b.n	801b508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801b660:	4565      	cmp	r5, ip
 801b662:	4640      	mov	r0, r8
 801b664:	bfa8      	it	ge
 801b666:	4665      	movge	r5, ip
 801b668:	e751      	b.n	801b50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801b66a:	eb09 0007 	add.w	r0, r9, r7
 801b66e:	4427      	add	r7, r4
 801b670:	9203      	str	r2, [sp, #12]
 801b672:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801b676:	f1ba 0f13 	cmp.w	sl, #19
 801b67a:	bfde      	ittt	le
 801b67c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801b680:	4455      	addle	r5, sl
 801b682:	b22d      	sxthle	r5, r5
 801b684:	f7fa fcd1 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b688:	9a03      	ldr	r2, [sp, #12]
 801b68a:	2800      	cmp	r0, #0
 801b68c:	f47f af1c 	bne.w	801b4c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801b690:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801b694:	fa1f fa8a 	uxth.w	sl, sl
 801b698:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b69c:	1aad      	subs	r5, r5, r2
 801b69e:	4829      	ldr	r0, [pc, #164]	; (801b744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801b6a0:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801b6a4:	2d14      	cmp	r5, #20
 801b6a6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801b6aa:	6800      	ldr	r0, [r0, #0]
 801b6ac:	bfa8      	it	ge
 801b6ae:	2514      	movge	r5, #20
 801b6b0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b6b4:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b6b8:	b289      	uxth	r1, r1
 801b6ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b6be:	b2ad      	uxth	r5, r5
 801b6c0:	f8d0 c000 	ldr.w	ip, [r0]
 801b6c4:	b292      	uxth	r2, r2
 801b6c6:	4555      	cmp	r5, sl
 801b6c8:	bf94      	ite	ls
 801b6ca:	9500      	strls	r5, [sp, #0]
 801b6cc:	f8cd a000 	strhi.w	sl, [sp]
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801b6d6:	47a8      	blx	r5
 801b6d8:	6823      	ldr	r3, [r4, #0]
 801b6da:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b6de:	a907      	add	r1, sp, #28
 801b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	4798      	blx	r3
 801b6e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b6ea:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801b6ee:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801b6f2:	1a5b      	subs	r3, r3, r1
 801b6f4:	440a      	add	r2, r1
 801b6f6:	b21b      	sxth	r3, r3
 801b6f8:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801b6fc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801b700:	2b00      	cmp	r3, #0
 801b702:	f47f aed8 	bne.w	801b4b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b706:	fa1f f188 	uxth.w	r1, r8
 801b70a:	4648      	mov	r0, r9
 801b70c:	f7ff fa14 	bl	801ab38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b710:	e6d1      	b.n	801b4b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b712:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b716:	42ab      	cmp	r3, r5
 801b718:	f67f ae95 	bls.w	801b446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b71c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b720:	ab07      	add	r3, sp, #28
 801b722:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b726:	6851      	ldr	r1, [r2, #4]
 801b728:	c303      	stmia	r3!, {r0, r1}
 801b72a:	a807      	add	r0, sp, #28
 801b72c:	f7fa fc7d 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b730:	b920      	cbnz	r0, 801b73c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801b732:	6823      	ldr	r3, [r4, #0]
 801b734:	a907      	add	r1, sp, #28
 801b736:	4620      	mov	r0, r4
 801b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b73a:	4798      	blx	r3
 801b73c:	3501      	adds	r5, #1
 801b73e:	b2ad      	uxth	r5, r5
 801b740:	e7e7      	b.n	801b712 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801b742:	bf00      	nop
 801b744:	2003c26c 	.word	0x2003c26c

0801b748 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b748:	4b03      	ldr	r3, [pc, #12]	; (801b758 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b74a:	2200      	movs	r2, #0
 801b74c:	801a      	strh	r2, [r3, #0]
 801b74e:	805a      	strh	r2, [r3, #2]
 801b750:	809a      	strh	r2, [r3, #4]
 801b752:	80da      	strh	r2, [r3, #6]
 801b754:	4770      	bx	lr
 801b756:	bf00      	nop
 801b758:	2003c2b8 	.word	0x2003c2b8

0801b75c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b760:	b09d      	sub	sp, #116	; 0x74
 801b762:	4606      	mov	r6, r0
 801b764:	4614      	mov	r4, r2
 801b766:	468a      	mov	sl, r1
 801b768:	a803      	add	r0, sp, #12
 801b76a:	461d      	mov	r5, r3
 801b76c:	f000 fe2e 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b770:	6833      	ldr	r3, [r6, #0]
 801b772:	4630      	mov	r0, r6
 801b774:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b77a:	4798      	blx	r3
 801b77c:	6833      	ldr	r3, [r6, #0]
 801b77e:	4607      	mov	r7, r0
 801b780:	4630      	mov	r0, r6
 801b782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b784:	4798      	blx	r3
 801b786:	462a      	mov	r2, r5
 801b788:	2500      	movs	r5, #0
 801b78a:	4621      	mov	r1, r4
 801b78c:	9000      	str	r0, [sp, #0]
 801b78e:	463b      	mov	r3, r7
 801b790:	462c      	mov	r4, r5
 801b792:	46a9      	mov	r9, r5
 801b794:	46a8      	mov	r8, r5
 801b796:	a803      	add	r0, sp, #12
 801b798:	f000 fe73 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b79c:	2300      	movs	r3, #0
 801b79e:	9302      	str	r3, [sp, #8]
 801b7a0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b7a4:	429c      	cmp	r4, r3
 801b7a6:	d002      	beq.n	801b7ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b7a8:	455c      	cmp	r4, fp
 801b7aa:	bf18      	it	ne
 801b7ac:	4625      	movne	r5, r4
 801b7ae:	ab02      	add	r3, sp, #8
 801b7b0:	4632      	mov	r2, r6
 801b7b2:	4651      	mov	r1, sl
 801b7b4:	a803      	add	r0, sp, #12
 801b7b6:	f001 f969 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b7ba:	4604      	mov	r4, r0
 801b7bc:	b108      	cbz	r0, 801b7c2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b7be:	280a      	cmp	r0, #10
 801b7c0:	d10a      	bne.n	801b7d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b7c2:	45c1      	cmp	r9, r8
 801b7c4:	bf38      	it	cc
 801b7c6:	46c1      	movcc	r9, r8
 801b7c8:	f04f 0800 	mov.w	r8, #0
 801b7cc:	2c00      	cmp	r4, #0
 801b7ce:	d1e5      	bne.n	801b79c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7d0:	4648      	mov	r0, r9
 801b7d2:	b01d      	add	sp, #116	; 0x74
 801b7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7d8:	9a02      	ldr	r2, [sp, #8]
 801b7da:	2a00      	cmp	r2, #0
 801b7dc:	d0de      	beq.n	801b79c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7de:	7b57      	ldrb	r7, [r2, #13]
 801b7e0:	4629      	mov	r1, r5
 801b7e2:	6833      	ldr	r3, [r6, #0]
 801b7e4:	007f      	lsls	r7, r7, #1
 801b7e6:	8894      	ldrh	r4, [r2, #4]
 801b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b7ea:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b7ee:	7a97      	ldrb	r7, [r2, #10]
 801b7f0:	4307      	orrs	r7, r0
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	4798      	blx	r3
 801b7f6:	4438      	add	r0, r7
 801b7f8:	4480      	add	r8, r0
 801b7fa:	fa1f f888 	uxth.w	r8, r8
 801b7fe:	e7e5      	b.n	801b7cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b800 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b800:	b508      	push	{r3, lr}
 801b802:	6803      	ldr	r3, [r0, #0]
 801b804:	68db      	ldr	r3, [r3, #12]
 801b806:	4798      	blx	r3
 801b808:	b128      	cbz	r0, 801b816 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b80a:	7b43      	ldrb	r3, [r0, #13]
 801b80c:	7a80      	ldrb	r0, [r0, #10]
 801b80e:	005b      	lsls	r3, r3, #1
 801b810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b814:	4318      	orrs	r0, r3
 801b816:	bd08      	pop	{r3, pc}

0801b818 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b818:	b40e      	push	{r1, r2, r3}
 801b81a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b81c:	b09e      	sub	sp, #120	; 0x78
 801b81e:	4605      	mov	r5, r0
 801b820:	ab23      	add	r3, sp, #140	; 0x8c
 801b822:	a805      	add	r0, sp, #20
 801b824:	f853 4b04 	ldr.w	r4, [r3], #4
 801b828:	9303      	str	r3, [sp, #12]
 801b82a:	f000 fdcf 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b82e:	682b      	ldr	r3, [r5, #0]
 801b830:	4628      	mov	r0, r5
 801b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b834:	4798      	blx	r3
 801b836:	682b      	ldr	r3, [r5, #0]
 801b838:	4606      	mov	r6, r0
 801b83a:	4628      	mov	r0, r5
 801b83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b83e:	4798      	blx	r3
 801b840:	4633      	mov	r3, r6
 801b842:	4621      	mov	r1, r4
 801b844:	ae1e      	add	r6, sp, #120	; 0x78
 801b846:	2400      	movs	r4, #0
 801b848:	9000      	str	r0, [sp, #0]
 801b84a:	9a03      	ldr	r2, [sp, #12]
 801b84c:	a805      	add	r0, sp, #20
 801b84e:	f000 fe18 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b852:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b856:	462a      	mov	r2, r5
 801b858:	4633      	mov	r3, r6
 801b85a:	4621      	mov	r1, r4
 801b85c:	a805      	add	r0, sp, #20
 801b85e:	f001 f915 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b862:	b300      	cbz	r0, 801b8a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b864:	280a      	cmp	r0, #10
 801b866:	d01a      	beq.n	801b89e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b868:	9f04      	ldr	r7, [sp, #16]
 801b86a:	b1c7      	cbz	r7, 801b89e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b86c:	7b78      	ldrb	r0, [r7, #13]
 801b86e:	7a3b      	ldrb	r3, [r7, #8]
 801b870:	00c1      	lsls	r1, r0, #3
 801b872:	88aa      	ldrh	r2, [r5, #4]
 801b874:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b878:	4319      	orrs	r1, r3
 801b87a:	0643      	lsls	r3, r0, #25
 801b87c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b880:	bf48      	it	mi
 801b882:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b886:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b88a:	bf48      	it	mi
 801b88c:	b219      	sxthmi	r1, r3
 801b88e:	79fb      	ldrb	r3, [r7, #7]
 801b890:	4303      	orrs	r3, r0
 801b892:	4413      	add	r3, r2
 801b894:	1a5b      	subs	r3, r3, r1
 801b896:	b29b      	uxth	r3, r3
 801b898:	42a3      	cmp	r3, r4
 801b89a:	bfc8      	it	gt
 801b89c:	b21c      	sxthgt	r4, r3
 801b89e:	4633      	mov	r3, r6
 801b8a0:	462a      	mov	r2, r5
 801b8a2:	2100      	movs	r1, #0
 801b8a4:	e7da      	b.n	801b85c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b8a6:	b2a0      	uxth	r0, r4
 801b8a8:	b01e      	add	sp, #120	; 0x78
 801b8aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b8ae:	b003      	add	sp, #12
 801b8b0:	4770      	bx	lr

0801b8b2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b8b2:	b40e      	push	{r1, r2, r3}
 801b8b4:	b570      	push	{r4, r5, r6, lr}
 801b8b6:	b09d      	sub	sp, #116	; 0x74
 801b8b8:	4604      	mov	r4, r0
 801b8ba:	ab21      	add	r3, sp, #132	; 0x84
 801b8bc:	a803      	add	r0, sp, #12
 801b8be:	f853 5b04 	ldr.w	r5, [r3], #4
 801b8c2:	9302      	str	r3, [sp, #8]
 801b8c4:	f000 fd82 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b8c8:	6823      	ldr	r3, [r4, #0]
 801b8ca:	4620      	mov	r0, r4
 801b8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8ce:	4798      	blx	r3
 801b8d0:	6823      	ldr	r3, [r4, #0]
 801b8d2:	4606      	mov	r6, r0
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8d8:	2401      	movs	r4, #1
 801b8da:	4798      	blx	r3
 801b8dc:	4633      	mov	r3, r6
 801b8de:	9000      	str	r0, [sp, #0]
 801b8e0:	4629      	mov	r1, r5
 801b8e2:	9a02      	ldr	r2, [sp, #8]
 801b8e4:	a803      	add	r0, sp, #12
 801b8e6:	f000 fdcc 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8ea:	a803      	add	r0, sp, #12
 801b8ec:	f001 f99a 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8f0:	b2a3      	uxth	r3, r4
 801b8f2:	b138      	cbz	r0, 801b904 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801b8f4:	280a      	cmp	r0, #10
 801b8f6:	a803      	add	r0, sp, #12
 801b8f8:	bf04      	itt	eq
 801b8fa:	3301      	addeq	r3, #1
 801b8fc:	b21c      	sxtheq	r4, r3
 801b8fe:	f001 f991 	bl	801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b902:	e7f5      	b.n	801b8f0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b904:	4618      	mov	r0, r3
 801b906:	b01d      	add	sp, #116	; 0x74
 801b908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b90c:	b003      	add	sp, #12
 801b90e:	4770      	bx	lr

0801b910 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b910:	b40e      	push	{r1, r2, r3}
 801b912:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b914:	b09e      	sub	sp, #120	; 0x78
 801b916:	4604      	mov	r4, r0
 801b918:	ab23      	add	r3, sp, #140	; 0x8c
 801b91a:	a805      	add	r0, sp, #20
 801b91c:	f853 5b04 	ldr.w	r5, [r3], #4
 801b920:	9303      	str	r3, [sp, #12]
 801b922:	f000 fd53 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b926:	6823      	ldr	r3, [r4, #0]
 801b928:	4620      	mov	r0, r4
 801b92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b92c:	4798      	blx	r3
 801b92e:	6823      	ldr	r3, [r4, #0]
 801b930:	4606      	mov	r6, r0
 801b932:	4620      	mov	r0, r4
 801b934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b936:	4798      	blx	r3
 801b938:	4633      	mov	r3, r6
 801b93a:	4629      	mov	r1, r5
 801b93c:	9000      	str	r0, [sp, #0]
 801b93e:	9a03      	ldr	r2, [sp, #12]
 801b940:	a805      	add	r0, sp, #20
 801b942:	f000 fd9e 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b946:	ad1e      	add	r5, sp, #120	; 0x78
 801b948:	2100      	movs	r1, #0
 801b94a:	26ff      	movs	r6, #255	; 0xff
 801b94c:	4622      	mov	r2, r4
 801b94e:	a805      	add	r0, sp, #20
 801b950:	f845 1d68 	str.w	r1, [r5, #-104]!
 801b954:	462b      	mov	r3, r5
 801b956:	f001 f899 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b95a:	b1d8      	cbz	r0, 801b994 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801b95c:	280a      	cmp	r0, #10
 801b95e:	d012      	beq.n	801b986 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b960:	9804      	ldr	r0, [sp, #16]
 801b962:	b180      	cbz	r0, 801b986 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b964:	7b47      	ldrb	r7, [r0, #13]
 801b966:	7922      	ldrb	r2, [r4, #4]
 801b968:	00fb      	lsls	r3, r7, #3
 801b96a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b96e:	7a03      	ldrb	r3, [r0, #8]
 801b970:	430b      	orrs	r3, r1
 801b972:	0679      	lsls	r1, r7, #25
 801b974:	bf44      	itt	mi
 801b976:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b97a:	b21b      	sxthmi	r3, r3
 801b97c:	1ad3      	subs	r3, r2, r3
 801b97e:	b2db      	uxtb	r3, r3
 801b980:	429e      	cmp	r6, r3
 801b982:	bf28      	it	cs
 801b984:	461e      	movcs	r6, r3
 801b986:	462b      	mov	r3, r5
 801b988:	4622      	mov	r2, r4
 801b98a:	2100      	movs	r1, #0
 801b98c:	a805      	add	r0, sp, #20
 801b98e:	f001 f87d 	bl	801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b992:	e7e2      	b.n	801b95a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801b994:	4630      	mov	r0, r6
 801b996:	b01e      	add	sp, #120	; 0x78
 801b998:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b99c:	b003      	add	sp, #12
 801b99e:	4770      	bx	lr

0801b9a0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b9a0:	b513      	push	{r0, r1, r4, lr}
 801b9a2:	6803      	ldr	r3, [r0, #0]
 801b9a4:	2400      	movs	r4, #0
 801b9a6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b9aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b9ae:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b9b2:	4669      	mov	r1, sp
 801b9b4:	691b      	ldr	r3, [r3, #16]
 801b9b6:	9400      	str	r4, [sp, #0]
 801b9b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b9bc:	4798      	blx	r3
 801b9be:	b002      	add	sp, #8
 801b9c0:	bd10      	pop	{r4, pc}

0801b9c2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b9c2:	b538      	push	{r3, r4, r5, lr}
 801b9c4:	680b      	ldr	r3, [r1, #0]
 801b9c6:	460c      	mov	r4, r1
 801b9c8:	4605      	mov	r5, r0
 801b9ca:	68db      	ldr	r3, [r3, #12]
 801b9cc:	4798      	blx	r3
 801b9ce:	6823      	ldr	r3, [r4, #0]
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	4629      	mov	r1, r5
 801b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9d6:	4798      	blx	r3
 801b9d8:	4628      	mov	r0, r5
 801b9da:	bd38      	pop	{r3, r4, r5, pc}

0801b9dc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b9dc:	b410      	push	{r4}
 801b9de:	880a      	ldrh	r2, [r1, #0]
 801b9e0:	8884      	ldrh	r4, [r0, #4]
 801b9e2:	4422      	add	r2, r4
 801b9e4:	800a      	strh	r2, [r1, #0]
 801b9e6:	884a      	ldrh	r2, [r1, #2]
 801b9e8:	88c4      	ldrh	r4, [r0, #6]
 801b9ea:	4422      	add	r2, r4
 801b9ec:	804a      	strh	r2, [r1, #2]
 801b9ee:	6940      	ldr	r0, [r0, #20]
 801b9f0:	b120      	cbz	r0, 801b9fc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b9f2:	6803      	ldr	r3, [r0, #0]
 801b9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9fa:	4718      	bx	r3
 801b9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba00:	4770      	bx	lr

0801ba02 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ba02:	b570      	push	{r4, r5, r6, lr}
 801ba04:	8882      	ldrh	r2, [r0, #4]
 801ba06:	460c      	mov	r4, r1
 801ba08:	880b      	ldrh	r3, [r1, #0]
 801ba0a:	4605      	mov	r5, r0
 801ba0c:	4413      	add	r3, r2
 801ba0e:	800b      	strh	r3, [r1, #0]
 801ba10:	884b      	ldrh	r3, [r1, #2]
 801ba12:	88c2      	ldrh	r2, [r0, #6]
 801ba14:	4413      	add	r3, r2
 801ba16:	804b      	strh	r3, [r1, #2]
 801ba18:	1d01      	adds	r1, r0, #4
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	f7fa fac2 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801ba20:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	dd0b      	ble.n	801ba40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba28:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	dd07      	ble.n	801ba40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba30:	6968      	ldr	r0, [r5, #20]
 801ba32:	b128      	cbz	r0, 801ba40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba34:	6803      	ldr	r3, [r0, #0]
 801ba36:	4621      	mov	r1, r4
 801ba38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba3e:	4718      	bx	r3
 801ba40:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ba44 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ba44:	b570      	push	{r4, r5, r6, lr}
 801ba46:	8882      	ldrh	r2, [r0, #4]
 801ba48:	460c      	mov	r4, r1
 801ba4a:	880b      	ldrh	r3, [r1, #0]
 801ba4c:	4605      	mov	r5, r0
 801ba4e:	4413      	add	r3, r2
 801ba50:	800b      	strh	r3, [r1, #0]
 801ba52:	884b      	ldrh	r3, [r1, #2]
 801ba54:	88c2      	ldrh	r2, [r0, #6]
 801ba56:	4413      	add	r3, r2
 801ba58:	804b      	strh	r3, [r1, #2]
 801ba5a:	1d01      	adds	r1, r0, #4
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	f7fa faa1 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801ba62:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	dd18      	ble.n	801ba9c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ba6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	dd14      	ble.n	801ba9c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ba72:	6968      	ldr	r0, [r5, #20]
 801ba74:	b128      	cbz	r0, 801ba82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ba76:	6803      	ldr	r3, [r0, #0]
 801ba78:	4621      	mov	r1, r4
 801ba7a:	691b      	ldr	r3, [r3, #16]
 801ba7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba80:	4718      	bx	r3
 801ba82:	4b07      	ldr	r3, [pc, #28]	; (801baa0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	3304      	adds	r3, #4
 801ba88:	429d      	cmp	r5, r3
 801ba8a:	d107      	bne.n	801ba9c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801ba8c:	f7fe fff0 	bl	801aa70 <_ZN8touchgfx11Application11getInstanceEv>
 801ba90:	6821      	ldr	r1, [r4, #0]
 801ba92:	6862      	ldr	r2, [r4, #4]
 801ba94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba98:	f7ff b862 	b.w	801ab60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ba9c:	bd70      	pop	{r4, r5, r6, pc}
 801ba9e:	bf00      	nop
 801baa0:	2003c2b0 	.word	0x2003c2b0

0801baa4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801baa4:	b570      	push	{r4, r5, r6, lr}
 801baa6:	4604      	mov	r4, r0
 801baa8:	4616      	mov	r6, r2
 801baaa:	460d      	mov	r5, r1
 801baac:	b901      	cbnz	r1, 801bab0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801baae:	b192      	cbz	r2, 801bad6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bab0:	6823      	ldr	r3, [r4, #0]
 801bab2:	4620      	mov	r0, r4
 801bab4:	699b      	ldr	r3, [r3, #24]
 801bab6:	4798      	blx	r3
 801bab8:	88e2      	ldrh	r2, [r4, #6]
 801baba:	88a1      	ldrh	r1, [r4, #4]
 801babc:	4620      	mov	r0, r4
 801babe:	4432      	add	r2, r6
 801bac0:	4429      	add	r1, r5
 801bac2:	b212      	sxth	r2, r2
 801bac4:	b209      	sxth	r1, r1
 801bac6:	f7f3 fbb5 	bl	800f234 <_ZN8touchgfx8Drawable5setXYEss>
 801baca:	6823      	ldr	r3, [r4, #0]
 801bacc:	4620      	mov	r0, r4
 801bace:	699b      	ldr	r3, [r3, #24]
 801bad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bad4:	4718      	bx	r3
 801bad6:	bd70      	pop	{r4, r5, r6, pc}

0801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bad8:	b510      	push	{r4, lr}
 801bada:	2300      	movs	r3, #0
 801badc:	4604      	mov	r4, r0
 801bade:	4608      	mov	r0, r1
 801bae0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bae4:	8023      	strh	r3, [r4, #0]
 801bae6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801baea:	8063      	strh	r3, [r4, #2]
 801baec:	6803      	ldr	r3, [r0, #0]
 801baee:	80a1      	strh	r1, [r4, #4]
 801baf0:	4621      	mov	r1, r4
 801baf2:	80e2      	strh	r2, [r4, #6]
 801baf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baf6:	4798      	blx	r3
 801baf8:	4620      	mov	r0, r4
 801bafa:	bd10      	pop	{r4, pc}

0801bafc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bafc:	b530      	push	{r4, r5, lr}
 801bafe:	8083      	strh	r3, [r0, #4]
 801bb00:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bb04:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bb08:	7183      	strb	r3, [r0, #6]
 801bb0a:	79c3      	ldrb	r3, [r0, #7]
 801bb0c:	6101      	str	r1, [r0, #16]
 801bb0e:	f365 0306 	bfi	r3, r5, #0, #7
 801bb12:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bb16:	8282      	strh	r2, [r0, #20]
 801bb18:	f365 13c7 	bfi	r3, r5, #7, #1
 801bb1c:	71c3      	strb	r3, [r0, #7]
 801bb1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801bb22:	7203      	strb	r3, [r0, #8]
 801bb24:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bb28:	7243      	strb	r3, [r0, #9]
 801bb2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bb2e:	8143      	strh	r3, [r0, #10]
 801bb30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bb34:	8183      	strh	r3, [r0, #12]
 801bb36:	4b01      	ldr	r3, [pc, #4]	; (801bb3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801bb38:	6003      	str	r3, [r0, #0]
 801bb3a:	bd30      	pop	{r4, r5, pc}
 801bb3c:	08030430 	.word	0x08030430

0801bb40 <_ZNK8touchgfx9ConstFont4findEt>:
 801bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb42:	6904      	ldr	r4, [r0, #16]
 801bb44:	b3bc      	cbz	r4, 801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb46:	88a3      	ldrh	r3, [r4, #4]
 801bb48:	8a82      	ldrh	r2, [r0, #20]
 801bb4a:	1acb      	subs	r3, r1, r3
 801bb4c:	f102 32ff 	add.w	r2, r2, #4294967295
 801bb50:	d431      	bmi.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb52:	4293      	cmp	r3, r2
 801bb54:	dd0c      	ble.n	801bb70 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bb56:	230e      	movs	r3, #14
 801bb58:	fb03 4302 	mla	r3, r3, r2, r4
 801bb5c:	889b      	ldrh	r3, [r3, #4]
 801bb5e:	1a5b      	subs	r3, r3, r1
 801bb60:	1ad3      	subs	r3, r2, r3
 801bb62:	429a      	cmp	r2, r3
 801bb64:	db27      	blt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	bfbc      	itt	lt
 801bb6a:	2302      	movlt	r3, #2
 801bb6c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bb70:	2500      	movs	r5, #0
 801bb72:	260e      	movs	r6, #14
 801bb74:	4295      	cmp	r5, r2
 801bb76:	dc1e      	bgt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb78:	fb06 4003 	mla	r0, r6, r3, r4
 801bb7c:	8887      	ldrh	r7, [r0, #4]
 801bb7e:	42b9      	cmp	r1, r7
 801bb80:	d01a      	beq.n	801bbb8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801bb82:	d20d      	bcs.n	801bba0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801bb84:	1e5a      	subs	r2, r3, #1
 801bb86:	4295      	cmp	r5, r2
 801bb88:	dc15      	bgt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb8a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bb8e:	1a5b      	subs	r3, r3, r1
 801bb90:	1ad3      	subs	r3, r2, r3
 801bb92:	429a      	cmp	r2, r3
 801bb94:	db0f      	blt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb96:	429d      	cmp	r5, r3
 801bb98:	ddec      	ble.n	801bb74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bb9a:	1953      	adds	r3, r2, r5
 801bb9c:	105b      	asrs	r3, r3, #1
 801bb9e:	e7e9      	b.n	801bb74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bba0:	1c5d      	adds	r5, r3, #1
 801bba2:	42aa      	cmp	r2, r5
 801bba4:	db07      	blt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bba6:	8a43      	ldrh	r3, [r0, #18]
 801bba8:	1acb      	subs	r3, r1, r3
 801bbaa:	442b      	add	r3, r5
 801bbac:	429d      	cmp	r5, r3
 801bbae:	dc02      	bgt.n	801bbb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bbb0:	429a      	cmp	r2, r3
 801bbb2:	dadf      	bge.n	801bb74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bbb4:	e7f1      	b.n	801bb9a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bbba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbbc:	4604      	mov	r4, r0
 801bbbe:	4617      	mov	r7, r2
 801bbc0:	461e      	mov	r6, r3
 801bbc2:	b911      	cbnz	r1, 801bbca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bbc4:	2500      	movs	r5, #0
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbca:	290a      	cmp	r1, #10
 801bbcc:	d0fa      	beq.n	801bbc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bbd2:	4291      	cmp	r1, r2
 801bbd4:	d0f6      	beq.n	801bbc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbd6:	f242 020b 	movw	r2, #8203	; 0x200b
 801bbda:	4291      	cmp	r1, r2
 801bbdc:	d0f2      	beq.n	801bbc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbde:	f7ff ffaf 	bl	801bb40 <_ZNK8touchgfx9ConstFont4findEt>
 801bbe2:	4605      	mov	r5, r0
 801bbe4:	b950      	cbnz	r0, 801bbfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bbe6:	6823      	ldr	r3, [r4, #0]
 801bbe8:	4620      	mov	r0, r4
 801bbea:	691b      	ldr	r3, [r3, #16]
 801bbec:	4798      	blx	r3
 801bbee:	4601      	mov	r1, r0
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	f7ff ffa5 	bl	801bb40 <_ZNK8touchgfx9ConstFont4findEt>
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	2800      	cmp	r0, #0
 801bbfa:	d0e3      	beq.n	801bbc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbfc:	6823      	ldr	r3, [r4, #0]
 801bbfe:	4629      	mov	r1, r5
 801bc00:	4620      	mov	r0, r4
 801bc02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc04:	4798      	blx	r3
 801bc06:	6038      	str	r0, [r7, #0]
 801bc08:	6823      	ldr	r3, [r4, #0]
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc0e:	4798      	blx	r3
 801bc10:	7030      	strb	r0, [r6, #0]
 801bc12:	e7d8      	b.n	801bbc6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bc14 <_ZN8touchgfx4clzuEm>:
 801bc14:	4603      	mov	r3, r0
 801bc16:	b1c8      	cbz	r0, 801bc4c <_ZN8touchgfx4clzuEm+0x38>
 801bc18:	0c02      	lsrs	r2, r0, #16
 801bc1a:	0412      	lsls	r2, r2, #16
 801bc1c:	b9a2      	cbnz	r2, 801bc48 <_ZN8touchgfx4clzuEm+0x34>
 801bc1e:	0403      	lsls	r3, r0, #16
 801bc20:	2010      	movs	r0, #16
 801bc22:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bc26:	bf04      	itt	eq
 801bc28:	021b      	lsleq	r3, r3, #8
 801bc2a:	3008      	addeq	r0, #8
 801bc2c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bc30:	bf04      	itt	eq
 801bc32:	011b      	lsleq	r3, r3, #4
 801bc34:	3004      	addeq	r0, #4
 801bc36:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bc3a:	bf04      	itt	eq
 801bc3c:	009b      	lsleq	r3, r3, #2
 801bc3e:	3002      	addeq	r0, #2
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	db04      	blt.n	801bc4e <_ZN8touchgfx4clzuEm+0x3a>
 801bc44:	3001      	adds	r0, #1
 801bc46:	4770      	bx	lr
 801bc48:	2000      	movs	r0, #0
 801bc4a:	e7ea      	b.n	801bc22 <_ZN8touchgfx4clzuEm+0xe>
 801bc4c:	2020      	movs	r0, #32
 801bc4e:	4770      	bx	lr

0801bc50 <_ZN8touchgfx7muldivuEmmmRm>:
 801bc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc54:	4680      	mov	r8, r0
 801bc56:	460f      	mov	r7, r1
 801bc58:	4615      	mov	r5, r2
 801bc5a:	461e      	mov	r6, r3
 801bc5c:	f7ff ffda 	bl	801bc14 <_ZN8touchgfx4clzuEm>
 801bc60:	b998      	cbnz	r0, 801bc8a <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801bc62:	4608      	mov	r0, r1
 801bc64:	f7ff ffd6 	bl	801bc14 <_ZN8touchgfx4clzuEm>
 801bc68:	2800      	cmp	r0, #0
 801bc6a:	dd08      	ble.n	801bc7e <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801bc6c:	4633      	mov	r3, r6
 801bc6e:	462a      	mov	r2, r5
 801bc70:	4641      	mov	r1, r8
 801bc72:	4638      	mov	r0, r7
 801bc74:	f7ff ffec 	bl	801bc50 <_ZN8touchgfx7muldivuEmmmRm>
 801bc78:	b003      	add	sp, #12
 801bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801bc86:	6033      	str	r3, [r6, #0]
 801bc88:	e7f6      	b.n	801bc78 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bc8a:	fa31 f900 	lsrs.w	r9, r1, r0
 801bc8e:	fb01 f308 	mul.w	r3, r1, r8
 801bc92:	d105      	bne.n	801bca0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801bc94:	fbb3 f0f5 	udiv	r0, r3, r5
 801bc98:	fb05 3510 	mls	r5, r5, r0, r3
 801bc9c:	6035      	str	r5, [r6, #0]
 801bc9e:	e7eb      	b.n	801bc78 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bca0:	2301      	movs	r3, #1
 801bca2:	fa08 fb00 	lsl.w	fp, r8, r0
 801bca6:	462a      	mov	r2, r5
 801bca8:	4641      	mov	r1, r8
 801bcaa:	fa03 f000 	lsl.w	r0, r3, r0
 801bcae:	4633      	mov	r3, r6
 801bcb0:	fbbb faf5 	udiv	sl, fp, r5
 801bcb4:	3801      	subs	r0, #1
 801bcb6:	fb09 f40a 	mul.w	r4, r9, sl
 801bcba:	4038      	ands	r0, r7
 801bcbc:	f7ff ffc8 	bl	801bc50 <_ZN8touchgfx7muldivuEmmmRm>
 801bcc0:	462a      	mov	r2, r5
 801bcc2:	4607      	mov	r7, r0
 801bcc4:	ab01      	add	r3, sp, #4
 801bcc6:	fb05 b11a 	mls	r1, r5, sl, fp
 801bcca:	4648      	mov	r0, r9
 801bccc:	f7ff ffc0 	bl	801bc50 <_ZN8touchgfx7muldivuEmmmRm>
 801bcd0:	9b01      	ldr	r3, [sp, #4]
 801bcd2:	6832      	ldr	r2, [r6, #0]
 801bcd4:	441a      	add	r2, r3
 801bcd6:	fbb2 f3f5 	udiv	r3, r2, r5
 801bcda:	441c      	add	r4, r3
 801bcdc:	fb05 2513 	mls	r5, r5, r3, r2
 801bce0:	443c      	add	r4, r7
 801bce2:	4420      	add	r0, r4
 801bce4:	e7da      	b.n	801bc9c <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801bce6 <_ZN8touchgfx6muldivElllRl>:
 801bce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bce8:	2800      	cmp	r0, #0
 801bcea:	461e      	mov	r6, r3
 801bcec:	bfba      	itte	lt
 801bcee:	4240      	neglt	r0, r0
 801bcf0:	f04f 34ff 	movlt.w	r4, #4294967295
 801bcf4:	2401      	movge	r4, #1
 801bcf6:	2900      	cmp	r1, #0
 801bcf8:	bfbc      	itt	lt
 801bcfa:	4249      	neglt	r1, r1
 801bcfc:	4264      	neglt	r4, r4
 801bcfe:	2a00      	cmp	r2, #0
 801bd00:	bfb6      	itet	lt
 801bd02:	4265      	neglt	r5, r4
 801bd04:	4625      	movge	r5, r4
 801bd06:	4252      	neglt	r2, r2
 801bd08:	4288      	cmp	r0, r1
 801bd0a:	bfc2      	ittt	gt
 801bd0c:	4603      	movgt	r3, r0
 801bd0e:	4608      	movgt	r0, r1
 801bd10:	4619      	movgt	r1, r3
 801bd12:	ab01      	add	r3, sp, #4
 801bd14:	f7ff ff9c 	bl	801bc50 <_ZN8touchgfx7muldivuEmmmRm>
 801bd18:	9b01      	ldr	r3, [sp, #4]
 801bd1a:	4368      	muls	r0, r5
 801bd1c:	435c      	muls	r4, r3
 801bd1e:	6034      	str	r4, [r6, #0]
 801bd20:	b002      	add	sp, #8
 801bd22:	bd70      	pop	{r4, r5, r6, pc}

0801bd24 <_ZN8touchgfx6muldivElll>:
 801bd24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bd26:	4606      	mov	r6, r0
 801bd28:	ab01      	add	r3, sp, #4
 801bd2a:	460d      	mov	r5, r1
 801bd2c:	4614      	mov	r4, r2
 801bd2e:	f7ff ffda 	bl	801bce6 <_ZN8touchgfx6muldivElllRl>
 801bd32:	2e00      	cmp	r6, #0
 801bd34:	db20      	blt.n	801bd78 <_ZN8touchgfx6muldivElll+0x54>
 801bd36:	bf14      	ite	ne
 801bd38:	2301      	movne	r3, #1
 801bd3a:	2300      	moveq	r3, #0
 801bd3c:	2d00      	cmp	r5, #0
 801bd3e:	db1e      	blt.n	801bd7e <_ZN8touchgfx6muldivElll+0x5a>
 801bd40:	bf14      	ite	ne
 801bd42:	2201      	movne	r2, #1
 801bd44:	2200      	moveq	r2, #0
 801bd46:	2c00      	cmp	r4, #0
 801bd48:	fb03 f202 	mul.w	r2, r3, r2
 801bd4c:	db1a      	blt.n	801bd84 <_ZN8touchgfx6muldivElll+0x60>
 801bd4e:	bf14      	ite	ne
 801bd50:	2301      	movne	r3, #1
 801bd52:	2300      	moveq	r3, #0
 801bd54:	4353      	muls	r3, r2
 801bd56:	2b01      	cmp	r3, #1
 801bd58:	d117      	bne.n	801bd8a <_ZN8touchgfx6muldivElll+0x66>
 801bd5a:	2c00      	cmp	r4, #0
 801bd5c:	9b01      	ldr	r3, [sp, #4]
 801bd5e:	bfb8      	it	lt
 801bd60:	4264      	neglt	r4, r4
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	f104 0401 	add.w	r4, r4, #1
 801bd68:	bfb8      	it	lt
 801bd6a:	425b      	neglt	r3, r3
 801bd6c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bd70:	db00      	blt.n	801bd74 <_ZN8touchgfx6muldivElll+0x50>
 801bd72:	3001      	adds	r0, #1
 801bd74:	b002      	add	sp, #8
 801bd76:	bd70      	pop	{r4, r5, r6, pc}
 801bd78:	f04f 33ff 	mov.w	r3, #4294967295
 801bd7c:	e7de      	b.n	801bd3c <_ZN8touchgfx6muldivElll+0x18>
 801bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 801bd82:	e7e0      	b.n	801bd46 <_ZN8touchgfx6muldivElll+0x22>
 801bd84:	f04f 33ff 	mov.w	r3, #4294967295
 801bd88:	e7e4      	b.n	801bd54 <_ZN8touchgfx6muldivElll+0x30>
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	d1f2      	bne.n	801bd74 <_ZN8touchgfx6muldivElll+0x50>
 801bd8e:	9b01      	ldr	r3, [sp, #4]
 801bd90:	2c00      	cmp	r4, #0
 801bd92:	bfb8      	it	lt
 801bd94:	4264      	neglt	r4, r4
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	bfb8      	it	lt
 801bd9a:	425b      	neglt	r3, r3
 801bd9c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bda0:	bfc8      	it	gt
 801bda2:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801bda6:	e7e5      	b.n	801bd74 <_ZN8touchgfx6muldivElll+0x50>

0801bda8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801bda8:	2000      	movs	r0, #0
 801bdaa:	4770      	bx	lr

0801bdac <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801bdac:	2001      	movs	r0, #1
 801bdae:	4770      	bx	lr

0801bdb0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801bdb0:	2002      	movs	r0, #2
 801bdb2:	4770      	bx	lr

0801bdb4 <_ZN8touchgfx12GestureEventD1Ev>:
 801bdb4:	4770      	bx	lr

0801bdb6 <_ZN8touchgfx9DragEventD1Ev>:
 801bdb6:	4770      	bx	lr

0801bdb8 <_ZN8touchgfx10ClickEventD1Ev>:
 801bdb8:	4770      	bx	lr

0801bdba <_ZN8touchgfx10ClickEventD0Ev>:
 801bdba:	b510      	push	{r4, lr}
 801bdbc:	4604      	mov	r4, r0
 801bdbe:	210c      	movs	r1, #12
 801bdc0:	f00d fc74 	bl	80296ac <_ZdlPvj>
 801bdc4:	4620      	mov	r0, r4
 801bdc6:	bd10      	pop	{r4, pc}

0801bdc8 <_ZN8touchgfx9DragEventD0Ev>:
 801bdc8:	b510      	push	{r4, lr}
 801bdca:	4604      	mov	r4, r0
 801bdcc:	2110      	movs	r1, #16
 801bdce:	f00d fc6d 	bl	80296ac <_ZdlPvj>
 801bdd2:	4620      	mov	r0, r4
 801bdd4:	bd10      	pop	{r4, pc}

0801bdd6 <_ZN8touchgfx12GestureEventD0Ev>:
 801bdd6:	b510      	push	{r4, lr}
 801bdd8:	4604      	mov	r4, r0
 801bdda:	210c      	movs	r1, #12
 801bddc:	f00d fc66 	bl	80296ac <_ZdlPvj>
 801bde0:	4620      	mov	r0, r4
 801bde2:	bd10      	pop	{r4, pc}

0801bde4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bde4:	b530      	push	{r4, r5, lr}
 801bde6:	460d      	mov	r5, r1
 801bde8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bdea:	b087      	sub	sp, #28
 801bdec:	4604      	mov	r4, r0
 801bdee:	b301      	cbz	r1, 801be32 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bdf0:	a801      	add	r0, sp, #4
 801bdf2:	f7ff fe71 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bdf6:	892a      	ldrh	r2, [r5, #8]
 801bdf8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bdfc:	7928      	ldrb	r0, [r5, #4]
 801bdfe:	1ad2      	subs	r2, r2, r3
 801be00:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801be02:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801be06:	441a      	add	r2, r3
 801be08:	896b      	ldrh	r3, [r5, #10]
 801be0a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801be0e:	f88d 0010 	strb.w	r0, [sp, #16]
 801be12:	1b5b      	subs	r3, r3, r5
 801be14:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801be16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801be18:	442b      	add	r3, r5
 801be1a:	4d07      	ldr	r5, [pc, #28]	; (801be38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801be1c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801be20:	a903      	add	r1, sp, #12
 801be22:	9503      	str	r5, [sp, #12]
 801be24:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be28:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be2c:	6803      	ldr	r3, [r0, #0]
 801be2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be30:	4798      	blx	r3
 801be32:	b007      	add	sp, #28
 801be34:	bd30      	pop	{r4, r5, pc}
 801be36:	bf00      	nop
 801be38:	080304b0 	.word	0x080304b0

0801be3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801be42:	b08a      	sub	sp, #40	; 0x28
 801be44:	4604      	mov	r4, r0
 801be46:	460d      	mov	r5, r1
 801be48:	b113      	cbz	r3, 801be50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801be4a:	790b      	ldrb	r3, [r1, #4]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d044      	beq.n	801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801be50:	f104 0804 	add.w	r8, r4, #4
 801be54:	a803      	add	r0, sp, #12
 801be56:	4641      	mov	r1, r8
 801be58:	f7ff fe3e 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be5c:	792b      	ldrb	r3, [r5, #4]
 801be5e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801be62:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801be66:	b983      	cbnz	r3, 801be8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801be68:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801be6c:	892a      	ldrh	r2, [r5, #8]
 801be6e:	88e9      	ldrh	r1, [r5, #6]
 801be70:	4640      	mov	r0, r8
 801be72:	1b92      	subs	r2, r2, r6
 801be74:	9301      	str	r3, [sp, #4]
 801be76:	1bc9      	subs	r1, r1, r7
 801be78:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801be7c:	b212      	sxth	r2, r2
 801be7e:	9300      	str	r3, [sp, #0]
 801be80:	b209      	sxth	r1, r1
 801be82:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801be86:	f7f9 ffab 	bl	8015de0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801be8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801be8c:	b329      	cbz	r1, 801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801be8e:	a805      	add	r0, sp, #20
 801be90:	f7ff fe22 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801be98:	792b      	ldrb	r3, [r5, #4]
 801be9a:	a907      	add	r1, sp, #28
 801be9c:	1abf      	subs	r7, r7, r2
 801be9e:	88ea      	ldrh	r2, [r5, #6]
 801bea0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bea2:	4417      	add	r7, r2
 801bea4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801bea6:	f88d 3020 	strb.w	r3, [sp, #32]
 801beaa:	4417      	add	r7, r2
 801beac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801beb0:	1ab6      	subs	r6, r6, r2
 801beb2:	892a      	ldrh	r2, [r5, #8]
 801beb4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801beb8:	4416      	add	r6, r2
 801beba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bebc:	4416      	add	r6, r2
 801bebe:	4a08      	ldr	r2, [pc, #32]	; (801bee0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801bec0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801bec4:	2600      	movs	r6, #0
 801bec6:	9207      	str	r2, [sp, #28]
 801bec8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801becc:	6803      	ldr	r3, [r0, #0]
 801bece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bed0:	4798      	blx	r3
 801bed2:	792b      	ldrb	r3, [r5, #4]
 801bed4:	b10b      	cbz	r3, 801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bed6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801beda:	b00a      	add	sp, #40	; 0x28
 801bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bee0:	08030488 	.word	0x08030488

0801bee4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bee8:	460c      	mov	r4, r1
 801beea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801beec:	b088      	sub	sp, #32
 801beee:	4605      	mov	r5, r0
 801bef0:	2900      	cmp	r1, #0
 801bef2:	d06d      	beq.n	801bfd0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801bef4:	4668      	mov	r0, sp
 801bef6:	f7ff fdef 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801befa:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801befc:	88e3      	ldrh	r3, [r4, #6]
 801befe:	f9bd 8000 	ldrsh.w	r8, [sp]
 801bf02:	440b      	add	r3, r1
 801bf04:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801bf08:	b21b      	sxth	r3, r3
 801bf0a:	4543      	cmp	r3, r8
 801bf0c:	db31      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf0e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801bf12:	44c4      	add	ip, r8
 801bf14:	fa0f fc8c 	sxth.w	ip, ip
 801bf18:	4563      	cmp	r3, ip
 801bf1a:	da2a      	bge.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf1c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801bf1e:	8926      	ldrh	r6, [r4, #8]
 801bf20:	4416      	add	r6, r2
 801bf22:	b236      	sxth	r6, r6
 801bf24:	42be      	cmp	r6, r7
 801bf26:	db24      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801bf2c:	4438      	add	r0, r7
 801bf2e:	b200      	sxth	r0, r0
 801bf30:	4286      	cmp	r6, r0
 801bf32:	da1e      	bge.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf34:	8963      	ldrh	r3, [r4, #10]
 801bf36:	4419      	add	r1, r3
 801bf38:	b209      	sxth	r1, r1
 801bf3a:	4541      	cmp	r1, r8
 801bf3c:	db08      	blt.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf3e:	4561      	cmp	r1, ip
 801bf40:	da06      	bge.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf42:	89a3      	ldrh	r3, [r4, #12]
 801bf44:	441a      	add	r2, r3
 801bf46:	b212      	sxth	r2, r2
 801bf48:	42ba      	cmp	r2, r7
 801bf4a:	db01      	blt.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf4c:	4282      	cmp	r2, r0
 801bf4e:	db10      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf50:	4b21      	ldr	r3, [pc, #132]	; (801bfd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801bf52:	a904      	add	r1, sp, #16
 801bf54:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bf56:	9304      	str	r3, [sp, #16]
 801bf58:	2302      	movs	r3, #2
 801bf5a:	f88d 3014 	strb.w	r3, [sp, #20]
 801bf5e:	2300      	movs	r3, #0
 801bf60:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf64:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bf68:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bf6c:	6803      	ldr	r3, [r0, #0]
 801bf6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf70:	4798      	blx	r3
 801bf72:	1d29      	adds	r1, r5, #4
 801bf74:	a802      	add	r0, sp, #8
 801bf76:	f7ff fdaf 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bf7e:	88e0      	ldrh	r0, [r4, #6]
 801bf80:	eba3 0808 	sub.w	r8, r3, r8
 801bf84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bf88:	7921      	ldrb	r1, [r4, #4]
 801bf8a:	fa1f f888 	uxth.w	r8, r8
 801bf8e:	1bdf      	subs	r7, r3, r7
 801bf90:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bf94:	b2bb      	uxth	r3, r7
 801bf96:	4440      	add	r0, r8
 801bf98:	8922      	ldrh	r2, [r4, #8]
 801bf9a:	8967      	ldrh	r7, [r4, #10]
 801bf9c:	4460      	add	r0, ip
 801bf9e:	89a4      	ldrh	r4, [r4, #12]
 801bfa0:	441a      	add	r2, r3
 801bfa2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bfa4:	44b8      	add	r8, r7
 801bfa6:	4423      	add	r3, r4
 801bfa8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bfac:	4432      	add	r2, r6
 801bfae:	44e0      	add	r8, ip
 801bfb0:	4433      	add	r3, r6
 801bfb2:	4c0a      	ldr	r4, [pc, #40]	; (801bfdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801bfb4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bfb6:	f88d 1014 	strb.w	r1, [sp, #20]
 801bfba:	a904      	add	r1, sp, #16
 801bfbc:	9404      	str	r4, [sp, #16]
 801bfbe:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bfc2:	f8ad 801a 	strh.w	r8, [sp, #26]
 801bfc6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bfca:	6803      	ldr	r3, [r0, #0]
 801bfcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bfce:	4798      	blx	r3
 801bfd0:	b008      	add	sp, #32
 801bfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd6:	bf00      	nop
 801bfd8:	08030488 	.word	0x08030488
 801bfdc:	0803049c 	.word	0x0803049c

0801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801bfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801bfe8:	3201      	adds	r2, #1
 801bfea:	d112      	bne.n	801c012 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801bfec:	2500      	movs	r5, #0
 801bfee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bff2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bff6:	6803      	ldr	r3, [r0, #0]
 801bff8:	9500      	str	r5, [sp, #0]
 801bffa:	466d      	mov	r5, sp
 801bffc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c000:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c004:	4629      	mov	r1, r5
 801c006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c008:	4798      	blx	r3
 801c00a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c00e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c012:	4620      	mov	r0, r4
 801c014:	b003      	add	sp, #12
 801c016:	bd30      	pop	{r4, r5, pc}

0801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c018:	b513      	push	{r0, r1, r4, lr}
 801c01a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c01e:	4604      	mov	r4, r0
 801c020:	3301      	adds	r3, #1
 801c022:	d109      	bne.n	801c038 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c024:	4601      	mov	r1, r0
 801c026:	4668      	mov	r0, sp
 801c028:	f7ff fd56 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c02c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c030:	8423      	strh	r3, [r4, #32]
 801c032:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c036:	8463      	strh	r3, [r4, #34]	; 0x22
 801c038:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c03c:	b002      	add	sp, #8
 801c03e:	bd10      	pop	{r4, pc}

0801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c040:	b513      	push	{r0, r1, r4, lr}
 801c042:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c046:	4604      	mov	r4, r0
 801c048:	3301      	adds	r3, #1
 801c04a:	d109      	bne.n	801c060 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c04c:	4601      	mov	r1, r0
 801c04e:	4668      	mov	r0, sp
 801c050:	f7ff fd42 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c054:	f8bd 3000 	ldrh.w	r3, [sp]
 801c058:	8423      	strh	r3, [r4, #32]
 801c05a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c05e:	8463      	strh	r3, [r4, #34]	; 0x22
 801c060:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c064:	b002      	add	sp, #8
 801c066:	bd10      	pop	{r4, pc}

0801c068 <_ZN8touchgfx6ScreenC1Ev>:
 801c068:	b570      	push	{r4, r5, r6, lr}
 801c06a:	4b17      	ldr	r3, [pc, #92]	; (801c0c8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c06c:	4605      	mov	r5, r0
 801c06e:	4a17      	ldr	r2, [pc, #92]	; (801c0cc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c070:	2101      	movs	r1, #1
 801c072:	f845 3b04 	str.w	r3, [r5], #4
 801c076:	2300      	movs	r3, #0
 801c078:	6042      	str	r2, [r0, #4]
 801c07a:	4604      	mov	r4, r0
 801c07c:	8103      	strh	r3, [r0, #8]
 801c07e:	8143      	strh	r3, [r0, #10]
 801c080:	8183      	strh	r3, [r0, #12]
 801c082:	81c3      	strh	r3, [r0, #14]
 801c084:	8203      	strh	r3, [r0, #16]
 801c086:	8243      	strh	r3, [r0, #18]
 801c088:	8283      	strh	r3, [r0, #20]
 801c08a:	82c3      	strh	r3, [r0, #22]
 801c08c:	6203      	str	r3, [r0, #32]
 801c08e:	8483      	strh	r3, [r0, #36]	; 0x24
 801c090:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c092:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c096:	6343      	str	r3, [r0, #52]	; 0x34
 801c098:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c09c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c0a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c0a4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c0a8:	4b09      	ldr	r3, [pc, #36]	; (801c0d0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c0b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c0b2:	4a08      	ldr	r2, [pc, #32]	; (801c0d4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c0b4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c0b8:	4798      	blx	r3
 801c0ba:	6863      	ldr	r3, [r4, #4]
 801c0bc:	4628      	mov	r0, r5
 801c0be:	4631      	mov	r1, r6
 801c0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c0c2:	4798      	blx	r3
 801c0c4:	4620      	mov	r0, r4
 801c0c6:	bd70      	pop	{r4, r5, r6, pc}
 801c0c8:	080304c4 	.word	0x080304c4
 801c0cc:	0802fcf0 	.word	0x0802fcf0
 801c0d0:	2003c262 	.word	0x2003c262
 801c0d4:	2003c260 	.word	0x2003c260

0801c0d8 <_ZN8touchgfx6Screen4drawEv>:
 801c0d8:	4b09      	ldr	r3, [pc, #36]	; (801c100 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c0da:	b507      	push	{r0, r1, r2, lr}
 801c0dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	4b08      	ldr	r3, [pc, #32]	; (801c104 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c0e4:	9100      	str	r1, [sp, #0]
 801c0e6:	4669      	mov	r1, sp
 801c0e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c0f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c0f4:	6803      	ldr	r3, [r0, #0]
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	4798      	blx	r3
 801c0fa:	b003      	add	sp, #12
 801c0fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801c100:	2003c260 	.word	0x2003c260
 801c104:	2003c262 	.word	0x2003c262

0801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c110:	b089      	sub	sp, #36	; 0x24
 801c112:	4680      	mov	r8, r0
 801c114:	460c      	mov	r4, r1
 801c116:	2b00      	cmp	r3, #0
 801c118:	4615      	mov	r5, r2
 801c11a:	dd0e      	ble.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c11c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c120:	2b00      	cmp	r3, #0
 801c122:	dd0a      	ble.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c124:	4628      	mov	r0, r5
 801c126:	f7ff ff5b 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c12a:	4621      	mov	r1, r4
 801c12c:	f7fe fbc2 	bl	801a8b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c130:	69eb      	ldr	r3, [r5, #28]
 801c132:	b928      	cbnz	r0, 801c140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c134:	461d      	mov	r5, r3
 801c136:	2b00      	cmp	r3, #0
 801c138:	d1f4      	bne.n	801c124 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c13a:	b009      	add	sp, #36	; 0x24
 801c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c140:	ae04      	add	r6, sp, #16
 801c142:	2b00      	cmp	r3, #0
 801c144:	f000 80b5 	beq.w	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c148:	682b      	ldr	r3, [r5, #0]
 801c14a:	4629      	mov	r1, r5
 801c14c:	a802      	add	r0, sp, #8
 801c14e:	68db      	ldr	r3, [r3, #12]
 801c150:	4798      	blx	r3
 801c152:	4628      	mov	r0, r5
 801c154:	f7ff ff60 	bl	801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c158:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c15c:	4407      	add	r7, r0
 801c15e:	4628      	mov	r0, r5
 801c160:	f7ff ff6e 	bl	801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c164:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c168:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c16c:	b23f      	sxth	r7, r7
 801c16e:	4418      	add	r0, r3
 801c170:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c174:	4621      	mov	r1, r4
 801c176:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c17a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c17e:	4630      	mov	r0, r6
 801c180:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c184:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c188:	f7f9 ff0c 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801c18c:	4628      	mov	r0, r5
 801c18e:	f7ff ff27 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c192:	ab06      	add	r3, sp, #24
 801c194:	4602      	mov	r2, r0
 801c196:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c19a:	e883 0003 	stmia.w	r3, {r0, r1}
 801c19e:	4611      	mov	r1, r2
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f7f9 feff 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801c1a6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c1aa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c1ae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c1b2:	4299      	cmp	r1, r3
 801c1b4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c1b8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c1bc:	d10b      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c1c2:	4552      	cmp	r2, sl
 801c1c4:	d107      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1c6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c1ca:	455a      	cmp	r2, fp
 801c1cc:	d103      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1ce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c1d2:	454a      	cmp	r2, r9
 801c1d4:	d06d      	beq.n	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c1d6:	f1bb 0f00 	cmp.w	fp, #0
 801c1da:	dd65      	ble.n	801c2a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c1dc:	f1b9 0f00 	cmp.w	r9, #0
 801c1e0:	dd62      	ble.n	801c2a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c1e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c1e6:	fa1f f08a 	uxth.w	r0, sl
 801c1ea:	4552      	cmp	r2, sl
 801c1ec:	9000      	str	r0, [sp, #0]
 801c1ee:	da12      	bge.n	801c216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c1f0:	9301      	str	r3, [sp, #4]
 801c1f2:	9b00      	ldr	r3, [sp, #0]
 801c1f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c1f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c1fc:	1a9a      	subs	r2, r3, r2
 801c1fe:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c202:	4631      	mov	r1, r6
 801c204:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c208:	4640      	mov	r0, r8
 801c20a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c20e:	69ea      	ldr	r2, [r5, #28]
 801c210:	f7ff ff7a 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c214:	9b01      	ldr	r3, [sp, #4]
 801c216:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c21a:	b29f      	uxth	r7, r3
 801c21c:	429a      	cmp	r2, r3
 801c21e:	da0d      	bge.n	801c23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c220:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c224:	1aba      	subs	r2, r7, r2
 801c226:	f8ad a012 	strh.w	sl, [sp, #18]
 801c22a:	4631      	mov	r1, r6
 801c22c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c230:	4640      	mov	r0, r8
 801c232:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c236:	69ea      	ldr	r2, [r5, #28]
 801c238:	f7ff ff66 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c23c:	8822      	ldrh	r2, [r4, #0]
 801c23e:	445f      	add	r7, fp
 801c240:	88a3      	ldrh	r3, [r4, #4]
 801c242:	b2bf      	uxth	r7, r7
 801c244:	4413      	add	r3, r2
 801c246:	b23a      	sxth	r2, r7
 801c248:	b29b      	uxth	r3, r3
 801c24a:	b219      	sxth	r1, r3
 801c24c:	4291      	cmp	r1, r2
 801c24e:	dd0d      	ble.n	801c26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c250:	1bdb      	subs	r3, r3, r7
 801c252:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c256:	f8ad a012 	strh.w	sl, [sp, #18]
 801c25a:	4631      	mov	r1, r6
 801c25c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c260:	4640      	mov	r0, r8
 801c262:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c266:	69ea      	ldr	r2, [r5, #28]
 801c268:	f7ff ff4e 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c26c:	88e2      	ldrh	r2, [r4, #6]
 801c26e:	8863      	ldrh	r3, [r4, #2]
 801c270:	4413      	add	r3, r2
 801c272:	9a00      	ldr	r2, [sp, #0]
 801c274:	444a      	add	r2, r9
 801c276:	b29b      	uxth	r3, r3
 801c278:	fa1f f982 	uxth.w	r9, r2
 801c27c:	b219      	sxth	r1, r3
 801c27e:	fa0f f289 	sxth.w	r2, r9
 801c282:	428a      	cmp	r2, r1
 801c284:	da15      	bge.n	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c286:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c28a:	eba3 0309 	sub.w	r3, r3, r9
 801c28e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c292:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c296:	4631      	mov	r1, r6
 801c298:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c29c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c2a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2a4:	69ea      	ldr	r2, [r5, #28]
 801c2a6:	e001      	b.n	801c2ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c2a8:	69ea      	ldr	r2, [r5, #28]
 801c2aa:	4621      	mov	r1, r4
 801c2ac:	4640      	mov	r0, r8
 801c2ae:	f7ff ff2b 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7ff fe94 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2b8:	6861      	ldr	r1, [r4, #4]
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	4633      	mov	r3, r6
 801c2be:	6820      	ldr	r0, [r4, #0]
 801c2c0:	c303      	stmia	r3!, {r0, r1}
 801c2c2:	4611      	mov	r1, r2
 801c2c4:	4630      	mov	r0, r6
 801c2c6:	f7f9 fe6d 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801c2ca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	f77f af33 	ble.w	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2d4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	f77f af2e 	ble.w	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2de:	4628      	mov	r0, r5
 801c2e0:	f7ff fe9a 	bl	801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c2e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c2e8:	1a18      	subs	r0, r3, r0
 801c2ea:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c2ee:	4628      	mov	r0, r5
 801c2f0:	f7ff fea6 	bl	801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c2f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c2f8:	4631      	mov	r1, r6
 801c2fa:	1a18      	subs	r0, r3, r0
 801c2fc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c300:	4628      	mov	r0, r5
 801c302:	682b      	ldr	r3, [r5, #0]
 801c304:	689b      	ldr	r3, [r3, #8]
 801c306:	4798      	blx	r3
 801c308:	e717      	b.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c30a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c30a:	b570      	push	{r4, r5, r6, lr}
 801c30c:	1d06      	adds	r6, r0, #4
 801c30e:	b086      	sub	sp, #24
 801c310:	460c      	mov	r4, r1
 801c312:	2300      	movs	r3, #0
 801c314:	4631      	mov	r1, r6
 801c316:	4605      	mov	r5, r0
 801c318:	a802      	add	r0, sp, #8
 801c31a:	9301      	str	r3, [sp, #4]
 801c31c:	f7ff fbdc 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c320:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c324:	8822      	ldrh	r2, [r4, #0]
 801c326:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c32a:	1ad2      	subs	r2, r2, r3
 801c32c:	8863      	ldrh	r3, [r4, #2]
 801c32e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c332:	1a5b      	subs	r3, r3, r1
 801c334:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c338:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c33c:	aa01      	add	r2, sp, #4
 801c33e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c342:	4630      	mov	r0, r6
 801c344:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c348:	a904      	add	r1, sp, #16
 801c34a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c34e:	f7f9 ff01 	bl	8016154 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c352:	9a01      	ldr	r2, [sp, #4]
 801c354:	b11a      	cbz	r2, 801c35e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c356:	4621      	mov	r1, r4
 801c358:	4628      	mov	r0, r5
 801c35a:	f7ff fed5 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c35e:	b006      	add	sp, #24
 801c360:	bd70      	pop	{r4, r5, r6, pc}

0801c362 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c362:	4602      	mov	r2, r0
 801c364:	b530      	push	{r4, r5, lr}
 801c366:	4604      	mov	r4, r0
 801c368:	b085      	sub	sp, #20
 801c36a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c36e:	460d      	mov	r5, r1
 801c370:	466b      	mov	r3, sp
 801c372:	6851      	ldr	r1, [r2, #4]
 801c374:	c303      	stmia	r3!, {r0, r1}
 801c376:	4629      	mov	r1, r5
 801c378:	4668      	mov	r0, sp
 801c37a:	f7f9 fe13 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 801c37e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c382:	b12b      	cbz	r3, 801c390 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c384:	4669      	mov	r1, sp
 801c386:	4620      	mov	r0, r4
 801c388:	f7ff ffbf 	bl	801c30a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c38c:	b005      	add	sp, #20
 801c38e:	bd30      	pop	{r4, r5, pc}
 801c390:	3404      	adds	r4, #4
 801c392:	a802      	add	r0, sp, #8
 801c394:	4621      	mov	r1, r4
 801c396:	f7ff fb9f 	bl	801bad8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c39a:	f8bd 3000 	ldrh.w	r3, [sp]
 801c39e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c3a2:	4669      	mov	r1, sp
 801c3a4:	4620      	mov	r0, r4
 801c3a6:	1a9b      	subs	r3, r3, r2
 801c3a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c3ac:	f8ad 3000 	strh.w	r3, [sp]
 801c3b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c3b4:	1a9b      	subs	r3, r3, r2
 801c3b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c3ba:	f7f9 fe92 	bl	80160e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c3be:	e7e5      	b.n	801c38c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c3c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c3c0:	460b      	mov	r3, r1
 801c3c2:	680a      	ldr	r2, [r1, #0]
 801c3c4:	1d01      	adds	r1, r0, #4
 801c3c6:	6992      	ldr	r2, [r2, #24]
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	4710      	bx	r2

0801c3cc <_ZN8touchgfx12TextProviderC1Ev>:
 801c3cc:	b538      	push	{r3, r4, r5, lr}
 801c3ce:	2500      	movs	r5, #0
 801c3d0:	2302      	movs	r3, #2
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	220e      	movs	r2, #14
 801c3d6:	7403      	strb	r3, [r0, #16]
 801c3d8:	4629      	mov	r1, r5
 801c3da:	6145      	str	r5, [r0, #20]
 801c3dc:	7605      	strb	r5, [r0, #24]
 801c3de:	83c5      	strh	r5, [r0, #30]
 801c3e0:	8405      	strh	r5, [r0, #32]
 801c3e2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c3e4:	8705      	strh	r5, [r0, #56]	; 0x38
 801c3e6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c3e8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c3ec:	e9c0 5500 	strd	r5, r5, [r0]
 801c3f0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c3f4:	304c      	adds	r0, #76	; 0x4c
 801c3f6:	f00d fa8f 	bl	8029918 <memset>
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c402:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c406:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c40a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c40e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c412:	f7f5 fafb 	bl	8011a0c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c416:	4620      	mov	r0, r4
 801c418:	bd38      	pop	{r3, r4, r5, pc}

0801c41a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801c41a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c41c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c420:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801c422:	fab0 f080 	clz	r0, r0
 801c426:	0940      	lsrs	r0, r0, #5
 801c428:	4770      	bx	lr

0801c42a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c42a:	b530      	push	{r4, r5, lr}
 801c42c:	2500      	movs	r5, #0
 801c42e:	2401      	movs	r4, #1
 801c430:	6843      	ldr	r3, [r0, #4]
 801c432:	b913      	cbnz	r3, 801c43a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c434:	6803      	ldr	r3, [r0, #0]
 801c436:	b313      	cbz	r3, 801c47e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c438:	6043      	str	r3, [r0, #4]
 801c43a:	7e03      	ldrb	r3, [r0, #24]
 801c43c:	b143      	cbz	r3, 801c450 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c43e:	6943      	ldr	r3, [r0, #20]
 801c440:	b12b      	cbz	r3, 801c44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c442:	881a      	ldrh	r2, [r3, #0]
 801c444:	b11a      	cbz	r2, 801c44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c446:	1c9a      	adds	r2, r3, #2
 801c448:	6142      	str	r2, [r0, #20]
 801c44a:	8818      	ldrh	r0, [r3, #0]
 801c44c:	bd30      	pop	{r4, r5, pc}
 801c44e:	7605      	strb	r5, [r0, #24]
 801c450:	6843      	ldr	r3, [r0, #4]
 801c452:	8819      	ldrh	r1, [r3, #0]
 801c454:	b199      	cbz	r1, 801c47e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c456:	1c9a      	adds	r2, r3, #2
 801c458:	2902      	cmp	r1, #2
 801c45a:	6042      	str	r2, [r0, #4]
 801c45c:	d1f5      	bne.n	801c44a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c45e:	7c03      	ldrb	r3, [r0, #16]
 801c460:	2b01      	cmp	r3, #1
 801c462:	d8e5      	bhi.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c464:	1c5a      	adds	r2, r3, #1
 801c466:	3302      	adds	r3, #2
 801c468:	7402      	strb	r2, [r0, #16]
 801c46a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c46e:	6143      	str	r3, [r0, #20]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d0dd      	beq.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c474:	881b      	ldrh	r3, [r3, #0]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d0da      	beq.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c47a:	7604      	strb	r4, [r0, #24]
 801c47c:	e7d8      	b.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c47e:	2000      	movs	r0, #0
 801c480:	e7e4      	b.n	801c44c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c482:	6001      	str	r1, [r0, #0]
 801c484:	2100      	movs	r1, #0
 801c486:	b430      	push	{r4, r5}
 801c488:	6041      	str	r1, [r0, #4]
 801c48a:	6815      	ldr	r5, [r2, #0]
 801c48c:	6085      	str	r5, [r0, #8]
 801c48e:	6852      	ldr	r2, [r2, #4]
 801c490:	6443      	str	r3, [r0, #68]	; 0x44
 801c492:	9b02      	ldr	r3, [sp, #8]
 801c494:	60c2      	str	r2, [r0, #12]
 801c496:	7401      	strb	r1, [r0, #16]
 801c498:	6141      	str	r1, [r0, #20]
 801c49a:	7601      	strb	r1, [r0, #24]
 801c49c:	8701      	strh	r1, [r0, #56]	; 0x38
 801c49e:	8401      	strh	r1, [r0, #32]
 801c4a0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c4a4:	6483      	str	r3, [r0, #72]	; 0x48
 801c4a6:	bc30      	pop	{r4, r5}
 801c4a8:	f7f5 bab0 	b.w	8011a0c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801c4ac:	b408      	push	{r3}
 801c4ae:	b510      	push	{r4, lr}
 801c4b0:	b085      	sub	sp, #20
 801c4b2:	ac07      	add	r4, sp, #28
 801c4b4:	f854 3b04 	ldr.w	r3, [r4], #4
 801c4b8:	9300      	str	r3, [sp, #0]
 801c4ba:	4613      	mov	r3, r2
 801c4bc:	4622      	mov	r2, r4
 801c4be:	9403      	str	r4, [sp, #12]
 801c4c0:	f7ff ffdf 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c4c4:	b005      	add	sp, #20
 801c4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4ca:	b001      	add	sp, #4
 801c4cc:	4770      	bx	lr

0801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4d0:	4605      	mov	r5, r0
 801c4d2:	4608      	mov	r0, r1
 801c4d4:	b1f1      	cbz	r1, 801c514 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c4d6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801c4da:	460b      	mov	r3, r1
 801c4dc:	f101 0708 	add.w	r7, r1, #8
 801c4e0:	4622      	mov	r2, r4
 801c4e2:	6818      	ldr	r0, [r3, #0]
 801c4e4:	3308      	adds	r3, #8
 801c4e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c4ea:	4626      	mov	r6, r4
 801c4ec:	42bb      	cmp	r3, r7
 801c4ee:	c603      	stmia	r6!, {r0, r1}
 801c4f0:	4634      	mov	r4, r6
 801c4f2:	d1f6      	bne.n	801c4e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c4f4:	6818      	ldr	r0, [r3, #0]
 801c4f6:	6030      	str	r0, [r6, #0]
 801c4f8:	4610      	mov	r0, r2
 801c4fa:	889b      	ldrh	r3, [r3, #4]
 801c4fc:	80b3      	strh	r3, [r6, #4]
 801c4fe:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801c502:	015b      	lsls	r3, r3, #5
 801c504:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c508:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801c50c:	430b      	orrs	r3, r1
 801c50e:	425b      	negs	r3, r3
 801c510:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c514:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c516 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c516:	b538      	push	{r3, r4, r5, lr}
 801c518:	460c      	mov	r4, r1
 801c51a:	6811      	ldr	r1, [r2, #0]
 801c51c:	4610      	mov	r0, r2
 801c51e:	68cd      	ldr	r5, [r1, #12]
 801c520:	4619      	mov	r1, r3
 801c522:	47a8      	blx	r5
 801c524:	2800      	cmp	r0, #0
 801c526:	bf08      	it	eq
 801c528:	4620      	moveq	r0, r4
 801c52a:	bd38      	pop	{r3, r4, r5, pc}

0801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c52e:	4604      	mov	r4, r0
 801c530:	4615      	mov	r5, r2
 801c532:	4608      	mov	r0, r1
 801c534:	b93a      	cbnz	r2, 801c546 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c536:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c53a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801c53e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801c542:	4628      	mov	r0, r5
 801c544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c546:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c54a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801c54e:	8893      	ldrh	r3, [r2, #4]
 801c550:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c554:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c558:	79ee      	ldrb	r6, [r5, #7]
 801c55a:	4316      	orrs	r6, r2
 801c55c:	19da      	adds	r2, r3, r7
 801c55e:	b291      	uxth	r1, r2
 801c560:	b2b7      	uxth	r7, r6
 801c562:	291d      	cmp	r1, #29
 801c564:	d87b      	bhi.n	801c65e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c566:	2201      	movs	r2, #1
 801c568:	10f6      	asrs	r6, r6, #3
 801c56a:	408a      	lsls	r2, r1
 801c56c:	4974      	ldr	r1, [pc, #464]	; (801c740 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801c56e:	420a      	tst	r2, r1
 801c570:	d12e      	bne.n	801c5d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801c572:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c576:	d072      	beq.n	801c65e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c578:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801c57c:	462b      	mov	r3, r5
 801c57e:	f105 0e08 	add.w	lr, r5, #8
 801c582:	4615      	mov	r5, r2
 801c584:	6818      	ldr	r0, [r3, #0]
 801c586:	3308      	adds	r3, #8
 801c588:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c58c:	4694      	mov	ip, r2
 801c58e:	4573      	cmp	r3, lr
 801c590:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c594:	4662      	mov	r2, ip
 801c596:	d1f5      	bne.n	801c584 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801c598:	6818      	ldr	r0, [r3, #0]
 801c59a:	f8cc 0000 	str.w	r0, [ip]
 801c59e:	889b      	ldrh	r3, [r3, #4]
 801c5a0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c5a4:	b2b3      	uxth	r3, r6
 801c5a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801c5aa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801c5ae:	1aca      	subs	r2, r1, r3
 801c5b0:	1bcf      	subs	r7, r1, r7
 801c5b2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c5b6:	b292      	uxth	r2, r2
 801c5b8:	1afb      	subs	r3, r7, r3
 801c5ba:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801c5be:	10d2      	asrs	r2, r2, #3
 801c5c0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c5c4:	4302      	orrs	r2, r0
 801c5c6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801c5ca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c5ce:	e7b8      	b.n	801c542 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c5d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c5d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c5d6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801c5d8:	f640 6333 	movw	r3, #3635	; 0xe33
 801c5dc:	4299      	cmp	r1, r3
 801c5de:	d110      	bne.n	801c602 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801c5e0:	6803      	ldr	r3, [r0, #0]
 801c5e2:	68db      	ldr	r3, [r3, #12]
 801c5e4:	4798      	blx	r3
 801c5e6:	7b41      	ldrb	r1, [r0, #13]
 801c5e8:	00cb      	lsls	r3, r1, #3
 801c5ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c5ee:	7a03      	ldrb	r3, [r0, #8]
 801c5f0:	0648      	lsls	r0, r1, #25
 801c5f2:	ea43 0302 	orr.w	r3, r3, r2
 801c5f6:	bf44      	itt	mi
 801c5f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c5fc:	b21b      	sxthmi	r3, r3
 801c5fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c602:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801c606:	462a      	mov	r2, r5
 801c608:	f105 0c08 	add.w	ip, r5, #8
 801c60c:	443b      	add	r3, r7
 801c60e:	4433      	add	r3, r6
 801c610:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801c614:	b29b      	uxth	r3, r3
 801c616:	4635      	mov	r5, r6
 801c618:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c61c:	6810      	ldr	r0, [r2, #0]
 801c61e:	3208      	adds	r2, #8
 801c620:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c624:	4637      	mov	r7, r6
 801c626:	4562      	cmp	r2, ip
 801c628:	c703      	stmia	r7!, {r0, r1}
 801c62a:	463e      	mov	r6, r7
 801c62c:	d1f6      	bne.n	801c61c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801c62e:	6810      	ldr	r0, [r2, #0]
 801c630:	6038      	str	r0, [r7, #0]
 801c632:	8892      	ldrh	r2, [r2, #4]
 801c634:	80ba      	strh	r2, [r7, #4]
 801c636:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c63a:	10db      	asrs	r3, r3, #3
 801c63c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c644:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c648:	4313      	orrs	r3, r2
 801c64a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801c64e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c652:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c656:	1a9b      	subs	r3, r3, r2
 801c658:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c65c:	e771      	b.n	801c542 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c65e:	f023 0204 	bic.w	r2, r3, #4
 801c662:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c666:	428a      	cmp	r2, r1
 801c668:	d003      	beq.n	801c672 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801c66a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c66e:	4293      	cmp	r3, r2
 801c670:	d120      	bne.n	801c6b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801c672:	3b01      	subs	r3, #1
 801c674:	4602      	mov	r2, r0
 801c676:	4629      	mov	r1, r5
 801c678:	4620      	mov	r0, r4
 801c67a:	b29b      	uxth	r3, r3
 801c67c:	f7ff ff4b 	bl	801c516 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c680:	7b41      	ldrb	r1, [r0, #13]
 801c682:	00cb      	lsls	r3, r1, #3
 801c684:	0649      	lsls	r1, r1, #25
 801c686:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c68a:	7a03      	ldrb	r3, [r0, #8]
 801c68c:	ea43 0302 	orr.w	r3, r3, r2
 801c690:	bf44      	itt	mi
 801c692:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c696:	b21b      	sxthmi	r3, r3
 801c698:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c69c:	7b6b      	ldrb	r3, [r5, #13]
 801c69e:	7aaa      	ldrb	r2, [r5, #10]
 801c6a0:	005b      	lsls	r3, r3, #1
 801c6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c6a6:	4313      	orrs	r3, r2
 801c6a8:	115a      	asrs	r2, r3, #5
 801c6aa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c6ae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c6b2:	e035      	b.n	801c720 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801c6b4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c6b8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c6bc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c6c0:	7a2a      	ldrb	r2, [r5, #8]
 801c6c2:	ea42 0201 	orr.w	r2, r2, r1
 801c6c6:	f640 6109 	movw	r1, #3593	; 0xe09
 801c6ca:	bf1c      	itt	ne
 801c6cc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c6d0:	b212      	sxthne	r2, r2
 801c6d2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c6d6:	f023 0210 	bic.w	r2, r3, #16
 801c6da:	428a      	cmp	r2, r1
 801c6dc:	d003      	beq.n	801c6e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801c6de:	f640 6213 	movw	r2, #3603	; 0xe13
 801c6e2:	4293      	cmp	r3, r2
 801c6e4:	d129      	bne.n	801c73a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801c6e6:	7b6e      	ldrb	r6, [r5, #13]
 801c6e8:	4629      	mov	r1, r5
 801c6ea:	0076      	lsls	r6, r6, #1
 801c6ec:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c6f0:	7aae      	ldrb	r6, [r5, #10]
 801c6f2:	4316      	orrs	r6, r2
 801c6f4:	f640 6213 	movw	r2, #3603	; 0xe13
 801c6f8:	4293      	cmp	r3, r2
 801c6fa:	4602      	mov	r2, r0
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	bf16      	itet	ne
 801c700:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c704:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c708:	b29b      	uxthne	r3, r3
 801c70a:	f7ff ff04 	bl	801c516 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c70e:	7b43      	ldrb	r3, [r0, #13]
 801c710:	7a82      	ldrb	r2, [r0, #10]
 801c712:	005b      	lsls	r3, r3, #1
 801c714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c718:	4313      	orrs	r3, r2
 801c71a:	1af6      	subs	r6, r6, r3
 801c71c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801c720:	7b69      	ldrb	r1, [r5, #13]
 801c722:	00cb      	lsls	r3, r1, #3
 801c724:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c728:	7a2b      	ldrb	r3, [r5, #8]
 801c72a:	4313      	orrs	r3, r2
 801c72c:	064a      	lsls	r2, r1, #25
 801c72e:	bf44      	itt	mi
 801c730:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c734:	b21b      	sxthmi	r3, r3
 801c736:	1bdb      	subs	r3, r3, r7
 801c738:	e747      	b.n	801c5ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801c73a:	2300      	movs	r3, #0
 801c73c:	e7b7      	b.n	801c6ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801c73e:	bf00      	nop
 801c740:	3fc00079 	.word	0x3fc00079

0801c744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c748:	4604      	mov	r4, r0
 801c74a:	b942      	cbnz	r2, 801c75e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c74c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c750:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801c754:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801c758:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c75c:	e047      	b.n	801c7ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c75e:	7b51      	ldrb	r1, [r2, #13]
 801c760:	8893      	ldrh	r3, [r2, #4]
 801c762:	010d      	lsls	r5, r1, #4
 801c764:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801c768:	79d5      	ldrb	r5, [r2, #7]
 801c76a:	4305      	orrs	r5, r0
 801c76c:	2d04      	cmp	r5, #4
 801c76e:	bfcc      	ite	gt
 801c770:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801c774:	f04f 0e01 	movle.w	lr, #1
 801c778:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c77c:	f200 80ab 	bhi.w	801c8d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801c780:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c784:	4283      	cmp	r3, r0
 801c786:	d216      	bcs.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c788:	f240 605b 	movw	r0, #1627	; 0x65b
 801c78c:	4283      	cmp	r3, r0
 801c78e:	d859      	bhi.n	801c844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801c790:	f240 6057 	movw	r0, #1623	; 0x657
 801c794:	4283      	cmp	r3, r0
 801c796:	d20e      	bcs.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c798:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c79c:	d24a      	bcs.n	801c834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801c79e:	f240 604e 	movw	r0, #1614	; 0x64e
 801c7a2:	4283      	cmp	r3, r0
 801c7a4:	d207      	bcs.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c7a6:	f240 601a 	movw	r0, #1562	; 0x61a
 801c7aa:	4283      	cmp	r3, r0
 801c7ac:	d02a      	beq.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c7ae:	d821      	bhi.n	801c7f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801c7b0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c7b4:	d35b      	bcc.n	801c86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c7b6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801c7ba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c7be:	f040 80d0 	bne.w	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c7c2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801c7c6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c7ca:	f040 80ca 	bne.w	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c7ce:	00cb      	lsls	r3, r1, #3
 801c7d0:	0649      	lsls	r1, r1, #25
 801c7d2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c7d6:	7a13      	ldrb	r3, [r2, #8]
 801c7d8:	ea43 0300 	orr.w	r3, r3, r0
 801c7dc:	bf44      	itt	mi
 801c7de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7e2:	b21b      	sxthmi	r3, r3
 801c7e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c7e8:	1b5d      	subs	r5, r3, r5
 801c7ea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c7ee:	4610      	mov	r0, r2
 801c7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7f4:	f240 604b 	movw	r0, #1611	; 0x64b
 801c7f8:	4283      	cmp	r3, r0
 801c7fa:	d338      	bcc.n	801c86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c7fc:	f240 604c 	movw	r0, #1612	; 0x64c
 801c800:	4283      	cmp	r3, r0
 801c802:	d9d8      	bls.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c804:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801c808:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801c80c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c810:	f040 80f3 	bne.w	801c9fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c814:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c818:	f040 80ef 	bne.w	801c9fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c81c:	00cb      	lsls	r3, r1, #3
 801c81e:	064e      	lsls	r6, r1, #25
 801c820:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c824:	7a13      	ldrb	r3, [r2, #8]
 801c826:	ea43 0300 	orr.w	r3, r3, r0
 801c82a:	bf44      	itt	mi
 801c82c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c830:	b21b      	sxthmi	r3, r3
 801c832:	e7d9      	b.n	801c7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c834:	f240 6054 	movw	r0, #1620	; 0x654
 801c838:	4283      	cmp	r3, r0
 801c83a:	d8e3      	bhi.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c83c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c840:	d9e0      	bls.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c842:	e7b8      	b.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c844:	f240 6074 	movw	r0, #1652	; 0x674
 801c848:	4283      	cmp	r3, r0
 801c84a:	d0b4      	beq.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c84c:	d82d      	bhi.n	801c8aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c84e:	f240 605e 	movw	r0, #1630	; 0x65e
 801c852:	4283      	cmp	r3, r0
 801c854:	d804      	bhi.n	801c860 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c856:	f240 605d 	movw	r0, #1629	; 0x65d
 801c85a:	4283      	cmp	r3, r0
 801c85c:	d3d2      	bcc.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c85e:	e7aa      	b.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c860:	f240 605f 	movw	r0, #1631	; 0x65f
 801c864:	4283      	cmp	r3, r0
 801c866:	d0cd      	beq.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c868:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c86c:	d0a3      	beq.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c86e:	00cb      	lsls	r3, r1, #3
 801c870:	0649      	lsls	r1, r1, #25
 801c872:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c876:	7a13      	ldrb	r3, [r2, #8]
 801c878:	ea43 0300 	orr.w	r3, r3, r0
 801c87c:	bf44      	itt	mi
 801c87e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c882:	b21b      	sxthmi	r3, r3
 801c884:	1b5d      	subs	r5, r3, r5
 801c886:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c88a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c88e:	7b53      	ldrb	r3, [r2, #13]
 801c890:	015b      	lsls	r3, r3, #5
 801c892:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c896:	7993      	ldrb	r3, [r2, #6]
 801c898:	430b      	orrs	r3, r1
 801c89a:	2105      	movs	r1, #5
 801c89c:	005b      	lsls	r3, r3, #1
 801c89e:	fb93 f3f1 	sdiv	r3, r3, r1
 801c8a2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c8a6:	440b      	add	r3, r1
 801c8a8:	e756      	b.n	801c758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c8aa:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c8ae:	4283      	cmp	r3, r0
 801c8b0:	d809      	bhi.n	801c8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c8b2:	f240 60df 	movw	r0, #1759	; 0x6df
 801c8b6:	4283      	cmp	r3, r0
 801c8b8:	f4bf af7d 	bcs.w	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8bc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c8c0:	2b05      	cmp	r3, #5
 801c8c2:	d8d4      	bhi.n	801c86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c8c4:	e777      	b.n	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8c6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c8ca:	4283      	cmp	r3, r0
 801c8cc:	d09a      	beq.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c8ce:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c8d2:	4283      	cmp	r3, r0
 801c8d4:	e7ca      	b.n	801c86c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c8d6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c8da:	d22b      	bcs.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c8dc:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c8e0:	4283      	cmp	r3, r0
 801c8e2:	d28f      	bcs.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c8e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c8e8:	4283      	cmp	r3, r0
 801c8ea:	d816      	bhi.n	801c91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c8ec:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c8f0:	4283      	cmp	r3, r0
 801c8f2:	f4bf af60 	bcs.w	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8f6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c8fa:	4283      	cmp	r3, r0
 801c8fc:	d80a      	bhi.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c8fe:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c902:	4283      	cmp	r3, r0
 801c904:	f4bf af57 	bcs.w	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c908:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c90c:	4283      	cmp	r3, r0
 801c90e:	f43f af79 	beq.w	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c912:	e7ac      	b.n	801c86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c914:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c918:	e7f8      	b.n	801c90c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c91a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c91e:	4283      	cmp	r3, r0
 801c920:	d802      	bhi.n	801c928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c922:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c926:	e798      	b.n	801c85a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c928:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c92c:	4283      	cmp	r3, r0
 801c92e:	f47f af42 	bne.w	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c932:	e767      	b.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c934:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c938:	4283      	cmp	r3, r0
 801c93a:	f43f af63 	beq.w	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c93e:	d802      	bhi.n	801c946 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c940:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c944:	e7f2      	b.n	801c92c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c946:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c94a:	4283      	cmp	r3, r0
 801c94c:	d805      	bhi.n	801c95a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c94e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c952:	4283      	cmp	r3, r0
 801c954:	f4ff af2f 	bcc.w	801c7b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c958:	e754      	b.n	801c804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c95a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c95e:	4283      	cmp	r3, r0
 801c960:	e7af      	b.n	801c8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c962:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c966:	4617      	mov	r7, r2
 801c968:	f102 0808 	add.w	r8, r2, #8
 801c96c:	4666      	mov	r6, ip
 801c96e:	6838      	ldr	r0, [r7, #0]
 801c970:	3708      	adds	r7, #8
 801c972:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c976:	46e6      	mov	lr, ip
 801c978:	4547      	cmp	r7, r8
 801c97a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c97e:	46f4      	mov	ip, lr
 801c980:	d1f5      	bne.n	801c96e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c982:	6838      	ldr	r0, [r7, #0]
 801c984:	f8ce 0000 	str.w	r0, [lr]
 801c988:	88b9      	ldrh	r1, [r7, #4]
 801c98a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c98e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801c992:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c996:	d009      	beq.n	801c9ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801c998:	7b51      	ldrb	r1, [r2, #13]
 801c99a:	7992      	ldrb	r2, [r2, #6]
 801c99c:	0149      	lsls	r1, r1, #5
 801c99e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c9a2:	4311      	orrs	r1, r2
 801c9a4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c9a8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801c9ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c9b0:	b2ad      	uxth	r5, r5
 801c9b2:	d00d      	beq.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801c9b4:	442b      	add	r3, r5
 801c9b6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c9ba:	b29b      	uxth	r3, r3
 801c9bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c9c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c9c4:	10db      	asrs	r3, r3, #3
 801c9c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c9ca:	4313      	orrs	r3, r2
 801c9cc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c9d0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801c9d4:	00cb      	lsls	r3, r1, #3
 801c9d6:	064f      	lsls	r7, r1, #25
 801c9d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c9dc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801c9e0:	ea43 0302 	orr.w	r3, r3, r2
 801c9e4:	bf44      	itt	mi
 801c9e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9ea:	b21b      	sxthmi	r3, r3
 801c9ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c9f0:	1b5b      	subs	r3, r3, r5
 801c9f2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c9f6:	4632      	mov	r2, r6
 801c9f8:	e6f9      	b.n	801c7ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c9fa:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801c9fe:	4617      	mov	r7, r2
 801ca00:	f102 0908 	add.w	r9, r2, #8
 801ca04:	4666      	mov	r6, ip
 801ca06:	6838      	ldr	r0, [r7, #0]
 801ca08:	3708      	adds	r7, #8
 801ca0a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ca0e:	46e0      	mov	r8, ip
 801ca10:	454f      	cmp	r7, r9
 801ca12:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ca16:	46c4      	mov	ip, r8
 801ca18:	d1f5      	bne.n	801ca06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ca1a:	6838      	ldr	r0, [r7, #0]
 801ca1c:	f8c8 0000 	str.w	r0, [r8]
 801ca20:	88b9      	ldrh	r1, [r7, #4]
 801ca22:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ca26:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ca2a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ca2e:	d009      	beq.n	801ca44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ca30:	7b51      	ldrb	r1, [r2, #13]
 801ca32:	7992      	ldrb	r2, [r2, #6]
 801ca34:	0149      	lsls	r1, r1, #5
 801ca36:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ca3a:	4311      	orrs	r1, r2
 801ca3c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ca40:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ca44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ca48:	d00e      	beq.n	801ca68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ca4a:	eba3 030e 	sub.w	r3, r3, lr
 801ca4e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ca52:	b29b      	uxth	r3, r3
 801ca54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ca58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ca5c:	10db      	asrs	r3, r3, #3
 801ca5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ca62:	4313      	orrs	r3, r2
 801ca64:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ca68:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ca6c:	00cb      	lsls	r3, r1, #3
 801ca6e:	0648      	lsls	r0, r1, #25
 801ca70:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ca74:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ca78:	ea43 0302 	orr.w	r3, r3, r2
 801ca7c:	bf44      	itt	mi
 801ca7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ca82:	b21b      	sxthmi	r3, r3
 801ca84:	1b5d      	subs	r5, r3, r5
 801ca86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ca8a:	e7b4      	b.n	801c9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801ca8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca90:	461e      	mov	r6, r3
 801ca92:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ca94:	4604      	mov	r4, r0
 801ca96:	4617      	mov	r7, r2
 801ca98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ca9c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801caa0:	f7f4 ff0e 	bl	80118c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801caa4:	4605      	mov	r5, r0
 801caa6:	b918      	cbnz	r0, 801cab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801caa8:	6030      	str	r0, [r6, #0]
 801caaa:	4628      	mov	r0, r5
 801caac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	4601      	mov	r1, r0
 801cab4:	4638      	mov	r0, r7
 801cab6:	68db      	ldr	r3, [r3, #12]
 801cab8:	4798      	blx	r3
 801caba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cabe:	4602      	mov	r2, r0
 801cac0:	6030      	str	r0, [r6, #0]
 801cac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cac6:	d213      	bcs.n	801caf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801cac8:	4643      	mov	r3, r8
 801caca:	4639      	mov	r1, r7
 801cacc:	4620      	mov	r0, r4
 801cace:	f7ff fe39 	bl	801c744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cad2:	6030      	str	r0, [r6, #0]
 801cad4:	6833      	ldr	r3, [r6, #0]
 801cad6:	b143      	cbz	r3, 801caea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801cad8:	7b5a      	ldrb	r2, [r3, #13]
 801cada:	7a9b      	ldrb	r3, [r3, #10]
 801cadc:	0052      	lsls	r2, r2, #1
 801cade:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cae2:	4313      	orrs	r3, r2
 801cae4:	bf0c      	ite	eq
 801cae6:	2301      	moveq	r3, #1
 801cae8:	2300      	movne	r3, #0
 801caea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801caee:	e7dc      	b.n	801caaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801caf0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801caf4:	b29b      	uxth	r3, r3
 801caf6:	2b7f      	cmp	r3, #127	; 0x7f
 801caf8:	d804      	bhi.n	801cb04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801cafa:	4639      	mov	r1, r7
 801cafc:	4620      	mov	r0, r4
 801cafe:	f7ff fd15 	bl	801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cb02:	e7e6      	b.n	801cad2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801cb04:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d0e3      	beq.n	801cad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cb0c:	f640 1302 	movw	r3, #2306	; 0x902
 801cb10:	429d      	cmp	r5, r3
 801cb12:	d1df      	bne.n	801cad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cb14:	4601      	mov	r1, r0
 801cb16:	4620      	mov	r0, r4
 801cb18:	f7ff fcd9 	bl	801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cb1c:	e7d9      	b.n	801cad2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801cb1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cb1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb22:	461e      	mov	r6, r3
 801cb24:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cb26:	4604      	mov	r4, r0
 801cb28:	4617      	mov	r7, r2
 801cb2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb2e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cb32:	f7f4 fec5 	bl	80118c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cb36:	4605      	mov	r5, r0
 801cb38:	b918      	cbnz	r0, 801cb42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801cb3a:	6030      	str	r0, [r6, #0]
 801cb3c:	4628      	mov	r0, r5
 801cb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb42:	683b      	ldr	r3, [r7, #0]
 801cb44:	4601      	mov	r1, r0
 801cb46:	4638      	mov	r0, r7
 801cb48:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cb4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cb50:	47c8      	blx	r9
 801cb52:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cb56:	4602      	mov	r2, r0
 801cb58:	6030      	str	r0, [r6, #0]
 801cb5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cb5e:	d213      	bcs.n	801cb88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801cb60:	4643      	mov	r3, r8
 801cb62:	4639      	mov	r1, r7
 801cb64:	4620      	mov	r0, r4
 801cb66:	f7ff fded 	bl	801c744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cb6a:	6030      	str	r0, [r6, #0]
 801cb6c:	6833      	ldr	r3, [r6, #0]
 801cb6e:	b143      	cbz	r3, 801cb82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801cb70:	7b5a      	ldrb	r2, [r3, #13]
 801cb72:	7a9b      	ldrb	r3, [r3, #10]
 801cb74:	0052      	lsls	r2, r2, #1
 801cb76:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cb7a:	4313      	orrs	r3, r2
 801cb7c:	bf0c      	ite	eq
 801cb7e:	2301      	moveq	r3, #1
 801cb80:	2300      	movne	r3, #0
 801cb82:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cb86:	e7d9      	b.n	801cb3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801cb88:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cb8c:	b29b      	uxth	r3, r3
 801cb8e:	2b7f      	cmp	r3, #127	; 0x7f
 801cb90:	d804      	bhi.n	801cb9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801cb92:	4639      	mov	r1, r7
 801cb94:	4620      	mov	r0, r4
 801cb96:	f7ff fcc9 	bl	801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cb9a:	e7e6      	b.n	801cb6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801cb9c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d0e3      	beq.n	801cb6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cba4:	f640 1302 	movw	r3, #2306	; 0x902
 801cba8:	429d      	cmp	r5, r3
 801cbaa:	d1df      	bne.n	801cb6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cbac:	4601      	mov	r1, r0
 801cbae:	4620      	mov	r0, r4
 801cbb0:	f7ff fc8d 	bl	801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cbb4:	e7d9      	b.n	801cb6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801cbb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cbb6:	b510      	push	{r4, lr}
 801cbb8:	4604      	mov	r4, r0
 801cbba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801cbbe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cbc0:	b1e1      	cbz	r1, 801cbfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801cbc2:	2b0a      	cmp	r3, #10
 801cbc4:	d02d      	beq.n	801cc22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801cbc6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cbc8:	3901      	subs	r1, #1
 801cbca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cbce:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801cbd0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801cbd4:	1c51      	adds	r1, r2, #1
 801cbd6:	b289      	uxth	r1, r1
 801cbd8:	2901      	cmp	r1, #1
 801cbda:	bf8a      	itet	hi
 801cbdc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cbe0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801cbe2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801cbe4:	1c5a      	adds	r2, r3, #1
 801cbe6:	8722      	strh	r2, [r4, #56]	; 0x38
 801cbe8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cbea:	4413      	add	r3, r2
 801cbec:	b29b      	uxth	r3, r3
 801cbee:	2b09      	cmp	r3, #9
 801cbf0:	bf88      	it	hi
 801cbf2:	3b0a      	subhi	r3, #10
 801cbf4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cbf8:	8458      	strh	r0, [r3, #34]	; 0x22
 801cbfa:	e7de      	b.n	801cbba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cbfc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cbfe:	2b0a      	cmp	r3, #10
 801cc00:	d00f      	beq.n	801cc22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801cc02:	4620      	mov	r0, r4
 801cc04:	f7ff fc11 	bl	801c42a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cc08:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cc0a:	1c5a      	adds	r2, r3, #1
 801cc0c:	8722      	strh	r2, [r4, #56]	; 0x38
 801cc0e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cc10:	4413      	add	r3, r2
 801cc12:	b29b      	uxth	r3, r3
 801cc14:	2b09      	cmp	r3, #9
 801cc16:	bf88      	it	hi
 801cc18:	3b0a      	subhi	r3, #10
 801cc1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cc1e:	8458      	strh	r0, [r3, #34]	; 0x22
 801cc20:	e7ec      	b.n	801cbfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801cc22:	bd10      	pop	{r4, pc}

0801cc24 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cc24:	b538      	push	{r3, r4, r5, lr}
 801cc26:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cc28:	4604      	mov	r4, r0
 801cc2a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801cc2e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801cc30:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801cc32:	3a01      	subs	r2, #1
 801cc34:	8702      	strh	r2, [r0, #56]	; 0x38
 801cc36:	1c5a      	adds	r2, r3, #1
 801cc38:	b292      	uxth	r2, r2
 801cc3a:	2a09      	cmp	r2, #9
 801cc3c:	bf8a      	itet	hi
 801cc3e:	3b09      	subhi	r3, #9
 801cc40:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801cc42:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801cc44:	f7ff ffb7 	bl	801cbb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cc48:	8c23      	ldrh	r3, [r4, #32]
 801cc4a:	2b01      	cmp	r3, #1
 801cc4c:	bf9c      	itt	ls
 801cc4e:	3301      	addls	r3, #1
 801cc50:	8423      	strhls	r3, [r4, #32]
 801cc52:	8be3      	ldrh	r3, [r4, #30]
 801cc54:	b90b      	cbnz	r3, 801cc5a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801cc56:	2302      	movs	r3, #2
 801cc58:	83e3      	strh	r3, [r4, #30]
 801cc5a:	8be3      	ldrh	r3, [r4, #30]
 801cc5c:	4628      	mov	r0, r5
 801cc5e:	3b01      	subs	r3, #1
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	83e3      	strh	r3, [r4, #30]
 801cc64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc68:	8365      	strh	r5, [r4, #26]
 801cc6a:	bd38      	pop	{r3, r4, r5, pc}

0801cc6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801cc6c:	428a      	cmp	r2, r1
 801cc6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc72:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801cc74:	d932      	bls.n	801ccdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801cc76:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801cc78:	1a54      	subs	r4, r2, r1
 801cc7a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801cc7e:	19ee      	adds	r6, r5, r7
 801cc80:	fa1f fe84 	uxth.w	lr, r4
 801cc84:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801cc88:	3e01      	subs	r6, #1
 801cc8a:	b2b4      	uxth	r4, r6
 801cc8c:	eba4 090e 	sub.w	r9, r4, lr
 801cc90:	fa1f f989 	uxth.w	r9, r9
 801cc94:	2c09      	cmp	r4, #9
 801cc96:	4626      	mov	r6, r4
 801cc98:	bf88      	it	hi
 801cc9a:	f1a4 060a 	subhi.w	r6, r4, #10
 801cc9e:	f1bc 0f00 	cmp.w	ip, #0
 801cca2:	f104 34ff 	add.w	r4, r4, #4294967295
 801cca6:	bf08      	it	eq
 801cca8:	f04f 0c02 	moveq.w	ip, #2
 801ccac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ccb0:	b2a4      	uxth	r4, r4
 801ccb2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ccb6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ccba:	454c      	cmp	r4, r9
 801ccbc:	fa1f fc8c 	uxth.w	ip, ip
 801ccc0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ccc4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ccc8:	d1e4      	bne.n	801cc94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ccca:	eba5 050e 	sub.w	r5, r5, lr
 801ccce:	eb0e 0408 	add.w	r4, lr, r8
 801ccd2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801ccd6:	8705      	strh	r5, [r0, #56]	; 0x38
 801ccd8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801ccdc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ccde:	250a      	movs	r5, #10
 801cce0:	1a64      	subs	r4, r4, r1
 801cce2:	4439      	add	r1, r7
 801cce4:	b289      	uxth	r1, r1
 801cce6:	8704      	strh	r4, [r0, #56]	; 0x38
 801cce8:	2909      	cmp	r1, #9
 801ccea:	bf88      	it	hi
 801ccec:	390a      	subhi	r1, #10
 801ccee:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ccf0:	b18a      	cbz	r2, 801cd16 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ccf2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ccf4:	3a01      	subs	r2, #1
 801ccf6:	3101      	adds	r1, #1
 801ccf8:	b292      	uxth	r2, r2
 801ccfa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ccfe:	8701      	strh	r1, [r0, #56]	; 0x38
 801cd00:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801cd02:	b901      	cbnz	r1, 801cd06 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801cd04:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cd06:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801cd08:	3901      	subs	r1, #1
 801cd0a:	b289      	uxth	r1, r1
 801cd0c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801cd0e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cd12:	844c      	strh	r4, [r1, #34]	; 0x22
 801cd14:	e7ec      	b.n	801ccf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801cd16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd1a:	f7ff bf4c 	b.w	801cbb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801cd1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801cd1e:	b570      	push	{r4, r5, r6, lr}
 801cd20:	2500      	movs	r5, #0
 801cd22:	4295      	cmp	r5, r2
 801cd24:	d011      	beq.n	801cd4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801cd26:	8bc4      	ldrh	r4, [r0, #30]
 801cd28:	f831 6b02 	ldrh.w	r6, [r1], #2
 801cd2c:	4414      	add	r4, r2
 801cd2e:	3c01      	subs	r4, #1
 801cd30:	1b64      	subs	r4, r4, r5
 801cd32:	b2a4      	uxth	r4, r4
 801cd34:	2c01      	cmp	r4, #1
 801cd36:	bf88      	it	hi
 801cd38:	3c02      	subhi	r4, #2
 801cd3a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cd3e:	8b64      	ldrh	r4, [r4, #26]
 801cd40:	42b4      	cmp	r4, r6
 801cd42:	d117      	bne.n	801cd74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801cd44:	3501      	adds	r5, #1
 801cd46:	b2ad      	uxth	r5, r5
 801cd48:	e7eb      	b.n	801cd22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801cd4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cd4e:	2400      	movs	r4, #0
 801cd50:	4413      	add	r3, r2
 801cd52:	b2a2      	uxth	r2, r4
 801cd54:	429a      	cmp	r2, r3
 801cd56:	da0f      	bge.n	801cd78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801cd58:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801cd5a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cd5e:	3401      	adds	r4, #1
 801cd60:	4432      	add	r2, r6
 801cd62:	b292      	uxth	r2, r2
 801cd64:	2a09      	cmp	r2, #9
 801cd66:	bf88      	it	hi
 801cd68:	3a0a      	subhi	r2, #10
 801cd6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cd6e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801cd70:	42aa      	cmp	r2, r5
 801cd72:	d0ee      	beq.n	801cd52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801cd74:	2000      	movs	r0, #0
 801cd76:	bd70      	pop	{r4, r5, r6, pc}
 801cd78:	2001      	movs	r0, #1
 801cd7a:	e7fc      	b.n	801cd76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801cd7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd80:	4605      	mov	r5, r0
 801cd82:	4616      	mov	r6, r2
 801cd84:	1c8c      	adds	r4, r1, #2
 801cd86:	8809      	ldrh	r1, [r1, #0]
 801cd88:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cd8c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cd90:	42b3      	cmp	r3, r6
 801cd92:	d124      	bne.n	801cdde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cd94:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cd98:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cd9c:	f001 070f 	and.w	r7, r1, #15
 801cda0:	4652      	mov	r2, sl
 801cda2:	f8cd 8000 	str.w	r8, [sp]
 801cda6:	464b      	mov	r3, r9
 801cda8:	4621      	mov	r1, r4
 801cdaa:	4628      	mov	r0, r5
 801cdac:	f7ff ffb7 	bl	801cd1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cdb0:	4683      	mov	fp, r0
 801cdb2:	b168      	cbz	r0, 801cdd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cdb4:	eb0a 0109 	add.w	r1, sl, r9
 801cdb8:	463a      	mov	r2, r7
 801cdba:	4628      	mov	r0, r5
 801cdbc:	4441      	add	r1, r8
 801cdbe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cdc2:	4649      	mov	r1, r9
 801cdc4:	f7ff ff52 	bl	801cc6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cdc8:	4658      	mov	r0, fp
 801cdca:	b003      	add	sp, #12
 801cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdd0:	eb07 010a 	add.w	r1, r7, sl
 801cdd4:	4449      	add	r1, r9
 801cdd6:	4441      	add	r1, r8
 801cdd8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cddc:	e7d2      	b.n	801cd84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cdde:	f04f 0b00 	mov.w	fp, #0
 801cde2:	e7f1      	b.n	801cdc8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cde4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cde4:	b570      	push	{r4, r5, r6, lr}
 801cde6:	8810      	ldrh	r0, [r2, #0]
 801cde8:	4298      	cmp	r0, r3
 801cdea:	d817      	bhi.n	801ce1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cdec:	1e48      	subs	r0, r1, #1
 801cdee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cdf2:	4298      	cmp	r0, r3
 801cdf4:	d312      	bcc.n	801ce1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cdf6:	2400      	movs	r4, #0
 801cdf8:	428c      	cmp	r4, r1
 801cdfa:	d20f      	bcs.n	801ce1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cdfc:	1860      	adds	r0, r4, r1
 801cdfe:	1040      	asrs	r0, r0, #1
 801ce00:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ce04:	0085      	lsls	r5, r0, #2
 801ce06:	42b3      	cmp	r3, r6
 801ce08:	d902      	bls.n	801ce10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ce0a:	3001      	adds	r0, #1
 801ce0c:	b284      	uxth	r4, r0
 801ce0e:	e7f3      	b.n	801cdf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ce10:	d201      	bcs.n	801ce16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ce12:	b281      	uxth	r1, r0
 801ce14:	e7f0      	b.n	801cdf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ce16:	442a      	add	r2, r5
 801ce18:	8850      	ldrh	r0, [r2, #2]
 801ce1a:	bd70      	pop	{r4, r5, r6, pc}
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	e7fc      	b.n	801ce1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ce20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce24:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801ce26:	4604      	mov	r4, r0
 801ce28:	260b      	movs	r6, #11
 801ce2a:	886f      	ldrh	r7, [r5, #2]
 801ce2c:	087f      	lsrs	r7, r7, #1
 801ce2e:	3e01      	subs	r6, #1
 801ce30:	d013      	beq.n	801ce5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ce32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ce34:	462a      	mov	r2, r5
 801ce36:	4639      	mov	r1, r7
 801ce38:	4620      	mov	r0, r4
 801ce3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce3e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ce42:	4643      	mov	r3, r8
 801ce44:	f7ff ffce 	bl	801cde4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ce48:	b138      	cbz	r0, 801ce5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ce4a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ce4e:	4642      	mov	r2, r8
 801ce50:	4620      	mov	r0, r4
 801ce52:	f7ff ff93 	bl	801cd7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ce56:	2800      	cmp	r0, #0
 801ce58:	d1e9      	bne.n	801ce2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ce5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801ce60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ce60:	b570      	push	{r4, r5, r6, lr}
 801ce62:	694a      	ldr	r2, [r1, #20]
 801ce64:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ce66:	684b      	ldr	r3, [r1, #4]
 801ce68:	1b54      	subs	r4, r2, r5
 801ce6a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ce6c:	f000 8106 	beq.w	801d07c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ce70:	1b9b      	subs	r3, r3, r6
 801ce72:	d003      	beq.n	801ce7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ce74:	4363      	muls	r3, r4
 801ce76:	2210      	movs	r2, #16
 801ce78:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce7c:	680c      	ldr	r4, [r1, #0]
 801ce7e:	698a      	ldr	r2, [r1, #24]
 801ce80:	1b65      	subs	r5, r4, r5
 801ce82:	f000 80fd 	beq.w	801d080 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ce86:	1b92      	subs	r2, r2, r6
 801ce88:	d003      	beq.n	801ce92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ce8a:	436a      	muls	r2, r5
 801ce8c:	2410      	movs	r4, #16
 801ce8e:	fb92 f2f4 	sdiv	r2, r2, r4
 801ce92:	1a9b      	subs	r3, r3, r2
 801ce94:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d0bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ce98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce9c:	460a      	mov	r2, r1
 801ce9e:	ee07 3a90 	vmov	s15, r3
 801cea2:	f100 040c 	add.w	r4, r0, #12
 801cea6:	4603      	mov	r3, r0
 801cea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ceac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ceb0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ceb4:	eeb1 6a43 	vneg.f32	s12, s6
 801ceb8:	edd2 7a02 	vldr	s15, [r2, #8]
 801cebc:	3214      	adds	r2, #20
 801cebe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cec2:	ece3 6a01 	vstmia	r3!, {s13}
 801cec6:	429c      	cmp	r4, r3
 801cec8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801cecc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ced0:	edc3 7a02 	vstr	s15, [r3, #8]
 801ced4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ced8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cedc:	edc3 7a05 	vstr	s15, [r3, #20]
 801cee0:	d1ea      	bne.n	801ceb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801cee2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cee4:	698b      	ldr	r3, [r1, #24]
 801cee6:	edd0 4a02 	vldr	s9, [r0, #8]
 801ceea:	1a9b      	subs	r3, r3, r2
 801ceec:	edd0 3a00 	vldr	s7, [r0]
 801cef0:	edd0 6a01 	vldr	s13, [r0, #4]
 801cef4:	ee07 3a90 	vmov	s15, r3
 801cef8:	684b      	ldr	r3, [r1, #4]
 801cefa:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801cefe:	ed90 5a05 	vldr	s10, [r0, #20]
 801cf02:	1a9b      	subs	r3, r3, r2
 801cf04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf08:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801cf0c:	ed90 2a03 	vldr	s4, [r0, #12]
 801cf10:	ee07 3a10 	vmov	s14, r3
 801cf14:	edd0 5a04 	vldr	s11, [r0, #16]
 801cf18:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cf1c:	ed90 1a07 	vldr	s2, [r0, #28]
 801cf20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf24:	edd0 2a06 	vldr	s5, [r0, #24]
 801cf28:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801cf2c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801cf30:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf34:	ee32 5a45 	vsub.f32	s10, s4, s10
 801cf38:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cf3c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801cf40:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801cf44:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cf46:	694a      	ldr	r2, [r1, #20]
 801cf48:	1b13      	subs	r3, r2, r4
 801cf4a:	ee07 3a10 	vmov	s14, r3
 801cf4e:	680b      	ldr	r3, [r1, #0]
 801cf50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf54:	1b1b      	subs	r3, r3, r4
 801cf56:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf5a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801cf5e:	ee07 3a10 	vmov	s14, r3
 801cf62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf66:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf6a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801cf6e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801cf72:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801cf76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cf78:	698b      	ldr	r3, [r1, #24]
 801cf7a:	1a9b      	subs	r3, r3, r2
 801cf7c:	ee06 3a90 	vmov	s13, r3
 801cf80:	684b      	ldr	r3, [r1, #4]
 801cf82:	1a9b      	subs	r3, r3, r2
 801cf84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cf88:	ee07 3a10 	vmov	s14, r3
 801cf8c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801cf90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf94:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801cf98:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf9c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cfa0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801cfa4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801cfa8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cfaa:	694a      	ldr	r2, [r1, #20]
 801cfac:	1b13      	subs	r3, r2, r4
 801cfae:	ee07 3a10 	vmov	s14, r3
 801cfb2:	680b      	ldr	r3, [r1, #0]
 801cfb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfb8:	1b1b      	subs	r3, r3, r4
 801cfba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cfbe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801cfc2:	ee07 3a10 	vmov	s14, r3
 801cfc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cfce:	eea5 5a87 	vfma.f32	s10, s11, s14
 801cfd2:	edd0 5a08 	vldr	s11, [r0, #32]
 801cfd6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801cfda:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801cfde:	ee25 5a06 	vmul.f32	s10, s10, s12
 801cfe2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801cfe6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cfe8:	698b      	ldr	r3, [r1, #24]
 801cfea:	1a9b      	subs	r3, r3, r2
 801cfec:	ee07 3a10 	vmov	s14, r3
 801cff0:	684b      	ldr	r3, [r1, #4]
 801cff2:	1a9b      	subs	r3, r3, r2
 801cff4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cff8:	ee01 3a90 	vmov	s3, r3
 801cffc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d000:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d004:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d008:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d00c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d010:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d014:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d018:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d01a:	694a      	ldr	r2, [r1, #20]
 801d01c:	1b13      	subs	r3, r2, r4
 801d01e:	ee03 3a10 	vmov	s6, r3
 801d022:	680b      	ldr	r3, [r1, #0]
 801d024:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d028:	1b1b      	subs	r3, r3, r4
 801d02a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d02e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d032:	ee03 3a10 	vmov	s6, r3
 801d036:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d03a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d03e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d042:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d046:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d04a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d04e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d052:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d05a:	dd13      	ble.n	801d084 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d060:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d064:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d066:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d06a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d072:	dd15      	ble.n	801d0a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d078:	6403      	str	r3, [r0, #64]	; 0x40
 801d07a:	bd70      	pop	{r4, r5, r6, pc}
 801d07c:	4623      	mov	r3, r4
 801d07e:	e6fd      	b.n	801ce7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d080:	462a      	mov	r2, r5
 801d082:	e706      	b.n	801ce92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d084:	d502      	bpl.n	801d08c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d086:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d08a:	e7e9      	b.n	801d060 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d08c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d090:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d094:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d09c:	dade      	bge.n	801d05c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d09e:	e7f2      	b.n	801d086 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d0a0:	d502      	bpl.n	801d0a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d0a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d0a6:	e7e7      	b.n	801d078 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d0a8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d0ac:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d0b0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0b8:	dadc      	bge.n	801d074 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d0ba:	e7f2      	b.n	801d0a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d0bc:	3d800000 	.word	0x3d800000

0801d0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0c4:	2714      	movs	r7, #20
 801d0c6:	435f      	muls	r7, r3
 801d0c8:	eb02 0c07 	add.w	ip, r2, r7
 801d0cc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d0d0:	f115 0e0f 	adds.w	lr, r5, #15
 801d0d4:	f100 80a2 	bmi.w	801d21c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d0d8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d0dc:	9c08      	ldr	r4, [sp, #32]
 801d0de:	2614      	movs	r6, #20
 801d0e0:	f8c0 e014 	str.w	lr, [r0, #20]
 801d0e4:	4366      	muls	r6, r4
 801d0e6:	eb02 0806 	add.w	r8, r2, r6
 801d0ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d0ee:	f115 040f 	adds.w	r4, r5, #15
 801d0f2:	f100 809f 	bmi.w	801d234 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d0f6:	1124      	asrs	r4, r4, #4
 801d0f8:	eba4 040e 	sub.w	r4, r4, lr
 801d0fc:	6184      	str	r4, [r0, #24]
 801d0fe:	2c00      	cmp	r4, #0
 801d100:	f000 808a 	beq.w	801d218 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d104:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d108:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d10c:	5995      	ldr	r5, [r2, r6]
 801d10e:	eba4 0809 	sub.w	r8, r4, r9
 801d112:	59d4      	ldr	r4, [r2, r7]
 801d114:	eba5 0a04 	sub.w	sl, r5, r4
 801d118:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d11c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d120:	fb0e fe05 	mul.w	lr, lr, r5
 801d124:	fb0a ee19 	mls	lr, sl, r9, lr
 801d128:	fb08 e404 	mla	r4, r8, r4, lr
 801d12c:	3c01      	subs	r4, #1
 801d12e:	19a4      	adds	r4, r4, r6
 801d130:	f100 808c 	bmi.w	801d24c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d134:	fb94 fef6 	sdiv	lr, r4, r6
 801d138:	fb06 441e 	mls	r4, r6, lr, r4
 801d13c:	f8c0 e000 	str.w	lr, [r0]
 801d140:	6104      	str	r4, [r0, #16]
 801d142:	2d00      	cmp	r5, #0
 801d144:	f2c0 8095 	blt.w	801d272 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d148:	fb95 f4f6 	sdiv	r4, r5, r6
 801d14c:	fb06 5514 	mls	r5, r6, r4, r5
 801d150:	6044      	str	r4, [r0, #4]
 801d152:	6085      	str	r5, [r0, #8]
 801d154:	60c6      	str	r6, [r0, #12]
 801d156:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d15a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d15e:	6945      	ldr	r5, [r0, #20]
 801d160:	59d2      	ldr	r2, [r2, r7]
 801d162:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d166:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801d294 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d16a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d16e:	ee07 4a10 	vmov	s14, r4
 801d172:	6804      	ldr	r4, [r0, #0]
 801d174:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d17c:	ee07 2a90 	vmov	s15, r2
 801d180:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d18c:	edd3 6a00 	vldr	s13, [r3]
 801d190:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d194:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d198:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d19c:	edc0 6a07 	vstr	s13, [r0, #28]
 801d1a0:	edd0 6a01 	vldr	s13, [r0, #4]
 801d1a4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d1a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d1ac:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d1b0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d1b4:	ed80 6a08 	vstr	s12, [r0, #32]
 801d1b8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d1ba:	6242      	str	r2, [r0, #36]	; 0x24
 801d1bc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d1c0:	ed93 6a03 	vldr	s12, [r3, #12]
 801d1c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d1c8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d1cc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d1d0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801d1d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d1d8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801d1dc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d1e0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801d1e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d1e6:	6302      	str	r2, [r0, #48]	; 0x30
 801d1e8:	ed93 6a06 	vldr	s12, [r3, #24]
 801d1ec:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801d1f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d1f4:	eeb0 7a46 	vmov.f32	s14, s12
 801d1f8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801d1fc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d200:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d204:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801d208:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801d20c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d210:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801d214:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801d216:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d21c:	2410      	movs	r4, #16
 801d21e:	f1c5 0501 	rsb	r5, r5, #1
 801d222:	fb9e fef4 	sdiv	lr, lr, r4
 801d226:	f015 050f 	ands.w	r5, r5, #15
 801d22a:	bf18      	it	ne
 801d22c:	2501      	movne	r5, #1
 801d22e:	ebae 0e05 	sub.w	lr, lr, r5
 801d232:	e753      	b.n	801d0dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d234:	f04f 0910 	mov.w	r9, #16
 801d238:	f1c5 0501 	rsb	r5, r5, #1
 801d23c:	fb94 f4f9 	sdiv	r4, r4, r9
 801d240:	f015 050f 	ands.w	r5, r5, #15
 801d244:	bf18      	it	ne
 801d246:	2501      	movne	r5, #1
 801d248:	1b64      	subs	r4, r4, r5
 801d24a:	e755      	b.n	801d0f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d24c:	4264      	negs	r4, r4
 801d24e:	fb94 fef6 	sdiv	lr, r4, r6
 801d252:	f1ce 0800 	rsb	r8, lr, #0
 801d256:	fb06 441e 	mls	r4, r6, lr, r4
 801d25a:	f8c0 8000 	str.w	r8, [r0]
 801d25e:	6104      	str	r4, [r0, #16]
 801d260:	2c00      	cmp	r4, #0
 801d262:	f43f af6e 	beq.w	801d142 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d266:	ea6f 0e0e 	mvn.w	lr, lr
 801d26a:	1b34      	subs	r4, r6, r4
 801d26c:	f8c0 e000 	str.w	lr, [r0]
 801d270:	e766      	b.n	801d140 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d272:	426d      	negs	r5, r5
 801d274:	fb95 f4f6 	sdiv	r4, r5, r6
 801d278:	f1c4 0e00 	rsb	lr, r4, #0
 801d27c:	fb06 5514 	mls	r5, r6, r4, r5
 801d280:	f8c0 e004 	str.w	lr, [r0, #4]
 801d284:	6085      	str	r5, [r0, #8]
 801d286:	2d00      	cmp	r5, #0
 801d288:	f43f af64 	beq.w	801d154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d28c:	43e4      	mvns	r4, r4
 801d28e:	1b75      	subs	r5, r6, r5
 801d290:	6044      	str	r4, [r0, #4]
 801d292:	e75e      	b.n	801d152 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d294:	3d800000 	.word	0x3d800000

0801d298 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d298:	4602      	mov	r2, r0
 801d29a:	b148      	cbz	r0, 801d2b0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d29c:	2300      	movs	r3, #0
 801d29e:	b298      	uxth	r0, r3
 801d2a0:	3301      	adds	r3, #1
 801d2a2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d2a6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d2aa:	2900      	cmp	r1, #0
 801d2ac:	d1f7      	bne.n	801d29e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d2ae:	4770      	bx	lr
 801d2b0:	4770      	bx	lr

0801d2b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d2b2:	b530      	push	{r4, r5, lr}
 801d2b4:	4604      	mov	r4, r0
 801d2b6:	b159      	cbz	r1, 801d2d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d2b8:	b148      	cbz	r0, 801d2ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	b298      	uxth	r0, r3
 801d2be:	4282      	cmp	r2, r0
 801d2c0:	d905      	bls.n	801d2ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d2c2:	5ccd      	ldrb	r5, [r1, r3]
 801d2c4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d2c8:	3301      	adds	r3, #1
 801d2ca:	2d00      	cmp	r5, #0
 801d2cc:	d1f6      	bne.n	801d2bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d2ce:	bd30      	pop	{r4, r5, pc}
 801d2d0:	4608      	mov	r0, r1
 801d2d2:	e7fc      	b.n	801d2ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d2d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2d6:	468c      	mov	ip, r1
 801d2d8:	b08b      	sub	sp, #44	; 0x2c
 801d2da:	2100      	movs	r1, #0
 801d2dc:	ae01      	add	r6, sp, #4
 801d2de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d2e2:	211f      	movs	r1, #31
 801d2e4:	fbb0 f7f3 	udiv	r7, r0, r3
 801d2e8:	fb03 0517 	mls	r5, r3, r7, r0
 801d2ec:	4638      	mov	r0, r7
 801d2ee:	b2ec      	uxtb	r4, r5
 801d2f0:	2d09      	cmp	r5, #9
 801d2f2:	bfd4      	ite	le
 801d2f4:	3430      	addle	r4, #48	; 0x30
 801d2f6:	3457      	addgt	r4, #87	; 0x57
 801d2f8:	b2e4      	uxtb	r4, r4
 801d2fa:	558c      	strb	r4, [r1, r6]
 801d2fc:	1e4c      	subs	r4, r1, #1
 801d2fe:	b92f      	cbnz	r7, 801d30c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d300:	4431      	add	r1, r6
 801d302:	4660      	mov	r0, ip
 801d304:	f7ff ffd5 	bl	801d2b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d308:	b00b      	add	sp, #44	; 0x2c
 801d30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d30c:	4621      	mov	r1, r4
 801d30e:	e7e9      	b.n	801d2e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d310 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d310:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d312:	4607      	mov	r7, r0
 801d314:	b08b      	sub	sp, #44	; 0x2c
 801d316:	4608      	mov	r0, r1
 801d318:	b341      	cbz	r1, 801d36c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d31a:	1e99      	subs	r1, r3, #2
 801d31c:	2922      	cmp	r1, #34	; 0x22
 801d31e:	d825      	bhi.n	801d36c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d320:	2100      	movs	r1, #0
 801d322:	463c      	mov	r4, r7
 801d324:	261f      	movs	r6, #31
 801d326:	f10d 0c04 	add.w	ip, sp, #4
 801d32a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d32e:	1e71      	subs	r1, r6, #1
 801d330:	fb94 fef3 	sdiv	lr, r4, r3
 801d334:	fb03 441e 	mls	r4, r3, lr, r4
 801d338:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d33c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d340:	b2ec      	uxtb	r4, r5
 801d342:	2d09      	cmp	r5, #9
 801d344:	bfd4      	ite	le
 801d346:	3430      	addle	r4, #48	; 0x30
 801d348:	3457      	addgt	r4, #87	; 0x57
 801d34a:	b2e4      	uxtb	r4, r4
 801d34c:	f80c 4006 	strb.w	r4, [ip, r6]
 801d350:	4674      	mov	r4, lr
 801d352:	b96c      	cbnz	r4, 801d370 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d354:	2f00      	cmp	r7, #0
 801d356:	da05      	bge.n	801d364 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d358:	ab0a      	add	r3, sp, #40	; 0x28
 801d35a:	4419      	add	r1, r3
 801d35c:	232d      	movs	r3, #45	; 0x2d
 801d35e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d362:	1eb1      	subs	r1, r6, #2
 801d364:	3101      	adds	r1, #1
 801d366:	4461      	add	r1, ip
 801d368:	f7ff ffa3 	bl	801d2b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d36c:	b00b      	add	sp, #44	; 0x2c
 801d36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d370:	460e      	mov	r6, r1
 801d372:	e7dc      	b.n	801d32e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d374 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d378:	b085      	sub	sp, #20
 801d37a:	4691      	mov	r9, r2
 801d37c:	6802      	ldr	r2, [r0, #0]
 801d37e:	4688      	mov	r8, r1
 801d380:	461c      	mov	r4, r3
 801d382:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d386:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d38a:	4683      	mov	fp, r0
 801d38c:	4610      	mov	r0, r2
 801d38e:	9103      	str	r1, [sp, #12]
 801d390:	9302      	str	r3, [sp, #8]
 801d392:	9201      	str	r2, [sp, #4]
 801d394:	f7ff ff80 	bl	801d298 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d398:	f1b8 0f00 	cmp.w	r8, #0
 801d39c:	bf0c      	ite	eq
 801d39e:	4684      	moveq	ip, r0
 801d3a0:	f100 0c01 	addne.w	ip, r0, #1
 801d3a4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d3a8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d3ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d3ae:	fa1f fc8c 	uxth.w	ip, ip
 801d3b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d3b4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d3b8:	9903      	ldr	r1, [sp, #12]
 801d3ba:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d3be:	d041      	beq.n	801d444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d3c0:	d834      	bhi.n	801d42c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d3c2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d3c6:	d059      	beq.n	801d47c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d3c8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d3cc:	d03a      	beq.n	801d444 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d3ce:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d3d2:	d034      	beq.n	801d43e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d3d4:	2400      	movs	r4, #0
 801d3d6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d3da:	3a01      	subs	r2, #1
 801d3dc:	b169      	cbz	r1, 801d3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d3de:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d3e0:	458c      	cmp	ip, r1
 801d3e2:	da09      	bge.n	801d3f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d3e4:	eba1 010c 	sub.w	r1, r1, ip
 801d3e8:	b289      	uxth	r1, r1
 801d3ea:	b933      	cbnz	r3, 801d3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d3ec:	2e00      	cmp	r6, #0
 801d3ee:	d051      	beq.n	801d494 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d04f      	beq.n	801d494 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d3f4:	440c      	add	r4, r1
 801d3f6:	b2a4      	uxth	r4, r4
 801d3f8:	2100      	movs	r1, #0
 801d3fa:	682b      	ldr	r3, [r5, #0]
 801d3fc:	4293      	cmp	r3, r2
 801d3fe:	da07      	bge.n	801d410 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d400:	f1b8 0f00 	cmp.w	r8, #0
 801d404:	d004      	beq.n	801d410 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d406:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d40a:	682b      	ldr	r3, [r5, #0]
 801d40c:	3301      	adds	r3, #1
 801d40e:	602b      	str	r3, [r5, #0]
 801d410:	2730      	movs	r7, #48	; 0x30
 801d412:	2c00      	cmp	r4, #0
 801d414:	d04e      	beq.n	801d4b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d416:	682e      	ldr	r6, [r5, #0]
 801d418:	3c01      	subs	r4, #1
 801d41a:	42b2      	cmp	r2, r6
 801d41c:	b2a4      	uxth	r4, r4
 801d41e:	dd49      	ble.n	801d4b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d420:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d424:	682b      	ldr	r3, [r5, #0]
 801d426:	3301      	adds	r3, #1
 801d428:	602b      	str	r3, [r5, #0]
 801d42a:	e7f2      	b.n	801d412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d42c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d430:	d01d      	beq.n	801d46e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d432:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d436:	d002      	beq.n	801d43e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d438:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d43c:	e7c9      	b.n	801d3d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d43e:	4684      	mov	ip, r0
 801d440:	f04f 0800 	mov.w	r8, #0
 801d444:	2c00      	cmp	r4, #0
 801d446:	d0c6      	beq.n	801d3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d448:	b947      	cbnz	r7, 801d45c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d44a:	2801      	cmp	r0, #1
 801d44c:	d106      	bne.n	801d45c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d44e:	8814      	ldrh	r4, [r2, #0]
 801d450:	2c30      	cmp	r4, #48	; 0x30
 801d452:	bf02      	ittt	eq
 801d454:	3202      	addeq	r2, #2
 801d456:	4638      	moveq	r0, r7
 801d458:	f8cb 2000 	streq.w	r2, [fp]
 801d45c:	45bc      	cmp	ip, r7
 801d45e:	da14      	bge.n	801d48a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d460:	b2bf      	uxth	r7, r7
 801d462:	eba7 040c 	sub.w	r4, r7, ip
 801d466:	46bc      	mov	ip, r7
 801d468:	b2a4      	uxth	r4, r4
 801d46a:	2600      	movs	r6, #0
 801d46c:	e7b3      	b.n	801d3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d46e:	4684      	mov	ip, r0
 801d470:	b16c      	cbz	r4, 801d48e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d472:	42b8      	cmp	r0, r7
 801d474:	dd00      	ble.n	801d478 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d476:	b2b8      	uxth	r0, r7
 801d478:	2400      	movs	r4, #0
 801d47a:	e003      	b.n	801d484 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d47c:	f04f 0c01 	mov.w	ip, #1
 801d480:	2400      	movs	r4, #0
 801d482:	4660      	mov	r0, ip
 801d484:	4626      	mov	r6, r4
 801d486:	46a0      	mov	r8, r4
 801d488:	e7a5      	b.n	801d3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d48a:	2400      	movs	r4, #0
 801d48c:	e7ed      	b.n	801d46a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d48e:	4626      	mov	r6, r4
 801d490:	46a0      	mov	r8, r4
 801d492:	e7a0      	b.n	801d3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d494:	2900      	cmp	r1, #0
 801d496:	d0b0      	beq.n	801d3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d498:	2720      	movs	r7, #32
 801d49a:	682e      	ldr	r6, [r5, #0]
 801d49c:	2900      	cmp	r1, #0
 801d49e:	d0ac      	beq.n	801d3fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d4a0:	3901      	subs	r1, #1
 801d4a2:	4296      	cmp	r6, r2
 801d4a4:	b289      	uxth	r1, r1
 801d4a6:	daa7      	bge.n	801d3f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d4a8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d4ac:	682b      	ldr	r3, [r5, #0]
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	602b      	str	r3, [r5, #0]
 801d4b2:	e7f2      	b.n	801d49a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d4b4:	b188      	cbz	r0, 801d4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d4b6:	682b      	ldr	r3, [r5, #0]
 801d4b8:	3801      	subs	r0, #1
 801d4ba:	429a      	cmp	r2, r3
 801d4bc:	b280      	uxth	r0, r0
 801d4be:	dd0c      	ble.n	801d4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d4c0:	f8db 3000 	ldr.w	r3, [fp]
 801d4c4:	1c9c      	adds	r4, r3, #2
 801d4c6:	f8cb 4000 	str.w	r4, [fp]
 801d4ca:	881c      	ldrh	r4, [r3, #0]
 801d4cc:	682b      	ldr	r3, [r5, #0]
 801d4ce:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d4d2:	682b      	ldr	r3, [r5, #0]
 801d4d4:	3301      	adds	r3, #1
 801d4d6:	602b      	str	r3, [r5, #0]
 801d4d8:	e7ec      	b.n	801d4b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d4da:	2620      	movs	r6, #32
 801d4dc:	b151      	cbz	r1, 801d4f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d4de:	6828      	ldr	r0, [r5, #0]
 801d4e0:	3901      	subs	r1, #1
 801d4e2:	4282      	cmp	r2, r0
 801d4e4:	b289      	uxth	r1, r1
 801d4e6:	dd05      	ble.n	801d4f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d4e8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d4ec:	682b      	ldr	r3, [r5, #0]
 801d4ee:	3301      	adds	r3, #1
 801d4f0:	602b      	str	r3, [r5, #0]
 801d4f2:	e7f3      	b.n	801d4dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d4f4:	b005      	add	sp, #20
 801d4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d4fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d4fe:	2400      	movs	r4, #0
 801d500:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d504:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d508:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d50c:	8014      	strh	r4, [r2, #0]
 801d50e:	701c      	strb	r4, [r3, #0]
 801d510:	f888 4000 	strb.w	r4, [r8]
 801d514:	f88c 4000 	strb.w	r4, [ip]
 801d518:	f88e 4000 	strb.w	r4, [lr]
 801d51c:	703c      	strb	r4, [r7, #0]
 801d51e:	6804      	ldr	r4, [r0, #0]
 801d520:	b1a4      	cbz	r4, 801d54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d522:	8824      	ldrh	r4, [r4, #0]
 801d524:	f04f 0901 	mov.w	r9, #1
 801d528:	b314      	cbz	r4, 801d570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d52a:	2c2b      	cmp	r4, #43	; 0x2b
 801d52c:	d001      	beq.n	801d532 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d52e:	2c20      	cmp	r4, #32
 801d530:	d110      	bne.n	801d554 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d532:	8014      	strh	r4, [r2, #0]
 801d534:	6804      	ldr	r4, [r0, #0]
 801d536:	b10c      	cbz	r4, 801d53c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d538:	3402      	adds	r4, #2
 801d53a:	6004      	str	r4, [r0, #0]
 801d53c:	680c      	ldr	r4, [r1, #0]
 801d53e:	b10c      	cbz	r4, 801d544 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d540:	3401      	adds	r4, #1
 801d542:	600c      	str	r4, [r1, #0]
 801d544:	6804      	ldr	r4, [r0, #0]
 801d546:	b17c      	cbz	r4, 801d568 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d548:	8824      	ldrh	r4, [r4, #0]
 801d54a:	e7ed      	b.n	801d528 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d54c:	680c      	ldr	r4, [r1, #0]
 801d54e:	b17c      	cbz	r4, 801d570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d550:	7824      	ldrb	r4, [r4, #0]
 801d552:	e7e7      	b.n	801d524 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d554:	2c2d      	cmp	r4, #45	; 0x2d
 801d556:	d102      	bne.n	801d55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d558:	f883 9000 	strb.w	r9, [r3]
 801d55c:	e7ea      	b.n	801d534 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d55e:	2c23      	cmp	r4, #35	; 0x23
 801d560:	d107      	bne.n	801d572 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d562:	f888 9000 	strb.w	r9, [r8]
 801d566:	e7e5      	b.n	801d534 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d568:	680c      	ldr	r4, [r1, #0]
 801d56a:	b10c      	cbz	r4, 801d570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d56c:	7824      	ldrb	r4, [r4, #0]
 801d56e:	e7db      	b.n	801d528 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d570:	2400      	movs	r4, #0
 801d572:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d576:	2b09      	cmp	r3, #9
 801d578:	d901      	bls.n	801d57e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d57a:	2c2a      	cmp	r4, #42	; 0x2a
 801d57c:	d122      	bne.n	801d5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d57e:	2301      	movs	r3, #1
 801d580:	2c30      	cmp	r4, #48	; 0x30
 801d582:	f88e 3000 	strb.w	r3, [lr]
 801d586:	d10d      	bne.n	801d5a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d588:	f88c 3000 	strb.w	r3, [ip]
 801d58c:	6803      	ldr	r3, [r0, #0]
 801d58e:	b10b      	cbz	r3, 801d594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d590:	3302      	adds	r3, #2
 801d592:	6003      	str	r3, [r0, #0]
 801d594:	680b      	ldr	r3, [r1, #0]
 801d596:	b10b      	cbz	r3, 801d59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d598:	3301      	adds	r3, #1
 801d59a:	600b      	str	r3, [r1, #0]
 801d59c:	6803      	ldr	r3, [r0, #0]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d02f      	beq.n	801d602 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d5a2:	881c      	ldrh	r4, [r3, #0]
 801d5a4:	2c2a      	cmp	r4, #42	; 0x2a
 801d5a6:	d135      	bne.n	801d614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ac:	6033      	str	r3, [r6, #0]
 801d5ae:	6803      	ldr	r3, [r0, #0]
 801d5b0:	b10b      	cbz	r3, 801d5b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d5b2:	3302      	adds	r3, #2
 801d5b4:	6003      	str	r3, [r0, #0]
 801d5b6:	680b      	ldr	r3, [r1, #0]
 801d5b8:	b10b      	cbz	r3, 801d5be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d5ba:	3301      	adds	r3, #1
 801d5bc:	600b      	str	r3, [r1, #0]
 801d5be:	6803      	ldr	r3, [r0, #0]
 801d5c0:	b31b      	cbz	r3, 801d60a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d5c2:	881c      	ldrh	r4, [r3, #0]
 801d5c4:	2c2e      	cmp	r4, #46	; 0x2e
 801d5c6:	d11a      	bne.n	801d5fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d5c8:	2301      	movs	r3, #1
 801d5ca:	703b      	strb	r3, [r7, #0]
 801d5cc:	6803      	ldr	r3, [r0, #0]
 801d5ce:	b10b      	cbz	r3, 801d5d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d5d0:	3302      	adds	r3, #2
 801d5d2:	6003      	str	r3, [r0, #0]
 801d5d4:	680b      	ldr	r3, [r1, #0]
 801d5d6:	b10b      	cbz	r3, 801d5dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d5d8:	3301      	adds	r3, #1
 801d5da:	600b      	str	r3, [r1, #0]
 801d5dc:	6803      	ldr	r3, [r0, #0]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d036      	beq.n	801d650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d5e2:	881b      	ldrh	r3, [r3, #0]
 801d5e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d5e6:	d137      	bne.n	801d658 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ec:	602b      	str	r3, [r5, #0]
 801d5ee:	6803      	ldr	r3, [r0, #0]
 801d5f0:	b10b      	cbz	r3, 801d5f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d5f2:	3302      	adds	r3, #2
 801d5f4:	6003      	str	r3, [r0, #0]
 801d5f6:	680b      	ldr	r3, [r1, #0]
 801d5f8:	b10b      	cbz	r3, 801d5fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	600b      	str	r3, [r1, #0]
 801d5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d602:	680c      	ldr	r4, [r1, #0]
 801d604:	b134      	cbz	r4, 801d614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d606:	7824      	ldrb	r4, [r4, #0]
 801d608:	e7cc      	b.n	801d5a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d60a:	680b      	ldr	r3, [r1, #0]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d0f6      	beq.n	801d5fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d610:	781c      	ldrb	r4, [r3, #0]
 801d612:	e7d7      	b.n	801d5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d614:	2300      	movs	r3, #0
 801d616:	220a      	movs	r2, #10
 801d618:	6033      	str	r3, [r6, #0]
 801d61a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d61e:	fa1f f38c 	uxth.w	r3, ip
 801d622:	2b09      	cmp	r3, #9
 801d624:	d8ce      	bhi.n	801d5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d626:	6833      	ldr	r3, [r6, #0]
 801d628:	fb02 c303 	mla	r3, r2, r3, ip
 801d62c:	6033      	str	r3, [r6, #0]
 801d62e:	6803      	ldr	r3, [r0, #0]
 801d630:	b10b      	cbz	r3, 801d636 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d632:	3302      	adds	r3, #2
 801d634:	6003      	str	r3, [r0, #0]
 801d636:	680b      	ldr	r3, [r1, #0]
 801d638:	b10b      	cbz	r3, 801d63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d63a:	3301      	adds	r3, #1
 801d63c:	600b      	str	r3, [r1, #0]
 801d63e:	6803      	ldr	r3, [r0, #0]
 801d640:	b10b      	cbz	r3, 801d646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d642:	881c      	ldrh	r4, [r3, #0]
 801d644:	e7e9      	b.n	801d61a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d646:	680c      	ldr	r4, [r1, #0]
 801d648:	2c00      	cmp	r4, #0
 801d64a:	d0e6      	beq.n	801d61a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d64c:	7824      	ldrb	r4, [r4, #0]
 801d64e:	e7e4      	b.n	801d61a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d650:	680b      	ldr	r3, [r1, #0]
 801d652:	b10b      	cbz	r3, 801d658 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	e7c5      	b.n	801d5e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d658:	2200      	movs	r2, #0
 801d65a:	240a      	movs	r4, #10
 801d65c:	602a      	str	r2, [r5, #0]
 801d65e:	3b30      	subs	r3, #48	; 0x30
 801d660:	682a      	ldr	r2, [r5, #0]
 801d662:	b29e      	uxth	r6, r3
 801d664:	2e09      	cmp	r6, #9
 801d666:	d813      	bhi.n	801d690 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d668:	fb04 3302 	mla	r3, r4, r2, r3
 801d66c:	602b      	str	r3, [r5, #0]
 801d66e:	6803      	ldr	r3, [r0, #0]
 801d670:	b10b      	cbz	r3, 801d676 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d672:	3302      	adds	r3, #2
 801d674:	6003      	str	r3, [r0, #0]
 801d676:	680b      	ldr	r3, [r1, #0]
 801d678:	b10b      	cbz	r3, 801d67e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d67a:	3301      	adds	r3, #1
 801d67c:	600b      	str	r3, [r1, #0]
 801d67e:	6803      	ldr	r3, [r0, #0]
 801d680:	b10b      	cbz	r3, 801d686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d682:	881b      	ldrh	r3, [r3, #0]
 801d684:	e7eb      	b.n	801d65e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d686:	680b      	ldr	r3, [r1, #0]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d0e8      	beq.n	801d65e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d68c:	781b      	ldrb	r3, [r3, #0]
 801d68e:	e7e6      	b.n	801d65e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d690:	2a06      	cmp	r2, #6
 801d692:	bfa8      	it	ge
 801d694:	2206      	movge	r2, #6
 801d696:	602a      	str	r2, [r5, #0]
 801d698:	e7b1      	b.n	801d5fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d69a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d69e:	b0a3      	sub	sp, #140	; 0x8c
 801d6a0:	2600      	movs	r6, #0
 801d6a2:	4607      	mov	r7, r0
 801d6a4:	4688      	mov	r8, r1
 801d6a6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d6aa:	4631      	mov	r1, r6
 801d6ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d6ae:	4648      	mov	r0, r9
 801d6b0:	960d      	str	r6, [sp, #52]	; 0x34
 801d6b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d6b6:	2242      	movs	r2, #66	; 0x42
 801d6b8:	f00c f92e 	bl	8029918 <memset>
 801d6bc:	b15f      	cbz	r7, 801d6d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d6be:	f108 3aff 	add.w	sl, r8, #4294967295
 801d6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6c6:	b152      	cbz	r2, 801d6de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d6c8:	8812      	ldrh	r2, [r2, #0]
 801d6ca:	b10a      	cbz	r2, 801d6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d6cc:	459a      	cmp	sl, r3
 801d6ce:	dc2e      	bgt.n	801d72e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d6d0:	2200      	movs	r2, #0
 801d6d2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d6d6:	4638      	mov	r0, r7
 801d6d8:	b023      	add	sp, #140	; 0x8c
 801d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6de:	9a08      	ldr	r2, [sp, #32]
 801d6e0:	2a00      	cmp	r2, #0
 801d6e2:	d0f5      	beq.n	801d6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d6e4:	7812      	ldrb	r2, [r2, #0]
 801d6e6:	e7f0      	b.n	801d6ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d6e8:	2d00      	cmp	r5, #0
 801d6ea:	d0ea      	beq.n	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d6ec:	782a      	ldrb	r2, [r5, #0]
 801d6ee:	b142      	cbz	r2, 801d702 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d6f0:	2a25      	cmp	r2, #37	; 0x25
 801d6f2:	d001      	beq.n	801d6f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d6f4:	459a      	cmp	sl, r3
 801d6f6:	dc08      	bgt.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d6f8:	f1bb 0f00 	cmp.w	fp, #0
 801d6fc:	d121      	bne.n	801d742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d6fe:	2d00      	cmp	r5, #0
 801d700:	d0df      	beq.n	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d702:	782a      	ldrb	r2, [r5, #0]
 801d704:	f04f 0b00 	mov.w	fp, #0
 801d708:	e01d      	b.n	801d746 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d70a:	f1bb 0f00 	cmp.w	fp, #0
 801d70e:	d077      	beq.n	801d800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d710:	f8bb 2000 	ldrh.w	r2, [fp]
 801d714:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d718:	f1bb 0f00 	cmp.w	fp, #0
 801d71c:	d002      	beq.n	801d724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d71e:	f10b 0202 	add.w	r2, fp, #2
 801d722:	9209      	str	r2, [sp, #36]	; 0x24
 801d724:	b10d      	cbz	r5, 801d72a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d726:	3501      	adds	r5, #1
 801d728:	9508      	str	r5, [sp, #32]
 801d72a:	3301      	adds	r3, #1
 801d72c:	930d      	str	r3, [sp, #52]	; 0x34
 801d72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d730:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d734:	f1bb 0f00 	cmp.w	fp, #0
 801d738:	d0d6      	beq.n	801d6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d73a:	f8bb 2000 	ldrh.w	r2, [fp]
 801d73e:	2a00      	cmp	r2, #0
 801d740:	d1d6      	bne.n	801d6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d742:	f8bb 2000 	ldrh.w	r2, [fp]
 801d746:	2a00      	cmp	r2, #0
 801d748:	d0bb      	beq.n	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d74a:	459a      	cmp	sl, r3
 801d74c:	ddb9      	ble.n	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d74e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d752:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d756:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d75a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d75e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d762:	960e      	str	r6, [sp, #56]	; 0x38
 801d764:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d768:	960f      	str	r6, [sp, #60]	; 0x3c
 801d76a:	f1bb 0f00 	cmp.w	fp, #0
 801d76e:	d002      	beq.n	801d776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d770:	f10b 0302 	add.w	r3, fp, #2
 801d774:	9309      	str	r3, [sp, #36]	; 0x24
 801d776:	b10d      	cbz	r5, 801d77c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d778:	1c6b      	adds	r3, r5, #1
 801d77a:	9308      	str	r3, [sp, #32]
 801d77c:	ab0f      	add	r3, sp, #60	; 0x3c
 801d77e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d782:	a908      	add	r1, sp, #32
 801d784:	a809      	add	r0, sp, #36	; 0x24
 801d786:	9305      	str	r3, [sp, #20]
 801d788:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d78c:	9304      	str	r3, [sp, #16]
 801d78e:	ab0e      	add	r3, sp, #56	; 0x38
 801d790:	9303      	str	r3, [sp, #12]
 801d792:	ab0c      	add	r3, sp, #48	; 0x30
 801d794:	9302      	str	r3, [sp, #8]
 801d796:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d79a:	9301      	str	r3, [sp, #4]
 801d79c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d7a0:	9300      	str	r3, [sp, #0]
 801d7a2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d7a6:	f7ff fea8 	bl	801d4fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	bfbf      	itttt	lt
 801d7b0:	6823      	ldrlt	r3, [r4, #0]
 801d7b2:	3404      	addlt	r4, #4
 801d7b4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d7b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	bfbe      	ittt	lt
 801d7c0:	6823      	ldrlt	r3, [r4, #0]
 801d7c2:	3404      	addlt	r4, #4
 801d7c4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d7c8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d7cc:	bfb8      	it	lt
 801d7ce:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d7d0:	b1d9      	cbz	r1, 801d80a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d7d2:	880b      	ldrh	r3, [r1, #0]
 801d7d4:	2b69      	cmp	r3, #105	; 0x69
 801d7d6:	d01f      	beq.n	801d818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d7d8:	d82f      	bhi.n	801d83a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d7da:	2b58      	cmp	r3, #88	; 0x58
 801d7dc:	d01c      	beq.n	801d818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d7de:	d818      	bhi.n	801d812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d7e0:	2b25      	cmp	r3, #37	; 0x25
 801d7e2:	d034      	beq.n	801d84e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7e6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d7ea:	f1bb 0f00 	cmp.w	fp, #0
 801d7ee:	f000 80b7 	beq.w	801d960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d7f2:	f8bb 5000 	ldrh.w	r5, [fp]
 801d7f6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d7fa:	3301      	adds	r3, #1
 801d7fc:	930d      	str	r3, [sp, #52]	; 0x34
 801d7fe:	e029      	b.n	801d854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d800:	b10d      	cbz	r5, 801d806 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d802:	782a      	ldrb	r2, [r5, #0]
 801d804:	e786      	b.n	801d714 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d806:	462a      	mov	r2, r5
 801d808:	e784      	b.n	801d714 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d80a:	2a00      	cmp	r2, #0
 801d80c:	d0ea      	beq.n	801d7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d80e:	7813      	ldrb	r3, [r2, #0]
 801d810:	e7e0      	b.n	801d7d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d812:	3b63      	subs	r3, #99	; 0x63
 801d814:	2b01      	cmp	r3, #1
 801d816:	d8e5      	bhi.n	801d7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d818:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d81c:	b329      	cbz	r1, 801d86a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d81e:	880b      	ldrh	r3, [r1, #0]
 801d820:	2b69      	cmp	r3, #105	; 0x69
 801d822:	d063      	beq.n	801d8ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d824:	d825      	bhi.n	801d872 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d826:	2b63      	cmp	r3, #99	; 0x63
 801d828:	d038      	beq.n	801d89c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d82a:	2b64      	cmp	r3, #100	; 0x64
 801d82c:	d05e      	beq.n	801d8ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d82e:	2b58      	cmp	r3, #88	; 0x58
 801d830:	d07a      	beq.n	801d928 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d832:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d836:	4625      	mov	r5, r4
 801d838:	e036      	b.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d83a:	2b73      	cmp	r3, #115	; 0x73
 801d83c:	d0ec      	beq.n	801d818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d83e:	d802      	bhi.n	801d846 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801d840:	2b6f      	cmp	r3, #111	; 0x6f
 801d842:	d1cf      	bne.n	801d7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d844:	e7e8      	b.n	801d818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d846:	2b75      	cmp	r3, #117	; 0x75
 801d848:	d0e6      	beq.n	801d818 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d84a:	2b78      	cmp	r3, #120	; 0x78
 801d84c:	e7f9      	b.n	801d842 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801d84e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d850:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d856:	b10b      	cbz	r3, 801d85c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801d858:	3302      	adds	r3, #2
 801d85a:	9309      	str	r3, [sp, #36]	; 0x24
 801d85c:	9b08      	ldr	r3, [sp, #32]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	f43f af2f 	beq.w	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d864:	3301      	adds	r3, #1
 801d866:	9308      	str	r3, [sp, #32]
 801d868:	e72b      	b.n	801d6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d86a:	2a00      	cmp	r2, #0
 801d86c:	d0e1      	beq.n	801d832 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d86e:	7813      	ldrb	r3, [r2, #0]
 801d870:	e7d6      	b.n	801d820 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801d872:	2b73      	cmp	r3, #115	; 0x73
 801d874:	d036      	beq.n	801d8e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801d876:	d807      	bhi.n	801d888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801d878:	2b6f      	cmp	r3, #111	; 0x6f
 801d87a:	d1da      	bne.n	801d832 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d87c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d87e:	1d25      	adds	r5, r4, #4
 801d880:	2308      	movs	r3, #8
 801d882:	eba8 0202 	sub.w	r2, r8, r2
 801d886:	e049      	b.n	801d91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d888:	2b75      	cmp	r3, #117	; 0x75
 801d88a:	d042      	beq.n	801d912 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801d88c:	2b78      	cmp	r3, #120	; 0x78
 801d88e:	d1d0      	bne.n	801d832 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801d890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d892:	1d25      	adds	r5, r4, #4
 801d894:	2310      	movs	r3, #16
 801d896:	eba8 0202 	sub.w	r2, r8, r2
 801d89a:	e03f      	b.n	801d91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801d89c:	6823      	ldr	r3, [r4, #0]
 801d89e:	1d25      	adds	r5, r4, #4
 801d8a0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d8a4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8aa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d051      	beq.n	801d956 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801d8b2:	881a      	ldrh	r2, [r3, #0]
 801d8b4:	a80d      	add	r0, sp, #52	; 0x34
 801d8b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801d8ba:	462c      	mov	r4, r5
 801d8bc:	9005      	str	r0, [sp, #20]
 801d8be:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801d8c2:	9004      	str	r0, [sp, #16]
 801d8c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d8c6:	9003      	str	r0, [sp, #12]
 801d8c8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801d8cc:	9002      	str	r0, [sp, #8]
 801d8ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d8d0:	9001      	str	r0, [sp, #4]
 801d8d2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801d8d6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d8da:	9000      	str	r0, [sp, #0]
 801d8dc:	a810      	add	r0, sp, #64	; 0x40
 801d8de:	f7ff fd49 	bl	801d374 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d8e2:	e7b7      	b.n	801d854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d8e4:	1d25      	adds	r5, r4, #4
 801d8e6:	6823      	ldr	r3, [r4, #0]
 801d8e8:	9310      	str	r3, [sp, #64]	; 0x40
 801d8ea:	e7dd      	b.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d8ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d8ee:	230a      	movs	r3, #10
 801d8f0:	4649      	mov	r1, r9
 801d8f2:	6820      	ldr	r0, [r4, #0]
 801d8f4:	eba8 0202 	sub.w	r2, r8, r2
 801d8f8:	1d25      	adds	r5, r4, #4
 801d8fa:	b292      	uxth	r2, r2
 801d8fc:	f7ff fd08 	bl	801d310 <_ZN8touchgfx7Unicode4itoaElPtti>
 801d900:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d904:	2b2d      	cmp	r3, #45	; 0x2d
 801d906:	d1cf      	bne.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d908:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d90e:	3302      	adds	r3, #2
 801d910:	e7ea      	b.n	801d8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801d912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d914:	1d25      	adds	r5, r4, #4
 801d916:	230a      	movs	r3, #10
 801d918:	eba8 0202 	sub.w	r2, r8, r2
 801d91c:	b292      	uxth	r2, r2
 801d91e:	4649      	mov	r1, r9
 801d920:	6820      	ldr	r0, [r4, #0]
 801d922:	f7ff fcd7 	bl	801d2d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d926:	e7bf      	b.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d92a:	2310      	movs	r3, #16
 801d92c:	4649      	mov	r1, r9
 801d92e:	6820      	ldr	r0, [r4, #0]
 801d930:	eba8 0202 	sub.w	r2, r8, r2
 801d934:	1d25      	adds	r5, r4, #4
 801d936:	b292      	uxth	r2, r2
 801d938:	f7ff fccc 	bl	801d2d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801d93c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801d940:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d944:	2b00      	cmp	r3, #0
 801d946:	d0af      	beq.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d948:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801d94c:	2919      	cmp	r1, #25
 801d94e:	d8f7      	bhi.n	801d940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d950:	3b20      	subs	r3, #32
 801d952:	8013      	strh	r3, [r2, #0]
 801d954:	e7f4      	b.n	801d940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801d956:	9a08      	ldr	r2, [sp, #32]
 801d958:	2a00      	cmp	r2, #0
 801d95a:	d0ab      	beq.n	801d8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d95c:	7812      	ldrb	r2, [r2, #0]
 801d95e:	e7a9      	b.n	801d8b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801d960:	2d00      	cmp	r5, #0
 801d962:	f43f af48 	beq.w	801d7f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801d966:	782d      	ldrb	r5, [r5, #0]
 801d968:	e745      	b.n	801d7f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801d96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d96a:	b507      	push	{r0, r1, r2, lr}
 801d96c:	9300      	str	r3, [sp, #0]
 801d96e:	4613      	mov	r3, r2
 801d970:	2200      	movs	r2, #0
 801d972:	f7ff fe92 	bl	801d69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d976:	b003      	add	sp, #12
 801d978:	f85d fb04 	ldr.w	pc, [sp], #4

0801d97c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d97c:	b40c      	push	{r2, r3}
 801d97e:	b507      	push	{r0, r1, r2, lr}
 801d980:	ab04      	add	r3, sp, #16
 801d982:	f853 2b04 	ldr.w	r2, [r3], #4
 801d986:	9301      	str	r3, [sp, #4]
 801d988:	f7ff ffef 	bl	801d96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d98c:	b003      	add	sp, #12
 801d98e:	f85d eb04 	ldr.w	lr, [sp], #4
 801d992:	b002      	add	sp, #8
 801d994:	4770      	bx	lr
	...

0801d998 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d998:	4b01      	ldr	r3, [pc, #4]	; (801d9a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d99a:	6018      	str	r0, [r3, #0]
 801d99c:	4770      	bx	lr
 801d99e:	bf00      	nop
 801d9a0:	2003c2d4 	.word	0x2003c2d4

0801d9a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d9a4:	4b06      	ldr	r3, [pc, #24]	; (801d9c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d9a6:	881a      	ldrh	r2, [r3, #0]
 801d9a8:	4282      	cmp	r2, r0
 801d9aa:	d807      	bhi.n	801d9bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d9ac:	4b05      	ldr	r3, [pc, #20]	; (801d9c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d9ae:	881b      	ldrh	r3, [r3, #0]
 801d9b0:	4413      	add	r3, r2
 801d9b2:	4298      	cmp	r0, r3
 801d9b4:	bfac      	ite	ge
 801d9b6:	2000      	movge	r0, #0
 801d9b8:	2001      	movlt	r0, #1
 801d9ba:	4770      	bx	lr
 801d9bc:	2000      	movs	r0, #0
 801d9be:	4770      	bx	lr
 801d9c0:	2003c2f4 	.word	0x2003c2f4
 801d9c4:	2003c2f8 	.word	0x2003c2f8

0801d9c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d9c8:	b508      	push	{r3, lr}
 801d9ca:	4601      	mov	r1, r0
 801d9cc:	f7ff ffea 	bl	801d9a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d9d0:	b118      	cbz	r0, 801d9da <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d9d2:	4b02      	ldr	r3, [pc, #8]	; (801d9dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d9da:	bd08      	pop	{r3, pc}
 801d9dc:	2003c2d8 	.word	0x2003c2d8

0801d9e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801d9e0:	b538      	push	{r3, r4, r5, lr}
 801d9e2:	4604      	mov	r4, r0
 801d9e4:	f7ff ffde 	bl	801d9a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d9e8:	b188      	cbz	r0, 801da0e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801d9ea:	4b09      	ldr	r3, [pc, #36]	; (801da10 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801d9ec:	881a      	ldrh	r2, [r3, #0]
 801d9ee:	4b09      	ldr	r3, [pc, #36]	; (801da14 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801d9f0:	1aa4      	subs	r4, r4, r2
 801d9f2:	220e      	movs	r2, #14
 801d9f4:	681d      	ldr	r5, [r3, #0]
 801d9f6:	4362      	muls	r2, r4
 801d9f8:	18ac      	adds	r4, r5, r2
 801d9fa:	7b23      	ldrb	r3, [r4, #12]
 801d9fc:	f013 0320 	ands.w	r3, r3, #32
 801da00:	bf17      	itett	ne
 801da02:	680b      	ldrne	r3, [r1, #0]
 801da04:	4618      	moveq	r0, r3
 801da06:	50ab      	strne	r3, [r5, r2]
 801da08:	684b      	ldrne	r3, [r1, #4]
 801da0a:	bf18      	it	ne
 801da0c:	6063      	strne	r3, [r4, #4]
 801da0e:	bd38      	pop	{r3, r4, r5, pc}
 801da10:	2003c2f4 	.word	0x2003c2f4
 801da14:	2003c2dc 	.word	0x2003c2dc

0801da18 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801da18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801da1c:	4606      	mov	r6, r0
 801da1e:	460c      	mov	r4, r1
 801da20:	f7ff ffc0 	bl	801d9a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801da24:	b918      	cbnz	r0, 801da2e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801da26:	2000      	movs	r0, #0
 801da28:	b002      	add	sp, #8
 801da2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da2e:	4608      	mov	r0, r1
 801da30:	f7f8 fafb 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801da34:	2800      	cmp	r0, #0
 801da36:	d1f6      	bne.n	801da26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801da38:	4b3f      	ldr	r3, [pc, #252]	; (801db38 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801da3a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801db3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801da3e:	881d      	ldrh	r5, [r3, #0]
 801da40:	f8d9 a000 	ldr.w	sl, [r9]
 801da44:	46c8      	mov	r8, r9
 801da46:	1b73      	subs	r3, r6, r5
 801da48:	250e      	movs	r5, #14
 801da4a:	435d      	muls	r5, r3
 801da4c:	eb0a 0705 	add.w	r7, sl, r5
 801da50:	7b3b      	ldrb	r3, [r7, #12]
 801da52:	f013 0f20 	tst.w	r3, #32
 801da56:	d0e6      	beq.n	801da26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801da58:	4621      	mov	r1, r4
 801da5a:	4638      	mov	r0, r7
 801da5c:	f7fc ff9c 	bl	801a998 <_ZNK8touchgfx4Rect8includesERKS0_>
 801da60:	2800      	cmp	r0, #0
 801da62:	d1e1      	bne.n	801da28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801da64:	4639      	mov	r1, r7
 801da66:	4620      	mov	r0, r4
 801da68:	f7fc ff96 	bl	801a998 <_ZNK8touchgfx4Rect8includesERKS0_>
 801da6c:	b108      	cbz	r0, 801da72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801da6e:	4621      	mov	r1, r4
 801da70:	e020      	b.n	801dab4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801da72:	f9b4 2000 	ldrsh.w	r2, [r4]
 801da76:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801da7a:	429a      	cmp	r2, r3
 801da7c:	d11e      	bne.n	801dabc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801da7e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801da82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801da86:	429a      	cmp	r2, r3
 801da88:	d118      	bne.n	801dabc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801da8a:	6820      	ldr	r0, [r4, #0]
 801da8c:	466b      	mov	r3, sp
 801da8e:	6861      	ldr	r1, [r4, #4]
 801da90:	c303      	stmia	r3!, {r0, r1}
 801da92:	4639      	mov	r1, r7
 801da94:	4668      	mov	r0, sp
 801da96:	f7fc ffa5 	bl	801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801da9a:	f8d9 3000 	ldr.w	r3, [r9]
 801da9e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801daa2:	442b      	add	r3, r5
 801daa4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801daa8:	4413      	add	r3, r2
 801daaa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801daae:	4293      	cmp	r3, r2
 801dab0:	dc04      	bgt.n	801dabc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801dab2:	4669      	mov	r1, sp
 801dab4:	4630      	mov	r0, r6
 801dab6:	f7ff ff93 	bl	801d9e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801daba:	e7b5      	b.n	801da28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801dabc:	f8d8 3000 	ldr.w	r3, [r8]
 801dac0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801dac4:	442b      	add	r3, r5
 801dac6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801daca:	4291      	cmp	r1, r2
 801dacc:	d119      	bne.n	801db02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801dace:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801dad2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801dad6:	4291      	cmp	r1, r2
 801dad8:	d113      	bne.n	801db02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801dada:	6820      	ldr	r0, [r4, #0]
 801dadc:	466a      	mov	r2, sp
 801dade:	6861      	ldr	r1, [r4, #4]
 801dae0:	c203      	stmia	r2!, {r0, r1}
 801dae2:	4619      	mov	r1, r3
 801dae4:	4668      	mov	r0, sp
 801dae6:	f7fc ff7d 	bl	801a9e4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801daea:	f8d8 3000 	ldr.w	r3, [r8]
 801daee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801daf2:	442b      	add	r3, r5
 801daf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801daf8:	4413      	add	r3, r2
 801dafa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801dafe:	4293      	cmp	r3, r2
 801db00:	ddd7      	ble.n	801dab2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801db02:	4620      	mov	r0, r4
 801db04:	f7f8 fa91 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801db08:	b990      	cbnz	r0, 801db30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801db0a:	88a7      	ldrh	r7, [r4, #4]
 801db0c:	88e3      	ldrh	r3, [r4, #6]
 801db0e:	fb17 f703 	smulbb	r7, r7, r3
 801db12:	f8d8 3000 	ldr.w	r3, [r8]
 801db16:	441d      	add	r5, r3
 801db18:	4628      	mov	r0, r5
 801db1a:	f7f8 fa86 	bl	801602a <_ZNK8touchgfx4Rect7isEmptyEv>
 801db1e:	b948      	cbnz	r0, 801db34 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801db20:	88ab      	ldrh	r3, [r5, #4]
 801db22:	88ea      	ldrh	r2, [r5, #6]
 801db24:	fb13 f302 	smulbb	r3, r3, r2
 801db28:	42bb      	cmp	r3, r7
 801db2a:	f6bf af7c 	bge.w	801da26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801db2e:	e79e      	b.n	801da6e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801db30:	2700      	movs	r7, #0
 801db32:	e7ee      	b.n	801db12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801db34:	2300      	movs	r3, #0
 801db36:	e7f7      	b.n	801db28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801db38:	2003c2f4 	.word	0x2003c2f4
 801db3c:	2003c2dc 	.word	0x2003c2dc

0801db40 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db42:	4c24      	ldr	r4, [pc, #144]	; (801dbd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801db44:	6823      	ldr	r3, [r4, #0]
 801db46:	2b00      	cmp	r3, #0
 801db48:	d042      	beq.n	801dbd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801db4a:	4a23      	ldr	r2, [pc, #140]	; (801dbd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801db4c:	4d23      	ldr	r5, [pc, #140]	; (801dbdc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801db4e:	8811      	ldrh	r1, [r2, #0]
 801db50:	f8b5 c000 	ldrh.w	ip, [r5]
 801db54:	4822      	ldr	r0, [pc, #136]	; (801dbe0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801db56:	4461      	add	r1, ip
 801db58:	1c4a      	adds	r2, r1, #1
 801db5a:	008f      	lsls	r7, r1, #2
 801db5c:	f022 0201 	bic.w	r2, r2, #1
 801db60:	19de      	adds	r6, r3, r7
 801db62:	0412      	lsls	r2, r2, #16
 801db64:	6006      	str	r6, [r0, #0]
 801db66:	4e1f      	ldr	r6, [pc, #124]	; (801dbe4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801db68:	0c12      	lsrs	r2, r2, #16
 801db6a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801db6e:	19da      	adds	r2, r3, r7
 801db70:	6032      	str	r2, [r6, #0]
 801db72:	220e      	movs	r2, #14
 801db74:	fb02 f20c 	mul.w	r2, r2, ip
 801db78:	3203      	adds	r2, #3
 801db7a:	f022 0203 	bic.w	r2, r2, #3
 801db7e:	443a      	add	r2, r7
 801db80:	4f19      	ldr	r7, [pc, #100]	; (801dbe8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801db82:	4413      	add	r3, r2
 801db84:	603b      	str	r3, [r7, #0]
 801db86:	2300      	movs	r3, #0
 801db88:	4f18      	ldr	r7, [pc, #96]	; (801dbec <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801db8a:	469c      	mov	ip, r3
 801db8c:	803b      	strh	r3, [r7, #0]
 801db8e:	4f18      	ldr	r7, [pc, #96]	; (801dbf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801db90:	683f      	ldr	r7, [r7, #0]
 801db92:	1aba      	subs	r2, r7, r2
 801db94:	4f17      	ldr	r7, [pc, #92]	; (801dbf4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801db96:	603a      	str	r2, [r7, #0]
 801db98:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801db9c:	4a16      	ldr	r2, [pc, #88]	; (801dbf8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801db9e:	8013      	strh	r3, [r2, #0]
 801dba0:	428b      	cmp	r3, r1
 801dba2:	d10d      	bne.n	801dbc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801dba4:	882d      	ldrh	r5, [r5, #0]
 801dba6:	2300      	movs	r3, #0
 801dba8:	6830      	ldr	r0, [r6, #0]
 801dbaa:	240e      	movs	r4, #14
 801dbac:	429d      	cmp	r5, r3
 801dbae:	d90f      	bls.n	801dbd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dbb0:	fb04 0203 	mla	r2, r4, r3, r0
 801dbb4:	3301      	adds	r3, #1
 801dbb6:	7b11      	ldrb	r1, [r2, #12]
 801dbb8:	f36f 1145 	bfc	r1, #5, #1
 801dbbc:	7311      	strb	r1, [r2, #12]
 801dbbe:	e7f5      	b.n	801dbac <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801dbc0:	6822      	ldr	r2, [r4, #0]
 801dbc2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801dbc6:	6802      	ldr	r2, [r0, #0]
 801dbc8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dbcc:	3301      	adds	r3, #1
 801dbce:	e7e7      	b.n	801dba0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbd2:	bf00      	nop
 801dbd4:	2003c2d8 	.word	0x2003c2d8
 801dbd8:	2003c2f4 	.word	0x2003c2f4
 801dbdc:	2003c2f8 	.word	0x2003c2f8
 801dbe0:	2003c2ec 	.word	0x2003c2ec
 801dbe4:	2003c2dc 	.word	0x2003c2dc
 801dbe8:	2003c2e4 	.word	0x2003c2e4
 801dbec:	2003c2f6 	.word	0x2003c2f6
 801dbf0:	2003c2e0 	.word	0x2003c2e0
 801dbf4:	2003c2f0 	.word	0x2003c2f0
 801dbf8:	2003c2e8 	.word	0x2003c2e8

0801dbfc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dbfc:	4b06      	ldr	r3, [pc, #24]	; (801dc18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	b943      	cbnz	r3, 801dc14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc02:	b139      	cbz	r1, 801dc14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc04:	4b05      	ldr	r3, [pc, #20]	; (801dc1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dc06:	801a      	strh	r2, [r3, #0]
 801dc08:	4b05      	ldr	r3, [pc, #20]	; (801dc20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dc0a:	6019      	str	r1, [r3, #0]
 801dc0c:	4b05      	ldr	r3, [pc, #20]	; (801dc24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801dc0e:	6018      	str	r0, [r3, #0]
 801dc10:	f7ff bf96 	b.w	801db40 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dc14:	4770      	bx	lr
 801dc16:	bf00      	nop
 801dc18:	2003c2e4 	.word	0x2003c2e4
 801dc1c:	2003c2f8 	.word	0x2003c2f8
 801dc20:	2003c2e0 	.word	0x2003c2e0
 801dc24:	2003c2d8 	.word	0x2003c2d8

0801dc28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dc28:	b470      	push	{r4, r5, r6}
 801dc2a:	4c07      	ldr	r4, [pc, #28]	; (801dc48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dc2c:	4605      	mov	r5, r0
 801dc2e:	4610      	mov	r0, r2
 801dc30:	9a03      	ldr	r2, [sp, #12]
 801dc32:	6826      	ldr	r6, [r4, #0]
 801dc34:	b936      	cbnz	r6, 801dc44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dc36:	6025      	str	r5, [r4, #0]
 801dc38:	4c04      	ldr	r4, [pc, #16]	; (801dc4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dc3a:	8021      	strh	r1, [r4, #0]
 801dc3c:	4619      	mov	r1, r3
 801dc3e:	bc70      	pop	{r4, r5, r6}
 801dc40:	f7ff bfdc 	b.w	801dbfc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dc44:	bc70      	pop	{r4, r5, r6}
 801dc46:	4770      	bx	lr
 801dc48:	2003c2fc 	.word	0x2003c2fc
 801dc4c:	2003c2f4 	.word	0x2003c2f4

0801dc50 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dc50:	4a12      	ldr	r2, [pc, #72]	; (801dc9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801dc52:	8803      	ldrh	r3, [r0, #0]
 801dc54:	8812      	ldrh	r2, [r2, #0]
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d207      	bcs.n	801dc6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801dc5a:	4a11      	ldr	r2, [pc, #68]	; (801dca0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dc5c:	2114      	movs	r1, #20
 801dc5e:	6812      	ldr	r2, [r2, #0]
 801dc60:	fb01 2303 	mla	r3, r1, r3, r2
 801dc64:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801dc68:	4770      	bx	lr
 801dc6a:	490e      	ldr	r1, [pc, #56]	; (801dca4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dc6c:	8809      	ldrh	r1, [r1, #0]
 801dc6e:	4411      	add	r1, r2
 801dc70:	428b      	cmp	r3, r1
 801dc72:	da04      	bge.n	801dc7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801dc74:	1a9b      	subs	r3, r3, r2
 801dc76:	4a0c      	ldr	r2, [pc, #48]	; (801dca8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dc78:	210e      	movs	r1, #14
 801dc7a:	6812      	ldr	r2, [r2, #0]
 801dc7c:	e7f0      	b.n	801dc60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801dc7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d108      	bne.n	801dc98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801dc86:	4b09      	ldr	r3, [pc, #36]	; (801dcac <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dc88:	781b      	ldrb	r3, [r3, #0]
 801dc8a:	b91b      	cbnz	r3, 801dc94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801dc8c:	4b08      	ldr	r3, [pc, #32]	; (801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dc8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dc92:	4770      	bx	lr
 801dc94:	4b07      	ldr	r3, [pc, #28]	; (801dcb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dc96:	e7fa      	b.n	801dc8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801dc98:	2000      	movs	r0, #0
 801dc9a:	4770      	bx	lr
 801dc9c:	2003c2f4 	.word	0x2003c2f4
 801dca0:	2003c2fc 	.word	0x2003c2fc
 801dca4:	2003c2f8 	.word	0x2003c2f8
 801dca8:	2003c2dc 	.word	0x2003c2dc
 801dcac:	2003c264 	.word	0x2003c264
 801dcb0:	2003c266 	.word	0x2003c266
 801dcb4:	2003c268 	.word	0x2003c268

0801dcb8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dcb8:	4a12      	ldr	r2, [pc, #72]	; (801dd04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dcba:	8803      	ldrh	r3, [r0, #0]
 801dcbc:	8812      	ldrh	r2, [r2, #0]
 801dcbe:	4293      	cmp	r3, r2
 801dcc0:	d207      	bcs.n	801dcd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dcc2:	4a11      	ldr	r2, [pc, #68]	; (801dd08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dcc4:	2114      	movs	r1, #20
 801dcc6:	6812      	ldr	r2, [r2, #0]
 801dcc8:	fb01 2303 	mla	r3, r1, r3, r2
 801dccc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dcd0:	4770      	bx	lr
 801dcd2:	490e      	ldr	r1, [pc, #56]	; (801dd0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dcd4:	8809      	ldrh	r1, [r1, #0]
 801dcd6:	4411      	add	r1, r2
 801dcd8:	428b      	cmp	r3, r1
 801dcda:	da04      	bge.n	801dce6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dcdc:	1a9b      	subs	r3, r3, r2
 801dcde:	4a0c      	ldr	r2, [pc, #48]	; (801dd10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dce0:	210e      	movs	r1, #14
 801dce2:	6812      	ldr	r2, [r2, #0]
 801dce4:	e7f0      	b.n	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dce6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dcea:	4293      	cmp	r3, r2
 801dcec:	d108      	bne.n	801dd00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dcee:	4b09      	ldr	r3, [pc, #36]	; (801dd14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dcf0:	781b      	ldrb	r3, [r3, #0]
 801dcf2:	b91b      	cbnz	r3, 801dcfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dcf4:	4b08      	ldr	r3, [pc, #32]	; (801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dcf6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dcfa:	4770      	bx	lr
 801dcfc:	4b07      	ldr	r3, [pc, #28]	; (801dd1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dcfe:	e7fa      	b.n	801dcf6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dd00:	2000      	movs	r0, #0
 801dd02:	4770      	bx	lr
 801dd04:	2003c2f4 	.word	0x2003c2f4
 801dd08:	2003c2fc 	.word	0x2003c2fc
 801dd0c:	2003c2f8 	.word	0x2003c2f8
 801dd10:	2003c2dc 	.word	0x2003c2dc
 801dd14:	2003c264 	.word	0x2003c264
 801dd18:	2003c268 	.word	0x2003c268
 801dd1c:	2003c266 	.word	0x2003c266

0801dd20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dd20:	4a17      	ldr	r2, [pc, #92]	; (801dd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801dd22:	8803      	ldrh	r3, [r0, #0]
 801dd24:	8812      	ldrh	r2, [r2, #0]
 801dd26:	4293      	cmp	r3, r2
 801dd28:	d213      	bcs.n	801dd52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801dd2a:	4a16      	ldr	r2, [pc, #88]	; (801dd84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dd2c:	2114      	movs	r1, #20
 801dd2e:	6812      	ldr	r2, [r2, #0]
 801dd30:	fb01 2303 	mla	r3, r1, r3, r2
 801dd34:	8a1a      	ldrh	r2, [r3, #16]
 801dd36:	8919      	ldrh	r1, [r3, #8]
 801dd38:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dd3c:	428a      	cmp	r2, r1
 801dd3e:	db1d      	blt.n	801dd7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dd40:	8a58      	ldrh	r0, [r3, #18]
 801dd42:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801dd46:	895b      	ldrh	r3, [r3, #10]
 801dd48:	4298      	cmp	r0, r3
 801dd4a:	bfac      	ite	ge
 801dd4c:	2000      	movge	r0, #0
 801dd4e:	2001      	movlt	r0, #1
 801dd50:	4770      	bx	lr
 801dd52:	490d      	ldr	r1, [pc, #52]	; (801dd88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dd54:	8809      	ldrh	r1, [r1, #0]
 801dd56:	4411      	add	r1, r2
 801dd58:	428b      	cmp	r3, r1
 801dd5a:	da0d      	bge.n	801dd78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801dd5c:	1a9b      	subs	r3, r3, r2
 801dd5e:	4a0b      	ldr	r2, [pc, #44]	; (801dd8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801dd60:	210e      	movs	r1, #14
 801dd62:	6812      	ldr	r2, [r2, #0]
 801dd64:	fb01 2303 	mla	r3, r1, r3, r2
 801dd68:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801dd6c:	891a      	ldrh	r2, [r3, #8]
 801dd6e:	4291      	cmp	r1, r2
 801dd70:	db04      	blt.n	801dd7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dd72:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dd76:	e7e6      	b.n	801dd46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801dd78:	2000      	movs	r0, #0
 801dd7a:	4770      	bx	lr
 801dd7c:	2001      	movs	r0, #1
 801dd7e:	4770      	bx	lr
 801dd80:	2003c2f4 	.word	0x2003c2f4
 801dd84:	2003c2fc 	.word	0x2003c2fc
 801dd88:	2003c2f8 	.word	0x2003c2f8
 801dd8c:	2003c2dc 	.word	0x2003c2dc

0801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801dd90:	4a12      	ldr	r2, [pc, #72]	; (801dddc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dd92:	8803      	ldrh	r3, [r0, #0]
 801dd94:	8811      	ldrh	r1, [r2, #0]
 801dd96:	428b      	cmp	r3, r1
 801dd98:	d20b      	bcs.n	801ddb2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801dd9a:	4a11      	ldr	r2, [pc, #68]	; (801dde0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dd9c:	6812      	ldr	r2, [r2, #0]
 801dd9e:	b112      	cbz	r2, 801dda6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dda0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dda4:	b9c0      	cbnz	r0, 801ddd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801dda6:	4a0f      	ldr	r2, [pc, #60]	; (801dde4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dda8:	6811      	ldr	r1, [r2, #0]
 801ddaa:	2214      	movs	r2, #20
 801ddac:	4353      	muls	r3, r2
 801ddae:	58c8      	ldr	r0, [r1, r3]
 801ddb0:	4770      	bx	lr
 801ddb2:	4a0d      	ldr	r2, [pc, #52]	; (801dde8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ddb4:	8812      	ldrh	r2, [r2, #0]
 801ddb6:	440a      	add	r2, r1
 801ddb8:	4293      	cmp	r3, r2
 801ddba:	da04      	bge.n	801ddc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ddbc:	4a08      	ldr	r2, [pc, #32]	; (801dde0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ddbe:	6812      	ldr	r2, [r2, #0]
 801ddc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ddc4:	4770      	bx	lr
 801ddc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	d103      	bne.n	801ddd6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ddce:	4b07      	ldr	r3, [pc, #28]	; (801ddec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ddd4:	4770      	bx	lr
 801ddd6:	2000      	movs	r0, #0
 801ddd8:	4770      	bx	lr
 801ddda:	bf00      	nop
 801dddc:	2003c2f4 	.word	0x2003c2f4
 801dde0:	2003c2d8 	.word	0x2003c2d8
 801dde4:	2003c2fc 	.word	0x2003c2fc
 801dde8:	2003c2f8 	.word	0x2003c2f8
 801ddec:	2003c26c 	.word	0x2003c26c

0801ddf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ddf0:	4b24      	ldr	r3, [pc, #144]	; (801de84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ddf2:	8802      	ldrh	r2, [r0, #0]
 801ddf4:	8818      	ldrh	r0, [r3, #0]
 801ddf6:	4282      	cmp	r2, r0
 801ddf8:	d221      	bcs.n	801de3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ddfa:	4b23      	ldr	r3, [pc, #140]	; (801de88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ddfc:	6819      	ldr	r1, [r3, #0]
 801ddfe:	2314      	movs	r3, #20
 801de00:	fb03 1302 	mla	r3, r3, r2, r1
 801de04:	6858      	ldr	r0, [r3, #4]
 801de06:	2800      	cmp	r0, #0
 801de08:	d03a      	beq.n	801de80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de0a:	4920      	ldr	r1, [pc, #128]	; (801de8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801de0c:	6809      	ldr	r1, [r1, #0]
 801de0e:	2900      	cmp	r1, #0
 801de10:	d036      	beq.n	801de80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801de16:	2900      	cmp	r1, #0
 801de18:	d032      	beq.n	801de80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de1a:	891a      	ldrh	r2, [r3, #8]
 801de1c:	8958      	ldrh	r0, [r3, #10]
 801de1e:	4350      	muls	r0, r2
 801de20:	7c5a      	ldrb	r2, [r3, #17]
 801de22:	7cdb      	ldrb	r3, [r3, #19]
 801de24:	0952      	lsrs	r2, r2, #5
 801de26:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801de2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801de2e:	2b0b      	cmp	r3, #11
 801de30:	bf18      	it	ne
 801de32:	0040      	lslne	r0, r0, #1
 801de34:	3003      	adds	r0, #3
 801de36:	f020 0003 	bic.w	r0, r0, #3
 801de3a:	4408      	add	r0, r1
 801de3c:	4770      	bx	lr
 801de3e:	4b14      	ldr	r3, [pc, #80]	; (801de90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801de40:	881b      	ldrh	r3, [r3, #0]
 801de42:	4403      	add	r3, r0
 801de44:	429a      	cmp	r2, r3
 801de46:	da1a      	bge.n	801de7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801de48:	4b12      	ldr	r3, [pc, #72]	; (801de94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801de4a:	1a10      	subs	r0, r2, r0
 801de4c:	210e      	movs	r1, #14
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	fb01 3000 	mla	r0, r1, r0, r3
 801de54:	7b03      	ldrb	r3, [r0, #12]
 801de56:	f003 031f 	and.w	r3, r3, #31
 801de5a:	2b0b      	cmp	r3, #11
 801de5c:	d10b      	bne.n	801de76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801de5e:	8903      	ldrh	r3, [r0, #8]
 801de60:	8940      	ldrh	r0, [r0, #10]
 801de62:	4358      	muls	r0, r3
 801de64:	4b09      	ldr	r3, [pc, #36]	; (801de8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801de66:	3003      	adds	r0, #3
 801de68:	6819      	ldr	r1, [r3, #0]
 801de6a:	f020 0303 	bic.w	r3, r0, #3
 801de6e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801de72:	4418      	add	r0, r3
 801de74:	4770      	bx	lr
 801de76:	2b0d      	cmp	r3, #13
 801de78:	d101      	bne.n	801de7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801de7a:	300d      	adds	r0, #13
 801de7c:	4770      	bx	lr
 801de7e:	2000      	movs	r0, #0
 801de80:	4770      	bx	lr
 801de82:	bf00      	nop
 801de84:	2003c2f4 	.word	0x2003c2f4
 801de88:	2003c2fc 	.word	0x2003c2fc
 801de8c:	2003c2d8 	.word	0x2003c2d8
 801de90:	2003c2f8 	.word	0x2003c2f8
 801de94:	2003c2dc 	.word	0x2003c2dc

0801de98 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801de98:	4a17      	ldr	r2, [pc, #92]	; (801def8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801de9a:	b510      	push	{r4, lr}
 801de9c:	8803      	ldrh	r3, [r0, #0]
 801de9e:	8812      	ldrh	r2, [r2, #0]
 801dea0:	4293      	cmp	r3, r2
 801dea2:	d20c      	bcs.n	801debe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801dea4:	4a15      	ldr	r2, [pc, #84]	; (801defc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801dea6:	2114      	movs	r1, #20
 801dea8:	6812      	ldr	r2, [r2, #0]
 801deaa:	fb01 2303 	mla	r3, r1, r3, r2
 801deae:	7c58      	ldrb	r0, [r3, #17]
 801deb0:	0942      	lsrs	r2, r0, #5
 801deb2:	7cd8      	ldrb	r0, [r3, #19]
 801deb4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801deb8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801debc:	bd10      	pop	{r4, pc}
 801debe:	4910      	ldr	r1, [pc, #64]	; (801df00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801dec0:	8809      	ldrh	r1, [r1, #0]
 801dec2:	4411      	add	r1, r2
 801dec4:	428b      	cmp	r3, r1
 801dec6:	da09      	bge.n	801dedc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dec8:	1a9b      	subs	r3, r3, r2
 801deca:	4a0e      	ldr	r2, [pc, #56]	; (801df04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801decc:	210e      	movs	r1, #14
 801dece:	6812      	ldr	r2, [r2, #0]
 801ded0:	fb01 2303 	mla	r3, r1, r3, r2
 801ded4:	7b18      	ldrb	r0, [r3, #12]
 801ded6:	f000 001f 	and.w	r0, r0, #31
 801deda:	e7ef      	b.n	801debc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801dedc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dee0:	4293      	cmp	r3, r2
 801dee2:	d106      	bne.n	801def2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801dee4:	f7f0 fb7e 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801dee8:	6803      	ldr	r3, [r0, #0]
 801deea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801def0:	4718      	bx	r3
 801def2:	2000      	movs	r0, #0
 801def4:	e7e2      	b.n	801debc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801def6:	bf00      	nop
 801def8:	2003c2f4 	.word	0x2003c2f4
 801defc:	2003c2fc 	.word	0x2003c2fc
 801df00:	2003c2f8 	.word	0x2003c2f8
 801df04:	2003c2dc 	.word	0x2003c2dc

0801df08 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801df08:	2020      	movs	r0, #32
 801df0a:	4770      	bx	lr

0801df0c <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801df0c:	2002      	movs	r0, #2
 801df0e:	4770      	bx	lr

0801df10 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801df10:	4b02      	ldr	r3, [pc, #8]	; (801df1c <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801df12:	8818      	ldrh	r0, [r3, #0]
 801df14:	0080      	lsls	r0, r0, #2
 801df16:	b280      	uxth	r0, r0
 801df18:	4770      	bx	lr
 801df1a:	bf00      	nop
 801df1c:	2003c266 	.word	0x2003c266

0801df20 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801df20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df24:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801df28:	980c      	ldr	r0, [sp, #48]	; 0x30
 801df2a:	f1bc 0f00 	cmp.w	ip, #0
 801df2e:	d073      	beq.n	801e018 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801df30:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801df34:	2c00      	cmp	r4, #0
 801df36:	dd6f      	ble.n	801e018 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801df38:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801df3c:	2e00      	cmp	r6, #0
 801df3e:	dd6b      	ble.n	801e018 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801df40:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801df44:	4356      	muls	r6, r2
 801df46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df4a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801df4e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801df52:	fb02 3305 	mla	r3, r2, r5, r3
 801df56:	eba2 0204 	sub.w	r2, r2, r4
 801df5a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801df5e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801df62:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801df66:	d10a      	bne.n	801df7e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801df68:	42b1      	cmp	r1, r6
 801df6a:	d255      	bcs.n	801e018 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801df6c:	eb01 030a 	add.w	r3, r1, sl
 801df70:	4299      	cmp	r1, r3
 801df72:	d202      	bcs.n	801df7a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801df74:	f841 0b04 	str.w	r0, [r1], #4
 801df78:	e7fa      	b.n	801df70 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801df7a:	4411      	add	r1, r2
 801df7c:	e7f4      	b.n	801df68 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801df7e:	fa1f fe8c 	uxth.w	lr, ip
 801df82:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801df86:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801df8a:	fa5f f980 	uxtb.w	r9, r0
 801df8e:	fb03 f30e 	mul.w	r3, r3, lr
 801df92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801df96:	fb08 f80e 	mul.w	r8, r8, lr
 801df9a:	9301      	str	r3, [sp, #4]
 801df9c:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801dfa0:	fb09 f90e 	mul.w	r9, r9, lr
 801dfa4:	9300      	str	r3, [sp, #0]
 801dfa6:	42b1      	cmp	r1, r6
 801dfa8:	d236      	bcs.n	801e018 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801dfaa:	eb01 0b0a 	add.w	fp, r1, sl
 801dfae:	4559      	cmp	r1, fp
 801dfb0:	d230      	bcs.n	801e014 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801dfb2:	680b      	ldr	r3, [r1, #0]
 801dfb4:	0e1c      	lsrs	r4, r3, #24
 801dfb6:	d102      	bne.n	801dfbe <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801dfb8:	9b00      	ldr	r3, [sp, #0]
 801dfba:	600b      	str	r3, [r1, #0]
 801dfbc:	e7f7      	b.n	801dfae <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801dfbe:	fb04 f00e 	mul.w	r0, r4, lr
 801dfc2:	eb0c 0504 	add.w	r5, ip, r4
 801dfc6:	3104      	adds	r1, #4
 801dfc8:	1c47      	adds	r7, r0, #1
 801dfca:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801dfce:	1238      	asrs	r0, r7, #8
 801dfd0:	1a27      	subs	r7, r4, r0
 801dfd2:	1a2d      	subs	r5, r5, r0
 801dfd4:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801dfd8:	9801      	ldr	r0, [sp, #4]
 801dfda:	b2ed      	uxtb	r5, r5
 801dfdc:	fb07 0404 	mla	r4, r7, r4, r0
 801dfe0:	b2d8      	uxtb	r0, r3
 801dfe2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dfe6:	fb07 9000 	mla	r0, r7, r0, r9
 801dfea:	fbb4 f4f5 	udiv	r4, r4, r5
 801dfee:	fbb0 f0f5 	udiv	r0, r0, r5
 801dff2:	0424      	lsls	r4, r4, #16
 801dff4:	b2c0      	uxtb	r0, r0
 801dff6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 801dffa:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801dffe:	4320      	orrs	r0, r4
 801e000:	fb07 8403 	mla	r4, r7, r3, r8
 801e004:	fbb4 f4f5 	udiv	r4, r4, r5
 801e008:	0224      	lsls	r4, r4, #8
 801e00a:	b2a4      	uxth	r4, r4
 801e00c:	4320      	orrs	r0, r4
 801e00e:	f841 0c04 	str.w	r0, [r1, #-4]
 801e012:	e7cc      	b.n	801dfae <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801e014:	4411      	add	r1, r2
 801e016:	e7c6      	b.n	801dfa6 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801e018:	b003      	add	sp, #12
 801e01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e020 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e020:	2bff      	cmp	r3, #255	; 0xff
 801e022:	d061      	beq.n	801e0e8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e024:	2a33      	cmp	r2, #51	; 0x33
 801e026:	d83d      	bhi.n	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e028:	e8df f012 	tbh	[pc, r2, lsl #1]
 801e02c:	00500054 	.word	0x00500054
 801e030:	004e0052 	.word	0x004e0052
 801e034:	00560058 	.word	0x00560058
 801e038:	003c003c 	.word	0x003c003c
 801e03c:	010000fe 	.word	0x010000fe
 801e040:	010000fe 	.word	0x010000fe
 801e044:	003c003c 	.word	0x003c003c
 801e048:	003c003c 	.word	0x003c003c
 801e04c:	003c003c 	.word	0x003c003c
 801e050:	003c003c 	.word	0x003c003c
 801e054:	003c003c 	.word	0x003c003c
 801e058:	003c003c 	.word	0x003c003c
 801e05c:	003c003c 	.word	0x003c003c
 801e060:	003c003c 	.word	0x003c003c
 801e064:	003c003c 	.word	0x003c003c
 801e068:	003c003c 	.word	0x003c003c
 801e06c:	003c003c 	.word	0x003c003c
 801e070:	003c003c 	.word	0x003c003c
 801e074:	003c003c 	.word	0x003c003c
 801e078:	003c003c 	.word	0x003c003c
 801e07c:	003c003c 	.word	0x003c003c
 801e080:	003c003c 	.word	0x003c003c
 801e084:	00340042 	.word	0x00340042
 801e088:	00e400eb 	.word	0x00e400eb
 801e08c:	005a005c 	.word	0x005a005c
 801e090:	005a005c 	.word	0x005a005c
 801e094:	684b      	ldr	r3, [r1, #4]
 801e096:	781b      	ldrb	r3, [r3, #0]
 801e098:	2b01      	cmp	r3, #1
 801e09a:	d005      	beq.n	801e0a8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e09c:	f0c0 80af 	bcc.w	801e1fe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801e0a0:	2b02      	cmp	r3, #2
 801e0a2:	d003      	beq.n	801e0ac <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e0a4:	2000      	movs	r0, #0
 801e0a6:	4770      	bx	lr
 801e0a8:	6a00      	ldr	r0, [r0, #32]
 801e0aa:	4770      	bx	lr
 801e0ac:	6900      	ldr	r0, [r0, #16]
 801e0ae:	4770      	bx	lr
 801e0b0:	684b      	ldr	r3, [r1, #4]
 801e0b2:	781b      	ldrb	r3, [r3, #0]
 801e0b4:	2b01      	cmp	r3, #1
 801e0b6:	d005      	beq.n	801e0c4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 801e0b8:	f0c0 80a8 	bcc.w	801e20c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801e0bc:	2b02      	cmp	r3, #2
 801e0be:	d1f1      	bne.n	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e0c0:	6880      	ldr	r0, [r0, #8]
 801e0c2:	4770      	bx	lr
 801e0c4:	6980      	ldr	r0, [r0, #24]
 801e0c6:	4770      	bx	lr
 801e0c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e0ca:	4770      	bx	lr
 801e0cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e0ce:	4770      	bx	lr
 801e0d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e0d2:	4770      	bx	lr
 801e0d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e0d6:	4770      	bx	lr
 801e0d8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e0da:	4770      	bx	lr
 801e0dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e0de:	4770      	bx	lr
 801e0e0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e0e2:	4770      	bx	lr
 801e0e4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e0e6:	4770      	bx	lr
 801e0e8:	2a33      	cmp	r2, #51	; 0x33
 801e0ea:	d8db      	bhi.n	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e0ec:	a301      	add	r3, pc, #4	; (adr r3, 801e0f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801e0ee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801e0f2:	bf00      	nop
 801e0f4:	0801e21d 	.word	0x0801e21d
 801e0f8:	0801e215 	.word	0x0801e215
 801e0fc:	0801e219 	.word	0x0801e219
 801e100:	0801e211 	.word	0x0801e211
 801e104:	0801e225 	.word	0x0801e225
 801e108:	0801e221 	.word	0x0801e221
 801e10c:	0801e0a5 	.word	0x0801e0a5
 801e110:	0801e0a5 	.word	0x0801e0a5
 801e114:	0801e229 	.word	0x0801e229
 801e118:	0801e22d 	.word	0x0801e22d
 801e11c:	0801e229 	.word	0x0801e229
 801e120:	0801e22d 	.word	0x0801e22d
 801e124:	0801e0a5 	.word	0x0801e0a5
 801e128:	0801e0a5 	.word	0x0801e0a5
 801e12c:	0801e0a5 	.word	0x0801e0a5
 801e130:	0801e0a5 	.word	0x0801e0a5
 801e134:	0801e0a5 	.word	0x0801e0a5
 801e138:	0801e0a5 	.word	0x0801e0a5
 801e13c:	0801e0a5 	.word	0x0801e0a5
 801e140:	0801e0a5 	.word	0x0801e0a5
 801e144:	0801e0a5 	.word	0x0801e0a5
 801e148:	0801e0a5 	.word	0x0801e0a5
 801e14c:	0801e0a5 	.word	0x0801e0a5
 801e150:	0801e0a5 	.word	0x0801e0a5
 801e154:	0801e0a5 	.word	0x0801e0a5
 801e158:	0801e0a5 	.word	0x0801e0a5
 801e15c:	0801e0a5 	.word	0x0801e0a5
 801e160:	0801e0a5 	.word	0x0801e0a5
 801e164:	0801e0a5 	.word	0x0801e0a5
 801e168:	0801e0a5 	.word	0x0801e0a5
 801e16c:	0801e0a5 	.word	0x0801e0a5
 801e170:	0801e0a5 	.word	0x0801e0a5
 801e174:	0801e0a5 	.word	0x0801e0a5
 801e178:	0801e0a5 	.word	0x0801e0a5
 801e17c:	0801e0a5 	.word	0x0801e0a5
 801e180:	0801e0a5 	.word	0x0801e0a5
 801e184:	0801e0a5 	.word	0x0801e0a5
 801e188:	0801e0a5 	.word	0x0801e0a5
 801e18c:	0801e0a5 	.word	0x0801e0a5
 801e190:	0801e0a5 	.word	0x0801e0a5
 801e194:	0801e0a5 	.word	0x0801e0a5
 801e198:	0801e0a5 	.word	0x0801e0a5
 801e19c:	0801e0a5 	.word	0x0801e0a5
 801e1a0:	0801e0a5 	.word	0x0801e0a5
 801e1a4:	0801e1dd 	.word	0x0801e1dd
 801e1a8:	0801e1c5 	.word	0x0801e1c5
 801e1ac:	0801e203 	.word	0x0801e203
 801e1b0:	0801e1f5 	.word	0x0801e1f5
 801e1b4:	0801e235 	.word	0x0801e235
 801e1b8:	0801e231 	.word	0x0801e231
 801e1bc:	0801e235 	.word	0x0801e235
 801e1c0:	0801e231 	.word	0x0801e231
 801e1c4:	684b      	ldr	r3, [r1, #4]
 801e1c6:	781b      	ldrb	r3, [r3, #0]
 801e1c8:	2b01      	cmp	r3, #1
 801e1ca:	d005      	beq.n	801e1d8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801e1cc:	d317      	bcc.n	801e1fe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801e1ce:	2b02      	cmp	r3, #2
 801e1d0:	f47f af68 	bne.w	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e1d4:	6940      	ldr	r0, [r0, #20]
 801e1d6:	4770      	bx	lr
 801e1d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e1da:	4770      	bx	lr
 801e1dc:	684b      	ldr	r3, [r1, #4]
 801e1de:	781b      	ldrb	r3, [r3, #0]
 801e1e0:	2b01      	cmp	r3, #1
 801e1e2:	d005      	beq.n	801e1f0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 801e1e4:	d312      	bcc.n	801e20c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801e1e6:	2b02      	cmp	r3, #2
 801e1e8:	f47f af5c 	bne.w	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e1ec:	68c0      	ldr	r0, [r0, #12]
 801e1ee:	4770      	bx	lr
 801e1f0:	69c0      	ldr	r0, [r0, #28]
 801e1f2:	4770      	bx	lr
 801e1f4:	684b      	ldr	r3, [r1, #4]
 801e1f6:	781b      	ldrb	r3, [r3, #0]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	f47f af53 	bne.w	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e1fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e200:	4770      	bx	lr
 801e202:	684b      	ldr	r3, [r1, #4]
 801e204:	781b      	ldrb	r3, [r3, #0]
 801e206:	2b00      	cmp	r3, #0
 801e208:	f47f af4c 	bne.w	801e0a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e20c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e20e:	4770      	bx	lr
 801e210:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e212:	4770      	bx	lr
 801e214:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e216:	4770      	bx	lr
 801e218:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e21a:	4770      	bx	lr
 801e21c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e21e:	4770      	bx	lr
 801e220:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e222:	4770      	bx	lr
 801e224:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e226:	4770      	bx	lr
 801e228:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e22a:	4770      	bx	lr
 801e22c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e22e:	4770      	bx	lr
 801e230:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e232:	4770      	bx	lr
 801e234:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e236:	4770      	bx	lr

0801e238 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e23c:	b087      	sub	sp, #28
 801e23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e242:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e244:	9100      	str	r1, [sp, #0]
 801e246:	6868      	ldr	r0, [r5, #4]
 801e248:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801e24c:	9204      	str	r2, [sp, #16]
 801e24e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e252:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	; 0x58
 801e256:	fb00 1404 	mla	r4, r0, r4, r1
 801e25a:	6829      	ldr	r1, [r5, #0]
 801e25c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e260:	f8db 1000 	ldr.w	r1, [fp]
 801e264:	9101      	str	r1, [sp, #4]
 801e266:	f8db 1004 	ldr.w	r1, [fp, #4]
 801e26a:	3104      	adds	r1, #4
 801e26c:	9102      	str	r1, [sp, #8]
 801e26e:	9900      	ldr	r1, [sp, #0]
 801e270:	2900      	cmp	r1, #0
 801e272:	dc03      	bgt.n	801e27c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e274:	9904      	ldr	r1, [sp, #16]
 801e276:	2900      	cmp	r1, #0
 801e278:	f340 815a 	ble.w	801e530 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e27c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e27e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801e282:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801e286:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e288:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801e28c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e290:	2b00      	cmp	r3, #0
 801e292:	dd0e      	ble.n	801e2b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e294:	1405      	asrs	r5, r0, #16
 801e296:	d405      	bmi.n	801e2a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e298:	4565      	cmp	r5, ip
 801e29a:	da03      	bge.n	801e2a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e29c:	140d      	asrs	r5, r1, #16
 801e29e:	d401      	bmi.n	801e2a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e2a0:	42bd      	cmp	r5, r7
 801e2a2:	db07      	blt.n	801e2b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e2a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e2a6:	3b01      	subs	r3, #1
 801e2a8:	3404      	adds	r4, #4
 801e2aa:	4428      	add	r0, r5
 801e2ac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e2ae:	4429      	add	r1, r5
 801e2b0:	e7ee      	b.n	801e290 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e2b2:	d04d      	beq.n	801e350 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e2b4:	1e5d      	subs	r5, r3, #1
 801e2b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e2b8:	fb06 0605 	mla	r6, r6, r5, r0
 801e2bc:	1436      	asrs	r6, r6, #16
 801e2be:	d43d      	bmi.n	801e33c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e2c0:	4566      	cmp	r6, ip
 801e2c2:	da3b      	bge.n	801e33c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e2c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e2c6:	fb06 1505 	mla	r5, r6, r5, r1
 801e2ca:	142d      	asrs	r5, r5, #16
 801e2cc:	d436      	bmi.n	801e33c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e2ce:	42bd      	cmp	r5, r7
 801e2d0:	da34      	bge.n	801e33c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e2d2:	1d25      	adds	r5, r4, #4
 801e2d4:	4699      	mov	r9, r3
 801e2d6:	f1b9 0f00 	cmp.w	r9, #0
 801e2da:	dd35      	ble.n	801e348 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801e2dc:	140e      	asrs	r6, r1, #16
 801e2de:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801e2e2:	1407      	asrs	r7, r0, #16
 801e2e4:	2aff      	cmp	r2, #255	; 0xff
 801e2e6:	46b6      	mov	lr, r6
 801e2e8:	9e01      	ldr	r6, [sp, #4]
 801e2ea:	fb0c 660e 	mla	r6, ip, lr, r6
 801e2ee:	5df6      	ldrb	r6, [r6, r7]
 801e2f0:	9f02      	ldr	r7, [sp, #8]
 801e2f2:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801e2f6:	ea4f 2726 	mov.w	r7, r6, asr #8
 801e2fa:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801e2fe:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801e302:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e306:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e30a:	b2f6      	uxtb	r6, r6
 801e30c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e310:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e314:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e318:	f040 80d4 	bne.w	801e4c4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e31c:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e320:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e324:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e328:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e32c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e32e:	3504      	adds	r5, #4
 801e330:	f109 39ff 	add.w	r9, r9, #4294967295
 801e334:	4430      	add	r0, r6
 801e336:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e338:	4431      	add	r1, r6
 801e33a:	e7cc      	b.n	801e2d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e33c:	f04f 0c00 	mov.w	ip, #0
 801e340:	eb03 050c 	add.w	r5, r3, ip
 801e344:	2d00      	cmp	r5, #0
 801e346:	dc3f      	bgt.n	801e3c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801e348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e34c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e350:	9b00      	ldr	r3, [sp, #0]
 801e352:	2b00      	cmp	r3, #0
 801e354:	f340 80ec 	ble.w	801e530 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e358:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e35e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e362:	eeb0 6a62 	vmov.f32	s12, s5
 801e366:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e36a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e36e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e372:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e376:	eeb0 6a43 	vmov.f32	s12, s6
 801e37a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e37e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e382:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e386:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e38a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e38e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e392:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e396:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e39a:	ee12 1a90 	vmov	r1, s5
 801e39e:	eef0 2a47 	vmov.f32	s5, s14
 801e3a2:	fb91 f3f3 	sdiv	r3, r1, r3
 801e3a6:	ee13 1a10 	vmov	r1, s6
 801e3aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801e3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3ae:	eeb0 3a67 	vmov.f32	s6, s15
 801e3b2:	fb91 f3f3 	sdiv	r3, r1, r3
 801e3b6:	9314      	str	r3, [sp, #80]	; 0x50
 801e3b8:	9b00      	ldr	r3, [sp, #0]
 801e3ba:	9904      	ldr	r1, [sp, #16]
 801e3bc:	3b01      	subs	r3, #1
 801e3be:	9300      	str	r3, [sp, #0]
 801e3c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3c2:	bf08      	it	eq
 801e3c4:	460b      	moveq	r3, r1
 801e3c6:	e752      	b.n	801e26e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e3c8:	1407      	asrs	r7, r0, #16
 801e3ca:	d435      	bmi.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e3cc:	f8db 6008 	ldr.w	r6, [fp, #8]
 801e3d0:	42be      	cmp	r6, r7
 801e3d2:	dd31      	ble.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e3d4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e3d8:	d42e      	bmi.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e3da:	f8db 500c 	ldr.w	r5, [fp, #12]
 801e3de:	4575      	cmp	r5, lr
 801e3e0:	dd2a      	ble.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e3e2:	9d01      	ldr	r5, [sp, #4]
 801e3e4:	b236      	sxth	r6, r6
 801e3e6:	2aff      	cmp	r2, #255	; 0xff
 801e3e8:	fb0e 5606 	mla	r6, lr, r6, r5
 801e3ec:	5df5      	ldrb	r5, [r6, r7]
 801e3ee:	9e02      	ldr	r6, [sp, #8]
 801e3f0:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801e3f4:	ea4f 2625 	mov.w	r6, r5, asr #8
 801e3f8:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801e3fc:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e400:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e404:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e408:	b2ed      	uxtb	r5, r5
 801e40a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e40e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e412:	9603      	str	r6, [sp, #12]
 801e414:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e418:	462e      	mov	r6, r5
 801e41a:	d114      	bne.n	801e446 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e41c:	f06f 0503 	mvn.w	r5, #3
 801e420:	fb05 fe0c 	mul.w	lr, r5, ip
 801e424:	9d03      	ldr	r5, [sp, #12]
 801e426:	f804 600e 	strb.w	r6, [r4, lr]
 801e42a:	44a6      	add	lr, r4
 801e42c:	f88e 7001 	strb.w	r7, [lr, #1]
 801e430:	f88e 5002 	strb.w	r5, [lr, #2]
 801e434:	f88e 2003 	strb.w	r2, [lr, #3]
 801e438:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e43a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e43e:	4428      	add	r0, r5
 801e440:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e442:	4429      	add	r1, r5
 801e444:	e77c      	b.n	801e340 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e446:	2a00      	cmp	r2, #0
 801e448:	d0f6      	beq.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e44a:	fb12 f707 	smulbb	r7, r2, r7
 801e44e:	f06f 0503 	mvn.w	r5, #3
 801e452:	fb05 fa0c 	mul.w	sl, r5, ip
 801e456:	eb04 090a 	add.w	r9, r4, sl
 801e45a:	f899 5003 	ldrb.w	r5, [r9, #3]
 801e45e:	fb02 fe05 	mul.w	lr, r2, r5
 801e462:	f10e 0801 	add.w	r8, lr, #1
 801e466:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e46a:	eb02 0e05 	add.w	lr, r2, r5
 801e46e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e472:	ebae 0e08 	sub.w	lr, lr, r8
 801e476:	eba5 0808 	sub.w	r8, r5, r8
 801e47a:	f814 500a 	ldrb.w	r5, [r4, sl]
 801e47e:	fa5f fe8e 	uxtb.w	lr, lr
 801e482:	9505      	str	r5, [sp, #20]
 801e484:	fb16 f502 	smulbb	r5, r6, r2
 801e488:	462e      	mov	r6, r5
 801e48a:	9d05      	ldr	r5, [sp, #20]
 801e48c:	fb08 6505 	mla	r5, r8, r5, r6
 801e490:	9e03      	ldr	r6, [sp, #12]
 801e492:	fb95 f5fe 	sdiv	r5, r5, lr
 801e496:	f804 500a 	strb.w	r5, [r4, sl]
 801e49a:	fb12 f606 	smulbb	r6, r2, r6
 801e49e:	f899 5001 	ldrb.w	r5, [r9, #1]
 801e4a2:	f889 e003 	strb.w	lr, [r9, #3]
 801e4a6:	fb08 7705 	mla	r7, r8, r5, r7
 801e4aa:	f899 5002 	ldrb.w	r5, [r9, #2]
 801e4ae:	fb08 6605 	mla	r6, r8, r5, r6
 801e4b2:	fb97 f7fe 	sdiv	r7, r7, lr
 801e4b6:	fb96 f6fe 	sdiv	r6, r6, lr
 801e4ba:	f889 7001 	strb.w	r7, [r9, #1]
 801e4be:	f889 6002 	strb.w	r6, [r9, #2]
 801e4c2:	e7b9      	b.n	801e438 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e4c4:	2a00      	cmp	r2, #0
 801e4c6:	f43f af31 	beq.w	801e32c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e4ca:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801e4ce:	fb16 f602 	smulbb	r6, r6, r2
 801e4d2:	fb12 fc0c 	smulbb	ip, r2, ip
 801e4d6:	fb12 f707 	smulbb	r7, r2, r7
 801e4da:	fb02 fe0a 	mul.w	lr, r2, sl
 801e4de:	f10e 0801 	add.w	r8, lr, #1
 801e4e2:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e4e6:	eb02 0e0a 	add.w	lr, r2, sl
 801e4ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e4ee:	ebae 0e08 	sub.w	lr, lr, r8
 801e4f2:	ebaa 0808 	sub.w	r8, sl, r8
 801e4f6:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801e4fa:	fa5f fe8e 	uxtb.w	lr, lr
 801e4fe:	fb08 660a 	mla	r6, r8, sl, r6
 801e502:	f805 ec01 	strb.w	lr, [r5, #-1]
 801e506:	fb96 f6fe 	sdiv	r6, r6, lr
 801e50a:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e50e:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801e512:	fb08 cc06 	mla	ip, r8, r6, ip
 801e516:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801e51a:	fb08 7706 	mla	r7, r8, r6, r7
 801e51e:	fb9c fcfe 	sdiv	ip, ip, lr
 801e522:	fb97 f7fe 	sdiv	r7, r7, lr
 801e526:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e52a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e52e:	e6fd      	b.n	801e32c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e530:	b007      	add	sp, #28
 801e532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e536 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e53a:	b085      	sub	sp, #20
 801e53c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e542:	9203      	str	r2, [sp, #12]
 801e544:	6860      	ldr	r0, [r4, #4]
 801e546:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801e548:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e54c:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	; 0x44
 801e550:	fb00 2505 	mla	r5, r0, r5, r2
 801e554:	6822      	ldr	r2, [r4, #0]
 801e556:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801e55a:	683a      	ldr	r2, [r7, #0]
 801e55c:	9201      	str	r2, [sp, #4]
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	3204      	adds	r2, #4
 801e562:	9202      	str	r2, [sp, #8]
 801e564:	2900      	cmp	r1, #0
 801e566:	dc03      	bgt.n	801e570 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e568:	9a03      	ldr	r2, [sp, #12]
 801e56a:	2a00      	cmp	r2, #0
 801e56c:	f340 80c4 	ble.w	801e6f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e572:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801e576:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e57a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e57c:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801e580:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e584:	2b00      	cmp	r3, #0
 801e586:	dd0c      	ble.n	801e5a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e588:	1404      	asrs	r4, r0, #16
 801e58a:	d405      	bmi.n	801e598 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e58c:	454c      	cmp	r4, r9
 801e58e:	da03      	bge.n	801e598 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e590:	1414      	asrs	r4, r2, #16
 801e592:	d401      	bmi.n	801e598 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e594:	4564      	cmp	r4, ip
 801e596:	db05      	blt.n	801e5a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e598:	4440      	add	r0, r8
 801e59a:	4472      	add	r2, lr
 801e59c:	3b01      	subs	r3, #1
 801e59e:	3504      	adds	r5, #4
 801e5a0:	e7f0      	b.n	801e584 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e5a2:	d00e      	beq.n	801e5c2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e5a4:	1e5c      	subs	r4, r3, #1
 801e5a6:	fb08 0604 	mla	r6, r8, r4, r0
 801e5aa:	1436      	asrs	r6, r6, #16
 801e5ac:	d53e      	bpl.n	801e62c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e5ae:	4699      	mov	r9, r3
 801e5b0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801e5b4:	f1b9 0f00 	cmp.w	r9, #0
 801e5b8:	dc6b      	bgt.n	801e692 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e5ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5be:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801e5c2:	2900      	cmp	r1, #0
 801e5c4:	f340 8098 	ble.w	801e6f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e5c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5d2:	3901      	subs	r1, #1
 801e5d4:	eeb0 6a62 	vmov.f32	s12, s5
 801e5d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5e4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e5e8:	eeb0 6a43 	vmov.f32	s12, s6
 801e5ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5f0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e5f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e600:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e604:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e608:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e60c:	ee12 2a90 	vmov	r2, s5
 801e610:	eef0 2a47 	vmov.f32	s5, s14
 801e614:	fb92 f8f3 	sdiv	r8, r2, r3
 801e618:	ee13 2a10 	vmov	r2, s6
 801e61c:	eeb0 3a67 	vmov.f32	s6, s15
 801e620:	fb92 fef3 	sdiv	lr, r2, r3
 801e624:	9a03      	ldr	r2, [sp, #12]
 801e626:	bf08      	it	eq
 801e628:	4613      	moveq	r3, r2
 801e62a:	e79b      	b.n	801e564 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e62c:	454e      	cmp	r6, r9
 801e62e:	dabe      	bge.n	801e5ae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e630:	fb0e 2404 	mla	r4, lr, r4, r2
 801e634:	1424      	asrs	r4, r4, #16
 801e636:	d4ba      	bmi.n	801e5ae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e638:	4564      	cmp	r4, ip
 801e63a:	dab8      	bge.n	801e5ae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e63c:	4699      	mov	r9, r3
 801e63e:	46aa      	mov	sl, r5
 801e640:	f1b9 0f00 	cmp.w	r9, #0
 801e644:	ddb9      	ble.n	801e5ba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e646:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e64a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801e64e:	9c01      	ldr	r4, [sp, #4]
 801e650:	1406      	asrs	r6, r0, #16
 801e652:	4472      	add	r2, lr
 801e654:	4440      	add	r0, r8
 801e656:	fb0c 440b 	mla	r4, ip, fp, r4
 801e65a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e65e:	5da4      	ldrb	r4, [r4, r6]
 801e660:	9e02      	ldr	r6, [sp, #8]
 801e662:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801e666:	10f4      	asrs	r4, r6, #3
 801e668:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e66c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e670:	00f6      	lsls	r6, r6, #3
 801e672:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e676:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e67a:	b2f6      	uxtb	r6, r6
 801e67c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e680:	0224      	lsls	r4, r4, #8
 801e682:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e686:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e68a:	4334      	orrs	r4, r6
 801e68c:	f84a 4b04 	str.w	r4, [sl], #4
 801e690:	e7d6      	b.n	801e640 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e692:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801e696:	d42a      	bmi.n	801e6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801e698:	68be      	ldr	r6, [r7, #8]
 801e69a:	4566      	cmp	r6, ip
 801e69c:	dd27      	ble.n	801e6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801e69e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e6a2:	d424      	bmi.n	801e6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801e6a4:	68fc      	ldr	r4, [r7, #12]
 801e6a6:	455c      	cmp	r4, fp
 801e6a8:	dd21      	ble.n	801e6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801e6aa:	9c01      	ldr	r4, [sp, #4]
 801e6ac:	b236      	sxth	r6, r6
 801e6ae:	fb0b 4606 	mla	r6, fp, r6, r4
 801e6b2:	f06f 0b03 	mvn.w	fp, #3
 801e6b6:	f816 400c 	ldrb.w	r4, [r6, ip]
 801e6ba:	fb0b fb09 	mul.w	fp, fp, r9
 801e6be:	9e02      	ldr	r6, [sp, #8]
 801e6c0:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801e6c4:	10f4      	asrs	r4, r6, #3
 801e6c6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e6ca:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e6ce:	00f6      	lsls	r6, r6, #3
 801e6d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e6d4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e6d8:	b2f6      	uxtb	r6, r6
 801e6da:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e6de:	0224      	lsls	r4, r4, #8
 801e6e0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e6e4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e6e8:	4334      	orrs	r4, r6
 801e6ea:	f84a 400b 	str.w	r4, [sl, fp]
 801e6ee:	4440      	add	r0, r8
 801e6f0:	4472      	add	r2, lr
 801e6f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e6f6:	e75d      	b.n	801e5b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e6f8:	b005      	add	sp, #20
 801e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e6fe <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e702:	b085      	sub	sp, #20
 801e704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e708:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e70a:	9101      	str	r1, [sp, #4]
 801e70c:	6868      	ldr	r0, [r5, #4]
 801e70e:	9203      	str	r2, [sp, #12]
 801e710:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e714:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801e718:	fb00 1404 	mla	r4, r0, r4, r1
 801e71c:	6829      	ldr	r1, [r5, #0]
 801e71e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e722:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e724:	6809      	ldr	r1, [r1, #0]
 801e726:	9102      	str	r1, [sp, #8]
 801e728:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e72a:	6849      	ldr	r1, [r1, #4]
 801e72c:	3104      	adds	r1, #4
 801e72e:	9100      	str	r1, [sp, #0]
 801e730:	9901      	ldr	r1, [sp, #4]
 801e732:	2900      	cmp	r1, #0
 801e734:	dc03      	bgt.n	801e73e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e736:	9903      	ldr	r1, [sp, #12]
 801e738:	2900      	cmp	r1, #0
 801e73a:	f340 813d 	ble.w	801e9b8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e73e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e740:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e744:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801e748:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e74a:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801e74e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e750:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e754:	2b00      	cmp	r3, #0
 801e756:	dd0e      	ble.n	801e776 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e758:	1405      	asrs	r5, r0, #16
 801e75a:	d405      	bmi.n	801e768 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e75c:	4565      	cmp	r5, ip
 801e75e:	da03      	bge.n	801e768 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e760:	140d      	asrs	r5, r1, #16
 801e762:	d401      	bmi.n	801e768 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e764:	42bd      	cmp	r5, r7
 801e766:	db07      	blt.n	801e778 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e768:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e76a:	3b01      	subs	r3, #1
 801e76c:	3404      	adds	r4, #4
 801e76e:	4428      	add	r0, r5
 801e770:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e772:	4429      	add	r1, r5
 801e774:	e7ee      	b.n	801e754 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e776:	d044      	beq.n	801e802 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e778:	1e5d      	subs	r5, r3, #1
 801e77a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e77c:	fb06 0605 	mla	r6, r6, r5, r0
 801e780:	1436      	asrs	r6, r6, #16
 801e782:	d436      	bmi.n	801e7f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e784:	4566      	cmp	r6, ip
 801e786:	da34      	bge.n	801e7f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e788:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e78a:	fb06 1505 	mla	r5, r6, r5, r1
 801e78e:	142d      	asrs	r5, r5, #16
 801e790:	d42f      	bmi.n	801e7f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e792:	42bd      	cmp	r5, r7
 801e794:	da2d      	bge.n	801e7f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801e796:	1d25      	adds	r5, r4, #4
 801e798:	469a      	mov	sl, r3
 801e79a:	f1ba 0f00 	cmp.w	sl, #0
 801e79e:	dd2c      	ble.n	801e7fa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e7a0:	140e      	asrs	r6, r1, #16
 801e7a2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801e7a4:	2aff      	cmp	r2, #255	; 0xff
 801e7a6:	46b6      	mov	lr, r6
 801e7a8:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e7ac:	9e02      	ldr	r6, [sp, #8]
 801e7ae:	ea4f 4720 	mov.w	r7, r0, asr #16
 801e7b2:	fb0c 660e 	mla	r6, ip, lr, r6
 801e7b6:	5df6      	ldrb	r6, [r6, r7]
 801e7b8:	9f00      	ldr	r7, [sp, #0]
 801e7ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e7be:	4437      	add	r7, r6
 801e7c0:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e7c4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e7c8:	9f00      	ldr	r7, [sp, #0]
 801e7ca:	f817 9006 	ldrb.w	r9, [r7, r6]
 801e7ce:	f040 80be 	bne.w	801e94e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e7d2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e7d6:	f805 8c03 	strb.w	r8, [r5, #-3]
 801e7da:	f805 ec02 	strb.w	lr, [r5, #-2]
 801e7de:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e7e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e7e4:	3504      	adds	r5, #4
 801e7e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e7ea:	4430      	add	r0, r6
 801e7ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e7ee:	4431      	add	r1, r6
 801e7f0:	e7d3      	b.n	801e79a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e7f2:	2500      	movs	r5, #0
 801e7f4:	195e      	adds	r6, r3, r5
 801e7f6:	2e00      	cmp	r6, #0
 801e7f8:	dc3f      	bgt.n	801e87a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e7fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e802:	9b01      	ldr	r3, [sp, #4]
 801e804:	2b00      	cmp	r3, #0
 801e806:	f340 80d7 	ble.w	801e9b8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e80a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e810:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e814:	eeb0 6a62 	vmov.f32	s12, s5
 801e818:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e81c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e820:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e824:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e828:	eeb0 6a43 	vmov.f32	s12, s6
 801e82c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e830:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e834:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e838:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e83c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e840:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e844:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e848:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e84c:	ee12 1a90 	vmov	r1, s5
 801e850:	eef0 2a47 	vmov.f32	s5, s14
 801e854:	fb91 f3f3 	sdiv	r3, r1, r3
 801e858:	ee13 1a10 	vmov	r1, s6
 801e85c:	9311      	str	r3, [sp, #68]	; 0x44
 801e85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e860:	eeb0 3a67 	vmov.f32	s6, s15
 801e864:	fb91 f3f3 	sdiv	r3, r1, r3
 801e868:	9312      	str	r3, [sp, #72]	; 0x48
 801e86a:	9b01      	ldr	r3, [sp, #4]
 801e86c:	9903      	ldr	r1, [sp, #12]
 801e86e:	3b01      	subs	r3, #1
 801e870:	9301      	str	r3, [sp, #4]
 801e872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e874:	bf08      	it	eq
 801e876:	460b      	moveq	r3, r1
 801e878:	e75a      	b.n	801e730 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e87a:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801e87e:	d427      	bmi.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e880:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801e882:	68b7      	ldr	r7, [r6, #8]
 801e884:	4567      	cmp	r7, ip
 801e886:	dd23      	ble.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e888:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e88c:	d420      	bmi.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e88e:	68f6      	ldr	r6, [r6, #12]
 801e890:	4576      	cmp	r6, lr
 801e892:	dd1d      	ble.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e894:	9e02      	ldr	r6, [sp, #8]
 801e896:	b23f      	sxth	r7, r7
 801e898:	2aff      	cmp	r2, #255	; 0xff
 801e89a:	fb0e 6707 	mla	r7, lr, r7, r6
 801e89e:	f817 600c 	ldrb.w	r6, [r7, ip]
 801e8a2:	9f00      	ldr	r7, [sp, #0]
 801e8a4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e8a8:	4437      	add	r7, r6
 801e8aa:	f897 8002 	ldrb.w	r8, [r7, #2]
 801e8ae:	f897 9001 	ldrb.w	r9, [r7, #1]
 801e8b2:	9f00      	ldr	r7, [sp, #0]
 801e8b4:	f817 a006 	ldrb.w	sl, [r7, r6]
 801e8b8:	d110      	bne.n	801e8dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801e8ba:	f06f 0603 	mvn.w	r6, #3
 801e8be:	436e      	muls	r6, r5
 801e8c0:	f804 a006 	strb.w	sl, [r4, r6]
 801e8c4:	4426      	add	r6, r4
 801e8c6:	f886 9001 	strb.w	r9, [r6, #1]
 801e8ca:	f886 8002 	strb.w	r8, [r6, #2]
 801e8ce:	70f2      	strb	r2, [r6, #3]
 801e8d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e8d2:	3d01      	subs	r5, #1
 801e8d4:	4430      	add	r0, r6
 801e8d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e8d8:	4431      	add	r1, r6
 801e8da:	e78b      	b.n	801e7f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e8dc:	2a00      	cmp	r2, #0
 801e8de:	d0f7      	beq.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e8e0:	fb1a fa02 	smulbb	sl, sl, r2
 801e8e4:	f06f 0603 	mvn.w	r6, #3
 801e8e8:	fb12 f909 	smulbb	r9, r2, r9
 801e8ec:	fb12 f808 	smulbb	r8, r2, r8
 801e8f0:	fb06 fb05 	mul.w	fp, r6, r5
 801e8f4:	eb04 0c0b 	add.w	ip, r4, fp
 801e8f8:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801e8fc:	fb02 f607 	mul.w	r6, r2, r7
 801e900:	f106 0e01 	add.w	lr, r6, #1
 801e904:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801e908:	19d6      	adds	r6, r2, r7
 801e90a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e90e:	eba7 070e 	sub.w	r7, r7, lr
 801e912:	eba6 060e 	sub.w	r6, r6, lr
 801e916:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801e91a:	b2f6      	uxtb	r6, r6
 801e91c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e920:	fb9a faf6 	sdiv	sl, sl, r6
 801e924:	f804 a00b 	strb.w	sl, [r4, fp]
 801e928:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e92c:	f88c 6003 	strb.w	r6, [ip, #3]
 801e930:	fb07 990e 	mla	r9, r7, lr, r9
 801e934:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e938:	fb07 880e 	mla	r8, r7, lr, r8
 801e93c:	fb99 f9f6 	sdiv	r9, r9, r6
 801e940:	fb98 f8f6 	sdiv	r8, r8, r6
 801e944:	f88c 9001 	strb.w	r9, [ip, #1]
 801e948:	f88c 8002 	strb.w	r8, [ip, #2]
 801e94c:	e7c0      	b.n	801e8d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e94e:	2a00      	cmp	r2, #0
 801e950:	f43f af47 	beq.w	801e7e2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801e954:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801e958:	fb19 f902 	smulbb	r9, r9, r2
 801e95c:	fb12 f808 	smulbb	r8, r2, r8
 801e960:	fb02 fc0b 	mul.w	ip, r2, fp
 801e964:	eb02 060b 	add.w	r6, r2, fp
 801e968:	fb12 fe0e 	smulbb	lr, r2, lr
 801e96c:	f10c 0701 	add.w	r7, ip, #1
 801e970:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e974:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801e978:	ebab 070c 	sub.w	r7, fp, ip
 801e97c:	eba6 060c 	sub.w	r6, r6, ip
 801e980:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801e984:	b2f6      	uxtb	r6, r6
 801e986:	fb07 990c 	mla	r9, r7, ip, r9
 801e98a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801e98e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e992:	fb07 880c 	mla	r8, r7, ip, r8
 801e996:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801e99a:	fb07 ee0c 	mla	lr, r7, ip, lr
 801e99e:	fb99 f9f6 	sdiv	r9, r9, r6
 801e9a2:	fb98 f8f6 	sdiv	r8, r8, r6
 801e9a6:	fb9e fef6 	sdiv	lr, lr, r6
 801e9aa:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e9ae:	f805 8c03 	strb.w	r8, [r5, #-3]
 801e9b2:	f805 ec02 	strb.w	lr, [r5, #-2]
 801e9b6:	e714      	b.n	801e7e2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801e9b8:	b005      	add	sp, #20
 801e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9be <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e9c4:	4693      	mov	fp, r2
 801e9c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9cc:	6870      	ldr	r0, [r6, #4]
 801e9ce:	686f      	ldr	r7, [r5, #4]
 801e9d0:	9100      	str	r1, [sp, #0]
 801e9d2:	3704      	adds	r7, #4
 801e9d4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e9d8:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801e9dc:	fb00 2404 	mla	r4, r0, r4, r2
 801e9e0:	6832      	ldr	r2, [r6, #0]
 801e9e2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801e9e6:	682a      	ldr	r2, [r5, #0]
 801e9e8:	9201      	str	r2, [sp, #4]
 801e9ea:	9a00      	ldr	r2, [sp, #0]
 801e9ec:	2a00      	cmp	r2, #0
 801e9ee:	dc03      	bgt.n	801e9f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e9f0:	f1bb 0f00 	cmp.w	fp, #0
 801e9f4:	f340 80bd 	ble.w	801eb72 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e9f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9fa:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e9fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ea02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea04:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801ea08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	dd0c      	ble.n	801ea2a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ea10:	1406      	asrs	r6, r0, #16
 801ea12:	d405      	bmi.n	801ea20 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea14:	4556      	cmp	r6, sl
 801ea16:	da03      	bge.n	801ea20 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea18:	1416      	asrs	r6, r2, #16
 801ea1a:	d401      	bmi.n	801ea20 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea1c:	454e      	cmp	r6, r9
 801ea1e:	db05      	blt.n	801ea2c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea20:	4440      	add	r0, r8
 801ea22:	4472      	add	r2, lr
 801ea24:	3b01      	subs	r3, #1
 801ea26:	3404      	adds	r4, #4
 801ea28:	e7f0      	b.n	801ea0c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ea2a:	d03e      	beq.n	801eaaa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801ea2c:	1e5e      	subs	r6, r3, #1
 801ea2e:	fb08 0c06 	mla	ip, r8, r6, r0
 801ea32:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ea36:	d42e      	bmi.n	801ea96 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ea38:	45d4      	cmp	ip, sl
 801ea3a:	da2c      	bge.n	801ea96 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ea3c:	fb0e 2606 	mla	r6, lr, r6, r2
 801ea40:	1436      	asrs	r6, r6, #16
 801ea42:	d428      	bmi.n	801ea96 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ea44:	454e      	cmp	r6, r9
 801ea46:	da26      	bge.n	801ea96 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ea48:	1d26      	adds	r6, r4, #4
 801ea4a:	469c      	mov	ip, r3
 801ea4c:	f1bc 0f00 	cmp.w	ip, #0
 801ea50:	f106 0604 	add.w	r6, r6, #4
 801ea54:	dd25      	ble.n	801eaa2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ea56:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801ea5a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ea5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ea62:	4472      	add	r2, lr
 801ea64:	468a      	mov	sl, r1
 801ea66:	9901      	ldr	r1, [sp, #4]
 801ea68:	fb0a 1909 	mla	r9, sl, r9, r1
 801ea6c:	1401      	asrs	r1, r0, #16
 801ea6e:	4440      	add	r0, r8
 801ea70:	f819 9001 	ldrb.w	r9, [r9, r1]
 801ea74:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ea78:	eb07 0a09 	add.w	sl, r7, r9
 801ea7c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801ea80:	f806 9c08 	strb.w	r9, [r6, #-8]
 801ea84:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ea88:	f806 9c07 	strb.w	r9, [r6, #-7]
 801ea8c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ea90:	f806 9c06 	strb.w	r9, [r6, #-6]
 801ea94:	e7da      	b.n	801ea4c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ea96:	2600      	movs	r6, #0
 801ea98:	eb03 0c06 	add.w	ip, r3, r6
 801ea9c:	f1bc 0f00 	cmp.w	ip, #0
 801eaa0:	dc3a      	bgt.n	801eb18 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801eaa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eaa6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801eaaa:	9b00      	ldr	r3, [sp, #0]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	dd60      	ble.n	801eb72 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801eab0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eab6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaba:	eeb0 6a62 	vmov.f32	s12, s5
 801eabe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eac2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eac6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eaca:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801eace:	eeb0 6a43 	vmov.f32	s12, s6
 801ead2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ead6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801eada:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eade:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eae6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eaea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eaee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eaf2:	ee12 2a90 	vmov	r2, s5
 801eaf6:	eef0 2a47 	vmov.f32	s5, s14
 801eafa:	fb92 f8f3 	sdiv	r8, r2, r3
 801eafe:	ee13 2a10 	vmov	r2, s6
 801eb02:	eeb0 3a67 	vmov.f32	s6, s15
 801eb06:	fb92 fef3 	sdiv	lr, r2, r3
 801eb0a:	9b00      	ldr	r3, [sp, #0]
 801eb0c:	3b01      	subs	r3, #1
 801eb0e:	9300      	str	r3, [sp, #0]
 801eb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb12:	bf08      	it	eq
 801eb14:	465b      	moveq	r3, fp
 801eb16:	e768      	b.n	801e9ea <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801eb18:	ea5f 4920 	movs.w	r9, r0, asr #16
 801eb1c:	d425      	bmi.n	801eb6a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb1e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801eb22:	45cc      	cmp	ip, r9
 801eb24:	dd21      	ble.n	801eb6a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb26:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801eb2a:	d41e      	bmi.n	801eb6a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb2c:	68e9      	ldr	r1, [r5, #12]
 801eb2e:	4551      	cmp	r1, sl
 801eb30:	dd1b      	ble.n	801eb6a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb32:	9901      	ldr	r1, [sp, #4]
 801eb34:	fa0f fc8c 	sxth.w	ip, ip
 801eb38:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801eb3c:	f06f 0103 	mvn.w	r1, #3
 801eb40:	f81c c009 	ldrb.w	ip, [ip, r9]
 801eb44:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eb48:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801eb4c:	eb07 090c 	add.w	r9, r7, ip
 801eb50:	fb01 fc06 	mul.w	ip, r1, r6
 801eb54:	f804 a00c 	strb.w	sl, [r4, ip]
 801eb58:	44a4      	add	ip, r4
 801eb5a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801eb5e:	f88c a001 	strb.w	sl, [ip, #1]
 801eb62:	f899 9002 	ldrb.w	r9, [r9, #2]
 801eb66:	f88c 9002 	strb.w	r9, [ip, #2]
 801eb6a:	4440      	add	r0, r8
 801eb6c:	4472      	add	r2, lr
 801eb6e:	3e01      	subs	r6, #1
 801eb70:	e792      	b.n	801ea98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801eb72:	b003      	add	sp, #12
 801eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb78 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb7c:	b089      	sub	sp, #36	; 0x24
 801eb7e:	469b      	mov	fp, r3
 801eb80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801eb86:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801eb8a:	9101      	str	r1, [sp, #4]
 801eb8c:	9205      	str	r2, [sp, #20]
 801eb8e:	9306      	str	r3, [sp, #24]
 801eb90:	6842      	ldr	r2, [r0, #4]
 801eb92:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801eb96:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801eb9a:	fb02 3101 	mla	r1, r2, r1, r3
 801eb9e:	6803      	ldr	r3, [r0, #0]
 801eba0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801eba4:	f8da 3000 	ldr.w	r3, [sl]
 801eba8:	9302      	str	r3, [sp, #8]
 801ebaa:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ebae:	3304      	adds	r3, #4
 801ebb0:	9303      	str	r3, [sp, #12]
 801ebb2:	9b01      	ldr	r3, [sp, #4]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	dc03      	bgt.n	801ebc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ebb8:	9b05      	ldr	r3, [sp, #20]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	f340 814e 	ble.w	801ee5c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ebc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ebc2:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801ebc6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801ebca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ebcc:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801ebd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801ebd4:	f1bb 0f00 	cmp.w	fp, #0
 801ebd8:	dd0f      	ble.n	801ebfa <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ebda:	1410      	asrs	r0, r2, #16
 801ebdc:	d405      	bmi.n	801ebea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebde:	42b0      	cmp	r0, r6
 801ebe0:	da03      	bge.n	801ebea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebe2:	1418      	asrs	r0, r3, #16
 801ebe4:	d401      	bmi.n	801ebea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebe6:	42a8      	cmp	r0, r5
 801ebe8:	db08      	blt.n	801ebfc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ebea:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ebec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ebf0:	3104      	adds	r1, #4
 801ebf2:	4402      	add	r2, r0
 801ebf4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ebf6:	4403      	add	r3, r0
 801ebf8:	e7ec      	b.n	801ebd4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ebfa:	d04a      	beq.n	801ec92 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801ebfc:	f10b 30ff 	add.w	r0, fp, #4294967295
 801ec00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec02:	fb04 2400 	mla	r4, r4, r0, r2
 801ec06:	1424      	asrs	r4, r4, #16
 801ec08:	d43a      	bmi.n	801ec80 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ec0a:	42b4      	cmp	r4, r6
 801ec0c:	da38      	bge.n	801ec80 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ec0e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ec10:	fb04 3000 	mla	r0, r4, r0, r3
 801ec14:	1400      	asrs	r0, r0, #16
 801ec16:	d433      	bmi.n	801ec80 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ec18:	42a8      	cmp	r0, r5
 801ec1a:	da31      	bge.n	801ec80 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ec1c:	1d08      	adds	r0, r1, #4
 801ec1e:	46dc      	mov	ip, fp
 801ec20:	f1bc 0f00 	cmp.w	ip, #0
 801ec24:	dd31      	ble.n	801ec8a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ec26:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801ec2a:	141c      	asrs	r4, r3, #16
 801ec2c:	9f02      	ldr	r7, [sp, #8]
 801ec2e:	1415      	asrs	r5, r2, #16
 801ec30:	fb06 7404 	mla	r4, r6, r4, r7
 801ec34:	5d64      	ldrb	r4, [r4, r5]
 801ec36:	9d03      	ldr	r5, [sp, #12]
 801ec38:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801ec3c:	9d06      	ldr	r5, [sp, #24]
 801ec3e:	0e34      	lsrs	r4, r6, #24
 801ec40:	436c      	muls	r4, r5
 801ec42:	1c65      	adds	r5, r4, #1
 801ec44:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801ec48:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801ec4c:	1224      	asrs	r4, r4, #8
 801ec4e:	b2ef      	uxtb	r7, r5
 801ec50:	2cff      	cmp	r4, #255	; 0xff
 801ec52:	9704      	str	r7, [sp, #16]
 801ec54:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801ec58:	fa5f fe87 	uxtb.w	lr, r7
 801ec5c:	f040 80ca 	bne.w	801edf4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ec60:	f800 6c04 	strb.w	r6, [r0, #-4]
 801ec64:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ec68:	f800 5c02 	strb.w	r5, [r0, #-2]
 801ec6c:	f800 4c01 	strb.w	r4, [r0, #-1]
 801ec70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec72:	3004      	adds	r0, #4
 801ec74:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ec78:	4422      	add	r2, r4
 801ec7a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ec7c:	4423      	add	r3, r4
 801ec7e:	e7cf      	b.n	801ec20 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ec80:	2700      	movs	r7, #0
 801ec82:	eb0b 0007 	add.w	r0, fp, r7
 801ec86:	2800      	cmp	r0, #0
 801ec88:	dc41      	bgt.n	801ed0e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ec8a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801ec8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ec92:	9b01      	ldr	r3, [sp, #4]
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	f340 80e1 	ble.w	801ee5c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ec9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eca0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eca4:	eeb0 6a62 	vmov.f32	s12, s5
 801eca8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ecac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecb4:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801ecb8:	eeb0 6a43 	vmov.f32	s12, s6
 801ecbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecc0:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801ecc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecdc:	ee12 2a90 	vmov	r2, s5
 801ece0:	eef0 2a47 	vmov.f32	s5, s14
 801ece4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ece8:	ee13 2a10 	vmov	r2, s6
 801ecec:	9315      	str	r3, [sp, #84]	; 0x54
 801ecee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ecf0:	eeb0 3a67 	vmov.f32	s6, s15
 801ecf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecf8:	9316      	str	r3, [sp, #88]	; 0x58
 801ecfa:	9b01      	ldr	r3, [sp, #4]
 801ecfc:	9a05      	ldr	r2, [sp, #20]
 801ecfe:	3b01      	subs	r3, #1
 801ed00:	9301      	str	r3, [sp, #4]
 801ed02:	bf08      	it	eq
 801ed04:	4693      	moveq	fp, r2
 801ed06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed08:	bf18      	it	ne
 801ed0a:	469b      	movne	fp, r3
 801ed0c:	e751      	b.n	801ebb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ed0e:	1415      	asrs	r5, r2, #16
 801ed10:	d42f      	bmi.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed12:	f8da 4008 	ldr.w	r4, [sl, #8]
 801ed16:	42ac      	cmp	r4, r5
 801ed18:	dd2b      	ble.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed1a:	141e      	asrs	r6, r3, #16
 801ed1c:	d429      	bmi.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed1e:	f8da 000c 	ldr.w	r0, [sl, #12]
 801ed22:	42b0      	cmp	r0, r6
 801ed24:	dd25      	ble.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed26:	9802      	ldr	r0, [sp, #8]
 801ed28:	b224      	sxth	r4, r4
 801ed2a:	fb06 0404 	mla	r4, r6, r4, r0
 801ed2e:	5d60      	ldrb	r0, [r4, r5]
 801ed30:	9c03      	ldr	r4, [sp, #12]
 801ed32:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801ed36:	9c06      	ldr	r4, [sp, #24]
 801ed38:	0e28      	lsrs	r0, r5, #24
 801ed3a:	4360      	muls	r0, r4
 801ed3c:	1c44      	adds	r4, r0, #1
 801ed3e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801ed42:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801ed46:	1200      	asrs	r0, r0, #8
 801ed48:	b2e6      	uxtb	r6, r4
 801ed4a:	28ff      	cmp	r0, #255	; 0xff
 801ed4c:	9607      	str	r6, [sp, #28]
 801ed4e:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801ed52:	fa5f fe86 	uxtb.w	lr, r6
 801ed56:	d112      	bne.n	801ed7e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ed58:	f06f 0c03 	mvn.w	ip, #3
 801ed5c:	fb0c fc07 	mul.w	ip, ip, r7
 801ed60:	f801 500c 	strb.w	r5, [r1, ip]
 801ed64:	448c      	add	ip, r1
 801ed66:	f88c 6001 	strb.w	r6, [ip, #1]
 801ed6a:	f88c 4002 	strb.w	r4, [ip, #2]
 801ed6e:	f88c 0003 	strb.w	r0, [ip, #3]
 801ed72:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ed74:	3f01      	subs	r7, #1
 801ed76:	4402      	add	r2, r0
 801ed78:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ed7a:	4403      	add	r3, r0
 801ed7c:	e781      	b.n	801ec82 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801ed7e:	b2c4      	uxtb	r4, r0
 801ed80:	9404      	str	r4, [sp, #16]
 801ed82:	2800      	cmp	r0, #0
 801ed84:	d0f5      	beq.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed86:	f06f 0403 	mvn.w	r4, #3
 801ed8a:	b2ed      	uxtb	r5, r5
 801ed8c:	fb00 fe0e 	mul.w	lr, r0, lr
 801ed90:	fb04 f807 	mul.w	r8, r4, r7
 801ed94:	9c04      	ldr	r4, [sp, #16]
 801ed96:	eb01 0c08 	add.w	ip, r1, r8
 801ed9a:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801ed9e:	fb04 f609 	mul.w	r6, r4, r9
 801eda2:	1c74      	adds	r4, r6, #1
 801eda4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801eda8:	9c04      	ldr	r4, [sp, #16]
 801edaa:	1236      	asrs	r6, r6, #8
 801edac:	444c      	add	r4, r9
 801edae:	1ba4      	subs	r4, r4, r6
 801edb0:	eba9 0606 	sub.w	r6, r9, r6
 801edb4:	f811 9008 	ldrb.w	r9, [r1, r8]
 801edb8:	b2e4      	uxtb	r4, r4
 801edba:	fb06 f909 	mul.w	r9, r6, r9
 801edbe:	fb00 9505 	mla	r5, r0, r5, r9
 801edc2:	fb95 f5f4 	sdiv	r5, r5, r4
 801edc6:	f801 5008 	strb.w	r5, [r1, r8]
 801edca:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801edce:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801edd2:	fb06 ee05 	mla	lr, r6, r5, lr
 801edd6:	9d07      	ldr	r5, [sp, #28]
 801edd8:	f88c 4003 	strb.w	r4, [ip, #3]
 801eddc:	4368      	muls	r0, r5
 801edde:	fb06 0609 	mla	r6, r6, r9, r0
 801ede2:	fb9e fef4 	sdiv	lr, lr, r4
 801ede6:	fb96 f6f4 	sdiv	r6, r6, r4
 801edea:	f88c e001 	strb.w	lr, [ip, #1]
 801edee:	f88c 6002 	strb.w	r6, [ip, #2]
 801edf2:	e7be      	b.n	801ed72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801edf4:	b2e5      	uxtb	r5, r4
 801edf6:	2c00      	cmp	r4, #0
 801edf8:	f43f af3a 	beq.w	801ec70 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801edfc:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801ee00:	b2f6      	uxtb	r6, r6
 801ee02:	fb04 fe0e 	mul.w	lr, r4, lr
 801ee06:	fb05 f908 	mul.w	r9, r5, r8
 801ee0a:	4445      	add	r5, r8
 801ee0c:	f109 0701 	add.w	r7, r9, #1
 801ee10:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801ee14:	123f      	asrs	r7, r7, #8
 801ee16:	1bed      	subs	r5, r5, r7
 801ee18:	eba8 0707 	sub.w	r7, r8, r7
 801ee1c:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801ee20:	b2ed      	uxtb	r5, r5
 801ee22:	fb07 f808 	mul.w	r8, r7, r8
 801ee26:	f800 5c01 	strb.w	r5, [r0, #-1]
 801ee2a:	fb04 8606 	mla	r6, r4, r6, r8
 801ee2e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801ee32:	fb96 f6f5 	sdiv	r6, r6, r5
 801ee36:	f800 6c04 	strb.w	r6, [r0, #-4]
 801ee3a:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801ee3e:	fb07 ee06 	mla	lr, r7, r6, lr
 801ee42:	9e04      	ldr	r6, [sp, #16]
 801ee44:	4374      	muls	r4, r6
 801ee46:	fb07 4708 	mla	r7, r7, r8, r4
 801ee4a:	fb9e fef5 	sdiv	lr, lr, r5
 801ee4e:	fb97 f7f5 	sdiv	r7, r7, r5
 801ee52:	f800 ec03 	strb.w	lr, [r0, #-3]
 801ee56:	f800 7c02 	strb.w	r7, [r0, #-2]
 801ee5a:	e709      	b.n	801ec70 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ee5c:	b009      	add	sp, #36	; 0x24
 801ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee62 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee66:	b087      	sub	sp, #28
 801ee68:	469b      	mov	fp, r3
 801ee6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ee70:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801ee74:	9100      	str	r1, [sp, #0]
 801ee76:	9204      	str	r2, [sp, #16]
 801ee78:	9305      	str	r3, [sp, #20]
 801ee7a:	6842      	ldr	r2, [r0, #4]
 801ee7c:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	; 0x58
 801ee80:	fb02 3101 	mla	r1, r2, r1, r3
 801ee84:	6803      	ldr	r3, [r0, #0]
 801ee86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801ee8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	9301      	str	r3, [sp, #4]
 801ee90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee92:	685b      	ldr	r3, [r3, #4]
 801ee94:	9302      	str	r3, [sp, #8]
 801ee96:	9b00      	ldr	r3, [sp, #0]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	dc03      	bgt.n	801eea4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ee9c:	9b04      	ldr	r3, [sp, #16]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	f340 8156 	ble.w	801f150 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801eea4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eea6:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801eeaa:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801eeae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eeb0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801eeb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eeb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801eeba:	f1bb 0f00 	cmp.w	fp, #0
 801eebe:	dd0f      	ble.n	801eee0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eec0:	1410      	asrs	r0, r2, #16
 801eec2:	d405      	bmi.n	801eed0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eec4:	42b0      	cmp	r0, r6
 801eec6:	da03      	bge.n	801eed0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eec8:	1418      	asrs	r0, r3, #16
 801eeca:	d401      	bmi.n	801eed0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eecc:	42a8      	cmp	r0, r5
 801eece:	db08      	blt.n	801eee2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eed0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eed6:	3104      	adds	r1, #4
 801eed8:	4402      	add	r2, r0
 801eeda:	9814      	ldr	r0, [sp, #80]	; 0x50
 801eedc:	4403      	add	r3, r0
 801eede:	e7ec      	b.n	801eeba <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eee0:	d053      	beq.n	801ef8a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eee2:	f10b 30ff 	add.w	r0, fp, #4294967295
 801eee6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eee8:	fb04 2400 	mla	r4, r4, r0, r2
 801eeec:	1424      	asrs	r4, r4, #16
 801eeee:	d442      	bmi.n	801ef76 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801eef0:	42b4      	cmp	r4, r6
 801eef2:	da40      	bge.n	801ef76 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801eef4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eef6:	fb04 3000 	mla	r0, r4, r0, r3
 801eefa:	1400      	asrs	r0, r0, #16
 801eefc:	d43b      	bmi.n	801ef76 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801eefe:	42a8      	cmp	r0, r5
 801ef00:	da39      	bge.n	801ef76 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ef02:	1d08      	adds	r0, r1, #4
 801ef04:	46d8      	mov	r8, fp
 801ef06:	f1b8 0f00 	cmp.w	r8, #0
 801ef0a:	dd3a      	ble.n	801ef82 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801ef0c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ef0e:	141c      	asrs	r4, r3, #16
 801ef10:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801ef14:	1415      	asrs	r5, r2, #16
 801ef16:	fb06 5404 	mla	r4, r6, r4, r5
 801ef1a:	9e02      	ldr	r6, [sp, #8]
 801ef1c:	9d01      	ldr	r5, [sp, #4]
 801ef1e:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801ef22:	5d34      	ldrb	r4, [r6, r4]
 801ef24:	9e05      	ldr	r6, [sp, #20]
 801ef26:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801ef2a:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801ef2e:	4374      	muls	r4, r6
 801ef30:	00ed      	lsls	r5, r5, #3
 801ef32:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ef36:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ef3a:	1c66      	adds	r6, r4, #1
 801ef3c:	b2ed      	uxtb	r5, r5
 801ef3e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801ef42:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801ef46:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801ef4a:	1224      	asrs	r4, r4, #8
 801ef4c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ef50:	2cff      	cmp	r4, #255	; 0xff
 801ef52:	f040 80cb 	bne.w	801f0ec <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ef56:	f800 5c04 	strb.w	r5, [r0, #-4]
 801ef5a:	f800 cc03 	strb.w	ip, [r0, #-3]
 801ef5e:	f800 ec02 	strb.w	lr, [r0, #-2]
 801ef62:	f800 4c01 	strb.w	r4, [r0, #-1]
 801ef66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ef68:	3004      	adds	r0, #4
 801ef6a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ef6e:	4422      	add	r2, r4
 801ef70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ef72:	4423      	add	r3, r4
 801ef74:	e7c7      	b.n	801ef06 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ef76:	f04f 0c00 	mov.w	ip, #0
 801ef7a:	eb0b 000c 	add.w	r0, fp, ip
 801ef7e:	2800      	cmp	r0, #0
 801ef80:	dc41      	bgt.n	801f006 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ef82:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801ef86:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ef8a:	9b00      	ldr	r3, [sp, #0]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	f340 80df 	ble.w	801f150 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801ef92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef9c:	eeb0 6a62 	vmov.f32	s12, s5
 801efa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801efb0:	eeb0 6a43 	vmov.f32	s12, s6
 801efb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efb8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801efbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efd4:	ee12 2a90 	vmov	r2, s5
 801efd8:	eef0 2a47 	vmov.f32	s5, s14
 801efdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801efe0:	ee13 2a10 	vmov	r2, s6
 801efe4:	9313      	str	r3, [sp, #76]	; 0x4c
 801efe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efe8:	eeb0 3a67 	vmov.f32	s6, s15
 801efec:	fb92 f3f3 	sdiv	r3, r2, r3
 801eff0:	9314      	str	r3, [sp, #80]	; 0x50
 801eff2:	9b00      	ldr	r3, [sp, #0]
 801eff4:	9a04      	ldr	r2, [sp, #16]
 801eff6:	3b01      	subs	r3, #1
 801eff8:	9300      	str	r3, [sp, #0]
 801effa:	bf08      	it	eq
 801effc:	4693      	moveq	fp, r2
 801effe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f000:	bf18      	it	ne
 801f002:	469b      	movne	fp, r3
 801f004:	e747      	b.n	801ee96 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f006:	1415      	asrs	r5, r2, #16
 801f008:	d433      	bmi.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f00a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f00c:	6884      	ldr	r4, [r0, #8]
 801f00e:	42ac      	cmp	r4, r5
 801f010:	dd2f      	ble.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f012:	141e      	asrs	r6, r3, #16
 801f014:	d42d      	bmi.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f016:	68c0      	ldr	r0, [r0, #12]
 801f018:	42b0      	cmp	r0, r6
 801f01a:	dd2a      	ble.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f01c:	b224      	sxth	r4, r4
 801f01e:	9801      	ldr	r0, [sp, #4]
 801f020:	fb06 5504 	mla	r5, r6, r4, r5
 801f024:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801f028:	9802      	ldr	r0, [sp, #8]
 801f02a:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801f02e:	5d40      	ldrb	r0, [r0, r5]
 801f030:	10e7      	asrs	r7, r4, #3
 801f032:	9d05      	ldr	r5, [sp, #20]
 801f034:	00e4      	lsls	r4, r4, #3
 801f036:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f03a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f03e:	4368      	muls	r0, r5
 801f040:	b2e4      	uxtb	r4, r4
 801f042:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801f046:	1c45      	adds	r5, r0, #1
 801f048:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f04c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f050:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f054:	9403      	str	r4, [sp, #12]
 801f056:	1200      	asrs	r0, r0, #8
 801f058:	28ff      	cmp	r0, #255	; 0xff
 801f05a:	d111      	bne.n	801f080 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801f05c:	f06f 0403 	mvn.w	r4, #3
 801f060:	fb04 f50c 	mul.w	r5, r4, ip
 801f064:	9c03      	ldr	r4, [sp, #12]
 801f066:	554c      	strb	r4, [r1, r5]
 801f068:	440d      	add	r5, r1
 801f06a:	706f      	strb	r7, [r5, #1]
 801f06c:	f885 e002 	strb.w	lr, [r5, #2]
 801f070:	70e8      	strb	r0, [r5, #3]
 801f072:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f074:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f078:	4402      	add	r2, r0
 801f07a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f07c:	4403      	add	r3, r0
 801f07e:	e77c      	b.n	801ef7a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f080:	b2c5      	uxtb	r5, r0
 801f082:	2800      	cmp	r0, #0
 801f084:	d0f5      	beq.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f086:	f06f 0403 	mvn.w	r4, #3
 801f08a:	4347      	muls	r7, r0
 801f08c:	fb04 f90c 	mul.w	r9, r4, ip
 801f090:	eb01 0809 	add.w	r8, r1, r9
 801f094:	f898 a003 	ldrb.w	sl, [r8, #3]
 801f098:	fb05 f60a 	mul.w	r6, r5, sl
 801f09c:	4455      	add	r5, sl
 801f09e:	1c74      	adds	r4, r6, #1
 801f0a0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f0a4:	9c03      	ldr	r4, [sp, #12]
 801f0a6:	1236      	asrs	r6, r6, #8
 801f0a8:	4344      	muls	r4, r0
 801f0aa:	fb00 f00e 	mul.w	r0, r0, lr
 801f0ae:	1bad      	subs	r5, r5, r6
 801f0b0:	ebaa 0606 	sub.w	r6, sl, r6
 801f0b4:	f811 a009 	ldrb.w	sl, [r1, r9]
 801f0b8:	b2ed      	uxtb	r5, r5
 801f0ba:	fb06 440a 	mla	r4, r6, sl, r4
 801f0be:	fb94 f4f5 	sdiv	r4, r4, r5
 801f0c2:	f801 4009 	strb.w	r4, [r1, r9]
 801f0c6:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f0ca:	f898 a002 	ldrb.w	sl, [r8, #2]
 801f0ce:	fb06 7704 	mla	r7, r6, r4, r7
 801f0d2:	fb06 060a 	mla	r6, r6, sl, r0
 801f0d6:	f888 5003 	strb.w	r5, [r8, #3]
 801f0da:	fb97 f7f5 	sdiv	r7, r7, r5
 801f0de:	fb96 f6f5 	sdiv	r6, r6, r5
 801f0e2:	f888 7001 	strb.w	r7, [r8, #1]
 801f0e6:	f888 6002 	strb.w	r6, [r8, #2]
 801f0ea:	e7c2      	b.n	801f072 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f0ec:	b2e6      	uxtb	r6, r4
 801f0ee:	2c00      	cmp	r4, #0
 801f0f0:	f43f af39 	beq.w	801ef66 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f0f4:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801f0f8:	4365      	muls	r5, r4
 801f0fa:	fb04 fc0c 	mul.w	ip, r4, ip
 801f0fe:	fb06 fa09 	mul.w	sl, r6, r9
 801f102:	444e      	add	r6, r9
 801f104:	fb04 f40e 	mul.w	r4, r4, lr
 801f108:	f10a 0701 	add.w	r7, sl, #1
 801f10c:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801f110:	123f      	asrs	r7, r7, #8
 801f112:	1bf6      	subs	r6, r6, r7
 801f114:	eba9 0707 	sub.w	r7, r9, r7
 801f118:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801f11c:	b2f6      	uxtb	r6, r6
 801f11e:	fb07 5509 	mla	r5, r7, r9, r5
 801f122:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801f126:	f800 6c01 	strb.w	r6, [r0, #-1]
 801f12a:	fb95 f5f6 	sdiv	r5, r5, r6
 801f12e:	f800 5c04 	strb.w	r5, [r0, #-4]
 801f132:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801f136:	fb07 cc05 	mla	ip, r7, r5, ip
 801f13a:	fb07 4709 	mla	r7, r7, r9, r4
 801f13e:	fb9c fcf6 	sdiv	ip, ip, r6
 801f142:	fb97 f7f6 	sdiv	r7, r7, r6
 801f146:	f800 cc03 	strb.w	ip, [r0, #-3]
 801f14a:	f800 7c02 	strb.w	r7, [r0, #-2]
 801f14e:	e70a      	b.n	801ef66 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f150:	b007      	add	sp, #28
 801f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f156 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f15a:	b087      	sub	sp, #28
 801f15c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f160:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f162:	9101      	str	r1, [sp, #4]
 801f164:	9205      	str	r2, [sp, #20]
 801f166:	6861      	ldr	r1, [r4, #4]
 801f168:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801f16c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f170:	fb01 2000 	mla	r0, r1, r0, r2
 801f174:	6822      	ldr	r2, [r4, #0]
 801f176:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f17a:	f8db 2000 	ldr.w	r2, [fp]
 801f17e:	9202      	str	r2, [sp, #8]
 801f180:	f8db 2004 	ldr.w	r2, [fp, #4]
 801f184:	9203      	str	r2, [sp, #12]
 801f186:	9a01      	ldr	r2, [sp, #4]
 801f188:	2a00      	cmp	r2, #0
 801f18a:	dc03      	bgt.n	801f194 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f18c:	9a05      	ldr	r2, [sp, #20]
 801f18e:	2a00      	cmp	r2, #0
 801f190:	f340 8151 	ble.w	801f436 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f196:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f19a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f19e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1a0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f1a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	dd0e      	ble.n	801f1ca <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f1ac:	140c      	asrs	r4, r1, #16
 801f1ae:	d405      	bmi.n	801f1bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1b0:	42bc      	cmp	r4, r7
 801f1b2:	da03      	bge.n	801f1bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1b4:	1414      	asrs	r4, r2, #16
 801f1b6:	d401      	bmi.n	801f1bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1b8:	42b4      	cmp	r4, r6
 801f1ba:	db07      	blt.n	801f1cc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1be:	3b01      	subs	r3, #1
 801f1c0:	3004      	adds	r0, #4
 801f1c2:	4421      	add	r1, r4
 801f1c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1c6:	4422      	add	r2, r4
 801f1c8:	e7ee      	b.n	801f1a8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f1ca:	d049      	beq.n	801f260 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f1cc:	1e5c      	subs	r4, r3, #1
 801f1ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f1d0:	fb05 1504 	mla	r5, r5, r4, r1
 801f1d4:	142d      	asrs	r5, r5, #16
 801f1d6:	d43b      	bmi.n	801f250 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f1d8:	42bd      	cmp	r5, r7
 801f1da:	da39      	bge.n	801f250 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f1dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f1de:	fb05 2404 	mla	r4, r5, r4, r2
 801f1e2:	1424      	asrs	r4, r4, #16
 801f1e4:	d434      	bmi.n	801f250 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f1e6:	42b4      	cmp	r4, r6
 801f1e8:	da32      	bge.n	801f250 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f1ea:	1d04      	adds	r4, r0, #4
 801f1ec:	4699      	mov	r9, r3
 801f1ee:	f1b9 0f00 	cmp.w	r9, #0
 801f1f2:	dd31      	ble.n	801f258 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801f1f4:	1415      	asrs	r5, r2, #16
 801f1f6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f1fa:	140e      	asrs	r6, r1, #16
 801f1fc:	fb07 6605 	mla	r6, r7, r5, r6
 801f200:	9d02      	ldr	r5, [sp, #8]
 801f202:	9f03      	ldr	r7, [sp, #12]
 801f204:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801f208:	5dbe      	ldrb	r6, [r7, r6]
 801f20a:	ea4f 2825 	mov.w	r8, r5, asr #8
 801f20e:	10ef      	asrs	r7, r5, #3
 801f210:	2eff      	cmp	r6, #255	; 0xff
 801f212:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801f216:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f21a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f21e:	b2ed      	uxtb	r5, r5
 801f220:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801f224:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f228:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f22c:	f040 80cd 	bne.w	801f3ca <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801f230:	f804 5c04 	strb.w	r5, [r4, #-4]
 801f234:	f804 7c03 	strb.w	r7, [r4, #-3]
 801f238:	f804 8c02 	strb.w	r8, [r4, #-2]
 801f23c:	f804 6c01 	strb.w	r6, [r4, #-1]
 801f240:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f242:	3404      	adds	r4, #4
 801f244:	f109 39ff 	add.w	r9, r9, #4294967295
 801f248:	4429      	add	r1, r5
 801f24a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f24c:	442a      	add	r2, r5
 801f24e:	e7ce      	b.n	801f1ee <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f250:	2700      	movs	r7, #0
 801f252:	19dc      	adds	r4, r3, r7
 801f254:	2c00      	cmp	r4, #0
 801f256:	dc3f      	bgt.n	801f2d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801f258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f25c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f260:	9b01      	ldr	r3, [sp, #4]
 801f262:	2b00      	cmp	r3, #0
 801f264:	f340 80e7 	ble.w	801f436 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f268:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f26e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f272:	eeb0 6a62 	vmov.f32	s12, s5
 801f276:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f27a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f27e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f282:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f286:	eeb0 6a43 	vmov.f32	s12, s6
 801f28a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f28e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f292:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f296:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f29a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f29e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2aa:	ee12 2a90 	vmov	r2, s5
 801f2ae:	eef0 2a47 	vmov.f32	s5, s14
 801f2b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2b6:	ee13 2a10 	vmov	r2, s6
 801f2ba:	9313      	str	r3, [sp, #76]	; 0x4c
 801f2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2be:	eeb0 3a67 	vmov.f32	s6, s15
 801f2c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2c6:	9314      	str	r3, [sp, #80]	; 0x50
 801f2c8:	9b01      	ldr	r3, [sp, #4]
 801f2ca:	9a05      	ldr	r2, [sp, #20]
 801f2cc:	3b01      	subs	r3, #1
 801f2ce:	9301      	str	r3, [sp, #4]
 801f2d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2d2:	bf08      	it	eq
 801f2d4:	4613      	moveq	r3, r2
 801f2d6:	e756      	b.n	801f186 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f2d8:	140e      	asrs	r6, r1, #16
 801f2da:	d434      	bmi.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f2dc:	f8db 5008 	ldr.w	r5, [fp, #8]
 801f2e0:	42b5      	cmp	r5, r6
 801f2e2:	dd30      	ble.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f2e4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f2e8:	d42d      	bmi.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f2ea:	f8db 400c 	ldr.w	r4, [fp, #12]
 801f2ee:	4564      	cmp	r4, ip
 801f2f0:	dd29      	ble.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f2f2:	b22d      	sxth	r5, r5
 801f2f4:	9c02      	ldr	r4, [sp, #8]
 801f2f6:	fb0c 6505 	mla	r5, ip, r5, r6
 801f2fa:	9e03      	ldr	r6, [sp, #12]
 801f2fc:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f300:	5d75      	ldrb	r5, [r6, r5]
 801f302:	ea4f 2824 	mov.w	r8, r4, asr #8
 801f306:	2dff      	cmp	r5, #255	; 0xff
 801f308:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f30c:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801f310:	9604      	str	r6, [sp, #16]
 801f312:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801f316:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801f31a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f31e:	b2e4      	uxtb	r4, r4
 801f320:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f324:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f328:	d113      	bne.n	801f352 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f32a:	f06f 0c03 	mvn.w	ip, #3
 801f32e:	fb0c fc07 	mul.w	ip, ip, r7
 801f332:	f800 400c 	strb.w	r4, [r0, ip]
 801f336:	4484      	add	ip, r0
 801f338:	9c04      	ldr	r4, [sp, #16]
 801f33a:	f88c 6001 	strb.w	r6, [ip, #1]
 801f33e:	f88c 4002 	strb.w	r4, [ip, #2]
 801f342:	f88c 5003 	strb.w	r5, [ip, #3]
 801f346:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f348:	3f01      	subs	r7, #1
 801f34a:	4421      	add	r1, r4
 801f34c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f34e:	4422      	add	r2, r4
 801f350:	e77f      	b.n	801f252 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f352:	2d00      	cmp	r5, #0
 801f354:	d0f7      	beq.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f356:	fb14 f405 	smulbb	r4, r4, r5
 801f35a:	f06f 0c03 	mvn.w	ip, #3
 801f35e:	fb15 f606 	smulbb	r6, r5, r6
 801f362:	fb0c fa07 	mul.w	sl, ip, r7
 801f366:	eb00 090a 	add.w	r9, r0, sl
 801f36a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f36e:	fb05 fc08 	mul.w	ip, r5, r8
 801f372:	f10c 0e01 	add.w	lr, ip, #1
 801f376:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f37a:	eb05 0c08 	add.w	ip, r5, r8
 801f37e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f382:	ebac 0c0e 	sub.w	ip, ip, lr
 801f386:	eba8 0e0e 	sub.w	lr, r8, lr
 801f38a:	f810 800a 	ldrb.w	r8, [r0, sl]
 801f38e:	fa5f fc8c 	uxtb.w	ip, ip
 801f392:	fb0e 4408 	mla	r4, lr, r8, r4
 801f396:	fb94 f4fc 	sdiv	r4, r4, ip
 801f39a:	f800 400a 	strb.w	r4, [r0, sl]
 801f39e:	f899 4001 	ldrb.w	r4, [r9, #1]
 801f3a2:	f889 c003 	strb.w	ip, [r9, #3]
 801f3a6:	fb0e 6604 	mla	r6, lr, r4, r6
 801f3aa:	f899 4002 	ldrb.w	r4, [r9, #2]
 801f3ae:	fb96 f6fc 	sdiv	r6, r6, ip
 801f3b2:	f889 6001 	strb.w	r6, [r9, #1]
 801f3b6:	9e04      	ldr	r6, [sp, #16]
 801f3b8:	fb15 f506 	smulbb	r5, r5, r6
 801f3bc:	fb0e 5504 	mla	r5, lr, r4, r5
 801f3c0:	fb95 f5fc 	sdiv	r5, r5, ip
 801f3c4:	f889 5002 	strb.w	r5, [r9, #2]
 801f3c8:	e7bd      	b.n	801f346 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f3ca:	2e00      	cmp	r6, #0
 801f3cc:	f43f af38 	beq.w	801f240 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f3d0:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801f3d4:	fb15 f506 	smulbb	r5, r5, r6
 801f3d8:	fb16 f707 	smulbb	r7, r6, r7
 801f3dc:	fb06 fc0a 	mul.w	ip, r6, sl
 801f3e0:	f10c 0e01 	add.w	lr, ip, #1
 801f3e4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f3e8:	eb06 0c0a 	add.w	ip, r6, sl
 801f3ec:	fb16 f608 	smulbb	r6, r6, r8
 801f3f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f3f4:	ebac 0c0e 	sub.w	ip, ip, lr
 801f3f8:	ebaa 0e0e 	sub.w	lr, sl, lr
 801f3fc:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801f400:	fa5f fc8c 	uxtb.w	ip, ip
 801f404:	fb0e 550a 	mla	r5, lr, sl, r5
 801f408:	f804 cc01 	strb.w	ip, [r4, #-1]
 801f40c:	fb95 f5fc 	sdiv	r5, r5, ip
 801f410:	f804 5c04 	strb.w	r5, [r4, #-4]
 801f414:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801f418:	fb0e 7705 	mla	r7, lr, r5, r7
 801f41c:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801f420:	fb0e 6605 	mla	r6, lr, r5, r6
 801f424:	fb97 f7fc 	sdiv	r7, r7, ip
 801f428:	fb96 f6fc 	sdiv	r6, r6, ip
 801f42c:	f804 7c03 	strb.w	r7, [r4, #-3]
 801f430:	f804 6c02 	strb.w	r6, [r4, #-2]
 801f434:	e704      	b.n	801f240 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f436:	b007      	add	sp, #28
 801f438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f43c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f440:	b085      	sub	sp, #20
 801f442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f446:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f448:	9101      	str	r1, [sp, #4]
 801f44a:	6868      	ldr	r0, [r5, #4]
 801f44c:	9203      	str	r2, [sp, #12]
 801f44e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f452:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801f456:	fb00 1404 	mla	r4, r0, r4, r1
 801f45a:	6829      	ldr	r1, [r5, #0]
 801f45c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f460:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f462:	6809      	ldr	r1, [r1, #0]
 801f464:	9102      	str	r1, [sp, #8]
 801f466:	9901      	ldr	r1, [sp, #4]
 801f468:	2900      	cmp	r1, #0
 801f46a:	dc03      	bgt.n	801f474 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f46c:	9903      	ldr	r1, [sp, #12]
 801f46e:	2900      	cmp	r1, #0
 801f470:	f340 8150 	ble.w	801f714 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f474:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f476:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f47a:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801f47e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f480:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801f484:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f486:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	dd0e      	ble.n	801f4ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f48e:	1405      	asrs	r5, r0, #16
 801f490:	d405      	bmi.n	801f49e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f492:	4565      	cmp	r5, ip
 801f494:	da03      	bge.n	801f49e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f496:	140d      	asrs	r5, r1, #16
 801f498:	d401      	bmi.n	801f49e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f49a:	42bd      	cmp	r5, r7
 801f49c:	db07      	blt.n	801f4ae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f49e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f4a0:	3b01      	subs	r3, #1
 801f4a2:	3404      	adds	r4, #4
 801f4a4:	4428      	add	r0, r5
 801f4a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f4a8:	4429      	add	r1, r5
 801f4aa:	e7ee      	b.n	801f48a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f4ac:	d04c      	beq.n	801f548 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f4ae:	1e5d      	subs	r5, r3, #1
 801f4b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f4b2:	fb06 0605 	mla	r6, r6, r5, r0
 801f4b6:	1436      	asrs	r6, r6, #16
 801f4b8:	d43c      	bmi.n	801f534 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f4ba:	4566      	cmp	r6, ip
 801f4bc:	da3a      	bge.n	801f534 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f4be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f4c0:	fb06 1505 	mla	r5, r6, r5, r1
 801f4c4:	142d      	asrs	r5, r5, #16
 801f4c6:	d435      	bmi.n	801f534 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f4c8:	42bd      	cmp	r5, r7
 801f4ca:	da33      	bge.n	801f534 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f4cc:	1d25      	adds	r5, r4, #4
 801f4ce:	4699      	mov	r9, r3
 801f4d0:	f1b9 0f00 	cmp.w	r9, #0
 801f4d4:	dd34      	ble.n	801f540 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f4d6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801f4d8:	140e      	asrs	r6, r1, #16
 801f4da:	2aff      	cmp	r2, #255	; 0xff
 801f4dc:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f4e0:	ea4f 4720 	mov.w	r7, r0, asr #16
 801f4e4:	fb0c 7606 	mla	r6, ip, r6, r7
 801f4e8:	9f02      	ldr	r7, [sp, #8]
 801f4ea:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801f4ee:	ea4f 2726 	mov.w	r7, r6, asr #8
 801f4f2:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801f4f6:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801f4fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f4fe:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f502:	b2f6      	uxtb	r6, r6
 801f504:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f508:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801f50c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f510:	f040 80ca 	bne.w	801f6a8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801f514:	f805 6c04 	strb.w	r6, [r5, #-4]
 801f518:	f805 cc03 	strb.w	ip, [r5, #-3]
 801f51c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f520:	f805 2c01 	strb.w	r2, [r5, #-1]
 801f524:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f526:	3504      	adds	r5, #4
 801f528:	f109 39ff 	add.w	r9, r9, #4294967295
 801f52c:	4430      	add	r0, r6
 801f52e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f530:	4431      	add	r1, r6
 801f532:	e7cd      	b.n	801f4d0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f534:	f04f 0c00 	mov.w	ip, #0
 801f538:	eb03 050c 	add.w	r5, r3, ip
 801f53c:	2d00      	cmp	r5, #0
 801f53e:	dc3f      	bgt.n	801f5c0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801f540:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f544:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f548:	9b01      	ldr	r3, [sp, #4]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	f340 80e2 	ble.w	801f714 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f550:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f556:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f55a:	eeb0 6a62 	vmov.f32	s12, s5
 801f55e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f562:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f566:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f56a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f56e:	eeb0 6a43 	vmov.f32	s12, s6
 801f572:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f576:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f57a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f57e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f582:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f586:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f58a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f58e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f592:	ee12 1a90 	vmov	r1, s5
 801f596:	eef0 2a47 	vmov.f32	s5, s14
 801f59a:	fb91 f3f3 	sdiv	r3, r1, r3
 801f59e:	ee13 1a10 	vmov	r1, s6
 801f5a2:	9311      	str	r3, [sp, #68]	; 0x44
 801f5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5a6:	eeb0 3a67 	vmov.f32	s6, s15
 801f5aa:	fb91 f3f3 	sdiv	r3, r1, r3
 801f5ae:	9312      	str	r3, [sp, #72]	; 0x48
 801f5b0:	9b01      	ldr	r3, [sp, #4]
 801f5b2:	9903      	ldr	r1, [sp, #12]
 801f5b4:	3b01      	subs	r3, #1
 801f5b6:	9301      	str	r3, [sp, #4]
 801f5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5ba:	bf08      	it	eq
 801f5bc:	460b      	moveq	r3, r1
 801f5be:	e752      	b.n	801f466 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f5c0:	1407      	asrs	r7, r0, #16
 801f5c2:	d42f      	bmi.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f5c6:	68ae      	ldr	r6, [r5, #8]
 801f5c8:	42be      	cmp	r6, r7
 801f5ca:	dd2b      	ble.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5cc:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f5d0:	d428      	bmi.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5d2:	68ed      	ldr	r5, [r5, #12]
 801f5d4:	4575      	cmp	r5, lr
 801f5d6:	dd25      	ble.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5d8:	b236      	sxth	r6, r6
 801f5da:	9d02      	ldr	r5, [sp, #8]
 801f5dc:	2aff      	cmp	r2, #255	; 0xff
 801f5de:	fb0e 7606 	mla	r6, lr, r6, r7
 801f5e2:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801f5e6:	ea4f 2625 	mov.w	r6, r5, asr #8
 801f5ea:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801f5ee:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801f5f2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f5f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5fa:	b2ed      	uxtb	r5, r5
 801f5fc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f600:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f604:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f608:	d113      	bne.n	801f632 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f60a:	f06f 0e03 	mvn.w	lr, #3
 801f60e:	fb0e fe0c 	mul.w	lr, lr, ip
 801f612:	f804 500e 	strb.w	r5, [r4, lr]
 801f616:	44a6      	add	lr, r4
 801f618:	f88e 7001 	strb.w	r7, [lr, #1]
 801f61c:	f88e 6002 	strb.w	r6, [lr, #2]
 801f620:	f88e 2003 	strb.w	r2, [lr, #3]
 801f624:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f626:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f62a:	4428      	add	r0, r5
 801f62c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f62e:	4429      	add	r1, r5
 801f630:	e782      	b.n	801f538 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f632:	2a00      	cmp	r2, #0
 801f634:	d0f6      	beq.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f636:	fb15 f502 	smulbb	r5, r5, r2
 801f63a:	f06f 0e03 	mvn.w	lr, #3
 801f63e:	fb12 f707 	smulbb	r7, r2, r7
 801f642:	fb12 f606 	smulbb	r6, r2, r6
 801f646:	fb0e fa0c 	mul.w	sl, lr, ip
 801f64a:	eb04 090a 	add.w	r9, r4, sl
 801f64e:	f899 b003 	ldrb.w	fp, [r9, #3]
 801f652:	fb02 fe0b 	mul.w	lr, r2, fp
 801f656:	f10e 0801 	add.w	r8, lr, #1
 801f65a:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801f65e:	eb02 0e0b 	add.w	lr, r2, fp
 801f662:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f666:	ebae 0e08 	sub.w	lr, lr, r8
 801f66a:	ebab 0808 	sub.w	r8, fp, r8
 801f66e:	f814 b00a 	ldrb.w	fp, [r4, sl]
 801f672:	fa5f fe8e 	uxtb.w	lr, lr
 801f676:	fb08 550b 	mla	r5, r8, fp, r5
 801f67a:	fb95 f5fe 	sdiv	r5, r5, lr
 801f67e:	f804 500a 	strb.w	r5, [r4, sl]
 801f682:	f899 5001 	ldrb.w	r5, [r9, #1]
 801f686:	f889 e003 	strb.w	lr, [r9, #3]
 801f68a:	fb08 7705 	mla	r7, r8, r5, r7
 801f68e:	f899 5002 	ldrb.w	r5, [r9, #2]
 801f692:	fb08 6605 	mla	r6, r8, r5, r6
 801f696:	fb97 f7fe 	sdiv	r7, r7, lr
 801f69a:	fb96 f6fe 	sdiv	r6, r6, lr
 801f69e:	f889 7001 	strb.w	r7, [r9, #1]
 801f6a2:	f889 6002 	strb.w	r6, [r9, #2]
 801f6a6:	e7bd      	b.n	801f624 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6a8:	2a00      	cmp	r2, #0
 801f6aa:	f43f af3b 	beq.w	801f524 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801f6ae:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801f6b2:	fb16 f602 	smulbb	r6, r6, r2
 801f6b6:	fb12 fc0c 	smulbb	ip, r2, ip
 801f6ba:	fb12 f707 	smulbb	r7, r2, r7
 801f6be:	fb02 fe0a 	mul.w	lr, r2, sl
 801f6c2:	f10e 0801 	add.w	r8, lr, #1
 801f6c6:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801f6ca:	eb02 0e0a 	add.w	lr, r2, sl
 801f6ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f6d2:	ebae 0e08 	sub.w	lr, lr, r8
 801f6d6:	ebaa 0808 	sub.w	r8, sl, r8
 801f6da:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801f6de:	fa5f fe8e 	uxtb.w	lr, lr
 801f6e2:	fb08 660a 	mla	r6, r8, sl, r6
 801f6e6:	f805 ec01 	strb.w	lr, [r5, #-1]
 801f6ea:	fb96 f6fe 	sdiv	r6, r6, lr
 801f6ee:	f805 6c04 	strb.w	r6, [r5, #-4]
 801f6f2:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801f6f6:	fb08 cc06 	mla	ip, r8, r6, ip
 801f6fa:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801f6fe:	fb08 7706 	mla	r7, r8, r6, r7
 801f702:	fb9c fcfe 	sdiv	ip, ip, lr
 801f706:	fb97 f7fe 	sdiv	r7, r7, lr
 801f70a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801f70e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f712:	e707      	b.n	801f524 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801f714:	b005      	add	sp, #20
 801f716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f71a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f71a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f71e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f724:	9201      	str	r2, [sp, #4]
 801f726:	6860      	ldr	r0, [r4, #4]
 801f728:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f72a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801f72e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801f732:	fb00 2505 	mla	r5, r0, r5, r2
 801f736:	6822      	ldr	r2, [r4, #0]
 801f738:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801f73c:	683a      	ldr	r2, [r7, #0]
 801f73e:	9200      	str	r2, [sp, #0]
 801f740:	2900      	cmp	r1, #0
 801f742:	dc03      	bgt.n	801f74c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f744:	9a01      	ldr	r2, [sp, #4]
 801f746:	2a00      	cmp	r2, #0
 801f748:	f340 80be 	ble.w	801f8c8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f74e:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801f752:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f758:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801f75c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f760:	2b00      	cmp	r3, #0
 801f762:	dd0c      	ble.n	801f77e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f764:	1404      	asrs	r4, r0, #16
 801f766:	d405      	bmi.n	801f774 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f768:	454c      	cmp	r4, r9
 801f76a:	da03      	bge.n	801f774 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f76c:	1414      	asrs	r4, r2, #16
 801f76e:	d401      	bmi.n	801f774 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f770:	4564      	cmp	r4, ip
 801f772:	db05      	blt.n	801f780 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f774:	4440      	add	r0, r8
 801f776:	4472      	add	r2, lr
 801f778:	3b01      	subs	r3, #1
 801f77a:	3504      	adds	r5, #4
 801f77c:	e7f0      	b.n	801f760 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f77e:	d00e      	beq.n	801f79e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f780:	1e5c      	subs	r4, r3, #1
 801f782:	fb08 0604 	mla	r6, r8, r4, r0
 801f786:	1436      	asrs	r6, r6, #16
 801f788:	d53e      	bpl.n	801f808 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801f78a:	4699      	mov	r9, r3
 801f78c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801f790:	f1b9 0f00 	cmp.w	r9, #0
 801f794:	dc68      	bgt.n	801f868 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f79a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801f79e:	2900      	cmp	r1, #0
 801f7a0:	f340 8092 	ble.w	801f8c8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f7a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7ae:	3901      	subs	r1, #1
 801f7b0:	eeb0 6a62 	vmov.f32	s12, s5
 801f7b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7c0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f7c4:	eeb0 6a43 	vmov.f32	s12, s6
 801f7c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7cc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f7d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7e8:	ee12 2a90 	vmov	r2, s5
 801f7ec:	eef0 2a47 	vmov.f32	s5, s14
 801f7f0:	fb92 f8f3 	sdiv	r8, r2, r3
 801f7f4:	ee13 2a10 	vmov	r2, s6
 801f7f8:	eeb0 3a67 	vmov.f32	s6, s15
 801f7fc:	fb92 fef3 	sdiv	lr, r2, r3
 801f800:	9a01      	ldr	r2, [sp, #4]
 801f802:	bf08      	it	eq
 801f804:	4613      	moveq	r3, r2
 801f806:	e79b      	b.n	801f740 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801f808:	454e      	cmp	r6, r9
 801f80a:	dabe      	bge.n	801f78a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f80c:	fb0e 2404 	mla	r4, lr, r4, r2
 801f810:	1424      	asrs	r4, r4, #16
 801f812:	d4ba      	bmi.n	801f78a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f814:	4564      	cmp	r4, ip
 801f816:	dab8      	bge.n	801f78a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f818:	4699      	mov	r9, r3
 801f81a:	46aa      	mov	sl, r5
 801f81c:	f1b9 0f00 	cmp.w	r9, #0
 801f820:	ddb9      	ble.n	801f796 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f822:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f826:	1406      	asrs	r6, r0, #16
 801f828:	1414      	asrs	r4, r2, #16
 801f82a:	4440      	add	r0, r8
 801f82c:	4472      	add	r2, lr
 801f82e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f832:	fb0c 6404 	mla	r4, ip, r4, r6
 801f836:	9e00      	ldr	r6, [sp, #0]
 801f838:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801f83c:	10f4      	asrs	r4, r6, #3
 801f83e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f842:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f846:	00f6      	lsls	r6, r6, #3
 801f848:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f84c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f850:	b2f6      	uxtb	r6, r6
 801f852:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f856:	0224      	lsls	r4, r4, #8
 801f858:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f85c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f860:	4334      	orrs	r4, r6
 801f862:	f84a 4b04 	str.w	r4, [sl], #4
 801f866:	e7d9      	b.n	801f81c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801f868:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f86c:	d427      	bmi.n	801f8be <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f86e:	68be      	ldr	r6, [r7, #8]
 801f870:	4566      	cmp	r6, ip
 801f872:	dd24      	ble.n	801f8be <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f874:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f878:	d421      	bmi.n	801f8be <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f87a:	68fc      	ldr	r4, [r7, #12]
 801f87c:	455c      	cmp	r4, fp
 801f87e:	dd1e      	ble.n	801f8be <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f880:	b236      	sxth	r6, r6
 801f882:	9c00      	ldr	r4, [sp, #0]
 801f884:	fb0b c606 	mla	r6, fp, r6, ip
 801f888:	f06f 0b03 	mvn.w	fp, #3
 801f88c:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801f890:	fb0b fb09 	mul.w	fp, fp, r9
 801f894:	10f4      	asrs	r4, r6, #3
 801f896:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801f89a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f89e:	00f6      	lsls	r6, r6, #3
 801f8a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f8a4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801f8a8:	b2f6      	uxtb	r6, r6
 801f8aa:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f8ae:	0224      	lsls	r4, r4, #8
 801f8b0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f8b4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f8b8:	4334      	orrs	r4, r6
 801f8ba:	f84a 400b 	str.w	r4, [sl, fp]
 801f8be:	4440      	add	r0, r8
 801f8c0:	4472      	add	r2, lr
 801f8c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801f8c6:	e763      	b.n	801f790 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8c8:	b003      	add	sp, #12
 801f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8ce <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d2:	b085      	sub	sp, #20
 801f8d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f8d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f8da:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f8de:	6868      	ldr	r0, [r5, #4]
 801f8e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f8e4:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801f8e8:	fb00 1404 	mla	r4, r0, r4, r1
 801f8ec:	6829      	ldr	r1, [r5, #0]
 801f8ee:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f8f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f8f4:	6809      	ldr	r1, [r1, #0]
 801f8f6:	9101      	str	r1, [sp, #4]
 801f8f8:	9902      	ldr	r1, [sp, #8]
 801f8fa:	2900      	cmp	r1, #0
 801f8fc:	dc03      	bgt.n	801f906 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f8fe:	9903      	ldr	r1, [sp, #12]
 801f900:	2900      	cmp	r1, #0
 801f902:	f340 8137 	ble.w	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f906:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f908:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f90c:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801f910:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f912:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801f916:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f918:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	dd0e      	ble.n	801f93e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f920:	1405      	asrs	r5, r0, #16
 801f922:	d405      	bmi.n	801f930 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f924:	4565      	cmp	r5, ip
 801f926:	da03      	bge.n	801f930 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f928:	140d      	asrs	r5, r1, #16
 801f92a:	d401      	bmi.n	801f930 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f92c:	42bd      	cmp	r5, r7
 801f92e:	db07      	blt.n	801f940 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f930:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f932:	3b01      	subs	r3, #1
 801f934:	3404      	adds	r4, #4
 801f936:	4428      	add	r0, r5
 801f938:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f93a:	4429      	add	r1, r5
 801f93c:	e7ee      	b.n	801f91c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f93e:	d041      	beq.n	801f9c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f940:	1e5d      	subs	r5, r3, #1
 801f942:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f944:	fb06 0605 	mla	r6, r6, r5, r0
 801f948:	1436      	asrs	r6, r6, #16
 801f94a:	d433      	bmi.n	801f9b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f94c:	4566      	cmp	r6, ip
 801f94e:	da31      	bge.n	801f9b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f950:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f952:	fb06 1505 	mla	r5, r6, r5, r1
 801f956:	142d      	asrs	r5, r5, #16
 801f958:	d42c      	bmi.n	801f9b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f95a:	42bd      	cmp	r5, r7
 801f95c:	da2a      	bge.n	801f9b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f95e:	1d25      	adds	r5, r4, #4
 801f960:	469a      	mov	sl, r3
 801f962:	f1ba 0f00 	cmp.w	sl, #0
 801f966:	dd29      	ble.n	801f9bc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801f968:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801f96a:	140e      	asrs	r6, r1, #16
 801f96c:	2aff      	cmp	r2, #255	; 0xff
 801f96e:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801f972:	ea4f 4720 	mov.w	r7, r0, asr #16
 801f976:	fb0c 7606 	mla	r6, ip, r6, r7
 801f97a:	9f01      	ldr	r7, [sp, #4]
 801f97c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f980:	4437      	add	r7, r6
 801f982:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f986:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f98a:	9f01      	ldr	r7, [sp, #4]
 801f98c:	f817 9006 	ldrb.w	r9, [r7, r6]
 801f990:	f040 80bb 	bne.w	801fb0a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801f994:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f998:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f99c:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f9a0:	f805 2c01 	strb.w	r2, [r5, #-1]
 801f9a4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f9a6:	3504      	adds	r5, #4
 801f9a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f9ac:	4430      	add	r0, r6
 801f9ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f9b0:	4431      	add	r1, r6
 801f9b2:	e7d6      	b.n	801f962 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f9b4:	2500      	movs	r5, #0
 801f9b6:	195e      	adds	r6, r3, r5
 801f9b8:	2e00      	cmp	r6, #0
 801f9ba:	dc3f      	bgt.n	801fa3c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f9bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f9c4:	9b02      	ldr	r3, [sp, #8]
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	f340 80d4 	ble.w	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f9cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9d6:	eeb0 6a62 	vmov.f32	s12, s5
 801f9da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f9ea:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f9f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa0e:	ee12 1a90 	vmov	r1, s5
 801fa12:	eef0 2a47 	vmov.f32	s5, s14
 801fa16:	fb91 f3f3 	sdiv	r3, r1, r3
 801fa1a:	ee13 1a10 	vmov	r1, s6
 801fa1e:	9311      	str	r3, [sp, #68]	; 0x44
 801fa20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa22:	eeb0 3a67 	vmov.f32	s6, s15
 801fa26:	fb91 f3f3 	sdiv	r3, r1, r3
 801fa2a:	9312      	str	r3, [sp, #72]	; 0x48
 801fa2c:	9b02      	ldr	r3, [sp, #8]
 801fa2e:	9903      	ldr	r1, [sp, #12]
 801fa30:	3b01      	subs	r3, #1
 801fa32:	9302      	str	r3, [sp, #8]
 801fa34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa36:	bf08      	it	eq
 801fa38:	460b      	moveq	r3, r1
 801fa3a:	e75d      	b.n	801f8f8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fa3c:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801fa40:	d424      	bmi.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fa42:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801fa44:	68b7      	ldr	r7, [r6, #8]
 801fa46:	4567      	cmp	r7, ip
 801fa48:	dd20      	ble.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fa4a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801fa4e:	d41d      	bmi.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fa50:	68f6      	ldr	r6, [r6, #12]
 801fa52:	4576      	cmp	r6, lr
 801fa54:	dd1a      	ble.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fa56:	b23f      	sxth	r7, r7
 801fa58:	9e01      	ldr	r6, [sp, #4]
 801fa5a:	2aff      	cmp	r2, #255	; 0xff
 801fa5c:	fb0e cc07 	mla	ip, lr, r7, ip
 801fa60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fa64:	4466      	add	r6, ip
 801fa66:	f896 8002 	ldrb.w	r8, [r6, #2]
 801fa6a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fa6e:	9e01      	ldr	r6, [sp, #4]
 801fa70:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801fa74:	d110      	bne.n	801fa98 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801fa76:	f06f 0603 	mvn.w	r6, #3
 801fa7a:	436e      	muls	r6, r5
 801fa7c:	f804 a006 	strb.w	sl, [r4, r6]
 801fa80:	4426      	add	r6, r4
 801fa82:	f886 9001 	strb.w	r9, [r6, #1]
 801fa86:	f886 8002 	strb.w	r8, [r6, #2]
 801fa8a:	70f2      	strb	r2, [r6, #3]
 801fa8c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fa8e:	3d01      	subs	r5, #1
 801fa90:	4430      	add	r0, r6
 801fa92:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fa94:	4431      	add	r1, r6
 801fa96:	e78e      	b.n	801f9b6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801fa98:	2a00      	cmp	r2, #0
 801fa9a:	d0f7      	beq.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fa9c:	fb1a fa02 	smulbb	sl, sl, r2
 801faa0:	f06f 0603 	mvn.w	r6, #3
 801faa4:	fb12 f909 	smulbb	r9, r2, r9
 801faa8:	fb12 f808 	smulbb	r8, r2, r8
 801faac:	fb06 fb05 	mul.w	fp, r6, r5
 801fab0:	eb04 0c0b 	add.w	ip, r4, fp
 801fab4:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801fab8:	fb02 f607 	mul.w	r6, r2, r7
 801fabc:	f106 0e01 	add.w	lr, r6, #1
 801fac0:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801fac4:	19d6      	adds	r6, r2, r7
 801fac6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801faca:	eba7 070e 	sub.w	r7, r7, lr
 801face:	eba6 060e 	sub.w	r6, r6, lr
 801fad2:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801fad6:	b2f6      	uxtb	r6, r6
 801fad8:	fb07 aa0e 	mla	sl, r7, lr, sl
 801fadc:	fb9a faf6 	sdiv	sl, sl, r6
 801fae0:	f804 a00b 	strb.w	sl, [r4, fp]
 801fae4:	f89c e001 	ldrb.w	lr, [ip, #1]
 801fae8:	f88c 6003 	strb.w	r6, [ip, #3]
 801faec:	fb07 990e 	mla	r9, r7, lr, r9
 801faf0:	f89c e002 	ldrb.w	lr, [ip, #2]
 801faf4:	fb07 880e 	mla	r8, r7, lr, r8
 801faf8:	fb99 f9f6 	sdiv	r9, r9, r6
 801fafc:	fb98 f8f6 	sdiv	r8, r8, r6
 801fb00:	f88c 9001 	strb.w	r9, [ip, #1]
 801fb04:	f88c 8002 	strb.w	r8, [ip, #2]
 801fb08:	e7c0      	b.n	801fa8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801fb0a:	2a00      	cmp	r2, #0
 801fb0c:	f43f af4a 	beq.w	801f9a4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801fb10:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801fb14:	fb19 f902 	smulbb	r9, r9, r2
 801fb18:	fb12 f808 	smulbb	r8, r2, r8
 801fb1c:	fb02 fc0b 	mul.w	ip, r2, fp
 801fb20:	eb02 060b 	add.w	r6, r2, fp
 801fb24:	fb12 fe0e 	smulbb	lr, r2, lr
 801fb28:	f10c 0701 	add.w	r7, ip, #1
 801fb2c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fb30:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801fb34:	ebab 070c 	sub.w	r7, fp, ip
 801fb38:	eba6 060c 	sub.w	r6, r6, ip
 801fb3c:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801fb40:	b2f6      	uxtb	r6, r6
 801fb42:	fb07 990c 	mla	r9, r7, ip, r9
 801fb46:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801fb4a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801fb4e:	fb07 880c 	mla	r8, r7, ip, r8
 801fb52:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801fb56:	fb07 ee0c 	mla	lr, r7, ip, lr
 801fb5a:	fb99 f9f6 	sdiv	r9, r9, r6
 801fb5e:	fb98 f8f6 	sdiv	r8, r8, r6
 801fb62:	fb9e fef6 	sdiv	lr, lr, r6
 801fb66:	f805 9c04 	strb.w	r9, [r5, #-4]
 801fb6a:	f805 8c03 	strb.w	r8, [r5, #-3]
 801fb6e:	f805 ec02 	strb.w	lr, [r5, #-2]
 801fb72:	e717      	b.n	801f9a4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801fb74:	b005      	add	sp, #20
 801fb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb7a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb84:	9201      	str	r2, [sp, #4]
 801fb86:	6868      	ldr	r0, [r5, #4]
 801fb88:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801fb8a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801fb8e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801fb92:	fb00 2404 	mla	r4, r0, r4, r2
 801fb96:	682a      	ldr	r2, [r5, #0]
 801fb98:	f8d7 8000 	ldr.w	r8, [r7]
 801fb9c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801fba0:	2900      	cmp	r1, #0
 801fba2:	dc03      	bgt.n	801fbac <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fba4:	9a01      	ldr	r2, [sp, #4]
 801fba6:	2a00      	cmp	r2, #0
 801fba8:	f340 80af 	ble.w	801fd0a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801fbac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fbae:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801fbb2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fbb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbb8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801fbbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	dd0c      	ble.n	801fbde <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fbc4:	1405      	asrs	r5, r0, #16
 801fbc6:	d405      	bmi.n	801fbd4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fbc8:	4555      	cmp	r5, sl
 801fbca:	da03      	bge.n	801fbd4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fbcc:	1415      	asrs	r5, r2, #16
 801fbce:	d401      	bmi.n	801fbd4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fbd0:	454d      	cmp	r5, r9
 801fbd2:	db05      	blt.n	801fbe0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fbd4:	4470      	add	r0, lr
 801fbd6:	4462      	add	r2, ip
 801fbd8:	3b01      	subs	r3, #1
 801fbda:	3404      	adds	r4, #4
 801fbdc:	e7f0      	b.n	801fbc0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fbde:	d037      	beq.n	801fc50 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801fbe0:	1e5d      	subs	r5, r3, #1
 801fbe2:	fb0e 0605 	mla	r6, lr, r5, r0
 801fbe6:	1436      	asrs	r6, r6, #16
 801fbe8:	d42a      	bmi.n	801fc40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801fbea:	4556      	cmp	r6, sl
 801fbec:	da28      	bge.n	801fc40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801fbee:	fb0c 2505 	mla	r5, ip, r5, r2
 801fbf2:	142d      	asrs	r5, r5, #16
 801fbf4:	d424      	bmi.n	801fc40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801fbf6:	454d      	cmp	r5, r9
 801fbf8:	da22      	bge.n	801fc40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801fbfa:	1d26      	adds	r6, r4, #4
 801fbfc:	4699      	mov	r9, r3
 801fbfe:	f1b9 0f00 	cmp.w	r9, #0
 801fc02:	f106 0604 	add.w	r6, r6, #4
 801fc06:	dd1f      	ble.n	801fc48 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 801fc08:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801fc0c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fc10:	1415      	asrs	r5, r2, #16
 801fc12:	4470      	add	r0, lr
 801fc14:	4462      	add	r2, ip
 801fc16:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc1a:	fb0b a505 	mla	r5, fp, r5, sl
 801fc1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc22:	eb08 0a05 	add.w	sl, r8, r5
 801fc26:	f818 5005 	ldrb.w	r5, [r8, r5]
 801fc2a:	f806 5c08 	strb.w	r5, [r6, #-8]
 801fc2e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801fc32:	f806 5c07 	strb.w	r5, [r6, #-7]
 801fc36:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801fc3a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801fc3e:	e7de      	b.n	801fbfe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc40:	2600      	movs	r6, #0
 801fc42:	199d      	adds	r5, r3, r6
 801fc44:	2d00      	cmp	r5, #0
 801fc46:	dc37      	bgt.n	801fcb8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fc48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc4c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801fc50:	2900      	cmp	r1, #0
 801fc52:	dd5a      	ble.n	801fd0a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801fc54:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc5e:	3901      	subs	r1, #1
 801fc60:	eeb0 6a62 	vmov.f32	s12, s5
 801fc64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc68:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc70:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fc74:	eeb0 6a43 	vmov.f32	s12, s6
 801fc78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc7c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fc80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc84:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc88:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc98:	ee12 2a90 	vmov	r2, s5
 801fc9c:	eef0 2a47 	vmov.f32	s5, s14
 801fca0:	fb92 fef3 	sdiv	lr, r2, r3
 801fca4:	ee13 2a10 	vmov	r2, s6
 801fca8:	eeb0 3a67 	vmov.f32	s6, s15
 801fcac:	fb92 fcf3 	sdiv	ip, r2, r3
 801fcb0:	9a01      	ldr	r2, [sp, #4]
 801fcb2:	bf08      	it	eq
 801fcb4:	4613      	moveq	r3, r2
 801fcb6:	e773      	b.n	801fba0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801fcb8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fcbc:	d421      	bmi.n	801fd02 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fcbe:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801fcc2:	45cb      	cmp	fp, r9
 801fcc4:	dd1d      	ble.n	801fd02 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fcc6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fcca:	d41a      	bmi.n	801fd02 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fccc:	68fd      	ldr	r5, [r7, #12]
 801fcce:	4555      	cmp	r5, sl
 801fcd0:	dd17      	ble.n	801fd02 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fcd2:	fa0f f58b 	sxth.w	r5, fp
 801fcd6:	fb0a 9505 	mla	r5, sl, r5, r9
 801fcda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fcde:	f818 9005 	ldrb.w	r9, [r8, r5]
 801fce2:	eb08 0b05 	add.w	fp, r8, r5
 801fce6:	f06f 0503 	mvn.w	r5, #3
 801fcea:	4375      	muls	r5, r6
 801fcec:	f804 9005 	strb.w	r9, [r4, r5]
 801fcf0:	4425      	add	r5, r4
 801fcf2:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801fcf6:	f885 9001 	strb.w	r9, [r5, #1]
 801fcfa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fcfe:	f885 9002 	strb.w	r9, [r5, #2]
 801fd02:	4470      	add	r0, lr
 801fd04:	4462      	add	r2, ip
 801fd06:	3e01      	subs	r6, #1
 801fd08:	e79b      	b.n	801fc42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fd0a:	b003      	add	sp, #12
 801fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd10 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd14:	b087      	sub	sp, #28
 801fd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fd1c:	9203      	str	r2, [sp, #12]
 801fd1e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fd22:	9100      	str	r1, [sp, #0]
 801fd24:	9204      	str	r2, [sp, #16]
 801fd26:	6861      	ldr	r1, [r4, #4]
 801fd28:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801fd2c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801fd30:	fb01 2000 	mla	r0, r1, r0, r2
 801fd34:	6822      	ldr	r2, [r4, #0]
 801fd36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fd3a:	f8db 2000 	ldr.w	r2, [fp]
 801fd3e:	9201      	str	r2, [sp, #4]
 801fd40:	9a00      	ldr	r2, [sp, #0]
 801fd42:	2a00      	cmp	r2, #0
 801fd44:	dc03      	bgt.n	801fd4e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fd46:	9a03      	ldr	r2, [sp, #12]
 801fd48:	2a00      	cmp	r2, #0
 801fd4a:	f340 8147 	ble.w	801ffdc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801fd4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd50:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fd54:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd5a:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801fd5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	dd0e      	ble.n	801fd84 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd66:	140c      	asrs	r4, r1, #16
 801fd68:	d405      	bmi.n	801fd76 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd6a:	42bc      	cmp	r4, r7
 801fd6c:	da03      	bge.n	801fd76 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd6e:	1414      	asrs	r4, r2, #16
 801fd70:	d401      	bmi.n	801fd76 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fd72:	42b4      	cmp	r4, r6
 801fd74:	db07      	blt.n	801fd86 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fd78:	3b01      	subs	r3, #1
 801fd7a:	3004      	adds	r0, #4
 801fd7c:	4421      	add	r1, r4
 801fd7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd80:	4422      	add	r2, r4
 801fd82:	e7ee      	b.n	801fd62 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fd84:	d048      	beq.n	801fe18 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801fd86:	1e5c      	subs	r4, r3, #1
 801fd88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fd8a:	fb05 1504 	mla	r5, r5, r4, r1
 801fd8e:	142d      	asrs	r5, r5, #16
 801fd90:	d438      	bmi.n	801fe04 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fd92:	42bd      	cmp	r5, r7
 801fd94:	da36      	bge.n	801fe04 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fd96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fd98:	fb05 2404 	mla	r4, r5, r4, r2
 801fd9c:	1424      	asrs	r4, r4, #16
 801fd9e:	d431      	bmi.n	801fe04 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fda0:	42b4      	cmp	r4, r6
 801fda2:	da2f      	bge.n	801fe04 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fda4:	469e      	mov	lr, r3
 801fda6:	4604      	mov	r4, r0
 801fda8:	f1be 0f00 	cmp.w	lr, #0
 801fdac:	dd30      	ble.n	801fe10 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801fdae:	140e      	asrs	r6, r1, #16
 801fdb0:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801fdb4:	1415      	asrs	r5, r2, #16
 801fdb6:	fb07 6505 	mla	r5, r7, r5, r6
 801fdba:	9e01      	ldr	r6, [sp, #4]
 801fdbc:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 801fdc0:	0e35      	lsrs	r5, r6, #24
 801fdc2:	d017      	beq.n	801fdf4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801fdc4:	9f04      	ldr	r7, [sp, #16]
 801fdc6:	f3c6 4907 	ubfx	r9, r6, #16, #8
 801fdca:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801fdce:	437d      	muls	r5, r7
 801fdd0:	fa5f f88c 	uxtb.w	r8, ip
 801fdd4:	1c6f      	adds	r7, r5, #1
 801fdd6:	eb07 2525 	add.w	r5, r7, r5, asr #8
 801fdda:	fa5f f789 	uxtb.w	r7, r9
 801fdde:	122d      	asrs	r5, r5, #8
 801fde0:	9702      	str	r7, [sp, #8]
 801fde2:	2dff      	cmp	r5, #255	; 0xff
 801fde4:	f040 80c7 	bne.w	801ff76 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fde8:	7026      	strb	r6, [r4, #0]
 801fdea:	f884 c001 	strb.w	ip, [r4, #1]
 801fdee:	f884 9002 	strb.w	r9, [r4, #2]
 801fdf2:	70e5      	strb	r5, [r4, #3]
 801fdf4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fdf6:	3404      	adds	r4, #4
 801fdf8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fdfc:	4429      	add	r1, r5
 801fdfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fe00:	442a      	add	r2, r5
 801fe02:	e7d1      	b.n	801fda8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe04:	f04f 0c00 	mov.w	ip, #0
 801fe08:	eb03 040c 	add.w	r4, r3, ip
 801fe0c:	2c00      	cmp	r4, #0
 801fe0e:	dc3f      	bgt.n	801fe90 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 801fe10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fe18:	9b00      	ldr	r3, [sp, #0]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	f340 80de 	ble.w	801ffdc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801fe20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe2a:	eeb0 6a62 	vmov.f32	s12, s5
 801fe2e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe32:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe3a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fe3e:	eeb0 6a43 	vmov.f32	s12, s6
 801fe42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe46:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fe4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe52:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe62:	ee12 2a90 	vmov	r2, s5
 801fe66:	eef0 2a47 	vmov.f32	s5, s14
 801fe6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe6e:	ee13 2a10 	vmov	r2, s6
 801fe72:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe76:	eeb0 3a67 	vmov.f32	s6, s15
 801fe7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe7e:	9314      	str	r3, [sp, #80]	; 0x50
 801fe80:	9b00      	ldr	r3, [sp, #0]
 801fe82:	9a03      	ldr	r2, [sp, #12]
 801fe84:	3b01      	subs	r3, #1
 801fe86:	9300      	str	r3, [sp, #0]
 801fe88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe8a:	bf08      	it	eq
 801fe8c:	4613      	moveq	r3, r2
 801fe8e:	e757      	b.n	801fd40 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fe90:	140e      	asrs	r6, r1, #16
 801fe92:	d42e      	bmi.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fe94:	f8db 5008 	ldr.w	r5, [fp, #8]
 801fe98:	42b5      	cmp	r5, r6
 801fe9a:	dd2a      	ble.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fe9c:	1417      	asrs	r7, r2, #16
 801fe9e:	d428      	bmi.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fea0:	f8db 400c 	ldr.w	r4, [fp, #12]
 801fea4:	42bc      	cmp	r4, r7
 801fea6:	dd24      	ble.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fea8:	b22d      	sxth	r5, r5
 801feaa:	9c01      	ldr	r4, [sp, #4]
 801feac:	fb07 6505 	mla	r5, r7, r5, r6
 801feb0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801feb4:	0e2c      	lsrs	r4, r5, #24
 801feb6:	d01c      	beq.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801feb8:	9e04      	ldr	r6, [sp, #16]
 801feba:	4374      	muls	r4, r6
 801febc:	1c66      	adds	r6, r4, #1
 801febe:	eb06 2424 	add.w	r4, r6, r4, asr #8
 801fec2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fec6:	1224      	asrs	r4, r4, #8
 801fec8:	b2f7      	uxtb	r7, r6
 801feca:	2cff      	cmp	r4, #255	; 0xff
 801fecc:	9705      	str	r7, [sp, #20]
 801fece:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801fed2:	fa5f f887 	uxtb.w	r8, r7
 801fed6:	d113      	bne.n	801ff00 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fed8:	f06f 0e03 	mvn.w	lr, #3
 801fedc:	fb0e fe0c 	mul.w	lr, lr, ip
 801fee0:	f800 500e 	strb.w	r5, [r0, lr]
 801fee4:	4486      	add	lr, r0
 801fee6:	f88e 7001 	strb.w	r7, [lr, #1]
 801feea:	f88e 6002 	strb.w	r6, [lr, #2]
 801feee:	f88e 4003 	strb.w	r4, [lr, #3]
 801fef2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fef4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fef8:	4421      	add	r1, r4
 801fefa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fefc:	4422      	add	r2, r4
 801fefe:	e783      	b.n	801fe08 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ff00:	b2e6      	uxtb	r6, r4
 801ff02:	9602      	str	r6, [sp, #8]
 801ff04:	2c00      	cmp	r4, #0
 801ff06:	d0f4      	beq.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ff08:	f06f 0603 	mvn.w	r6, #3
 801ff0c:	b2ed      	uxtb	r5, r5
 801ff0e:	fb04 f808 	mul.w	r8, r4, r8
 801ff12:	fb06 f90c 	mul.w	r9, r6, ip
 801ff16:	9e02      	ldr	r6, [sp, #8]
 801ff18:	eb00 0e09 	add.w	lr, r0, r9
 801ff1c:	f89e a003 	ldrb.w	sl, [lr, #3]
 801ff20:	fb06 f70a 	mul.w	r7, r6, sl
 801ff24:	1c7e      	adds	r6, r7, #1
 801ff26:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801ff2a:	9e02      	ldr	r6, [sp, #8]
 801ff2c:	123f      	asrs	r7, r7, #8
 801ff2e:	4456      	add	r6, sl
 801ff30:	1bf6      	subs	r6, r6, r7
 801ff32:	ebaa 0707 	sub.w	r7, sl, r7
 801ff36:	f810 a009 	ldrb.w	sl, [r0, r9]
 801ff3a:	b2f6      	uxtb	r6, r6
 801ff3c:	fb07 fa0a 	mul.w	sl, r7, sl
 801ff40:	fb04 a505 	mla	r5, r4, r5, sl
 801ff44:	fb95 f5f6 	sdiv	r5, r5, r6
 801ff48:	f800 5009 	strb.w	r5, [r0, r9]
 801ff4c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ff50:	f89e a002 	ldrb.w	sl, [lr, #2]
 801ff54:	fb07 8805 	mla	r8, r7, r5, r8
 801ff58:	9d05      	ldr	r5, [sp, #20]
 801ff5a:	f88e 6003 	strb.w	r6, [lr, #3]
 801ff5e:	436c      	muls	r4, r5
 801ff60:	fb07 470a 	mla	r7, r7, sl, r4
 801ff64:	fb98 f8f6 	sdiv	r8, r8, r6
 801ff68:	fb97 f7f6 	sdiv	r7, r7, r6
 801ff6c:	f88e 8001 	strb.w	r8, [lr, #1]
 801ff70:	f88e 7002 	strb.w	r7, [lr, #2]
 801ff74:	e7bd      	b.n	801fef2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ff76:	b2ef      	uxtb	r7, r5
 801ff78:	2d00      	cmp	r5, #0
 801ff7a:	f43f af3b 	beq.w	801fdf4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ff7e:	f894 9003 	ldrb.w	r9, [r4, #3]
 801ff82:	b2f6      	uxtb	r6, r6
 801ff84:	fb05 f808 	mul.w	r8, r5, r8
 801ff88:	fb07 fa09 	mul.w	sl, r7, r9
 801ff8c:	444f      	add	r7, r9
 801ff8e:	f10a 0c01 	add.w	ip, sl, #1
 801ff92:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ff96:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ff9a:	eba7 070c 	sub.w	r7, r7, ip
 801ff9e:	eba9 0c0c 	sub.w	ip, r9, ip
 801ffa2:	f894 9000 	ldrb.w	r9, [r4]
 801ffa6:	b2ff      	uxtb	r7, r7
 801ffa8:	fb0c f909 	mul.w	r9, ip, r9
 801ffac:	70e7      	strb	r7, [r4, #3]
 801ffae:	fb05 9606 	mla	r6, r5, r6, r9
 801ffb2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ffb6:	fb96 f6f7 	sdiv	r6, r6, r7
 801ffba:	7026      	strb	r6, [r4, #0]
 801ffbc:	7866      	ldrb	r6, [r4, #1]
 801ffbe:	fb0c 8806 	mla	r8, ip, r6, r8
 801ffc2:	9e02      	ldr	r6, [sp, #8]
 801ffc4:	4375      	muls	r5, r6
 801ffc6:	fb0c 5c09 	mla	ip, ip, r9, r5
 801ffca:	fb98 f8f7 	sdiv	r8, r8, r7
 801ffce:	fb9c fcf7 	sdiv	ip, ip, r7
 801ffd2:	f884 8001 	strb.w	r8, [r4, #1]
 801ffd6:	f884 c002 	strb.w	ip, [r4, #2]
 801ffda:	e70b      	b.n	801fdf4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ffdc:	b007      	add	sp, #28
 801ffde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ffe4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffe8:	b089      	sub	sp, #36	; 0x24
 801ffea:	469a      	mov	sl, r3
 801ffec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fff0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fff2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801fff6:	9102      	str	r1, [sp, #8]
 801fff8:	9206      	str	r2, [sp, #24]
 801fffa:	9307      	str	r3, [sp, #28]
 801fffc:	6842      	ldr	r2, [r0, #4]
 801fffe:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8020002:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 8020006:	fb02 3101 	mla	r1, r2, r1, r3
 802000a:	6803      	ldr	r3, [r0, #0]
 802000c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020010:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020014:	3301      	adds	r3, #1
 8020016:	f023 0301 	bic.w	r3, r3, #1
 802001a:	9303      	str	r3, [sp, #12]
 802001c:	f8db 3000 	ldr.w	r3, [fp]
 8020020:	9304      	str	r3, [sp, #16]
 8020022:	9b02      	ldr	r3, [sp, #8]
 8020024:	2b00      	cmp	r3, #0
 8020026:	dc03      	bgt.n	8020030 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020028:	9b06      	ldr	r3, [sp, #24]
 802002a:	2b00      	cmp	r3, #0
 802002c:	f340 8154 	ble.w	80202d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020032:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8020036:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 802003a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802003c:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8020040:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8020044:	9301      	str	r3, [sp, #4]
 8020046:	f1ba 0f00 	cmp.w	sl, #0
 802004a:	dd12      	ble.n	8020072 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802004c:	1410      	asrs	r0, r2, #16
 802004e:	d406      	bmi.n	802005e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020050:	42b0      	cmp	r0, r6
 8020052:	da04      	bge.n	802005e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020054:	9b01      	ldr	r3, [sp, #4]
 8020056:	1418      	asrs	r0, r3, #16
 8020058:	d401      	bmi.n	802005e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802005a:	42a8      	cmp	r0, r5
 802005c:	db0a      	blt.n	8020074 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802005e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020060:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020064:	9b01      	ldr	r3, [sp, #4]
 8020066:	3104      	adds	r1, #4
 8020068:	4402      	add	r2, r0
 802006a:	9816      	ldr	r0, [sp, #88]	; 0x58
 802006c:	4403      	add	r3, r0
 802006e:	9301      	str	r3, [sp, #4]
 8020070:	e7e9      	b.n	8020046 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020072:	d050      	beq.n	8020116 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020074:	f10a 30ff 	add.w	r0, sl, #4294967295
 8020078:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802007a:	fb04 2400 	mla	r4, r4, r0, r2
 802007e:	1424      	asrs	r4, r4, #16
 8020080:	d440      	bmi.n	8020104 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020082:	42b4      	cmp	r4, r6
 8020084:	da3e      	bge.n	8020104 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020086:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020088:	9b01      	ldr	r3, [sp, #4]
 802008a:	fb04 3000 	mla	r0, r4, r0, r3
 802008e:	1400      	asrs	r0, r0, #16
 8020090:	d438      	bmi.n	8020104 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020092:	42a8      	cmp	r0, r5
 8020094:	da36      	bge.n	8020104 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020096:	1d08      	adds	r0, r1, #4
 8020098:	46d6      	mov	lr, sl
 802009a:	f1be 0f00 	cmp.w	lr, #0
 802009e:	dd36      	ble.n	802010e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80200a0:	9b01      	ldr	r3, [sp, #4]
 80200a2:	1414      	asrs	r4, r2, #16
 80200a4:	141d      	asrs	r5, r3, #16
 80200a6:	9b03      	ldr	r3, [sp, #12]
 80200a8:	fb03 4505 	mla	r5, r3, r5, r4
 80200ac:	9b04      	ldr	r3, [sp, #16]
 80200ae:	086c      	lsrs	r4, r5, #1
 80200b0:	5d1c      	ldrb	r4, [r3, r4]
 80200b2:	07eb      	lsls	r3, r5, #31
 80200b4:	9b07      	ldr	r3, [sp, #28]
 80200b6:	bf54      	ite	pl
 80200b8:	f004 040f 	andpl.w	r4, r4, #15
 80200bc:	1124      	asrmi	r4, r4, #4
 80200be:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80200c2:	b2e4      	uxtb	r4, r4
 80200c4:	435c      	muls	r4, r3
 80200c6:	1c65      	adds	r5, r4, #1
 80200c8:	eb05 2424 	add.w	r4, r5, r4, asr #8
 80200cc:	4d84      	ldr	r5, [pc, #528]	; (80202e0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 80200ce:	1224      	asrs	r4, r4, #8
 80200d0:	f895 9002 	ldrb.w	r9, [r5, #2]
 80200d4:	786f      	ldrb	r7, [r5, #1]
 80200d6:	2cff      	cmp	r4, #255	; 0xff
 80200d8:	f895 c000 	ldrb.w	ip, [r5]
 80200dc:	f040 80cb 	bne.w	8020276 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80200e0:	f800 cc04 	strb.w	ip, [r0, #-4]
 80200e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80200e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80200ec:	f800 4c01 	strb.w	r4, [r0, #-1]
 80200f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80200f2:	3004      	adds	r0, #4
 80200f4:	9c01      	ldr	r4, [sp, #4]
 80200f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80200fa:	441a      	add	r2, r3
 80200fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80200fe:	441c      	add	r4, r3
 8020100:	9401      	str	r4, [sp, #4]
 8020102:	e7ca      	b.n	802009a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020104:	2600      	movs	r6, #0
 8020106:	eb0a 0006 	add.w	r0, sl, r6
 802010a:	2800      	cmp	r0, #0
 802010c:	dc41      	bgt.n	8020192 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802010e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020112:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020116:	9b02      	ldr	r3, [sp, #8]
 8020118:	2b00      	cmp	r3, #0
 802011a:	f340 80dd 	ble.w	80202d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802011e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020124:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020128:	eeb0 6a62 	vmov.f32	s12, s5
 802012c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020130:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020134:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020138:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 802013c:	eeb0 6a43 	vmov.f32	s12, s6
 8020140:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020144:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8020148:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802014c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020150:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020154:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020158:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802015c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020160:	ee12 2a90 	vmov	r2, s5
 8020164:	eef0 2a47 	vmov.f32	s5, s14
 8020168:	fb92 f3f3 	sdiv	r3, r2, r3
 802016c:	ee13 2a10 	vmov	r2, s6
 8020170:	9315      	str	r3, [sp, #84]	; 0x54
 8020172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020174:	eeb0 3a67 	vmov.f32	s6, s15
 8020178:	fb92 f3f3 	sdiv	r3, r2, r3
 802017c:	9316      	str	r3, [sp, #88]	; 0x58
 802017e:	9b02      	ldr	r3, [sp, #8]
 8020180:	9a06      	ldr	r2, [sp, #24]
 8020182:	3b01      	subs	r3, #1
 8020184:	9302      	str	r3, [sp, #8]
 8020186:	bf08      	it	eq
 8020188:	4692      	moveq	sl, r2
 802018a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802018c:	bf18      	it	ne
 802018e:	469a      	movne	sl, r3
 8020190:	e747      	b.n	8020022 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020192:	1414      	asrs	r4, r2, #16
 8020194:	d432      	bmi.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020196:	f8db 0008 	ldr.w	r0, [fp, #8]
 802019a:	42a0      	cmp	r0, r4
 802019c:	dd2e      	ble.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802019e:	9b01      	ldr	r3, [sp, #4]
 80201a0:	141d      	asrs	r5, r3, #16
 80201a2:	d42b      	bmi.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80201a4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80201a8:	42a8      	cmp	r0, r5
 80201aa:	dd27      	ble.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80201ac:	9803      	ldr	r0, [sp, #12]
 80201ae:	fb05 4400 	mla	r4, r5, r0, r4
 80201b2:	9d04      	ldr	r5, [sp, #16]
 80201b4:	0860      	lsrs	r0, r4, #1
 80201b6:	07e4      	lsls	r4, r4, #31
 80201b8:	9c07      	ldr	r4, [sp, #28]
 80201ba:	5c28      	ldrb	r0, [r5, r0]
 80201bc:	bf54      	ite	pl
 80201be:	f000 000f 	andpl.w	r0, r0, #15
 80201c2:	1100      	asrmi	r0, r0, #4
 80201c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80201c8:	b2c0      	uxtb	r0, r0
 80201ca:	4360      	muls	r0, r4
 80201cc:	1c44      	adds	r4, r0, #1
 80201ce:	eb04 2020 	add.w	r0, r4, r0, asr #8
 80201d2:	4c43      	ldr	r4, [pc, #268]	; (80202e0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 80201d4:	1200      	asrs	r0, r0, #8
 80201d6:	78a5      	ldrb	r5, [r4, #2]
 80201d8:	f894 c001 	ldrb.w	ip, [r4, #1]
 80201dc:	28ff      	cmp	r0, #255	; 0xff
 80201de:	9505      	str	r5, [sp, #20]
 80201e0:	f894 e000 	ldrb.w	lr, [r4]
 80201e4:	d112      	bne.n	802020c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80201e6:	f06f 0303 	mvn.w	r3, #3
 80201ea:	fb03 f406 	mul.w	r4, r3, r6
 80201ee:	f801 e004 	strb.w	lr, [r1, r4]
 80201f2:	440c      	add	r4, r1
 80201f4:	f884 c001 	strb.w	ip, [r4, #1]
 80201f8:	70a5      	strb	r5, [r4, #2]
 80201fa:	70e0      	strb	r0, [r4, #3]
 80201fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80201fe:	3e01      	subs	r6, #1
 8020200:	9801      	ldr	r0, [sp, #4]
 8020202:	441a      	add	r2, r3
 8020204:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020206:	4418      	add	r0, r3
 8020208:	9001      	str	r0, [sp, #4]
 802020a:	e77c      	b.n	8020106 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802020c:	b2c4      	uxtb	r4, r0
 802020e:	2800      	cmp	r0, #0
 8020210:	d0f4      	beq.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020212:	f06f 0303 	mvn.w	r3, #3
 8020216:	fb00 fe0e 	mul.w	lr, r0, lr
 802021a:	fb00 fc0c 	mul.w	ip, r0, ip
 802021e:	fb03 f806 	mul.w	r8, r3, r6
 8020222:	eb01 0708 	add.w	r7, r1, r8
 8020226:	f897 9003 	ldrb.w	r9, [r7, #3]
 802022a:	fb04 f509 	mul.w	r5, r4, r9
 802022e:	444c      	add	r4, r9
 8020230:	1c6b      	adds	r3, r5, #1
 8020232:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020236:	9b05      	ldr	r3, [sp, #20]
 8020238:	122d      	asrs	r5, r5, #8
 802023a:	4358      	muls	r0, r3
 802023c:	1b64      	subs	r4, r4, r5
 802023e:	eba9 0505 	sub.w	r5, r9, r5
 8020242:	f811 9008 	ldrb.w	r9, [r1, r8]
 8020246:	b2e4      	uxtb	r4, r4
 8020248:	fb05 ee09 	mla	lr, r5, r9, lr
 802024c:	fb9e fef4 	sdiv	lr, lr, r4
 8020250:	f801 e008 	strb.w	lr, [r1, r8]
 8020254:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020258:	f897 9002 	ldrb.w	r9, [r7, #2]
 802025c:	fb05 cc0e 	mla	ip, r5, lr, ip
 8020260:	fb05 0509 	mla	r5, r5, r9, r0
 8020264:	70fc      	strb	r4, [r7, #3]
 8020266:	fb9c fcf4 	sdiv	ip, ip, r4
 802026a:	fb95 f5f4 	sdiv	r5, r5, r4
 802026e:	f887 c001 	strb.w	ip, [r7, #1]
 8020272:	70bd      	strb	r5, [r7, #2]
 8020274:	e7c2      	b.n	80201fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020276:	b2e5      	uxtb	r5, r4
 8020278:	2c00      	cmp	r4, #0
 802027a:	f43f af39 	beq.w	80200f0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802027e:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 8020282:	fb04 fc0c 	mul.w	ip, r4, ip
 8020286:	4367      	muls	r7, r4
 8020288:	fb05 f608 	mul.w	r6, r5, r8
 802028c:	4445      	add	r5, r8
 802028e:	fb04 f409 	mul.w	r4, r4, r9
 8020292:	1c73      	adds	r3, r6, #1
 8020294:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020298:	1236      	asrs	r6, r6, #8
 802029a:	1bad      	subs	r5, r5, r6
 802029c:	eba8 0606 	sub.w	r6, r8, r6
 80202a0:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 80202a4:	b2ed      	uxtb	r5, r5
 80202a6:	fb06 cc08 	mla	ip, r6, r8, ip
 80202aa:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 80202ae:	f800 5c01 	strb.w	r5, [r0, #-1]
 80202b2:	fb9c fcf5 	sdiv	ip, ip, r5
 80202b6:	f800 cc04 	strb.w	ip, [r0, #-4]
 80202ba:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80202be:	fb06 770c 	mla	r7, r6, ip, r7
 80202c2:	fb06 4608 	mla	r6, r6, r8, r4
 80202c6:	fb97 f7f5 	sdiv	r7, r7, r5
 80202ca:	fb96 f6f5 	sdiv	r6, r6, r5
 80202ce:	f800 7c03 	strb.w	r7, [r0, #-3]
 80202d2:	f800 6c02 	strb.w	r6, [r0, #-2]
 80202d6:	e70b      	b.n	80200f0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80202d8:	b009      	add	sp, #36	; 0x24
 80202da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202de:	bf00      	nop
 80202e0:	2003c27c 	.word	0x2003c27c

080202e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e8:	b089      	sub	sp, #36	; 0x24
 80202ea:	469a      	mov	sl, r3
 80202ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80202f0:	4cb8      	ldr	r4, [pc, #736]	; (80205d4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 80202f2:	9102      	str	r1, [sp, #8]
 80202f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80202f6:	9205      	str	r2, [sp, #20]
 80202f8:	684a      	ldr	r2, [r1, #4]
 80202fa:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80202fe:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 8020302:	fb02 3000 	mla	r0, r2, r0, r3
 8020306:	680b      	ldr	r3, [r1, #0]
 8020308:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802030c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020310:	3301      	adds	r3, #1
 8020312:	f023 0301 	bic.w	r3, r3, #1
 8020316:	9303      	str	r3, [sp, #12]
 8020318:	f8db 3000 	ldr.w	r3, [fp]
 802031c:	9304      	str	r3, [sp, #16]
 802031e:	9b02      	ldr	r3, [sp, #8]
 8020320:	2b00      	cmp	r3, #0
 8020322:	dc03      	bgt.n	802032c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020324:	9b05      	ldr	r3, [sp, #20]
 8020326:	2b00      	cmp	r3, #0
 8020328:	f340 8150 	ble.w	80205cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802032c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802032e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020332:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8020336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020338:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802033c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8020340:	9301      	str	r3, [sp, #4]
 8020342:	f1ba 0f00 	cmp.w	sl, #0
 8020346:	dd12      	ble.n	802036e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020348:	140b      	asrs	r3, r1, #16
 802034a:	d406      	bmi.n	802035a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802034c:	42bb      	cmp	r3, r7
 802034e:	da04      	bge.n	802035a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020350:	9b01      	ldr	r3, [sp, #4]
 8020352:	141b      	asrs	r3, r3, #16
 8020354:	d401      	bmi.n	802035a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020356:	42b3      	cmp	r3, r6
 8020358:	db0a      	blt.n	8020370 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802035a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802035c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020360:	9a01      	ldr	r2, [sp, #4]
 8020362:	3004      	adds	r0, #4
 8020364:	4419      	add	r1, r3
 8020366:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020368:	441a      	add	r2, r3
 802036a:	9201      	str	r2, [sp, #4]
 802036c:	e7e9      	b.n	8020342 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802036e:	d046      	beq.n	80203fe <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8020370:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020374:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020376:	fb05 1503 	mla	r5, r5, r3, r1
 802037a:	142d      	asrs	r5, r5, #16
 802037c:	d436      	bmi.n	80203ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802037e:	42bd      	cmp	r5, r7
 8020380:	da34      	bge.n	80203ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020382:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020384:	9a01      	ldr	r2, [sp, #4]
 8020386:	fb05 2303 	mla	r3, r5, r3, r2
 802038a:	141b      	asrs	r3, r3, #16
 802038c:	d42e      	bmi.n	80203ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802038e:	42b3      	cmp	r3, r6
 8020390:	da2c      	bge.n	80203ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8020392:	1d05      	adds	r5, r0, #4
 8020394:	46d0      	mov	r8, sl
 8020396:	f1b8 0f00 	cmp.w	r8, #0
 802039a:	dd2c      	ble.n	80203f6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802039c:	9b01      	ldr	r3, [sp, #4]
 802039e:	9a03      	ldr	r2, [sp, #12]
 80203a0:	141e      	asrs	r6, r3, #16
 80203a2:	f894 e000 	ldrb.w	lr, [r4]
 80203a6:	140b      	asrs	r3, r1, #16
 80203a8:	fb02 3606 	mla	r6, r2, r6, r3
 80203ac:	9a04      	ldr	r2, [sp, #16]
 80203ae:	0873      	lsrs	r3, r6, #1
 80203b0:	5cd3      	ldrb	r3, [r2, r3]
 80203b2:	07f2      	lsls	r2, r6, #31
 80203b4:	bf54      	ite	pl
 80203b6:	f003 030f 	andpl.w	r3, r3, #15
 80203ba:	111b      	asrmi	r3, r3, #4
 80203bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80203c0:	b2db      	uxtb	r3, r3
 80203c2:	2bff      	cmp	r3, #255	; 0xff
 80203c4:	f040 80c9 	bne.w	802055a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80203c8:	f805 ec04 	strb.w	lr, [r5, #-4]
 80203cc:	7863      	ldrb	r3, [r4, #1]
 80203ce:	f805 3c03 	strb.w	r3, [r5, #-3]
 80203d2:	78a3      	ldrb	r3, [r4, #2]
 80203d4:	f805 3c02 	strb.w	r3, [r5, #-2]
 80203d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80203da:	3504      	adds	r5, #4
 80203dc:	9a01      	ldr	r2, [sp, #4]
 80203de:	f108 38ff 	add.w	r8, r8, #4294967295
 80203e2:	4419      	add	r1, r3
 80203e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80203e6:	441a      	add	r2, r3
 80203e8:	9201      	str	r2, [sp, #4]
 80203ea:	e7d4      	b.n	8020396 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80203ec:	2500      	movs	r5, #0
 80203ee:	eb0a 0305 	add.w	r3, sl, r5
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	dc41      	bgt.n	802047a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80203f6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80203fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80203fe:	9b02      	ldr	r3, [sp, #8]
 8020400:	2b00      	cmp	r3, #0
 8020402:	f340 80e3 	ble.w	80205cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020406:	ee30 0a04 	vadd.f32	s0, s0, s8
 802040a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802040c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020410:	eeb0 6a62 	vmov.f32	s12, s5
 8020414:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020418:	ee31 1a05 	vadd.f32	s2, s2, s10
 802041c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020420:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8020424:	eeb0 6a43 	vmov.f32	s12, s6
 8020428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802042c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8020430:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020434:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020438:	ee77 2a62 	vsub.f32	s5, s14, s5
 802043c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020440:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020448:	ee12 2a90 	vmov	r2, s5
 802044c:	eef0 2a47 	vmov.f32	s5, s14
 8020450:	fb92 f3f3 	sdiv	r3, r2, r3
 8020454:	ee13 2a10 	vmov	r2, s6
 8020458:	9315      	str	r3, [sp, #84]	; 0x54
 802045a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802045c:	eeb0 3a67 	vmov.f32	s6, s15
 8020460:	fb92 f3f3 	sdiv	r3, r2, r3
 8020464:	9316      	str	r3, [sp, #88]	; 0x58
 8020466:	9b02      	ldr	r3, [sp, #8]
 8020468:	9a05      	ldr	r2, [sp, #20]
 802046a:	3b01      	subs	r3, #1
 802046c:	9302      	str	r3, [sp, #8]
 802046e:	bf08      	it	eq
 8020470:	4692      	moveq	sl, r2
 8020472:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020474:	bf18      	it	ne
 8020476:	469a      	movne	sl, r3
 8020478:	e751      	b.n	802031e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802047a:	140e      	asrs	r6, r1, #16
 802047c:	d426      	bmi.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802047e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020482:	42b3      	cmp	r3, r6
 8020484:	dd22      	ble.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020486:	9b01      	ldr	r3, [sp, #4]
 8020488:	141f      	asrs	r7, r3, #16
 802048a:	d41f      	bmi.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802048c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8020490:	42bb      	cmp	r3, r7
 8020492:	dd1b      	ble.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020494:	9b03      	ldr	r3, [sp, #12]
 8020496:	f894 8000 	ldrb.w	r8, [r4]
 802049a:	fb07 6603 	mla	r6, r7, r3, r6
 802049e:	9f04      	ldr	r7, [sp, #16]
 80204a0:	0873      	lsrs	r3, r6, #1
 80204a2:	07f6      	lsls	r6, r6, #31
 80204a4:	5cfb      	ldrb	r3, [r7, r3]
 80204a6:	bf54      	ite	pl
 80204a8:	f003 030f 	andpl.w	r3, r3, #15
 80204ac:	111b      	asrmi	r3, r3, #4
 80204ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80204b2:	b2db      	uxtb	r3, r3
 80204b4:	2bff      	cmp	r3, #255	; 0xff
 80204b6:	d111      	bne.n	80204dc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80204b8:	f06f 0303 	mvn.w	r3, #3
 80204bc:	436b      	muls	r3, r5
 80204be:	f800 8003 	strb.w	r8, [r0, r3]
 80204c2:	4403      	add	r3, r0
 80204c4:	7866      	ldrb	r6, [r4, #1]
 80204c6:	705e      	strb	r6, [r3, #1]
 80204c8:	78a6      	ldrb	r6, [r4, #2]
 80204ca:	709e      	strb	r6, [r3, #2]
 80204cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80204ce:	3d01      	subs	r5, #1
 80204d0:	9a01      	ldr	r2, [sp, #4]
 80204d2:	4419      	add	r1, r3
 80204d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80204d6:	441a      	add	r2, r3
 80204d8:	9201      	str	r2, [sp, #4]
 80204da:	e788      	b.n	80203ee <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d0f5      	beq.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80204e0:	f06f 0203 	mvn.w	r2, #3
 80204e4:	78a6      	ldrb	r6, [r4, #2]
 80204e6:	fb18 f803 	smulbb	r8, r8, r3
 80204ea:	fb02 f905 	mul.w	r9, r2, r5
 80204ee:	9606      	str	r6, [sp, #24]
 80204f0:	eb00 0c09 	add.w	ip, r0, r9
 80204f4:	7866      	ldrb	r6, [r4, #1]
 80204f6:	f89c 7003 	ldrb.w	r7, [ip, #3]
 80204fa:	9607      	str	r6, [sp, #28]
 80204fc:	fb03 f607 	mul.w	r6, r3, r7
 8020500:	9a07      	ldr	r2, [sp, #28]
 8020502:	f106 0e01 	add.w	lr, r6, #1
 8020506:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 802050a:	18fe      	adds	r6, r7, r3
 802050c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020510:	eba7 070e 	sub.w	r7, r7, lr
 8020514:	eba6 060e 	sub.w	r6, r6, lr
 8020518:	f810 e009 	ldrb.w	lr, [r0, r9]
 802051c:	b2f6      	uxtb	r6, r6
 802051e:	fb07 880e 	mla	r8, r7, lr, r8
 8020522:	fb98 f8f6 	sdiv	r8, r8, r6
 8020526:	f800 8009 	strb.w	r8, [r0, r9]
 802052a:	fb13 f902 	smulbb	r9, r3, r2
 802052e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8020532:	9a06      	ldr	r2, [sp, #24]
 8020534:	fb07 990e 	mla	r9, r7, lr, r9
 8020538:	f89c e002 	ldrb.w	lr, [ip, #2]
 802053c:	fb13 f302 	smulbb	r3, r3, r2
 8020540:	f88c 6003 	strb.w	r6, [ip, #3]
 8020544:	fb07 330e 	mla	r3, r7, lr, r3
 8020548:	fb99 f9f6 	sdiv	r9, r9, r6
 802054c:	fb93 f3f6 	sdiv	r3, r3, r6
 8020550:	f88c 9001 	strb.w	r9, [ip, #1]
 8020554:	f88c 3002 	strb.w	r3, [ip, #2]
 8020558:	e7b8      	b.n	80204cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802055a:	2b00      	cmp	r3, #0
 802055c:	f43f af3c 	beq.w	80203d8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020560:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8020564:	fb1e fe03 	smulbb	lr, lr, r3
 8020568:	78a2      	ldrb	r2, [r4, #2]
 802056a:	fb03 fc09 	mul.w	ip, r3, r9
 802056e:	eb09 0603 	add.w	r6, r9, r3
 8020572:	9206      	str	r2, [sp, #24]
 8020574:	f10c 0701 	add.w	r7, ip, #1
 8020578:	7862      	ldrb	r2, [r4, #1]
 802057a:	eb07 272c 	add.w	r7, r7, ip, asr #8
 802057e:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020582:	eba9 070c 	sub.w	r7, r9, ip
 8020586:	eba6 060c 	sub.w	r6, r6, ip
 802058a:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 802058e:	fb13 f902 	smulbb	r9, r3, r2
 8020592:	9a06      	ldr	r2, [sp, #24]
 8020594:	b2f6      	uxtb	r6, r6
 8020596:	fb07 ee0c 	mla	lr, r7, ip, lr
 802059a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 802059e:	fb13 f302 	smulbb	r3, r3, r2
 80205a2:	f805 6c01 	strb.w	r6, [r5, #-1]
 80205a6:	fb07 990c 	mla	r9, r7, ip, r9
 80205aa:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 80205ae:	fb07 330c 	mla	r3, r7, ip, r3
 80205b2:	fb9e fef6 	sdiv	lr, lr, r6
 80205b6:	fb99 f9f6 	sdiv	r9, r9, r6
 80205ba:	fb93 f3f6 	sdiv	r3, r3, r6
 80205be:	f805 ec04 	strb.w	lr, [r5, #-4]
 80205c2:	f805 9c03 	strb.w	r9, [r5, #-3]
 80205c6:	f805 3c02 	strb.w	r3, [r5, #-2]
 80205ca:	e705      	b.n	80203d8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80205cc:	b009      	add	sp, #36	; 0x24
 80205ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205d2:	bf00      	nop
 80205d4:	2003c27c 	.word	0x2003c27c

080205d8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80205d8:	4770      	bx	lr

080205da <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80205da:	4770      	bx	lr

080205dc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80205dc:	4770      	bx	lr

080205de <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80205de:	4770      	bx	lr

080205e0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205e0:	4770      	bx	lr

080205e2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205e2:	4770      	bx	lr

080205e4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205e4:	4770      	bx	lr

080205e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80205e6:	4770      	bx	lr

080205e8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205e8:	4770      	bx	lr

080205ea <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80205ea:	4770      	bx	lr

080205ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205ec:	4770      	bx	lr

080205ee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80205ee:	4770      	bx	lr

080205f0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205f0:	4770      	bx	lr

080205f2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80205f2:	4770      	bx	lr

080205f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80205f4:	4770      	bx	lr

080205f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205f6:	4770      	bx	lr

080205f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80205f8:	4770      	bx	lr

080205fa <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205fa:	4770      	bx	lr

080205fc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205fc:	4770      	bx	lr

080205fe <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205fe:	4770      	bx	lr

08020600 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020600:	4770      	bx	lr

08020602 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020602:	4770      	bx	lr

08020604 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020604:	4770      	bx	lr

08020606 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020606:	4770      	bx	lr

08020608 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020608:	4770      	bx	lr

0802060a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802060a:	4770      	bx	lr

0802060c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802060c:	4770      	bx	lr

0802060e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802060e:	4770      	bx	lr

08020610 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020614:	b091      	sub	sp, #68	; 0x44
 8020616:	460f      	mov	r7, r1
 8020618:	4614      	mov	r4, r2
 802061a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 802061e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8020622:	f1b8 0f00 	cmp.w	r8, #0
 8020626:	d054      	beq.n	80206d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8020628:	6810      	ldr	r0, [r2, #0]
 802062a:	ae0c      	add	r6, sp, #48	; 0x30
 802062c:	6851      	ldr	r1, [r2, #4]
 802062e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8020804 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 8020632:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020808 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8020636:	c603      	stmia	r6!, {r0, r1}
 8020638:	6818      	ldr	r0, [r3, #0]
 802063a:	ae0e      	add	r6, sp, #56	; 0x38
 802063c:	6859      	ldr	r1, [r3, #4]
 802063e:	c603      	stmia	r6!, {r0, r1}
 8020640:	a80c      	add	r0, sp, #48	; 0x30
 8020642:	f7fa f81b 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020646:	4621      	mov	r1, r4
 8020648:	a80e      	add	r0, sp, #56	; 0x38
 802064a:	f7fa f83f 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802064e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020652:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020656:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802065a:	f8d9 0000 	ldr.w	r0, [r9]
 802065e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020662:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8020666:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 802066a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802066e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8020672:	440a      	add	r2, r1
 8020674:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020678:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802067c:	4413      	add	r3, r2
 802067e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020682:	6803      	ldr	r3, [r0, #0]
 8020684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020686:	4798      	blx	r3
 8020688:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802068c:	d024      	beq.n	80206d8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 802068e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020692:	f8d9 0000 	ldr.w	r0, [r9]
 8020696:	d022      	beq.n	80206de <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8020698:	2102      	movs	r1, #2
 802069a:	f04f 0e00 	mov.w	lr, #0
 802069e:	f8d0 c000 	ldr.w	ip, [r0]
 80206a2:	b2b6      	uxth	r6, r6
 80206a4:	9106      	str	r1, [sp, #24]
 80206a6:	b2bf      	uxth	r7, r7
 80206a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80206ac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80206b0:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 80206b4:	f8ba 1000 	ldrh.w	r1, [sl]
 80206b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80206bc:	9601      	str	r6, [sp, #4]
 80206be:	9700      	str	r7, [sp, #0]
 80206c0:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80206c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80206c8:	9102      	str	r1, [sp, #8]
 80206ca:	4621      	mov	r1, r4
 80206cc:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80206d0:	47a8      	blx	r5
 80206d2:	b011      	add	sp, #68	; 0x44
 80206d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206d8:	f010 0f20 	tst.w	r0, #32
 80206dc:	e7d9      	b.n	8020692 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 80206de:	6803      	ldr	r3, [r0, #0]
 80206e0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80206e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206e6:	4798      	blx	r3
 80206e8:	f8ba c000 	ldrh.w	ip, [sl]
 80206ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80206f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80206f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80206f8:	fb0c f606 	mul.w	r6, ip, r6
 80206fc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020700:	fb0c 2303 	mla	r3, ip, r3, r2
 8020704:	ebac 0c07 	sub.w	ip, ip, r7
 8020708:	eba9 0907 	sub.w	r9, r9, r7
 802070c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020710:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020714:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8020718:	ea4f 0989 	mov.w	r9, r9, lsl #2
 802071c:	d148      	bne.n	80207b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802071e:	2d00      	cmp	r5, #0
 8020720:	d146      	bne.n	80207b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020722:	42b0      	cmp	r0, r6
 8020724:	d268      	bcs.n	80207f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8020726:	eb00 020b 	add.w	r2, r0, fp
 802072a:	4290      	cmp	r0, r2
 802072c:	d204      	bcs.n	8020738 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802072e:	f854 3b04 	ldr.w	r3, [r4], #4
 8020732:	f840 3b04 	str.w	r3, [r0], #4
 8020736:	e7f8      	b.n	802072a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8020738:	4460      	add	r0, ip
 802073a:	444c      	add	r4, r9
 802073c:	e7f1      	b.n	8020722 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 802073e:	fb04 f70a 	mul.w	r7, r4, sl
 8020742:	4454      	add	r4, sl
 8020744:	1c7a      	adds	r2, r7, #1
 8020746:	eb02 2227 	add.w	r2, r2, r7, asr #8
 802074a:	1212      	asrs	r2, r2, #8
 802074c:	ebaa 0702 	sub.w	r7, sl, r2
 8020750:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8020754:	1aa4      	subs	r4, r4, r2
 8020756:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802075a:	fb07 fa0a 	mul.w	sl, r7, sl
 802075e:	b2e4      	uxtb	r4, r4
 8020760:	fb05 a202 	mla	r2, r5, r2, sl
 8020764:	fa5f fa8e 	uxtb.w	sl, lr
 8020768:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802076c:	fb07 fa0a 	mul.w	sl, r7, sl
 8020770:	fb07 fe0e 	mul.w	lr, r7, lr
 8020774:	fbb2 f2f4 	udiv	r2, r2, r4
 8020778:	0412      	lsls	r2, r2, #16
 802077a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 802077e:	4611      	mov	r1, r2
 8020780:	b2da      	uxtb	r2, r3
 8020782:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020786:	fb05 a202 	mla	r2, r5, r2, sl
 802078a:	fb05 e503 	mla	r5, r5, r3, lr
 802078e:	fbb2 f2f4 	udiv	r2, r2, r4
 8020792:	b2d2      	uxtb	r2, r2
 8020794:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8020798:	fbb5 f4f4 	udiv	r4, r5, r4
 802079c:	0224      	lsls	r4, r4, #8
 802079e:	430a      	orrs	r2, r1
 80207a0:	b2a4      	uxth	r4, r4
 80207a2:	4322      	orrs	r2, r4
 80207a4:	6002      	str	r2, [r0, #0]
 80207a6:	e025      	b.n	80207f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80207a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207aa:	4460      	add	r0, ip
 80207ac:	444b      	add	r3, r9
 80207ae:	461c      	mov	r4, r3
 80207b0:	42b0      	cmp	r0, r6
 80207b2:	d221      	bcs.n	80207f8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 80207b4:	eb00 030b 	add.w	r3, r0, fp
 80207b8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 80207bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207be:	4298      	cmp	r0, r3
 80207c0:	d2f2      	bcs.n	80207a8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 80207c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80207c8:	0e1d      	lsrs	r5, r3, #24
 80207ca:	920a      	str	r2, [sp, #40]	; 0x28
 80207cc:	fb05 f408 	mul.w	r4, r5, r8
 80207d0:	1c65      	adds	r5, r4, #1
 80207d2:	eb05 2524 	add.w	r5, r5, r4, asr #8
 80207d6:	122d      	asrs	r5, r5, #8
 80207d8:	d00c      	beq.n	80207f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80207da:	2dff      	cmp	r5, #255	; 0xff
 80207dc:	b2ec      	uxtb	r4, r5
 80207de:	d004      	beq.n	80207ea <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 80207e0:	f8d0 e000 	ldr.w	lr, [r0]
 80207e4:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 80207e8:	d1a9      	bne.n	802073e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 80207ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80207ee:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 80207f2:	6005      	str	r5, [r0, #0]
 80207f4:	3004      	adds	r0, #4
 80207f6:	e7e1      	b.n	80207bc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 80207f8:	4b02      	ldr	r3, [pc, #8]	; (8020804 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 80207fa:	6818      	ldr	r0, [r3, #0]
 80207fc:	6803      	ldr	r3, [r0, #0]
 80207fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020800:	4798      	blx	r3
 8020802:	e766      	b.n	80206d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8020804:	2003c26c 	.word	0x2003c26c
 8020808:	2003c266 	.word	0x2003c266

0802080c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 802080c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020810:	2300      	movs	r3, #0
 8020812:	9300      	str	r3, [sp, #0]
 8020814:	4b3e      	ldr	r3, [pc, #248]	; (8020910 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020816:	781b      	ldrb	r3, [r3, #0]
 8020818:	2b00      	cmp	r3, #0
 802081a:	d137      	bne.n	802088c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 802081c:	4a3d      	ldr	r2, [pc, #244]	; (8020914 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802081e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020822:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020826:	2b00      	cmp	r3, #0
 8020828:	d132      	bne.n	8020890 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802082a:	4b3b      	ldr	r3, [pc, #236]	; (8020918 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020830:	ac02      	add	r4, sp, #8
 8020832:	6808      	ldr	r0, [r1, #0]
 8020834:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020838:	ab02      	add	r3, sp, #8
 802083a:	6849      	ldr	r1, [r1, #4]
 802083c:	4d37      	ldr	r5, [pc, #220]	; (802091c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802083e:	c303      	stmia	r3!, {r0, r1}
 8020840:	4669      	mov	r1, sp
 8020842:	4620      	mov	r0, r4
 8020844:	f7f9 ff42 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020848:	4668      	mov	r0, sp
 802084a:	f7f9 ff17 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802084e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020852:	f8bd 2000 	ldrh.w	r2, [sp]
 8020856:	462f      	mov	r7, r5
 8020858:	6828      	ldr	r0, [r5, #0]
 802085a:	4413      	add	r3, r2
 802085c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020860:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020864:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020868:	4413      	add	r3, r2
 802086a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802086e:	6803      	ldr	r3, [r0, #0]
 8020870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020872:	4798      	blx	r3
 8020874:	f010 0f01 	tst.w	r0, #1
 8020878:	d00c      	beq.n	8020894 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802087a:	6828      	ldr	r0, [r5, #0]
 802087c:	6803      	ldr	r3, [r0, #0]
 802087e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020884:	4798      	blx	r3
 8020886:	b004      	add	sp, #16
 8020888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802088c:	4a22      	ldr	r2, [pc, #136]	; (8020918 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802088e:	e7c6      	b.n	802081e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020890:	4b20      	ldr	r3, [pc, #128]	; (8020914 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020892:	e7cb      	b.n	802082c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020894:	6828      	ldr	r0, [r5, #0]
 8020896:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802089a:	6803      	ldr	r3, [r0, #0]
 802089c:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80208a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80208a2:	4798      	blx	r3
 80208a4:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 80208a8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80208ac:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 80208b0:	fb15 3404 	smlabb	r4, r5, r4, r3
 80208b4:	eba5 0508 	sub.w	r5, r5, r8
 80208b8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80208bc:	6838      	ldr	r0, [r7, #0]
 80208be:	00ad      	lsls	r5, r5, #2
 80208c0:	6803      	ldr	r3, [r0, #0]
 80208c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208c4:	4798      	blx	r3
 80208c6:	4b13      	ldr	r3, [pc, #76]	; (8020914 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80208c8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80208cc:	881a      	ldrh	r2, [r3, #0]
 80208ce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80208d2:	4356      	muls	r6, r2
 80208d4:	fb02 1303 	mla	r3, r2, r3, r1
 80208d8:	eba2 0208 	sub.w	r2, r2, r8
 80208dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80208e0:	0092      	lsls	r2, r2, #2
 80208e2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80208e6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80208ea:	42b0      	cmp	r0, r6
 80208ec:	d20b      	bcs.n	8020906 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80208ee:	eb00 0c03 	add.w	ip, r0, r3
 80208f2:	4560      	cmp	r0, ip
 80208f4:	d204      	bcs.n	8020900 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 80208f6:	f854 1b04 	ldr.w	r1, [r4], #4
 80208fa:	f840 1b04 	str.w	r1, [r0], #4
 80208fe:	e7f8      	b.n	80208f2 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 8020900:	4410      	add	r0, r2
 8020902:	442c      	add	r4, r5
 8020904:	e7f1      	b.n	80208ea <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8020906:	6838      	ldr	r0, [r7, #0]
 8020908:	6803      	ldr	r3, [r0, #0]
 802090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802090c:	4798      	blx	r3
 802090e:	e7ba      	b.n	8020886 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020910:	2003c264 	.word	0x2003c264
 8020914:	2003c266 	.word	0x2003c266
 8020918:	2003c268 	.word	0x2003c268
 802091c:	2003c26c 	.word	0x2003c26c

08020920 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020924:	b089      	sub	sp, #36	; 0x24
 8020926:	4607      	mov	r7, r0
 8020928:	4689      	mov	r9, r1
 802092a:	4692      	mov	sl, r2
 802092c:	ac08      	add	r4, sp, #32
 802092e:	461e      	mov	r6, r3
 8020930:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020934:	4620      	mov	r0, r4
 8020936:	f7fd fa2b 	bl	801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>
 802093a:	683b      	ldr	r3, [r7, #0]
 802093c:	4605      	mov	r5, r0
 802093e:	4620      	mov	r0, r4
 8020940:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020944:	f7fd f984 	bl	801dc50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020948:	4683      	mov	fp, r0
 802094a:	4620      	mov	r0, r4
 802094c:	f7fd f9b4 	bl	801dcb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020950:	4653      	mov	r3, sl
 8020952:	464a      	mov	r2, r9
 8020954:	4639      	mov	r1, r7
 8020956:	9500      	str	r5, [sp, #0]
 8020958:	e9cd b001 	strd	fp, r0, [sp, #4]
 802095c:	a806      	add	r0, sp, #24
 802095e:	47c0      	blx	r8
 8020960:	a906      	add	r1, sp, #24
 8020962:	4630      	mov	r0, r6
 8020964:	f7fd f858 	bl	801da18 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8020968:	4628      	mov	r0, r5
 802096a:	b009      	add	sp, #36	; 0x24
 802096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020970 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020970:	b510      	push	{r4, lr}
 8020972:	4604      	mov	r4, r0
 8020974:	2104      	movs	r1, #4
 8020976:	f008 fe99 	bl	80296ac <_ZdlPvj>
 802097a:	4620      	mov	r0, r4
 802097c:	bd10      	pop	{r4, pc}

0802097e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802097e:	b510      	push	{r4, lr}
 8020980:	4604      	mov	r4, r0
 8020982:	2104      	movs	r1, #4
 8020984:	f008 fe92 	bl	80296ac <_ZdlPvj>
 8020988:	4620      	mov	r0, r4
 802098a:	bd10      	pop	{r4, pc}

0802098c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802098c:	b510      	push	{r4, lr}
 802098e:	4604      	mov	r4, r0
 8020990:	2104      	movs	r1, #4
 8020992:	f008 fe8b 	bl	80296ac <_ZdlPvj>
 8020996:	4620      	mov	r0, r4
 8020998:	bd10      	pop	{r4, pc}

0802099a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802099a:	b510      	push	{r4, lr}
 802099c:	4604      	mov	r4, r0
 802099e:	2104      	movs	r1, #4
 80209a0:	f008 fe84 	bl	80296ac <_ZdlPvj>
 80209a4:	4620      	mov	r0, r4
 80209a6:	bd10      	pop	{r4, pc}

080209a8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209a8:	b510      	push	{r4, lr}
 80209aa:	4604      	mov	r4, r0
 80209ac:	2104      	movs	r1, #4
 80209ae:	f008 fe7d 	bl	80296ac <_ZdlPvj>
 80209b2:	4620      	mov	r0, r4
 80209b4:	bd10      	pop	{r4, pc}

080209b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80209b6:	b510      	push	{r4, lr}
 80209b8:	4604      	mov	r4, r0
 80209ba:	2104      	movs	r1, #4
 80209bc:	f008 fe76 	bl	80296ac <_ZdlPvj>
 80209c0:	4620      	mov	r0, r4
 80209c2:	bd10      	pop	{r4, pc}

080209c4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80209c4:	b510      	push	{r4, lr}
 80209c6:	4604      	mov	r4, r0
 80209c8:	2104      	movs	r1, #4
 80209ca:	f008 fe6f 	bl	80296ac <_ZdlPvj>
 80209ce:	4620      	mov	r0, r4
 80209d0:	bd10      	pop	{r4, pc}

080209d2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80209d2:	b510      	push	{r4, lr}
 80209d4:	4604      	mov	r4, r0
 80209d6:	2104      	movs	r1, #4
 80209d8:	f008 fe68 	bl	80296ac <_ZdlPvj>
 80209dc:	4620      	mov	r0, r4
 80209de:	bd10      	pop	{r4, pc}

080209e0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80209e0:	b510      	push	{r4, lr}
 80209e2:	4604      	mov	r4, r0
 80209e4:	2104      	movs	r1, #4
 80209e6:	f008 fe61 	bl	80296ac <_ZdlPvj>
 80209ea:	4620      	mov	r0, r4
 80209ec:	bd10      	pop	{r4, pc}

080209ee <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80209ee:	b510      	push	{r4, lr}
 80209f0:	4604      	mov	r4, r0
 80209f2:	2104      	movs	r1, #4
 80209f4:	f008 fe5a 	bl	80296ac <_ZdlPvj>
 80209f8:	4620      	mov	r0, r4
 80209fa:	bd10      	pop	{r4, pc}

080209fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209fc:	b510      	push	{r4, lr}
 80209fe:	4604      	mov	r4, r0
 8020a00:	2104      	movs	r1, #4
 8020a02:	f008 fe53 	bl	80296ac <_ZdlPvj>
 8020a06:	4620      	mov	r0, r4
 8020a08:	bd10      	pop	{r4, pc}

08020a0a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020a0a:	b510      	push	{r4, lr}
 8020a0c:	4604      	mov	r4, r0
 8020a0e:	2104      	movs	r1, #4
 8020a10:	f008 fe4c 	bl	80296ac <_ZdlPvj>
 8020a14:	4620      	mov	r0, r4
 8020a16:	bd10      	pop	{r4, pc}

08020a18 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a18:	b510      	push	{r4, lr}
 8020a1a:	4604      	mov	r4, r0
 8020a1c:	2104      	movs	r1, #4
 8020a1e:	f008 fe45 	bl	80296ac <_ZdlPvj>
 8020a22:	4620      	mov	r0, r4
 8020a24:	bd10      	pop	{r4, pc}

08020a26 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a26:	b510      	push	{r4, lr}
 8020a28:	4604      	mov	r4, r0
 8020a2a:	2104      	movs	r1, #4
 8020a2c:	f008 fe3e 	bl	80296ac <_ZdlPvj>
 8020a30:	4620      	mov	r0, r4
 8020a32:	bd10      	pop	{r4, pc}

08020a34 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a34:	b510      	push	{r4, lr}
 8020a36:	4604      	mov	r4, r0
 8020a38:	2104      	movs	r1, #4
 8020a3a:	f008 fe37 	bl	80296ac <_ZdlPvj>
 8020a3e:	4620      	mov	r0, r4
 8020a40:	bd10      	pop	{r4, pc}

08020a42 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020a42:	b510      	push	{r4, lr}
 8020a44:	4604      	mov	r4, r0
 8020a46:	2104      	movs	r1, #4
 8020a48:	f008 fe30 	bl	80296ac <_ZdlPvj>
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	bd10      	pop	{r4, pc}

08020a50 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a50:	b510      	push	{r4, lr}
 8020a52:	4604      	mov	r4, r0
 8020a54:	2104      	movs	r1, #4
 8020a56:	f008 fe29 	bl	80296ac <_ZdlPvj>
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	bd10      	pop	{r4, pc}

08020a5e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a5e:	b510      	push	{r4, lr}
 8020a60:	4604      	mov	r4, r0
 8020a62:	2104      	movs	r1, #4
 8020a64:	f008 fe22 	bl	80296ac <_ZdlPvj>
 8020a68:	4620      	mov	r0, r4
 8020a6a:	bd10      	pop	{r4, pc}

08020a6c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020a6c:	b510      	push	{r4, lr}
 8020a6e:	4604      	mov	r4, r0
 8020a70:	2104      	movs	r1, #4
 8020a72:	f008 fe1b 	bl	80296ac <_ZdlPvj>
 8020a76:	4620      	mov	r0, r4
 8020a78:	bd10      	pop	{r4, pc}

08020a7a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020a7a:	b510      	push	{r4, lr}
 8020a7c:	4604      	mov	r4, r0
 8020a7e:	2104      	movs	r1, #4
 8020a80:	f008 fe14 	bl	80296ac <_ZdlPvj>
 8020a84:	4620      	mov	r0, r4
 8020a86:	bd10      	pop	{r4, pc}

08020a88 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a88:	b510      	push	{r4, lr}
 8020a8a:	4604      	mov	r4, r0
 8020a8c:	2104      	movs	r1, #4
 8020a8e:	f008 fe0d 	bl	80296ac <_ZdlPvj>
 8020a92:	4620      	mov	r0, r4
 8020a94:	bd10      	pop	{r4, pc}

08020a96 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020a96:	b510      	push	{r4, lr}
 8020a98:	4604      	mov	r4, r0
 8020a9a:	2104      	movs	r1, #4
 8020a9c:	f008 fe06 	bl	80296ac <_ZdlPvj>
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	bd10      	pop	{r4, pc}

08020aa4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020aa4:	b510      	push	{r4, lr}
 8020aa6:	4604      	mov	r4, r0
 8020aa8:	2104      	movs	r1, #4
 8020aaa:	f008 fdff 	bl	80296ac <_ZdlPvj>
 8020aae:	4620      	mov	r0, r4
 8020ab0:	bd10      	pop	{r4, pc}

08020ab2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020ab2:	b510      	push	{r4, lr}
 8020ab4:	4604      	mov	r4, r0
 8020ab6:	2104      	movs	r1, #4
 8020ab8:	f008 fdf8 	bl	80296ac <_ZdlPvj>
 8020abc:	4620      	mov	r0, r4
 8020abe:	bd10      	pop	{r4, pc}

08020ac0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020ac0:	b510      	push	{r4, lr}
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	2104      	movs	r1, #4
 8020ac6:	f008 fdf1 	bl	80296ac <_ZdlPvj>
 8020aca:	4620      	mov	r0, r4
 8020acc:	bd10      	pop	{r4, pc}

08020ace <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020ace:	b510      	push	{r4, lr}
 8020ad0:	4604      	mov	r4, r0
 8020ad2:	2104      	movs	r1, #4
 8020ad4:	f008 fdea 	bl	80296ac <_ZdlPvj>
 8020ad8:	4620      	mov	r0, r4
 8020ada:	bd10      	pop	{r4, pc}

08020adc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020adc:	b510      	push	{r4, lr}
 8020ade:	4604      	mov	r4, r0
 8020ae0:	2104      	movs	r1, #4
 8020ae2:	f008 fde3 	bl	80296ac <_ZdlPvj>
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	bd10      	pop	{r4, pc}

08020aea <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020aea:	b510      	push	{r4, lr}
 8020aec:	4604      	mov	r4, r0
 8020aee:	2104      	movs	r1, #4
 8020af0:	f008 fddc 	bl	80296ac <_ZdlPvj>
 8020af4:	4620      	mov	r0, r4
 8020af6:	bd10      	pop	{r4, pc}

08020af8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020afa:	4606      	mov	r6, r0
 8020afc:	b087      	sub	sp, #28
 8020afe:	4615      	mov	r5, r2
 8020b00:	461f      	mov	r7, r3
 8020b02:	b353      	cbz	r3, 8020b5a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b04:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	dd26      	ble.n	8020b5a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b0c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	dd22      	ble.n	8020b5a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b14:	6808      	ldr	r0, [r1, #0]
 8020b16:	aa04      	add	r2, sp, #16
 8020b18:	6849      	ldr	r1, [r1, #4]
 8020b1a:	4c1b      	ldr	r4, [pc, #108]	; (8020b88 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020b1c:	c203      	stmia	r2!, {r0, r1}
 8020b1e:	a804      	add	r0, sp, #16
 8020b20:	f7f9 fdac 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b24:	6820      	ldr	r0, [r4, #0]
 8020b26:	6803      	ldr	r3, [r0, #0]
 8020b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b2a:	4798      	blx	r3
 8020b2c:	2fff      	cmp	r7, #255	; 0xff
 8020b2e:	d016      	beq.n	8020b5e <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020b30:	f010 0f08 	tst.w	r0, #8
 8020b34:	6820      	ldr	r0, [r4, #0]
 8020b36:	d015      	beq.n	8020b64 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020b38:	2400      	movs	r4, #0
 8020b3a:	6801      	ldr	r1, [r0, #0]
 8020b3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020b40:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b44:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020b48:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b4c:	9401      	str	r4, [sp, #4]
 8020b4e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020b52:	9400      	str	r4, [sp, #0]
 8020b54:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020b56:	4629      	mov	r1, r5
 8020b58:	47a0      	blx	r4
 8020b5a:	b007      	add	sp, #28
 8020b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b5e:	f010 0f02 	tst.w	r0, #2
 8020b62:	e7e7      	b.n	8020b34 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020b64:	6803      	ldr	r3, [r0, #0]
 8020b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b68:	4798      	blx	r3
 8020b6a:	4b08      	ldr	r3, [pc, #32]	; (8020b8c <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8020b6c:	4601      	mov	r1, r0
 8020b6e:	4630      	mov	r0, r6
 8020b70:	881a      	ldrh	r2, [r3, #0]
 8020b72:	6833      	ldr	r3, [r6, #0]
 8020b74:	e9cd 5700 	strd	r5, r7, [sp]
 8020b78:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020b7a:	ab04      	add	r3, sp, #16
 8020b7c:	47a8      	blx	r5
 8020b7e:	6820      	ldr	r0, [r4, #0]
 8020b80:	6803      	ldr	r3, [r0, #0]
 8020b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b84:	4798      	blx	r3
 8020b86:	e7e8      	b.n	8020b5a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b88:	2003c26c 	.word	0x2003c26c
 8020b8c:	2003c266 	.word	0x2003c266

08020b90 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b94:	b08d      	sub	sp, #52	; 0x34
 8020b96:	469b      	mov	fp, r3
 8020b98:	4617      	mov	r7, r2
 8020b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b9e:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 8020ba2:	4605      	mov	r5, r0
 8020ba4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ba8:	a806      	add	r0, sp, #24
 8020baa:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 8020bae:	460c      	mov	r4, r1
 8020bb0:	4659      	mov	r1, fp
 8020bb2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020bb6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8020bba:	f8ad a01c 	strh.w	sl, [sp, #28]
 8020bbe:	f8ad 601e 	strh.w	r6, [sp, #30]
 8020bc2:	f7f5 f9ef 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 8020bc6:	4639      	mov	r1, r7
 8020bc8:	a806      	add	r0, sp, #24
 8020bca:	f7f5 f9eb 	bl	8015fa4 <_ZN8touchgfx4RectaNERKS0_>
 8020bce:	4b74      	ldr	r3, [pc, #464]	; (8020da0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 8020bd0:	f8b3 9000 	ldrh.w	r9, [r3]
 8020bd4:	4b73      	ldr	r3, [pc, #460]	; (8020da4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8020bd6:	fa0f f289 	sxth.w	r2, r9
 8020bda:	8819      	ldrh	r1, [r3, #0]
 8020bdc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020be0:	b208      	sxth	r0, r1
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	da07      	bge.n	8020bf6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8020be6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8020bea:	443b      	add	r3, r7
 8020bec:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020bf0:	2300      	movs	r3, #0
 8020bf2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8020bf6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020bfa:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8020bfe:	1ad2      	subs	r2, r2, r3
 8020c00:	4297      	cmp	r7, r2
 8020c02:	bfc4      	itt	gt
 8020c04:	eba9 0203 	subgt.w	r2, r9, r3
 8020c08:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 8020c0c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020c10:	2a00      	cmp	r2, #0
 8020c12:	da07      	bge.n	8020c24 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8020c14:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8020c18:	443a      	add	r2, r7
 8020c1a:	f8ad 201e 	strh.w	r2, [sp, #30]
 8020c1e:	2200      	movs	r2, #0
 8020c20:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020c24:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020c28:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8020c2c:	1a80      	subs	r0, r0, r2
 8020c2e:	4287      	cmp	r7, r0
 8020c30:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8020c34:	bfc4      	itt	gt
 8020c36:	1a88      	subgt	r0, r1, r2
 8020c38:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 8020c3c:	485a      	ldr	r0, [pc, #360]	; (8020da8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020c3e:	7800      	ldrb	r0, [r0, #0]
 8020c40:	2800      	cmp	r0, #0
 8020c42:	f040 8082 	bne.w	8020d4a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ba>
 8020c46:	454f      	cmp	r7, r9
 8020c48:	bf14      	ite	ne
 8020c4a:	f04f 0900 	movne.w	r9, #0
 8020c4e:	f04f 0901 	moveq.w	r9, #1
 8020c52:	2f00      	cmp	r7, #0
 8020c54:	dd7d      	ble.n	8020d52 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8020c56:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8020c5a:	f1b8 0f00 	cmp.w	r8, #0
 8020c5e:	dd78      	ble.n	8020d52 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8020c60:	f8bb 1000 	ldrh.w	r1, [fp]
 8020c64:	a808      	add	r0, sp, #32
 8020c66:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 8020c6a:	1a5b      	subs	r3, r3, r1
 8020c6c:	a90a      	add	r1, sp, #40	; 0x28
 8020c6e:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
 8020c72:	b21b      	sxth	r3, r3
 8020c74:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8020c78:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8020c7c:	9302      	str	r3, [sp, #8]
 8020c7e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020c82:	1ad2      	subs	r2, r2, r3
 8020c84:	b213      	sxth	r3, r2
 8020c86:	9303      	str	r3, [sp, #12]
 8020c88:	9b02      	ldr	r3, [sp, #8]
 8020c8a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020c8e:	9b03      	ldr	r3, [sp, #12]
 8020c90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020c94:	2300      	movs	r3, #0
 8020c96:	930a      	str	r3, [sp, #40]	; 0x28
 8020c98:	f7f9 fd18 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c9c:	a806      	add	r0, sp, #24
 8020c9e:	f7f9 fced 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ca2:	a80a      	add	r0, sp, #40	; 0x28
 8020ca4:	f7f9 fcea 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ca8:	4b40      	ldr	r3, [pc, #256]	; (8020dac <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8020caa:	4620      	mov	r0, r4
 8020cac:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8020cb0:	881a      	ldrh	r2, [r3, #0]
 8020cb2:	6823      	ldr	r3, [r4, #0]
 8020cb4:	9205      	str	r2, [sp, #20]
 8020cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb8:	4798      	blx	r3
 8020cba:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8020cbe:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020cc2:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8020cc6:	fb1a 3304 	smlabb	r3, sl, r4, r3
 8020cca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020ccc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020cd0:	4b37      	ldr	r3, [pc, #220]	; (8020db0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020cd2:	6818      	ldr	r0, [r3, #0]
 8020cd4:	9304      	str	r3, [sp, #16]
 8020cd6:	6801      	ldr	r1, [r0, #0]
 8020cd8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8020cda:	4788      	blx	r1
 8020cdc:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8020ce0:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020ce4:	fb0b 1606 	mla	r6, fp, r6, r1
 8020ce8:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8020cec:	9301      	str	r3, [sp, #4]
 8020cee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8020cf2:	f1b9 0f00 	cmp.w	r9, #0
 8020cf6:	d135      	bne.n	8020d64 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>
 8020cf8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020cfc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8020d00:	f04f 0900 	mov.w	r9, #0
 8020d04:	ebaa 0a03 	sub.w	sl, sl, r3
 8020d08:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8020d0c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8020db0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>
 8020d10:	9304      	str	r3, [sp, #16]
 8020d12:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020d16:	454b      	cmp	r3, r9
 8020d18:	dd32      	ble.n	8020d80 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8020d1a:	f8da 0000 	ldr.w	r0, [sl]
 8020d1e:	4621      	mov	r1, r4
 8020d20:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020d24:	6802      	ldr	r2, [r0, #0]
 8020d26:	009b      	lsls	r3, r3, #2
 8020d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8020d2a:	4616      	mov	r6, r2
 8020d2c:	9a01      	ldr	r2, [sp, #4]
 8020d2e:	47b0      	blx	r6
 8020d30:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8020d34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020d38:	4294      	cmp	r4, r2
 8020d3a:	d229      	bcs.n	8020d90 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>
 8020d3c:	f854 3b04 	ldr.w	r3, [r4], #4
 8020d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020d44:	f844 3c04 	str.w	r3, [r4, #-4]
 8020d48:	e7f6      	b.n	8020d38 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020d4a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8020d4e:	4589      	cmp	r9, r1
 8020d50:	e77a      	b.n	8020c48 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8020d52:	2300      	movs	r3, #0
 8020d54:	802b      	strh	r3, [r5, #0]
 8020d56:	806b      	strh	r3, [r5, #2]
 8020d58:	80ab      	strh	r3, [r5, #4]
 8020d5a:	80eb      	strh	r3, [r5, #6]
 8020d5c:	4628      	mov	r0, r5
 8020d5e:	b00d      	add	sp, #52	; 0x34
 8020d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d64:	4592      	cmp	sl, r2
 8020d66:	d1c7      	bne.n	8020cf8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x168>
 8020d68:	6818      	ldr	r0, [r3, #0]
 8020d6a:	4621      	mov	r1, r4
 8020d6c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020d70:	6802      	ldr	r2, [r0, #0]
 8020d72:	fb0b f303 	mul.w	r3, fp, r3
 8020d76:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8020d7a:	009b      	lsls	r3, r3, #2
 8020d7c:	9a01      	ldr	r2, [sp, #4]
 8020d7e:	47c8      	blx	r9
 8020d80:	9b02      	ldr	r3, [sp, #8]
 8020d82:	80af      	strh	r7, [r5, #4]
 8020d84:	802b      	strh	r3, [r5, #0]
 8020d86:	9b03      	ldr	r3, [sp, #12]
 8020d88:	f8a5 8006 	strh.w	r8, [r5, #6]
 8020d8c:	806b      	strh	r3, [r5, #2]
 8020d8e:	e7e5      	b.n	8020d5c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 8020d90:	9b01      	ldr	r3, [sp, #4]
 8020d92:	f109 0901 	add.w	r9, r9, #1
 8020d96:	445b      	add	r3, fp
 8020d98:	9301      	str	r3, [sp, #4]
 8020d9a:	9b04      	ldr	r3, [sp, #16]
 8020d9c:	441c      	add	r4, r3
 8020d9e:	e7b8      	b.n	8020d12 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x182>
 8020da0:	2003c260 	.word	0x2003c260
 8020da4:	2003c262 	.word	0x2003c262
 8020da8:	2003c264 	.word	0x2003c264
 8020dac:	2003c266 	.word	0x2003c266
 8020db0:	2003c26c 	.word	0x2003c26c

08020db4 <_ZN8touchgfx8LCD32bppC1Ev>:
 8020db4:	2200      	movs	r2, #0
 8020db6:	4910      	ldr	r1, [pc, #64]	; (8020df8 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 8020db8:	6042      	str	r2, [r0, #4]
 8020dba:	6001      	str	r1, [r0, #0]
 8020dbc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020dc0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020dc4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020dc8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020dcc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020dd0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020dd4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020dd8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020ddc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020de0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020de4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020de8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020dec:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020df0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020df4:	4770      	bx	lr
 8020df6:	bf00      	nop
 8020df8:	08030728 	.word	0x08030728

08020dfc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 8020dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e00:	4604      	mov	r4, r0
 8020e02:	b08f      	sub	sp, #60	; 0x3c
 8020e04:	460d      	mov	r5, r1
 8020e06:	461e      	mov	r6, r3
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d052      	beq.n	8020eb2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8020e0c:	6808      	ldr	r0, [r1, #0]
 8020e0e:	ab0a      	add	r3, sp, #40	; 0x28
 8020e10:	6849      	ldr	r1, [r1, #4]
 8020e12:	4f70      	ldr	r7, [pc, #448]	; (8020fd4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8020e14:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8020fd8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8020e18:	c303      	stmia	r3!, {r0, r1}
 8020e1a:	6810      	ldr	r0, [r2, #0]
 8020e1c:	ab0c      	add	r3, sp, #48	; 0x30
 8020e1e:	6851      	ldr	r1, [r2, #4]
 8020e20:	c303      	stmia	r3!, {r0, r1}
 8020e22:	a80a      	add	r0, sp, #40	; 0x28
 8020e24:	f7f9 fc2a 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e28:	4629      	mov	r1, r5
 8020e2a:	a80c      	add	r0, sp, #48	; 0x30
 8020e2c:	f7f9 fc4e 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e30:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020e34:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020e38:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020e3c:	6838      	ldr	r0, [r7, #0]
 8020e3e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e42:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020e46:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 8020e4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020e4e:	440c      	add	r4, r1
 8020e50:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8020e54:	440a      	add	r2, r1
 8020e56:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020e5a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8020e5e:	4413      	add	r3, r2
 8020e60:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020e64:	6803      	ldr	r3, [r0, #0]
 8020e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e68:	4798      	blx	r3
 8020e6a:	2eff      	cmp	r6, #255	; 0xff
 8020e6c:	d024      	beq.n	8020eb8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 8020e6e:	f010 0f04 	tst.w	r0, #4
 8020e72:	6838      	ldr	r0, [r7, #0]
 8020e74:	d023      	beq.n	8020ebe <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8020e76:	2100      	movs	r1, #0
 8020e78:	f04f 0c02 	mov.w	ip, #2
 8020e7c:	6807      	ldr	r7, [r0, #0]
 8020e7e:	b2ad      	uxth	r5, r5
 8020e80:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020e84:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8020e88:	e9cd c107 	strd	ip, r1, [sp, #28]
 8020e8c:	f04f 0c01 	mov.w	ip, #1
 8020e90:	f8cd c018 	str.w	ip, [sp, #24]
 8020e94:	f8b9 c000 	ldrh.w	ip, [r9]
 8020e98:	9603      	str	r6, [sp, #12]
 8020e9a:	9501      	str	r5, [sp, #4]
 8020e9c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8020ea0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020ea4:	9102      	str	r1, [sp, #8]
 8020ea6:	fa1f f188 	uxth.w	r1, r8
 8020eaa:	9100      	str	r1, [sp, #0]
 8020eac:	4621      	mov	r1, r4
 8020eae:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8020eb0:	47a8      	blx	r5
 8020eb2:	b00f      	add	sp, #60	; 0x3c
 8020eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eb8:	f010 0f01 	tst.w	r0, #1
 8020ebc:	e7d9      	b.n	8020e72 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 8020ebe:	6803      	ldr	r3, [r0, #0]
 8020ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020ec2:	4798      	blx	r3
 8020ec4:	f8b9 3000 	ldrh.w	r3, [r9]
 8020ec8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020ecc:	2eff      	cmp	r6, #255	; 0xff
 8020ece:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8020ed2:	fb03 f505 	mul.w	r5, r3, r5
 8020ed6:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8020eda:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8020ede:	fb03 1202 	mla	r2, r3, r2, r1
 8020ee2:	eba3 0308 	sub.w	r3, r3, r8
 8020ee6:	eba7 0708 	sub.w	r7, r7, r8
 8020eea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8020eee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020ef2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8020ef6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8020efa:	d04c      	beq.n	8020f96 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 8020efc:	42a8      	cmp	r0, r5
 8020efe:	d263      	bcs.n	8020fc8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8020f00:	eb00 0e0c 	add.w	lr, r0, ip
 8020f04:	4621      	mov	r1, r4
 8020f06:	4570      	cmp	r0, lr
 8020f08:	460c      	mov	r4, r1
 8020f0a:	f101 0103 	add.w	r1, r1, #3
 8020f0e:	d23d      	bcs.n	8020f8c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8020f10:	6802      	ldr	r2, [r0, #0]
 8020f12:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8020f16:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020f1a:	fb1b fb06 	smulbb	fp, fp, r6
 8020f1e:	fa5f fa82 	uxtb.w	sl, r2
 8020f22:	fb06 f809 	mul.w	r8, r6, r9
 8020f26:	f108 0401 	add.w	r4, r8, #1
 8020f2a:	eb04 2428 	add.w	r4, r4, r8, asr #8
 8020f2e:	eb06 0809 	add.w	r8, r6, r9
 8020f32:	1224      	asrs	r4, r4, #8
 8020f34:	eba9 0904 	sub.w	r9, r9, r4
 8020f38:	eba8 0804 	sub.w	r8, r8, r4
 8020f3c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8020f40:	fb09 fa0a 	mul.w	sl, r9, sl
 8020f44:	fa5f f888 	uxtb.w	r8, r8
 8020f48:	fb04 a406 	mla	r4, r4, r6, sl
 8020f4c:	fbb4 f4f8 	udiv	r4, r4, r8
 8020f50:	b2e4      	uxtb	r4, r4
 8020f52:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8020f56:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8020f5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020f5e:	fb09 b404 	mla	r4, r9, r4, fp
 8020f62:	fbb4 f4f8 	udiv	r4, r4, r8
 8020f66:	0424      	lsls	r4, r4, #16
 8020f68:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8020f6c:	ea4a 0404 	orr.w	r4, sl, r4
 8020f70:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8020f74:	fb1a fa06 	smulbb	sl, sl, r6
 8020f78:	fb09 a202 	mla	r2, r9, r2, sl
 8020f7c:	fbb2 f2f8 	udiv	r2, r2, r8
 8020f80:	0212      	lsls	r2, r2, #8
 8020f82:	b292      	uxth	r2, r2
 8020f84:	4322      	orrs	r2, r4
 8020f86:	f840 2b04 	str.w	r2, [r0], #4
 8020f8a:	e7bc      	b.n	8020f06 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 8020f8c:	4418      	add	r0, r3
 8020f8e:	443c      	add	r4, r7
 8020f90:	e7b4      	b.n	8020efc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8020f92:	4418      	add	r0, r3
 8020f94:	443c      	add	r4, r7
 8020f96:	42a8      	cmp	r0, r5
 8020f98:	d216      	bcs.n	8020fc8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8020f9a:	eb00 060c 	add.w	r6, r0, ip
 8020f9e:	4621      	mov	r1, r4
 8020fa0:	42b0      	cmp	r0, r6
 8020fa2:	460c      	mov	r4, r1
 8020fa4:	f101 0103 	add.w	r1, r1, #3
 8020fa8:	d2f3      	bcs.n	8020f92 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 8020faa:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8020fae:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8020fb2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8020fb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8020fba:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 8020fbe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8020fc2:	f840 2b04 	str.w	r2, [r0], #4
 8020fc6:	e7eb      	b.n	8020fa0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8020fc8:	4b02      	ldr	r3, [pc, #8]	; (8020fd4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8020fca:	6818      	ldr	r0, [r3, #0]
 8020fcc:	6803      	ldr	r3, [r0, #0]
 8020fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fd0:	4798      	blx	r3
 8020fd2:	e76e      	b.n	8020eb2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8020fd4:	2003c26c 	.word	0x2003c26c
 8020fd8:	2003c266 	.word	0x2003c266

08020fdc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fe0:	4607      	mov	r7, r0
 8020fe2:	b091      	sub	sp, #68	; 0x44
 8020fe4:	460c      	mov	r4, r1
 8020fe6:	4698      	mov	r8, r3
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d04f      	beq.n	802108c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 8020fec:	6808      	ldr	r0, [r1, #0]
 8020fee:	ab0c      	add	r3, sp, #48	; 0x30
 8020ff0:	6849      	ldr	r1, [r1, #4]
 8020ff2:	4e7e      	ldr	r6, [pc, #504]	; (80211ec <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8020ff4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80211f0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8020ff8:	c303      	stmia	r3!, {r0, r1}
 8020ffa:	6810      	ldr	r0, [r2, #0]
 8020ffc:	ab0e      	add	r3, sp, #56	; 0x38
 8020ffe:	6851      	ldr	r1, [r2, #4]
 8021000:	c303      	stmia	r3!, {r0, r1}
 8021002:	a80c      	add	r0, sp, #48	; 0x30
 8021004:	f7f9 fb3a 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021008:	4621      	mov	r1, r4
 802100a:	a80e      	add	r0, sp, #56	; 0x38
 802100c:	f7f9 fb5e 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021010:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021014:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021018:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802101c:	6830      	ldr	r0, [r6, #0]
 802101e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021022:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8021026:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802102a:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802102e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021032:	440a      	add	r2, r1
 8021034:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021038:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802103c:	4413      	add	r3, r2
 802103e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021042:	6803      	ldr	r3, [r0, #0]
 8021044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021046:	4798      	blx	r3
 8021048:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802104c:	d021      	beq.n	8021092 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802104e:	f010 0f04 	tst.w	r0, #4
 8021052:	6830      	ldr	r0, [r6, #0]
 8021054:	d020      	beq.n	8021098 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021056:	2100      	movs	r1, #0
 8021058:	f04f 0c02 	mov.w	ip, #2
 802105c:	6806      	ldr	r6, [r0, #0]
 802105e:	b2a4      	uxth	r4, r4
 8021060:	9106      	str	r1, [sp, #24]
 8021062:	b2ad      	uxth	r5, r5
 8021064:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8021068:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802106c:	e9cd c107 	strd	ip, r1, [sp, #28]
 8021070:	f8b9 c000 	ldrh.w	ip, [r9]
 8021074:	f8cd 800c 	str.w	r8, [sp, #12]
 8021078:	9501      	str	r5, [sp, #4]
 802107a:	9400      	str	r4, [sp, #0]
 802107c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8021080:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021084:	9102      	str	r1, [sp, #8]
 8021086:	4639      	mov	r1, r7
 8021088:	6c34      	ldr	r4, [r6, #64]	; 0x40
 802108a:	47a0      	blx	r4
 802108c:	b011      	add	sp, #68	; 0x44
 802108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021092:	f010 0f01 	tst.w	r0, #1
 8021096:	e7dc      	b.n	8021052 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8021098:	6803      	ldr	r3, [r0, #0]
 802109a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210a0:	4798      	blx	r3
 80210a2:	f8b9 c000 	ldrh.w	ip, [r9]
 80210a6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80210aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80210ae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80210b2:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 80210b6:	fb0c 2303 	mla	r3, ip, r3, r2
 80210ba:	ebaa 0a04 	sub.w	sl, sl, r4
 80210be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80210c2:	fb0c f305 	mul.w	r3, ip, r5
 80210c6:	ebac 0c04 	sub.w	ip, ip, r4
 80210ca:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80210ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80210d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80210d6:	d02d      	beq.n	8021134 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 80210d8:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80210dc:	920a      	str	r2, [sp, #40]	; 0x28
 80210de:	4298      	cmp	r0, r3
 80210e0:	d27d      	bcs.n	80211de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 80210e2:	eb00 020b 	add.w	r2, r0, fp
 80210e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80210e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80210ea:	4290      	cmp	r0, r2
 80210ec:	d274      	bcs.n	80211d8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 80210ee:	f837 eb02 	ldrh.w	lr, [r7], #2
 80210f2:	f850 4b04 	ldr.w	r4, [r0], #4
 80210f6:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 80210fa:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80210fe:	ea4f 262e 	mov.w	r6, lr, asr #8
 8021102:	b2ed      	uxtb	r5, r5
 8021104:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021108:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802110c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8021110:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021114:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021118:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802111c:	d129      	bne.n	8021172 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 802111e:	0212      	lsls	r2, r2, #8
 8021120:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8021124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021126:	4335      	orrs	r5, r6
 8021128:	4315      	orrs	r5, r2
 802112a:	f840 5c04 	str.w	r5, [r0, #-4]
 802112e:	e7db      	b.n	80210e8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8021130:	4460      	add	r0, ip
 8021132:	4457      	add	r7, sl
 8021134:	4298      	cmp	r0, r3
 8021136:	d252      	bcs.n	80211de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8021138:	eb00 040b 	add.w	r4, r0, fp
 802113c:	42a0      	cmp	r0, r4
 802113e:	d2f7      	bcs.n	8021130 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8021140:	f837 5b02 	ldrh.w	r5, [r7], #2
 8021144:	10e9      	asrs	r1, r5, #3
 8021146:	122e      	asrs	r6, r5, #8
 8021148:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 802114c:	00ed      	lsls	r5, r5, #3
 802114e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021152:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021156:	b2ed      	uxtb	r5, r5
 8021158:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802115c:	0212      	lsls	r2, r2, #8
 802115e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021162:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8021166:	432a      	orrs	r2, r5
 8021168:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 802116c:	f840 2b04 	str.w	r2, [r0], #4
 8021170:	e7e4      	b.n	802113c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8021172:	fb18 f505 	smulbb	r5, r8, r5
 8021176:	fb08 fe09 	mul.w	lr, r8, r9
 802117a:	fb18 f606 	smulbb	r6, r8, r6
 802117e:	fb18 f202 	smulbb	r2, r8, r2
 8021182:	f10e 0101 	add.w	r1, lr, #1
 8021186:	eb01 212e 	add.w	r1, r1, lr, asr #8
 802118a:	eb08 0e09 	add.w	lr, r8, r9
 802118e:	1209      	asrs	r1, r1, #8
 8021190:	eba9 0901 	sub.w	r9, r9, r1
 8021194:	ebae 0e01 	sub.w	lr, lr, r1
 8021198:	b2e1      	uxtb	r1, r4
 802119a:	fa5f fe8e 	uxtb.w	lr, lr
 802119e:	fb09 5101 	mla	r1, r9, r1, r5
 80211a2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80211a6:	fb09 6605 	mla	r6, r9, r5, r6
 80211aa:	fbb1 f1fe 	udiv	r1, r1, lr
 80211ae:	fbb6 f6fe 	udiv	r6, r6, lr
 80211b2:	b2c9      	uxtb	r1, r1
 80211b4:	0436      	lsls	r6, r6, #16
 80211b6:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 80211ba:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80211be:	4331      	orrs	r1, r6
 80211c0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80211c4:	fb09 2606 	mla	r6, r9, r6, r2
 80211c8:	fbb6 f6fe 	udiv	r6, r6, lr
 80211cc:	0236      	lsls	r6, r6, #8
 80211ce:	b2b6      	uxth	r6, r6
 80211d0:	4331      	orrs	r1, r6
 80211d2:	f840 1c04 	str.w	r1, [r0, #-4]
 80211d6:	e787      	b.n	80210e8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 80211d8:	4460      	add	r0, ip
 80211da:	4457      	add	r7, sl
 80211dc:	e77f      	b.n	80210de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 80211de:	4b03      	ldr	r3, [pc, #12]	; (80211ec <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 80211e0:	6818      	ldr	r0, [r3, #0]
 80211e2:	6803      	ldr	r3, [r0, #0]
 80211e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211e6:	4798      	blx	r3
 80211e8:	e750      	b.n	802108c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 80211ea:	bf00      	nop
 80211ec:	2003c26c 	.word	0x2003c26c
 80211f0:	2003c266 	.word	0x2003c266

080211f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80211f4:	b4f0      	push	{r4, r5, r6, r7}
 80211f6:	4616      	mov	r6, r2
 80211f8:	461c      	mov	r4, r3
 80211fa:	460d      	mov	r5, r1
 80211fc:	9a04      	ldr	r2, [sp, #16]
 80211fe:	2e01      	cmp	r6, #1
 8021200:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021204:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8021208:	d012      	beq.n	8021230 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802120a:	d303      	bcc.n	8021214 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802120c:	2e02      	cmp	r6, #2
 802120e:	d006      	beq.n	802121e <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8021210:	bcf0      	pop	{r4, r5, r6, r7}
 8021212:	4770      	bx	lr
 8021214:	4621      	mov	r1, r4
 8021216:	4628      	mov	r0, r5
 8021218:	bcf0      	pop	{r4, r5, r6, r7}
 802121a:	f7ff bedf 	b.w	8020fdc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802121e:	6805      	ldr	r5, [r0, #0]
 8021220:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021224:	68ed      	ldr	r5, [r5, #12]
 8021226:	4613      	mov	r3, r2
 8021228:	4622      	mov	r2, r4
 802122a:	46ac      	mov	ip, r5
 802122c:	bcf0      	pop	{r4, r5, r6, r7}
 802122e:	4760      	bx	ip
 8021230:	4621      	mov	r1, r4
 8021232:	4628      	mov	r0, r5
 8021234:	bcf0      	pop	{r4, r5, r6, r7}
 8021236:	f7ff bde1 	b.w	8020dfc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

0802123c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021240:	b093      	sub	sp, #76	; 0x4c
 8021242:	4681      	mov	r9, r0
 8021244:	460f      	mov	r7, r1
 8021246:	6810      	ldr	r0, [r2, #0]
 8021248:	6851      	ldr	r1, [r2, #4]
 802124a:	ac0e      	add	r4, sp, #56	; 0x38
 802124c:	4616      	mov	r6, r2
 802124e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8021252:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8021400 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8021256:	c403      	stmia	r4!, {r0, r1}
 8021258:	6818      	ldr	r0, [r3, #0]
 802125a:	ac10      	add	r4, sp, #64	; 0x40
 802125c:	6859      	ldr	r1, [r3, #4]
 802125e:	c403      	stmia	r4!, {r0, r1}
 8021260:	a80e      	add	r0, sp, #56	; 0x38
 8021262:	f7f9 fa0b 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021266:	4631      	mov	r1, r6
 8021268:	a810      	add	r0, sp, #64	; 0x40
 802126a:	4e64      	ldr	r6, [pc, #400]	; (80213fc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 802126c:	f7f9 fa2e 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021270:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021274:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021278:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802127c:	6830      	ldr	r0, [r6, #0]
 802127e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021282:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021286:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802128a:	4489      	add	r9, r1
 802128c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021290:	440a      	add	r2, r1
 8021292:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021296:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802129a:	4413      	add	r3, r2
 802129c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80212a0:	6803      	ldr	r3, [r0, #0]
 80212a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80212a4:	4798      	blx	r3
 80212a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80212aa:	6830      	ldr	r0, [r6, #0]
 80212ac:	d01f      	beq.n	80212ee <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80212ae:	2102      	movs	r1, #2
 80212b0:	2600      	movs	r6, #0
 80212b2:	6802      	ldr	r2, [r0, #0]
 80212b4:	b2a4      	uxth	r4, r4
 80212b6:	b2ad      	uxth	r5, r5
 80212b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80212bc:	e9cd 1608 	strd	r1, r6, [sp, #32]
 80212c0:	210b      	movs	r1, #11
 80212c2:	9107      	str	r1, [sp, #28]
 80212c4:	f8ba 1000 	ldrh.w	r1, [sl]
 80212c8:	9502      	str	r5, [sp, #8]
 80212ca:	9106      	str	r1, [sp, #24]
 80212cc:	2101      	movs	r1, #1
 80212ce:	9401      	str	r4, [sp, #4]
 80212d0:	e9cd 8104 	strd	r8, r1, [sp, #16]
 80212d4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80212d8:	9103      	str	r1, [sp, #12]
 80212da:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 80212de:	9100      	str	r1, [sp, #0]
 80212e0:	4649      	mov	r1, r9
 80212e2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80212e4:	463a      	mov	r2, r7
 80212e6:	47a0      	blx	r4
 80212e8:	b013      	add	sp, #76	; 0x4c
 80212ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212ee:	6803      	ldr	r3, [r0, #0]
 80212f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212f2:	4798      	blx	r3
 80212f4:	f8ba 3000 	ldrh.w	r3, [sl]
 80212f8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80212fc:	f04f 0e04 	mov.w	lr, #4
 8021300:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021304:	435d      	muls	r5, r3
 8021306:	fb03 1202 	mla	r2, r3, r2, r1
 802130a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802130e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8021312:	920c      	str	r2, [sp, #48]	; 0x30
 8021314:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021318:	1b12      	subs	r2, r2, r4
 802131a:	920d      	str	r2, [sp, #52]	; 0x34
 802131c:	00a2      	lsls	r2, r4, #2
 802131e:	1b1c      	subs	r4, r3, r4
 8021320:	920a      	str	r2, [sp, #40]	; 0x28
 8021322:	00a3      	lsls	r3, r4, #2
 8021324:	930b      	str	r3, [sp, #44]	; 0x2c
 8021326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021328:	4298      	cmp	r0, r3
 802132a:	d261      	bcs.n	80213f0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802132e:	eb00 0a03 	add.w	sl, r0, r3
 8021332:	4550      	cmp	r0, sl
 8021334:	d257      	bcs.n	80213e6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021336:	f819 2b01 	ldrb.w	r2, [r9], #1
 802133a:	fb1e e202 	smlabb	r2, lr, r2, lr
 802133e:	eb07 0c02 	add.w	ip, r7, r2
 8021342:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021346:	fb03 f308 	mul.w	r3, r3, r8
 802134a:	1c5c      	adds	r4, r3, #1
 802134c:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8021350:	1224      	asrs	r4, r4, #8
 8021352:	2cff      	cmp	r4, #255	; 0xff
 8021354:	d003      	beq.n	802135e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 8021356:	6803      	ldr	r3, [r0, #0]
 8021358:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 802135c:	d10d      	bne.n	802137a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802135e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021362:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021366:	021b      	lsls	r3, r3, #8
 8021368:	5cba      	ldrb	r2, [r7, r2]
 802136a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802136e:	4313      	orrs	r3, r2
 8021370:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8021374:	6004      	str	r4, [r0, #0]
 8021376:	3004      	adds	r0, #4
 8021378:	e7db      	b.n	8021332 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 802137a:	b2e5      	uxtb	r5, r4
 802137c:	2c00      	cmp	r4, #0
 802137e:	d0fa      	beq.n	8021376 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8021380:	fb05 f10b 	mul.w	r1, r5, fp
 8021384:	445d      	add	r5, fp
 8021386:	5cba      	ldrb	r2, [r7, r2]
 8021388:	1c4e      	adds	r6, r1, #1
 802138a:	eb06 2121 	add.w	r1, r6, r1, asr #8
 802138e:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8021392:	1209      	asrs	r1, r1, #8
 8021394:	1a6d      	subs	r5, r5, r1
 8021396:	ebab 0101 	sub.w	r1, fp, r1
 802139a:	f89c b002 	ldrb.w	fp, [ip, #2]
 802139e:	b2ed      	uxtb	r5, r5
 80213a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80213a4:	fb01 b606 	mla	r6, r1, r6, fp
 80213a8:	fa5f fb83 	uxtb.w	fp, r3
 80213ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80213b0:	fb01 fb0b 	mul.w	fp, r1, fp
 80213b4:	fb04 b202 	mla	r2, r4, r2, fp
 80213b8:	fbb6 f6f5 	udiv	r6, r6, r5
 80213bc:	fbb2 f2f5 	udiv	r2, r2, r5
 80213c0:	0436      	lsls	r6, r6, #16
 80213c2:	b2d2      	uxtb	r2, r2
 80213c4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80213c8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80213cc:	4316      	orrs	r6, r2
 80213ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80213d2:	4354      	muls	r4, r2
 80213d4:	fb01 4203 	mla	r2, r1, r3, r4
 80213d8:	fbb2 f2f5 	udiv	r2, r2, r5
 80213dc:	0212      	lsls	r2, r2, #8
 80213de:	b292      	uxth	r2, r2
 80213e0:	4316      	orrs	r6, r2
 80213e2:	6006      	str	r6, [r0, #0]
 80213e4:	e7c7      	b.n	8021376 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 80213e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213e8:	4418      	add	r0, r3
 80213ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213ec:	4499      	add	r9, r3
 80213ee:	e79a      	b.n	8021326 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 80213f0:	4b02      	ldr	r3, [pc, #8]	; (80213fc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80213f2:	6818      	ldr	r0, [r3, #0]
 80213f4:	6803      	ldr	r3, [r0, #0]
 80213f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213f8:	4798      	blx	r3
 80213fa:	e775      	b.n	80212e8 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80213fc:	2003c26c 	.word	0x2003c26c
 8021400:	2003c266 	.word	0x2003c266

08021404 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021408:	b093      	sub	sp, #76	; 0x4c
 802140a:	4606      	mov	r6, r0
 802140c:	4689      	mov	r9, r1
 802140e:	6810      	ldr	r0, [r2, #0]
 8021410:	6851      	ldr	r1, [r2, #4]
 8021412:	ac0e      	add	r4, sp, #56	; 0x38
 8021414:	4615      	mov	r5, r2
 8021416:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 802141a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8021600 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 802141e:	c403      	stmia	r4!, {r0, r1}
 8021420:	6818      	ldr	r0, [r3, #0]
 8021422:	ac10      	add	r4, sp, #64	; 0x40
 8021424:	6859      	ldr	r1, [r3, #4]
 8021426:	c403      	stmia	r4!, {r0, r1}
 8021428:	a80e      	add	r0, sp, #56	; 0x38
 802142a:	f7f9 f927 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802142e:	4629      	mov	r1, r5
 8021430:	a810      	add	r0, sp, #64	; 0x40
 8021432:	f7f9 f94b 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021436:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802143a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802143e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021442:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021446:	fb11 2103 	smlabb	r1, r1, r3, r2
 802144a:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 802144e:	1875      	adds	r5, r6, r1
 8021450:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021454:	4e69      	ldr	r6, [pc, #420]	; (80215fc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8021456:	440a      	add	r2, r1
 8021458:	6830      	ldr	r0, [r6, #0]
 802145a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802145e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021462:	4413      	add	r3, r2
 8021464:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021468:	6803      	ldr	r3, [r0, #0]
 802146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802146c:	4798      	blx	r3
 802146e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021472:	d020      	beq.n	80214b6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 8021474:	6830      	ldr	r0, [r6, #0]
 8021476:	2200      	movs	r2, #0
 8021478:	2602      	movs	r6, #2
 802147a:	b2a4      	uxth	r4, r4
 802147c:	6801      	ldr	r1, [r0, #0]
 802147e:	b2bf      	uxth	r7, r7
 8021480:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021484:	e9cd 6208 	strd	r6, r2, [sp, #32]
 8021488:	260b      	movs	r6, #11
 802148a:	9607      	str	r6, [sp, #28]
 802148c:	f8ba 6000 	ldrh.w	r6, [sl]
 8021490:	f8cd 8010 	str.w	r8, [sp, #16]
 8021494:	9702      	str	r7, [sp, #8]
 8021496:	9401      	str	r4, [sp, #4]
 8021498:	e9cd 2605 	strd	r2, r6, [sp, #20]
 802149c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80214a0:	9203      	str	r2, [sp, #12]
 80214a2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80214a6:	9200      	str	r2, [sp, #0]
 80214a8:	464a      	mov	r2, r9
 80214aa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80214ac:	4629      	mov	r1, r5
 80214ae:	47a0      	blx	r4
 80214b0:	b013      	add	sp, #76	; 0x4c
 80214b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214b6:	6830      	ldr	r0, [r6, #0]
 80214b8:	f109 0904 	add.w	r9, r9, #4
 80214bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80214c0:	6803      	ldr	r3, [r0, #0]
 80214c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214c4:	4798      	blx	r3
 80214c6:	f8ba c000 	ldrh.w	ip, [sl]
 80214ca:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80214ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80214d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80214d6:	fb0c f707 	mul.w	r7, ip, r7
 80214da:	fb0c 2303 	mla	r3, ip, r3, r2
 80214de:	ebac 0c04 	sub.w	ip, ip, r4
 80214e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80214e6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80214ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80214ee:	eba3 0304 	sub.w	r3, r3, r4
 80214f2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80214f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80214f8:	d025      	beq.n	8021546 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 80214fa:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80214fe:	930c      	str	r3, [sp, #48]	; 0x30
 8021500:	42b8      	cmp	r0, r7
 8021502:	d274      	bcs.n	80215ee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8021504:	eb00 030b 	add.w	r3, r0, fp
 8021508:	930d      	str	r3, [sp, #52]	; 0x34
 802150a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802150c:	4298      	cmp	r0, r3
 802150e:	d26a      	bcs.n	80215e6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 8021510:	f815 1b01 	ldrb.w	r1, [r5], #1
 8021514:	f850 3b04 	ldr.w	r3, [r0], #4
 8021518:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802151c:	0e1c      	lsrs	r4, r3, #24
 802151e:	eb09 0201 	add.w	r2, r9, r1
 8021522:	f819 6001 	ldrb.w	r6, [r9, r1]
 8021526:	f892 a002 	ldrb.w	sl, [r2, #2]
 802152a:	7851      	ldrb	r1, [r2, #1]
 802152c:	d124      	bne.n	8021578 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 802152e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021530:	431e      	orrs	r6, r3
 8021532:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 8021536:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 802153a:	f840 1c04 	str.w	r1, [r0, #-4]
 802153e:	e7e4      	b.n	802150a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021542:	4460      	add	r0, ip
 8021544:	441d      	add	r5, r3
 8021546:	42b8      	cmp	r0, r7
 8021548:	d251      	bcs.n	80215ee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 802154a:	eb00 010b 	add.w	r1, r0, fp
 802154e:	4288      	cmp	r0, r1
 8021550:	d2f6      	bcs.n	8021540 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021552:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021556:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802155a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802155e:	eb09 0402 	add.w	r4, r9, r2
 8021562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021566:	78a6      	ldrb	r6, [r4, #2]
 8021568:	7862      	ldrb	r2, [r4, #1]
 802156a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802156e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021572:	f840 3b04 	str.w	r3, [r0], #4
 8021576:	e7ea      	b.n	802154e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 8021578:	fb18 f606 	smulbb	r6, r8, r6
 802157c:	fb08 fe04 	mul.w	lr, r8, r4
 8021580:	fb18 fa0a 	smulbb	sl, r8, sl
 8021584:	fb18 f101 	smulbb	r1, r8, r1
 8021588:	f10e 0201 	add.w	r2, lr, #1
 802158c:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8021590:	eb08 0e04 	add.w	lr, r8, r4
 8021594:	1212      	asrs	r2, r2, #8
 8021596:	ebae 0e02 	sub.w	lr, lr, r2
 802159a:	1aa2      	subs	r2, r4, r2
 802159c:	b2dc      	uxtb	r4, r3
 802159e:	fa5f fe8e 	uxtb.w	lr, lr
 80215a2:	fb02 6604 	mla	r6, r2, r4, r6
 80215a6:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80215aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215ae:	fb02 aa04 	mla	sl, r2, r4, sl
 80215b2:	fb02 1303 	mla	r3, r2, r3, r1
 80215b6:	fbb6 f6fe 	udiv	r6, r6, lr
 80215ba:	fbba fafe 	udiv	sl, sl, lr
 80215be:	b2f6      	uxtb	r6, r6
 80215c0:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 80215c4:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 80215c8:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 80215cc:	ea46 060a 	orr.w	r6, r6, sl
 80215d0:	fbb3 fafe 	udiv	sl, r3, lr
 80215d4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 80215d8:	fa1f fa8a 	uxth.w	sl, sl
 80215dc:	ea46 060a 	orr.w	r6, r6, sl
 80215e0:	f840 6c04 	str.w	r6, [r0, #-4]
 80215e4:	e791      	b.n	802150a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80215e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215e8:	4460      	add	r0, ip
 80215ea:	441d      	add	r5, r3
 80215ec:	e788      	b.n	8021500 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 80215ee:	4b03      	ldr	r3, [pc, #12]	; (80215fc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80215f0:	6818      	ldr	r0, [r3, #0]
 80215f2:	6803      	ldr	r3, [r0, #0]
 80215f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215f6:	4798      	blx	r3
 80215f8:	e75a      	b.n	80214b0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 80215fa:	bf00      	nop
 80215fc:	2003c26c 	.word	0x2003c26c
 8021600:	2003c266 	.word	0x2003c266

08021604 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021608:	b089      	sub	sp, #36	; 0x24
 802160a:	4605      	mov	r5, r0
 802160c:	4689      	mov	r9, r1
 802160e:	6810      	ldr	r0, [r2, #0]
 8021610:	6851      	ldr	r1, [r2, #4]
 8021612:	ac04      	add	r4, sp, #16
 8021614:	4616      	mov	r6, r2
 8021616:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 802161a:	f109 0904 	add.w	r9, r9, #4
 802161e:	c403      	stmia	r4!, {r0, r1}
 8021620:	6818      	ldr	r0, [r3, #0]
 8021622:	ac06      	add	r4, sp, #24
 8021624:	6859      	ldr	r1, [r3, #4]
 8021626:	c403      	stmia	r4!, {r0, r1}
 8021628:	a804      	add	r0, sp, #16
 802162a:	f7f9 f827 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802162e:	4631      	mov	r1, r6
 8021630:	a806      	add	r0, sp, #24
 8021632:	f7f9 f84b 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021636:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802163a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802163e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8021642:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8021646:	fb16 2103 	smlabb	r1, r6, r3, r2
 802164a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 802164e:	186e      	adds	r6, r5, r1
 8021650:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8021654:	440a      	add	r2, r1
 8021656:	f8ad 2018 	strh.w	r2, [sp, #24]
 802165a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802165e:	4413      	add	r3, r2
 8021660:	f8ad 301a 	strh.w	r3, [sp, #26]
 8021664:	4b57      	ldr	r3, [pc, #348]	; (80217c4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8021666:	6818      	ldr	r0, [r3, #0]
 8021668:	6803      	ldr	r3, [r0, #0]
 802166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802166c:	4798      	blx	r3
 802166e:	4b56      	ldr	r3, [pc, #344]	; (80217c8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8021670:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8021674:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021678:	f8b3 c000 	ldrh.w	ip, [r3]
 802167c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021680:	fb0a fa0c 	mul.w	sl, sl, ip
 8021684:	fb0c 2303 	mla	r3, ip, r3, r2
 8021688:	ebac 0c0b 	sub.w	ip, ip, fp
 802168c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021690:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021694:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021698:	eba3 030b 	sub.w	r3, r3, fp
 802169c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80216a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80216a4:	9301      	str	r3, [sp, #4]
 80216a6:	d02e      	beq.n	8021706 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80216a8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80216ac:	9302      	str	r3, [sp, #8]
 80216ae:	4550      	cmp	r0, sl
 80216b0:	d27f      	bcs.n	80217b2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 80216b2:	eb00 030b 	add.w	r3, r0, fp
 80216b6:	9303      	str	r3, [sp, #12]
 80216b8:	9b03      	ldr	r3, [sp, #12]
 80216ba:	4298      	cmp	r0, r3
 80216bc:	d275      	bcs.n	80217aa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 80216be:	f816 3b01 	ldrb.w	r3, [r6], #1
 80216c2:	6802      	ldr	r2, [r0, #0]
 80216c4:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 80216c8:	0e17      	lsrs	r7, r2, #24
 80216ca:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 80216ce:	ea4f 03e1 	mov.w	r3, r1, asr #3
 80216d2:	ea4f 2521 	mov.w	r5, r1, asr #8
 80216d6:	b2e4      	uxtb	r4, r4
 80216d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80216dc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80216e0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80216e4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80216e8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80216ec:	d12c      	bne.n	8021748 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 80216ee:	021b      	lsls	r3, r3, #8
 80216f0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80216f4:	9b02      	ldr	r3, [sp, #8]
 80216f6:	432c      	orrs	r4, r5
 80216f8:	431c      	orrs	r4, r3
 80216fa:	6004      	str	r4, [r0, #0]
 80216fc:	3004      	adds	r0, #4
 80216fe:	e7db      	b.n	80216b8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8021700:	9b01      	ldr	r3, [sp, #4]
 8021702:	4460      	add	r0, ip
 8021704:	441e      	add	r6, r3
 8021706:	4550      	cmp	r0, sl
 8021708:	d253      	bcs.n	80217b2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 802170a:	eb00 020b 	add.w	r2, r0, fp
 802170e:	4290      	cmp	r0, r2
 8021710:	d2f6      	bcs.n	8021700 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8021712:	f816 3b01 	ldrb.w	r3, [r6], #1
 8021716:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 802171a:	10e9      	asrs	r1, r5, #3
 802171c:	122c      	asrs	r4, r5, #8
 802171e:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8021722:	00e9      	lsls	r1, r5, #3
 8021724:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021728:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802172c:	b2c9      	uxtb	r1, r1
 802172e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021732:	021b      	lsls	r3, r3, #8
 8021734:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021738:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802173c:	430b      	orrs	r3, r1
 802173e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021742:	f840 3b04 	str.w	r3, [r0], #4
 8021746:	e7e2      	b.n	802170e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8021748:	fb18 f404 	smulbb	r4, r8, r4
 802174c:	fb08 fe07 	mul.w	lr, r8, r7
 8021750:	fb18 f505 	smulbb	r5, r8, r5
 8021754:	fb18 f303 	smulbb	r3, r8, r3
 8021758:	f10e 0101 	add.w	r1, lr, #1
 802175c:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8021760:	eb08 0e07 	add.w	lr, r8, r7
 8021764:	1209      	asrs	r1, r1, #8
 8021766:	ebae 0e01 	sub.w	lr, lr, r1
 802176a:	1a79      	subs	r1, r7, r1
 802176c:	b2d7      	uxtb	r7, r2
 802176e:	fa5f fe8e 	uxtb.w	lr, lr
 8021772:	fb01 4707 	mla	r7, r1, r7, r4
 8021776:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802177a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802177e:	fb01 5504 	mla	r5, r1, r4, r5
 8021782:	fb01 3202 	mla	r2, r1, r2, r3
 8021786:	fbb7 f7fe 	udiv	r7, r7, lr
 802178a:	fbb5 f5fe 	udiv	r5, r5, lr
 802178e:	b2ff      	uxtb	r7, r7
 8021790:	042d      	lsls	r5, r5, #16
 8021792:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 8021796:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 802179a:	432f      	orrs	r7, r5
 802179c:	fbb2 f5fe 	udiv	r5, r2, lr
 80217a0:	022d      	lsls	r5, r5, #8
 80217a2:	b2ad      	uxth	r5, r5
 80217a4:	432f      	orrs	r7, r5
 80217a6:	6007      	str	r7, [r0, #0]
 80217a8:	e7a8      	b.n	80216fc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 80217aa:	9b01      	ldr	r3, [sp, #4]
 80217ac:	4460      	add	r0, ip
 80217ae:	441e      	add	r6, r3
 80217b0:	e77d      	b.n	80216ae <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 80217b2:	4b04      	ldr	r3, [pc, #16]	; (80217c4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80217b4:	6818      	ldr	r0, [r3, #0]
 80217b6:	6803      	ldr	r3, [r0, #0]
 80217b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217ba:	4798      	blx	r3
 80217bc:	b009      	add	sp, #36	; 0x24
 80217be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217c2:	bf00      	nop
 80217c4:	2003c26c 	.word	0x2003c26c
 80217c8:	2003c266 	.word	0x2003c266

080217cc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80217cc:	b430      	push	{r4, r5}
 80217ce:	780d      	ldrb	r5, [r1, #0]
 80217d0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80217d4:	2d01      	cmp	r5, #1
 80217d6:	d00a      	beq.n	80217ee <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80217d8:	d305      	bcc.n	80217e6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80217da:	2d02      	cmp	r5, #2
 80217dc:	d10b      	bne.n	80217f6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80217de:	9402      	str	r4, [sp, #8]
 80217e0:	bc30      	pop	{r4, r5}
 80217e2:	f7ff bf0f 	b.w	8021604 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80217e6:	9402      	str	r4, [sp, #8]
 80217e8:	bc30      	pop	{r4, r5}
 80217ea:	f7ff bd27 	b.w	802123c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80217ee:	9402      	str	r4, [sp, #8]
 80217f0:	bc30      	pop	{r4, r5}
 80217f2:	f7ff be07 	b.w	8021404 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80217f6:	bc30      	pop	{r4, r5}
 80217f8:	4770      	bx	lr

080217fa <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80217fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80217fe:	b085      	sub	sp, #20
 8021800:	4606      	mov	r6, r0
 8021802:	460c      	mov	r4, r1
 8021804:	4691      	mov	r9, r2
 8021806:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802180a:	4698      	mov	r8, r3
 802180c:	b1d5      	cbz	r5, 8021844 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802180e:	4608      	mov	r0, r1
 8021810:	f7fc fa1e 	bl	801dc50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021814:	4607      	mov	r7, r0
 8021816:	4620      	mov	r0, r4
 8021818:	f7fc fa4e 	bl	801dcb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802181c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021820:	4620      	mov	r0, r4
 8021822:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021826:	f8ad 800a 	strh.w	r8, [sp, #10]
 802182a:	f8ad 700c 	strh.w	r7, [sp, #12]
 802182e:	f7fc fb33 	bl	801de98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021832:	b950      	cbnz	r0, 802184a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8021834:	4620      	mov	r0, r4
 8021836:	f7fc faab 	bl	801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>
 802183a:	462b      	mov	r3, r5
 802183c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802183e:	a902      	add	r1, sp, #8
 8021840:	f7ff fbcc 	bl	8020fdc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021844:	b005      	add	sp, #20
 8021846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802184a:	2801      	cmp	r0, #1
 802184c:	d108      	bne.n	8021860 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 802184e:	4620      	mov	r0, r4
 8021850:	f7fc fa9e 	bl	801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021854:	462b      	mov	r3, r5
 8021856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021858:	a902      	add	r1, sp, #8
 802185a:	f7ff facf 	bl	8020dfc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 802185e:	e7f1      	b.n	8021844 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021860:	2802      	cmp	r0, #2
 8021862:	d110      	bne.n	8021886 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021864:	6833      	ldr	r3, [r6, #0]
 8021866:	4620      	mov	r0, r4
 8021868:	68df      	ldr	r7, [r3, #12]
 802186a:	f7fc fa91 	bl	801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>
 802186e:	4680      	mov	r8, r0
 8021870:	4620      	mov	r0, r4
 8021872:	f7fc fa55 	bl	801dd20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021878:	aa02      	add	r2, sp, #8
 802187a:	4641      	mov	r1, r8
 802187c:	e9cd 5000 	strd	r5, r0, [sp]
 8021880:	4630      	mov	r0, r6
 8021882:	47b8      	blx	r7
 8021884:	e7de      	b.n	8021844 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021886:	280b      	cmp	r0, #11
 8021888:	d1dc      	bne.n	8021844 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802188a:	4620      	mov	r0, r4
 802188c:	f7fc fa80 	bl	801dd90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021890:	4606      	mov	r6, r0
 8021892:	4620      	mov	r0, r4
 8021894:	f7fc faac 	bl	801ddf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021898:	9500      	str	r5, [sp, #0]
 802189a:	4601      	mov	r1, r0
 802189c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802189e:	aa02      	add	r2, sp, #8
 80218a0:	4630      	mov	r0, r6
 80218a2:	f7ff ff93 	bl	80217cc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80218a6:	e7cd      	b.n	8021844 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

080218a8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 80218a8:	b160      	cbz	r0, 80218c4 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80218aa:	2903      	cmp	r1, #3
 80218ac:	d818      	bhi.n	80218e0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 80218ae:	e8df f001 	tbb	[pc, r1]
 80218b2:	1902      	.short	0x1902
 80218b4:	1b06      	.short	0x1b06
 80218b6:	4b0e      	ldr	r3, [pc, #56]	; (80218f0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80218b8:	8818      	ldrh	r0, [r3, #0]
 80218ba:	4240      	negs	r0, r0
 80218bc:	4770      	bx	lr
 80218be:	4b0c      	ldr	r3, [pc, #48]	; (80218f0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80218c0:	8818      	ldrh	r0, [r3, #0]
 80218c2:	4770      	bx	lr
 80218c4:	2903      	cmp	r1, #3
 80218c6:	d80b      	bhi.n	80218e0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 80218c8:	a301      	add	r3, pc, #4	; (adr r3, 80218d0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80218ca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80218ce:	bf00      	nop
 80218d0:	080218e5 	.word	0x080218e5
 80218d4:	080218bf 	.word	0x080218bf
 80218d8:	080218e9 	.word	0x080218e9
 80218dc:	080218b7 	.word	0x080218b7
 80218e0:	2000      	movs	r0, #0
 80218e2:	4770      	bx	lr
 80218e4:	2001      	movs	r0, #1
 80218e6:	4770      	bx	lr
 80218e8:	f04f 30ff 	mov.w	r0, #4294967295
 80218ec:	4770      	bx	lr
 80218ee:	bf00      	nop
 80218f0:	2003c266 	.word	0x2003c266

080218f4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 80218f4:	b160      	cbz	r0, 8021910 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 80218f6:	2903      	cmp	r1, #3
 80218f8:	d818      	bhi.n	802192c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 80218fa:	e8df f001 	tbb	[pc, r1]
 80218fe:	0219      	.short	0x0219
 8021900:	051b      	.short	0x051b
 8021902:	4b0e      	ldr	r3, [pc, #56]	; (802193c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021904:	8818      	ldrh	r0, [r3, #0]
 8021906:	4770      	bx	lr
 8021908:	4b0c      	ldr	r3, [pc, #48]	; (802193c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 802190a:	8818      	ldrh	r0, [r3, #0]
 802190c:	4240      	negs	r0, r0
 802190e:	4770      	bx	lr
 8021910:	2903      	cmp	r1, #3
 8021912:	d80b      	bhi.n	802192c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8021914:	a301      	add	r3, pc, #4	; (adr r3, 802191c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8021916:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802191a:	bf00      	nop
 802191c:	08021903 	.word	0x08021903
 8021920:	08021935 	.word	0x08021935
 8021924:	08021909 	.word	0x08021909
 8021928:	08021931 	.word	0x08021931
 802192c:	2000      	movs	r0, #0
 802192e:	4770      	bx	lr
 8021930:	2001      	movs	r0, #1
 8021932:	4770      	bx	lr
 8021934:	f04f 30ff 	mov.w	r0, #4294967295
 8021938:	4770      	bx	lr
 802193a:	bf00      	nop
 802193c:	2003c266 	.word	0x2003c266

08021940 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021944:	b099      	sub	sp, #100	; 0x64
 8021946:	910b      	str	r1, [sp, #44]	; 0x2c
 8021948:	a914      	add	r1, sp, #80	; 0x50
 802194a:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 802194e:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8021952:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8021956:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 802195a:	e881 000c 	stmia.w	r1, {r2, r3}
 802195e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021962:	930a      	str	r3, [sp, #40]	; 0x28
 8021964:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021968:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 802196c:	9310      	str	r3, [sp, #64]	; 0x40
 802196e:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8021972:	9309      	str	r3, [sp, #36]	; 0x24
 8021974:	7b4b      	ldrb	r3, [r1, #13]
 8021976:	ea4f 1843 	mov.w	r8, r3, lsl #5
 802197a:	f408 7080 	and.w	r0, r8, #256	; 0x100
 802197e:	f891 8006 	ldrb.w	r8, [r1, #6]
 8021982:	ea58 0800 	orrs.w	r8, r8, r0
 8021986:	f000 815b 	beq.w	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 802198a:	011b      	lsls	r3, r3, #4
 802198c:	79c8      	ldrb	r0, [r1, #7]
 802198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021992:	4303      	orrs	r3, r0
 8021994:	930d      	str	r3, [sp, #52]	; 0x34
 8021996:	f000 8153 	beq.w	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 802199a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802199e:	b29b      	uxth	r3, r3
 80219a0:	2f00      	cmp	r7, #0
 80219a2:	f000 80f3 	beq.w	8021b8c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 80219a6:	1aff      	subs	r7, r7, r3
 80219a8:	b2bf      	uxth	r7, r7
 80219aa:	043d      	lsls	r5, r7, #16
 80219ac:	d502      	bpl.n	80219b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80219ae:	1bf6      	subs	r6, r6, r7
 80219b0:	2700      	movs	r7, #0
 80219b2:	b236      	sxth	r6, r6
 80219b4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80219b8:	fa1f f588 	uxth.w	r5, r8
 80219bc:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80219c0:	428e      	cmp	r6, r1
 80219c2:	b28b      	uxth	r3, r1
 80219c4:	bfbf      	itttt	lt
 80219c6:	18ff      	addlt	r7, r7, r3
 80219c8:	1bbe      	sublt	r6, r7, r6
 80219ca:	b2b7      	uxthlt	r7, r6
 80219cc:	460e      	movlt	r6, r1
 80219ce:	8891      	ldrh	r1, [r2, #4]
 80219d0:	440b      	add	r3, r1
 80219d2:	4631      	mov	r1, r6
 80219d4:	b21b      	sxth	r3, r3
 80219d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80219d8:	88d3      	ldrh	r3, [r2, #6]
 80219da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219dc:	449a      	add	sl, r3
 80219de:	fa0f f38a 	sxth.w	r3, sl
 80219e2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80219e6:	930e      	str	r3, [sp, #56]	; 0x38
 80219e8:	4bb1      	ldr	r3, [pc, #708]	; (8021cb0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 80219ea:	f893 b000 	ldrb.w	fp, [r3]
 80219ee:	f10b 30ff 	add.w	r0, fp, #4294967295
 80219f2:	4243      	negs	r3, r0
 80219f4:	4143      	adcs	r3, r0
 80219f6:	a814      	add	r0, sp, #80	; 0x50
 80219f8:	930c      	str	r3, [sp, #48]	; 0x30
 80219fa:	464b      	mov	r3, r9
 80219fc:	f7f8 fcb9 	bl	801a372 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021a00:	4631      	mov	r1, r6
 8021a02:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021a06:	464b      	mov	r3, r9
 8021a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a0a:	a814      	add	r0, sp, #80	; 0x50
 8021a0c:	f7f8 fcce 	bl	801a3ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021a10:	a918      	add	r1, sp, #96	; 0x60
 8021a12:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021a16:	a817      	add	r0, sp, #92	; 0x5c
 8021a18:	f7f8 fdee 	bl	801a5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021a1c:	f1b9 0f00 	cmp.w	r9, #0
 8021a20:	f040 80b7 	bne.w	8021b92 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8021a24:	f1bb 0f01 	cmp.w	fp, #1
 8021a28:	f040 80bb 	bne.w	8021ba2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 8021a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a2e:	b153      	cbz	r3, 8021a46 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8021a30:	2508      	movs	r5, #8
 8021a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a34:	fb95 f3f3 	sdiv	r3, r5, r3
 8021a38:	1e5d      	subs	r5, r3, #1
 8021a3a:	4445      	add	r5, r8
 8021a3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021a40:	fb15 f503 	smulbb	r5, r5, r3
 8021a44:	b2ad      	uxth	r5, r5
 8021a46:	b907      	cbnz	r7, 8021a4a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021a48:	b16c      	cbz	r4, 8021a66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8021a4a:	fb04 7305 	mla	r3, r4, r5, r7
 8021a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a50:	ebaa 0a04 	sub.w	sl, sl, r4
 8021a54:	4353      	muls	r3, r2
 8021a56:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021a58:	fa1f fa8a 	uxth.w	sl, sl
 8021a5c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021a60:	f003 0407 	and.w	r4, r3, #7
 8021a64:	9228      	str	r2, [sp, #160]	; 0xa0
 8021a66:	4649      	mov	r1, r9
 8021a68:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021a6a:	f7ff ff1d 	bl	80218a8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8021a6e:	4683      	mov	fp, r0
 8021a70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021a72:	f7ff ff3f 	bl	80218f4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8021a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a7a:	4681      	mov	r9, r0
 8021a7c:	1a9b      	subs	r3, r3, r2
 8021a7e:	459a      	cmp	sl, r3
 8021a80:	bfa8      	it	ge
 8021a82:	469a      	movge	sl, r3
 8021a84:	f1ba 0f00 	cmp.w	sl, #0
 8021a88:	f340 80da 	ble.w	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021a8c:	1bf6      	subs	r6, r6, r7
 8021a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a90:	1b9e      	subs	r6, r3, r6
 8021a92:	4546      	cmp	r6, r8
 8021a94:	bfd4      	ite	le
 8021a96:	ebc7 0706 	rsble	r7, r7, r6
 8021a9a:	ebc7 0708 	rsbgt	r7, r7, r8
 8021a9e:	2f00      	cmp	r7, #0
 8021aa0:	f340 80ce 	ble.w	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021aa4:	1bed      	subs	r5, r5, r7
 8021aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021aa8:	436b      	muls	r3, r5
 8021aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8021aac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021aae:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021ab2:	0c1d      	lsrs	r5, r3, #16
 8021ab4:	0a1e      	lsrs	r6, r3, #8
 8021ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8021aba:	930f      	str	r3, [sp, #60]	; 0x3c
 8021abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	f040 80c3 	bne.w	8021c4a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8021ac4:	4b7b      	ldr	r3, [pc, #492]	; (8021cb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8021ac6:	6818      	ldr	r0, [r3, #0]
 8021ac8:	6803      	ldr	r3, [r0, #0]
 8021aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021acc:	4798      	blx	r3
 8021ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ad0:	2301      	movs	r3, #1
 8021ad2:	4093      	lsls	r3, r2
 8021ad4:	4a78      	ldr	r2, [pc, #480]	; (8021cb8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8021ad6:	3b01      	subs	r3, #1
 8021ad8:	8811      	ldrh	r1, [r2, #0]
 8021ada:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8021ade:	b2db      	uxtb	r3, r3
 8021ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8021ae2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8021ae6:	fb01 2303 	mla	r3, r1, r3, r2
 8021aea:	22ff      	movs	r2, #255	; 0xff
 8021aec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021aee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021af2:	fb92 f2f1 	sdiv	r2, r2, r1
 8021af6:	fb02 f208 	mul.w	r2, r2, r8
 8021afa:	930a      	str	r3, [sp, #40]	; 0x28
 8021afc:	9210      	str	r2, [sp, #64]	; 0x40
 8021afe:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8021b02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b04:	fb07 9b1b 	mls	fp, r7, fp, r9
 8021b08:	920c      	str	r2, [sp, #48]	; 0x30
 8021b0a:	fb02 f907 	mul.w	r9, r2, r7
 8021b0e:	b2f2      	uxtb	r2, r6
 8021b10:	781b      	ldrb	r3, [r3, #0]
 8021b12:	9211      	str	r2, [sp, #68]	; 0x44
 8021b14:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8021b18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021b1a:	4123      	asrs	r3, r4
 8021b1c:	b2d2      	uxtb	r2, r2
 8021b1e:	b2db      	uxtb	r3, r3
 8021b20:	9212      	str	r2, [sp, #72]	; 0x48
 8021b22:	b2ea      	uxtb	r2, r5
 8021b24:	9213      	str	r2, [sp, #76]	; 0x4c
 8021b26:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021b2a:	f0c0 80d8 	bcc.w	8021cde <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021b2e:	46b8      	mov	r8, r7
 8021b30:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021b34:	f118 38ff 	adds.w	r8, r8, #4294967295
 8021b38:	f0c0 80c0 	bcc.w	8021cbc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021b3e:	401a      	ands	r2, r3
 8021b40:	d013      	beq.n	8021b6a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021b42:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021b44:	fb12 f201 	smulbb	r2, r2, r1
 8021b48:	b292      	uxth	r2, r2
 8021b4a:	1c51      	adds	r1, r2, #1
 8021b4c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021b50:	1209      	asrs	r1, r1, #8
 8021b52:	b2ce      	uxtb	r6, r1
 8021b54:	2eff      	cmp	r6, #255	; 0xff
 8021b56:	d003      	beq.n	8021b60 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8021b58:	f8dc 5000 	ldr.w	r5, [ip]
 8021b5c:	0e2a      	lsrs	r2, r5, #24
 8021b5e:	d176      	bne.n	8021c4e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8021b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021b62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8021b66:	f8cc 1000 	str.w	r1, [ip]
 8021b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b6c:	4414      	add	r4, r2
 8021b6e:	b2a4      	uxth	r4, r4
 8021b70:	2c07      	cmp	r4, #7
 8021b72:	bf89      	itett	hi
 8021b74:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 8021b76:	4113      	asrls	r3, r2
 8021b78:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8021b7a:	2400      	movhi	r4, #0
 8021b7c:	bf89      	itett	hi
 8021b7e:	3201      	addhi	r2, #1
 8021b80:	b2db      	uxtbls	r3, r3
 8021b82:	785b      	ldrbhi	r3, [r3, #1]
 8021b84:	9228      	strhi	r2, [sp, #160]	; 0xa0
 8021b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b88:	4494      	add	ip, r2
 8021b8a:	e7d3      	b.n	8021b34 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8021b8c:	441e      	add	r6, r3
 8021b8e:	b236      	sxth	r6, r6
 8021b90:	e710      	b.n	80219b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021b92:	f1b9 0f01 	cmp.w	r9, #1
 8021b96:	f47f af49 	bne.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021b9a:	f1bb 0f01 	cmp.w	fp, #1
 8021b9e:	f47f af45 	bne.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021ba2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8021cb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8021ba6:	f8db 0000 	ldr.w	r0, [fp]
 8021baa:	6803      	ldr	r3, [r0, #0]
 8021bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021bae:	4798      	blx	r3
 8021bb0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8021bb4:	465a      	mov	r2, fp
 8021bb6:	d006      	beq.n	8021bc6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8021bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bba:	2b04      	cmp	r3, #4
 8021bbc:	d143      	bne.n	8021c46 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 8021bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bc0:	3300      	adds	r3, #0
 8021bc2:	bf18      	it	ne
 8021bc4:	2301      	movne	r3, #1
 8021bc6:	0581      	lsls	r1, r0, #22
 8021bc8:	f140 8092 	bpl.w	8021cf0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8021bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021bce:	2908      	cmp	r1, #8
 8021bd0:	f040 808e 	bne.w	8021cf0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	bf0c      	ite	eq
 8021bd8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8021bdc:	f44f 7180 	movne.w	r1, #256	; 0x100
 8021be0:	2f00      	cmp	r7, #0
 8021be2:	f47f af23 	bne.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021be6:	2c00      	cmp	r4, #0
 8021be8:	f47f af20 	bne.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021bec:	eb08 0306 	add.w	r3, r8, r6
 8021bf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021bf2:	4283      	cmp	r3, r0
 8021bf4:	f73f af1a 	bgt.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021bfc:	4403      	add	r3, r0
 8021bfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021c00:	4283      	cmp	r3, r0
 8021c02:	f73f af13 	bgt.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c08:	2600      	movs	r6, #0
 8021c0a:	6810      	ldr	r0, [r2, #0]
 8021c0c:	2b08      	cmp	r3, #8
 8021c0e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021c12:	6804      	ldr	r4, [r0, #0]
 8021c14:	bf18      	it	ne
 8021c16:	3501      	addne	r5, #1
 8021c18:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8021c1c:	bf18      	it	ne
 8021c1e:	f025 0501 	bicne.w	r5, r5, #1
 8021c22:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021c26:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8021c2a:	bf18      	it	ne
 8021c2c:	b2ad      	uxthne	r5, r5
 8021c2e:	9104      	str	r1, [sp, #16]
 8021c30:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021c32:	e9cd 5a00 	strd	r5, sl, [sp]
 8021c36:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021c3a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021c3c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8021c3e:	47a0      	blx	r4
 8021c40:	b019      	add	sp, #100	; 0x64
 8021c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c46:	2300      	movs	r3, #0
 8021c48:	e7bd      	b.n	8021bc6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8021c4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021c4c:	e73f      	b.n	8021ace <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8021c4e:	2e00      	cmp	r6, #0
 8021c50:	d08b      	beq.n	8021b6a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021c52:	fb06 f102 	mul.w	r1, r6, r2
 8021c56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021c58:	f101 0e01 	add.w	lr, r1, #1
 8021c5c:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8021c60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021c64:	eba2 090e 	sub.w	r9, r2, lr
 8021c68:	4432      	add	r2, r6
 8021c6a:	eba2 020e 	sub.w	r2, r2, lr
 8021c6e:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8021c72:	b2d1      	uxtb	r1, r2
 8021c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021c76:	4372      	muls	r2, r6
 8021c78:	fb09 2e0e 	mla	lr, r9, lr, r2
 8021c7c:	b2ea      	uxtb	r2, r5
 8021c7e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8021c82:	fb09 f202 	mul.w	r2, r9, r2
 8021c86:	fb06 2200 	mla	r2, r6, r0, r2
 8021c8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021c8c:	fb92 f2f1 	sdiv	r2, r2, r1
 8021c90:	4346      	muls	r6, r0
 8021c92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8021c96:	fb9e fef1 	sdiv	lr, lr, r1
 8021c9a:	fb09 6505 	mla	r5, r9, r5, r6
 8021c9e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8021ca2:	fb95 f5f1 	sdiv	r5, r5, r1
 8021ca6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8021caa:	f8cc 5000 	str.w	r5, [ip]
 8021cae:	e75c      	b.n	8021b6a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021cb0:	2003c264 	.word	0x2003c264
 8021cb4:	2003c26c 	.word	0x2003c26c
 8021cb8:	2003c266 	.word	0x2003c266
 8021cbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021cbe:	b152      	cbz	r2, 8021cd6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8021cc0:	4414      	add	r4, r2
 8021cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cc4:	b2a4      	uxth	r4, r4
 8021cc6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021cca:	f004 0407 	and.w	r4, r4, #7
 8021cce:	9328      	str	r3, [sp, #160]	; 0xa0
 8021cd0:	781b      	ldrb	r3, [r3, #0]
 8021cd2:	4123      	asrs	r3, r4
 8021cd4:	b2db      	uxtb	r3, r3
 8021cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021cd8:	445a      	add	r2, fp
 8021cda:	920a      	str	r2, [sp, #40]	; 0x28
 8021cdc:	e723      	b.n	8021b26 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 8021cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	d1ad      	bne.n	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021ce4:	4b05      	ldr	r3, [pc, #20]	; (8021cfc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 8021ce6:	6818      	ldr	r0, [r3, #0]
 8021ce8:	6803      	ldr	r3, [r0, #0]
 8021cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cec:	4798      	blx	r3
 8021cee:	e7a7      	b.n	8021c40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	f43f ae9b 	beq.w	8021a2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8021cfa:	e771      	b.n	8021be0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021cfc:	2003c26c 	.word	0x2003c26c

08021d00 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021d00:	b538      	push	{r3, r4, r5, lr}
 8021d02:	4c15      	ldr	r4, [pc, #84]	; (8021d58 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021d04:	4605      	mov	r5, r0
 8021d06:	7823      	ldrb	r3, [r4, #0]
 8021d08:	f3bf 8f5b 	dmb	ish
 8021d0c:	07da      	lsls	r2, r3, #31
 8021d0e:	d40b      	bmi.n	8021d28 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021d10:	4620      	mov	r0, r4
 8021d12:	f007 fccd 	bl	80296b0 <__cxa_guard_acquire>
 8021d16:	b138      	cbz	r0, 8021d28 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f007 fcd5 	bl	80296c8 <__cxa_guard_release>
 8021d1e:	4a0f      	ldr	r2, [pc, #60]	; (8021d5c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021d20:	490f      	ldr	r1, [pc, #60]	; (8021d60 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021d22:	4810      	ldr	r0, [pc, #64]	; (8021d64 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021d24:	f007 fcbd 	bl	80296a2 <__aeabi_atexit>
 8021d28:	4c0f      	ldr	r4, [pc, #60]	; (8021d68 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021d2a:	7823      	ldrb	r3, [r4, #0]
 8021d2c:	f3bf 8f5b 	dmb	ish
 8021d30:	07db      	lsls	r3, r3, #31
 8021d32:	d40b      	bmi.n	8021d4c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021d34:	4620      	mov	r0, r4
 8021d36:	f007 fcbb 	bl	80296b0 <__cxa_guard_acquire>
 8021d3a:	b138      	cbz	r0, 8021d4c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021d3c:	4620      	mov	r0, r4
 8021d3e:	f007 fcc3 	bl	80296c8 <__cxa_guard_release>
 8021d42:	4a06      	ldr	r2, [pc, #24]	; (8021d5c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021d44:	4909      	ldr	r1, [pc, #36]	; (8021d6c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021d46:	480a      	ldr	r0, [pc, #40]	; (8021d70 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021d48:	f007 fcab 	bl	80296a2 <__aeabi_atexit>
 8021d4c:	4b05      	ldr	r3, [pc, #20]	; (8021d64 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021d4e:	612b      	str	r3, [r5, #16]
 8021d50:	4b07      	ldr	r3, [pc, #28]	; (8021d70 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021d52:	616b      	str	r3, [r5, #20]
 8021d54:	bd38      	pop	{r3, r4, r5, pc}
 8021d56:	bf00      	nop
 8021d58:	2003c344 	.word	0x2003c344
 8021d5c:	20000000 	.word	0x20000000
 8021d60:	0802060b 	.word	0x0802060b
 8021d64:	2000008c 	.word	0x2000008c
 8021d68:	2003c348 	.word	0x2003c348
 8021d6c:	08020609 	.word	0x08020609
 8021d70:	20000090 	.word	0x20000090

08021d74 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021d74:	b538      	push	{r3, r4, r5, lr}
 8021d76:	4c15      	ldr	r4, [pc, #84]	; (8021dcc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021d78:	4605      	mov	r5, r0
 8021d7a:	7823      	ldrb	r3, [r4, #0]
 8021d7c:	f3bf 8f5b 	dmb	ish
 8021d80:	07da      	lsls	r2, r3, #31
 8021d82:	d40b      	bmi.n	8021d9c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021d84:	4620      	mov	r0, r4
 8021d86:	f007 fc93 	bl	80296b0 <__cxa_guard_acquire>
 8021d8a:	b138      	cbz	r0, 8021d9c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021d8c:	4620      	mov	r0, r4
 8021d8e:	f007 fc9b 	bl	80296c8 <__cxa_guard_release>
 8021d92:	4a0f      	ldr	r2, [pc, #60]	; (8021dd0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021d94:	490f      	ldr	r1, [pc, #60]	; (8021dd4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021d96:	4810      	ldr	r0, [pc, #64]	; (8021dd8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021d98:	f007 fc83 	bl	80296a2 <__aeabi_atexit>
 8021d9c:	4c0f      	ldr	r4, [pc, #60]	; (8021ddc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8021d9e:	7823      	ldrb	r3, [r4, #0]
 8021da0:	f3bf 8f5b 	dmb	ish
 8021da4:	07db      	lsls	r3, r3, #31
 8021da6:	d40b      	bmi.n	8021dc0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021da8:	4620      	mov	r0, r4
 8021daa:	f007 fc81 	bl	80296b0 <__cxa_guard_acquire>
 8021dae:	b138      	cbz	r0, 8021dc0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021db0:	4620      	mov	r0, r4
 8021db2:	f007 fc89 	bl	80296c8 <__cxa_guard_release>
 8021db6:	4a06      	ldr	r2, [pc, #24]	; (8021dd0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021db8:	4909      	ldr	r1, [pc, #36]	; (8021de0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021dba:	480a      	ldr	r0, [pc, #40]	; (8021de4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021dbc:	f007 fc71 	bl	80296a2 <__aeabi_atexit>
 8021dc0:	4b05      	ldr	r3, [pc, #20]	; (8021dd8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021dc2:	60ab      	str	r3, [r5, #8]
 8021dc4:	4b07      	ldr	r3, [pc, #28]	; (8021de4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021dc6:	60eb      	str	r3, [r5, #12]
 8021dc8:	bd38      	pop	{r3, r4, r5, pc}
 8021dca:	bf00      	nop
 8021dcc:	2003c31c 	.word	0x2003c31c
 8021dd0:	20000000 	.word	0x20000000
 8021dd4:	0802060f 	.word	0x0802060f
 8021dd8:	20000064 	.word	0x20000064
 8021ddc:	2003c320 	.word	0x2003c320
 8021de0:	0802060d 	.word	0x0802060d
 8021de4:	20000068 	.word	0x20000068

08021de8 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8021de8:	b510      	push	{r4, lr}
 8021dea:	4604      	mov	r4, r0
 8021dec:	f7ff ff88 	bl	8021d00 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021df0:	4620      	mov	r0, r4
 8021df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021df6:	f7ff bfbd 	b.w	8021d74 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021dfc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021dfc:	b538      	push	{r3, r4, r5, lr}
 8021dfe:	4c15      	ldr	r4, [pc, #84]	; (8021e54 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021e00:	4605      	mov	r5, r0
 8021e02:	7823      	ldrb	r3, [r4, #0]
 8021e04:	f3bf 8f5b 	dmb	ish
 8021e08:	07da      	lsls	r2, r3, #31
 8021e0a:	d40b      	bmi.n	8021e24 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021e0c:	4620      	mov	r0, r4
 8021e0e:	f007 fc4f 	bl	80296b0 <__cxa_guard_acquire>
 8021e12:	b138      	cbz	r0, 8021e24 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021e14:	4620      	mov	r0, r4
 8021e16:	f007 fc57 	bl	80296c8 <__cxa_guard_release>
 8021e1a:	4a0f      	ldr	r2, [pc, #60]	; (8021e58 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021e1c:	490f      	ldr	r1, [pc, #60]	; (8021e5c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021e1e:	4810      	ldr	r0, [pc, #64]	; (8021e60 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021e20:	f007 fc3f 	bl	80296a2 <__aeabi_atexit>
 8021e24:	4c0f      	ldr	r4, [pc, #60]	; (8021e64 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021e26:	7823      	ldrb	r3, [r4, #0]
 8021e28:	f3bf 8f5b 	dmb	ish
 8021e2c:	07db      	lsls	r3, r3, #31
 8021e2e:	d40b      	bmi.n	8021e48 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021e30:	4620      	mov	r0, r4
 8021e32:	f007 fc3d 	bl	80296b0 <__cxa_guard_acquire>
 8021e36:	b138      	cbz	r0, 8021e48 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021e38:	4620      	mov	r0, r4
 8021e3a:	f007 fc45 	bl	80296c8 <__cxa_guard_release>
 8021e3e:	4a06      	ldr	r2, [pc, #24]	; (8021e58 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021e40:	4909      	ldr	r1, [pc, #36]	; (8021e68 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021e42:	480a      	ldr	r0, [pc, #40]	; (8021e6c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021e44:	f007 fc2d 	bl	80296a2 <__aeabi_atexit>
 8021e48:	4b05      	ldr	r3, [pc, #20]	; (8021e60 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021e4a:	622b      	str	r3, [r5, #32]
 8021e4c:	4b07      	ldr	r3, [pc, #28]	; (8021e6c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021e4e:	626b      	str	r3, [r5, #36]	; 0x24
 8021e50:	bd38      	pop	{r3, r4, r5, pc}
 8021e52:	bf00      	nop
 8021e54:	2003c34c 	.word	0x2003c34c
 8021e58:	20000000 	.word	0x20000000
 8021e5c:	08020603 	.word	0x08020603
 8021e60:	20000094 	.word	0x20000094
 8021e64:	2003c350 	.word	0x2003c350
 8021e68:	08020601 	.word	0x08020601
 8021e6c:	20000098 	.word	0x20000098

08021e70 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021e70:	b538      	push	{r3, r4, r5, lr}
 8021e72:	4c15      	ldr	r4, [pc, #84]	; (8021ec8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021e74:	4605      	mov	r5, r0
 8021e76:	7823      	ldrb	r3, [r4, #0]
 8021e78:	f3bf 8f5b 	dmb	ish
 8021e7c:	07da      	lsls	r2, r3, #31
 8021e7e:	d40b      	bmi.n	8021e98 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021e80:	4620      	mov	r0, r4
 8021e82:	f007 fc15 	bl	80296b0 <__cxa_guard_acquire>
 8021e86:	b138      	cbz	r0, 8021e98 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f007 fc1d 	bl	80296c8 <__cxa_guard_release>
 8021e8e:	4a0f      	ldr	r2, [pc, #60]	; (8021ecc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021e90:	490f      	ldr	r1, [pc, #60]	; (8021ed0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021e92:	4810      	ldr	r0, [pc, #64]	; (8021ed4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021e94:	f007 fc05 	bl	80296a2 <__aeabi_atexit>
 8021e98:	4c0f      	ldr	r4, [pc, #60]	; (8021ed8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021e9a:	7823      	ldrb	r3, [r4, #0]
 8021e9c:	f3bf 8f5b 	dmb	ish
 8021ea0:	07db      	lsls	r3, r3, #31
 8021ea2:	d40b      	bmi.n	8021ebc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021ea4:	4620      	mov	r0, r4
 8021ea6:	f007 fc03 	bl	80296b0 <__cxa_guard_acquire>
 8021eaa:	b138      	cbz	r0, 8021ebc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021eac:	4620      	mov	r0, r4
 8021eae:	f007 fc0b 	bl	80296c8 <__cxa_guard_release>
 8021eb2:	4a06      	ldr	r2, [pc, #24]	; (8021ecc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021eb4:	4909      	ldr	r1, [pc, #36]	; (8021edc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021eb6:	480a      	ldr	r0, [pc, #40]	; (8021ee0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021eb8:	f007 fbf3 	bl	80296a2 <__aeabi_atexit>
 8021ebc:	4b05      	ldr	r3, [pc, #20]	; (8021ed4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021ebe:	61ab      	str	r3, [r5, #24]
 8021ec0:	4b07      	ldr	r3, [pc, #28]	; (8021ee0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021ec2:	61eb      	str	r3, [r5, #28]
 8021ec4:	bd38      	pop	{r3, r4, r5, pc}
 8021ec6:	bf00      	nop
 8021ec8:	2003c324 	.word	0x2003c324
 8021ecc:	20000000 	.word	0x20000000
 8021ed0:	08020607 	.word	0x08020607
 8021ed4:	2000006c 	.word	0x2000006c
 8021ed8:	2003c328 	.word	0x2003c328
 8021edc:	08020605 	.word	0x08020605
 8021ee0:	20000070 	.word	0x20000070

08021ee4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8021ee4:	b510      	push	{r4, lr}
 8021ee6:	4604      	mov	r4, r0
 8021ee8:	f7ff ff88 	bl	8021dfc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021eec:	4620      	mov	r0, r4
 8021eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ef2:	f7ff bfbd 	b.w	8021e70 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021ef8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021ef8:	b538      	push	{r3, r4, r5, lr}
 8021efa:	4c0b      	ldr	r4, [pc, #44]	; (8021f28 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 8021efc:	4605      	mov	r5, r0
 8021efe:	7823      	ldrb	r3, [r4, #0]
 8021f00:	f3bf 8f5b 	dmb	ish
 8021f04:	07db      	lsls	r3, r3, #31
 8021f06:	d40b      	bmi.n	8021f20 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021f08:	4620      	mov	r0, r4
 8021f0a:	f007 fbd1 	bl	80296b0 <__cxa_guard_acquire>
 8021f0e:	b138      	cbz	r0, 8021f20 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021f10:	4620      	mov	r0, r4
 8021f12:	f007 fbd9 	bl	80296c8 <__cxa_guard_release>
 8021f16:	4a05      	ldr	r2, [pc, #20]	; (8021f2c <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8021f18:	4905      	ldr	r1, [pc, #20]	; (8021f30 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 8021f1a:	4806      	ldr	r0, [pc, #24]	; (8021f34 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8021f1c:	f007 fbc1 	bl	80296a2 <__aeabi_atexit>
 8021f20:	4b04      	ldr	r3, [pc, #16]	; (8021f34 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8021f22:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021f24:	bd38      	pop	{r3, r4, r5, pc}
 8021f26:	bf00      	nop
 8021f28:	2003c35c 	.word	0x2003c35c
 8021f2c:	20000000 	.word	0x20000000
 8021f30:	080205fd 	.word	0x080205fd
 8021f34:	200000a4 	.word	0x200000a4

08021f38 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021f38:	b538      	push	{r3, r4, r5, lr}
 8021f3a:	4c0b      	ldr	r4, [pc, #44]	; (8021f68 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 8021f3c:	4605      	mov	r5, r0
 8021f3e:	7823      	ldrb	r3, [r4, #0]
 8021f40:	f3bf 8f5b 	dmb	ish
 8021f44:	07db      	lsls	r3, r3, #31
 8021f46:	d40b      	bmi.n	8021f60 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021f48:	4620      	mov	r0, r4
 8021f4a:	f007 fbb1 	bl	80296b0 <__cxa_guard_acquire>
 8021f4e:	b138      	cbz	r0, 8021f60 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021f50:	4620      	mov	r0, r4
 8021f52:	f007 fbb9 	bl	80296c8 <__cxa_guard_release>
 8021f56:	4a05      	ldr	r2, [pc, #20]	; (8021f6c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8021f58:	4905      	ldr	r1, [pc, #20]	; (8021f70 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 8021f5a:	4806      	ldr	r0, [pc, #24]	; (8021f74 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8021f5c:	f007 fba1 	bl	80296a2 <__aeabi_atexit>
 8021f60:	4b04      	ldr	r3, [pc, #16]	; (8021f74 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8021f62:	62ab      	str	r3, [r5, #40]	; 0x28
 8021f64:	bd38      	pop	{r3, r4, r5, pc}
 8021f66:	bf00      	nop
 8021f68:	2003c32c 	.word	0x2003c32c
 8021f6c:	20000000 	.word	0x20000000
 8021f70:	080205ff 	.word	0x080205ff
 8021f74:	20000074 	.word	0x20000074

08021f78 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021f78:	b510      	push	{r4, lr}
 8021f7a:	4604      	mov	r4, r0
 8021f7c:	f7ff ffbc 	bl	8021ef8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021f80:	4620      	mov	r0, r4
 8021f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f86:	f7ff bfd7 	b.w	8021f38 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021f8c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021f8c:	b538      	push	{r3, r4, r5, lr}
 8021f8e:	4c15      	ldr	r4, [pc, #84]	; (8021fe4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021f90:	4605      	mov	r5, r0
 8021f92:	7823      	ldrb	r3, [r4, #0]
 8021f94:	f3bf 8f5b 	dmb	ish
 8021f98:	07da      	lsls	r2, r3, #31
 8021f9a:	d40b      	bmi.n	8021fb4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021f9c:	4620      	mov	r0, r4
 8021f9e:	f007 fb87 	bl	80296b0 <__cxa_guard_acquire>
 8021fa2:	b138      	cbz	r0, 8021fb4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021fa4:	4620      	mov	r0, r4
 8021fa6:	f007 fb8f 	bl	80296c8 <__cxa_guard_release>
 8021faa:	4a0f      	ldr	r2, [pc, #60]	; (8021fe8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021fac:	490f      	ldr	r1, [pc, #60]	; (8021fec <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021fae:	4810      	ldr	r0, [pc, #64]	; (8021ff0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021fb0:	f007 fb77 	bl	80296a2 <__aeabi_atexit>
 8021fb4:	4c0f      	ldr	r4, [pc, #60]	; (8021ff4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021fb6:	7823      	ldrb	r3, [r4, #0]
 8021fb8:	f3bf 8f5b 	dmb	ish
 8021fbc:	07db      	lsls	r3, r3, #31
 8021fbe:	d40b      	bmi.n	8021fd8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021fc0:	4620      	mov	r0, r4
 8021fc2:	f007 fb75 	bl	80296b0 <__cxa_guard_acquire>
 8021fc6:	b138      	cbz	r0, 8021fd8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021fc8:	4620      	mov	r0, r4
 8021fca:	f007 fb7d 	bl	80296c8 <__cxa_guard_release>
 8021fce:	4a06      	ldr	r2, [pc, #24]	; (8021fe8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021fd0:	4909      	ldr	r1, [pc, #36]	; (8021ff8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021fd2:	480a      	ldr	r0, [pc, #40]	; (8021ffc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021fd4:	f007 fb65 	bl	80296a2 <__aeabi_atexit>
 8021fd8:	4b05      	ldr	r3, [pc, #20]	; (8021ff0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021fda:	64ab      	str	r3, [r5, #72]	; 0x48
 8021fdc:	4b07      	ldr	r3, [pc, #28]	; (8021ffc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021fde:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021fe0:	bd38      	pop	{r3, r4, r5, pc}
 8021fe2:	bf00      	nop
 8021fe4:	2003c360 	.word	0x2003c360
 8021fe8:	20000000 	.word	0x20000000
 8021fec:	080205ef 	.word	0x080205ef
 8021ff0:	200000a8 	.word	0x200000a8
 8021ff4:	2003c364 	.word	0x2003c364
 8021ff8:	080205ed 	.word	0x080205ed
 8021ffc:	200000ac 	.word	0x200000ac

08022000 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022000:	b538      	push	{r3, r4, r5, lr}
 8022002:	4c15      	ldr	r4, [pc, #84]	; (8022058 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022004:	4605      	mov	r5, r0
 8022006:	7823      	ldrb	r3, [r4, #0]
 8022008:	f3bf 8f5b 	dmb	ish
 802200c:	07da      	lsls	r2, r3, #31
 802200e:	d40b      	bmi.n	8022028 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022010:	4620      	mov	r0, r4
 8022012:	f007 fb4d 	bl	80296b0 <__cxa_guard_acquire>
 8022016:	b138      	cbz	r0, 8022028 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022018:	4620      	mov	r0, r4
 802201a:	f007 fb55 	bl	80296c8 <__cxa_guard_release>
 802201e:	4a0f      	ldr	r2, [pc, #60]	; (802205c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022020:	490f      	ldr	r1, [pc, #60]	; (8022060 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022022:	4810      	ldr	r0, [pc, #64]	; (8022064 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022024:	f007 fb3d 	bl	80296a2 <__aeabi_atexit>
 8022028:	4c0f      	ldr	r4, [pc, #60]	; (8022068 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802202a:	7823      	ldrb	r3, [r4, #0]
 802202c:	f3bf 8f5b 	dmb	ish
 8022030:	07db      	lsls	r3, r3, #31
 8022032:	d40b      	bmi.n	802204c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022034:	4620      	mov	r0, r4
 8022036:	f007 fb3b 	bl	80296b0 <__cxa_guard_acquire>
 802203a:	b138      	cbz	r0, 802204c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802203c:	4620      	mov	r0, r4
 802203e:	f007 fb43 	bl	80296c8 <__cxa_guard_release>
 8022042:	4a06      	ldr	r2, [pc, #24]	; (802205c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022044:	4909      	ldr	r1, [pc, #36]	; (802206c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022046:	480a      	ldr	r0, [pc, #40]	; (8022070 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022048:	f007 fb2b 	bl	80296a2 <__aeabi_atexit>
 802204c:	4b05      	ldr	r3, [pc, #20]	; (8022064 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802204e:	642b      	str	r3, [r5, #64]	; 0x40
 8022050:	4b07      	ldr	r3, [pc, #28]	; (8022070 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022052:	646b      	str	r3, [r5, #68]	; 0x44
 8022054:	bd38      	pop	{r3, r4, r5, pc}
 8022056:	bf00      	nop
 8022058:	2003c368 	.word	0x2003c368
 802205c:	20000000 	.word	0x20000000
 8022060:	080205f7 	.word	0x080205f7
 8022064:	200000b0 	.word	0x200000b0
 8022068:	2003c36c 	.word	0x2003c36c
 802206c:	080205f5 	.word	0x080205f5
 8022070:	200000b4 	.word	0x200000b4

08022074 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022074:	b538      	push	{r3, r4, r5, lr}
 8022076:	4c15      	ldr	r4, [pc, #84]	; (80220cc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022078:	4605      	mov	r5, r0
 802207a:	7823      	ldrb	r3, [r4, #0]
 802207c:	f3bf 8f5b 	dmb	ish
 8022080:	07da      	lsls	r2, r3, #31
 8022082:	d40b      	bmi.n	802209c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022084:	4620      	mov	r0, r4
 8022086:	f007 fb13 	bl	80296b0 <__cxa_guard_acquire>
 802208a:	b138      	cbz	r0, 802209c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802208c:	4620      	mov	r0, r4
 802208e:	f007 fb1b 	bl	80296c8 <__cxa_guard_release>
 8022092:	4a0f      	ldr	r2, [pc, #60]	; (80220d0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022094:	490f      	ldr	r1, [pc, #60]	; (80220d4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022096:	4810      	ldr	r0, [pc, #64]	; (80220d8 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022098:	f007 fb03 	bl	80296a2 <__aeabi_atexit>
 802209c:	4c0f      	ldr	r4, [pc, #60]	; (80220dc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802209e:	7823      	ldrb	r3, [r4, #0]
 80220a0:	f3bf 8f5b 	dmb	ish
 80220a4:	07db      	lsls	r3, r3, #31
 80220a6:	d40b      	bmi.n	80220c0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80220a8:	4620      	mov	r0, r4
 80220aa:	f007 fb01 	bl	80296b0 <__cxa_guard_acquire>
 80220ae:	b138      	cbz	r0, 80220c0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80220b0:	4620      	mov	r0, r4
 80220b2:	f007 fb09 	bl	80296c8 <__cxa_guard_release>
 80220b6:	4a06      	ldr	r2, [pc, #24]	; (80220d0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80220b8:	4909      	ldr	r1, [pc, #36]	; (80220e0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80220ba:	480a      	ldr	r0, [pc, #40]	; (80220e4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80220bc:	f007 faf1 	bl	80296a2 <__aeabi_atexit>
 80220c0:	4b05      	ldr	r3, [pc, #20]	; (80220d8 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80220c2:	63ab      	str	r3, [r5, #56]	; 0x38
 80220c4:	4b07      	ldr	r3, [pc, #28]	; (80220e4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80220c6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80220c8:	bd38      	pop	{r3, r4, r5, pc}
 80220ca:	bf00      	nop
 80220cc:	2003c338 	.word	0x2003c338
 80220d0:	20000000 	.word	0x20000000
 80220d4:	080205f3 	.word	0x080205f3
 80220d8:	20000080 	.word	0x20000080
 80220dc:	2003c33c 	.word	0x2003c33c
 80220e0:	080205f1 	.word	0x080205f1
 80220e4:	20000084 	.word	0x20000084

080220e8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80220e8:	b538      	push	{r3, r4, r5, lr}
 80220ea:	4c15      	ldr	r4, [pc, #84]	; (8022140 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80220ec:	4605      	mov	r5, r0
 80220ee:	7823      	ldrb	r3, [r4, #0]
 80220f0:	f3bf 8f5b 	dmb	ish
 80220f4:	07da      	lsls	r2, r3, #31
 80220f6:	d40b      	bmi.n	8022110 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80220f8:	4620      	mov	r0, r4
 80220fa:	f007 fad9 	bl	80296b0 <__cxa_guard_acquire>
 80220fe:	b138      	cbz	r0, 8022110 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022100:	4620      	mov	r0, r4
 8022102:	f007 fae1 	bl	80296c8 <__cxa_guard_release>
 8022106:	4a0f      	ldr	r2, [pc, #60]	; (8022144 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022108:	490f      	ldr	r1, [pc, #60]	; (8022148 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802210a:	4810      	ldr	r0, [pc, #64]	; (802214c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802210c:	f007 fac9 	bl	80296a2 <__aeabi_atexit>
 8022110:	4c0f      	ldr	r4, [pc, #60]	; (8022150 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022112:	7823      	ldrb	r3, [r4, #0]
 8022114:	f3bf 8f5b 	dmb	ish
 8022118:	07db      	lsls	r3, r3, #31
 802211a:	d40b      	bmi.n	8022134 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802211c:	4620      	mov	r0, r4
 802211e:	f007 fac7 	bl	80296b0 <__cxa_guard_acquire>
 8022122:	b138      	cbz	r0, 8022134 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022124:	4620      	mov	r0, r4
 8022126:	f007 facf 	bl	80296c8 <__cxa_guard_release>
 802212a:	4a06      	ldr	r2, [pc, #24]	; (8022144 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802212c:	4909      	ldr	r1, [pc, #36]	; (8022154 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802212e:	480a      	ldr	r0, [pc, #40]	; (8022158 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022130:	f007 fab7 	bl	80296a2 <__aeabi_atexit>
 8022134:	4b05      	ldr	r3, [pc, #20]	; (802214c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022136:	632b      	str	r3, [r5, #48]	; 0x30
 8022138:	4b07      	ldr	r3, [pc, #28]	; (8022158 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802213a:	636b      	str	r3, [r5, #52]	; 0x34
 802213c:	bd38      	pop	{r3, r4, r5, pc}
 802213e:	bf00      	nop
 8022140:	2003c354 	.word	0x2003c354
 8022144:	20000000 	.word	0x20000000
 8022148:	080205fb 	.word	0x080205fb
 802214c:	2000009c 	.word	0x2000009c
 8022150:	2003c358 	.word	0x2003c358
 8022154:	080205f9 	.word	0x080205f9
 8022158:	200000a0 	.word	0x200000a0

0802215c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 802215c:	b510      	push	{r4, lr}
 802215e:	4604      	mov	r4, r0
 8022160:	f7ff ff14 	bl	8021f8c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022164:	4620      	mov	r0, r4
 8022166:	f7ff ff85 	bl	8022074 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802216a:	4620      	mov	r0, r4
 802216c:	f7ff ff48 	bl	8022000 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022170:	4620      	mov	r0, r4
 8022172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022176:	f7ff bfb7 	b.w	80220e8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0802217c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802217c:	b538      	push	{r3, r4, r5, lr}
 802217e:	4c15      	ldr	r4, [pc, #84]	; (80221d4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8022180:	4605      	mov	r5, r0
 8022182:	7823      	ldrb	r3, [r4, #0]
 8022184:	f3bf 8f5b 	dmb	ish
 8022188:	07da      	lsls	r2, r3, #31
 802218a:	d40b      	bmi.n	80221a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802218c:	4620      	mov	r0, r4
 802218e:	f007 fa8f 	bl	80296b0 <__cxa_guard_acquire>
 8022192:	b138      	cbz	r0, 80221a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022194:	4620      	mov	r0, r4
 8022196:	f007 fa97 	bl	80296c8 <__cxa_guard_release>
 802219a:	4a0f      	ldr	r2, [pc, #60]	; (80221d8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802219c:	490f      	ldr	r1, [pc, #60]	; (80221dc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802219e:	4810      	ldr	r0, [pc, #64]	; (80221e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80221a0:	f007 fa7f 	bl	80296a2 <__aeabi_atexit>
 80221a4:	4c0f      	ldr	r4, [pc, #60]	; (80221e4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80221a6:	7823      	ldrb	r3, [r4, #0]
 80221a8:	f3bf 8f5b 	dmb	ish
 80221ac:	07db      	lsls	r3, r3, #31
 80221ae:	d40b      	bmi.n	80221c8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80221b0:	4620      	mov	r0, r4
 80221b2:	f007 fa7d 	bl	80296b0 <__cxa_guard_acquire>
 80221b6:	b138      	cbz	r0, 80221c8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80221b8:	4620      	mov	r0, r4
 80221ba:	f007 fa85 	bl	80296c8 <__cxa_guard_release>
 80221be:	4a06      	ldr	r2, [pc, #24]	; (80221d8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80221c0:	4909      	ldr	r1, [pc, #36]	; (80221e8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80221c2:	480a      	ldr	r0, [pc, #40]	; (80221ec <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80221c4:	f007 fa6d 	bl	80296a2 <__aeabi_atexit>
 80221c8:	4b05      	ldr	r3, [pc, #20]	; (80221e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80221ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80221cc:	4b07      	ldr	r3, [pc, #28]	; (80221ec <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80221ce:	65eb      	str	r3, [r5, #92]	; 0x5c
 80221d0:	bd38      	pop	{r3, r4, r5, pc}
 80221d2:	bf00      	nop
 80221d4:	2003c330 	.word	0x2003c330
 80221d8:	20000000 	.word	0x20000000
 80221dc:	080205e7 	.word	0x080205e7
 80221e0:	20000078 	.word	0x20000078
 80221e4:	2003c334 	.word	0x2003c334
 80221e8:	080205e5 	.word	0x080205e5
 80221ec:	2000007c 	.word	0x2000007c

080221f0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80221f0:	b538      	push	{r3, r4, r5, lr}
 80221f2:	4c15      	ldr	r4, [pc, #84]	; (8022248 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80221f4:	4605      	mov	r5, r0
 80221f6:	7823      	ldrb	r3, [r4, #0]
 80221f8:	f3bf 8f5b 	dmb	ish
 80221fc:	07da      	lsls	r2, r3, #31
 80221fe:	d40b      	bmi.n	8022218 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022200:	4620      	mov	r0, r4
 8022202:	f007 fa55 	bl	80296b0 <__cxa_guard_acquire>
 8022206:	b138      	cbz	r0, 8022218 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022208:	4620      	mov	r0, r4
 802220a:	f007 fa5d 	bl	80296c8 <__cxa_guard_release>
 802220e:	4a0f      	ldr	r2, [pc, #60]	; (802224c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022210:	490f      	ldr	r1, [pc, #60]	; (8022250 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022212:	4810      	ldr	r0, [pc, #64]	; (8022254 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022214:	f007 fa45 	bl	80296a2 <__aeabi_atexit>
 8022218:	4c0f      	ldr	r4, [pc, #60]	; (8022258 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802221a:	7823      	ldrb	r3, [r4, #0]
 802221c:	f3bf 8f5b 	dmb	ish
 8022220:	07db      	lsls	r3, r3, #31
 8022222:	d40b      	bmi.n	802223c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022224:	4620      	mov	r0, r4
 8022226:	f007 fa43 	bl	80296b0 <__cxa_guard_acquire>
 802222a:	b138      	cbz	r0, 802223c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802222c:	4620      	mov	r0, r4
 802222e:	f007 fa4b 	bl	80296c8 <__cxa_guard_release>
 8022232:	4a06      	ldr	r2, [pc, #24]	; (802224c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022234:	4909      	ldr	r1, [pc, #36]	; (802225c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022236:	480a      	ldr	r0, [pc, #40]	; (8022260 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022238:	f007 fa33 	bl	80296a2 <__aeabi_atexit>
 802223c:	4b05      	ldr	r3, [pc, #20]	; (8022254 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802223e:	652b      	str	r3, [r5, #80]	; 0x50
 8022240:	4b07      	ldr	r3, [pc, #28]	; (8022260 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022242:	656b      	str	r3, [r5, #84]	; 0x54
 8022244:	bd38      	pop	{r3, r4, r5, pc}
 8022246:	bf00      	nop
 8022248:	2003c308 	.word	0x2003c308
 802224c:	20000000 	.word	0x20000000
 8022250:	080205eb 	.word	0x080205eb
 8022254:	20000050 	.word	0x20000050
 8022258:	2003c30c 	.word	0x2003c30c
 802225c:	080205e9 	.word	0x080205e9
 8022260:	20000054 	.word	0x20000054

08022264 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 8022264:	b510      	push	{r4, lr}
 8022266:	4604      	mov	r4, r0
 8022268:	f7ff ff88 	bl	802217c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 802226c:	4620      	mov	r0, r4
 802226e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022272:	f7ff bfbd 	b.w	80221f0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08022278 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022278:	b538      	push	{r3, r4, r5, lr}
 802227a:	4c0b      	ldr	r4, [pc, #44]	; (80222a8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 802227c:	4605      	mov	r5, r0
 802227e:	7823      	ldrb	r3, [r4, #0]
 8022280:	f3bf 8f5b 	dmb	ish
 8022284:	07db      	lsls	r3, r3, #31
 8022286:	d40b      	bmi.n	80222a0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022288:	4620      	mov	r0, r4
 802228a:	f007 fa11 	bl	80296b0 <__cxa_guard_acquire>
 802228e:	b138      	cbz	r0, 80222a0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022290:	4620      	mov	r0, r4
 8022292:	f007 fa19 	bl	80296c8 <__cxa_guard_release>
 8022296:	4a05      	ldr	r2, [pc, #20]	; (80222ac <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8022298:	4905      	ldr	r1, [pc, #20]	; (80222b0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 802229a:	4806      	ldr	r0, [pc, #24]	; (80222b4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802229c:	f007 fa01 	bl	80296a2 <__aeabi_atexit>
 80222a0:	4b04      	ldr	r3, [pc, #16]	; (80222b4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80222a2:	666b      	str	r3, [r5, #100]	; 0x64
 80222a4:	bd38      	pop	{r3, r4, r5, pc}
 80222a6:	bf00      	nop
 80222a8:	2003c340 	.word	0x2003c340
 80222ac:	20000000 	.word	0x20000000
 80222b0:	080205e1 	.word	0x080205e1
 80222b4:	20000088 	.word	0x20000088

080222b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80222b8:	b538      	push	{r3, r4, r5, lr}
 80222ba:	4c0b      	ldr	r4, [pc, #44]	; (80222e8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 80222bc:	4605      	mov	r5, r0
 80222be:	7823      	ldrb	r3, [r4, #0]
 80222c0:	f3bf 8f5b 	dmb	ish
 80222c4:	07db      	lsls	r3, r3, #31
 80222c6:	d40b      	bmi.n	80222e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80222c8:	4620      	mov	r0, r4
 80222ca:	f007 f9f1 	bl	80296b0 <__cxa_guard_acquire>
 80222ce:	b138      	cbz	r0, 80222e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80222d0:	4620      	mov	r0, r4
 80222d2:	f007 f9f9 	bl	80296c8 <__cxa_guard_release>
 80222d6:	4a05      	ldr	r2, [pc, #20]	; (80222ec <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 80222d8:	4905      	ldr	r1, [pc, #20]	; (80222f0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 80222da:	4806      	ldr	r0, [pc, #24]	; (80222f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80222dc:	f007 f9e1 	bl	80296a2 <__aeabi_atexit>
 80222e0:	4b04      	ldr	r3, [pc, #16]	; (80222f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80222e2:	662b      	str	r3, [r5, #96]	; 0x60
 80222e4:	bd38      	pop	{r3, r4, r5, pc}
 80222e6:	bf00      	nop
 80222e8:	2003c318 	.word	0x2003c318
 80222ec:	20000000 	.word	0x20000000
 80222f0:	080205e3 	.word	0x080205e3
 80222f4:	20000060 	.word	0x20000060

080222f8 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 80222f8:	b510      	push	{r4, lr}
 80222fa:	4604      	mov	r4, r0
 80222fc:	f7ff ffbc 	bl	8022278 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022300:	4620      	mov	r0, r4
 8022302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022306:	f7ff bfd7 	b.w	80222b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802230c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802230c:	b538      	push	{r3, r4, r5, lr}
 802230e:	4c15      	ldr	r4, [pc, #84]	; (8022364 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022310:	4605      	mov	r5, r0
 8022312:	7823      	ldrb	r3, [r4, #0]
 8022314:	f3bf 8f5b 	dmb	ish
 8022318:	07da      	lsls	r2, r3, #31
 802231a:	d40b      	bmi.n	8022334 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802231c:	4620      	mov	r0, r4
 802231e:	f007 f9c7 	bl	80296b0 <__cxa_guard_acquire>
 8022322:	b138      	cbz	r0, 8022334 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022324:	4620      	mov	r0, r4
 8022326:	f007 f9cf 	bl	80296c8 <__cxa_guard_release>
 802232a:	4a0f      	ldr	r2, [pc, #60]	; (8022368 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802232c:	490f      	ldr	r1, [pc, #60]	; (802236c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802232e:	4810      	ldr	r0, [pc, #64]	; (8022370 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022330:	f007 f9b7 	bl	80296a2 <__aeabi_atexit>
 8022334:	4c0f      	ldr	r4, [pc, #60]	; (8022374 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022336:	7823      	ldrb	r3, [r4, #0]
 8022338:	f3bf 8f5b 	dmb	ish
 802233c:	07db      	lsls	r3, r3, #31
 802233e:	d40b      	bmi.n	8022358 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022340:	4620      	mov	r0, r4
 8022342:	f007 f9b5 	bl	80296b0 <__cxa_guard_acquire>
 8022346:	b138      	cbz	r0, 8022358 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022348:	4620      	mov	r0, r4
 802234a:	f007 f9bd 	bl	80296c8 <__cxa_guard_release>
 802234e:	4a06      	ldr	r2, [pc, #24]	; (8022368 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022350:	4909      	ldr	r1, [pc, #36]	; (8022378 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022352:	480a      	ldr	r0, [pc, #40]	; (802237c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022354:	f007 f9a5 	bl	80296a2 <__aeabi_atexit>
 8022358:	4b05      	ldr	r3, [pc, #20]	; (8022370 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802235a:	672b      	str	r3, [r5, #112]	; 0x70
 802235c:	4b07      	ldr	r3, [pc, #28]	; (802237c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802235e:	676b      	str	r3, [r5, #116]	; 0x74
 8022360:	bd38      	pop	{r3, r4, r5, pc}
 8022362:	bf00      	nop
 8022364:	2003c310 	.word	0x2003c310
 8022368:	20000000 	.word	0x20000000
 802236c:	080205db 	.word	0x080205db
 8022370:	20000058 	.word	0x20000058
 8022374:	2003c314 	.word	0x2003c314
 8022378:	080205d9 	.word	0x080205d9
 802237c:	2000005c 	.word	0x2000005c

08022380 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022380:	b538      	push	{r3, r4, r5, lr}
 8022382:	4c15      	ldr	r4, [pc, #84]	; (80223d8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022384:	4605      	mov	r5, r0
 8022386:	7823      	ldrb	r3, [r4, #0]
 8022388:	f3bf 8f5b 	dmb	ish
 802238c:	07da      	lsls	r2, r3, #31
 802238e:	d40b      	bmi.n	80223a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022390:	4620      	mov	r0, r4
 8022392:	f007 f98d 	bl	80296b0 <__cxa_guard_acquire>
 8022396:	b138      	cbz	r0, 80223a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022398:	4620      	mov	r0, r4
 802239a:	f007 f995 	bl	80296c8 <__cxa_guard_release>
 802239e:	4a0f      	ldr	r2, [pc, #60]	; (80223dc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80223a0:	490f      	ldr	r1, [pc, #60]	; (80223e0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80223a2:	4810      	ldr	r0, [pc, #64]	; (80223e4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80223a4:	f007 f97d 	bl	80296a2 <__aeabi_atexit>
 80223a8:	4c0f      	ldr	r4, [pc, #60]	; (80223e8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80223aa:	7823      	ldrb	r3, [r4, #0]
 80223ac:	f3bf 8f5b 	dmb	ish
 80223b0:	07db      	lsls	r3, r3, #31
 80223b2:	d40b      	bmi.n	80223cc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80223b4:	4620      	mov	r0, r4
 80223b6:	f007 f97b 	bl	80296b0 <__cxa_guard_acquire>
 80223ba:	b138      	cbz	r0, 80223cc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80223bc:	4620      	mov	r0, r4
 80223be:	f007 f983 	bl	80296c8 <__cxa_guard_release>
 80223c2:	4a06      	ldr	r2, [pc, #24]	; (80223dc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80223c4:	4909      	ldr	r1, [pc, #36]	; (80223ec <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80223c6:	480a      	ldr	r0, [pc, #40]	; (80223f0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223c8:	f007 f96b 	bl	80296a2 <__aeabi_atexit>
 80223cc:	4b05      	ldr	r3, [pc, #20]	; (80223e4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80223ce:	66ab      	str	r3, [r5, #104]	; 0x68
 80223d0:	4b07      	ldr	r3, [pc, #28]	; (80223f0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80223d2:	66eb      	str	r3, [r5, #108]	; 0x6c
 80223d4:	bd38      	pop	{r3, r4, r5, pc}
 80223d6:	bf00      	nop
 80223d8:	2003c300 	.word	0x2003c300
 80223dc:	20000000 	.word	0x20000000
 80223e0:	080205df 	.word	0x080205df
 80223e4:	20000048 	.word	0x20000048
 80223e8:	2003c304 	.word	0x2003c304
 80223ec:	080205dd 	.word	0x080205dd
 80223f0:	2000004c 	.word	0x2000004c

080223f4 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 80223f4:	b510      	push	{r4, lr}
 80223f6:	4604      	mov	r4, r0
 80223f8:	f7ff ff88 	bl	802230c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80223fc:	4620      	mov	r0, r4
 80223fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022402:	f7ff bfbd 	b.w	8022380 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

08022406 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 8022406:	b510      	push	{r4, lr}
 8022408:	4604      	mov	r4, r0
 802240a:	f7ff fff3 	bl	80223f4 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 802240e:	4620      	mov	r0, r4
 8022410:	f7ff ff72 	bl	80222f8 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 8022414:	4620      	mov	r0, r4
 8022416:	f7ff fdaf 	bl	8021f78 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 802241a:	4620      	mov	r0, r4
 802241c:	f7ff fce4 	bl	8021de8 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 8022420:	4620      	mov	r0, r4
 8022422:	f7ff fd5f 	bl	8021ee4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 8022426:	4620      	mov	r0, r4
 8022428:	f7ff fe98 	bl	802215c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 802242c:	4620      	mov	r0, r4
 802242e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022432:	f7ff bf17 	b.w	8022264 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>

08022436 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 8022436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802243a:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 802243e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022442:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022446:	f1b8 0f00 	cmp.w	r8, #0
 802244a:	fb08 640e 	mla	r4, r8, lr, r6
 802244e:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8022452:	9001      	str	r0, [sp, #4]
 8022454:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022458:	eb02 0a04 	add.w	sl, r2, r4
 802245c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022460:	6808      	ldr	r0, [r1, #0]
 8022462:	f2c0 80dc 	blt.w	802261e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8022466:	45c3      	cmp	fp, r8
 8022468:	f340 80d9 	ble.w	802261e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 802246c:	2e00      	cmp	r6, #0
 802246e:	f2c0 80d4 	blt.w	802261a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8022472:	45b6      	cmp	lr, r6
 8022474:	f340 80d1 	ble.w	802261a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8022478:	5d12      	ldrb	r2, [r2, r4]
 802247a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802247e:	ea4f 222c 	mov.w	r2, ip, asr #8
 8022482:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8022486:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802248a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802248e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022492:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8022496:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 802249a:	fa5f fc8c 	uxtb.w	ip, ip
 802249e:	0212      	lsls	r2, r2, #8
 80224a0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80224a4:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80224a8:	ea42 020c 	orr.w	r2, r2, ip
 80224ac:	1c74      	adds	r4, r6, #1
 80224ae:	f100 80b7 	bmi.w	8022620 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80224b2:	45a6      	cmp	lr, r4
 80224b4:	f340 80b4 	ble.w	8022620 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80224b8:	2d00      	cmp	r5, #0
 80224ba:	f000 80b1 	beq.w	8022620 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80224be:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80224c2:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 80224c6:	ea4f 04ec 	mov.w	r4, ip, asr #3
 80224ca:	ea4f 292c 	mov.w	r9, ip, asr #8
 80224ce:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80224d2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80224d6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80224da:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80224de:	fa5f fc8c 	uxtb.w	ip, ip
 80224e2:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 80224e6:	0224      	lsls	r4, r4, #8
 80224e8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80224ec:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80224f0:	ea49 090c 	orr.w	r9, r9, ip
 80224f4:	f118 0801 	adds.w	r8, r8, #1
 80224f8:	f100 8096 	bmi.w	8022628 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80224fc:	45c3      	cmp	fp, r8
 80224fe:	f340 8093 	ble.w	8022628 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8022502:	9c01      	ldr	r4, [sp, #4]
 8022504:	2c00      	cmp	r4, #0
 8022506:	f000 808f 	beq.w	8022628 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 802250a:	2e00      	cmp	r6, #0
 802250c:	f2c0 808a 	blt.w	8022624 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8022510:	45b6      	cmp	lr, r6
 8022512:	f340 8087 	ble.w	8022624 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8022516:	f81a 400e 	ldrb.w	r4, [sl, lr]
 802251a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 802251e:	ea4f 2824 	mov.w	r8, r4, asr #8
 8022522:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8022526:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 802252a:	00e4      	lsls	r4, r4, #3
 802252c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022530:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 8022534:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 8022538:	b2e4      	uxtb	r4, r4
 802253a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802253e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022542:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 8022546:	ea48 0804 	orr.w	r8, r8, r4
 802254a:	3601      	adds	r6, #1
 802254c:	d419      	bmi.n	8022582 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 802254e:	45b6      	cmp	lr, r6
 8022550:	dd17      	ble.n	8022582 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022552:	b1b5      	cbz	r5, 8022582 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022554:	44d6      	add	lr, sl
 8022556:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802255a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 802255e:	10dc      	asrs	r4, r3, #3
 8022560:	1218      	asrs	r0, r3, #8
 8022562:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022566:	00db      	lsls	r3, r3, #3
 8022568:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802256c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022570:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8022574:	b2db      	uxtb	r3, r3
 8022576:	0220      	lsls	r0, r4, #8
 8022578:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802257c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022580:	4318      	orrs	r0, r3
 8022582:	b2ad      	uxth	r5, r5
 8022584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8022588:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802258c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022590:	fb05 fa03 	mul.w	sl, r5, r3
 8022594:	012d      	lsls	r5, r5, #4
 8022596:	2fff      	cmp	r7, #255	; 0xff
 8022598:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 802259c:	f5c5 7b80 	rsb	fp, r5, #256	; 0x100
 80225a0:	eba5 050a 	sub.w	r5, r5, sl
 80225a4:	fa1f fe83 	uxth.w	lr, r3
 80225a8:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 80225ac:	b2ad      	uxth	r5, r5
 80225ae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80225b2:	ebab 0b0e 	sub.w	fp, fp, lr
 80225b6:	fb05 f303 	mul.w	r3, r5, r3
 80225ba:	fa1f fb8b 	uxth.w	fp, fp
 80225be:	fb05 f509 	mul.w	r5, r5, r9
 80225c2:	fb0b 3606 	mla	r6, fp, r6, r3
 80225c6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80225ca:	fb0b 5502 	mla	r5, fp, r2, r5
 80225ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80225d2:	fb0a 6603 	mla	r6, sl, r3, r6
 80225d6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 80225da:	fb0a 5000 	mla	r0, sl, r0, r5
 80225de:	fb0e 6303 	mla	r3, lr, r3, r6
 80225e2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80225e6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80225ea:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 80225ee:	fb0e 0303 	mla	r3, lr, r3, r0
 80225f2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80225f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225fa:	ea43 0306 	orr.w	r3, r3, r6
 80225fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022602:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8022606:	b2d4      	uxtb	r4, r2
 8022608:	b2c5      	uxtb	r5, r0
 802260a:	d10f      	bne.n	802262c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 802260c:	700b      	strb	r3, [r1, #0]
 802260e:	7048      	strb	r0, [r1, #1]
 8022610:	708a      	strb	r2, [r1, #2]
 8022612:	70cf      	strb	r7, [r1, #3]
 8022614:	b003      	add	sp, #12
 8022616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802261a:	4602      	mov	r2, r0
 802261c:	e746      	b.n	80224ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 802261e:	4602      	mov	r2, r0
 8022620:	4681      	mov	r9, r0
 8022622:	e767      	b.n	80224f4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 8022624:	4680      	mov	r8, r0
 8022626:	e790      	b.n	802254a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 8022628:	4680      	mov	r8, r0
 802262a:	e7aa      	b.n	8022582 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 802262c:	2f00      	cmp	r7, #0
 802262e:	d0f1      	beq.n	8022614 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 8022630:	78ce      	ldrb	r6, [r1, #3]
 8022632:	b2db      	uxtb	r3, r3
 8022634:	fb17 f505 	smulbb	r5, r7, r5
 8022638:	fb07 f206 	mul.w	r2, r7, r6
 802263c:	1c50      	adds	r0, r2, #1
 802263e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022642:	19ba      	adds	r2, r7, r6
 8022644:	1200      	asrs	r0, r0, #8
 8022646:	1a12      	subs	r2, r2, r0
 8022648:	1a30      	subs	r0, r6, r0
 802264a:	780e      	ldrb	r6, [r1, #0]
 802264c:	b2d2      	uxtb	r2, r2
 802264e:	4346      	muls	r6, r0
 8022650:	70ca      	strb	r2, [r1, #3]
 8022652:	fb07 6303 	mla	r3, r7, r3, r6
 8022656:	fb17 f704 	smulbb	r7, r7, r4
 802265a:	fb93 f3f2 	sdiv	r3, r3, r2
 802265e:	700b      	strb	r3, [r1, #0]
 8022660:	784b      	ldrb	r3, [r1, #1]
 8022662:	fb00 5303 	mla	r3, r0, r3, r5
 8022666:	fb93 f3f2 	sdiv	r3, r3, r2
 802266a:	704b      	strb	r3, [r1, #1]
 802266c:	788b      	ldrb	r3, [r1, #2]
 802266e:	fb00 7703 	mla	r7, r0, r3, r7
 8022672:	fb97 f7f2 	sdiv	r7, r7, r2
 8022676:	708f      	strb	r7, [r1, #2]
 8022678:	e7cc      	b.n	8022614 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

0802267a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802267a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802267e:	b097      	sub	sp, #92	; 0x5c
 8022680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022684:	9213      	str	r2, [sp, #76]	; 0x4c
 8022686:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022688:	9014      	str	r0, [sp, #80]	; 0x50
 802268a:	910c      	str	r1, [sp, #48]	; 0x30
 802268c:	6850      	ldr	r0, [r2, #4]
 802268e:	9309      	str	r3, [sp, #36]	; 0x24
 8022690:	6812      	ldr	r2, [r2, #0]
 8022692:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
 8022696:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802269a:	e9dd a621 	ldrd	sl, r6, [sp, #132]	; 0x84
 802269e:	fb00 1303 	mla	r3, r0, r3, r1
 80226a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80226a6:	930a      	str	r3, [sp, #40]	; 0x28
 80226a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80226ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226b0:	685f      	ldr	r7, [r3, #4]
 80226b2:	3704      	adds	r7, #4
 80226b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	dc03      	bgt.n	80226c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80226bc:	2b00      	cmp	r3, #0
 80226be:	f340 826a 	ble.w	8022b96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 80226c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80226cc:	1e48      	subs	r0, r1, #1
 80226ce:	f102 3cff 	add.w	ip, r2, #4294967295
 80226d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	f340 80ce 	ble.w	8022876 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80226da:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 80226de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226e2:	d406      	bmi.n	80226f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80226e4:	4586      	cmp	lr, r0
 80226e6:	da04      	bge.n	80226f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	db02      	blt.n	80226f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80226ec:	4563      	cmp	r3, ip
 80226ee:	f2c0 80c3 	blt.w	8022878 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80226f2:	f11e 0e01 	adds.w	lr, lr, #1
 80226f6:	f100 80b3 	bmi.w	8022860 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80226fa:	4571      	cmp	r1, lr
 80226fc:	f2c0 80b0 	blt.w	8022860 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022700:	3301      	adds	r3, #1
 8022702:	f100 80ad 	bmi.w	8022860 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022706:	429a      	cmp	r2, r3
 8022708:	f2c0 80aa 	blt.w	8022860 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802270c:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
 8022710:	f1bb 0f00 	cmp.w	fp, #0
 8022714:	f340 80ce 	ble.w	80228b4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8022718:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802271a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802271e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022720:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022724:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022728:	ea5f 422a 	movs.w	r2, sl, asr #16
 802272c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022730:	689b      	ldr	r3, [r3, #8]
 8022732:	f100 8141 	bmi.w	80229b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022736:	f103 39ff 	add.w	r9, r3, #4294967295
 802273a:	454a      	cmp	r2, r9
 802273c:	f280 813c 	bge.w	80229b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022740:	f1bc 0f00 	cmp.w	ip, #0
 8022744:	f2c0 8138 	blt.w	80229b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022748:	f10e 39ff 	add.w	r9, lr, #4294967295
 802274c:	45cc      	cmp	ip, r9
 802274e:	f280 8133 	bge.w	80229b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022752:	b21b      	sxth	r3, r3
 8022754:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022756:	fb0c 2203 	mla	r2, ip, r3, r2
 802275a:	eb05 0902 	add.w	r9, r5, r2
 802275e:	5caa      	ldrb	r2, [r5, r2]
 8022760:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022764:	2800      	cmp	r0, #0
 8022766:	f000 80e9 	beq.w	802293c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 802276a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802276e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022772:	920f      	str	r2, [sp, #60]	; 0x3c
 8022774:	b151      	cbz	r1, 802278c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022776:	eb09 0203 	add.w	r2, r9, r3
 802277a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802277e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022782:	930d      	str	r3, [sp, #52]	; 0x34
 8022784:	7853      	ldrb	r3, [r2, #1]
 8022786:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802278a:	9310      	str	r3, [sp, #64]	; 0x40
 802278c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802278e:	fb10 f201 	smulbb	r2, r0, r1
 8022792:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022794:	2cff      	cmp	r4, #255	; 0xff
 8022796:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802279a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802279e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80227a2:	ea4f 02e2 	mov.w	r2, r2, asr #3
 80227a6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80227aa:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80227ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80227b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80227b4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80227b8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227bc:	ea43 0305 	orr.w	r3, r3, r5
 80227c0:	fb02 f303 	mul.w	r3, r2, r3
 80227c4:	fb09 330c 	mla	r3, r9, ip, r3
 80227c8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80227cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80227d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80227d4:	ea4c 0e0e 	orr.w	lr, ip, lr
 80227d8:	f1c1 0c10 	rsb	ip, r1, #16
 80227dc:	ebac 0c00 	sub.w	ip, ip, r0
 80227e0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80227e4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80227e8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80227ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227ee:	ea4f 4003 	mov.w	r0, r3, lsl #16
 80227f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80227f6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80227fa:	ea40 0003 	orr.w	r0, r0, r3
 80227fe:	fb02 c200 	mla	r2, r2, r0, ip
 8022802:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8022806:	ea4f 1252 	mov.w	r2, r2, lsr #5
 802280a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802280e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022812:	ea42 0203 	orr.w	r2, r2, r3
 8022816:	b293      	uxth	r3, r2
 8022818:	ea4f 2223 	mov.w	r2, r3, asr #8
 802281c:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8022820:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8022824:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022828:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802282c:	b2db      	uxtb	r3, r3
 802282e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022832:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022836:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802283a:	f040 8088 	bne.w	802294e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802283e:	f888 3000 	strb.w	r3, [r8]
 8022842:	f888 1001 	strb.w	r1, [r8, #1]
 8022846:	f888 2002 	strb.w	r2, [r8, #2]
 802284a:	f888 4003 	strb.w	r4, [r8, #3]
 802284e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022850:	f108 0804 	add.w	r8, r8, #4
 8022854:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022858:	449a      	add	sl, r3
 802285a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802285c:	441e      	add	r6, r3
 802285e:	e757      	b.n	8022710 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022860:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022862:	449a      	add	sl, r3
 8022864:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022866:	441e      	add	r6, r3
 8022868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802286a:	3b01      	subs	r3, #1
 802286c:	9309      	str	r3, [sp, #36]	; 0x24
 802286e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022870:	3304      	adds	r3, #4
 8022872:	930a      	str	r3, [sp, #40]	; 0x28
 8022874:	e72d      	b.n	80226d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022876:	d024      	beq.n	80228c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802287a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802287c:	3b01      	subs	r3, #1
 802287e:	fb00 a003 	mla	r0, r0, r3, sl
 8022882:	1400      	asrs	r0, r0, #16
 8022884:	f53f af42 	bmi.w	802270c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022888:	3901      	subs	r1, #1
 802288a:	4288      	cmp	r0, r1
 802288c:	f6bf af3e 	bge.w	802270c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022890:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022892:	fb01 6303 	mla	r3, r1, r3, r6
 8022896:	141b      	asrs	r3, r3, #16
 8022898:	f53f af38 	bmi.w	802270c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802289c:	3a01      	subs	r2, #1
 802289e:	4293      	cmp	r3, r2
 80228a0:	f6bf af34 	bge.w	802270c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80228a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80228aa:	3304      	adds	r3, #4
 80228ac:	f1b9 0f00 	cmp.w	r9, #0
 80228b0:	f300 80a1 	bgt.w	80229f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80228b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80228ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80228c0:	930a      	str	r3, [sp, #40]	; 0x28
 80228c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	f340 8166 	ble.w	8022b96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 80228ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228d4:	eeb0 6a62 	vmov.f32	s12, s5
 80228d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80228dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80228e4:	ee16 aa10 	vmov	sl, s12
 80228e8:	eeb0 6a43 	vmov.f32	s12, s6
 80228ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80228f0:	ee16 6a10 	vmov	r6, s12
 80228f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022900:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022904:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022908:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802290c:	ee12 2a90 	vmov	r2, s5
 8022910:	eef0 2a47 	vmov.f32	s5, s14
 8022914:	fb92 f3f3 	sdiv	r3, r2, r3
 8022918:	ee13 2a10 	vmov	r2, s6
 802291c:	9323      	str	r3, [sp, #140]	; 0x8c
 802291e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022920:	eeb0 3a67 	vmov.f32	s6, s15
 8022924:	fb92 f3f3 	sdiv	r3, r2, r3
 8022928:	9324      	str	r3, [sp, #144]	; 0x90
 802292a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802292c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802292e:	3b01      	subs	r3, #1
 8022930:	930c      	str	r3, [sp, #48]	; 0x30
 8022932:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022934:	bf08      	it	eq
 8022936:	4613      	moveq	r3, r2
 8022938:	9309      	str	r3, [sp, #36]	; 0x24
 802293a:	e6bb      	b.n	80226b4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802293c:	2900      	cmp	r1, #0
 802293e:	f43f af25 	beq.w	802278c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022942:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022946:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802294a:	930d      	str	r3, [sp, #52]	; 0x34
 802294c:	e71e      	b.n	802278c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802294e:	2c00      	cmp	r4, #0
 8022950:	f43f af7d 	beq.w	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022954:	f898 e003 	ldrb.w	lr, [r8, #3]
 8022958:	fb13 f304 	smulbb	r3, r3, r4
 802295c:	fb14 f101 	smulbb	r1, r4, r1
 8022960:	fb14 f202 	smulbb	r2, r4, r2
 8022964:	fb04 fc0e 	mul.w	ip, r4, lr
 8022968:	f10c 0001 	add.w	r0, ip, #1
 802296c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8022970:	eb04 0c0e 	add.w	ip, r4, lr
 8022974:	1200      	asrs	r0, r0, #8
 8022976:	ebac 0c00 	sub.w	ip, ip, r0
 802297a:	ebae 0000 	sub.w	r0, lr, r0
 802297e:	f898 e000 	ldrb.w	lr, [r8]
 8022982:	fa5f fc8c 	uxtb.w	ip, ip
 8022986:	fb00 330e 	mla	r3, r0, lr, r3
 802298a:	f888 c003 	strb.w	ip, [r8, #3]
 802298e:	fb93 f3fc 	sdiv	r3, r3, ip
 8022992:	f888 3000 	strb.w	r3, [r8]
 8022996:	f898 3001 	ldrb.w	r3, [r8, #1]
 802299a:	fb00 1103 	mla	r1, r0, r3, r1
 802299e:	f898 3002 	ldrb.w	r3, [r8, #2]
 80229a2:	fb00 2003 	mla	r0, r0, r3, r2
 80229a6:	fb91 f1fc 	sdiv	r1, r1, ip
 80229aa:	fb90 f0fc 	sdiv	r0, r0, ip
 80229ae:	f888 1001 	strb.w	r1, [r8, #1]
 80229b2:	f888 0002 	strb.w	r0, [r8, #2]
 80229b6:	e74a      	b.n	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229b8:	f112 0901 	adds.w	r9, r2, #1
 80229bc:	f53f af47 	bmi.w	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229c0:	454b      	cmp	r3, r9
 80229c2:	f6ff af44 	blt.w	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229c6:	f11c 0901 	adds.w	r9, ip, #1
 80229ca:	f53f af40 	bmi.w	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229ce:	45ce      	cmp	lr, r9
 80229d0:	f6ff af3d 	blt.w	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229d4:	9202      	str	r2, [sp, #8]
 80229d6:	b21b      	sxth	r3, r3
 80229d8:	fa0f f28e 	sxth.w	r2, lr
 80229dc:	9300      	str	r3, [sp, #0]
 80229de:	463b      	mov	r3, r7
 80229e0:	9201      	str	r2, [sp, #4]
 80229e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80229e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80229e8:	e9cd c003 	strd	ip, r0, [sp, #12]
 80229ec:	4641      	mov	r1, r8
 80229ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80229f0:	f7ff fd21 	bl	8022436 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 80229f4:	e72b      	b.n	802284e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80229f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80229f8:	ea4f 412a 	mov.w	r1, sl, asr #16
 80229fc:	1430      	asrs	r0, r6, #16
 80229fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022a00:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022a04:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8022a08:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022a0c:	fb02 1000 	mla	r0, r2, r0, r1
 8022a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022a12:	4401      	add	r1, r0
 8022a14:	5c28      	ldrb	r0, [r5, r0]
 8022a16:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8022a1a:	f1b8 0f00 	cmp.w	r8, #0
 8022a1e:	d07d      	beq.n	8022b1c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8022a20:	f891 e001 	ldrb.w	lr, [r1, #1]
 8022a24:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8022a28:	9511      	str	r5, [sp, #68]	; 0x44
 8022a2a:	f1bc 0f00 	cmp.w	ip, #0
 8022a2e:	d00a      	beq.n	8022a46 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022a30:	eb01 0e02 	add.w	lr, r1, r2
 8022a34:	5c8a      	ldrb	r2, [r1, r2]
 8022a36:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022a3a:	920e      	str	r2, [sp, #56]	; 0x38
 8022a3c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022a40:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022a44:	9212      	str	r2, [sp, #72]	; 0x48
 8022a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a48:	fb18 f10c 	smulbb	r1, r8, ip
 8022a4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022a4e:	2cff      	cmp	r4, #255	; 0xff
 8022a50:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022a54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022a58:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8022a5c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022a60:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022a64:	ea4e 0e02 	orr.w	lr, lr, r2
 8022a68:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8022a6c:	9215      	str	r2, [sp, #84]	; 0x54
 8022a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022a72:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022a76:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022a7a:	ea42 020b 	orr.w	r2, r2, fp
 8022a7e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022a82:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022a86:	fb01 f202 	mul.w	r2, r1, r2
 8022a8a:	fb05 2e0e 	mla	lr, r5, lr, r2
 8022a8e:	f00b 62fc 	and.w	r2, fp, #132120576	; 0x7e00000
 8022a92:	ea42 0b00 	orr.w	fp, r2, r0
 8022a96:	f1cc 0010 	rsb	r0, ip, #16
 8022a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a9c:	eba0 0808 	sub.w	r8, r0, r8
 8022aa0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8022aa4:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8022aa8:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022aac:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022ab0:	f422 68fc 	bic.w	r8, r2, #2016	; 0x7e0
 8022ab4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022ab8:	ea4b 0808 	orr.w	r8, fp, r8
 8022abc:	fb01 ee08 	mla	lr, r1, r8, lr
 8022ac0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022ac4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022ac8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022acc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022ad0:	ea42 0e0e 	orr.w	lr, r2, lr
 8022ad4:	fa1f f28e 	uxth.w	r2, lr
 8022ad8:	ea4f 2122 	mov.w	r1, r2, asr #8
 8022adc:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8022ae0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8022ae4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022ae8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022aec:	b2d2      	uxtb	r2, r2
 8022aee:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022af2:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022af6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022afa:	d117      	bne.n	8022b2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8022afc:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022b00:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022b04:	f803 1c02 	strb.w	r1, [r3, #-2]
 8022b08:	f803 4c01 	strb.w	r4, [r3, #-1]
 8022b0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022b0e:	3304      	adds	r3, #4
 8022b10:	f109 39ff 	add.w	r9, r9, #4294967295
 8022b14:	4492      	add	sl, r2
 8022b16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022b18:	4416      	add	r6, r2
 8022b1a:	e6c7      	b.n	80228ac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022b1c:	f1bc 0f00 	cmp.w	ip, #0
 8022b20:	d091      	beq.n	8022a46 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022b22:	5c8a      	ldrb	r2, [r1, r2]
 8022b24:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022b28:	920e      	str	r2, [sp, #56]	; 0x38
 8022b2a:	e78c      	b.n	8022a46 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022b2c:	2c00      	cmp	r4, #0
 8022b2e:	d0ed      	beq.n	8022b0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022b30:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8022b34:	fb12 f204 	smulbb	r2, r2, r4
 8022b38:	fb14 f000 	smulbb	r0, r4, r0
 8022b3c:	fb14 f101 	smulbb	r1, r4, r1
 8022b40:	fb04 fc08 	mul.w	ip, r4, r8
 8022b44:	f10c 0e01 	add.w	lr, ip, #1
 8022b48:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022b4c:	eb04 0c08 	add.w	ip, r4, r8
 8022b50:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b54:	ebac 0c0e 	sub.w	ip, ip, lr
 8022b58:	eba8 0e0e 	sub.w	lr, r8, lr
 8022b5c:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8022b60:	fa5f fc8c 	uxtb.w	ip, ip
 8022b64:	fb0e 2208 	mla	r2, lr, r8, r2
 8022b68:	f803 cc01 	strb.w	ip, [r3, #-1]
 8022b6c:	fb92 f2fc 	sdiv	r2, r2, ip
 8022b70:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022b74:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8022b78:	fb0e 0002 	mla	r0, lr, r2, r0
 8022b7c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8022b80:	fb0e 1e02 	mla	lr, lr, r2, r1
 8022b84:	fb90 f0fc 	sdiv	r0, r0, ip
 8022b88:	fb9e fefc 	sdiv	lr, lr, ip
 8022b8c:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022b90:	f803 ec02 	strb.w	lr, [r3, #-2]
 8022b94:	e7ba      	b.n	8022b0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022b96:	b017      	add	sp, #92	; 0x5c
 8022b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b9c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8022b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba0:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	; 0x2c
 8022ba4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022ba8:	f1be 0f00 	cmp.w	lr, #0
 8022bac:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022bb0:	fb0e 7409 	mla	r4, lr, r9, r7
 8022bb4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022bb8:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8022bbc:	eb02 0a04 	add.w	sl, r2, r4
 8022bc0:	6808      	ldr	r0, [r1, #0]
 8022bc2:	f2c0 80c5 	blt.w	8022d50 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8022bc6:	45f0      	cmp	r8, lr
 8022bc8:	f340 80c2 	ble.w	8022d50 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8022bcc:	2f00      	cmp	r7, #0
 8022bce:	f2c0 80bd 	blt.w	8022d4c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8022bd2:	45b9      	cmp	r9, r7
 8022bd4:	f340 80ba 	ble.w	8022d4c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8022bd8:	5d12      	ldrb	r2, [r2, r4]
 8022bda:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022bde:	122c      	asrs	r4, r5, #8
 8022be0:	10ea      	asrs	r2, r5, #3
 8022be2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022be6:	00ed      	lsls	r5, r5, #3
 8022be8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022bec:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8022bf0:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8022bf4:	b2ed      	uxtb	r5, r5
 8022bf6:	0224      	lsls	r4, r4, #8
 8022bf8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022bfc:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8022c00:	432c      	orrs	r4, r5
 8022c02:	1c7a      	adds	r2, r7, #1
 8022c04:	f100 80a7 	bmi.w	8022d56 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022c08:	4591      	cmp	r9, r2
 8022c0a:	f340 80a4 	ble.w	8022d56 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022c0e:	2e00      	cmp	r6, #0
 8022c10:	f000 80a1 	beq.w	8022d56 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022c14:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022c18:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8022c1c:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8022c20:	ea4f 252b 	mov.w	r5, fp, asr #8
 8022c24:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022c28:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022c2c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022c30:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022c34:	fa5f fb8b 	uxtb.w	fp, fp
 8022c38:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022c3c:	0212      	lsls	r2, r2, #8
 8022c3e:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8022c42:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022c46:	ea45 050b 	orr.w	r5, r5, fp
 8022c4a:	f11e 0e01 	adds.w	lr, lr, #1
 8022c4e:	f100 8086 	bmi.w	8022d5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8022c52:	45f0      	cmp	r8, lr
 8022c54:	f340 8083 	ble.w	8022d5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8022c58:	f1bc 0f00 	cmp.w	ip, #0
 8022c5c:	d07f      	beq.n	8022d5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8022c5e:	2f00      	cmp	r7, #0
 8022c60:	db7b      	blt.n	8022d5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8022c62:	45b9      	cmp	r9, r7
 8022c64:	dd79      	ble.n	8022d5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8022c66:	f81a 2009 	ldrb.w	r2, [sl, r9]
 8022c6a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022c6e:	ea4f 222e 	mov.w	r2, lr, asr #8
 8022c72:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8022c76:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022c7a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022c7e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8022c82:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8022c86:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 8022c8a:	fa5f fe8e 	uxtb.w	lr, lr
 8022c8e:	0212      	lsls	r2, r2, #8
 8022c90:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8022c94:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8022c98:	ea42 020e 	orr.w	r2, r2, lr
 8022c9c:	3701      	adds	r7, #1
 8022c9e:	d419      	bmi.n	8022cd4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8022ca0:	45b9      	cmp	r9, r7
 8022ca2:	dd17      	ble.n	8022cd4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8022ca4:	b1b6      	cbz	r6, 8022cd4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8022ca6:	44d1      	add	r9, sl
 8022ca8:	f899 0001 	ldrb.w	r0, [r9, #1]
 8022cac:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8022cb0:	10df      	asrs	r7, r3, #3
 8022cb2:	1218      	asrs	r0, r3, #8
 8022cb4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022cb8:	00db      	lsls	r3, r3, #3
 8022cba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022cbe:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8022cc2:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8022cc6:	b2db      	uxtb	r3, r3
 8022cc8:	0238      	lsls	r0, r7, #8
 8022cca:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022cce:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8022cd2:	4318      	orrs	r0, r3
 8022cd4:	b2b6      	uxth	r6, r6
 8022cd6:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 8022cda:	fa1f f78c 	uxth.w	r7, ip
 8022cde:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022ce2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8022ce6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022cea:	fb06 fc07 	mul.w	ip, r6, r7
 8022cee:	0136      	lsls	r6, r6, #4
 8022cf0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022cf4:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8022cf8:	eba6 060c 	sub.w	r6, r6, ip
 8022cfc:	b2bf      	uxth	r7, r7
 8022cfe:	b2b6      	uxth	r6, r6
 8022d00:	ebae 0e07 	sub.w	lr, lr, r7
 8022d04:	4373      	muls	r3, r6
 8022d06:	fa1f fe8e 	uxth.w	lr, lr
 8022d0a:	4375      	muls	r5, r6
 8022d0c:	fb0e 3808 	mla	r8, lr, r8, r3
 8022d10:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022d14:	fb0e 5404 	mla	r4, lr, r4, r5
 8022d18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d1c:	fb0c 8803 	mla	r8, ip, r3, r8
 8022d20:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022d24:	fb0c 4000 	mla	r0, ip, r0, r4
 8022d28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d2c:	fb07 8303 	mla	r3, r7, r3, r8
 8022d30:	fb07 0002 	mla	r0, r7, r2, r0
 8022d34:	0a1b      	lsrs	r3, r3, #8
 8022d36:	0a00      	lsrs	r0, r0, #8
 8022d38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d3c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d40:	4318      	orrs	r0, r3
 8022d42:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022d46:	6008      	str	r0, [r1, #0]
 8022d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d4c:	4604      	mov	r4, r0
 8022d4e:	e758      	b.n	8022c02 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8022d50:	4605      	mov	r5, r0
 8022d52:	4604      	mov	r4, r0
 8022d54:	e779      	b.n	8022c4a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8022d56:	4605      	mov	r5, r0
 8022d58:	e777      	b.n	8022c4a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8022d5a:	4602      	mov	r2, r0
 8022d5c:	e79e      	b.n	8022c9c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 8022d5e:	4602      	mov	r2, r0
 8022d60:	e7b8      	b.n	8022cd4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08022d62 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d66:	b093      	sub	sp, #76	; 0x4c
 8022d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022d6c:	920f      	str	r2, [sp, #60]	; 0x3c
 8022d6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022d70:	9010      	str	r0, [sp, #64]	; 0x40
 8022d72:	9108      	str	r1, [sp, #32]
 8022d74:	6850      	ldr	r0, [r2, #4]
 8022d76:	9306      	str	r3, [sp, #24]
 8022d78:	6812      	ldr	r2, [r2, #0]
 8022d7a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022d7e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022d82:	fb00 1303 	mla	r3, r0, r3, r1
 8022d86:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8022d8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d8c:	681b      	ldr	r3, [r3, #0]
 8022d8e:	9307      	str	r3, [sp, #28]
 8022d90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d92:	685f      	ldr	r7, [r3, #4]
 8022d94:	3704      	adds	r7, #4
 8022d96:	9b08      	ldr	r3, [sp, #32]
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	dc03      	bgt.n	8022da4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d9e:	2b00      	cmp	r3, #0
 8022da0:	f340 81d9 	ble.w	8023156 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022da6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022daa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dae:	1e48      	subs	r0, r1, #1
 8022db0:	f102 3cff 	add.w	ip, r2, #4294967295
 8022db4:	9b06      	ldr	r3, [sp, #24]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	f340 80bc 	ble.w	8022f34 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8022dbc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022dc0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022dc4:	d406      	bmi.n	8022dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022dc6:	4586      	cmp	lr, r0
 8022dc8:	da04      	bge.n	8022dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	db02      	blt.n	8022dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022dce:	4563      	cmp	r3, ip
 8022dd0:	f2c0 80b1 	blt.w	8022f36 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022dd4:	f11e 0e01 	adds.w	lr, lr, #1
 8022dd8:	f100 80a2 	bmi.w	8022f20 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022ddc:	4571      	cmp	r1, lr
 8022dde:	f2c0 809f 	blt.w	8022f20 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022de2:	3301      	adds	r3, #1
 8022de4:	f100 809c 	bmi.w	8022f20 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022de8:	429a      	cmp	r2, r3
 8022dea:	f2c0 8099 	blt.w	8022f20 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022dee:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022df2:	46c8      	mov	r8, r9
 8022df4:	f1bb 0f00 	cmp.w	fp, #0
 8022df8:	f340 80b9 	ble.w	8022f6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022dfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022dfe:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e04:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022e08:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022e0c:	1422      	asrs	r2, r4, #16
 8022e0e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022e12:	689b      	ldr	r3, [r3, #8]
 8022e14:	f100 80f6 	bmi.w	8023004 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022e18:	f103 3aff 	add.w	sl, r3, #4294967295
 8022e1c:	4552      	cmp	r2, sl
 8022e1e:	f280 80f1 	bge.w	8023004 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022e22:	f1bc 0f00 	cmp.w	ip, #0
 8022e26:	f2c0 80ed 	blt.w	8023004 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022e2e:	45d4      	cmp	ip, sl
 8022e30:	f280 80e8 	bge.w	8023004 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022e34:	b21b      	sxth	r3, r3
 8022e36:	9d07      	ldr	r5, [sp, #28]
 8022e38:	fb0c 2203 	mla	r2, ip, r3, r2
 8022e3c:	eb05 0a02 	add.w	sl, r5, r2
 8022e40:	5caa      	ldrb	r2, [r5, r2]
 8022e42:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022e46:	2800      	cmp	r0, #0
 8022e48:	f000 80d3 	beq.w	8022ff2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8022e4c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022e50:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022e54:	920b      	str	r2, [sp, #44]	; 0x2c
 8022e56:	b151      	cbz	r1, 8022e6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022e58:	eb0a 0203 	add.w	r2, sl, r3
 8022e5c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022e60:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022e64:	9309      	str	r3, [sp, #36]	; 0x24
 8022e66:	7853      	ldrb	r3, [r2, #1]
 8022e68:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8022e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e70:	fb10 f201 	smulbb	r2, r0, r1
 8022e74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022e76:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022e7a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e7e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022e82:	10d2      	asrs	r2, r2, #3
 8022e84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e88:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022e8c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e92:	041b      	lsls	r3, r3, #16
 8022e94:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022e98:	432b      	orrs	r3, r5
 8022e9a:	4353      	muls	r3, r2
 8022e9c:	fb0a 330c 	mla	r3, sl, ip, r3
 8022ea0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022ea4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022ea8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022eac:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022eb0:	f1c1 0c10 	rsb	ip, r1, #16
 8022eb4:	ebac 0c00 	sub.w	ip, ip, r0
 8022eb8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022ebc:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022ec0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ec6:	0418      	lsls	r0, r3, #16
 8022ec8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022ecc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022ed0:	4318      	orrs	r0, r3
 8022ed2:	fb02 c200 	mla	r2, r2, r0, ip
 8022ed6:	0d51      	lsrs	r1, r2, #21
 8022ed8:	0952      	lsrs	r2, r2, #5
 8022eda:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022ede:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ee2:	430a      	orrs	r2, r1
 8022ee4:	b291      	uxth	r1, r2
 8022ee6:	10ca      	asrs	r2, r1, #3
 8022ee8:	1208      	asrs	r0, r1, #8
 8022eea:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8022eee:	00c9      	lsls	r1, r1, #3
 8022ef0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022ef4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8022ef8:	b2c9      	uxtb	r1, r1
 8022efa:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022efe:	021b      	lsls	r3, r3, #8
 8022f00:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022f04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022f08:	430b      	orrs	r3, r1
 8022f0a:	f8c8 3000 	str.w	r3, [r8]
 8022f0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022f10:	f108 0804 	add.w	r8, r8, #4
 8022f14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f18:	441c      	add	r4, r3
 8022f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f1c:	441e      	add	r6, r3
 8022f1e:	e769      	b.n	8022df4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022f22:	f109 0904 	add.w	r9, r9, #4
 8022f26:	441c      	add	r4, r3
 8022f28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f2a:	441e      	add	r6, r3
 8022f2c:	9b06      	ldr	r3, [sp, #24]
 8022f2e:	3b01      	subs	r3, #1
 8022f30:	9306      	str	r3, [sp, #24]
 8022f32:	e73f      	b.n	8022db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022f34:	d020      	beq.n	8022f78 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022f36:	9b06      	ldr	r3, [sp, #24]
 8022f38:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022f3a:	3b01      	subs	r3, #1
 8022f3c:	fb00 4003 	mla	r0, r0, r3, r4
 8022f40:	1400      	asrs	r0, r0, #16
 8022f42:	f53f af54 	bmi.w	8022dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022f46:	3901      	subs	r1, #1
 8022f48:	4288      	cmp	r0, r1
 8022f4a:	f6bf af50 	bge.w	8022dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022f4e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022f50:	fb01 6303 	mla	r3, r1, r3, r6
 8022f54:	141b      	asrs	r3, r3, #16
 8022f56:	f53f af4a 	bmi.w	8022dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022f5a:	3a01      	subs	r2, #1
 8022f5c:	4293      	cmp	r3, r2
 8022f5e:	f6bf af46 	bge.w	8022dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022f62:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022f66:	46ca      	mov	sl, r9
 8022f68:	f1b8 0f00 	cmp.w	r8, #0
 8022f6c:	dc67      	bgt.n	802303e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8022f6e:	9b06      	ldr	r3, [sp, #24]
 8022f70:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022f74:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8022f78:	9b08      	ldr	r3, [sp, #32]
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	f340 80eb 	ble.w	8023156 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022f86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f8a:	eeb0 6a62 	vmov.f32	s12, s5
 8022f8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022f92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022f9a:	ee16 4a10 	vmov	r4, s12
 8022f9e:	eeb0 6a43 	vmov.f32	s12, s6
 8022fa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022fa6:	ee16 6a10 	vmov	r6, s12
 8022faa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022fae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022fb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022fb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022fba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fc2:	ee12 2a90 	vmov	r2, s5
 8022fc6:	eef0 2a47 	vmov.f32	s5, s14
 8022fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fce:	ee13 2a10 	vmov	r2, s6
 8022fd2:	931f      	str	r3, [sp, #124]	; 0x7c
 8022fd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022fd6:	eeb0 3a67 	vmov.f32	s6, s15
 8022fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fde:	9320      	str	r3, [sp, #128]	; 0x80
 8022fe0:	9b08      	ldr	r3, [sp, #32]
 8022fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fe4:	3b01      	subs	r3, #1
 8022fe6:	9308      	str	r3, [sp, #32]
 8022fe8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022fea:	bf08      	it	eq
 8022fec:	4613      	moveq	r3, r2
 8022fee:	9306      	str	r3, [sp, #24]
 8022ff0:	e6d1      	b.n	8022d96 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022ff2:	2900      	cmp	r1, #0
 8022ff4:	f43f af3b 	beq.w	8022e6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022ff8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022ffc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023000:	9309      	str	r3, [sp, #36]	; 0x24
 8023002:	e734      	b.n	8022e6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023004:	f112 0a01 	adds.w	sl, r2, #1
 8023008:	d481      	bmi.n	8022f0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802300a:	4553      	cmp	r3, sl
 802300c:	f6ff af7f 	blt.w	8022f0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023010:	f11c 0a01 	adds.w	sl, ip, #1
 8023014:	f53f af7b 	bmi.w	8022f0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023018:	45d6      	cmp	lr, sl
 802301a:	f6ff af78 	blt.w	8022f0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802301e:	b21b      	sxth	r3, r3
 8023020:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023024:	fa0f f28e 	sxth.w	r2, lr
 8023028:	9300      	str	r3, [sp, #0]
 802302a:	463b      	mov	r3, r7
 802302c:	9201      	str	r2, [sp, #4]
 802302e:	9a07      	ldr	r2, [sp, #28]
 8023030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023034:	4641      	mov	r1, r8
 8023036:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023038:	f7ff fdb0 	bl	8022b9c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 802303c:	e767      	b.n	8022f0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802303e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023040:	1422      	asrs	r2, r4, #16
 8023042:	1431      	asrs	r1, r6, #16
 8023044:	9d07      	ldr	r5, [sp, #28]
 8023046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802304a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802304e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023052:	fb03 2101 	mla	r1, r3, r1, r2
 8023056:	9a07      	ldr	r2, [sp, #28]
 8023058:	440a      	add	r2, r1
 802305a:	5c69      	ldrb	r1, [r5, r1]
 802305c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023060:	f1be 0f00 	cmp.w	lr, #0
 8023064:	d070      	beq.n	8023148 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023066:	f892 c001 	ldrb.w	ip, [r2, #1]
 802306a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802306e:	950d      	str	r5, [sp, #52]	; 0x34
 8023070:	b150      	cbz	r0, 8023088 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023072:	eb02 0c03 	add.w	ip, r2, r3
 8023076:	5cd3      	ldrb	r3, [r2, r3]
 8023078:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802307c:	930a      	str	r3, [sp, #40]	; 0x28
 802307e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023082:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023086:	930e      	str	r3, [sp, #56]	; 0x38
 8023088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802308a:	fb1e f200 	smulbb	r2, lr, r0
 802308e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023090:	f108 38ff 	add.w	r8, r8, #4294967295
 8023094:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023098:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802309c:	10d2      	asrs	r2, r2, #3
 802309e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80230a2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80230a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80230aa:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80230ae:	9311      	str	r3, [sp, #68]	; 0x44
 80230b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80230b4:	041b      	lsls	r3, r3, #16
 80230b6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80230ba:	ea43 030b 	orr.w	r3, r3, fp
 80230be:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80230c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80230c6:	4353      	muls	r3, r2
 80230c8:	fb05 3c0c 	mla	ip, r5, ip, r3
 80230cc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80230d0:	ea43 0b01 	orr.w	fp, r3, r1
 80230d4:	f1c0 0110 	rsb	r1, r0, #16
 80230d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230da:	eba1 0e0e 	sub.w	lr, r1, lr
 80230de:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80230e2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80230e6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80230ea:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80230ee:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80230f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80230f6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80230fa:	fb02 cc0e 	mla	ip, r2, lr, ip
 80230fe:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8023102:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023106:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802310a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802310e:	ea42 0c0c 	orr.w	ip, r2, ip
 8023112:	fa1f f28c 	uxth.w	r2, ip
 8023116:	10d3      	asrs	r3, r2, #3
 8023118:	1211      	asrs	r1, r2, #8
 802311a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802311e:	00d2      	lsls	r2, r2, #3
 8023120:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023124:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8023128:	b2d2      	uxtb	r2, r2
 802312a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802312e:	021b      	lsls	r3, r3, #8
 8023130:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023134:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023138:	431a      	orrs	r2, r3
 802313a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802313c:	441c      	add	r4, r3
 802313e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023140:	f84a 2b04 	str.w	r2, [sl], #4
 8023144:	441e      	add	r6, r3
 8023146:	e70f      	b.n	8022f68 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023148:	2800      	cmp	r0, #0
 802314a:	d09d      	beq.n	8023088 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802314c:	5cd3      	ldrb	r3, [r2, r3]
 802314e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023152:	930a      	str	r3, [sp, #40]	; 0x28
 8023154:	e798      	b.n	8023088 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023156:	b013      	add	sp, #76	; 0x4c
 8023158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802315c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802315c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023160:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 8023164:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023168:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802316c:	f1b8 0f00 	cmp.w	r8, #0
 8023170:	fb08 750e 	mla	r5, r8, lr, r7
 8023174:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8023178:	9001      	str	r0, [sp, #4]
 802317a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 802317e:	eb02 0a05 	add.w	sl, r2, r5
 8023182:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8023186:	6808      	ldr	r0, [r1, #0]
 8023188:	f2c0 80b2 	blt.w	80232f0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802318c:	45c3      	cmp	fp, r8
 802318e:	f340 80af 	ble.w	80232f0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8023192:	2f00      	cmp	r7, #0
 8023194:	f2c0 80aa 	blt.w	80232ec <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8023198:	45be      	cmp	lr, r7
 802319a:	f340 80a7 	ble.w	80232ec <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 802319e:	5d55      	ldrb	r5, [r2, r5]
 80231a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80231a4:	195a      	adds	r2, r3, r5
 80231a6:	5d5d      	ldrb	r5, [r3, r5]
 80231a8:	f892 9001 	ldrb.w	r9, [r2, #1]
 80231ac:	7892      	ldrb	r2, [r2, #2]
 80231ae:	0412      	lsls	r2, r2, #16
 80231b0:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 80231b4:	432a      	orrs	r2, r5
 80231b6:	1c7d      	adds	r5, r7, #1
 80231b8:	f100 809b 	bmi.w	80232f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80231bc:	45ae      	cmp	lr, r5
 80231be:	f340 8098 	ble.w	80232f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80231c2:	2c00      	cmp	r4, #0
 80231c4:	f000 8095 	beq.w	80232f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80231c8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80231cc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80231d0:	eb03 0509 	add.w	r5, r3, r9
 80231d4:	f813 9009 	ldrb.w	r9, [r3, r9]
 80231d8:	786e      	ldrb	r6, [r5, #1]
 80231da:	78ad      	ldrb	r5, [r5, #2]
 80231dc:	042d      	lsls	r5, r5, #16
 80231de:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80231e2:	ea45 0509 	orr.w	r5, r5, r9
 80231e6:	f118 0801 	adds.w	r8, r8, #1
 80231ea:	f100 8086 	bmi.w	80232fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80231ee:	45c3      	cmp	fp, r8
 80231f0:	f340 8083 	ble.w	80232fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80231f4:	9e01      	ldr	r6, [sp, #4]
 80231f6:	2e00      	cmp	r6, #0
 80231f8:	d07f      	beq.n	80232fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80231fa:	2f00      	cmp	r7, #0
 80231fc:	eb0a 090e 	add.w	r9, sl, lr
 8023200:	db79      	blt.n	80232f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8023202:	45be      	cmp	lr, r7
 8023204:	dd77      	ble.n	80232f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8023206:	f81a a00e 	ldrb.w	sl, [sl, lr]
 802320a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802320e:	eb03 080a 	add.w	r8, r3, sl
 8023212:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8023216:	f898 b001 	ldrb.w	fp, [r8, #1]
 802321a:	f898 8002 	ldrb.w	r8, [r8, #2]
 802321e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8023222:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 8023226:	ea48 080a 	orr.w	r8, r8, sl
 802322a:	3701      	adds	r7, #1
 802322c:	d411      	bmi.n	8023252 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802322e:	45be      	cmp	lr, r7
 8023230:	dd0f      	ble.n	8023252 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8023232:	b174      	cbz	r4, 8023252 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8023234:	f899 7001 	ldrb.w	r7, [r9, #1]
 8023238:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802323c:	eb03 0e07 	add.w	lr, r3, r7
 8023240:	5ddb      	ldrb	r3, [r3, r7]
 8023242:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023246:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802324a:	0400      	lsls	r0, r0, #16
 802324c:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8023250:	4318      	orrs	r0, r3
 8023252:	b2a4      	uxth	r4, r4
 8023254:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8023258:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802325c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023260:	fb04 fe06 	mul.w	lr, r4, r6
 8023264:	0124      	lsls	r4, r4, #4
 8023266:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802326a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802326e:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 8023272:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8023276:	eba4 040e 	sub.w	r4, r4, lr
 802327a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802327e:	b2b6      	uxth	r6, r6
 8023280:	b2a4      	uxth	r4, r4
 8023282:	eba9 0906 	sub.w	r9, r9, r6
 8023286:	fb04 f303 	mul.w	r3, r4, r3
 802328a:	fa1f f989 	uxth.w	r9, r9
 802328e:	fb04 f405 	mul.w	r4, r4, r5
 8023292:	fb09 3707 	mla	r7, r9, r7, r3
 8023296:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802329a:	fb09 4402 	mla	r4, r9, r2, r4
 802329e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80232a2:	fb0e 7703 	mla	r7, lr, r3, r7
 80232a6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 80232aa:	fb0e 4000 	mla	r0, lr, r0, r4
 80232ae:	fb06 7303 	mla	r3, r6, r3, r7
 80232b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80232b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80232ba:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 80232be:	fb06 0303 	mla	r3, r6, r3, r0
 80232c2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80232c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232ca:	ea43 0307 	orr.w	r3, r3, r7
 80232ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80232d2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80232d6:	b2d4      	uxtb	r4, r2
 80232d8:	b2c5      	uxtb	r5, r0
 80232da:	d110      	bne.n	80232fe <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 80232dc:	700b      	strb	r3, [r1, #0]
 80232de:	7048      	strb	r0, [r1, #1]
 80232e0:	708a      	strb	r2, [r1, #2]
 80232e2:	f881 c003 	strb.w	ip, [r1, #3]
 80232e6:	b003      	add	sp, #12
 80232e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ec:	4602      	mov	r2, r0
 80232ee:	e762      	b.n	80231b6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 80232f0:	4602      	mov	r2, r0
 80232f2:	4605      	mov	r5, r0
 80232f4:	e777      	b.n	80231e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 80232f6:	4680      	mov	r8, r0
 80232f8:	e797      	b.n	802322a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 80232fa:	4680      	mov	r8, r0
 80232fc:	e7a9      	b.n	8023252 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80232fe:	f1bc 0f00 	cmp.w	ip, #0
 8023302:	d0f0      	beq.n	80232e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 8023304:	78ce      	ldrb	r6, [r1, #3]
 8023306:	b2db      	uxtb	r3, r3
 8023308:	fb1c f505 	smulbb	r5, ip, r5
 802330c:	fb0c f206 	mul.w	r2, ip, r6
 8023310:	1c50      	adds	r0, r2, #1
 8023312:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023316:	eb0c 0206 	add.w	r2, ip, r6
 802331a:	1200      	asrs	r0, r0, #8
 802331c:	1a12      	subs	r2, r2, r0
 802331e:	1a30      	subs	r0, r6, r0
 8023320:	780e      	ldrb	r6, [r1, #0]
 8023322:	b2d2      	uxtb	r2, r2
 8023324:	4346      	muls	r6, r0
 8023326:	70ca      	strb	r2, [r1, #3]
 8023328:	fb0c 6303 	mla	r3, ip, r3, r6
 802332c:	fb1c fc04 	smulbb	ip, ip, r4
 8023330:	fb93 f3f2 	sdiv	r3, r3, r2
 8023334:	700b      	strb	r3, [r1, #0]
 8023336:	784b      	ldrb	r3, [r1, #1]
 8023338:	fb00 5303 	mla	r3, r0, r3, r5
 802333c:	fb93 f3f2 	sdiv	r3, r3, r2
 8023340:	704b      	strb	r3, [r1, #1]
 8023342:	788b      	ldrb	r3, [r1, #2]
 8023344:	fb00 cc03 	mla	ip, r0, r3, ip
 8023348:	fb9c fcf2 	sdiv	ip, ip, r2
 802334c:	f881 c002 	strb.w	ip, [r1, #2]
 8023350:	e7c9      	b.n	80232e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

08023352 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023356:	b091      	sub	sp, #68	; 0x44
 8023358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802335c:	920e      	str	r2, [sp, #56]	; 0x38
 802335e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023360:	900f      	str	r0, [sp, #60]	; 0x3c
 8023362:	910c      	str	r1, [sp, #48]	; 0x30
 8023364:	6850      	ldr	r0, [r2, #4]
 8023366:	9309      	str	r3, [sp, #36]	; 0x24
 8023368:	6812      	ldr	r2, [r2, #0]
 802336a:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 802336e:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 8023372:	fb00 1303 	mla	r3, r0, r3, r1
 8023376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802337a:	930a      	str	r3, [sp, #40]	; 0x28
 802337c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	930b      	str	r3, [sp, #44]	; 0x2c
 8023382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023384:	685d      	ldr	r5, [r3, #4]
 8023386:	3504      	adds	r5, #4
 8023388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802338a:	2b00      	cmp	r3, #0
 802338c:	dc03      	bgt.n	8023396 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802338e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023390:	2b00      	cmp	r3, #0
 8023392:	f340 825d 	ble.w	8023850 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023396:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023398:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802339c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80233a0:	1e48      	subs	r0, r1, #1
 80233a2:	1e56      	subs	r6, r2, #1
 80233a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	f340 80c9 	ble.w	802353e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80233ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80233ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80233b0:	143f      	asrs	r7, r7, #16
 80233b2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80233b6:	d406      	bmi.n	80233c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80233b8:	4287      	cmp	r7, r0
 80233ba:	da04      	bge.n	80233c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80233bc:	2b00      	cmp	r3, #0
 80233be:	db02      	blt.n	80233c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80233c0:	42b3      	cmp	r3, r6
 80233c2:	f2c0 80bd 	blt.w	8023540 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80233c6:	3701      	adds	r7, #1
 80233c8:	f100 80aa 	bmi.w	8023520 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80233cc:	42b9      	cmp	r1, r7
 80233ce:	f2c0 80a7 	blt.w	8023520 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80233d2:	3301      	adds	r3, #1
 80233d4:	f100 80a4 	bmi.w	8023520 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80233d8:	429a      	cmp	r2, r3
 80233da:	f2c0 80a1 	blt.w	8023520 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80233de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80233e2:	930d      	str	r3, [sp, #52]	; 0x34
 80233e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	f340 80ca 	ble.w	8023580 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80233ec:	9822      	ldr	r0, [sp, #136]	; 0x88
 80233ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80233f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80233f2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80233f6:	141f      	asrs	r7, r3, #16
 80233f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80233fa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80233fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023400:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023402:	1400      	asrs	r0, r0, #16
 8023404:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023408:	6892      	ldr	r2, [r2, #8]
 802340a:	f100 8138 	bmi.w	802367e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802340e:	f102 3eff 	add.w	lr, r2, #4294967295
 8023412:	4570      	cmp	r0, lr
 8023414:	f280 8133 	bge.w	802367e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023418:	2f00      	cmp	r7, #0
 802341a:	f2c0 8130 	blt.w	802367e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802341e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8023422:	4577      	cmp	r7, lr
 8023424:	f280 812b 	bge.w	802367e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023428:	b212      	sxth	r2, r2
 802342a:	fb07 0002 	mla	r0, r7, r2, r0
 802342e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023430:	eb07 0c00 	add.w	ip, r7, r0
 8023434:	5c38      	ldrb	r0, [r7, r0]
 8023436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802343a:	eb05 0800 	add.w	r8, r5, r0
 802343e:	2b00      	cmp	r3, #0
 8023440:	f000 80e2 	beq.w	8023608 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023444:	f89c e001 	ldrb.w	lr, [ip, #1]
 8023448:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802344c:	44ae      	add	lr, r5
 802344e:	2900      	cmp	r1, #0
 8023450:	f000 80e3 	beq.w	802361a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023454:	eb0c 0702 	add.w	r7, ip, r2
 8023458:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802345c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023460:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023464:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023468:	442a      	add	r2, r5
 802346a:	44ac      	add	ip, r5
 802346c:	b29b      	uxth	r3, r3
 802346e:	5c2f      	ldrb	r7, [r5, r0]
 8023470:	b289      	uxth	r1, r1
 8023472:	f89e 0000 	ldrb.w	r0, [lr]
 8023476:	f89e a001 	ldrb.w	sl, [lr, #1]
 802347a:	2cff      	cmp	r4, #255	; 0xff
 802347c:	fb03 fb01 	mul.w	fp, r3, r1
 8023480:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023484:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023488:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802348c:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8023490:	eba3 030b 	sub.w	r3, r3, fp
 8023494:	b289      	uxth	r1, r1
 8023496:	b29b      	uxth	r3, r3
 8023498:	eba9 0901 	sub.w	r9, r9, r1
 802349c:	fb03 f000 	mul.w	r0, r3, r0
 80234a0:	fa1f f989 	uxth.w	r9, r9
 80234a4:	fb03 fa0a 	mul.w	sl, r3, sl
 80234a8:	fb03 f30e 	mul.w	r3, r3, lr
 80234ac:	f892 e002 	ldrb.w	lr, [r2, #2]
 80234b0:	fb09 0007 	mla	r0, r9, r7, r0
 80234b4:	7817      	ldrb	r7, [r2, #0]
 80234b6:	fb01 0007 	mla	r0, r1, r7, r0
 80234ba:	f89c 7000 	ldrb.w	r7, [ip]
 80234be:	fb0b 0707 	mla	r7, fp, r7, r0
 80234c2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80234c6:	f898 8002 	ldrb.w	r8, [r8, #2]
 80234ca:	fb09 aa00 	mla	sl, r9, r0, sl
 80234ce:	7850      	ldrb	r0, [r2, #1]
 80234d0:	fb09 3308 	mla	r3, r9, r8, r3
 80234d4:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80234d8:	fb01 aa00 	mla	sl, r1, r0, sl
 80234dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80234e0:	fb01 330e 	mla	r3, r1, lr, r3
 80234e4:	ea4f 2727 	mov.w	r7, r7, asr #8
 80234e8:	fb0b a000 	mla	r0, fp, r0, sl
 80234ec:	fb0b 3b02 	mla	fp, fp, r2, r3
 80234f0:	ea4f 2020 	mov.w	r0, r0, asr #8
 80234f4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80234f8:	f040 8095 	bne.w	8023626 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80234fc:	7037      	strb	r7, [r6, #0]
 80234fe:	7070      	strb	r0, [r6, #1]
 8023500:	f886 b002 	strb.w	fp, [r6, #2]
 8023504:	70f4      	strb	r4, [r6, #3]
 8023506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023508:	3604      	adds	r6, #4
 802350a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802350c:	4413      	add	r3, r2
 802350e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023510:	931b      	str	r3, [sp, #108]	; 0x6c
 8023512:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023514:	4413      	add	r3, r2
 8023516:	931c      	str	r3, [sp, #112]	; 0x70
 8023518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802351a:	3b01      	subs	r3, #1
 802351c:	930d      	str	r3, [sp, #52]	; 0x34
 802351e:	e761      	b.n	80233e4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023522:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8023524:	443b      	add	r3, r7
 8023526:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8023528:	931b      	str	r3, [sp, #108]	; 0x6c
 802352a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802352c:	443b      	add	r3, r7
 802352e:	931c      	str	r3, [sp, #112]	; 0x70
 8023530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023532:	3b01      	subs	r3, #1
 8023534:	9309      	str	r3, [sp, #36]	; 0x24
 8023536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023538:	3304      	adds	r3, #4
 802353a:	930a      	str	r3, [sp, #40]	; 0x28
 802353c:	e732      	b.n	80233a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802353e:	d026      	beq.n	802358e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8023540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023542:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023544:	3b01      	subs	r3, #1
 8023546:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023548:	fb00 6003 	mla	r0, r0, r3, r6
 802354c:	1400      	asrs	r0, r0, #16
 802354e:	f53f af46 	bmi.w	80233de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023552:	3901      	subs	r1, #1
 8023554:	4288      	cmp	r0, r1
 8023556:	f6bf af42 	bge.w	80233de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802355a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802355c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802355e:	fb01 0303 	mla	r3, r1, r3, r0
 8023562:	141b      	asrs	r3, r3, #16
 8023564:	f53f af3b 	bmi.w	80233de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023568:	3a01      	subs	r2, #1
 802356a:	4293      	cmp	r3, r2
 802356c:	f6bf af37 	bge.w	80233de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023572:	1d19      	adds	r1, r3, #4
 8023574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023576:	930d      	str	r3, [sp, #52]	; 0x34
 8023578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802357a:	2b00      	cmp	r3, #0
 802357c:	f300 809e 	bgt.w	80236bc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802358c:	930a      	str	r3, [sp, #40]	; 0x28
 802358e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023590:	2b00      	cmp	r3, #0
 8023592:	f340 815d 	ble.w	8023850 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023596:	ee30 0a04 	vadd.f32	s0, s0, s8
 802359a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802359c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80235a0:	eeb0 6a62 	vmov.f32	s12, s5
 80235a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80235a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80235ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235b0:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 80235b4:	eeb0 6a43 	vmov.f32	s12, s6
 80235b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235bc:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80235c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80235c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80235c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80235cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80235d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80235d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235d8:	ee12 2a90 	vmov	r2, s5
 80235dc:	eef0 2a47 	vmov.f32	s5, s14
 80235e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80235e4:	ee13 2a10 	vmov	r2, s6
 80235e8:	931d      	str	r3, [sp, #116]	; 0x74
 80235ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80235ec:	eeb0 3a67 	vmov.f32	s6, s15
 80235f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80235f4:	931e      	str	r3, [sp, #120]	; 0x78
 80235f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80235fa:	3b01      	subs	r3, #1
 80235fc:	930c      	str	r3, [sp, #48]	; 0x30
 80235fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023600:	bf08      	it	eq
 8023602:	4613      	moveq	r3, r2
 8023604:	9309      	str	r3, [sp, #36]	; 0x24
 8023606:	e6bf      	b.n	8023388 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023608:	b151      	cbz	r1, 8023620 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 802360a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802360e:	46c4      	mov	ip, r8
 8023610:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023614:	442a      	add	r2, r5
 8023616:	46c6      	mov	lr, r8
 8023618:	e728      	b.n	802346c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 802361a:	46c4      	mov	ip, r8
 802361c:	4642      	mov	r2, r8
 802361e:	e725      	b.n	802346c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8023620:	46c4      	mov	ip, r8
 8023622:	4642      	mov	r2, r8
 8023624:	e7f7      	b.n	8023616 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8023626:	2c00      	cmp	r4, #0
 8023628:	f43f af6d 	beq.w	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802362c:	78f1      	ldrb	r1, [r6, #3]
 802362e:	b2ff      	uxtb	r7, r7
 8023630:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023634:	b2c0      	uxtb	r0, r0
 8023636:	fb04 f201 	mul.w	r2, r4, r1
 802363a:	fa5f fb8b 	uxtb.w	fp, fp
 802363e:	1c53      	adds	r3, r2, #1
 8023640:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023644:	1862      	adds	r2, r4, r1
 8023646:	121b      	asrs	r3, r3, #8
 8023648:	1ad2      	subs	r2, r2, r3
 802364a:	1acb      	subs	r3, r1, r3
 802364c:	7831      	ldrb	r1, [r6, #0]
 802364e:	fb03 fa0a 	mul.w	sl, r3, sl
 8023652:	b2d2      	uxtb	r2, r2
 8023654:	4359      	muls	r1, r3
 8023656:	fb04 a000 	mla	r0, r4, r0, sl
 802365a:	fb04 1707 	mla	r7, r4, r7, r1
 802365e:	78b1      	ldrb	r1, [r6, #2]
 8023660:	70f2      	strb	r2, [r6, #3]
 8023662:	434b      	muls	r3, r1
 8023664:	fb04 3b0b 	mla	fp, r4, fp, r3
 8023668:	fb97 f7f2 	sdiv	r7, r7, r2
 802366c:	fb90 f0f2 	sdiv	r0, r0, r2
 8023670:	fb9b fbf2 	sdiv	fp, fp, r2
 8023674:	7037      	strb	r7, [r6, #0]
 8023676:	7070      	strb	r0, [r6, #1]
 8023678:	f886 b002 	strb.w	fp, [r6, #2]
 802367c:	e743      	b.n	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802367e:	f110 0e01 	adds.w	lr, r0, #1
 8023682:	f53f af40 	bmi.w	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023686:	4572      	cmp	r2, lr
 8023688:	f6ff af3d 	blt.w	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802368c:	f117 0e01 	adds.w	lr, r7, #1
 8023690:	f53f af39 	bmi.w	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023694:	45f4      	cmp	ip, lr
 8023696:	f6ff af36 	blt.w	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802369a:	b212      	sxth	r2, r2
 802369c:	9002      	str	r0, [sp, #8]
 802369e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80236a0:	9200      	str	r2, [sp, #0]
 80236a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80236a4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80236a8:	fa0f f38c 	sxth.w	r3, ip
 80236ac:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80236b0:	9301      	str	r3, [sp, #4]
 80236b2:	4631      	mov	r1, r6
 80236b4:	462b      	mov	r3, r5
 80236b6:	f7ff fd51 	bl	802315c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 80236ba:	e724      	b.n	8023506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80236bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80236be:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80236c0:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80236c4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80236c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80236c8:	1436      	asrs	r6, r6, #16
 80236ca:	143f      	asrs	r7, r7, #16
 80236cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80236ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80236d2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80236d6:	fb02 7606 	mla	r6, r2, r6, r7
 80236da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80236dc:	eb07 0c06 	add.w	ip, r7, r6
 80236e0:	5dbe      	ldrb	r6, [r7, r6]
 80236e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80236e6:	eb05 0806 	add.w	r8, r5, r6
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d06d      	beq.n	80237ca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80236ee:	f89c e001 	ldrb.w	lr, [ip, #1]
 80236f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80236f6:	44ae      	add	lr, r5
 80236f8:	2800      	cmp	r0, #0
 80236fa:	d06f      	beq.n	80237dc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80236fc:	eb0c 0702 	add.w	r7, ip, r2
 8023700:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023704:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023708:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802370c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023710:	442a      	add	r2, r5
 8023712:	44ac      	add	ip, r5
 8023714:	b29b      	uxth	r3, r3
 8023716:	5daf      	ldrb	r7, [r5, r6]
 8023718:	b280      	uxth	r0, r0
 802371a:	f89e 6000 	ldrb.w	r6, [lr]
 802371e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023722:	2cff      	cmp	r4, #255	; 0xff
 8023724:	fb03 fb00 	mul.w	fp, r3, r0
 8023728:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802372c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023730:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023734:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8023738:	eba3 030b 	sub.w	r3, r3, fp
 802373c:	b280      	uxth	r0, r0
 802373e:	b29b      	uxth	r3, r3
 8023740:	eba9 0900 	sub.w	r9, r9, r0
 8023744:	fb03 f606 	mul.w	r6, r3, r6
 8023748:	fa1f f989 	uxth.w	r9, r9
 802374c:	fb03 fa0a 	mul.w	sl, r3, sl
 8023750:	fb03 f30e 	mul.w	r3, r3, lr
 8023754:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023758:	fb09 6607 	mla	r6, r9, r7, r6
 802375c:	7817      	ldrb	r7, [r2, #0]
 802375e:	fb00 6607 	mla	r6, r0, r7, r6
 8023762:	f89c 7000 	ldrb.w	r7, [ip]
 8023766:	fb0b 6707 	mla	r7, fp, r7, r6
 802376a:	f898 6001 	ldrb.w	r6, [r8, #1]
 802376e:	f898 8002 	ldrb.w	r8, [r8, #2]
 8023772:	fb09 aa06 	mla	sl, r9, r6, sl
 8023776:	7856      	ldrb	r6, [r2, #1]
 8023778:	fb09 3308 	mla	r3, r9, r8, r3
 802377c:	ea4f 2727 	mov.w	r7, r7, asr #8
 8023780:	fb00 aa06 	mla	sl, r0, r6, sl
 8023784:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023788:	fb00 330e 	mla	r3, r0, lr, r3
 802378c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023790:	fb0b a606 	mla	r6, fp, r6, sl
 8023794:	fb0b 330e 	mla	r3, fp, lr, r3
 8023798:	ea4f 2626 	mov.w	r6, r6, asr #8
 802379c:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80237a0:	d122      	bne.n	80237e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80237a2:	f801 7c04 	strb.w	r7, [r1, #-4]
 80237a6:	f801 6c03 	strb.w	r6, [r1, #-3]
 80237aa:	f801 bc02 	strb.w	fp, [r1, #-2]
 80237ae:	f801 4c01 	strb.w	r4, [r1, #-1]
 80237b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80237b4:	3104      	adds	r1, #4
 80237b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80237b8:	4413      	add	r3, r2
 80237ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80237bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80237be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80237c0:	4413      	add	r3, r2
 80237c2:	931c      	str	r3, [sp, #112]	; 0x70
 80237c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237c6:	3b01      	subs	r3, #1
 80237c8:	e6d5      	b.n	8023576 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80237ca:	b150      	cbz	r0, 80237e2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80237cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80237d0:	46c4      	mov	ip, r8
 80237d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237d6:	442a      	add	r2, r5
 80237d8:	46c6      	mov	lr, r8
 80237da:	e79b      	b.n	8023714 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80237dc:	46c4      	mov	ip, r8
 80237de:	4642      	mov	r2, r8
 80237e0:	e798      	b.n	8023714 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80237e2:	46c4      	mov	ip, r8
 80237e4:	4642      	mov	r2, r8
 80237e6:	e7f7      	b.n	80237d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80237e8:	2c00      	cmp	r4, #0
 80237ea:	d0e2      	beq.n	80237b2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80237ec:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80237f0:	b2ff      	uxtb	r7, r7
 80237f2:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 80237f6:	b2f6      	uxtb	r6, r6
 80237f8:	fb04 f300 	mul.w	r3, r4, r0
 80237fc:	eb04 0c00 	add.w	ip, r4, r0
 8023800:	fa5f fb8b 	uxtb.w	fp, fp
 8023804:	1c5a      	adds	r2, r3, #1
 8023806:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802380a:	1213      	asrs	r3, r2, #8
 802380c:	1ac2      	subs	r2, r0, r3
 802380e:	ebac 0c03 	sub.w	ip, ip, r3
 8023812:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8023816:	fb02 fa0a 	mul.w	sl, r2, sl
 802381a:	fa5f fc8c 	uxtb.w	ip, ip
 802381e:	4353      	muls	r3, r2
 8023820:	fb04 a606 	mla	r6, r4, r6, sl
 8023824:	fb04 3707 	mla	r7, r4, r7, r3
 8023828:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 802382c:	f801 cc01 	strb.w	ip, [r1, #-1]
 8023830:	435a      	muls	r2, r3
 8023832:	fb04 2b0b 	mla	fp, r4, fp, r2
 8023836:	fb97 f7fc 	sdiv	r7, r7, ip
 802383a:	fb96 f6fc 	sdiv	r6, r6, ip
 802383e:	fb9b fbfc 	sdiv	fp, fp, ip
 8023842:	f801 7c04 	strb.w	r7, [r1, #-4]
 8023846:	f801 6c03 	strb.w	r6, [r1, #-3]
 802384a:	f801 bc02 	strb.w	fp, [r1, #-2]
 802384e:	e7b0      	b.n	80237b2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8023850:	b011      	add	sp, #68	; 0x44
 8023852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023856 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8023856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802385a:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
 802385e:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8023862:	f1b8 0f00 	cmp.w	r8, #0
 8023866:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802386a:	fb08 740e 	mla	r4, r8, lr, r7
 802386e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8023872:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8023876:	eb02 0904 	add.w	r9, r2, r4
 802387a:	6808      	ldr	r0, [r1, #0]
 802387c:	f2c0 8099 	blt.w	80239b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023880:	45c2      	cmp	sl, r8
 8023882:	f340 8096 	ble.w	80239b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023886:	2f00      	cmp	r7, #0
 8023888:	f2c0 8091 	blt.w	80239ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 802388c:	45be      	cmp	lr, r7
 802388e:	f340 808e 	ble.w	80239ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8023892:	5d12      	ldrb	r2, [r2, r4]
 8023894:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023898:	189c      	adds	r4, r3, r2
 802389a:	5c9a      	ldrb	r2, [r3, r2]
 802389c:	7866      	ldrb	r6, [r4, #1]
 802389e:	78a4      	ldrb	r4, [r4, #2]
 80238a0:	0424      	lsls	r4, r4, #16
 80238a2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80238a6:	4314      	orrs	r4, r2
 80238a8:	1c7a      	adds	r2, r7, #1
 80238aa:	f100 8085 	bmi.w	80239b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80238ae:	4596      	cmp	lr, r2
 80238b0:	f340 8082 	ble.w	80239b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80238b4:	2d00      	cmp	r5, #0
 80238b6:	d07f      	beq.n	80239b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80238b8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80238bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238c0:	189e      	adds	r6, r3, r2
 80238c2:	5c9a      	ldrb	r2, [r3, r2]
 80238c4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80238c8:	78b6      	ldrb	r6, [r6, #2]
 80238ca:	0436      	lsls	r6, r6, #16
 80238cc:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 80238d0:	4316      	orrs	r6, r2
 80238d2:	f118 0801 	adds.w	r8, r8, #1
 80238d6:	d473      	bmi.n	80239c0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 80238d8:	45c2      	cmp	sl, r8
 80238da:	dd71      	ble.n	80239c0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 80238dc:	f1bc 0f00 	cmp.w	ip, #0
 80238e0:	d06e      	beq.n	80239c0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 80238e2:	2f00      	cmp	r7, #0
 80238e4:	eb09 080e 	add.w	r8, r9, lr
 80238e8:	db68      	blt.n	80239bc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 80238ea:	45be      	cmp	lr, r7
 80238ec:	dd66      	ble.n	80239bc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 80238ee:	f819 900e 	ldrb.w	r9, [r9, lr]
 80238f2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80238f6:	eb03 0209 	add.w	r2, r3, r9
 80238fa:	f813 9009 	ldrb.w	r9, [r3, r9]
 80238fe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023902:	7892      	ldrb	r2, [r2, #2]
 8023904:	0412      	lsls	r2, r2, #16
 8023906:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 802390a:	ea42 0209 	orr.w	r2, r2, r9
 802390e:	3701      	adds	r7, #1
 8023910:	d411      	bmi.n	8023936 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023912:	45be      	cmp	lr, r7
 8023914:	dd0f      	ble.n	8023936 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023916:	b175      	cbz	r5, 8023936 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023918:	f898 7001 	ldrb.w	r7, [r8, #1]
 802391c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023920:	eb03 0e07 	add.w	lr, r3, r7
 8023924:	5ddb      	ldrb	r3, [r3, r7]
 8023926:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802392a:	f89e 8001 	ldrb.w	r8, [lr, #1]
 802392e:	0400      	lsls	r0, r0, #16
 8023930:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8023934:	4318      	orrs	r0, r3
 8023936:	b2ad      	uxth	r5, r5
 8023938:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802393c:	fa1f f78c 	uxth.w	r7, ip
 8023940:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023944:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023948:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802394c:	fb05 fc07 	mul.w	ip, r5, r7
 8023950:	012d      	lsls	r5, r5, #4
 8023952:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023956:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 802395a:	eba5 050c 	sub.w	r5, r5, ip
 802395e:	b2bf      	uxth	r7, r7
 8023960:	b2ad      	uxth	r5, r5
 8023962:	ebae 0e07 	sub.w	lr, lr, r7
 8023966:	436b      	muls	r3, r5
 8023968:	fa1f fe8e 	uxth.w	lr, lr
 802396c:	436e      	muls	r6, r5
 802396e:	fb0e 3808 	mla	r8, lr, r8, r3
 8023972:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023976:	fb0e 6404 	mla	r4, lr, r4, r6
 802397a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802397e:	fb0c 8803 	mla	r8, ip, r3, r8
 8023982:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023986:	fb0c 4000 	mla	r0, ip, r0, r4
 802398a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802398e:	fb07 8303 	mla	r3, r7, r3, r8
 8023992:	fb07 0002 	mla	r0, r7, r2, r0
 8023996:	0a1b      	lsrs	r3, r3, #8
 8023998:	0a00      	lsrs	r0, r0, #8
 802399a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802399e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80239a2:	4318      	orrs	r0, r3
 80239a4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80239a8:	6008      	str	r0, [r1, #0]
 80239aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239ae:	4604      	mov	r4, r0
 80239b0:	e77a      	b.n	80238a8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80239b2:	4606      	mov	r6, r0
 80239b4:	4604      	mov	r4, r0
 80239b6:	e78c      	b.n	80238d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 80239b8:	4606      	mov	r6, r0
 80239ba:	e78a      	b.n	80238d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 80239bc:	4602      	mov	r2, r0
 80239be:	e7a6      	b.n	802390e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 80239c0:	4602      	mov	r2, r0
 80239c2:	e7b8      	b.n	8023936 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

080239c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80239c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239c8:	b08f      	sub	sp, #60	; 0x3c
 80239ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80239ce:	920c      	str	r2, [sp, #48]	; 0x30
 80239d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80239d2:	900d      	str	r0, [sp, #52]	; 0x34
 80239d4:	910a      	str	r1, [sp, #40]	; 0x28
 80239d6:	6850      	ldr	r0, [r2, #4]
 80239d8:	9306      	str	r3, [sp, #24]
 80239da:	6812      	ldr	r2, [r2, #0]
 80239dc:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80239e0:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80239e4:	fb00 1303 	mla	r3, r0, r3, r1
 80239e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80239ec:	9307      	str	r3, [sp, #28]
 80239ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239f0:	681b      	ldr	r3, [r3, #0]
 80239f2:	9308      	str	r3, [sp, #32]
 80239f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239f6:	685c      	ldr	r4, [r3, #4]
 80239f8:	3404      	adds	r4, #4
 80239fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	dc03      	bgt.n	8023a08 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a02:	2b00      	cmp	r3, #0
 8023a04:	f340 81dc 	ble.w	8023dc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023a08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a12:	1e48      	subs	r0, r1, #1
 8023a14:	1e56      	subs	r6, r2, #1
 8023a16:	9b06      	ldr	r3, [sp, #24]
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	f340 80ba 	ble.w	8023b92 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023a1e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023a22:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023a26:	d406      	bmi.n	8023a36 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023a28:	4287      	cmp	r7, r0
 8023a2a:	da04      	bge.n	8023a36 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	db02      	blt.n	8023a36 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023a30:	42b3      	cmp	r3, r6
 8023a32:	f2c0 80af 	blt.w	8023b94 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023a36:	3701      	adds	r7, #1
 8023a38:	f100 80a0 	bmi.w	8023b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023a3c:	42b9      	cmp	r1, r7
 8023a3e:	f2c0 809d 	blt.w	8023b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023a42:	3301      	adds	r3, #1
 8023a44:	f100 809a 	bmi.w	8023b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023a48:	429a      	cmp	r2, r3
 8023a4a:	f2c0 8097 	blt.w	8023b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023a4e:	9b06      	ldr	r3, [sp, #24]
 8023a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a52:	9b07      	ldr	r3, [sp, #28]
 8023a54:	9309      	str	r3, [sp, #36]	; 0x24
 8023a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	f340 80b8 	ble.w	8023bce <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023a5e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023a60:	142e      	asrs	r6, r5, #16
 8023a62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023a64:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023a68:	68c7      	ldr	r7, [r0, #12]
 8023a6a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023a6e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023a72:	6892      	ldr	r2, [r2, #8]
 8023a74:	f100 80fe 	bmi.w	8023c74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023a78:	f102 3cff 	add.w	ip, r2, #4294967295
 8023a7c:	4560      	cmp	r0, ip
 8023a7e:	f280 80f9 	bge.w	8023c74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023a82:	2e00      	cmp	r6, #0
 8023a84:	f2c0 80f6 	blt.w	8023c74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023a88:	f107 3cff 	add.w	ip, r7, #4294967295
 8023a8c:	4566      	cmp	r6, ip
 8023a8e:	f280 80f1 	bge.w	8023c74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023a92:	b212      	sxth	r2, r2
 8023a94:	fb06 0002 	mla	r0, r6, r2, r0
 8023a98:	9e08      	ldr	r6, [sp, #32]
 8023a9a:	5c37      	ldrb	r7, [r6, r0]
 8023a9c:	eb06 0e00 	add.w	lr, r6, r0
 8023aa0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023aa4:	eb04 0c07 	add.w	ip, r4, r7
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	f000 80d4 	beq.w	8023c56 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023aae:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023ab2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ab6:	4426      	add	r6, r4
 8023ab8:	2900      	cmp	r1, #0
 8023aba:	f000 80d5 	beq.w	8023c68 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023abe:	eb0e 0002 	add.w	r0, lr, r2
 8023ac2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023ac6:	7840      	ldrb	r0, [r0, #1]
 8023ac8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023acc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ad0:	4422      	add	r2, r4
 8023ad2:	4420      	add	r0, r4
 8023ad4:	b29b      	uxth	r3, r3
 8023ad6:	f814 a007 	ldrb.w	sl, [r4, r7]
 8023ada:	b289      	uxth	r1, r1
 8023adc:	7837      	ldrb	r7, [r6, #0]
 8023ade:	f896 8001 	ldrb.w	r8, [r6, #1]
 8023ae2:	fb03 f901 	mul.w	r9, r3, r1
 8023ae6:	011b      	lsls	r3, r3, #4
 8023ae8:	78b6      	ldrb	r6, [r6, #2]
 8023aea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023aee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023af2:	eba3 0309 	sub.w	r3, r3, r9
 8023af6:	b289      	uxth	r1, r1
 8023af8:	b29b      	uxth	r3, r3
 8023afa:	ebae 0e01 	sub.w	lr, lr, r1
 8023afe:	435f      	muls	r7, r3
 8023b00:	fa1f fe8e 	uxth.w	lr, lr
 8023b04:	fb03 f808 	mul.w	r8, r3, r8
 8023b08:	4373      	muls	r3, r6
 8023b0a:	fb0e 770a 	mla	r7, lr, sl, r7
 8023b0e:	f892 a000 	ldrb.w	sl, [r2]
 8023b12:	fb01 770a 	mla	r7, r1, sl, r7
 8023b16:	f890 a000 	ldrb.w	sl, [r0]
 8023b1a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023b1e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023b22:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023b26:	fb0e 8807 	mla	r8, lr, r7, r8
 8023b2a:	7857      	ldrb	r7, [r2, #1]
 8023b2c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023b30:	fb0e 330c 	mla	r3, lr, ip, r3
 8023b34:	fb01 8807 	mla	r8, r1, r7, r8
 8023b38:	7847      	ldrb	r7, [r0, #1]
 8023b3a:	fb09 8707 	mla	r7, r9, r7, r8
 8023b3e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023b42:	ea4a 0707 	orr.w	r7, sl, r7
 8023b46:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023b4a:	fb01 310a 	mla	r1, r1, sl, r3
 8023b4e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b54:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023b58:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8023b5c:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8023b60:	ea47 070a 	orr.w	r7, r7, sl
 8023b64:	601f      	str	r7, [r3, #0]
 8023b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b68:	3304      	adds	r3, #4
 8023b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8023b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b6e:	449b      	add	fp, r3
 8023b70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b72:	441d      	add	r5, r3
 8023b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b76:	3b01      	subs	r3, #1
 8023b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b7a:	e76c      	b.n	8023a56 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023b7e:	449b      	add	fp, r3
 8023b80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b82:	441d      	add	r5, r3
 8023b84:	9b06      	ldr	r3, [sp, #24]
 8023b86:	3b01      	subs	r3, #1
 8023b88:	9306      	str	r3, [sp, #24]
 8023b8a:	9b07      	ldr	r3, [sp, #28]
 8023b8c:	3304      	adds	r3, #4
 8023b8e:	9307      	str	r3, [sp, #28]
 8023b90:	e741      	b.n	8023a16 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023b92:	d023      	beq.n	8023bdc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023b94:	9b06      	ldr	r3, [sp, #24]
 8023b96:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023b98:	3b01      	subs	r3, #1
 8023b9a:	fb00 b003 	mla	r0, r0, r3, fp
 8023b9e:	1400      	asrs	r0, r0, #16
 8023ba0:	f53f af55 	bmi.w	8023a4e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023ba4:	3901      	subs	r1, #1
 8023ba6:	4288      	cmp	r0, r1
 8023ba8:	f6bf af51 	bge.w	8023a4e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023bac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023bae:	fb01 5303 	mla	r3, r1, r3, r5
 8023bb2:	141b      	asrs	r3, r3, #16
 8023bb4:	f53f af4b 	bmi.w	8023a4e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023bb8:	3a01      	subs	r2, #1
 8023bba:	4293      	cmp	r3, r2
 8023bbc:	f6bf af47 	bge.w	8023a4e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023bc0:	9b06      	ldr	r3, [sp, #24]
 8023bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8023bc4:	9b07      	ldr	r3, [sp, #28]
 8023bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8023bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	dc6f      	bgt.n	8023cae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8023bce:	9b06      	ldr	r3, [sp, #24]
 8023bd0:	9a07      	ldr	r2, [sp, #28]
 8023bd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023bda:	9307      	str	r3, [sp, #28]
 8023bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	f340 80ee 	ble.w	8023dc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023be4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023be8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023bea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023bee:	eeb0 6a62 	vmov.f32	s12, s5
 8023bf2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023bf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023bfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023bfe:	ee16 ba10 	vmov	fp, s12
 8023c02:	eeb0 6a43 	vmov.f32	s12, s6
 8023c06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023c0a:	ee16 5a10 	vmov	r5, s12
 8023c0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023c12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023c16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023c1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023c1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023c22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023c26:	ee12 2a90 	vmov	r2, s5
 8023c2a:	eef0 2a47 	vmov.f32	s5, s14
 8023c2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c32:	ee13 2a10 	vmov	r2, s6
 8023c36:	931b      	str	r3, [sp, #108]	; 0x6c
 8023c38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023c3a:	eeb0 3a67 	vmov.f32	s6, s15
 8023c3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c42:	931c      	str	r3, [sp, #112]	; 0x70
 8023c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c48:	3b01      	subs	r3, #1
 8023c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8023c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023c4e:	bf08      	it	eq
 8023c50:	4613      	moveq	r3, r2
 8023c52:	9306      	str	r3, [sp, #24]
 8023c54:	e6d1      	b.n	80239fa <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023c56:	b151      	cbz	r1, 8023c6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8023c58:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023c5c:	4660      	mov	r0, ip
 8023c5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c62:	4422      	add	r2, r4
 8023c64:	4666      	mov	r6, ip
 8023c66:	e735      	b.n	8023ad4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023c68:	4660      	mov	r0, ip
 8023c6a:	4662      	mov	r2, ip
 8023c6c:	e732      	b.n	8023ad4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023c6e:	4660      	mov	r0, ip
 8023c70:	4662      	mov	r2, ip
 8023c72:	e7f7      	b.n	8023c64 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023c74:	f110 0c01 	adds.w	ip, r0, #1
 8023c78:	f53f af75 	bmi.w	8023b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023c7c:	4562      	cmp	r2, ip
 8023c7e:	f6ff af72 	blt.w	8023b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023c82:	f116 0c01 	adds.w	ip, r6, #1
 8023c86:	f53f af6e 	bmi.w	8023b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023c8a:	4567      	cmp	r7, ip
 8023c8c:	f6ff af6b 	blt.w	8023b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023c90:	b23f      	sxth	r7, r7
 8023c92:	b212      	sxth	r2, r2
 8023c94:	9701      	str	r7, [sp, #4]
 8023c96:	9200      	str	r2, [sp, #0]
 8023c98:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023c9c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023ca0:	4623      	mov	r3, r4
 8023ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ca4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8023ca8:	f7ff fdd5 	bl	8023856 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8023cac:	e75b      	b.n	8023b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023cae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023cb0:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023cb4:	1428      	asrs	r0, r5, #16
 8023cb6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023cba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023cbe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023cc2:	fb02 6000 	mla	r0, r2, r0, r6
 8023cc6:	9e08      	ldr	r6, [sp, #32]
 8023cc8:	5c37      	ldrb	r7, [r6, r0]
 8023cca:	eb06 0e00 	add.w	lr, r6, r0
 8023cce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023cd2:	eb04 0c07 	add.w	ip, r4, r7
 8023cd6:	2b00      	cmp	r3, #0
 8023cd8:	d063      	beq.n	8023da2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8023cda:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023cde:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ce2:	4426      	add	r6, r4
 8023ce4:	2900      	cmp	r1, #0
 8023ce6:	d065      	beq.n	8023db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023ce8:	eb0e 0002 	add.w	r0, lr, r2
 8023cec:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023cf0:	7840      	ldrb	r0, [r0, #1]
 8023cf2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023cf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023cfa:	4422      	add	r2, r4
 8023cfc:	4420      	add	r0, r4
 8023cfe:	b29b      	uxth	r3, r3
 8023d00:	f814 a007 	ldrb.w	sl, [r4, r7]
 8023d04:	b289      	uxth	r1, r1
 8023d06:	7837      	ldrb	r7, [r6, #0]
 8023d08:	f896 8001 	ldrb.w	r8, [r6, #1]
 8023d0c:	fb03 f901 	mul.w	r9, r3, r1
 8023d10:	011b      	lsls	r3, r3, #4
 8023d12:	78b6      	ldrb	r6, [r6, #2]
 8023d14:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023d18:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023d1c:	eba3 0309 	sub.w	r3, r3, r9
 8023d20:	b289      	uxth	r1, r1
 8023d22:	b29b      	uxth	r3, r3
 8023d24:	ebae 0e01 	sub.w	lr, lr, r1
 8023d28:	435f      	muls	r7, r3
 8023d2a:	fa1f fe8e 	uxth.w	lr, lr
 8023d2e:	fb03 f808 	mul.w	r8, r3, r8
 8023d32:	4373      	muls	r3, r6
 8023d34:	7896      	ldrb	r6, [r2, #2]
 8023d36:	fb0e 770a 	mla	r7, lr, sl, r7
 8023d3a:	f892 a000 	ldrb.w	sl, [r2]
 8023d3e:	fb01 770a 	mla	r7, r1, sl, r7
 8023d42:	f890 a000 	ldrb.w	sl, [r0]
 8023d46:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023d4a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023d4e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023d52:	fb0e 8807 	mla	r8, lr, r7, r8
 8023d56:	7857      	ldrb	r7, [r2, #1]
 8023d58:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023d5c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023d60:	fb01 8807 	mla	r8, r1, r7, r8
 8023d64:	7847      	ldrb	r7, [r0, #1]
 8023d66:	fb01 3306 	mla	r3, r1, r6, r3
 8023d6a:	fb09 8707 	mla	r7, r9, r7, r8
 8023d6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023d72:	ea4a 0707 	orr.w	r7, sl, r7
 8023d76:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023d7a:	fb09 3a0a 	mla	sl, r9, sl, r3
 8023d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d80:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8023d84:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8023d88:	ea47 070a 	orr.w	r7, r7, sl
 8023d8c:	f843 7b04 	str.w	r7, [r3], #4
 8023d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023d94:	449b      	add	fp, r3
 8023d96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d98:	441d      	add	r5, r3
 8023d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d9c:	3b01      	subs	r3, #1
 8023d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8023da0:	e712      	b.n	8023bc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023da2:	b151      	cbz	r1, 8023dba <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8023da4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023da8:	4660      	mov	r0, ip
 8023daa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023dae:	4422      	add	r2, r4
 8023db0:	4666      	mov	r6, ip
 8023db2:	e7a4      	b.n	8023cfe <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023db4:	4660      	mov	r0, ip
 8023db6:	4662      	mov	r2, ip
 8023db8:	e7a1      	b.n	8023cfe <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023dba:	4660      	mov	r0, ip
 8023dbc:	4662      	mov	r2, ip
 8023dbe:	e7f7      	b.n	8023db0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8023dc0:	b00f      	add	sp, #60	; 0x3c
 8023dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023dc6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8023dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dca:	b085      	sub	sp, #20
 8023dcc:	6808      	ldr	r0, [r1, #0]
 8023dce:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 8023dd2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023dd6:	f1b9 0f00 	cmp.w	r9, #0
 8023dda:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8023dde:	fb09 6408 	mla	r4, r9, r8, r6
 8023de2:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8023de6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8023dea:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8023dee:	eb02 0a04 	add.w	sl, r2, r4
 8023df2:	f2c0 8103 	blt.w	8023ffc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8023df6:	45cb      	cmp	fp, r9
 8023df8:	f340 8100 	ble.w	8023ffc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8023dfc:	2e00      	cmp	r6, #0
 8023dfe:	f2c0 80fb 	blt.w	8023ff8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8023e02:	45b0      	cmp	r8, r6
 8023e04:	f340 80f8 	ble.w	8023ff8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8023e08:	5d12      	ldrb	r2, [r2, r4]
 8023e0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023e0e:	1c72      	adds	r2, r6, #1
 8023e10:	f100 80f5 	bmi.w	8023ffe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8023e14:	4590      	cmp	r8, r2
 8023e16:	f340 80f2 	ble.w	8023ffe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8023e1a:	f1bc 0f00 	cmp.w	ip, #0
 8023e1e:	f000 80ee 	beq.w	8023ffe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8023e22:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023e26:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023e2a:	f119 0901 	adds.w	r9, r9, #1
 8023e2e:	f100 80ea 	bmi.w	8024006 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023e32:	45cb      	cmp	fp, r9
 8023e34:	f340 80e7 	ble.w	8024006 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023e38:	f1be 0f00 	cmp.w	lr, #0
 8023e3c:	f000 80e3 	beq.w	8024006 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023e40:	2e00      	cmp	r6, #0
 8023e42:	f2c0 80de 	blt.w	8024002 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8023e46:	45b0      	cmp	r8, r6
 8023e48:	f340 80db 	ble.w	8024002 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8023e4c:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8023e50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023e54:	3601      	adds	r6, #1
 8023e56:	d409      	bmi.n	8023e6c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8023e58:	45b0      	cmp	r8, r6
 8023e5a:	dd07      	ble.n	8023e6c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8023e5c:	f1bc 0f00 	cmp.w	ip, #0
 8023e60:	d004      	beq.n	8023e6c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8023e62:	44d0      	add	r8, sl
 8023e64:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023e68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8023e6c:	fa1f fc8c 	uxth.w	ip, ip
 8023e70:	fa1f f38e 	uxth.w	r3, lr
 8023e74:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8023e78:	fb03 fe0c 	mul.w	lr, r3, ip
 8023e7c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023e80:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023e84:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8023e88:	ebac 060e 	sub.w	r6, ip, lr
 8023e8c:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8023e90:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023e94:	b29b      	uxth	r3, r3
 8023e96:	b2b6      	uxth	r6, r6
 8023e98:	ebac 0c03 	sub.w	ip, ip, r3
 8023e9c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023ea0:	9601      	str	r6, [sp, #4]
 8023ea2:	fa1f f68c 	uxth.w	r6, ip
 8023ea6:	9602      	str	r6, [sp, #8]
 8023ea8:	9e01      	ldr	r6, [sp, #4]
 8023eaa:	fb06 fc0a 	mul.w	ip, r6, sl
 8023eae:	9e02      	ldr	r6, [sp, #8]
 8023eb0:	fb06 cc0b 	mla	ip, r6, fp, ip
 8023eb4:	fb03 cc09 	mla	ip, r3, r9, ip
 8023eb8:	fb0e cc08 	mla	ip, lr, r8, ip
 8023ebc:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8023ec0:	9603      	str	r6, [sp, #12]
 8023ec2:	2e00      	cmp	r6, #0
 8023ec4:	f000 8095 	beq.w	8023ff2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8023ec8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023ecc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023ed0:	fb0b fc0c 	mul.w	ip, fp, ip
 8023ed4:	fb0b f505 	mul.w	r5, fp, r5
 8023ed8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023edc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023ee0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023ee4:	44dc      	add	ip, fp
 8023ee6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023eea:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8023eee:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023ef2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023ef6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023efa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023efe:	fb0a fc0c 	mul.w	ip, sl, ip
 8023f02:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023f06:	fb0a fa04 	mul.w	sl, sl, r4
 8023f0a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023f0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023f12:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8023f16:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023f1a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023f1e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8023f22:	4465      	add	r5, ip
 8023f24:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8023f28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023f2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f30:	fb09 fc0c 	mul.w	ip, r9, ip
 8023f34:	0a2d      	lsrs	r5, r5, #8
 8023f36:	fb09 f902 	mul.w	r9, r9, r2
 8023f3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f3e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8023f42:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023f46:	f509 7280 	add.w	r2, r9, #256	; 0x100
 8023f4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023f4e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023f52:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023f56:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 8023f5a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023f5e:	4464      	add	r4, ip
 8023f60:	fb08 f202 	mul.w	r2, r8, r2
 8023f64:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023f68:	fb08 f800 	mul.w	r8, r8, r0
 8023f6c:	0a24      	lsrs	r4, r4, #8
 8023f6e:	0a10      	lsrs	r0, r2, #8
 8023f70:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8023f74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023f78:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023f7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023f80:	4402      	add	r2, r0
 8023f82:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8023f86:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8023f8a:	9801      	ldr	r0, [sp, #4]
 8023f8c:	0a12      	lsrs	r2, r2, #8
 8023f8e:	4345      	muls	r5, r0
 8023f90:	9802      	ldr	r0, [sp, #8]
 8023f92:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023f96:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023f9a:	fb06 5500 	mla	r5, r6, r0, r5
 8023f9e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023fa2:	fb02 520e 	mla	r2, r2, lr, r5
 8023fa6:	fb04 2403 	mla	r4, r4, r3, r2
 8023faa:	9a01      	ldr	r2, [sp, #4]
 8023fac:	fb02 f60a 	mul.w	r6, r2, sl
 8023fb0:	0a24      	lsrs	r4, r4, #8
 8023fb2:	9a03      	ldr	r2, [sp, #12]
 8023fb4:	fb00 660b 	mla	r6, r0, fp, r6
 8023fb8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023fbc:	fb07 fc02 	mul.w	ip, r7, r2
 8023fc0:	fb0e 6e08 	mla	lr, lr, r8, r6
 8023fc4:	fb03 e309 	mla	r3, r3, r9, lr
 8023fc8:	0a1b      	lsrs	r3, r3, #8
 8023fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fce:	4323      	orrs	r3, r4
 8023fd0:	f10c 0401 	add.w	r4, ip, #1
 8023fd4:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8023fd8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8023fdc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023fe0:	1224      	asrs	r4, r4, #8
 8023fe2:	b2d5      	uxtb	r5, r2
 8023fe4:	2cff      	cmp	r4, #255	; 0xff
 8023fe6:	b2c6      	uxtb	r6, r0
 8023fe8:	d10f      	bne.n	802400a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 8023fea:	700b      	strb	r3, [r1, #0]
 8023fec:	7048      	strb	r0, [r1, #1]
 8023fee:	708a      	strb	r2, [r1, #2]
 8023ff0:	70cc      	strb	r4, [r1, #3]
 8023ff2:	b005      	add	sp, #20
 8023ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ff8:	4605      	mov	r5, r0
 8023ffa:	e708      	b.n	8023e0e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 8023ffc:	4605      	mov	r5, r0
 8023ffe:	4604      	mov	r4, r0
 8024000:	e713      	b.n	8023e2a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 8024002:	4602      	mov	r2, r0
 8024004:	e726      	b.n	8023e54 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 8024006:	4602      	mov	r2, r0
 8024008:	e730      	b.n	8023e6c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802400a:	b2e2      	uxtb	r2, r4
 802400c:	2c00      	cmp	r4, #0
 802400e:	d0f0      	beq.n	8023ff2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8024010:	78cc      	ldrb	r4, [r1, #3]
 8024012:	b2db      	uxtb	r3, r3
 8024014:	fb17 f606 	smulbb	r6, r7, r6
 8024018:	fb02 fc04 	mul.w	ip, r2, r4
 802401c:	4422      	add	r2, r4
 802401e:	f10c 0001 	add.w	r0, ip, #1
 8024022:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8024026:	1200      	asrs	r0, r0, #8
 8024028:	1a24      	subs	r4, r4, r0
 802402a:	1a12      	subs	r2, r2, r0
 802402c:	7808      	ldrb	r0, [r1, #0]
 802402e:	b2d2      	uxtb	r2, r2
 8024030:	4360      	muls	r0, r4
 8024032:	70ca      	strb	r2, [r1, #3]
 8024034:	fb07 0303 	mla	r3, r7, r3, r0
 8024038:	7848      	ldrb	r0, [r1, #1]
 802403a:	fb17 f705 	smulbb	r7, r7, r5
 802403e:	fb04 6000 	mla	r0, r4, r0, r6
 8024042:	fb93 f3f2 	sdiv	r3, r3, r2
 8024046:	2bff      	cmp	r3, #255	; 0xff
 8024048:	bfd6      	itet	le
 802404a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802404e:	23ff      	movgt	r3, #255	; 0xff
 8024050:	b2db      	uxtble	r3, r3
 8024052:	fb90 f0f2 	sdiv	r0, r0, r2
 8024056:	700b      	strb	r3, [r1, #0]
 8024058:	28ff      	cmp	r0, #255	; 0xff
 802405a:	788b      	ldrb	r3, [r1, #2]
 802405c:	bfd4      	ite	le
 802405e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024062:	20ff      	movgt	r0, #255	; 0xff
 8024064:	fb04 7303 	mla	r3, r4, r3, r7
 8024068:	bfd8      	it	le
 802406a:	b2c0      	uxtble	r0, r0
 802406c:	fb93 f3f2 	sdiv	r3, r3, r2
 8024070:	2bff      	cmp	r3, #255	; 0xff
 8024072:	7048      	strb	r0, [r1, #1]
 8024074:	bfd6      	itet	le
 8024076:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802407a:	23ff      	movgt	r3, #255	; 0xff
 802407c:	b2db      	uxtble	r3, r3
 802407e:	708b      	strb	r3, [r1, #2]
 8024080:	e7b7      	b.n	8023ff2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

08024082 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024086:	b09d      	sub	sp, #116	; 0x74
 8024088:	921a      	str	r2, [sp, #104]	; 0x68
 802408a:	9308      	str	r3, [sp, #32]
 802408c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802408e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8024092:	901b      	str	r0, [sp, #108]	; 0x6c
 8024094:	9118      	str	r1, [sp, #96]	; 0x60
 8024096:	6850      	ldr	r0, [r2, #4]
 8024098:	9309      	str	r3, [sp, #36]	; 0x24
 802409a:	6812      	ldr	r2, [r2, #0]
 802409c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80240a0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80240a4:	fb00 1303 	mla	r3, r0, r3, r1
 80240a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80240ac:	930c      	str	r3, [sp, #48]	; 0x30
 80240ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80240b0:	681b      	ldr	r3, [r3, #0]
 80240b2:	9311      	str	r3, [sp, #68]	; 0x44
 80240b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80240b6:	685f      	ldr	r7, [r3, #4]
 80240b8:	3704      	adds	r7, #4
 80240ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80240bc:	2b00      	cmp	r3, #0
 80240be:	dc03      	bgt.n	80240c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80240c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	f340 83cd 	ble.w	8024862 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80240c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80240ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80240ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80240d2:	1e48      	subs	r0, r1, #1
 80240d4:	f102 3cff 	add.w	ip, r2, #4294967295
 80240d8:	9b08      	ldr	r3, [sp, #32]
 80240da:	2b00      	cmp	r3, #0
 80240dc:	f340 816c 	ble.w	80243b8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 80240e0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80240e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80240e8:	d406      	bmi.n	80240f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80240ea:	4586      	cmp	lr, r0
 80240ec:	da04      	bge.n	80240f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	db02      	blt.n	80240f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80240f2:	4563      	cmp	r3, ip
 80240f4:	f2c0 8161 	blt.w	80243ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80240f8:	f11e 0e01 	adds.w	lr, lr, #1
 80240fc:	f100 8151 	bmi.w	80243a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024100:	4571      	cmp	r1, lr
 8024102:	f2c0 814e 	blt.w	80243a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024106:	3301      	adds	r3, #1
 8024108:	f100 814b 	bmi.w	80243a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802410c:	429a      	cmp	r2, r3
 802410e:	f2c0 8148 	blt.w	80243a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024112:	9b08      	ldr	r3, [sp, #32]
 8024114:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8024118:	9319      	str	r3, [sp, #100]	; 0x64
 802411a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802411c:	2b00      	cmp	r3, #0
 802411e:	f340 8169 	ble.w	80243f4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024122:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024124:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024128:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802412c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024130:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024134:	1423      	asrs	r3, r4, #16
 8024136:	f100 81f7 	bmi.w	8024528 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802413a:	f100 39ff 	add.w	r9, r0, #4294967295
 802413e:	454b      	cmp	r3, r9
 8024140:	f280 81f2 	bge.w	8024528 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8024144:	f1bc 0f00 	cmp.w	ip, #0
 8024148:	f2c0 81ee 	blt.w	8024528 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802414c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024150:	45cc      	cmp	ip, r9
 8024152:	f280 81e9 	bge.w	8024528 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8024156:	b200      	sxth	r0, r0
 8024158:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802415a:	fb0c 3300 	mla	r3, ip, r0, r3
 802415e:	eb05 0903 	add.w	r9, r5, r3
 8024162:	5ceb      	ldrb	r3, [r5, r3]
 8024164:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8024168:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802416c:	2a00      	cmp	r2, #0
 802416e:	f000 8187 	beq.w	8024480 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8024172:	f899 c001 	ldrb.w	ip, [r9, #1]
 8024176:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802417a:	950d      	str	r5, [sp, #52]	; 0x34
 802417c:	0e2d      	lsrs	r5, r5, #24
 802417e:	9514      	str	r5, [sp, #80]	; 0x50
 8024180:	b179      	cbz	r1, 80241a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024182:	eb09 0c00 	add.w	ip, r9, r0
 8024186:	f819 0000 	ldrb.w	r0, [r9, r0]
 802418a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802418e:	900a      	str	r0, [sp, #40]	; 0x28
 8024190:	0e00      	lsrs	r0, r0, #24
 8024192:	9012      	str	r0, [sp, #72]	; 0x48
 8024194:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024198:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802419c:	900e      	str	r0, [sp, #56]	; 0x38
 802419e:	0e00      	lsrs	r0, r0, #24
 80241a0:	9015      	str	r0, [sp, #84]	; 0x54
 80241a2:	b292      	uxth	r2, r2
 80241a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80241a6:	b289      	uxth	r1, r1
 80241a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80241aa:	fb02 fa01 	mul.w	sl, r2, r1
 80241ae:	0112      	lsls	r2, r2, #4
 80241b0:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80241b4:	eba2 090a 	sub.w	r9, r2, sl
 80241b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80241bc:	b289      	uxth	r1, r1
 80241be:	fa1f f989 	uxth.w	r9, r9
 80241c2:	1a52      	subs	r2, r2, r1
 80241c4:	fb09 f000 	mul.w	r0, r9, r0
 80241c8:	b292      	uxth	r2, r2
 80241ca:	fb02 000e 	mla	r0, r2, lr, r0
 80241ce:	fb01 0005 	mla	r0, r1, r5, r0
 80241d2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80241d4:	fb0a 0005 	mla	r0, sl, r5, r0
 80241d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80241dc:	2800      	cmp	r0, #0
 80241de:	f000 80d6 	beq.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80241e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80241e6:	d01b      	beq.n	8024220 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80241e8:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 80241ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80241f0:	fb0e fb0b 	mul.w	fp, lr, fp
 80241f4:	fb0e fe03 	mul.w	lr, lr, r3
 80241f8:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80241fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024200:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024204:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024208:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802420c:	445b      	add	r3, fp
 802420e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024212:	0a1b      	lsrs	r3, r3, #8
 8024214:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024218:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802421c:	ea43 030c 	orr.w	r3, r3, ip
 8024220:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024222:	2dff      	cmp	r5, #255	; 0xff
 8024224:	d021      	beq.n	802426a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024226:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024228:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802422c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802422e:	fb05 fc0c 	mul.w	ip, r5, ip
 8024232:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024234:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024238:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 802423c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802423e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024242:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024246:	fb05 fb0b 	mul.w	fp, r5, fp
 802424a:	44e6      	add	lr, ip
 802424c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024250:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024254:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024258:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802425c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024260:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024264:	ea4e 050b 	orr.w	r5, lr, fp
 8024268:	950d      	str	r5, [sp, #52]	; 0x34
 802426a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802426c:	2dff      	cmp	r5, #255	; 0xff
 802426e:	d021      	beq.n	80242b4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8024270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024272:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024276:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024278:	fb05 fc0c 	mul.w	ip, r5, ip
 802427c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802427e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024282:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024286:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024288:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802428c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024290:	fb05 fb0b 	mul.w	fp, r5, fp
 8024294:	44e6      	add	lr, ip
 8024296:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802429a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802429e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80242a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80242aa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80242ae:	ea4e 050b 	orr.w	r5, lr, fp
 80242b2:	950a      	str	r5, [sp, #40]	; 0x28
 80242b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80242b6:	2dff      	cmp	r5, #255	; 0xff
 80242b8:	d021      	beq.n	80242fe <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80242ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80242bc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80242c2:	fb05 fc0c 	mul.w	ip, r5, ip
 80242c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80242c8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80242cc:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80242d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80242d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80242d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242da:	fb05 fb0b 	mul.w	fp, r5, fp
 80242de:	44e6      	add	lr, ip
 80242e0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80242e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242e8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80242ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242f0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80242f4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80242f8:	ea4e 050b 	orr.w	r5, lr, fp
 80242fc:	950e      	str	r5, [sp, #56]	; 0x38
 80242fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024300:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024308:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802430c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802430e:	fb09 fc0c 	mul.w	ip, r9, ip
 8024312:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024316:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802431a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802431c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024320:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024324:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024326:	fb0a cc0e 	mla	ip, sl, lr, ip
 802432a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802432e:	fb09 f90e 	mul.w	r9, r9, lr
 8024332:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024336:	fb02 9303 	mla	r3, r2, r3, r9
 802433a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802433c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024340:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8024344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024346:	fb01 330b 	mla	r3, r1, fp, r3
 802434a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802434e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8024352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024354:	4358      	muls	r0, r3
 8024356:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802435a:	1c43      	adds	r3, r0, #1
 802435c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024360:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024364:	ea4c 0c0a 	orr.w	ip, ip, sl
 8024368:	1200      	asrs	r0, r0, #8
 802436a:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802436e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8024372:	28ff      	cmp	r0, #255	; 0xff
 8024374:	b2d9      	uxtb	r1, r3
 8024376:	fa5f fe82 	uxtb.w	lr, r2
 802437a:	f040 808c 	bne.w	8024496 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 802437e:	f888 c000 	strb.w	ip, [r8]
 8024382:	f888 2001 	strb.w	r2, [r8, #1]
 8024386:	f888 3002 	strb.w	r3, [r8, #2]
 802438a:	f888 0003 	strb.w	r0, [r8, #3]
 802438e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024390:	f108 0804 	add.w	r8, r8, #4
 8024394:	441c      	add	r4, r3
 8024396:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024398:	441e      	add	r6, r3
 802439a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802439c:	3b01      	subs	r3, #1
 802439e:	9319      	str	r3, [sp, #100]	; 0x64
 80243a0:	e6bb      	b.n	802411a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80243a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80243a4:	441c      	add	r4, r3
 80243a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80243a8:	441e      	add	r6, r3
 80243aa:	9b08      	ldr	r3, [sp, #32]
 80243ac:	3b01      	subs	r3, #1
 80243ae:	9308      	str	r3, [sp, #32]
 80243b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243b2:	3304      	adds	r3, #4
 80243b4:	930c      	str	r3, [sp, #48]	; 0x30
 80243b6:	e68f      	b.n	80240d8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80243b8:	d023      	beq.n	8024402 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80243ba:	9b08      	ldr	r3, [sp, #32]
 80243bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80243be:	3b01      	subs	r3, #1
 80243c0:	fb00 4003 	mla	r0, r0, r3, r4
 80243c4:	1400      	asrs	r0, r0, #16
 80243c6:	f53f aea4 	bmi.w	8024112 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80243ca:	3901      	subs	r1, #1
 80243cc:	4288      	cmp	r0, r1
 80243ce:	f6bf aea0 	bge.w	8024112 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80243d2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80243d4:	fb01 6303 	mla	r3, r1, r3, r6
 80243d8:	141b      	asrs	r3, r3, #16
 80243da:	f53f ae9a 	bmi.w	8024112 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80243de:	3a01      	subs	r2, #1
 80243e0:	4293      	cmp	r3, r2
 80243e2:	f6bf ae96 	bge.w	8024112 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80243e6:	9b08      	ldr	r3, [sp, #32]
 80243e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80243ea:	9319      	str	r3, [sp, #100]	; 0x64
 80243ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	f300 80ba 	bgt.w	8024568 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80243f4:	9b08      	ldr	r3, [sp, #32]
 80243f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80243fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8024400:	930c      	str	r3, [sp, #48]	; 0x30
 8024402:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024404:	2b00      	cmp	r3, #0
 8024406:	f340 822c 	ble.w	8024862 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 802440a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802440e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024410:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024414:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024418:	eef0 6a62 	vmov.f32	s13, s5
 802441c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024420:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024424:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024428:	ee16 4a90 	vmov	r4, s13
 802442c:	eef0 6a43 	vmov.f32	s13, s6
 8024430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024434:	ee16 6a90 	vmov	r6, s13
 8024438:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802443c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024440:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024444:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024448:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802444c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024450:	ee12 2a90 	vmov	r2, s5
 8024454:	eef0 2a47 	vmov.f32	s5, s14
 8024458:	fb92 f3f3 	sdiv	r3, r2, r3
 802445c:	ee13 2a10 	vmov	r2, s6
 8024460:	9329      	str	r3, [sp, #164]	; 0xa4
 8024462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024464:	eeb0 3a67 	vmov.f32	s6, s15
 8024468:	fb92 f3f3 	sdiv	r3, r2, r3
 802446c:	932a      	str	r3, [sp, #168]	; 0xa8
 802446e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024470:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024472:	3b01      	subs	r3, #1
 8024474:	9318      	str	r3, [sp, #96]	; 0x60
 8024476:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024478:	bf08      	it	eq
 802447a:	4613      	moveq	r3, r2
 802447c:	9308      	str	r3, [sp, #32]
 802447e:	e61c      	b.n	80240ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024480:	2900      	cmp	r1, #0
 8024482:	f43f ae8e 	beq.w	80241a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024486:	f819 0000 	ldrb.w	r0, [r9, r0]
 802448a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802448e:	900a      	str	r0, [sp, #40]	; 0x28
 8024490:	0e00      	lsrs	r0, r0, #24
 8024492:	9012      	str	r0, [sp, #72]	; 0x48
 8024494:	e685      	b.n	80241a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024496:	b2c3      	uxtb	r3, r0
 8024498:	2800      	cmp	r0, #0
 802449a:	f43f af78 	beq.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802449e:	f898 0003 	ldrb.w	r0, [r8, #3]
 80244a2:	fa5f fc8c 	uxtb.w	ip, ip
 80244a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80244a8:	fb03 f900 	mul.w	r9, r3, r0
 80244ac:	4403      	add	r3, r0
 80244ae:	f109 0201 	add.w	r2, r9, #1
 80244b2:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 80244b6:	1212      	asrs	r2, r2, #8
 80244b8:	1a80      	subs	r0, r0, r2
 80244ba:	1a9b      	subs	r3, r3, r2
 80244bc:	f898 2000 	ldrb.w	r2, [r8]
 80244c0:	b2db      	uxtb	r3, r3
 80244c2:	4342      	muls	r2, r0
 80244c4:	f888 3003 	strb.w	r3, [r8, #3]
 80244c8:	fb05 220c 	mla	r2, r5, ip, r2
 80244cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80244ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80244d2:	fb15 fe0e 	smulbb	lr, r5, lr
 80244d6:	2aff      	cmp	r2, #255	; 0xff
 80244d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80244da:	bfd4      	ite	le
 80244dc:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80244e0:	22ff      	movgt	r2, #255	; 0xff
 80244e2:	fb15 f101 	smulbb	r1, r5, r1
 80244e6:	bfd8      	it	le
 80244e8:	b2d2      	uxtble	r2, r2
 80244ea:	f888 2000 	strb.w	r2, [r8]
 80244ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 80244f2:	fb00 e202 	mla	r2, r0, r2, lr
 80244f6:	fb92 f2f3 	sdiv	r2, r2, r3
 80244fa:	2aff      	cmp	r2, #255	; 0xff
 80244fc:	bfd6      	itet	le
 80244fe:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024502:	22ff      	movgt	r2, #255	; 0xff
 8024504:	b2d2      	uxtble	r2, r2
 8024506:	f888 2001 	strb.w	r2, [r8, #1]
 802450a:	f898 2002 	ldrb.w	r2, [r8, #2]
 802450e:	fb00 1202 	mla	r2, r0, r2, r1
 8024512:	fb92 f2f3 	sdiv	r2, r2, r3
 8024516:	2aff      	cmp	r2, #255	; 0xff
 8024518:	bfd6      	itet	le
 802451a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802451e:	22ff      	movgt	r2, #255	; 0xff
 8024520:	b2d2      	uxtble	r2, r2
 8024522:	f888 2002 	strb.w	r2, [r8, #2]
 8024526:	e732      	b.n	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024528:	f113 0901 	adds.w	r9, r3, #1
 802452c:	f53f af2f 	bmi.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024530:	4548      	cmp	r0, r9
 8024532:	f6ff af2c 	blt.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024536:	f11c 0901 	adds.w	r9, ip, #1
 802453a:	f53f af28 	bmi.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802453e:	45ce      	cmp	lr, r9
 8024540:	f6ff af25 	blt.w	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024544:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024546:	b200      	sxth	r0, r0
 8024548:	9302      	str	r3, [sp, #8]
 802454a:	fa0f f38e 	sxth.w	r3, lr
 802454e:	9000      	str	r0, [sp, #0]
 8024550:	9301      	str	r3, [sp, #4]
 8024552:	463b      	mov	r3, r7
 8024554:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024556:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802455a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802455e:	4641      	mov	r1, r8
 8024560:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024562:	f7ff fc30 	bl	8023dc6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8024566:	e712      	b.n	802438e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024568:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802456a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 802456e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024570:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024574:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8024578:	1433      	asrs	r3, r6, #16
 802457a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802457e:	fb0c e303 	mla	r3, ip, r3, lr
 8024582:	eb05 0e03 	add.w	lr, r5, r3
 8024586:	5ceb      	ldrb	r3, [r5, r3]
 8024588:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802458c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024590:	2a00      	cmp	r2, #0
 8024592:	f000 8116 	beq.w	80247c2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8024596:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802459a:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 802459e:	950f      	str	r5, [sp, #60]	; 0x3c
 80245a0:	0e2d      	lsrs	r5, r5, #24
 80245a2:	9516      	str	r5, [sp, #88]	; 0x58
 80245a4:	b178      	cbz	r0, 80245c6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 80245a6:	eb0e 090c 	add.w	r9, lr, ip
 80245aa:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80245ae:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80245b2:	f899 c001 	ldrb.w	ip, [r9, #1]
 80245b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80245b8:	0e2d      	lsrs	r5, r5, #24
 80245ba:	9513      	str	r5, [sp, #76]	; 0x4c
 80245bc:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80245c0:	9510      	str	r5, [sp, #64]	; 0x40
 80245c2:	0e2d      	lsrs	r5, r5, #24
 80245c4:	9517      	str	r5, [sp, #92]	; 0x5c
 80245c6:	b292      	uxth	r2, r2
 80245c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80245ca:	b280      	uxth	r0, r0
 80245cc:	fb02 fa00 	mul.w	sl, r2, r0
 80245d0:	0112      	lsls	r2, r2, #4
 80245d2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80245d6:	eba2 090a 	sub.w	r9, r2, sl
 80245da:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80245de:	fa1f fc80 	uxth.w	ip, r0
 80245e2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80245e4:	fa1f f989 	uxth.w	r9, r9
 80245e8:	eba2 020c 	sub.w	r2, r2, ip
 80245ec:	fb09 f000 	mul.w	r0, r9, r0
 80245f0:	b292      	uxth	r2, r2
 80245f2:	fb02 0008 	mla	r0, r2, r8, r0
 80245f6:	fb0c 0005 	mla	r0, ip, r5, r0
 80245fa:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80245fc:	fb0a 0005 	mla	r0, sl, r5, r0
 8024600:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024604:	2800      	cmp	r0, #0
 8024606:	f000 80d3 	beq.w	80247b0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802460a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802460e:	d01b      	beq.n	8024648 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024610:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8024614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024618:	fb08 fb0b 	mul.w	fp, r8, fp
 802461c:	fb08 f803 	mul.w	r8, r8, r3
 8024620:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8024624:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024628:	f508 7e80 	add.w	lr, r8, #256	; 0x100
 802462c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024630:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 8024634:	445b      	add	r3, fp
 8024636:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802463a:	0a1b      	lsrs	r3, r3, #8
 802463c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024640:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024644:	ea43 030e 	orr.w	r3, r3, lr
 8024648:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802464a:	2dff      	cmp	r5, #255	; 0xff
 802464c:	d021      	beq.n	8024692 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802464e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024650:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024654:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024656:	fb05 fe0e 	mul.w	lr, r5, lr
 802465a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802465c:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024660:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024664:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024666:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802466a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802466e:	fb05 fb0b 	mul.w	fp, r5, fp
 8024672:	44f0      	add	r8, lr
 8024674:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8024678:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802467c:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024680:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024684:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024688:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802468c:	ea48 050b 	orr.w	r5, r8, fp
 8024690:	950f      	str	r5, [sp, #60]	; 0x3c
 8024692:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024694:	2dff      	cmp	r5, #255	; 0xff
 8024696:	d021      	beq.n	80246dc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8024698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802469a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802469e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246a0:	fb05 fe0e 	mul.w	lr, r5, lr
 80246a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80246a6:	ea4f 281e 	mov.w	r8, lr, lsr #8
 80246aa:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80246ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246b0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80246b4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80246b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80246bc:	44f0      	add	r8, lr
 80246be:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 80246c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80246c6:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 80246ca:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80246ce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80246d2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80246d6:	ea48 050b 	orr.w	r5, r8, fp
 80246da:	950b      	str	r5, [sp, #44]	; 0x2c
 80246dc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80246de:	2dff      	cmp	r5, #255	; 0xff
 80246e0:	d021      	beq.n	8024726 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 80246e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80246e4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80246e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80246ea:	fb05 fe0e 	mul.w	lr, r5, lr
 80246ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80246f0:	ea4f 281e 	mov.w	r8, lr, lsr #8
 80246f4:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80246f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80246fa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80246fe:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024702:	fb05 fb0b 	mul.w	fp, r5, fp
 8024706:	44f0      	add	r8, lr
 8024708:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 802470c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024710:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024714:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024718:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802471c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024720:	ea48 050b 	orr.w	r5, r8, fp
 8024724:	9510      	str	r5, [sp, #64]	; 0x40
 8024726:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024728:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802472c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024730:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024734:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024736:	fb09 fe0e 	mul.w	lr, r9, lr
 802473a:	fb02 ee08 	mla	lr, r2, r8, lr
 802473e:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8024742:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024744:	fb0c ee08 	mla	lr, ip, r8, lr
 8024748:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 802474c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802474e:	fb0a ee08 	mla	lr, sl, r8, lr
 8024752:	f405 487f 	and.w	r8, r5, #65280	; 0xff00
 8024756:	fb09 f908 	mul.w	r9, r9, r8
 802475a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802475e:	fb02 9303 	mla	r3, r2, r3, r9
 8024762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024768:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 802476c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802476e:	fb0c 330b 	mla	r3, ip, fp, r3
 8024772:	f402 487f 	and.w	r8, r2, #65280	; 0xff00
 8024776:	fb0a 3808 	mla	r8, sl, r8, r3
 802477a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802477c:	4358      	muls	r0, r3
 802477e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024782:	1c43      	adds	r3, r0, #1
 8024784:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024788:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802478c:	ea4e 0e08 	orr.w	lr, lr, r8
 8024790:	1200      	asrs	r0, r0, #8
 8024792:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8024796:	f3ce 2207 	ubfx	r2, lr, #8, #8
 802479a:	28ff      	cmp	r0, #255	; 0xff
 802479c:	fa5f fc83 	uxtb.w	ip, r3
 80247a0:	fa5f f882 	uxtb.w	r8, r2
 80247a4:	d118      	bne.n	80247d8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80247a6:	f881 e000 	strb.w	lr, [r1]
 80247aa:	704a      	strb	r2, [r1, #1]
 80247ac:	708b      	strb	r3, [r1, #2]
 80247ae:	70c8      	strb	r0, [r1, #3]
 80247b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80247b2:	3104      	adds	r1, #4
 80247b4:	441c      	add	r4, r3
 80247b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80247b8:	441e      	add	r6, r3
 80247ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80247bc:	3b01      	subs	r3, #1
 80247be:	9319      	str	r3, [sp, #100]	; 0x64
 80247c0:	e614      	b.n	80243ec <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80247c2:	2800      	cmp	r0, #0
 80247c4:	f43f aeff 	beq.w	80245c6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 80247c8:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80247cc:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80247d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80247d2:	0e2d      	lsrs	r5, r5, #24
 80247d4:	9513      	str	r5, [sp, #76]	; 0x4c
 80247d6:	e6f6      	b.n	80245c6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 80247d8:	b2c3      	uxtb	r3, r0
 80247da:	2800      	cmp	r0, #0
 80247dc:	d0e8      	beq.n	80247b0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80247de:	78c8      	ldrb	r0, [r1, #3]
 80247e0:	fa5f fe8e 	uxtb.w	lr, lr
 80247e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80247e6:	fb03 f900 	mul.w	r9, r3, r0
 80247ea:	4403      	add	r3, r0
 80247ec:	f109 0201 	add.w	r2, r9, #1
 80247f0:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 80247f4:	1212      	asrs	r2, r2, #8
 80247f6:	1a9b      	subs	r3, r3, r2
 80247f8:	1a82      	subs	r2, r0, r2
 80247fa:	7808      	ldrb	r0, [r1, #0]
 80247fc:	b2db      	uxtb	r3, r3
 80247fe:	4350      	muls	r0, r2
 8024800:	70cb      	strb	r3, [r1, #3]
 8024802:	fb05 0e0e 	mla	lr, r5, lr, r0
 8024806:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024808:	7848      	ldrb	r0, [r1, #1]
 802480a:	fb15 f808 	smulbb	r8, r5, r8
 802480e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024810:	fb9e fef3 	sdiv	lr, lr, r3
 8024814:	fb02 8000 	mla	r0, r2, r0, r8
 8024818:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802481c:	fb15 fc0c 	smulbb	ip, r5, ip
 8024820:	bfd4      	ite	le
 8024822:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8024826:	f04f 0eff 	movgt.w	lr, #255	; 0xff
 802482a:	fb90 f0f3 	sdiv	r0, r0, r3
 802482e:	bfd8      	it	le
 8024830:	fa5f fe8e 	uxtble.w	lr, lr
 8024834:	28ff      	cmp	r0, #255	; 0xff
 8024836:	bfd4      	ite	le
 8024838:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802483c:	20ff      	movgt	r0, #255	; 0xff
 802483e:	f881 e000 	strb.w	lr, [r1]
 8024842:	bfd8      	it	le
 8024844:	b2c0      	uxtble	r0, r0
 8024846:	7048      	strb	r0, [r1, #1]
 8024848:	7888      	ldrb	r0, [r1, #2]
 802484a:	fb02 c200 	mla	r2, r2, r0, ip
 802484e:	fb92 f2f3 	sdiv	r2, r2, r3
 8024852:	2aff      	cmp	r2, #255	; 0xff
 8024854:	bfd6      	itet	le
 8024856:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802485a:	22ff      	movgt	r2, #255	; 0xff
 802485c:	b2d2      	uxtble	r2, r2
 802485e:	708a      	strb	r2, [r1, #2]
 8024860:	e7a6      	b.n	80247b0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024862:	b01d      	add	sp, #116	; 0x74
 8024864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024868 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8024868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802486c:	b087      	sub	sp, #28
 802486e:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
 8024872:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8024876:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 802487a:	2e00      	cmp	r6, #0
 802487c:	9002      	str	r0, [sp, #8]
 802487e:	fb06 8005 	mla	r0, r6, r5, r8
 8024882:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024886:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802488a:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 802488e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024892:	9703      	str	r7, [sp, #12]
 8024894:	eb03 0700 	add.w	r7, r3, r0
 8024898:	9704      	str	r7, [sp, #16]
 802489a:	f2c0 8133 	blt.w	8024b04 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 802489e:	45b3      	cmp	fp, r6
 80248a0:	f340 8130 	ble.w	8024b04 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 80248a4:	f1b8 0f00 	cmp.w	r8, #0
 80248a8:	f2c0 8128 	blt.w	8024afc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 80248ac:	4545      	cmp	r5, r8
 80248ae:	f340 8125 	ble.w	8024afc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 80248b2:	f813 c000 	ldrb.w	ip, [r3, r0]
 80248b6:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80248ba:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 80248be:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80248c2:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 80248c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80248ca:	fb0c f303 	mul.w	r3, ip, r3
 80248ce:	fb0a f202 	mul.w	r2, sl, r2
 80248d2:	f103 0a20 	add.w	sl, r3, #32
 80248d6:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 80248da:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80248de:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 80248e2:	4402      	add	r2, r0
 80248e4:	0a1b      	lsrs	r3, r3, #8
 80248e6:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 80248ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80248ee:	ea47 0a03 	orr.w	sl, r7, r3
 80248f2:	f118 0301 	adds.w	r3, r8, #1
 80248f6:	f100 810a 	bmi.w	8024b0e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 80248fa:	429d      	cmp	r5, r3
 80248fc:	f340 8107 	ble.w	8024b0e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8024900:	2c00      	cmp	r4, #0
 8024902:	f000 8107 	beq.w	8024b14 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8024906:	9b04      	ldr	r3, [sp, #16]
 8024908:	785a      	ldrb	r2, [r3, #1]
 802490a:	9b03      	ldr	r3, [sp, #12]
 802490c:	10d7      	asrs	r7, r2, #3
 802490e:	885b      	ldrh	r3, [r3, #2]
 8024910:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8024914:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024918:	4347      	muls	r7, r0
 802491a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802491e:	4353      	muls	r3, r2
 8024920:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8024924:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8024928:	444f      	add	r7, r9
 802492a:	f103 0920 	add.w	r9, r3, #32
 802492e:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8024932:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8024936:	0a1b      	lsrs	r3, r3, #8
 8024938:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802493c:	4303      	orrs	r3, r0
 802493e:	9301      	str	r3, [sp, #4]
 8024940:	3601      	adds	r6, #1
 8024942:	f100 80ed 	bmi.w	8024b20 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8024946:	45b3      	cmp	fp, r6
 8024948:	f340 80ea 	ble.w	8024b20 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 802494c:	f1be 0f00 	cmp.w	lr, #0
 8024950:	f000 80eb 	beq.w	8024b2a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8024954:	f1b8 0f00 	cmp.w	r8, #0
 8024958:	f2c0 80df 	blt.w	8024b1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 802495c:	4545      	cmp	r5, r8
 802495e:	f340 80dc 	ble.w	8024b1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8024962:	9b04      	ldr	r3, [sp, #16]
 8024964:	5d5f      	ldrb	r7, [r3, r5]
 8024966:	9b03      	ldr	r3, [sp, #12]
 8024968:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802496c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8024970:	f423 66fc 	bic.w	r6, r3, #2016	; 0x7e0
 8024974:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024978:	fb09 f906 	mul.w	r9, r9, r6
 802497c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024980:	437b      	muls	r3, r7
 8024982:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8024986:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802498a:	44d9      	add	r9, fp
 802498c:	f103 0b20 	add.w	fp, r3, #32
 8024990:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8024994:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8024998:	0a1b      	lsrs	r3, r3, #8
 802499a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802499e:	431e      	orrs	r6, r3
 80249a0:	f118 0801 	adds.w	r8, r8, #1
 80249a4:	f100 80c6 	bmi.w	8024b34 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 80249a8:	4545      	cmp	r5, r8
 80249aa:	f340 80c3 	ble.w	8024b34 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 80249ae:	2c00      	cmp	r4, #0
 80249b0:	f000 80c3 	beq.w	8024b3a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 80249b4:	3501      	adds	r5, #1
 80249b6:	9b04      	ldr	r3, [sp, #16]
 80249b8:	9803      	ldr	r0, [sp, #12]
 80249ba:	5d5b      	ldrb	r3, [r3, r5]
 80249bc:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 80249c0:	ea4f 09e3 	mov.w	r9, r3, asr #3
 80249c4:	f428 65fc 	bic.w	r5, r8, #2016	; 0x7e0
 80249c8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80249cc:	fb09 f905 	mul.w	r9, r9, r5
 80249d0:	f64f 051f 	movw	r5, #63519	; 0xf81f
 80249d4:	fb03 f808 	mul.w	r8, r3, r8
 80249d8:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 80249dc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80249e0:	44d9      	add	r9, fp
 80249e2:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 80249e6:	f108 0920 	add.w	r9, r8, #32
 80249ea:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80249ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80249f2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80249f6:	ea45 0508 	orr.w	r5, r5, r8
 80249fa:	fa1f f984 	uxth.w	r9, r4
 80249fe:	fa1f f88e 	uxth.w	r8, lr
 8024a02:	fb09 f008 	mul.w	r0, r9, r8
 8024a06:	9003      	str	r0, [sp, #12]
 8024a08:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8024a0c:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8024a10:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 8024a14:	9004      	str	r0, [sp, #16]
 8024a16:	9803      	ldr	r0, [sp, #12]
 8024a18:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8024a1c:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8024a20:	ea49 090a 	orr.w	r9, r9, sl
 8024a24:	f1ce 0a10 	rsb	sl, lr, #16
 8024a28:	fa1f f088 	uxth.w	r0, r8
 8024a2c:	fb14 f80e 	smulbb	r8, r4, lr
 8024a30:	ebaa 0a04 	sub.w	sl, sl, r4
 8024a34:	9005      	str	r0, [sp, #20]
 8024a36:	9801      	ldr	r0, [sp, #4]
 8024a38:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8024a3c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024a40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024a44:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8024a48:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024a4c:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8024a50:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8024a54:	ea4b 0000 	orr.w	r0, fp, r0
 8024a58:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024a5c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024a60:	4360      	muls	r0, r4
 8024a62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024a66:	9c04      	ldr	r4, [sp, #16]
 8024a68:	ea4b 0505 	orr.w	r5, fp, r5
 8024a6c:	fb0a 0009 	mla	r0, sl, r9, r0
 8024a70:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024a74:	fb08 0005 	mla	r0, r8, r5, r0
 8024a78:	0435      	lsls	r5, r6, #16
 8024a7a:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024a7e:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024a82:	432e      	orrs	r6, r5
 8024a84:	9d05      	ldr	r5, [sp, #20]
 8024a86:	fb0e 0e06 	mla	lr, lr, r6, r0
 8024a8a:	1b64      	subs	r4, r4, r5
 8024a8c:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8024a90:	b2a4      	uxth	r4, r4
 8024a92:	1bad      	subs	r5, r5, r6
 8024a94:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8024a98:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024a9c:	b2ad      	uxth	r5, r5
 8024a9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024aa2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024aa6:	436a      	muls	r2, r5
 8024aa8:	ea40 0e0e 	orr.w	lr, r0, lr
 8024aac:	fb0c 2204 	mla	r2, ip, r4, r2
 8024ab0:	9c05      	ldr	r4, [sp, #20]
 8024ab2:	fa1f f08e 	uxth.w	r0, lr
 8024ab6:	fb04 2707 	mla	r7, r4, r7, r2
 8024aba:	9a02      	ldr	r2, [sp, #8]
 8024abc:	1205      	asrs	r5, r0, #8
 8024abe:	fb06 7303 	mla	r3, r6, r3, r7
 8024ac2:	10c7      	asrs	r7, r0, #3
 8024ac4:	00c0      	lsls	r0, r0, #3
 8024ac6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024aca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024ace:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024ad2:	b2c0      	uxtb	r0, r0
 8024ad4:	4353      	muls	r3, r2
 8024ad6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024ada:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8024ade:	1c5a      	adds	r2, r3, #1
 8024ae0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024ae4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024ae8:	121b      	asrs	r3, r3, #8
 8024aea:	2bff      	cmp	r3, #255	; 0xff
 8024aec:	d128      	bne.n	8024b40 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8024aee:	7008      	strb	r0, [r1, #0]
 8024af0:	704f      	strb	r7, [r1, #1]
 8024af2:	708d      	strb	r5, [r1, #2]
 8024af4:	70cb      	strb	r3, [r1, #3]
 8024af6:	b007      	add	sp, #28
 8024af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024afc:	f04f 0c00 	mov.w	ip, #0
 8024b00:	46e2      	mov	sl, ip
 8024b02:	e6f6      	b.n	80248f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8024b04:	2200      	movs	r2, #0
 8024b06:	4694      	mov	ip, r2
 8024b08:	9201      	str	r2, [sp, #4]
 8024b0a:	4692      	mov	sl, r2
 8024b0c:	e718      	b.n	8024940 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024b0e:	2200      	movs	r2, #0
 8024b10:	9201      	str	r2, [sp, #4]
 8024b12:	e715      	b.n	8024940 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024b14:	4622      	mov	r2, r4
 8024b16:	9401      	str	r4, [sp, #4]
 8024b18:	e712      	b.n	8024940 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024b1a:	2700      	movs	r7, #0
 8024b1c:	463e      	mov	r6, r7
 8024b1e:	e73f      	b.n	80249a0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8024b20:	2300      	movs	r3, #0
 8024b22:	461f      	mov	r7, r3
 8024b24:	461d      	mov	r5, r3
 8024b26:	461e      	mov	r6, r3
 8024b28:	e767      	b.n	80249fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024b2a:	4673      	mov	r3, lr
 8024b2c:	4677      	mov	r7, lr
 8024b2e:	4675      	mov	r5, lr
 8024b30:	4676      	mov	r6, lr
 8024b32:	e762      	b.n	80249fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024b34:	2300      	movs	r3, #0
 8024b36:	461d      	mov	r5, r3
 8024b38:	e75f      	b.n	80249fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024b3a:	4623      	mov	r3, r4
 8024b3c:	4625      	mov	r5, r4
 8024b3e:	e75c      	b.n	80249fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024b40:	b2dc      	uxtb	r4, r3
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	d0d7      	beq.n	8024af6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8024b46:	f891 c003 	ldrb.w	ip, [r1, #3]
 8024b4a:	fb04 f20c 	mul.w	r2, r4, ip
 8024b4e:	eb0c 0304 	add.w	r3, ip, r4
 8024b52:	780c      	ldrb	r4, [r1, #0]
 8024b54:	1c56      	adds	r6, r2, #1
 8024b56:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024b5a:	1232      	asrs	r2, r6, #8
 8024b5c:	ebac 0602 	sub.w	r6, ip, r2
 8024b60:	1a9b      	subs	r3, r3, r2
 8024b62:	9a02      	ldr	r2, [sp, #8]
 8024b64:	b2db      	uxtb	r3, r3
 8024b66:	fb10 f002 	smulbb	r0, r0, r2
 8024b6a:	9a02      	ldr	r2, [sp, #8]
 8024b6c:	fb06 0404 	mla	r4, r6, r4, r0
 8024b70:	fb12 f707 	smulbb	r7, r2, r7
 8024b74:	7848      	ldrb	r0, [r1, #1]
 8024b76:	788a      	ldrb	r2, [r1, #2]
 8024b78:	fb06 7000 	mla	r0, r6, r0, r7
 8024b7c:	fb94 f4f3 	sdiv	r4, r4, r3
 8024b80:	fb90 f0f3 	sdiv	r0, r0, r3
 8024b84:	2cff      	cmp	r4, #255	; 0xff
 8024b86:	bfd6      	itet	le
 8024b88:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8024b8c:	24ff      	movgt	r4, #255	; 0xff
 8024b8e:	b2e4      	uxtble	r4, r4
 8024b90:	28ff      	cmp	r0, #255	; 0xff
 8024b92:	bfd4      	ite	le
 8024b94:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024b98:	20ff      	movgt	r0, #255	; 0xff
 8024b9a:	700c      	strb	r4, [r1, #0]
 8024b9c:	bfd8      	it	le
 8024b9e:	b2c0      	uxtble	r0, r0
 8024ba0:	7048      	strb	r0, [r1, #1]
 8024ba2:	9802      	ldr	r0, [sp, #8]
 8024ba4:	fb10 f505 	smulbb	r5, r0, r5
 8024ba8:	fb06 5202 	mla	r2, r6, r2, r5
 8024bac:	fb92 f2f3 	sdiv	r2, r2, r3
 8024bb0:	2aff      	cmp	r2, #255	; 0xff
 8024bb2:	bfd6      	itet	le
 8024bb4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024bb8:	22ff      	movgt	r2, #255	; 0xff
 8024bba:	b2d2      	uxtble	r2, r2
 8024bbc:	708a      	strb	r2, [r1, #2]
 8024bbe:	e799      	b.n	8024af4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08024bc0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc4:	b097      	sub	sp, #92	; 0x5c
 8024bc6:	9214      	str	r2, [sp, #80]	; 0x50
 8024bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8024bca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024bcc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024bd0:	9015      	str	r0, [sp, #84]	; 0x54
 8024bd2:	9112      	str	r1, [sp, #72]	; 0x48
 8024bd4:	6850      	ldr	r0, [r2, #4]
 8024bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8024bd8:	6812      	ldr	r2, [r2, #0]
 8024bda:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024bde:	fb00 1303 	mla	r3, r0, r3, r1
 8024be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024be8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	930c      	str	r3, [sp, #48]	; 0x30
 8024bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024bf0:	685b      	ldr	r3, [r3, #4]
 8024bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8024bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	dc03      	bgt.n	8024c02 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	f340 8407 	ble.w	8025410 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8024c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c0c:	1e48      	subs	r0, r1, #1
 8024c0e:	1e55      	subs	r5, r2, #1
 8024c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	f340 81b7 	ble.w	8024f86 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024c18:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024c1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c1c:	1436      	asrs	r6, r6, #16
 8024c1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024c22:	d406      	bmi.n	8024c32 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c24:	4286      	cmp	r6, r0
 8024c26:	da04      	bge.n	8024c32 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	db02      	blt.n	8024c32 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c2c:	42ab      	cmp	r3, r5
 8024c2e:	f2c0 81ab 	blt.w	8024f88 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024c32:	3601      	adds	r6, #1
 8024c34:	f100 8198 	bmi.w	8024f68 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024c38:	42b1      	cmp	r1, r6
 8024c3a:	f2c0 8195 	blt.w	8024f68 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024c3e:	3301      	adds	r3, #1
 8024c40:	f100 8192 	bmi.w	8024f68 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024c44:	429a      	cmp	r2, r3
 8024c46:	f2c0 818f 	blt.w	8024f68 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c4c:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024c50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024c52:	9313      	str	r3, [sp, #76]	; 0x4c
 8024c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	f340 81b7 	ble.w	8024fca <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8024c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c5e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024c60:	1418      	asrs	r0, r3, #16
 8024c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024c64:	1436      	asrs	r6, r6, #16
 8024c66:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c6c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024c70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024c76:	f100 820f 	bmi.w	8025098 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c7a:	f102 3eff 	add.w	lr, r2, #4294967295
 8024c7e:	4576      	cmp	r6, lr
 8024c80:	f280 820a 	bge.w	8025098 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c84:	2800      	cmp	r0, #0
 8024c86:	f2c0 8207 	blt.w	8025098 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8024c8e:	4570      	cmp	r0, lr
 8024c90:	f280 8202 	bge.w	8025098 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024c94:	b212      	sxth	r2, r2
 8024c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c98:	fa1f fe81 	uxth.w	lr, r1
 8024c9c:	fb00 6002 	mla	r0, r0, r2, r6
 8024ca0:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8024ca4:	eb03 0a00 	add.w	sl, r3, r0
 8024ca8:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024cac:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024cb0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024cb4:	b29b      	uxth	r3, r3
 8024cb6:	f1bc 0f00 	cmp.w	ip, #0
 8024cba:	f000 81cc 	beq.w	8025056 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024cbe:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024cc2:	eb0a 0b02 	add.w	fp, sl, r2
 8024cc6:	fa1f fa8c 	uxth.w	sl, ip
 8024cca:	940e      	str	r4, [sp, #56]	; 0x38
 8024ccc:	fb0a fe0e 	mul.w	lr, sl, lr
 8024cd0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024cd4:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024cd8:	eba6 060e 	sub.w	r6, r6, lr
 8024cdc:	940f      	str	r4, [sp, #60]	; 0x3c
 8024cde:	fa1f fa8a 	uxth.w	sl, sl
 8024ce2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024ce4:	b2b6      	uxth	r6, r6
 8024ce6:	eba3 030a 	sub.w	r3, r3, sl
 8024cea:	fb08 f606 	mul.w	r6, r8, r6
 8024cee:	b29b      	uxth	r3, r3
 8024cf0:	fb09 6303 	mla	r3, r9, r3, r6
 8024cf4:	fb0a 3304 	mla	r3, sl, r4, r3
 8024cf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024cfa:	fb0e 3304 	mla	r3, lr, r4, r3
 8024cfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	f000 8123 	beq.w	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024d08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024d0a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024d0e:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8024d12:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024d16:	f000 81a3 	beq.w	8025060 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 8024d1a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024d1e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024d22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d26:	fb0a fe0e 	mul.w	lr, sl, lr
 8024d2a:	fb09 f000 	mul.w	r0, r9, r0
 8024d2e:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8024d32:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024d36:	f100 0b20 	add.w	fp, r0, #32
 8024d3a:	44ce      	add	lr, r9
 8024d3c:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024d40:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024d44:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024d48:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024d4c:	ea4e 0909 	orr.w	r9, lr, r9
 8024d50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024d54:	8870      	ldrh	r0, [r6, #2]
 8024d56:	d019      	beq.n	8024d8c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8024d58:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024d5c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024d60:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d64:	fb0a fe0e 	mul.w	lr, sl, lr
 8024d68:	fb08 f800 	mul.w	r8, r8, r0
 8024d6c:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8024d70:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024d74:	f108 0b20 	add.w	fp, r8, #32
 8024d78:	4486      	add	lr, r0
 8024d7a:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024d7e:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024d82:	0a00      	lsrs	r0, r0, #8
 8024d84:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d88:	ea4e 0000 	orr.w	r0, lr, r0
 8024d8c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024d90:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024d94:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024d98:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024d9c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024da0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024da4:	ea4e 0909 	orr.w	r9, lr, r9
 8024da8:	ea4a 0000 	orr.w	r0, sl, r0
 8024dac:	f1bc 0f00 	cmp.w	ip, #0
 8024db0:	f000 8158 	beq.w	8025064 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8024db4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024db8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024dba:	3a01      	subs	r2, #1
 8024dbc:	2cff      	cmp	r4, #255	; 0xff
 8024dbe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024dc2:	f102 0202 	add.w	r2, r2, #2
 8024dc6:	eb06 0e02 	add.w	lr, r6, r2
 8024dca:	5ab2      	ldrh	r2, [r6, r2]
 8024dcc:	d018      	beq.n	8024e00 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024dce:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024dd2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024dd6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024dda:	fb04 fa02 	mul.w	sl, r4, r2
 8024dde:	fb08 f806 	mul.w	r8, r8, r6
 8024de2:	f10a 0620 	add.w	r6, sl, #32
 8024de6:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8024dea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024dee:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8024df2:	4442      	add	r2, r8
 8024df4:	0a36      	lsrs	r6, r6, #8
 8024df6:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8024dfa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024dfe:	4332      	orrs	r2, r6
 8024e00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024e02:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8024e06:	2cff      	cmp	r4, #255	; 0xff
 8024e08:	d01a      	beq.n	8024e40 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8024e0a:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8024e0e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024e12:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024e16:	fb04 fa06 	mul.w	sl, r4, r6
 8024e1a:	fb08 f80e 	mul.w	r8, r8, lr
 8024e1e:	f10a 0e20 	add.w	lr, sl, #32
 8024e22:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8024e26:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024e2a:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024e2e:	4446      	add	r6, r8
 8024e30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e34:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8024e38:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024e3c:	ea46 060e 	orr.w	r6, r6, lr
 8024e40:	fb1c fe01 	smulbb	lr, ip, r1
 8024e44:	f1cc 0810 	rsb	r8, ip, #16
 8024e48:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024e4c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e50:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024e54:	eba8 0801 	sub.w	r8, r8, r1
 8024e58:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8024e5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e60:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024e64:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024e68:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024e6c:	ea4a 0202 	orr.w	r2, sl, r2
 8024e70:	4341      	muls	r1, r0
 8024e72:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024e76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024e7a:	fb09 1108 	mla	r1, r9, r8, r1
 8024e7e:	ea4b 0606 	orr.w	r6, fp, r6
 8024e82:	fb0c 1102 	mla	r1, ip, r2, r1
 8024e86:	fb0e 1e06 	mla	lr, lr, r6, r1
 8024e8a:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8024e8e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024e96:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024e9a:	ea40 0e0e 	orr.w	lr, r0, lr
 8024e9e:	fa1f f08e 	uxth.w	r0, lr
 8024ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024ea4:	1206      	asrs	r6, r0, #8
 8024ea6:	10c1      	asrs	r1, r0, #3
 8024ea8:	4353      	muls	r3, r2
 8024eaa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024eae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024eb2:	1c5a      	adds	r2, r3, #1
 8024eb4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8024eb8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8024ebc:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8024ec0:	00c2      	lsls	r2, r0, #3
 8024ec2:	121b      	asrs	r3, r3, #8
 8024ec4:	b2d2      	uxtb	r2, r2
 8024ec6:	2bff      	cmp	r3, #255	; 0xff
 8024ec8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024ecc:	f000 80de 	beq.w	802508c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8024ed0:	b2d8      	uxtb	r0, r3
 8024ed2:	2b00      	cmp	r3, #0
 8024ed4:	d03b      	beq.n	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024ed6:	f895 c003 	ldrb.w	ip, [r5, #3]
 8024eda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024edc:	fb00 fe0c 	mul.w	lr, r0, ip
 8024ee0:	4460      	add	r0, ip
 8024ee2:	fb12 f204 	smulbb	r2, r2, r4
 8024ee6:	f10e 0301 	add.w	r3, lr, #1
 8024eea:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8024eee:	121b      	asrs	r3, r3, #8
 8024ef0:	ebac 0c03 	sub.w	ip, ip, r3
 8024ef4:	1ac0      	subs	r0, r0, r3
 8024ef6:	782b      	ldrb	r3, [r5, #0]
 8024ef8:	b2c0      	uxtb	r0, r0
 8024efa:	fb0c 2303 	mla	r3, ip, r3, r2
 8024efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f00:	70e8      	strb	r0, [r5, #3]
 8024f02:	fb12 f101 	smulbb	r1, r2, r1
 8024f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f08:	fb93 f3f0 	sdiv	r3, r3, r0
 8024f0c:	fb12 f606 	smulbb	r6, r2, r6
 8024f10:	2bff      	cmp	r3, #255	; 0xff
 8024f12:	bfd6      	itet	le
 8024f14:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024f18:	23ff      	movgt	r3, #255	; 0xff
 8024f1a:	b2db      	uxtble	r3, r3
 8024f1c:	702b      	strb	r3, [r5, #0]
 8024f1e:	786b      	ldrb	r3, [r5, #1]
 8024f20:	fb0c 1303 	mla	r3, ip, r3, r1
 8024f24:	fb93 f3f0 	sdiv	r3, r3, r0
 8024f28:	2bff      	cmp	r3, #255	; 0xff
 8024f2a:	bfd6      	itet	le
 8024f2c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024f30:	23ff      	movgt	r3, #255	; 0xff
 8024f32:	b2db      	uxtble	r3, r3
 8024f34:	706b      	strb	r3, [r5, #1]
 8024f36:	78ab      	ldrb	r3, [r5, #2]
 8024f38:	fb0c 6303 	mla	r3, ip, r3, r6
 8024f3c:	fb93 f3f0 	sdiv	r3, r3, r0
 8024f40:	2bff      	cmp	r3, #255	; 0xff
 8024f42:	bfd6      	itet	le
 8024f44:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024f48:	23ff      	movgt	r3, #255	; 0xff
 8024f4a:	b2db      	uxtble	r3, r3
 8024f4c:	70ab      	strb	r3, [r5, #2]
 8024f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f50:	3504      	adds	r5, #4
 8024f52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024f54:	4413      	add	r3, r2
 8024f56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024f58:	9321      	str	r3, [sp, #132]	; 0x84
 8024f5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f5c:	441a      	add	r2, r3
 8024f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024f60:	3b01      	subs	r3, #1
 8024f62:	9222      	str	r2, [sp, #136]	; 0x88
 8024f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8024f66:	e675      	b.n	8024c54 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f6a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8024f6c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8024f6e:	4433      	add	r3, r6
 8024f70:	9321      	str	r3, [sp, #132]	; 0x84
 8024f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f74:	441c      	add	r4, r3
 8024f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f78:	3b01      	subs	r3, #1
 8024f7a:	9422      	str	r4, [sp, #136]	; 0x88
 8024f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f80:	3304      	adds	r3, #4
 8024f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f84:	e644      	b.n	8024c10 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8024f86:	d027      	beq.n	8024fd8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f8a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024f8c:	3b01      	subs	r3, #1
 8024f8e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8024f90:	fb00 5003 	mla	r0, r0, r3, r5
 8024f94:	1400      	asrs	r0, r0, #16
 8024f96:	f53f ae58 	bmi.w	8024c4a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024f9a:	3901      	subs	r1, #1
 8024f9c:	4288      	cmp	r0, r1
 8024f9e:	f6bf ae54 	bge.w	8024c4a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024fa2:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024fa4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8024fa6:	fb01 0303 	mla	r3, r1, r3, r0
 8024faa:	141b      	asrs	r3, r3, #16
 8024fac:	f53f ae4d 	bmi.w	8024c4a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024fb0:	3a01      	subs	r2, #1
 8024fb2:	4293      	cmp	r3, r2
 8024fb4:	f6bf ae49 	bge.w	8024c4a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fba:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8024fc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024fc4:	2b00      	cmp	r3, #0
 8024fc6:	f300 8086 	bgt.w	80250d6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8024fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fcc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024fd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024fda:	2b00      	cmp	r3, #0
 8024fdc:	f340 8218 	ble.w	8025410 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8024fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024fe4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024fe6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024fea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024fee:	eef0 6a62 	vmov.f32	s13, s5
 8024ff2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024ff6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ffa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ffe:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025002:	eef0 6a43 	vmov.f32	s13, s6
 8025006:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802500a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802500e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025012:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025016:	ee77 2a62 	vsub.f32	s5, s14, s5
 802501a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802501e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025022:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025026:	ee12 2a90 	vmov	r2, s5
 802502a:	eef0 2a47 	vmov.f32	s5, s14
 802502e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025032:	ee13 2a10 	vmov	r2, s6
 8025036:	9323      	str	r3, [sp, #140]	; 0x8c
 8025038:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802503a:	eeb0 3a67 	vmov.f32	s6, s15
 802503e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025042:	9324      	str	r3, [sp, #144]	; 0x90
 8025044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025048:	3b01      	subs	r3, #1
 802504a:	9312      	str	r3, [sp, #72]	; 0x48
 802504c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802504e:	bf08      	it	eq
 8025050:	4613      	moveq	r3, r2
 8025052:	9309      	str	r3, [sp, #36]	; 0x24
 8025054:	e5ce      	b.n	8024bf4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025056:	fb08 f606 	mul.w	r6, r8, r6
 802505a:	fb09 6303 	mla	r3, r9, r3, r6
 802505e:	e64e      	b.n	8024cfe <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025060:	4681      	mov	r9, r0
 8025062:	e675      	b.n	8024d50 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8025064:	f1c1 0210 	rsb	r2, r1, #16
 8025068:	4341      	muls	r1, r0
 802506a:	fb09 1902 	mla	r9, r9, r2, r1
 802506e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025072:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025076:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802507a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802507e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025082:	ea40 0909 	orr.w	r9, r0, r9
 8025086:	fa1f f089 	uxth.w	r0, r9
 802508a:	e70a      	b.n	8024ea2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802508c:	0209      	lsls	r1, r1, #8
 802508e:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8025092:	4332      	orrs	r2, r6
 8025094:	602a      	str	r2, [r5, #0]
 8025096:	e75a      	b.n	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025098:	f116 0e01 	adds.w	lr, r6, #1
 802509c:	f53f af57 	bmi.w	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250a0:	4572      	cmp	r2, lr
 80250a2:	f6ff af54 	blt.w	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250a6:	f110 0e01 	adds.w	lr, r0, #1
 80250aa:	f53f af50 	bmi.w	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250ae:	4573      	cmp	r3, lr
 80250b0:	f6ff af4d 	blt.w	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80250b6:	b21b      	sxth	r3, r3
 80250b8:	b212      	sxth	r2, r2
 80250ba:	9602      	str	r6, [sp, #8]
 80250bc:	9301      	str	r3, [sp, #4]
 80250be:	9200      	str	r2, [sp, #0]
 80250c0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80250c4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80250c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80250cc:	4629      	mov	r1, r5
 80250ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80250d0:	f7ff fbca 	bl	8024868 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 80250d4:	e73b      	b.n	8024f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80250d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80250dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250de:	f3c3 3603 	ubfx	r6, r3, #12, #4
 80250e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250e4:	fa1f fe82 	uxth.w	lr, r2
 80250e8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80250ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250ee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80250f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80250f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80250f8:	141b      	asrs	r3, r3, #16
 80250fa:	fb00 3c0c 	mla	ip, r0, ip, r3
 80250fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025100:	eb03 0a0c 	add.w	sl, r3, ip
 8025104:	f813 900c 	ldrb.w	r9, [r3, ip]
 8025108:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802510c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025110:	b29b      	uxth	r3, r3
 8025112:	2e00      	cmp	r6, #0
 8025114:	f000 815c 	beq.w	80253d0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 8025118:	f81a 4000 	ldrb.w	r4, [sl, r0]
 802511c:	eb0a 0b00 	add.w	fp, sl, r0
 8025120:	fa1f fa86 	uxth.w	sl, r6
 8025124:	9410      	str	r4, [sp, #64]	; 0x40
 8025126:	fb0a fe0e 	mul.w	lr, sl, lr
 802512a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802512e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025132:	eba5 050e 	sub.w	r5, r5, lr
 8025136:	9411      	str	r4, [sp, #68]	; 0x44
 8025138:	fa1f fa8a 	uxth.w	sl, sl
 802513c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802513e:	b2ad      	uxth	r5, r5
 8025140:	eba3 030a 	sub.w	r3, r3, sl
 8025144:	fb08 f505 	mul.w	r5, r8, r5
 8025148:	b29b      	uxth	r3, r3
 802514a:	fb09 5303 	mla	r3, r9, r3, r5
 802514e:	fb0a 3304 	mla	r3, sl, r4, r3
 8025152:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025154:	fb0e 3304 	mla	r3, lr, r4, r3
 8025158:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802515c:	2b00      	cmp	r3, #0
 802515e:	f000 812a 	beq.w	80253b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025162:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025164:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025168:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 802516c:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8025170:	f000 8133 	beq.w	80253da <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 8025174:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8025178:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802517c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025180:	fb0a fe0e 	mul.w	lr, sl, lr
 8025184:	fb09 fc0c 	mul.w	ip, r9, ip
 8025188:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802518c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025190:	f10c 0b20 	add.w	fp, ip, #32
 8025194:	44ce      	add	lr, r9
 8025196:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 802519a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802519e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80251a2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80251a6:	ea4e 0909 	orr.w	r9, lr, r9
 80251aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80251ae:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 80251b2:	d01a      	beq.n	80251ea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 80251b4:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80251b8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80251bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80251c0:	fb0a fe0e 	mul.w	lr, sl, lr
 80251c4:	fb08 f80c 	mul.w	r8, r8, ip
 80251c8:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 80251cc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80251d0:	f108 0b20 	add.w	fp, r8, #32
 80251d4:	44e6      	add	lr, ip
 80251d6:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 80251da:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80251de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251e2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80251e6:	ea4e 0c0c 	orr.w	ip, lr, ip
 80251ea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80251ee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80251f2:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 80251f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80251fa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80251fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025202:	ea4e 0909 	orr.w	r9, lr, r9
 8025206:	ea4a 0c0c 	orr.w	ip, sl, ip
 802520a:	2e00      	cmp	r6, #0
 802520c:	f000 80e7 	beq.w	80253de <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 8025210:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8025214:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025216:	3801      	subs	r0, #1
 8025218:	2cff      	cmp	r4, #255	; 0xff
 802521a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802521e:	f100 0002 	add.w	r0, r0, #2
 8025222:	eb05 0e00 	add.w	lr, r5, r0
 8025226:	5a28      	ldrh	r0, [r5, r0]
 8025228:	d018      	beq.n	802525c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802522a:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 802522e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025232:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025236:	fb04 fa00 	mul.w	sl, r4, r0
 802523a:	fb08 f805 	mul.w	r8, r8, r5
 802523e:	f10a 0520 	add.w	r5, sl, #32
 8025242:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 8025246:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802524a:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802524e:	4440      	add	r0, r8
 8025250:	0a2d      	lsrs	r5, r5, #8
 8025252:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8025256:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802525a:	4328      	orrs	r0, r5
 802525c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802525e:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025262:	2cff      	cmp	r4, #255	; 0xff
 8025264:	d01a      	beq.n	802529c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8025266:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802526a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802526e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025272:	fb04 fa05 	mul.w	sl, r4, r5
 8025276:	fb08 f80e 	mul.w	r8, r8, lr
 802527a:	f10a 0e20 	add.w	lr, sl, #32
 802527e:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 8025282:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025286:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802528a:	4445      	add	r5, r8
 802528c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025290:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 8025294:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025298:	ea45 050e 	orr.w	r5, r5, lr
 802529c:	fb16 fe02 	smulbb	lr, r6, r2
 80252a0:	f1c6 0810 	rsb	r8, r6, #16
 80252a4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80252a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80252ac:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80252b0:	eba8 0802 	sub.w	r8, r8, r2
 80252b4:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80252b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80252bc:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 80252c0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80252c4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80252c8:	ea4a 0000 	orr.w	r0, sl, r0
 80252cc:	fb0c f202 	mul.w	r2, ip, r2
 80252d0:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 80252d4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80252d8:	fb09 2208 	mla	r2, r9, r8, r2
 80252dc:	ea4b 0505 	orr.w	r5, fp, r5
 80252e0:	fb06 2200 	mla	r2, r6, r0, r2
 80252e4:	fb0e 2205 	mla	r2, lr, r5, r2
 80252e8:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 80252ec:	0952      	lsrs	r2, r2, #5
 80252ee:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80252f2:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80252f6:	ea4c 0c05 	orr.w	ip, ip, r5
 80252fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252fc:	fa1f fc8c 	uxth.w	ip, ip
 8025300:	4353      	muls	r3, r2
 8025302:	ea4f 262c 	mov.w	r6, ip, asr #8
 8025306:	ea4f 00ec 	mov.w	r0, ip, asr #3
 802530a:	1c5a      	adds	r2, r3, #1
 802530c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025310:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025314:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8025318:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802531c:	121b      	asrs	r3, r3, #8
 802531e:	b2d2      	uxtb	r2, r2
 8025320:	2bff      	cmp	r3, #255	; 0xff
 8025322:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025326:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802532a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802532e:	d069      	beq.n	8025404 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 8025330:	b2dd      	uxtb	r5, r3
 8025332:	2b00      	cmp	r3, #0
 8025334:	d03f      	beq.n	80253b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025336:	f891 c003 	ldrb.w	ip, [r1, #3]
 802533a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802533c:	fb05 fe0c 	mul.w	lr, r5, ip
 8025340:	4465      	add	r5, ip
 8025342:	f891 8000 	ldrb.w	r8, [r1]
 8025346:	fb12 f204 	smulbb	r2, r2, r4
 802534a:	f10e 0301 	add.w	r3, lr, #1
 802534e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8025352:	121b      	asrs	r3, r3, #8
 8025354:	1aed      	subs	r5, r5, r3
 8025356:	ebac 0303 	sub.w	r3, ip, r3
 802535a:	f891 c001 	ldrb.w	ip, [r1, #1]
 802535e:	b2ed      	uxtb	r5, r5
 8025360:	fb03 2208 	mla	r2, r3, r8, r2
 8025364:	fb92 f2f5 	sdiv	r2, r2, r5
 8025368:	2aff      	cmp	r2, #255	; 0xff
 802536a:	70cd      	strb	r5, [r1, #3]
 802536c:	bfd6      	itet	le
 802536e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025372:	22ff      	movgt	r2, #255	; 0xff
 8025374:	b2d2      	uxtble	r2, r2
 8025376:	700a      	strb	r2, [r1, #0]
 8025378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802537a:	fb12 f000 	smulbb	r0, r2, r0
 802537e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025380:	fb03 000c 	mla	r0, r3, ip, r0
 8025384:	fb12 f606 	smulbb	r6, r2, r6
 8025388:	f891 c002 	ldrb.w	ip, [r1, #2]
 802538c:	fb90 f0f5 	sdiv	r0, r0, r5
 8025390:	fb03 630c 	mla	r3, r3, ip, r6
 8025394:	28ff      	cmp	r0, #255	; 0xff
 8025396:	fb93 f3f5 	sdiv	r3, r3, r5
 802539a:	bfd6      	itet	le
 802539c:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80253a0:	20ff      	movgt	r0, #255	; 0xff
 80253a2:	b2c0      	uxtble	r0, r0
 80253a4:	2bff      	cmp	r3, #255	; 0xff
 80253a6:	bfd4      	ite	le
 80253a8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80253ac:	23ff      	movgt	r3, #255	; 0xff
 80253ae:	7048      	strb	r0, [r1, #1]
 80253b0:	bfd8      	it	le
 80253b2:	b2db      	uxtble	r3, r3
 80253b4:	708b      	strb	r3, [r1, #2]
 80253b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80253b8:	3104      	adds	r1, #4
 80253ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80253bc:	4413      	add	r3, r2
 80253be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80253c0:	9321      	str	r3, [sp, #132]	; 0x84
 80253c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80253c4:	441a      	add	r2, r3
 80253c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80253c8:	3b01      	subs	r3, #1
 80253ca:	9222      	str	r2, [sp, #136]	; 0x88
 80253cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80253ce:	e5f8      	b.n	8024fc2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80253d0:	fb08 f505 	mul.w	r5, r8, r5
 80253d4:	fb09 5303 	mla	r3, r9, r3, r5
 80253d8:	e6be      	b.n	8025158 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80253da:	46e1      	mov	r9, ip
 80253dc:	e6e5      	b.n	80251aa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 80253de:	f1c2 0010 	rsb	r0, r2, #16
 80253e2:	fb0c f202 	mul.w	r2, ip, r2
 80253e6:	fb09 2900 	mla	r9, r9, r0, r2
 80253ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80253ee:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 80253f2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80253f6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80253fa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80253fe:	ea4c 0c09 	orr.w	ip, ip, r9
 8025402:	e77a      	b.n	80252fa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8025404:	0200      	lsls	r0, r0, #8
 8025406:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802540a:	4302      	orrs	r2, r0
 802540c:	600a      	str	r2, [r1, #0]
 802540e:	e7d2      	b.n	80253b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025410:	b017      	add	sp, #92	; 0x5c
 8025412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025416 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 8025416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802541a:	b085      	sub	sp, #20
 802541c:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	; 0x40
 8025420:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8025424:	2800      	cmp	r0, #0
 8025426:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802542a:	fb00 8504 	mla	r5, r0, r4, r8
 802542e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8025432:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8025436:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 802543a:	9702      	str	r7, [sp, #8]
 802543c:	eb03 0705 	add.w	r7, r3, r5
 8025440:	9703      	str	r7, [sp, #12]
 8025442:	f2c0 812e 	blt.w	80256a2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8025446:	4582      	cmp	sl, r0
 8025448:	f340 812b 	ble.w	80256a2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 802544c:	f1b8 0f00 	cmp.w	r8, #0
 8025450:	f2c0 8122 	blt.w	8025698 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8025454:	4544      	cmp	r4, r8
 8025456:	f340 811f 	ble.w	8025698 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 802545a:	f813 e005 	ldrb.w	lr, [r3, r5]
 802545e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8025462:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8025466:	f423 67fc 	bic.w	r7, r3, #2016	; 0x7e0
 802546a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802546e:	4357      	muls	r7, r2
 8025470:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025474:	fb0e f503 	mul.w	r5, lr, r3
 8025478:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 802547c:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8025480:	441f      	add	r7, r3
 8025482:	f105 0320 	add.w	r3, r5, #32
 8025486:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802548a:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 802548e:	0a1b      	lsrs	r3, r3, #8
 8025490:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025494:	4313      	orrs	r3, r2
 8025496:	9301      	str	r3, [sp, #4]
 8025498:	f118 0301 	adds.w	r3, r8, #1
 802549c:	f100 8106 	bmi.w	80256ac <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80254a0:	429c      	cmp	r4, r3
 80254a2:	f340 8103 	ble.w	80256ac <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80254a6:	2e00      	cmp	r6, #0
 80254a8:	f000 8103 	beq.w	80256b2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 80254ac:	9b03      	ldr	r3, [sp, #12]
 80254ae:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80254b2:	785a      	ldrb	r2, [r3, #1]
 80254b4:	9b02      	ldr	r3, [sp, #8]
 80254b6:	10d7      	asrs	r7, r2, #3
 80254b8:	885b      	ldrh	r3, [r3, #2]
 80254ba:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80254be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80254c2:	436f      	muls	r7, r5
 80254c4:	4353      	muls	r3, r2
 80254c6:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 80254ca:	f607 0701 	addw	r7, r7, #2049	; 0x801
 80254ce:	444f      	add	r7, r9
 80254d0:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 80254d4:	f103 0b20 	add.w	fp, r3, #32
 80254d8:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80254dc:	0a1b      	lsrs	r3, r3, #8
 80254de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80254e2:	431d      	orrs	r5, r3
 80254e4:	3001      	adds	r0, #1
 80254e6:	f100 80ea 	bmi.w	80256be <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 80254ea:	4582      	cmp	sl, r0
 80254ec:	f340 80e7 	ble.w	80256be <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 80254f0:	f1bc 0f00 	cmp.w	ip, #0
 80254f4:	f000 80e8 	beq.w	80256c8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 80254f8:	f1b8 0f00 	cmp.w	r8, #0
 80254fc:	f2c0 80dc 	blt.w	80256b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8025500:	4544      	cmp	r4, r8
 8025502:	f340 80d9 	ble.w	80256b8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8025506:	9b03      	ldr	r3, [sp, #12]
 8025508:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802550c:	5d1f      	ldrb	r7, [r3, r4]
 802550e:	9b02      	ldr	r3, [sp, #8]
 8025510:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025514:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8025518:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802551c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025520:	fb09 f900 	mul.w	r9, r9, r0
 8025524:	437b      	muls	r3, r7
 8025526:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 802552a:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802552e:	44d1      	add	r9, sl
 8025530:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 8025534:	f103 0b20 	add.w	fp, r3, #32
 8025538:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802553c:	0a1b      	lsrs	r3, r3, #8
 802553e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025542:	4318      	orrs	r0, r3
 8025544:	f118 0801 	adds.w	r8, r8, #1
 8025548:	f100 80c3 	bmi.w	80256d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 802554c:	4544      	cmp	r4, r8
 802554e:	f340 80c0 	ble.w	80256d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8025552:	2e00      	cmp	r6, #0
 8025554:	f000 80c0 	beq.w	80256d8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8025558:	f104 0801 	add.w	r8, r4, #1
 802555c:	9b03      	ldr	r3, [sp, #12]
 802555e:	9c02      	ldr	r4, [sp, #8]
 8025560:	f813 3008 	ldrb.w	r3, [r3, r8]
 8025564:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8025568:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 802556c:	f424 68fc 	bic.w	r8, r4, #2016	; 0x7e0
 8025570:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025574:	fb0a fa08 	mul.w	sl, sl, r8
 8025578:	fb03 f904 	mul.w	r9, r3, r4
 802557c:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025580:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8025584:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8025588:	44da      	add	sl, fp
 802558a:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 802558e:	f109 0420 	add.w	r4, r9, #32
 8025592:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8025596:	0a24      	lsrs	r4, r4, #8
 8025598:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802559c:	ea48 0404 	orr.w	r4, r8, r4
 80255a0:	fa1f f886 	uxth.w	r8, r6
 80255a4:	fa1f fa8c 	uxth.w	sl, ip
 80255a8:	fb08 fb0a 	mul.w	fp, r8, sl
 80255ac:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80255b0:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 80255b4:	f5c8 7980 	rsb	r9, r8, #256	; 0x100
 80255b8:	eba8 080b 	sub.w	r8, r8, fp
 80255bc:	fa1f fa8a 	uxth.w	sl, sl
 80255c0:	fa1f f888 	uxth.w	r8, r8
 80255c4:	eba9 090a 	sub.w	r9, r9, sl
 80255c8:	fb02 f808 	mul.w	r8, r2, r8
 80255cc:	9a01      	ldr	r2, [sp, #4]
 80255ce:	fa1f f989 	uxth.w	r9, r9
 80255d2:	0412      	lsls	r2, r2, #16
 80255d4:	fb0e 8809 	mla	r8, lr, r9, r8
 80255d8:	f002 6efc 	and.w	lr, r2, #132120576	; 0x7e00000
 80255dc:	9a01      	ldr	r2, [sp, #4]
 80255de:	fb0a 8707 	mla	r7, sl, r7, r8
 80255e2:	ea4f 4805 	mov.w	r8, r5, lsl #16
 80255e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80255ea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80255ee:	fb0b 7303 	mla	r3, fp, r3, r7
 80255f2:	fb16 f70c 	smulbb	r7, r6, ip
 80255f6:	ea4e 0202 	orr.w	r2, lr, r2
 80255fa:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 80255fe:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 8025602:	f1cc 0e10 	rsb	lr, ip, #16
 8025606:	ea48 0505 	orr.w	r5, r8, r5
 802560a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802560e:	ebae 0e06 	sub.w	lr, lr, r6
 8025612:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 8025616:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 802561a:	2bff      	cmp	r3, #255	; 0xff
 802561c:	fb06 f605 	mul.w	r6, r6, r5
 8025620:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 8025624:	fb0e 6202 	mla	r2, lr, r2, r6
 8025628:	ea4f 4604 	mov.w	r6, r4, lsl #16
 802562c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025630:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8025634:	ea44 0406 	orr.w	r4, r4, r6
 8025638:	fb07 2604 	mla	r6, r7, r4, r2
 802563c:	ea4f 4200 	mov.w	r2, r0, lsl #16
 8025640:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025644:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025648:	ea40 0002 	orr.w	r0, r0, r2
 802564c:	fb0c 6c00 	mla	ip, ip, r0, r6
 8025650:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8025654:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025658:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802565c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025660:	ea42 020c 	orr.w	r2, r2, ip
 8025664:	b292      	uxth	r2, r2
 8025666:	ea4f 2022 	mov.w	r0, r2, asr #8
 802566a:	ea4f 05e2 	mov.w	r5, r2, asr #3
 802566e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025672:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025676:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802567a:	b2d2      	uxtb	r2, r2
 802567c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025680:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025684:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025688:	d129      	bne.n	80256de <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 802568a:	700a      	strb	r2, [r1, #0]
 802568c:	704d      	strb	r5, [r1, #1]
 802568e:	7088      	strb	r0, [r1, #2]
 8025690:	70cb      	strb	r3, [r1, #3]
 8025692:	b005      	add	sp, #20
 8025694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025698:	f04f 0e00 	mov.w	lr, #0
 802569c:	f8cd e004 	str.w	lr, [sp, #4]
 80256a0:	e6fa      	b.n	8025498 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 80256a2:	2200      	movs	r2, #0
 80256a4:	4696      	mov	lr, r2
 80256a6:	4615      	mov	r5, r2
 80256a8:	9201      	str	r2, [sp, #4]
 80256aa:	e71b      	b.n	80254e4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80256ac:	2200      	movs	r2, #0
 80256ae:	4615      	mov	r5, r2
 80256b0:	e718      	b.n	80254e4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80256b2:	4632      	mov	r2, r6
 80256b4:	4635      	mov	r5, r6
 80256b6:	e715      	b.n	80254e4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80256b8:	2700      	movs	r7, #0
 80256ba:	4638      	mov	r0, r7
 80256bc:	e742      	b.n	8025544 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 80256be:	2300      	movs	r3, #0
 80256c0:	461f      	mov	r7, r3
 80256c2:	461c      	mov	r4, r3
 80256c4:	4618      	mov	r0, r3
 80256c6:	e76b      	b.n	80255a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 80256c8:	4663      	mov	r3, ip
 80256ca:	4667      	mov	r7, ip
 80256cc:	4664      	mov	r4, ip
 80256ce:	4660      	mov	r0, ip
 80256d0:	e766      	b.n	80255a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 80256d2:	2300      	movs	r3, #0
 80256d4:	461c      	mov	r4, r3
 80256d6:	e763      	b.n	80255a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 80256d8:	4633      	mov	r3, r6
 80256da:	4634      	mov	r4, r6
 80256dc:	e760      	b.n	80255a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 80256de:	2b00      	cmp	r3, #0
 80256e0:	d0d7      	beq.n	8025692 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 80256e2:	78cf      	ldrb	r7, [r1, #3]
 80256e4:	fb03 f607 	mul.w	r6, r3, r7
 80256e8:	443b      	add	r3, r7
 80256ea:	1c74      	adds	r4, r6, #1
 80256ec:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80256f0:	780e      	ldrb	r6, [r1, #0]
 80256f2:	1224      	asrs	r4, r4, #8
 80256f4:	1b3f      	subs	r7, r7, r4
 80256f6:	1b1b      	subs	r3, r3, r4
 80256f8:	24ff      	movs	r4, #255	; 0xff
 80256fa:	437e      	muls	r6, r7
 80256fc:	b2db      	uxtb	r3, r3
 80256fe:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025702:	fb92 f6f3 	sdiv	r6, r2, r3
 8025706:	42a6      	cmp	r6, r4
 8025708:	f04f 02ff 	mov.w	r2, #255	; 0xff
 802570c:	bfc8      	it	gt
 802570e:	4626      	movgt	r6, r4
 8025710:	784c      	ldrb	r4, [r1, #1]
 8025712:	bfd8      	it	le
 8025714:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8025718:	fb07 f404 	mul.w	r4, r7, r4
 802571c:	bfd8      	it	le
 802571e:	b2f6      	uxtble	r6, r6
 8025720:	fb12 4505 	smlabb	r5, r2, r5, r4
 8025724:	700e      	strb	r6, [r1, #0]
 8025726:	fb95 f4f3 	sdiv	r4, r5, r3
 802572a:	4294      	cmp	r4, r2
 802572c:	bfd4      	ite	le
 802572e:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8025732:	4614      	movgt	r4, r2
 8025734:	788a      	ldrb	r2, [r1, #2]
 8025736:	bfd8      	it	le
 8025738:	b2e4      	uxtble	r4, r4
 802573a:	437a      	muls	r2, r7
 802573c:	704c      	strb	r4, [r1, #1]
 802573e:	24ff      	movs	r4, #255	; 0xff
 8025740:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025744:	fb90 f2f3 	sdiv	r2, r0, r3
 8025748:	42a2      	cmp	r2, r4
 802574a:	bfd6      	itet	le
 802574c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025750:	4622      	movgt	r2, r4
 8025752:	b2d2      	uxtble	r2, r2
 8025754:	708a      	strb	r2, [r1, #2]
 8025756:	e79b      	b.n	8025690 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08025758 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802575c:	b093      	sub	sp, #76	; 0x4c
 802575e:	9210      	str	r2, [sp, #64]	; 0x40
 8025760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025762:	9011      	str	r0, [sp, #68]	; 0x44
 8025764:	910e      	str	r1, [sp, #56]	; 0x38
 8025766:	6850      	ldr	r0, [r2, #4]
 8025768:	9306      	str	r3, [sp, #24]
 802576a:	6812      	ldr	r2, [r2, #0]
 802576c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025770:	fb00 1303 	mla	r3, r0, r3, r1
 8025774:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025778:	9307      	str	r3, [sp, #28]
 802577a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802577c:	681b      	ldr	r3, [r3, #0]
 802577e:	9308      	str	r3, [sp, #32]
 8025780:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025782:	685b      	ldr	r3, [r3, #4]
 8025784:	9309      	str	r3, [sp, #36]	; 0x24
 8025786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025788:	2b00      	cmp	r3, #0
 802578a:	dc03      	bgt.n	8025794 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802578c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802578e:	2b00      	cmp	r3, #0
 8025790:	f340 83f9 	ble.w	8025f86 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8025794:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025796:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802579a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802579e:	1e48      	subs	r0, r1, #1
 80257a0:	1e55      	subs	r5, r2, #1
 80257a2:	9b06      	ldr	r3, [sp, #24]
 80257a4:	2b00      	cmp	r3, #0
 80257a6:	f340 81b4 	ble.w	8025b12 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80257aa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80257ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80257ae:	1436      	asrs	r6, r6, #16
 80257b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80257b4:	d406      	bmi.n	80257c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80257b6:	4286      	cmp	r6, r0
 80257b8:	da04      	bge.n	80257c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	db02      	blt.n	80257c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80257be:	42ab      	cmp	r3, r5
 80257c0:	f2c0 81a8 	blt.w	8025b14 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80257c4:	3601      	adds	r6, #1
 80257c6:	f100 8195 	bmi.w	8025af4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80257ca:	42b1      	cmp	r1, r6
 80257cc:	f2c0 8192 	blt.w	8025af4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80257d0:	3301      	adds	r3, #1
 80257d2:	f100 818f 	bmi.w	8025af4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80257d6:	429a      	cmp	r2, r3
 80257d8:	f2c0 818c 	blt.w	8025af4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80257dc:	9b06      	ldr	r3, [sp, #24]
 80257de:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80257e2:	9d07      	ldr	r5, [sp, #28]
 80257e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80257e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	f340 81b5 	ble.w	8025b58 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80257ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80257f0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80257f2:	1418      	asrs	r0, r3, #16
 80257f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80257f6:	1436      	asrs	r6, r6, #16
 80257f8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80257fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80257fe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025804:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025808:	f100 820e 	bmi.w	8025c28 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 802580c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025810:	4576      	cmp	r6, lr
 8025812:	f280 8209 	bge.w	8025c28 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025816:	2800      	cmp	r0, #0
 8025818:	f2c0 8206 	blt.w	8025c28 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 802581c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025820:	4570      	cmp	r0, lr
 8025822:	f280 8201 	bge.w	8025c28 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025826:	b212      	sxth	r2, r2
 8025828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802582a:	fa1f fe81 	uxth.w	lr, r1
 802582e:	fb00 6002 	mla	r0, r0, r2, r6
 8025832:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8025836:	eb03 0a00 	add.w	sl, r3, r0
 802583a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802583e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025842:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025846:	b29b      	uxth	r3, r3
 8025848:	f1bc 0f00 	cmp.w	ip, #0
 802584c:	f000 81ca 	beq.w	8025be4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025850:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025854:	eb0a 0b02 	add.w	fp, sl, r2
 8025858:	fa1f fa8c 	uxth.w	sl, ip
 802585c:	940a      	str	r4, [sp, #40]	; 0x28
 802585e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025862:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025866:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802586a:	eba6 060e 	sub.w	r6, r6, lr
 802586e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025870:	fa1f fa8a 	uxth.w	sl, sl
 8025874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025876:	b2b6      	uxth	r6, r6
 8025878:	eba3 030a 	sub.w	r3, r3, sl
 802587c:	fb08 f606 	mul.w	r6, r8, r6
 8025880:	b29b      	uxth	r3, r3
 8025882:	fb09 6303 	mla	r3, r9, r3, r6
 8025886:	fb0a 3304 	mla	r3, sl, r4, r3
 802588a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802588c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025890:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025894:	2b00      	cmp	r3, #0
 8025896:	f000 8120 	beq.w	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802589a:	9c08      	ldr	r4, [sp, #32]
 802589c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80258a0:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 80258a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80258a8:	f000 81a1 	beq.w	8025bee <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80258ac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80258b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80258b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80258bc:	fb09 f000 	mul.w	r0, r9, r0
 80258c0:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 80258c4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80258c8:	f100 0b20 	add.w	fp, r0, #32
 80258cc:	44ce      	add	lr, r9
 80258ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80258d2:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80258d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80258de:	ea4e 0909 	orr.w	r9, lr, r9
 80258e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80258e6:	8870      	ldrh	r0, [r6, #2]
 80258e8:	d019      	beq.n	802591e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80258ea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80258ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80258f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80258f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80258fa:	fb08 f800 	mul.w	r8, r8, r0
 80258fe:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8025902:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025906:	f108 0b20 	add.w	fp, r8, #32
 802590a:	4486      	add	lr, r0
 802590c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025910:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025914:	0a00      	lsrs	r0, r0, #8
 8025916:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802591a:	ea4e 0000 	orr.w	r0, lr, r0
 802591e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025922:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025926:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802592a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802592e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025932:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025936:	ea4e 0909 	orr.w	r9, lr, r9
 802593a:	ea4a 0000 	orr.w	r0, sl, r0
 802593e:	f1bc 0f00 	cmp.w	ip, #0
 8025942:	f000 8156 	beq.w	8025bf2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025946:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802594a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802594c:	3a01      	subs	r2, #1
 802594e:	2cff      	cmp	r4, #255	; 0xff
 8025950:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025954:	f102 0202 	add.w	r2, r2, #2
 8025958:	eb06 0e02 	add.w	lr, r6, r2
 802595c:	5ab2      	ldrh	r2, [r6, r2]
 802595e:	d018      	beq.n	8025992 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025960:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025964:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025968:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802596c:	fb04 fa02 	mul.w	sl, r4, r2
 8025970:	fb08 f806 	mul.w	r8, r8, r6
 8025974:	f10a 0620 	add.w	r6, sl, #32
 8025978:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 802597c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025980:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8025984:	4442      	add	r2, r8
 8025986:	0a36      	lsrs	r6, r6, #8
 8025988:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 802598c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025990:	4332      	orrs	r2, r6
 8025992:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025994:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8025998:	2cff      	cmp	r4, #255	; 0xff
 802599a:	d01a      	beq.n	80259d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802599c:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 80259a0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80259a4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80259a8:	fb04 fa06 	mul.w	sl, r4, r6
 80259ac:	fb08 f80e 	mul.w	r8, r8, lr
 80259b0:	f10a 0e20 	add.w	lr, sl, #32
 80259b4:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 80259b8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80259bc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80259c0:	4446      	add	r6, r8
 80259c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259c6:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 80259ca:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80259ce:	ea46 060e 	orr.w	r6, r6, lr
 80259d2:	fb1c fe01 	smulbb	lr, ip, r1
 80259d6:	f1cc 0810 	rsb	r8, ip, #16
 80259da:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80259de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80259e2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80259e6:	eba8 0801 	sub.w	r8, r8, r1
 80259ea:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 80259ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259f2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80259f6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80259fa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80259fe:	ea4a 0202 	orr.w	r2, sl, r2
 8025a02:	4341      	muls	r1, r0
 8025a04:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025a08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025a0c:	fb09 1108 	mla	r1, r9, r8, r1
 8025a10:	ea4b 0606 	orr.w	r6, fp, r6
 8025a14:	fb0c 1102 	mla	r1, ip, r2, r1
 8025a18:	fb0e 1e06 	mla	lr, lr, r6, r1
 8025a1c:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8025a20:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a24:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025a28:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025a2c:	ea41 0e0e 	orr.w	lr, r1, lr
 8025a30:	fa1f f18e 	uxth.w	r1, lr
 8025a34:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025a38:	2bff      	cmp	r3, #255	; 0xff
 8025a3a:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8025a3e:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8025a42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025a46:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025a4a:	b2d2      	uxtb	r2, r2
 8025a4c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025a50:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025a54:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025a58:	f000 80df 	beq.w	8025c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025a5c:	f895 8003 	ldrb.w	r8, [r5, #3]
 8025a60:	24ff      	movs	r4, #255	; 0xff
 8025a62:	fb03 f608 	mul.w	r6, r3, r8
 8025a66:	4443      	add	r3, r8
 8025a68:	1c71      	adds	r1, r6, #1
 8025a6a:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8025a6e:	782e      	ldrb	r6, [r5, #0]
 8025a70:	1209      	asrs	r1, r1, #8
 8025a72:	1a5b      	subs	r3, r3, r1
 8025a74:	eba8 0101 	sub.w	r1, r8, r1
 8025a78:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025a7c:	434e      	muls	r6, r1
 8025a7e:	b2db      	uxtb	r3, r3
 8025a80:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025a84:	24ff      	movs	r4, #255	; 0xff
 8025a86:	70eb      	strb	r3, [r5, #3]
 8025a88:	fb92 f2f3 	sdiv	r2, r2, r3
 8025a8c:	2aff      	cmp	r2, #255	; 0xff
 8025a8e:	bfd6      	itet	le
 8025a90:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025a94:	22ff      	movgt	r2, #255	; 0xff
 8025a96:	b2d2      	uxtble	r2, r2
 8025a98:	702a      	strb	r2, [r5, #0]
 8025a9a:	786a      	ldrb	r2, [r5, #1]
 8025a9c:	434a      	muls	r2, r1
 8025a9e:	fb01 f108 	mul.w	r1, r1, r8
 8025aa2:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025aa6:	22ff      	movs	r2, #255	; 0xff
 8025aa8:	fb90 f0f3 	sdiv	r0, r0, r3
 8025aac:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8025ab0:	28ff      	cmp	r0, #255	; 0xff
 8025ab2:	fb9c fcf3 	sdiv	ip, ip, r3
 8025ab6:	bfd6      	itet	le
 8025ab8:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025abc:	20ff      	movgt	r0, #255	; 0xff
 8025abe:	b2c0      	uxtble	r0, r0
 8025ac0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025ac4:	bfd4      	ite	le
 8025ac6:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8025aca:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8025ace:	7068      	strb	r0, [r5, #1]
 8025ad0:	bfd8      	it	le
 8025ad2:	fa5f fc8c 	uxtble.w	ip, ip
 8025ad6:	f885 c002 	strb.w	ip, [r5, #2]
 8025ada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025adc:	3504      	adds	r5, #4
 8025ade:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025ae0:	4413      	add	r3, r2
 8025ae2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025ae4:	931d      	str	r3, [sp, #116]	; 0x74
 8025ae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ae8:	441a      	add	r2, r3
 8025aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025aec:	3b01      	subs	r3, #1
 8025aee:	921e      	str	r2, [sp, #120]	; 0x78
 8025af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8025af2:	e678      	b.n	80257e6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025af6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025af8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025afa:	4433      	add	r3, r6
 8025afc:	931d      	str	r3, [sp, #116]	; 0x74
 8025afe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b00:	441c      	add	r4, r3
 8025b02:	9b06      	ldr	r3, [sp, #24]
 8025b04:	3b01      	subs	r3, #1
 8025b06:	941e      	str	r4, [sp, #120]	; 0x78
 8025b08:	9306      	str	r3, [sp, #24]
 8025b0a:	9b07      	ldr	r3, [sp, #28]
 8025b0c:	3304      	adds	r3, #4
 8025b0e:	9307      	str	r3, [sp, #28]
 8025b10:	e647      	b.n	80257a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025b12:	d028      	beq.n	8025b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025b14:	9b06      	ldr	r3, [sp, #24]
 8025b16:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025b18:	3b01      	subs	r3, #1
 8025b1a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8025b1c:	fb00 5003 	mla	r0, r0, r3, r5
 8025b20:	1400      	asrs	r0, r0, #16
 8025b22:	f53f ae5b 	bmi.w	80257dc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025b26:	3901      	subs	r1, #1
 8025b28:	4288      	cmp	r0, r1
 8025b2a:	f6bf ae57 	bge.w	80257dc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025b2e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025b30:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025b32:	fb01 0303 	mla	r3, r1, r3, r0
 8025b36:	141b      	asrs	r3, r3, #16
 8025b38:	f53f ae50 	bmi.w	80257dc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025b3c:	3a01      	subs	r2, #1
 8025b3e:	4293      	cmp	r3, r2
 8025b40:	f6bf ae4c 	bge.w	80257dc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025b44:	9b07      	ldr	r3, [sp, #28]
 8025b46:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8025b4a:	1d19      	adds	r1, r3, #4
 8025b4c:	9b06      	ldr	r3, [sp, #24]
 8025b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	f300 8085 	bgt.w	8025c62 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8025b58:	9b06      	ldr	r3, [sp, #24]
 8025b5a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b5e:	9b07      	ldr	r3, [sp, #28]
 8025b60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025b64:	9307      	str	r3, [sp, #28]
 8025b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	f340 820c 	ble.w	8025f86 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8025b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025b74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b7c:	eef0 6a62 	vmov.f32	s13, s5
 8025b80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b8c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8025b90:	eef0 6a43 	vmov.f32	s13, s6
 8025b94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b98:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8025b9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025ba0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025ba4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ba8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025bac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025bb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025bb4:	ee12 2a90 	vmov	r2, s5
 8025bb8:	eef0 2a47 	vmov.f32	s5, s14
 8025bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bc0:	ee13 2a10 	vmov	r2, s6
 8025bc4:	931f      	str	r3, [sp, #124]	; 0x7c
 8025bc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025bc8:	eeb0 3a67 	vmov.f32	s6, s15
 8025bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bd0:	9320      	str	r3, [sp, #128]	; 0x80
 8025bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025bd6:	3b01      	subs	r3, #1
 8025bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8025bda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025bdc:	bf08      	it	eq
 8025bde:	4613      	moveq	r3, r2
 8025be0:	9306      	str	r3, [sp, #24]
 8025be2:	e5d0      	b.n	8025786 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025be4:	fb08 f606 	mul.w	r6, r8, r6
 8025be8:	fb09 6303 	mla	r3, r9, r3, r6
 8025bec:	e650      	b.n	8025890 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025bee:	4681      	mov	r9, r0
 8025bf0:	e677      	b.n	80258e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025bf2:	f1c1 0210 	rsb	r2, r1, #16
 8025bf6:	4341      	muls	r1, r0
 8025bf8:	fb09 1902 	mla	r9, r9, r2, r1
 8025bfc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025c00:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8025c04:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025c08:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025c0c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025c10:	ea41 0909 	orr.w	r9, r1, r9
 8025c14:	fa1f f189 	uxth.w	r1, r9
 8025c18:	e70c      	b.n	8025a34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025c1a:	0200      	lsls	r0, r0, #8
 8025c1c:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8025c20:	ea4c 0202 	orr.w	r2, ip, r2
 8025c24:	602a      	str	r2, [r5, #0]
 8025c26:	e758      	b.n	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c28:	f116 0e01 	adds.w	lr, r6, #1
 8025c2c:	f53f af55 	bmi.w	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c30:	4572      	cmp	r2, lr
 8025c32:	f6ff af52 	blt.w	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c36:	f110 0e01 	adds.w	lr, r0, #1
 8025c3a:	f53f af4e 	bmi.w	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c3e:	4573      	cmp	r3, lr
 8025c40:	f6ff af4b 	blt.w	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c44:	b21b      	sxth	r3, r3
 8025c46:	b212      	sxth	r2, r2
 8025c48:	9301      	str	r3, [sp, #4]
 8025c4a:	9200      	str	r2, [sp, #0]
 8025c4c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025c50:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8025c54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8025c58:	4629      	mov	r1, r5
 8025c5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025c5c:	f7ff fbdb 	bl	8025416 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8025c60:	e73b      	b.n	8025ada <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025c64:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025c68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025c6a:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8025c6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c70:	fa1f fe82 	uxth.w	lr, r2
 8025c74:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025c78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025c7a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025c7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8025c82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025c84:	141b      	asrs	r3, r3, #16
 8025c86:	fb00 3c0c 	mla	ip, r0, ip, r3
 8025c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c8c:	eb03 0a0c 	add.w	sl, r3, ip
 8025c90:	f813 900c 	ldrb.w	r9, [r3, ip]
 8025c94:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025c98:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025c9c:	b29b      	uxth	r3, r3
 8025c9e:	2e00      	cmp	r6, #0
 8025ca0:	f000 8152 	beq.w	8025f48 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8025ca4:	f81a 4000 	ldrb.w	r4, [sl, r0]
 8025ca8:	eb0a 0b00 	add.w	fp, sl, r0
 8025cac:	fa1f fa86 	uxth.w	sl, r6
 8025cb0:	940c      	str	r4, [sp, #48]	; 0x30
 8025cb2:	fb0a fe0e 	mul.w	lr, sl, lr
 8025cb6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025cba:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025cbe:	eba5 050e 	sub.w	r5, r5, lr
 8025cc2:	940d      	str	r4, [sp, #52]	; 0x34
 8025cc4:	fa1f fa8a 	uxth.w	sl, sl
 8025cc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025cca:	b2ad      	uxth	r5, r5
 8025ccc:	eba3 030a 	sub.w	r3, r3, sl
 8025cd0:	fb08 f505 	mul.w	r5, r8, r5
 8025cd4:	b29b      	uxth	r3, r3
 8025cd6:	fb09 5303 	mla	r3, r9, r3, r5
 8025cda:	fb0a 3304 	mla	r3, sl, r4, r3
 8025cde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025ce0:	fb0e 3304 	mla	r3, lr, r4, r3
 8025ce4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	f000 8120 	beq.w	8025f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8025cee:	9c08      	ldr	r4, [sp, #32]
 8025cf0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025cf4:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8025cf8:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 8025cfc:	f000 8129 	beq.w	8025f52 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8025d00:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8025d04:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025d08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d0c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d10:	fb09 f505 	mul.w	r5, r9, r5
 8025d14:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8025d18:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025d1c:	f105 0b20 	add.w	fp, r5, #32
 8025d20:	44cc      	add	ip, r9
 8025d22:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8025d26:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8025d2a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025d2e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025d32:	ea4c 0909 	orr.w	r9, ip, r9
 8025d36:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025d3a:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025d3e:	d019      	beq.n	8025d74 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8025d40:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8025d44:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025d48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d4c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d50:	fb08 f805 	mul.w	r8, r8, r5
 8025d54:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 8025d58:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025d5c:	f108 0b20 	add.w	fp, r8, #32
 8025d60:	44ac      	add	ip, r5
 8025d62:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8025d66:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8025d6a:	0a2d      	lsrs	r5, r5, #8
 8025d6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d70:	ea4c 0505 	orr.w	r5, ip, r5
 8025d74:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025d78:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025d7c:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8025d80:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025d84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025d88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d8c:	ea4c 0909 	orr.w	r9, ip, r9
 8025d90:	ea4a 0505 	orr.w	r5, sl, r5
 8025d94:	2e00      	cmp	r6, #0
 8025d96:	f000 80de 	beq.w	8025f56 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 8025d9a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8025d9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025da0:	3801      	subs	r0, #1
 8025da2:	2cff      	cmp	r4, #255	; 0xff
 8025da4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8025da8:	f100 0002 	add.w	r0, r0, #2
 8025dac:	eb0e 0800 	add.w	r8, lr, r0
 8025db0:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8025db4:	d01a      	beq.n	8025dec <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8025db6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025dba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025dbe:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8025dc2:	fb04 fa00 	mul.w	sl, r4, r0
 8025dc6:	fb0e fe0c 	mul.w	lr, lr, ip
 8025dca:	f10a 0c20 	add.w	ip, sl, #32
 8025dce:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8025dd2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025dd6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025dda:	4470      	add	r0, lr
 8025ddc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025de0:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8025de4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025de8:	ea40 000c 	orr.w	r0, r0, ip
 8025dec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025dee:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8025df2:	2cff      	cmp	r4, #255	; 0xff
 8025df4:	d01a      	beq.n	8025e2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8025df6:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8025dfa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025dfe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025e02:	fb04 fa0c 	mul.w	sl, r4, ip
 8025e06:	fb08 f80e 	mul.w	r8, r8, lr
 8025e0a:	f10a 0e20 	add.w	lr, sl, #32
 8025e0e:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8025e12:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025e16:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025e1a:	44c4      	add	ip, r8
 8025e1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e20:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8025e24:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025e28:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025e2c:	fb16 fe02 	smulbb	lr, r6, r2
 8025e30:	f1c6 0810 	rsb	r8, r6, #16
 8025e34:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025e38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e3c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025e40:	eba8 0802 	sub.w	r8, r8, r2
 8025e44:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8025e48:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e4c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8025e50:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025e54:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025e58:	ea4a 0000 	orr.w	r0, sl, r0
 8025e5c:	436a      	muls	r2, r5
 8025e5e:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8025e62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025e66:	fb09 2208 	mla	r2, r9, r8, r2
 8025e6a:	ea4b 0c0c 	orr.w	ip, fp, ip
 8025e6e:	fb06 2200 	mla	r2, r6, r0, r2
 8025e72:	fb0e 220c 	mla	r2, lr, ip, r2
 8025e76:	0d55      	lsrs	r5, r2, #21
 8025e78:	0952      	lsrs	r2, r2, #5
 8025e7a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025e7e:	f422 6cfc 	bic.w	ip, r2, #2016	; 0x7e0
 8025e82:	ea45 000c 	orr.w	r0, r5, ip
 8025e86:	b280      	uxth	r0, r0
 8025e88:	2bff      	cmp	r3, #255	; 0xff
 8025e8a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8025e8e:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8025e92:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8025e96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025e9a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025e9e:	b2d2      	uxtb	r2, r2
 8025ea0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025ea4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8025ea8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025eac:	d064      	beq.n	8025f78 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 8025eae:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8025eb2:	24ff      	movs	r4, #255	; 0xff
 8025eb4:	fb03 f508 	mul.w	r5, r3, r8
 8025eb8:	4443      	add	r3, r8
 8025eba:	1c68      	adds	r0, r5, #1
 8025ebc:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8025ec0:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8025ec4:	1200      	asrs	r0, r0, #8
 8025ec6:	1a1b      	subs	r3, r3, r0
 8025ec8:	eba8 0000 	sub.w	r0, r8, r0
 8025ecc:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8025ed0:	4345      	muls	r5, r0
 8025ed2:	b2db      	uxtb	r3, r3
 8025ed4:	fb14 5202 	smlabb	r2, r4, r2, r5
 8025ed8:	24ff      	movs	r4, #255	; 0xff
 8025eda:	f801 3c01 	strb.w	r3, [r1, #-1]
 8025ede:	fb92 f2f3 	sdiv	r2, r2, r3
 8025ee2:	2aff      	cmp	r2, #255	; 0xff
 8025ee4:	bfd6      	itet	le
 8025ee6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025eea:	22ff      	movgt	r2, #255	; 0xff
 8025eec:	b2d2      	uxtble	r2, r2
 8025eee:	f801 2c04 	strb.w	r2, [r1, #-4]
 8025ef2:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8025ef6:	4342      	muls	r2, r0
 8025ef8:	fb00 f008 	mul.w	r0, r0, r8
 8025efc:	fb14 2206 	smlabb	r2, r4, r6, r2
 8025f00:	fb92 f2f3 	sdiv	r2, r2, r3
 8025f04:	2aff      	cmp	r2, #255	; 0xff
 8025f06:	bfd6      	itet	le
 8025f08:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025f0c:	22ff      	movgt	r2, #255	; 0xff
 8025f0e:	b2d2      	uxtble	r2, r2
 8025f10:	f801 2c03 	strb.w	r2, [r1, #-3]
 8025f14:	22ff      	movs	r2, #255	; 0xff
 8025f16:	fb12 000c 	smlabb	r0, r2, ip, r0
 8025f1a:	fb90 f0f3 	sdiv	r0, r0, r3
 8025f1e:	28ff      	cmp	r0, #255	; 0xff
 8025f20:	bfd6      	itet	le
 8025f22:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025f26:	20ff      	movgt	r0, #255	; 0xff
 8025f28:	b2c0      	uxtble	r0, r0
 8025f2a:	f801 0c02 	strb.w	r0, [r1, #-2]
 8025f2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025f30:	3104      	adds	r1, #4
 8025f32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025f34:	4413      	add	r3, r2
 8025f36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025f38:	931d      	str	r3, [sp, #116]	; 0x74
 8025f3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025f3c:	441a      	add	r2, r3
 8025f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025f40:	3b01      	subs	r3, #1
 8025f42:	921e      	str	r2, [sp, #120]	; 0x78
 8025f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8025f46:	e603      	b.n	8025b50 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025f48:	fb08 f505 	mul.w	r5, r8, r5
 8025f4c:	fb09 5303 	mla	r3, r9, r3, r5
 8025f50:	e6c8      	b.n	8025ce4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025f52:	46a9      	mov	r9, r5
 8025f54:	e6ef      	b.n	8025d36 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8025f56:	f1c2 0010 	rsb	r0, r2, #16
 8025f5a:	436a      	muls	r2, r5
 8025f5c:	fb09 2900 	mla	r9, r9, r0, r2
 8025f60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025f64:	ea4f 5659 	mov.w	r6, r9, lsr #21
 8025f68:	ea4f 1059 	mov.w	r0, r9, lsr #5
 8025f6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025f70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025f74:	4330      	orrs	r0, r6
 8025f76:	e786      	b.n	8025e86 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025f78:	0236      	lsls	r6, r6, #8
 8025f7a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8025f7e:	4332      	orrs	r2, r6
 8025f80:	f841 2c04 	str.w	r2, [r1, #-4]
 8025f84:	e7d3      	b.n	8025f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8025f86:	b013      	add	sp, #76	; 0x4c
 8025f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f8c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 8025f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f90:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	; 0x28
 8025f94:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025f98:	fb08 6703 	mla	r7, r8, r3, r6
 8025f9c:	f1b8 0f00 	cmp.w	r8, #0
 8025fa0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8025fa4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8025fa8:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 8025fac:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8025fb0:	6808      	ldr	r0, [r1, #0]
 8025fb2:	f2c0 80d5 	blt.w	8026160 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8025fb6:	45c1      	cmp	r9, r8
 8025fb8:	f340 80d2 	ble.w	8026160 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8025fbc:	2e00      	cmp	r6, #0
 8025fbe:	f2c0 80cd 	blt.w	802615c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8025fc2:	42b3      	cmp	r3, r6
 8025fc4:	f340 80ca 	ble.w	802615c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8025fc8:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8025fcc:	ea4f 272c 	mov.w	r7, ip, asr #8
 8025fd0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025fd4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8025fd8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025fdc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025fe0:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8025fe4:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8025fe8:	fa5f fc8c 	uxtb.w	ip, ip
 8025fec:	023f      	lsls	r7, r7, #8
 8025fee:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025ff2:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8025ff6:	ea47 070c 	orr.w	r7, r7, ip
 8025ffa:	1c72      	adds	r2, r6, #1
 8025ffc:	f100 80b3 	bmi.w	8026166 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8026000:	4293      	cmp	r3, r2
 8026002:	f340 80b0 	ble.w	8026166 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8026006:	2c00      	cmp	r4, #0
 8026008:	f000 80ad 	beq.w	8026166 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 802600c:	f8ba b002 	ldrh.w	fp, [sl, #2]
 8026010:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8026014:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 8026018:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802601c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8026020:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026024:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8026028:	fa5f fb8b 	uxtb.w	fp, fp
 802602c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8026030:	0212      	lsls	r2, r2, #8
 8026032:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8026036:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 802603a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802603e:	f118 0801 	adds.w	r8, r8, #1
 8026042:	f100 8094 	bmi.w	802616e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8026046:	45c1      	cmp	r9, r8
 8026048:	f340 8091 	ble.w	802616e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 802604c:	f1be 0f00 	cmp.w	lr, #0
 8026050:	f000 808d 	beq.w	802616e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8026054:	2e00      	cmp	r6, #0
 8026056:	f2c0 8088 	blt.w	802616a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802605a:	42b3      	cmp	r3, r6
 802605c:	f340 8085 	ble.w	802616a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8026060:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8026064:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026068:	ea4f 09e8 	mov.w	r9, r8, asr #3
 802606c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026070:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8026074:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8026078:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 802607c:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 8026080:	fa5f f888 	uxtb.w	r8, r8
 8026084:	0212      	lsls	r2, r2, #8
 8026086:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802608a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 802608e:	ea42 0208 	orr.w	r2, r2, r8
 8026092:	3601      	adds	r6, #1
 8026094:	d417      	bmi.n	80260c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8026096:	42b3      	cmp	r3, r6
 8026098:	dd15      	ble.n	80260c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802609a:	b1a4      	cbz	r4, 80260c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802609c:	3301      	adds	r3, #1
 802609e:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 80260a2:	10f3      	asrs	r3, r6, #3
 80260a4:	1230      	asrs	r0, r6, #8
 80260a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80260aa:	00f6      	lsls	r6, r6, #3
 80260ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80260b0:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80260b4:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 80260b8:	b2f6      	uxtb	r6, r6
 80260ba:	0218      	lsls	r0, r3, #8
 80260bc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80260c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80260c4:	4330      	orrs	r0, r6
 80260c6:	b2a4      	uxth	r4, r4
 80260c8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80260cc:	fa1f fe8e 	uxth.w	lr, lr
 80260d0:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 80260d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80260d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80260dc:	fb04 f80e 	mul.w	r8, r4, lr
 80260e0:	0124      	lsls	r4, r4, #4
 80260e2:	2dff      	cmp	r5, #255	; 0xff
 80260e4:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 80260e8:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80260ec:	eba4 0408 	sub.w	r4, r4, r8
 80260f0:	fa1f fe8e 	uxth.w	lr, lr
 80260f4:	b2a4      	uxth	r4, r4
 80260f6:	eba9 090e 	sub.w	r9, r9, lr
 80260fa:	fb04 f303 	mul.w	r3, r4, r3
 80260fe:	fa1f f989 	uxth.w	r9, r9
 8026102:	fb04 f40c 	mul.w	r4, r4, ip
 8026106:	fb09 3606 	mla	r6, r9, r6, r3
 802610a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802610e:	fb09 4407 	mla	r4, r9, r7, r4
 8026112:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026116:	fb08 6603 	mla	r6, r8, r3, r6
 802611a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802611e:	fb08 4000 	mla	r0, r8, r0, r4
 8026122:	fb0e 6303 	mla	r3, lr, r3, r6
 8026126:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802612a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802612e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8026132:	fb0e 0303 	mla	r3, lr, r3, r0
 8026136:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802613a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802613e:	ea43 0306 	orr.w	r3, r3, r6
 8026142:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026146:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802614a:	b2d4      	uxtb	r4, r2
 802614c:	b2c6      	uxtb	r6, r0
 802614e:	d110      	bne.n	8026172 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 8026150:	700b      	strb	r3, [r1, #0]
 8026152:	7048      	strb	r0, [r1, #1]
 8026154:	708a      	strb	r2, [r1, #2]
 8026156:	70cd      	strb	r5, [r1, #3]
 8026158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802615c:	4607      	mov	r7, r0
 802615e:	e74c      	b.n	8025ffa <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 8026160:	4684      	mov	ip, r0
 8026162:	4607      	mov	r7, r0
 8026164:	e76b      	b.n	802603e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8026166:	4684      	mov	ip, r0
 8026168:	e769      	b.n	802603e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 802616a:	4602      	mov	r2, r0
 802616c:	e791      	b.n	8026092 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 802616e:	4602      	mov	r2, r0
 8026170:	e7a9      	b.n	80260c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8026172:	2d00      	cmp	r5, #0
 8026174:	d0f0      	beq.n	8026158 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8026176:	78cf      	ldrb	r7, [r1, #3]
 8026178:	b2db      	uxtb	r3, r3
 802617a:	fb15 f606 	smulbb	r6, r5, r6
 802617e:	fb05 f207 	mul.w	r2, r5, r7
 8026182:	1c50      	adds	r0, r2, #1
 8026184:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026188:	19ea      	adds	r2, r5, r7
 802618a:	1200      	asrs	r0, r0, #8
 802618c:	1a12      	subs	r2, r2, r0
 802618e:	1a38      	subs	r0, r7, r0
 8026190:	780f      	ldrb	r7, [r1, #0]
 8026192:	b2d2      	uxtb	r2, r2
 8026194:	4347      	muls	r7, r0
 8026196:	70ca      	strb	r2, [r1, #3]
 8026198:	fb05 7303 	mla	r3, r5, r3, r7
 802619c:	fb15 f504 	smulbb	r5, r5, r4
 80261a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80261a4:	700b      	strb	r3, [r1, #0]
 80261a6:	784b      	ldrb	r3, [r1, #1]
 80261a8:	fb00 6303 	mla	r3, r0, r3, r6
 80261ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80261b0:	704b      	strb	r3, [r1, #1]
 80261b2:	788b      	ldrb	r3, [r1, #2]
 80261b4:	fb00 5503 	mla	r5, r0, r3, r5
 80261b8:	fb95 f5f2 	sdiv	r5, r5, r2
 80261bc:	708d      	strb	r5, [r1, #2]
 80261be:	e7cb      	b.n	8026158 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

080261c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261c4:	b08f      	sub	sp, #60	; 0x3c
 80261c6:	461f      	mov	r7, r3
 80261c8:	920c      	str	r2, [sp, #48]	; 0x30
 80261ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80261cc:	900d      	str	r0, [sp, #52]	; 0x34
 80261ce:	9107      	str	r1, [sp, #28]
 80261d0:	6850      	ldr	r0, [r2, #4]
 80261d2:	6812      	ldr	r2, [r2, #0]
 80261d4:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 80261d8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80261dc:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	; 0x64
 80261e0:	fb00 1303 	mla	r3, r0, r3, r1
 80261e4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80261e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80261ea:	681b      	ldr	r3, [r3, #0]
 80261ec:	9306      	str	r3, [sp, #24]
 80261ee:	9b07      	ldr	r3, [sp, #28]
 80261f0:	2b00      	cmp	r3, #0
 80261f2:	dc03      	bgt.n	80261fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80261f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80261f6:	2b00      	cmp	r3, #0
 80261f8:	f340 8230 	ble.w	802665c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80261fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80261fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026202:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026206:	1e48      	subs	r0, r1, #1
 8026208:	1e56      	subs	r6, r2, #1
 802620a:	2f00      	cmp	r7, #0
 802620c:	f340 80bd 	ble.w	802638a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8026210:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026214:	ea4f 4328 	mov.w	r3, r8, asr #16
 8026218:	d406      	bmi.n	8026228 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802621a:	4584      	cmp	ip, r0
 802621c:	da04      	bge.n	8026228 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802621e:	2b00      	cmp	r3, #0
 8026220:	db02      	blt.n	8026228 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026222:	42b3      	cmp	r3, r6
 8026224:	f2c0 80b2 	blt.w	802638c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8026228:	f11c 0c01 	adds.w	ip, ip, #1
 802622c:	f100 80a5 	bmi.w	802637a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026230:	4561      	cmp	r1, ip
 8026232:	f2c0 80a2 	blt.w	802637a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026236:	3301      	adds	r3, #1
 8026238:	f100 809f 	bmi.w	802637a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802623c:	429a      	cmp	r2, r3
 802623e:	f2c0 809c 	blt.w	802637a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026242:	46ba      	mov	sl, r7
 8026244:	464e      	mov	r6, r9
 8026246:	f1ba 0f00 	cmp.w	sl, #0
 802624a:	f340 80bb 	ble.w	80263c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802624e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026250:	1429      	asrs	r1, r5, #16
 8026252:	ea4f 4028 	mov.w	r0, r8, asr #16
 8026256:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802625a:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 802625e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026262:	f100 8122 	bmi.w	80264aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026266:	f10e 3bff 	add.w	fp, lr, #4294967295
 802626a:	4559      	cmp	r1, fp
 802626c:	f280 811d 	bge.w	80264aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026270:	2800      	cmp	r0, #0
 8026272:	f2c0 811a 	blt.w	80264aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026276:	f103 3bff 	add.w	fp, r3, #4294967295
 802627a:	4558      	cmp	r0, fp
 802627c:	f280 8115 	bge.w	80264aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026280:	fa0f fe8e 	sxth.w	lr, lr
 8026284:	9b06      	ldr	r3, [sp, #24]
 8026286:	fb00 110e 	mla	r1, r0, lr, r1
 802628a:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 802628e:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 8026292:	8841      	ldrh	r1, [r0, #2]
 8026294:	f1bc 0f00 	cmp.w	ip, #0
 8026298:	d00b      	beq.n	80262b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 802629a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802629e:	3b01      	subs	r3, #1
 80262a0:	005b      	lsls	r3, r3, #1
 80262a2:	3302      	adds	r3, #2
 80262a4:	eb00 0e03 	add.w	lr, r0, r3
 80262a8:	5ac3      	ldrh	r3, [r0, r3]
 80262aa:	9308      	str	r3, [sp, #32]
 80262ac:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80262b0:	9309      	str	r3, [sp, #36]	; 0x24
 80262b2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80262b6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80262ba:	fb12 f30c 	smulbb	r3, r2, ip
 80262be:	f1cc 0e10 	rsb	lr, ip, #16
 80262c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80262c6:	2cff      	cmp	r4, #255	; 0xff
 80262c8:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80262cc:	ebae 0e02 	sub.w	lr, lr, r2
 80262d0:	ea40 000b 	orr.w	r0, r0, fp
 80262d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80262d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80262dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80262e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80262e4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80262e8:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 80262ec:	ea4b 0101 	orr.w	r1, fp, r1
 80262f0:	fb02 f101 	mul.w	r1, r2, r1
 80262f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80262f6:	fb0e 1e00 	mla	lr, lr, r0, r1
 80262fa:	ea4f 4002 	mov.w	r0, r2, lsl #16
 80262fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026302:	9908      	ldr	r1, [sp, #32]
 8026304:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026308:	ea40 0002 	orr.w	r0, r0, r2
 802630c:	9a08      	ldr	r2, [sp, #32]
 802630e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8026312:	fb03 e000 	mla	r0, r3, r0, lr
 8026316:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802631a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802631e:	ea42 020e 	orr.w	r2, r2, lr
 8026322:	fb0c 0c02 	mla	ip, ip, r2, r0
 8026326:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802632a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802632e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026332:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026336:	ea43 0c0c 	orr.w	ip, r3, ip
 802633a:	fa1f f38c 	uxth.w	r3, ip
 802633e:	ea4f 2223 	mov.w	r2, r3, asr #8
 8026342:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8026346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802634a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802634e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026352:	b2db      	uxtb	r3, r3
 8026354:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026358:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802635c:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8026360:	d174      	bne.n	802644c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8026362:	7033      	strb	r3, [r6, #0]
 8026364:	7071      	strb	r1, [r6, #1]
 8026366:	70b2      	strb	r2, [r6, #2]
 8026368:	70f4      	strb	r4, [r6, #3]
 802636a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802636c:	3604      	adds	r6, #4
 802636e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026372:	441d      	add	r5, r3
 8026374:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026376:	4498      	add	r8, r3
 8026378:	e765      	b.n	8026246 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802637a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802637c:	3f01      	subs	r7, #1
 802637e:	f109 0904 	add.w	r9, r9, #4
 8026382:	441d      	add	r5, r3
 8026384:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026386:	4498      	add	r8, r3
 8026388:	e73f      	b.n	802620a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802638a:	d01f      	beq.n	80263cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802638c:	1e7b      	subs	r3, r7, #1
 802638e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026390:	fb00 5003 	mla	r0, r0, r3, r5
 8026394:	1400      	asrs	r0, r0, #16
 8026396:	f53f af54 	bmi.w	8026242 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802639a:	3901      	subs	r1, #1
 802639c:	4288      	cmp	r0, r1
 802639e:	f6bf af50 	bge.w	8026242 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80263a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80263a4:	fb01 8303 	mla	r3, r1, r3, r8
 80263a8:	141b      	asrs	r3, r3, #16
 80263aa:	f53f af4a 	bmi.w	8026242 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80263ae:	3a01      	subs	r2, #1
 80263b0:	4293      	cmp	r3, r2
 80263b2:	f6bf af46 	bge.w	8026242 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80263b6:	f109 0304 	add.w	r3, r9, #4
 80263ba:	46ba      	mov	sl, r7
 80263bc:	f1ba 0f00 	cmp.w	sl, #0
 80263c0:	f300 8090 	bgt.w	80264e4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80263c4:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80263c8:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 80263cc:	9b07      	ldr	r3, [sp, #28]
 80263ce:	2b00      	cmp	r3, #0
 80263d0:	f340 8144 	ble.w	802665c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80263d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80263d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80263da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80263de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80263e2:	eef0 6a62 	vmov.f32	s13, s5
 80263e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80263ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80263ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263f2:	ee16 5a90 	vmov	r5, s13
 80263f6:	eef0 6a43 	vmov.f32	s13, s6
 80263fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263fe:	ee16 8a90 	vmov	r8, s13
 8026402:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026406:	ee61 7a27 	vmul.f32	s15, s2, s15
 802640a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802640e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026412:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026416:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802641a:	ee12 2a90 	vmov	r2, s5
 802641e:	eef0 2a47 	vmov.f32	s5, s14
 8026422:	fb92 f3f3 	sdiv	r3, r2, r3
 8026426:	ee13 2a10 	vmov	r2, s6
 802642a:	931b      	str	r3, [sp, #108]	; 0x6c
 802642c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802642e:	eeb0 3a67 	vmov.f32	s6, s15
 8026432:	fb92 f3f3 	sdiv	r3, r2, r3
 8026436:	931c      	str	r3, [sp, #112]	; 0x70
 8026438:	9b07      	ldr	r3, [sp, #28]
 802643a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802643c:	3b01      	subs	r3, #1
 802643e:	9307      	str	r3, [sp, #28]
 8026440:	bf08      	it	eq
 8026442:	4617      	moveq	r7, r2
 8026444:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026446:	bf18      	it	ne
 8026448:	461f      	movne	r7, r3
 802644a:	e6d0      	b.n	80261ee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802644c:	2c00      	cmp	r4, #0
 802644e:	d08c      	beq.n	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026450:	f896 e003 	ldrb.w	lr, [r6, #3]
 8026454:	fb13 f304 	smulbb	r3, r3, r4
 8026458:	fb14 f101 	smulbb	r1, r4, r1
 802645c:	fb14 f202 	smulbb	r2, r4, r2
 8026460:	fb04 fc0e 	mul.w	ip, r4, lr
 8026464:	f10c 0001 	add.w	r0, ip, #1
 8026468:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802646c:	eb04 0c0e 	add.w	ip, r4, lr
 8026470:	1200      	asrs	r0, r0, #8
 8026472:	ebac 0c00 	sub.w	ip, ip, r0
 8026476:	ebae 0000 	sub.w	r0, lr, r0
 802647a:	f896 e000 	ldrb.w	lr, [r6]
 802647e:	fa5f fc8c 	uxtb.w	ip, ip
 8026482:	fb00 330e 	mla	r3, r0, lr, r3
 8026486:	f886 c003 	strb.w	ip, [r6, #3]
 802648a:	fb93 f3fc 	sdiv	r3, r3, ip
 802648e:	7033      	strb	r3, [r6, #0]
 8026490:	7873      	ldrb	r3, [r6, #1]
 8026492:	fb00 1103 	mla	r1, r0, r3, r1
 8026496:	78b3      	ldrb	r3, [r6, #2]
 8026498:	fb00 2003 	mla	r0, r0, r3, r2
 802649c:	fb91 f1fc 	sdiv	r1, r1, ip
 80264a0:	fb90 f0fc 	sdiv	r0, r0, ip
 80264a4:	7071      	strb	r1, [r6, #1]
 80264a6:	70b0      	strb	r0, [r6, #2]
 80264a8:	e75f      	b.n	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264aa:	f111 0b01 	adds.w	fp, r1, #1
 80264ae:	f53f af5c 	bmi.w	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264b2:	45de      	cmp	lr, fp
 80264b4:	f6ff af59 	blt.w	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264b8:	f110 0b01 	adds.w	fp, r0, #1
 80264bc:	f53f af55 	bmi.w	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264c0:	455b      	cmp	r3, fp
 80264c2:	f6ff af52 	blt.w	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264c6:	b21b      	sxth	r3, r3
 80264c8:	9101      	str	r1, [sp, #4]
 80264ca:	4631      	mov	r1, r6
 80264cc:	9300      	str	r3, [sp, #0]
 80264ce:	fa0f f38e 	sxth.w	r3, lr
 80264d2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80264d6:	e9cd c404 	strd	ip, r4, [sp, #16]
 80264da:	9a06      	ldr	r2, [sp, #24]
 80264dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80264de:	f7ff fd55 	bl	8025f8c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 80264e2:	e742      	b.n	802636a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80264e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80264e6:	142e      	asrs	r6, r5, #16
 80264e8:	ea4f 4028 	mov.w	r0, r8, asr #16
 80264ec:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80264f0:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 80264f4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80264f8:	9a06      	ldr	r2, [sp, #24]
 80264fa:	fb0b 6000 	mla	r0, fp, r0, r6
 80264fe:	9e06      	ldr	r6, [sp, #24]
 8026500:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8026504:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 8026508:	8870      	ldrh	r0, [r6, #2]
 802650a:	f1be 0f00 	cmp.w	lr, #0
 802650e:	d00b      	beq.n	8026528 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026510:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8026514:	3a01      	subs	r2, #1
 8026516:	0052      	lsls	r2, r2, #1
 8026518:	3202      	adds	r2, #2
 802651a:	eb06 0b02 	add.w	fp, r6, r2
 802651e:	5ab2      	ldrh	r2, [r6, r2]
 8026520:	920a      	str	r2, [sp, #40]	; 0x28
 8026522:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8026526:	920b      	str	r2, [sp, #44]	; 0x2c
 8026528:	ea4f 460c 	mov.w	r6, ip, lsl #16
 802652c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026530:	fb11 f20e 	smulbb	r2, r1, lr
 8026534:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026538:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 802653c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026540:	10d2      	asrs	r2, r2, #3
 8026542:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026546:	ea46 060c 	orr.w	r6, r6, ip
 802654a:	f1ce 0c10 	rsb	ip, lr, #16
 802654e:	ea4b 0000 	orr.w	r0, fp, r0
 8026552:	2cff      	cmp	r4, #255	; 0xff
 8026554:	ebac 0c01 	sub.w	ip, ip, r1
 8026558:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 802655c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026560:	fb01 f000 	mul.w	r0, r1, r0
 8026564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026566:	fb0c 0c06 	mla	ip, ip, r6, r0
 802656a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802656c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026570:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 8026574:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026576:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802657a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802657e:	ea4b 0606 	orr.w	r6, fp, r6
 8026582:	f420 6bfc 	bic.w	fp, r0, #2016	; 0x7e0
 8026586:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802658a:	fb02 c606 	mla	r6, r2, r6, ip
 802658e:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8026592:	ea41 0b0b 	orr.w	fp, r1, fp
 8026596:	fb02 660b 	mla	r6, r2, fp, r6
 802659a:	ea4f 5256 	mov.w	r2, r6, lsr #21
 802659e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80265a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80265a6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80265aa:	ea46 0602 	orr.w	r6, r6, r2
 80265ae:	b2b2      	uxth	r2, r6
 80265b0:	ea4f 2122 	mov.w	r1, r2, asr #8
 80265b4:	ea4f 00e2 	mov.w	r0, r2, asr #3
 80265b8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80265bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80265c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80265c4:	b2d2      	uxtb	r2, r2
 80265c6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80265ca:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80265ce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80265d2:	d10f      	bne.n	80265f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80265d4:	f803 2c04 	strb.w	r2, [r3, #-4]
 80265d8:	f803 0c03 	strb.w	r0, [r3, #-3]
 80265dc:	f803 1c02 	strb.w	r1, [r3, #-2]
 80265e0:	f803 4c01 	strb.w	r4, [r3, #-1]
 80265e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80265e6:	3304      	adds	r3, #4
 80265e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80265ec:	4415      	add	r5, r2
 80265ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80265f0:	4490      	add	r8, r2
 80265f2:	e6e3      	b.n	80263bc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80265f4:	2c00      	cmp	r4, #0
 80265f6:	d0f5      	beq.n	80265e4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80265f8:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 80265fc:	fb12 f204 	smulbb	r2, r2, r4
 8026600:	fb14 f000 	smulbb	r0, r4, r0
 8026604:	fb14 f101 	smulbb	r1, r4, r1
 8026608:	fb04 f60e 	mul.w	r6, r4, lr
 802660c:	f106 0c01 	add.w	ip, r6, #1
 8026610:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8026614:	eb04 060e 	add.w	r6, r4, lr
 8026618:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802661c:	eba6 060c 	sub.w	r6, r6, ip
 8026620:	ebae 0c0c 	sub.w	ip, lr, ip
 8026624:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8026628:	b2f6      	uxtb	r6, r6
 802662a:	fb0c 220e 	mla	r2, ip, lr, r2
 802662e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8026632:	fb92 f2f6 	sdiv	r2, r2, r6
 8026636:	f803 2c04 	strb.w	r2, [r3, #-4]
 802663a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 802663e:	fb0c 0002 	mla	r0, ip, r2, r0
 8026642:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8026646:	fb0c 1c02 	mla	ip, ip, r2, r1
 802664a:	fb90 f0f6 	sdiv	r0, r0, r6
 802664e:	fb9c fcf6 	sdiv	ip, ip, r6
 8026652:	f803 0c03 	strb.w	r0, [r3, #-3]
 8026656:	f803 cc02 	strb.w	ip, [r3, #-2]
 802665a:	e7c3      	b.n	80265e4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802665c:	b00f      	add	sp, #60	; 0x3c
 802665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026662 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8026662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026666:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 802666a:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802666e:	fb08 7403 	mla	r4, r8, r3, r7
 8026672:	f1b8 0f00 	cmp.w	r8, #0
 8026676:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802667a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802667e:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8026682:	6808      	ldr	r0, [r1, #0]
 8026684:	f2c0 80be 	blt.w	8026804 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8026688:	45c2      	cmp	sl, r8
 802668a:	f340 80bb 	ble.w	8026804 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 802668e:	2f00      	cmp	r7, #0
 8026690:	f2c0 80b6 	blt.w	8026800 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8026694:	42bb      	cmp	r3, r7
 8026696:	f340 80b3 	ble.w	8026800 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 802669a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 802669e:	10d5      	asrs	r5, r2, #3
 80266a0:	1214      	asrs	r4, r2, #8
 80266a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80266a6:	00d2      	lsls	r2, r2, #3
 80266a8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80266ac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80266b0:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 80266b4:	b2d2      	uxtb	r2, r2
 80266b6:	022c      	lsls	r4, r5, #8
 80266b8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80266bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80266c0:	4314      	orrs	r4, r2
 80266c2:	1c7a      	adds	r2, r7, #1
 80266c4:	f100 80a1 	bmi.w	802680a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 80266c8:	4293      	cmp	r3, r2
 80266ca:	f340 809e 	ble.w	802680a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 80266ce:	2e00      	cmp	r6, #0
 80266d0:	f000 809b 	beq.w	802680a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 80266d4:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 80266d8:	ea4f 252e 	mov.w	r5, lr, asr #8
 80266dc:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80266e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80266e4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80266e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80266ec:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 80266f0:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 80266f4:	fa5f fe8e 	uxtb.w	lr, lr
 80266f8:	022d      	lsls	r5, r5, #8
 80266fa:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80266fe:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8026702:	ea45 050e 	orr.w	r5, r5, lr
 8026706:	f118 0801 	adds.w	r8, r8, #1
 802670a:	f100 8082 	bmi.w	8026812 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 802670e:	45c2      	cmp	sl, r8
 8026710:	dd7f      	ble.n	8026812 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026712:	f1bc 0f00 	cmp.w	ip, #0
 8026716:	d07c      	beq.n	8026812 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026718:	2f00      	cmp	r7, #0
 802671a:	db78      	blt.n	802680e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 802671c:	42bb      	cmp	r3, r7
 802671e:	dd76      	ble.n	802680e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8026720:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8026724:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8026728:	ea4f 222e 	mov.w	r2, lr, asr #8
 802672c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8026730:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026734:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026738:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 802673c:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8026740:	fa5f fe8e 	uxtb.w	lr, lr
 8026744:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8026748:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802674c:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8026750:	ea42 020e 	orr.w	r2, r2, lr
 8026754:	3701      	adds	r7, #1
 8026756:	d417      	bmi.n	8026788 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026758:	42bb      	cmp	r3, r7
 802675a:	dd15      	ble.n	8026788 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802675c:	b1a6      	cbz	r6, 8026788 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802675e:	3301      	adds	r3, #1
 8026760:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8026764:	10df      	asrs	r7, r3, #3
 8026766:	1218      	asrs	r0, r3, #8
 8026768:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802676c:	00db      	lsls	r3, r3, #3
 802676e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026772:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8026776:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 802677a:	b2db      	uxtb	r3, r3
 802677c:	0238      	lsls	r0, r7, #8
 802677e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8026782:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8026786:	4318      	orrs	r0, r3
 8026788:	b2b6      	uxth	r6, r6
 802678a:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802678e:	fa1f f78c 	uxth.w	r7, ip
 8026792:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026796:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802679a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802679e:	fb06 fc07 	mul.w	ip, r6, r7
 80267a2:	0136      	lsls	r6, r6, #4
 80267a4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80267a8:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 80267ac:	eba6 060c 	sub.w	r6, r6, ip
 80267b0:	b2bf      	uxth	r7, r7
 80267b2:	b2b6      	uxth	r6, r6
 80267b4:	ebae 0e07 	sub.w	lr, lr, r7
 80267b8:	4373      	muls	r3, r6
 80267ba:	fa1f fe8e 	uxth.w	lr, lr
 80267be:	4375      	muls	r5, r6
 80267c0:	fb0e 3808 	mla	r8, lr, r8, r3
 80267c4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80267c8:	fb0e 5404 	mla	r4, lr, r4, r5
 80267cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80267d0:	fb0c 8803 	mla	r8, ip, r3, r8
 80267d4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80267d8:	fb0c 4000 	mla	r0, ip, r0, r4
 80267dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80267e0:	fb07 8303 	mla	r3, r7, r3, r8
 80267e4:	fb07 0002 	mla	r0, r7, r2, r0
 80267e8:	0a1b      	lsrs	r3, r3, #8
 80267ea:	0a00      	lsrs	r0, r0, #8
 80267ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80267f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80267f4:	4318      	orrs	r0, r3
 80267f6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80267fa:	6008      	str	r0, [r1, #0]
 80267fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026800:	4604      	mov	r4, r0
 8026802:	e75e      	b.n	80266c2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8026804:	4605      	mov	r5, r0
 8026806:	4604      	mov	r4, r0
 8026808:	e77d      	b.n	8026706 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 802680a:	4605      	mov	r5, r0
 802680c:	e77b      	b.n	8026706 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 802680e:	4602      	mov	r2, r0
 8026810:	e7a0      	b.n	8026754 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8026812:	4602      	mov	r2, r0
 8026814:	e7b8      	b.n	8026788 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08026816 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802681a:	b08f      	sub	sp, #60	; 0x3c
 802681c:	461d      	mov	r5, r3
 802681e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026820:	9107      	str	r1, [sp, #28]
 8026822:	920c      	str	r2, [sp, #48]	; 0x30
 8026824:	6859      	ldr	r1, [r3, #4]
 8026826:	681b      	ldr	r3, [r3, #0]
 8026828:	900d      	str	r0, [sp, #52]	; 0x34
 802682a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802682e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8026832:	fb01 2707 	mla	r7, r1, r7, r2
 8026836:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802683a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802683c:	f8d3 8000 	ldr.w	r8, [r3]
 8026840:	9b07      	ldr	r3, [sp, #28]
 8026842:	2b00      	cmp	r3, #0
 8026844:	dc03      	bgt.n	802684e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026848:	2b00      	cmp	r3, #0
 802684a:	f340 81aa 	ble.w	8026ba2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802684e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026850:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026854:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026858:	1e48      	subs	r0, r1, #1
 802685a:	f102 3cff 	add.w	ip, r2, #4294967295
 802685e:	2d00      	cmp	r5, #0
 8026860:	f340 80b0 	ble.w	80269c4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026864:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026868:	ea4f 4326 	mov.w	r3, r6, asr #16
 802686c:	d406      	bmi.n	802687c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802686e:	4586      	cmp	lr, r0
 8026870:	da04      	bge.n	802687c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026872:	2b00      	cmp	r3, #0
 8026874:	db02      	blt.n	802687c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026876:	4563      	cmp	r3, ip
 8026878:	f2c0 80a5 	blt.w	80269c6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802687c:	f11e 0e01 	adds.w	lr, lr, #1
 8026880:	f100 8099 	bmi.w	80269b6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026884:	4571      	cmp	r1, lr
 8026886:	f2c0 8096 	blt.w	80269b6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802688a:	3301      	adds	r3, #1
 802688c:	f100 8093 	bmi.w	80269b6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026890:	429a      	cmp	r2, r3
 8026892:	f2c0 8090 	blt.w	80269b6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026896:	46aa      	mov	sl, r5
 8026898:	46b9      	mov	r9, r7
 802689a:	f1ba 0f00 	cmp.w	sl, #0
 802689e:	f340 80ac 	ble.w	80269fa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80268a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80268a4:	1421      	asrs	r1, r4, #16
 80268a6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80268aa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80268ae:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80268b2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80268b6:	f100 80e4 	bmi.w	8026a82 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80268ba:	f10e 3bff 	add.w	fp, lr, #4294967295
 80268be:	4559      	cmp	r1, fp
 80268c0:	f280 80df 	bge.w	8026a82 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80268c4:	2800      	cmp	r0, #0
 80268c6:	f2c0 80dc 	blt.w	8026a82 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80268ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80268ce:	4558      	cmp	r0, fp
 80268d0:	f280 80d7 	bge.w	8026a82 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80268d4:	fa0f fe8e 	sxth.w	lr, lr
 80268d8:	fb00 110e 	mla	r1, r0, lr, r1
 80268dc:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80268e0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80268e4:	8841      	ldrh	r1, [r0, #2]
 80268e6:	f1bc 0f00 	cmp.w	ip, #0
 80268ea:	d00b      	beq.n	8026904 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 80268ec:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80268f0:	3b01      	subs	r3, #1
 80268f2:	005b      	lsls	r3, r3, #1
 80268f4:	3302      	adds	r3, #2
 80268f6:	eb00 0e03 	add.w	lr, r0, r3
 80268fa:	5ac3      	ldrh	r3, [r0, r3]
 80268fc:	9308      	str	r3, [sp, #32]
 80268fe:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026902:	9309      	str	r3, [sp, #36]	; 0x24
 8026904:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026908:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802690c:	fb12 f30c 	smulbb	r3, r2, ip
 8026910:	f1cc 0e10 	rsb	lr, ip, #16
 8026914:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026918:	10db      	asrs	r3, r3, #3
 802691a:	ebae 0e02 	sub.w	lr, lr, r2
 802691e:	ea40 000b 	orr.w	r0, r0, fp
 8026922:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026926:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802692a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802692e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026932:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026936:	ea4b 0101 	orr.w	r1, fp, r1
 802693a:	4351      	muls	r1, r2
 802693c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802693e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026942:	0410      	lsls	r0, r2, #16
 8026944:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026948:	9908      	ldr	r1, [sp, #32]
 802694a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802694e:	4310      	orrs	r0, r2
 8026950:	9a08      	ldr	r2, [sp, #32]
 8026952:	0412      	lsls	r2, r2, #16
 8026954:	fb03 e000 	mla	r0, r3, r0, lr
 8026958:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802695c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026960:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026964:	ea42 020e 	orr.w	r2, r2, lr
 8026968:	fb03 0302 	mla	r3, r3, r2, r0
 802696c:	0d59      	lsrs	r1, r3, #21
 802696e:	095b      	lsrs	r3, r3, #5
 8026970:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026974:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026978:	430b      	orrs	r3, r1
 802697a:	b299      	uxth	r1, r3
 802697c:	10ca      	asrs	r2, r1, #3
 802697e:	1208      	asrs	r0, r1, #8
 8026980:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8026984:	00c9      	lsls	r1, r1, #3
 8026986:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802698a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802698e:	b2c9      	uxtb	r1, r1
 8026990:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8026994:	021b      	lsls	r3, r3, #8
 8026996:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802699a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802699e:	430b      	orrs	r3, r1
 80269a0:	f8c9 3000 	str.w	r3, [r9]
 80269a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80269a6:	f109 0904 	add.w	r9, r9, #4
 80269aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80269ae:	441c      	add	r4, r3
 80269b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80269b2:	441e      	add	r6, r3
 80269b4:	e771      	b.n	802689a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80269b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80269b8:	3d01      	subs	r5, #1
 80269ba:	3704      	adds	r7, #4
 80269bc:	441c      	add	r4, r3
 80269be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80269c0:	441e      	add	r6, r3
 80269c2:	e74c      	b.n	802685e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80269c4:	d01d      	beq.n	8026a02 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80269c6:	1e6b      	subs	r3, r5, #1
 80269c8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80269ca:	fb00 4003 	mla	r0, r0, r3, r4
 80269ce:	1400      	asrs	r0, r0, #16
 80269d0:	f53f af61 	bmi.w	8026896 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80269d4:	3901      	subs	r1, #1
 80269d6:	4288      	cmp	r0, r1
 80269d8:	f6bf af5d 	bge.w	8026896 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80269dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80269de:	fb01 6303 	mla	r3, r1, r3, r6
 80269e2:	141b      	asrs	r3, r3, #16
 80269e4:	f53f af57 	bmi.w	8026896 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80269e8:	3a01      	subs	r2, #1
 80269ea:	4293      	cmp	r3, r2
 80269ec:	f6bf af53 	bge.w	8026896 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80269f0:	46a9      	mov	r9, r5
 80269f2:	46ba      	mov	sl, r7
 80269f4:	f1b9 0f00 	cmp.w	r9, #0
 80269f8:	dc5b      	bgt.n	8026ab2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80269fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80269fe:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8026a02:	9b07      	ldr	r3, [sp, #28]
 8026a04:	2b00      	cmp	r3, #0
 8026a06:	f340 80cc 	ble.w	8026ba2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026a0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026a14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026a18:	eef0 6a62 	vmov.f32	s13, s5
 8026a1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026a20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026a24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a28:	ee16 4a90 	vmov	r4, s13
 8026a2c:	eef0 6a43 	vmov.f32	s13, s6
 8026a30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a34:	ee16 6a90 	vmov	r6, s13
 8026a38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026a3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026a40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026a44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026a48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026a4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026a50:	ee12 2a90 	vmov	r2, s5
 8026a54:	eef0 2a47 	vmov.f32	s5, s14
 8026a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a5c:	ee13 2a10 	vmov	r2, s6
 8026a60:	931b      	str	r3, [sp, #108]	; 0x6c
 8026a62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a64:	eeb0 3a67 	vmov.f32	s6, s15
 8026a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a6c:	931c      	str	r3, [sp, #112]	; 0x70
 8026a6e:	9b07      	ldr	r3, [sp, #28]
 8026a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026a72:	3b01      	subs	r3, #1
 8026a74:	9307      	str	r3, [sp, #28]
 8026a76:	bf08      	it	eq
 8026a78:	4615      	moveq	r5, r2
 8026a7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026a7c:	bf18      	it	ne
 8026a7e:	461d      	movne	r5, r3
 8026a80:	e6de      	b.n	8026840 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026a82:	f111 0b01 	adds.w	fp, r1, #1
 8026a86:	d48d      	bmi.n	80269a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026a88:	45de      	cmp	lr, fp
 8026a8a:	db8b      	blt.n	80269a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026a8c:	f110 0b01 	adds.w	fp, r0, #1
 8026a90:	d488      	bmi.n	80269a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026a92:	455b      	cmp	r3, fp
 8026a94:	db86      	blt.n	80269a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026a96:	b21b      	sxth	r3, r3
 8026a98:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026a9c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026aa0:	9300      	str	r3, [sp, #0]
 8026aa2:	4642      	mov	r2, r8
 8026aa4:	fa0f f38e 	sxth.w	r3, lr
 8026aa8:	4649      	mov	r1, r9
 8026aaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026aac:	f7ff fdd9 	bl	8026662 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8026ab0:	e778      	b.n	80269a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026ab2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026ab4:	1420      	asrs	r0, r4, #16
 8026ab6:	1431      	asrs	r1, r6, #16
 8026ab8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026abc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026ac0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026ac4:	fb03 0101 	mla	r1, r3, r1, r0
 8026ac8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026acc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026ad0:	8841      	ldrh	r1, [r0, #2]
 8026ad2:	f1be 0f00 	cmp.w	lr, #0
 8026ad6:	d00b      	beq.n	8026af0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026ad8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026adc:	3b01      	subs	r3, #1
 8026ade:	005b      	lsls	r3, r3, #1
 8026ae0:	3302      	adds	r3, #2
 8026ae2:	eb00 0b03 	add.w	fp, r0, r3
 8026ae6:	5ac3      	ldrh	r3, [r0, r3]
 8026ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8026aea:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8026af0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026af4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026af8:	fb12 f30e 	smulbb	r3, r2, lr
 8026afc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026b00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026b04:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026b08:	10db      	asrs	r3, r3, #3
 8026b0a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026b0e:	ea40 000c 	orr.w	r0, r0, ip
 8026b12:	f1ce 0c10 	rsb	ip, lr, #16
 8026b16:	ea4b 0101 	orr.w	r1, fp, r1
 8026b1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b1e:	ebac 0c02 	sub.w	ip, ip, r2
 8026b22:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026b26:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026b2a:	4351      	muls	r1, r2
 8026b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026b2e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026b32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026b34:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026b38:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026b3e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026b42:	0412      	lsls	r2, r2, #16
 8026b44:	ea4b 0000 	orr.w	r0, fp, r0
 8026b48:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026b4c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026b50:	fb03 c000 	mla	r0, r3, r0, ip
 8026b54:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026b58:	ea42 0b0b 	orr.w	fp, r2, fp
 8026b5c:	fb03 000b 	mla	r0, r3, fp, r0
 8026b60:	0d42      	lsrs	r2, r0, #21
 8026b62:	0940      	lsrs	r0, r0, #5
 8026b64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b68:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026b6c:	4310      	orrs	r0, r2
 8026b6e:	b282      	uxth	r2, r0
 8026b70:	10d3      	asrs	r3, r2, #3
 8026b72:	1211      	asrs	r1, r2, #8
 8026b74:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026b78:	00d2      	lsls	r2, r2, #3
 8026b7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026b7e:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026b82:	b2d2      	uxtb	r2, r2
 8026b84:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026b88:	021b      	lsls	r3, r3, #8
 8026b8a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8026b92:	431a      	orrs	r2, r3
 8026b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026b96:	441c      	add	r4, r3
 8026b98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026b9a:	f84a 2b04 	str.w	r2, [sl], #4
 8026b9e:	441e      	add	r6, r3
 8026ba0:	e728      	b.n	80269f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026ba2:	b00f      	add	sp, #60	; 0x3c
 8026ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ba8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8026ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bac:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8026bb0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8026bb4:	fb09 6c03 	mla	ip, r9, r3, r6
 8026bb8:	f1b9 0f00 	cmp.w	r9, #0
 8026bbc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8026bc0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026bc4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8026bc8:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8026bcc:	eb02 080c 	add.w	r8, r2, ip
 8026bd0:	6808      	ldr	r0, [r1, #0]
 8026bd2:	f2c0 80a0 	blt.w	8026d16 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8026bd6:	45ca      	cmp	sl, r9
 8026bd8:	f340 809d 	ble.w	8026d16 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8026bdc:	2e00      	cmp	r6, #0
 8026bde:	f2c0 8098 	blt.w	8026d12 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8026be2:	42b3      	cmp	r3, r6
 8026be4:	f340 8095 	ble.w	8026d12 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8026be8:	f898 7002 	ldrb.w	r7, [r8, #2]
 8026bec:	f898 b001 	ldrb.w	fp, [r8, #1]
 8026bf0:	043f      	lsls	r7, r7, #16
 8026bf2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026bf6:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8026bfa:	4317      	orrs	r7, r2
 8026bfc:	1c72      	adds	r2, r6, #1
 8026bfe:	f100 808b 	bmi.w	8026d18 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026c02:	4293      	cmp	r3, r2
 8026c04:	f340 8088 	ble.w	8026d18 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026c08:	2c00      	cmp	r4, #0
 8026c0a:	f000 8085 	beq.w	8026d18 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026c0e:	f898 c005 	ldrb.w	ip, [r8, #5]
 8026c12:	f898 2004 	ldrb.w	r2, [r8, #4]
 8026c16:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8026c1a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8026c1e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8026c22:	ea4c 0c02 	orr.w	ip, ip, r2
 8026c26:	f119 0901 	adds.w	r9, r9, #1
 8026c2a:	d479      	bmi.n	8026d20 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026c2c:	45ca      	cmp	sl, r9
 8026c2e:	dd77      	ble.n	8026d20 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026c30:	f1be 0f00 	cmp.w	lr, #0
 8026c34:	d074      	beq.n	8026d20 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026c36:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8026c3a:	2e00      	cmp	r6, #0
 8026c3c:	eb08 090a 	add.w	r9, r8, sl
 8026c40:	db6c      	blt.n	8026d1c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026c42:	42b3      	cmp	r3, r6
 8026c44:	dd6a      	ble.n	8026d1c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026c46:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026c4a:	f899 b001 	ldrb.w	fp, [r9, #1]
 8026c4e:	0412      	lsls	r2, r2, #16
 8026c50:	f818 800a 	ldrb.w	r8, [r8, sl]
 8026c54:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8026c58:	ea42 0208 	orr.w	r2, r2, r8
 8026c5c:	3601      	adds	r6, #1
 8026c5e:	d40c      	bmi.n	8026c7a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026c60:	42b3      	cmp	r3, r6
 8026c62:	dd0a      	ble.n	8026c7a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026c64:	b14c      	cbz	r4, 8026c7a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026c66:	f899 0005 	ldrb.w	r0, [r9, #5]
 8026c6a:	f899 3004 	ldrb.w	r3, [r9, #4]
 8026c6e:	0400      	lsls	r0, r0, #16
 8026c70:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8026c74:	f899 3003 	ldrb.w	r3, [r9, #3]
 8026c78:	4318      	orrs	r0, r3
 8026c7a:	fa1f f38e 	uxth.w	r3, lr
 8026c7e:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8026c82:	b2a4      	uxth	r4, r4
 8026c84:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026c88:	2dff      	cmp	r5, #255	; 0xff
 8026c8a:	fb04 f803 	mul.w	r8, r4, r3
 8026c8e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8026c92:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8026c96:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8026c9a:	eba4 0408 	sub.w	r4, r4, r8
 8026c9e:	fa1f fe83 	uxth.w	lr, r3
 8026ca2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8026ca6:	b2a4      	uxth	r4, r4
 8026ca8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026cac:	eba9 090e 	sub.w	r9, r9, lr
 8026cb0:	fb04 f303 	mul.w	r3, r4, r3
 8026cb4:	fa1f f989 	uxth.w	r9, r9
 8026cb8:	fb04 f40c 	mul.w	r4, r4, ip
 8026cbc:	fb09 3606 	mla	r6, r9, r6, r3
 8026cc0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026cc4:	fb09 4407 	mla	r4, r9, r7, r4
 8026cc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ccc:	fb08 6603 	mla	r6, r8, r3, r6
 8026cd0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026cd4:	fb08 4000 	mla	r0, r8, r0, r4
 8026cd8:	fb0e 6303 	mla	r3, lr, r3, r6
 8026cdc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026ce0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8026ce4:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8026ce8:	fb0e 0303 	mla	r3, lr, r3, r0
 8026cec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cf4:	ea43 0306 	orr.w	r3, r3, r6
 8026cf8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026cfc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026d00:	b2d4      	uxtb	r4, r2
 8026d02:	b2c6      	uxtb	r6, r0
 8026d04:	d10e      	bne.n	8026d24 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8026d06:	700b      	strb	r3, [r1, #0]
 8026d08:	7048      	strb	r0, [r1, #1]
 8026d0a:	708a      	strb	r2, [r1, #2]
 8026d0c:	70cd      	strb	r5, [r1, #3]
 8026d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d12:	4607      	mov	r7, r0
 8026d14:	e772      	b.n	8026bfc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8026d16:	4607      	mov	r7, r0
 8026d18:	4684      	mov	ip, r0
 8026d1a:	e784      	b.n	8026c26 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 8026d1c:	4602      	mov	r2, r0
 8026d1e:	e79d      	b.n	8026c5c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8026d20:	4602      	mov	r2, r0
 8026d22:	e7aa      	b.n	8026c7a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026d24:	2d00      	cmp	r5, #0
 8026d26:	d0f2      	beq.n	8026d0e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8026d28:	78cf      	ldrb	r7, [r1, #3]
 8026d2a:	b2db      	uxtb	r3, r3
 8026d2c:	fb15 f606 	smulbb	r6, r5, r6
 8026d30:	fb05 f207 	mul.w	r2, r5, r7
 8026d34:	1c50      	adds	r0, r2, #1
 8026d36:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026d3a:	19ea      	adds	r2, r5, r7
 8026d3c:	1200      	asrs	r0, r0, #8
 8026d3e:	1a12      	subs	r2, r2, r0
 8026d40:	1a38      	subs	r0, r7, r0
 8026d42:	780f      	ldrb	r7, [r1, #0]
 8026d44:	b2d2      	uxtb	r2, r2
 8026d46:	4347      	muls	r7, r0
 8026d48:	70ca      	strb	r2, [r1, #3]
 8026d4a:	fb05 7303 	mla	r3, r5, r3, r7
 8026d4e:	fb15 f504 	smulbb	r5, r5, r4
 8026d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8026d56:	700b      	strb	r3, [r1, #0]
 8026d58:	784b      	ldrb	r3, [r1, #1]
 8026d5a:	fb00 6303 	mla	r3, r0, r3, r6
 8026d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026d62:	704b      	strb	r3, [r1, #1]
 8026d64:	788b      	ldrb	r3, [r1, #2]
 8026d66:	fb00 5503 	mla	r5, r0, r3, r5
 8026d6a:	fb95 f5f2 	sdiv	r5, r5, r2
 8026d6e:	708d      	strb	r5, [r1, #2]
 8026d70:	e7cd      	b.n	8026d0e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08026d72 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d76:	b09b      	sub	sp, #108	; 0x6c
 8026d78:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8026d7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026d7e:	9019      	str	r0, [sp, #100]	; 0x64
 8026d80:	9307      	str	r3, [sp, #28]
 8026d82:	6850      	ldr	r0, [r2, #4]
 8026d84:	6812      	ldr	r2, [r2, #0]
 8026d86:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
 8026d8a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026d8e:	fb00 1303 	mla	r3, r0, r3, r1
 8026d92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026d96:	9308      	str	r3, [sp, #32]
 8026d98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8026d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	dc03      	bgt.n	8026dac <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026da6:	2b00      	cmp	r3, #0
 8026da8:	f340 8231 	ble.w	802720e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8026dac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026dae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026db2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026db6:	1e48      	subs	r0, r1, #1
 8026db8:	1e55      	subs	r5, r2, #1
 8026dba:	9b07      	ldr	r3, [sp, #28]
 8026dbc:	2b00      	cmp	r3, #0
 8026dbe:	f340 80c3 	ble.w	8026f48 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026dc2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8026dc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026dc6:	1436      	asrs	r6, r6, #16
 8026dc8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026dcc:	d406      	bmi.n	8026ddc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026dce:	4286      	cmp	r6, r0
 8026dd0:	da04      	bge.n	8026ddc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026dd2:	2b00      	cmp	r3, #0
 8026dd4:	db02      	blt.n	8026ddc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026dd6:	42ab      	cmp	r3, r5
 8026dd8:	f2c0 80b7 	blt.w	8026f4a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026ddc:	3601      	adds	r6, #1
 8026dde:	f100 80a4 	bmi.w	8026f2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026de2:	42b1      	cmp	r1, r6
 8026de4:	f2c0 80a1 	blt.w	8026f2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026de8:	3301      	adds	r3, #1
 8026dea:	f100 809e 	bmi.w	8026f2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026dee:	429a      	cmp	r2, r3
 8026df0:	f2c0 809b 	blt.w	8026f2a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026df4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8026df8:	f1bb 0f00 	cmp.w	fp, #0
 8026dfc:	f340 80c5 	ble.w	8026f8a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8026e00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026e02:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026e04:	1418      	asrs	r0, r3, #16
 8026e06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026e08:	68cf      	ldr	r7, [r1, #12]
 8026e0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026e0e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8026e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026e12:	1409      	asrs	r1, r1, #16
 8026e14:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026e18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e1a:	689b      	ldr	r3, [r3, #8]
 8026e1c:	f100 8127 	bmi.w	802706e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026e20:	f103 3cff 	add.w	ip, r3, #4294967295
 8026e24:	4561      	cmp	r1, ip
 8026e26:	f280 8122 	bge.w	802706e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026e2a:	2800      	cmp	r0, #0
 8026e2c:	f2c0 811f 	blt.w	802706e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8026e34:	4560      	cmp	r0, ip
 8026e36:	f280 811a 	bge.w	802706e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026e3a:	b21b      	sxth	r3, r3
 8026e3c:	fb00 1103 	mla	r1, r0, r3, r1
 8026e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026e42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026e46:	1847      	adds	r7, r0, r1
 8026e48:	5c40      	ldrb	r0, [r0, r1]
 8026e4a:	7879      	ldrb	r1, [r7, #1]
 8026e4c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8026e50:	910c      	str	r1, [sp, #48]	; 0x30
 8026e52:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026e56:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026e5a:	f897 a005 	ldrb.w	sl, [r7, #5]
 8026e5e:	b1cd      	cbz	r5, 8026e94 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8026e60:	f04f 0c03 	mov.w	ip, #3
 8026e64:	f06f 0104 	mvn.w	r1, #4
 8026e68:	3705      	adds	r7, #5
 8026e6a:	fb13 130c 	smlabb	r3, r3, ip, r1
 8026e6e:	eb07 0c03 	add.w	ip, r7, r3
 8026e72:	5cfb      	ldrb	r3, [r7, r3]
 8026e74:	930d      	str	r3, [sp, #52]	; 0x34
 8026e76:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e7c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8026e80:	9311      	str	r3, [sp, #68]	; 0x44
 8026e82:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8026e86:	930e      	str	r3, [sp, #56]	; 0x38
 8026e88:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8026e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8026e8e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8026e92:	9312      	str	r3, [sp, #72]	; 0x48
 8026e94:	b292      	uxth	r2, r2
 8026e96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026e98:	b2ad      	uxth	r5, r5
 8026e9a:	2cff      	cmp	r4, #255	; 0xff
 8026e9c:	fb02 f305 	mul.w	r3, r2, r5
 8026ea0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8026ea4:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 8026ea8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026eac:	eba2 0203 	sub.w	r2, r2, r3
 8026eb0:	b2ad      	uxth	r5, r5
 8026eb2:	b292      	uxth	r2, r2
 8026eb4:	eba7 0705 	sub.w	r7, r7, r5
 8026eb8:	fb02 f909 	mul.w	r9, r2, r9
 8026ebc:	b2bf      	uxth	r7, r7
 8026ebe:	fb02 f808 	mul.w	r8, r2, r8
 8026ec2:	fb02 fa0a 	mul.w	sl, r2, sl
 8026ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026ec8:	fb07 9900 	mla	r9, r7, r0, r9
 8026ecc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026ece:	fb07 8801 	mla	r8, r7, r1, r8
 8026ed2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026ed4:	fb07 aa0e 	mla	sl, r7, lr, sl
 8026ed8:	fb05 9900 	mla	r9, r5, r0, r9
 8026edc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026ede:	fb05 8801 	mla	r8, r5, r1, r8
 8026ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026ee4:	fb05 a502 	mla	r5, r5, r2, sl
 8026ee8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026eea:	fb03 9900 	mla	r9, r3, r0, r9
 8026eee:	fb03 8801 	mla	r8, r3, r1, r8
 8026ef2:	fb03 5302 	mla	r3, r3, r2, r5
 8026ef6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026efa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026efe:	ea4f 2323 	mov.w	r3, r3, asr #8
 8026f02:	f040 8088 	bne.w	8027016 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026f06:	f886 9000 	strb.w	r9, [r6]
 8026f0a:	f886 8001 	strb.w	r8, [r6, #1]
 8026f0e:	70b3      	strb	r3, [r6, #2]
 8026f10:	70f4      	strb	r4, [r6, #3]
 8026f12:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026f14:	3604      	adds	r6, #4
 8026f16:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026f18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026f1c:	4413      	add	r3, r2
 8026f1e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8026f20:	9325      	str	r3, [sp, #148]	; 0x94
 8026f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026f24:	4413      	add	r3, r2
 8026f26:	9326      	str	r3, [sp, #152]	; 0x98
 8026f28:	e766      	b.n	8026df8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026f2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026f2c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8026f2e:	4433      	add	r3, r6
 8026f30:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8026f32:	9325      	str	r3, [sp, #148]	; 0x94
 8026f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026f36:	4433      	add	r3, r6
 8026f38:	9326      	str	r3, [sp, #152]	; 0x98
 8026f3a:	9b07      	ldr	r3, [sp, #28]
 8026f3c:	3b01      	subs	r3, #1
 8026f3e:	9307      	str	r3, [sp, #28]
 8026f40:	9b08      	ldr	r3, [sp, #32]
 8026f42:	3304      	adds	r3, #4
 8026f44:	9308      	str	r3, [sp, #32]
 8026f46:	e738      	b.n	8026dba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026f48:	d026      	beq.n	8026f98 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8026f4a:	9b07      	ldr	r3, [sp, #28]
 8026f4c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026f4e:	3b01      	subs	r3, #1
 8026f50:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026f52:	fb00 5003 	mla	r0, r0, r3, r5
 8026f56:	1400      	asrs	r0, r0, #16
 8026f58:	f53f af4c 	bmi.w	8026df4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026f5c:	3901      	subs	r1, #1
 8026f5e:	4288      	cmp	r0, r1
 8026f60:	f6bf af48 	bge.w	8026df4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026f64:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026f66:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026f68:	fb01 0303 	mla	r3, r1, r3, r0
 8026f6c:	141b      	asrs	r3, r3, #16
 8026f6e:	f53f af41 	bmi.w	8026df4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026f72:	3a01      	subs	r2, #1
 8026f74:	4293      	cmp	r3, r2
 8026f76:	f6bf af3d 	bge.w	8026df4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026f7a:	9b08      	ldr	r3, [sp, #32]
 8026f7c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026f80:	1d18      	adds	r0, r3, #4
 8026f82:	f1be 0f00 	cmp.w	lr, #0
 8026f86:	f300 808e 	bgt.w	80270a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8026f8a:	9b07      	ldr	r3, [sp, #28]
 8026f8c:	9a08      	ldr	r2, [sp, #32]
 8026f8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026f96:	9308      	str	r3, [sp, #32]
 8026f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f9a:	2b00      	cmp	r3, #0
 8026f9c:	f340 8137 	ble.w	802720e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8026fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026fa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026fa6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026faa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026fae:	eef0 6a62 	vmov.f32	s13, s5
 8026fb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026fb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026fba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fbe:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026fc2:	eef0 6a43 	vmov.f32	s13, s6
 8026fc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fca:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026fce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026fd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026fd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026fda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026fde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026fe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026fe6:	ee12 2a90 	vmov	r2, s5
 8026fea:	eef0 2a47 	vmov.f32	s5, s14
 8026fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ff2:	ee13 2a10 	vmov	r2, s6
 8026ff6:	9327      	str	r3, [sp, #156]	; 0x9c
 8026ff8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ffa:	eeb0 3a67 	vmov.f32	s6, s15
 8026ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027002:	9328      	str	r3, [sp, #160]	; 0xa0
 8027004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027008:	3b01      	subs	r3, #1
 802700a:	930a      	str	r3, [sp, #40]	; 0x28
 802700c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802700e:	bf08      	it	eq
 8027010:	4613      	moveq	r3, r2
 8027012:	9307      	str	r3, [sp, #28]
 8027014:	e6c3      	b.n	8026d9e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027016:	2c00      	cmp	r4, #0
 8027018:	f43f af7b 	beq.w	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802701c:	78f0      	ldrb	r0, [r6, #3]
 802701e:	fa5f f989 	uxtb.w	r9, r9
 8027022:	fa5f f888 	uxtb.w	r8, r8
 8027026:	fb04 f100 	mul.w	r1, r4, r0
 802702a:	1822      	adds	r2, r4, r0
 802702c:	b2db      	uxtb	r3, r3
 802702e:	1c4d      	adds	r5, r1, #1
 8027030:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027034:	1229      	asrs	r1, r5, #8
 8027036:	1a45      	subs	r5, r0, r1
 8027038:	1a52      	subs	r2, r2, r1
 802703a:	7831      	ldrb	r1, [r6, #0]
 802703c:	b2d2      	uxtb	r2, r2
 802703e:	4369      	muls	r1, r5
 8027040:	70f2      	strb	r2, [r6, #3]
 8027042:	fb04 1909 	mla	r9, r4, r9, r1
 8027046:	7871      	ldrb	r1, [r6, #1]
 8027048:	4369      	muls	r1, r5
 802704a:	fb04 1808 	mla	r8, r4, r8, r1
 802704e:	78b1      	ldrb	r1, [r6, #2]
 8027050:	434d      	muls	r5, r1
 8027052:	fb04 5303 	mla	r3, r4, r3, r5
 8027056:	fb99 f9f2 	sdiv	r9, r9, r2
 802705a:	fb98 f8f2 	sdiv	r8, r8, r2
 802705e:	fb93 f3f2 	sdiv	r3, r3, r2
 8027062:	f886 9000 	strb.w	r9, [r6]
 8027066:	f886 8001 	strb.w	r8, [r6, #1]
 802706a:	70b3      	strb	r3, [r6, #2]
 802706c:	e751      	b.n	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802706e:	f111 0c01 	adds.w	ip, r1, #1
 8027072:	f53f af4e 	bmi.w	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027076:	4563      	cmp	r3, ip
 8027078:	f6ff af4b 	blt.w	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802707c:	f110 0c01 	adds.w	ip, r0, #1
 8027080:	f53f af47 	bmi.w	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027084:	4567      	cmp	r7, ip
 8027086:	f6ff af44 	blt.w	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802708a:	b23f      	sxth	r7, r7
 802708c:	9101      	str	r1, [sp, #4]
 802708e:	b21b      	sxth	r3, r3
 8027090:	4631      	mov	r1, r6
 8027092:	9700      	str	r7, [sp, #0]
 8027094:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027098:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802709c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802709e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80270a0:	f7ff fd82 	bl	8026ba8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 80270a4:	e735      	b.n	8026f12 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80270a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80270a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80270aa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80270ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80270b0:	1412      	asrs	r2, r2, #16
 80270b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80270b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80270b8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80270bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80270be:	141b      	asrs	r3, r3, #16
 80270c0:	fb0c 2303 	mla	r3, ip, r3, r2
 80270c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80270c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80270ca:	18d6      	adds	r6, r2, r3
 80270cc:	5cd2      	ldrb	r2, [r2, r3]
 80270ce:	7873      	ldrb	r3, [r6, #1]
 80270d0:	f896 8002 	ldrb.w	r8, [r6, #2]
 80270d4:	930c      	str	r3, [sp, #48]	; 0x30
 80270d6:	f896 a003 	ldrb.w	sl, [r6, #3]
 80270da:	f896 9004 	ldrb.w	r9, [r6, #4]
 80270de:	f896 b005 	ldrb.w	fp, [r6, #5]
 80270e2:	b1a5      	cbz	r5, 802710e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80270e4:	2703      	movs	r7, #3
 80270e6:	f06f 0304 	mvn.w	r3, #4
 80270ea:	3605      	adds	r6, #5
 80270ec:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80270f0:	eb06 070c 	add.w	r7, r6, ip
 80270f4:	f816 600c 	ldrb.w	r6, [r6, ip]
 80270f8:	9613      	str	r6, [sp, #76]	; 0x4c
 80270fa:	787e      	ldrb	r6, [r7, #1]
 80270fc:	9615      	str	r6, [sp, #84]	; 0x54
 80270fe:	78be      	ldrb	r6, [r7, #2]
 8027100:	9617      	str	r6, [sp, #92]	; 0x5c
 8027102:	78fe      	ldrb	r6, [r7, #3]
 8027104:	9614      	str	r6, [sp, #80]	; 0x50
 8027106:	793e      	ldrb	r6, [r7, #4]
 8027108:	9616      	str	r6, [sp, #88]	; 0x58
 802710a:	797e      	ldrb	r6, [r7, #5]
 802710c:	9618      	str	r6, [sp, #96]	; 0x60
 802710e:	b289      	uxth	r1, r1
 8027110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027112:	b2ad      	uxth	r5, r5
 8027114:	2cff      	cmp	r4, #255	; 0xff
 8027116:	fb01 f605 	mul.w	r6, r1, r5
 802711a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802711e:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 8027122:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 8027126:	eba1 0106 	sub.w	r1, r1, r6
 802712a:	b2ad      	uxth	r5, r5
 802712c:	b289      	uxth	r1, r1
 802712e:	eba7 0705 	sub.w	r7, r7, r5
 8027132:	fb01 f909 	mul.w	r9, r1, r9
 8027136:	b2bf      	uxth	r7, r7
 8027138:	fb01 fa0a 	mul.w	sl, r1, sl
 802713c:	fb01 fb0b 	mul.w	fp, r1, fp
 8027140:	fb07 9903 	mla	r9, r7, r3, r9
 8027144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027146:	fb07 aa02 	mla	sl, r7, r2, sl
 802714a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802714c:	fb05 9903 	mla	r9, r5, r3, r9
 8027150:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027152:	fb07 bb08 	mla	fp, r7, r8, fp
 8027156:	fb06 9903 	mla	r9, r6, r3, r9
 802715a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802715c:	fb05 aa02 	mla	sl, r5, r2, sl
 8027160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027162:	fb05 bb03 	mla	fp, r5, r3, fp
 8027166:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027168:	fb06 aa02 	mla	sl, r6, r2, sl
 802716c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027170:	fb06 b603 	mla	r6, r6, r3, fp
 8027174:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8027178:	ea4f 2626 	mov.w	r6, r6, asr #8
 802717c:	d113      	bne.n	80271a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802717e:	f800 ac04 	strb.w	sl, [r0, #-4]
 8027182:	f800 9c03 	strb.w	r9, [r0, #-3]
 8027186:	f800 6c02 	strb.w	r6, [r0, #-2]
 802718a:	f800 4c01 	strb.w	r4, [r0, #-1]
 802718e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027190:	3004      	adds	r0, #4
 8027192:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027194:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027198:	4413      	add	r3, r2
 802719a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802719c:	9325      	str	r3, [sp, #148]	; 0x94
 802719e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271a0:	4413      	add	r3, r2
 80271a2:	9326      	str	r3, [sp, #152]	; 0x98
 80271a4:	e6ed      	b.n	8026f82 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80271a6:	2c00      	cmp	r4, #0
 80271a8:	d0f1      	beq.n	802718e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80271aa:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80271ae:	fa5f fa8a 	uxtb.w	sl, sl
 80271b2:	fa5f f989 	uxtb.w	r9, r9
 80271b6:	fb04 f302 	mul.w	r3, r4, r2
 80271ba:	eb04 0c02 	add.w	ip, r4, r2
 80271be:	b2f6      	uxtb	r6, r6
 80271c0:	1c59      	adds	r1, r3, #1
 80271c2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80271c6:	120b      	asrs	r3, r1, #8
 80271c8:	1ad1      	subs	r1, r2, r3
 80271ca:	ebac 0c03 	sub.w	ip, ip, r3
 80271ce:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80271d2:	fa5f fc8c 	uxtb.w	ip, ip
 80271d6:	434b      	muls	r3, r1
 80271d8:	f800 cc01 	strb.w	ip, [r0, #-1]
 80271dc:	fb04 3a0a 	mla	sl, r4, sl, r3
 80271e0:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 80271e4:	434b      	muls	r3, r1
 80271e6:	fb04 3909 	mla	r9, r4, r9, r3
 80271ea:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 80271ee:	4359      	muls	r1, r3
 80271f0:	fb04 1606 	mla	r6, r4, r6, r1
 80271f4:	fb9a fafc 	sdiv	sl, sl, ip
 80271f8:	fb99 f9fc 	sdiv	r9, r9, ip
 80271fc:	fb96 f6fc 	sdiv	r6, r6, ip
 8027200:	f800 ac04 	strb.w	sl, [r0, #-4]
 8027204:	f800 9c03 	strb.w	r9, [r0, #-3]
 8027208:	f800 6c02 	strb.w	r6, [r0, #-2]
 802720c:	e7bf      	b.n	802718e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802720e:	b01b      	add	sp, #108	; 0x6c
 8027210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027214 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 8027214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027218:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 802721c:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8027220:	fb08 7603 	mla	r6, r8, r3, r7
 8027224:	f1b8 0f00 	cmp.w	r8, #0
 8027228:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802722c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027230:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8027234:	6808      	ldr	r0, [r1, #0]
 8027236:	eb02 0e06 	add.w	lr, r2, r6
 802723a:	f2c0 8089 	blt.w	8027350 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802723e:	45c1      	cmp	r9, r8
 8027240:	f340 8086 	ble.w	8027350 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 8027244:	2f00      	cmp	r7, #0
 8027246:	f2c0 8081 	blt.w	802734c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802724a:	42bb      	cmp	r3, r7
 802724c:	dd7e      	ble.n	802734c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802724e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8027252:	f89e a001 	ldrb.w	sl, [lr, #1]
 8027256:	0424      	lsls	r4, r4, #16
 8027258:	5d92      	ldrb	r2, [r2, r6]
 802725a:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802725e:	4314      	orrs	r4, r2
 8027260:	1c7a      	adds	r2, r7, #1
 8027262:	d478      	bmi.n	8027356 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 8027264:	4293      	cmp	r3, r2
 8027266:	dd76      	ble.n	8027356 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 8027268:	2d00      	cmp	r5, #0
 802726a:	d074      	beq.n	8027356 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802726c:	f89e 6005 	ldrb.w	r6, [lr, #5]
 8027270:	f89e 2004 	ldrb.w	r2, [lr, #4]
 8027274:	0436      	lsls	r6, r6, #16
 8027276:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802727a:	f89e 2003 	ldrb.w	r2, [lr, #3]
 802727e:	4316      	orrs	r6, r2
 8027280:	f118 0801 	adds.w	r8, r8, #1
 8027284:	d46b      	bmi.n	802735e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8027286:	45c1      	cmp	r9, r8
 8027288:	dd69      	ble.n	802735e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802728a:	f1bc 0f00 	cmp.w	ip, #0
 802728e:	d066      	beq.n	802735e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8027290:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 8027294:	2f00      	cmp	r7, #0
 8027296:	eb0e 0809 	add.w	r8, lr, r9
 802729a:	db5e      	blt.n	802735a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802729c:	42bb      	cmp	r3, r7
 802729e:	dd5c      	ble.n	802735a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80272a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80272a4:	f898 a001 	ldrb.w	sl, [r8, #1]
 80272a8:	0412      	lsls	r2, r2, #16
 80272aa:	f81e e009 	ldrb.w	lr, [lr, r9]
 80272ae:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 80272b2:	ea42 020e 	orr.w	r2, r2, lr
 80272b6:	3701      	adds	r7, #1
 80272b8:	d40c      	bmi.n	80272d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80272ba:	42bb      	cmp	r3, r7
 80272bc:	dd0a      	ble.n	80272d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80272be:	b14d      	cbz	r5, 80272d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80272c0:	f898 0005 	ldrb.w	r0, [r8, #5]
 80272c4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80272c8:	0400      	lsls	r0, r0, #16
 80272ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80272ce:	f898 3003 	ldrb.w	r3, [r8, #3]
 80272d2:	4318      	orrs	r0, r3
 80272d4:	b2ad      	uxth	r5, r5
 80272d6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80272da:	fa1f f78c 	uxth.w	r7, ip
 80272de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80272e2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80272e6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80272ea:	fb05 fc07 	mul.w	ip, r5, r7
 80272ee:	012d      	lsls	r5, r5, #4
 80272f0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80272f4:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 80272f8:	eba5 050c 	sub.w	r5, r5, ip
 80272fc:	b2bf      	uxth	r7, r7
 80272fe:	b2ad      	uxth	r5, r5
 8027300:	ebae 0e07 	sub.w	lr, lr, r7
 8027304:	436b      	muls	r3, r5
 8027306:	fa1f fe8e 	uxth.w	lr, lr
 802730a:	436e      	muls	r6, r5
 802730c:	fb0e 3808 	mla	r8, lr, r8, r3
 8027310:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027314:	fb0e 6404 	mla	r4, lr, r4, r6
 8027318:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802731c:	fb0c 8803 	mla	r8, ip, r3, r8
 8027320:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027324:	fb0c 4000 	mla	r0, ip, r0, r4
 8027328:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802732c:	fb07 8303 	mla	r3, r7, r3, r8
 8027330:	fb07 0002 	mla	r0, r7, r2, r0
 8027334:	0a1b      	lsrs	r3, r3, #8
 8027336:	0a00      	lsrs	r0, r0, #8
 8027338:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802733c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027340:	4318      	orrs	r0, r3
 8027342:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8027346:	6008      	str	r0, [r1, #0]
 8027348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802734c:	4604      	mov	r4, r0
 802734e:	e787      	b.n	8027260 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 8027350:	4606      	mov	r6, r0
 8027352:	4604      	mov	r4, r0
 8027354:	e794      	b.n	8027280 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 8027356:	4606      	mov	r6, r0
 8027358:	e792      	b.n	8027280 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802735a:	4602      	mov	r2, r0
 802735c:	e7ab      	b.n	80272b6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802735e:	4602      	mov	r2, r0
 8027360:	e7b8      	b.n	80272d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

08027362 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027366:	b09b      	sub	sp, #108	; 0x6c
 8027368:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 802736c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802736e:	9019      	str	r0, [sp, #100]	; 0x64
 8027370:	9306      	str	r3, [sp, #24]
 8027372:	6850      	ldr	r0, [r2, #4]
 8027374:	6812      	ldr	r2, [r2, #0]
 8027376:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802737a:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	; 0x94
 802737e:	fb00 1303 	mla	r3, r0, r3, r1
 8027382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027386:	9307      	str	r3, [sp, #28]
 8027388:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802738a:	681b      	ldr	r3, [r3, #0]
 802738c:	9308      	str	r3, [sp, #32]
 802738e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027390:	2b00      	cmp	r3, #0
 8027392:	dc03      	bgt.n	802739c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027396:	2b00      	cmp	r3, #0
 8027398:	f340 81a6 	ble.w	80276e8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802739c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802739e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80273a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80273a6:	1e48      	subs	r0, r1, #1
 80273a8:	1e55      	subs	r5, r2, #1
 80273aa:	9b06      	ldr	r3, [sp, #24]
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	f340 80b0 	ble.w	8027512 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80273b2:	1426      	asrs	r6, r4, #16
 80273b4:	ea4f 432a 	mov.w	r3, sl, asr #16
 80273b8:	d406      	bmi.n	80273c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80273ba:	4286      	cmp	r6, r0
 80273bc:	da04      	bge.n	80273c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80273be:	2b00      	cmp	r3, #0
 80273c0:	db02      	blt.n	80273c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80273c2:	42ab      	cmp	r3, r5
 80273c4:	f2c0 80a6 	blt.w	8027514 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80273c8:	3601      	adds	r6, #1
 80273ca:	f100 8097 	bmi.w	80274fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80273ce:	42b1      	cmp	r1, r6
 80273d0:	f2c0 8094 	blt.w	80274fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80273d4:	3301      	adds	r3, #1
 80273d6:	f100 8091 	bmi.w	80274fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80273da:	429a      	cmp	r2, r3
 80273dc:	f2c0 808e 	blt.w	80274fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80273e0:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80273e4:	f1bb 0f00 	cmp.w	fp, #0
 80273e8:	f340 80af 	ble.w	802754a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80273ec:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80273ee:	ea4f 452a 	mov.w	r5, sl, asr #16
 80273f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80273f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80273f8:	68c7      	ldr	r7, [r0, #12]
 80273fa:	1420      	asrs	r0, r4, #16
 80273fc:	f3ca 3103 	ubfx	r1, sl, #12, #4
 8027400:	689b      	ldr	r3, [r3, #8]
 8027402:	f100 80e8 	bmi.w	80275d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027406:	f103 3cff 	add.w	ip, r3, #4294967295
 802740a:	4560      	cmp	r0, ip
 802740c:	f280 80e3 	bge.w	80275d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027410:	2d00      	cmp	r5, #0
 8027412:	f2c0 80e0 	blt.w	80275d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027416:	f107 3cff 	add.w	ip, r7, #4294967295
 802741a:	4565      	cmp	r5, ip
 802741c:	f280 80db 	bge.w	80275d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027420:	b21b      	sxth	r3, r3
 8027422:	fb05 0003 	mla	r0, r5, r3, r0
 8027426:	9d08      	ldr	r5, [sp, #32]
 8027428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802742c:	182f      	adds	r7, r5, r0
 802742e:	5c28      	ldrb	r0, [r5, r0]
 8027430:	900b      	str	r0, [sp, #44]	; 0x2c
 8027432:	7978      	ldrb	r0, [r7, #5]
 8027434:	787d      	ldrb	r5, [r7, #1]
 8027436:	f897 e002 	ldrb.w	lr, [r7, #2]
 802743a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802743e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8027442:	900c      	str	r0, [sp, #48]	; 0x30
 8027444:	b1c1      	cbz	r1, 8027478 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027446:	f06f 0c04 	mvn.w	ip, #4
 802744a:	2003      	movs	r0, #3
 802744c:	3705      	adds	r7, #5
 802744e:	fb13 c300 	smlabb	r3, r3, r0, ip
 8027452:	eb07 0c03 	add.w	ip, r7, r3
 8027456:	5cfb      	ldrb	r3, [r7, r3]
 8027458:	930d      	str	r3, [sp, #52]	; 0x34
 802745a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027460:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8027464:	9311      	str	r3, [sp, #68]	; 0x44
 8027466:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802746a:	930e      	str	r3, [sp, #56]	; 0x38
 802746c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8027470:	9310      	str	r3, [sp, #64]	; 0x40
 8027472:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8027476:	9312      	str	r3, [sp, #72]	; 0x48
 8027478:	b292      	uxth	r2, r2
 802747a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802747c:	b289      	uxth	r1, r1
 802747e:	fb02 f301 	mul.w	r3, r2, r1
 8027482:	0112      	lsls	r2, r2, #4
 8027484:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027488:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802748c:	1ad2      	subs	r2, r2, r3
 802748e:	b289      	uxth	r1, r1
 8027490:	b292      	uxth	r2, r2
 8027492:	1a7f      	subs	r7, r7, r1
 8027494:	fb02 f909 	mul.w	r9, r2, r9
 8027498:	b2bf      	uxth	r7, r7
 802749a:	fb02 f808 	mul.w	r8, r2, r8
 802749e:	fb07 9900 	mla	r9, r7, r0, r9
 80274a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80274a4:	fb07 8805 	mla	r8, r7, r5, r8
 80274a8:	fb01 9900 	mla	r9, r1, r0, r9
 80274ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80274ae:	fb03 9900 	mla	r9, r3, r0, r9
 80274b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80274b4:	fb01 8800 	mla	r8, r1, r0, r8
 80274b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274ba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80274be:	fb03 8800 	mla	r8, r3, r0, r8
 80274c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80274c4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80274c8:	4342      	muls	r2, r0
 80274ca:	ea49 0908 	orr.w	r9, r9, r8
 80274ce:	fb07 280e 	mla	r8, r7, lr, r2
 80274d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80274d4:	fb01 8802 	mla	r8, r1, r2, r8
 80274d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80274da:	fb03 8802 	mla	r8, r3, r2, r8
 80274de:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80274e2:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 80274e6:	ea49 0308 	orr.w	r3, r9, r8
 80274ea:	6033      	str	r3, [r6, #0]
 80274ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80274ee:	3604      	adds	r6, #4
 80274f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80274f4:	441c      	add	r4, r3
 80274f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80274f8:	449a      	add	sl, r3
 80274fa:	e773      	b.n	80273e4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80274fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80274fe:	441c      	add	r4, r3
 8027500:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027502:	449a      	add	sl, r3
 8027504:	9b06      	ldr	r3, [sp, #24]
 8027506:	3b01      	subs	r3, #1
 8027508:	9306      	str	r3, [sp, #24]
 802750a:	9b07      	ldr	r3, [sp, #28]
 802750c:	3304      	adds	r3, #4
 802750e:	9307      	str	r3, [sp, #28]
 8027510:	e74b      	b.n	80273aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027512:	d021      	beq.n	8027558 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027514:	9b06      	ldr	r3, [sp, #24]
 8027516:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027518:	3b01      	subs	r3, #1
 802751a:	fb00 4003 	mla	r0, r0, r3, r4
 802751e:	1400      	asrs	r0, r0, #16
 8027520:	f53f af5e 	bmi.w	80273e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027524:	3901      	subs	r1, #1
 8027526:	4288      	cmp	r0, r1
 8027528:	f6bf af5a 	bge.w	80273e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802752c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802752e:	fb01 a303 	mla	r3, r1, r3, sl
 8027532:	141b      	asrs	r3, r3, #16
 8027534:	f53f af54 	bmi.w	80273e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027538:	3a01      	subs	r2, #1
 802753a:	4293      	cmp	r3, r2
 802753c:	f6bf af50 	bge.w	80273e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027540:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8027544:	f1bc 0f00 	cmp.w	ip, #0
 8027548:	dc5c      	bgt.n	8027604 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802754a:	9b06      	ldr	r3, [sp, #24]
 802754c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027550:	9b07      	ldr	r3, [sp, #28]
 8027552:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027556:	9307      	str	r3, [sp, #28]
 8027558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802755a:	2b00      	cmp	r3, #0
 802755c:	f340 80c4 	ble.w	80276e8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027564:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027566:	ee30 0a04 	vadd.f32	s0, s0, s8
 802756a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802756e:	eef0 6a62 	vmov.f32	s13, s5
 8027572:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027576:	ee31 1a05 	vadd.f32	s2, s2, s10
 802757a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802757e:	ee16 4a90 	vmov	r4, s13
 8027582:	eef0 6a43 	vmov.f32	s13, s6
 8027586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802758a:	ee16 aa90 	vmov	sl, s13
 802758e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027592:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027596:	ee77 2a62 	vsub.f32	s5, s14, s5
 802759a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802759e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80275a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80275a6:	ee12 2a90 	vmov	r2, s5
 80275aa:	eef0 2a47 	vmov.f32	s5, s14
 80275ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80275b2:	ee13 2a10 	vmov	r2, s6
 80275b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80275b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275ba:	eeb0 3a67 	vmov.f32	s6, s15
 80275be:	fb92 f3f3 	sdiv	r3, r2, r3
 80275c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80275c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80275c8:	3b01      	subs	r3, #1
 80275ca:	9309      	str	r3, [sp, #36]	; 0x24
 80275cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275ce:	bf08      	it	eq
 80275d0:	4613      	moveq	r3, r2
 80275d2:	9306      	str	r3, [sp, #24]
 80275d4:	e6db      	b.n	802738e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80275d6:	f110 0c01 	adds.w	ip, r0, #1
 80275da:	d487      	bmi.n	80274ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80275dc:	4563      	cmp	r3, ip
 80275de:	db85      	blt.n	80274ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80275e0:	f115 0c01 	adds.w	ip, r5, #1
 80275e4:	d482      	bmi.n	80274ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80275e6:	4567      	cmp	r7, ip
 80275e8:	db80      	blt.n	80274ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80275ea:	b23f      	sxth	r7, r7
 80275ec:	b21b      	sxth	r3, r3
 80275ee:	9700      	str	r7, [sp, #0]
 80275f0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80275f4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80275f8:	9a08      	ldr	r2, [sp, #32]
 80275fa:	4631      	mov	r1, r6
 80275fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80275fe:	f7ff fe09 	bl	8027214 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 8027602:	e773      	b.n	80274ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027604:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027606:	1420      	asrs	r0, r4, #16
 8027608:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802760c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8027610:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8027614:	ea4f 412a 	mov.w	r1, sl, asr #16
 8027618:	930b      	str	r3, [sp, #44]	; 0x2c
 802761a:	fb07 0101 	mla	r1, r7, r1, r0
 802761e:	9808      	ldr	r0, [sp, #32]
 8027620:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027624:	1845      	adds	r5, r0, r1
 8027626:	5c41      	ldrb	r1, [r0, r1]
 8027628:	78ae      	ldrb	r6, [r5, #2]
 802762a:	7868      	ldrb	r0, [r5, #1]
 802762c:	960c      	str	r6, [sp, #48]	; 0x30
 802762e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8027632:	f895 8004 	ldrb.w	r8, [r5, #4]
 8027636:	f895 b005 	ldrb.w	fp, [r5, #5]
 802763a:	b192      	cbz	r2, 8027662 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802763c:	2603      	movs	r6, #3
 802763e:	f06f 0304 	mvn.w	r3, #4
 8027642:	3505      	adds	r5, #5
 8027644:	fb17 3706 	smlabb	r7, r7, r6, r3
 8027648:	19ee      	adds	r6, r5, r7
 802764a:	5ded      	ldrb	r5, [r5, r7]
 802764c:	9513      	str	r5, [sp, #76]	; 0x4c
 802764e:	7875      	ldrb	r5, [r6, #1]
 8027650:	9515      	str	r5, [sp, #84]	; 0x54
 8027652:	78b5      	ldrb	r5, [r6, #2]
 8027654:	9517      	str	r5, [sp, #92]	; 0x5c
 8027656:	78f5      	ldrb	r5, [r6, #3]
 8027658:	9514      	str	r5, [sp, #80]	; 0x50
 802765a:	7935      	ldrb	r5, [r6, #4]
 802765c:	9516      	str	r5, [sp, #88]	; 0x58
 802765e:	7975      	ldrb	r5, [r6, #5]
 8027660:	9518      	str	r5, [sp, #96]	; 0x60
 8027662:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8027666:	b292      	uxth	r2, r2
 8027668:	f10c 3cff 	add.w	ip, ip, #4294967295
 802766c:	fb03 f502 	mul.w	r5, r3, r2
 8027670:	011b      	lsls	r3, r3, #4
 8027672:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027676:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802767a:	1b5b      	subs	r3, r3, r5
 802767c:	b292      	uxth	r2, r2
 802767e:	b29b      	uxth	r3, r3
 8027680:	1ab6      	subs	r6, r6, r2
 8027682:	fb03 f909 	mul.w	r9, r3, r9
 8027686:	b2b6      	uxth	r6, r6
 8027688:	fb03 f808 	mul.w	r8, r3, r8
 802768c:	fb03 fb0b 	mul.w	fp, r3, fp
 8027690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027692:	fb06 9901 	mla	r9, r6, r1, r9
 8027696:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027698:	fb06 8800 	mla	r8, r6, r0, r8
 802769c:	fb02 9901 	mla	r9, r2, r1, r9
 80276a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80276a2:	fb06 bb03 	mla	fp, r6, r3, fp
 80276a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80276a8:	fb05 9901 	mla	r9, r5, r1, r9
 80276ac:	9915      	ldr	r1, [sp, #84]	; 0x54
 80276ae:	fb02 bb03 	mla	fp, r2, r3, fp
 80276b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80276b4:	fb02 8801 	mla	r8, r2, r1, r8
 80276b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80276ba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80276be:	fb05 8801 	mla	r8, r5, r1, r8
 80276c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80276c6:	ea49 0908 	orr.w	r9, r9, r8
 80276ca:	fb05 b803 	mla	r8, r5, r3, fp
 80276ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80276d0:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80276d4:	441c      	add	r4, r3
 80276d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80276d8:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 80276dc:	449a      	add	sl, r3
 80276de:	ea49 0508 	orr.w	r5, r9, r8
 80276e2:	f84e 5b04 	str.w	r5, [lr], #4
 80276e6:	e72d      	b.n	8027544 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80276e8:	b01b      	add	sp, #108	; 0x6c
 80276ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080276ee <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 80276ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276f2:	b085      	sub	sp, #20
 80276f4:	6808      	ldr	r0, [r1, #0]
 80276f6:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	; 0x3c
 80276fa:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 80276fe:	fb08 6403 	mla	r4, r8, r3, r6
 8027702:	f1b8 0f00 	cmp.w	r8, #0
 8027706:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802770a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 802770e:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 8027712:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8027716:	f2c0 80fc 	blt.w	8027912 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802771a:	45c2      	cmp	sl, r8
 802771c:	f340 80f9 	ble.w	8027912 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8027720:	2e00      	cmp	r6, #0
 8027722:	f2c0 80f4 	blt.w	802790e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8027726:	42b3      	cmp	r3, r6
 8027728:	f340 80f1 	ble.w	802790e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802772c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8027730:	1c72      	adds	r2, r6, #1
 8027732:	f100 80ef 	bmi.w	8027914 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027736:	4293      	cmp	r3, r2
 8027738:	f340 80ec 	ble.w	8027914 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802773c:	f1bc 0f00 	cmp.w	ip, #0
 8027740:	f000 80e8 	beq.w	8027914 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027744:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027748:	f118 0801 	adds.w	r8, r8, #1
 802774c:	f100 80e6 	bmi.w	802791c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027750:	45c2      	cmp	sl, r8
 8027752:	f340 80e3 	ble.w	802791c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027756:	f1be 0f00 	cmp.w	lr, #0
 802775a:	f000 80df 	beq.w	802791c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802775e:	2e00      	cmp	r6, #0
 8027760:	f2c0 80da 	blt.w	8027918 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8027764:	42b3      	cmp	r3, r6
 8027766:	f340 80d7 	ble.w	8027918 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802776a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 802776e:	3601      	adds	r6, #1
 8027770:	d407      	bmi.n	8027782 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027772:	42b3      	cmp	r3, r6
 8027774:	dd05      	ble.n	8027782 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027776:	f1bc 0f00 	cmp.w	ip, #0
 802777a:	d002      	beq.n	8027782 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802777c:	3301      	adds	r3, #1
 802777e:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8027782:	fa1f fc8c 	uxth.w	ip, ip
 8027786:	fa1f f38e 	uxth.w	r3, lr
 802778a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802778e:	fb03 fe0c 	mul.w	lr, r3, ip
 8027792:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027796:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802779a:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 802779e:	ebac 060e 	sub.w	r6, ip, lr
 80277a2:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 80277a6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80277aa:	b29b      	uxth	r3, r3
 80277ac:	b2b6      	uxth	r6, r6
 80277ae:	ebac 0c03 	sub.w	ip, ip, r3
 80277b2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80277b6:	9601      	str	r6, [sp, #4]
 80277b8:	fa1f f68c 	uxth.w	r6, ip
 80277bc:	9602      	str	r6, [sp, #8]
 80277be:	9e01      	ldr	r6, [sp, #4]
 80277c0:	fb06 fc0a 	mul.w	ip, r6, sl
 80277c4:	9e02      	ldr	r6, [sp, #8]
 80277c6:	fb06 cc0b 	mla	ip, r6, fp, ip
 80277ca:	fb03 cc09 	mla	ip, r3, r9, ip
 80277ce:	fb0e cc08 	mla	ip, lr, r8, ip
 80277d2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80277d6:	9603      	str	r6, [sp, #12]
 80277d8:	2e00      	cmp	r6, #0
 80277da:	f000 8095 	beq.w	8027908 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 80277de:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80277e2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80277e6:	fb0b fc0c 	mul.w	ip, fp, ip
 80277ea:	fb0b f505 	mul.w	r5, fp, r5
 80277ee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80277f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80277f6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80277fa:	44dc      	add	ip, fp
 80277fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027800:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8027804:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027808:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802780c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027810:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027814:	fb0a fc0c 	mul.w	ip, sl, ip
 8027818:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802781c:	fb0a fa04 	mul.w	sl, sl, r4
 8027820:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027824:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027828:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802782c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027830:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027834:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8027838:	4465      	add	r5, ip
 802783a:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 802783e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027842:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027846:	fb09 fc0c 	mul.w	ip, r9, ip
 802784a:	0a2d      	lsrs	r5, r5, #8
 802784c:	fb09 f902 	mul.w	r9, r9, r2
 8027850:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027854:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027858:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802785c:	f509 7280 	add.w	r2, r9, #256	; 0x100
 8027860:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027864:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027868:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802786c:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 8027870:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027874:	4464      	add	r4, ip
 8027876:	fb08 f202 	mul.w	r2, r8, r2
 802787a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802787e:	fb08 f800 	mul.w	r8, r8, r0
 8027882:	0a24      	lsrs	r4, r4, #8
 8027884:	0a10      	lsrs	r0, r2, #8
 8027886:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802788a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802788e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027892:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027896:	4402      	add	r2, r0
 8027898:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802789c:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80278a0:	9801      	ldr	r0, [sp, #4]
 80278a2:	0a12      	lsrs	r2, r2, #8
 80278a4:	4345      	muls	r5, r0
 80278a6:	9802      	ldr	r0, [sp, #8]
 80278a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80278ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80278b0:	fb06 5500 	mla	r5, r6, r0, r5
 80278b4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80278b8:	fb02 520e 	mla	r2, r2, lr, r5
 80278bc:	fb04 2403 	mla	r4, r4, r3, r2
 80278c0:	9a01      	ldr	r2, [sp, #4]
 80278c2:	fb02 f60a 	mul.w	r6, r2, sl
 80278c6:	0a24      	lsrs	r4, r4, #8
 80278c8:	9a03      	ldr	r2, [sp, #12]
 80278ca:	fb00 660b 	mla	r6, r0, fp, r6
 80278ce:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80278d2:	fb07 fc02 	mul.w	ip, r7, r2
 80278d6:	fb0e 6e08 	mla	lr, lr, r8, r6
 80278da:	fb03 e309 	mla	r3, r3, r9, lr
 80278de:	0a1b      	lsrs	r3, r3, #8
 80278e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80278e4:	4323      	orrs	r3, r4
 80278e6:	f10c 0401 	add.w	r4, ip, #1
 80278ea:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 80278ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80278f2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80278f6:	1224      	asrs	r4, r4, #8
 80278f8:	b2d5      	uxtb	r5, r2
 80278fa:	2cff      	cmp	r4, #255	; 0xff
 80278fc:	b2c6      	uxtb	r6, r0
 80278fe:	d10f      	bne.n	8027920 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 8027900:	700b      	strb	r3, [r1, #0]
 8027902:	7048      	strb	r0, [r1, #1]
 8027904:	708a      	strb	r2, [r1, #2]
 8027906:	70cc      	strb	r4, [r1, #3]
 8027908:	b005      	add	sp, #20
 802790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802790e:	4605      	mov	r5, r0
 8027910:	e70e      	b.n	8027730 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 8027912:	4605      	mov	r5, r0
 8027914:	4604      	mov	r4, r0
 8027916:	e717      	b.n	8027748 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 8027918:	4602      	mov	r2, r0
 802791a:	e728      	b.n	802776e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 802791c:	4602      	mov	r2, r0
 802791e:	e730      	b.n	8027782 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027920:	b2e2      	uxtb	r2, r4
 8027922:	2c00      	cmp	r4, #0
 8027924:	d0f0      	beq.n	8027908 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8027926:	78cc      	ldrb	r4, [r1, #3]
 8027928:	b2db      	uxtb	r3, r3
 802792a:	fb17 f606 	smulbb	r6, r7, r6
 802792e:	fb02 fc04 	mul.w	ip, r2, r4
 8027932:	4422      	add	r2, r4
 8027934:	f10c 0001 	add.w	r0, ip, #1
 8027938:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802793c:	1200      	asrs	r0, r0, #8
 802793e:	1a24      	subs	r4, r4, r0
 8027940:	1a12      	subs	r2, r2, r0
 8027942:	7808      	ldrb	r0, [r1, #0]
 8027944:	b2d2      	uxtb	r2, r2
 8027946:	4360      	muls	r0, r4
 8027948:	70ca      	strb	r2, [r1, #3]
 802794a:	fb07 0303 	mla	r3, r7, r3, r0
 802794e:	7848      	ldrb	r0, [r1, #1]
 8027950:	fb17 f705 	smulbb	r7, r7, r5
 8027954:	fb04 6000 	mla	r0, r4, r0, r6
 8027958:	fb93 f3f2 	sdiv	r3, r3, r2
 802795c:	2bff      	cmp	r3, #255	; 0xff
 802795e:	bfd6      	itet	le
 8027960:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027964:	23ff      	movgt	r3, #255	; 0xff
 8027966:	b2db      	uxtble	r3, r3
 8027968:	fb90 f0f2 	sdiv	r0, r0, r2
 802796c:	700b      	strb	r3, [r1, #0]
 802796e:	28ff      	cmp	r0, #255	; 0xff
 8027970:	788b      	ldrb	r3, [r1, #2]
 8027972:	bfd4      	ite	le
 8027974:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027978:	20ff      	movgt	r0, #255	; 0xff
 802797a:	fb04 7303 	mla	r3, r4, r3, r7
 802797e:	bfd8      	it	le
 8027980:	b2c0      	uxtble	r0, r0
 8027982:	fb93 f3f2 	sdiv	r3, r3, r2
 8027986:	2bff      	cmp	r3, #255	; 0xff
 8027988:	7048      	strb	r0, [r1, #1]
 802798a:	bfd6      	itet	le
 802798c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027990:	23ff      	movgt	r3, #255	; 0xff
 8027992:	b2db      	uxtble	r3, r3
 8027994:	708b      	strb	r3, [r1, #2]
 8027996:	e7b7      	b.n	8027908 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

08027998 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802799c:	b09b      	sub	sp, #108	; 0x6c
 802799e:	9218      	str	r2, [sp, #96]	; 0x60
 80279a0:	9306      	str	r3, [sp, #24]
 80279a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80279a4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80279a8:	9019      	str	r0, [sp, #100]	; 0x64
 80279aa:	9116      	str	r1, [sp, #88]	; 0x58
 80279ac:	6850      	ldr	r0, [r2, #4]
 80279ae:	9307      	str	r3, [sp, #28]
 80279b0:	6812      	ldr	r2, [r2, #0]
 80279b2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80279b6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80279ba:	fb00 1303 	mla	r3, r0, r3, r1
 80279be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80279c2:	930a      	str	r3, [sp, #40]	; 0x28
 80279c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80279c6:	681b      	ldr	r3, [r3, #0]
 80279c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80279ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80279cc:	2b00      	cmp	r3, #0
 80279ce:	dc03      	bgt.n	80279d8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80279d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	f340 83b3 	ble.w	802813e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 80279d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80279da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80279de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80279e2:	1e48      	subs	r0, r1, #1
 80279e4:	1e57      	subs	r7, r2, #1
 80279e6:	9b06      	ldr	r3, [sp, #24]
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	f340 8167 	ble.w	8027cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80279ee:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80279f2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80279f6:	d406      	bmi.n	8027a06 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80279f8:	4584      	cmp	ip, r0
 80279fa:	da04      	bge.n	8027a06 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80279fc:	2b00      	cmp	r3, #0
 80279fe:	db02      	blt.n	8027a06 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027a00:	42bb      	cmp	r3, r7
 8027a02:	f2c0 815c 	blt.w	8027cbe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8027a06:	f11c 0c01 	adds.w	ip, ip, #1
 8027a0a:	f100 814c 	bmi.w	8027ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027a0e:	4561      	cmp	r1, ip
 8027a10:	f2c0 8149 	blt.w	8027ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027a14:	3301      	adds	r3, #1
 8027a16:	f100 8146 	bmi.w	8027ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027a1a:	429a      	cmp	r2, r3
 8027a1c:	f2c0 8143 	blt.w	8027ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027a20:	9b06      	ldr	r3, [sp, #24]
 8027a22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027a24:	9317      	str	r3, [sp, #92]	; 0x5c
 8027a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027a28:	2b00      	cmp	r3, #0
 8027a2a:	f340 8165 	ble.w	8027cf8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8027a2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027a30:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027a34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a36:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027a3a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027a3e:	1422      	asrs	r2, r4, #16
 8027a40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027a44:	689b      	ldr	r3, [r3, #8]
 8027a46:	f100 81e7 	bmi.w	8027e18 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027a4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8027a4e:	4542      	cmp	r2, r8
 8027a50:	f280 81e2 	bge.w	8027e18 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027a54:	f1bc 0f00 	cmp.w	ip, #0
 8027a58:	f2c0 81de 	blt.w	8027e18 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027a5c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027a60:	45c4      	cmp	ip, r8
 8027a62:	f280 81d9 	bge.w	8027e18 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027a66:	b21b      	sxth	r3, r3
 8027a68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027a6a:	fb0c 2203 	mla	r2, ip, r3, r2
 8027a6e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027a72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027a76:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027a7a:	2800      	cmp	r0, #0
 8027a7c:	f000 8182 	beq.w	8027d84 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8027a80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027a84:	950b      	str	r5, [sp, #44]	; 0x2c
 8027a86:	0e2d      	lsrs	r5, r5, #24
 8027a88:	9512      	str	r5, [sp, #72]	; 0x48
 8027a8a:	b181      	cbz	r1, 8027aae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027a90:	3b01      	subs	r3, #1
 8027a92:	009b      	lsls	r3, r3, #2
 8027a94:	3304      	adds	r3, #4
 8027a96:	eb08 0c03 	add.w	ip, r8, r3
 8027a9a:	f858 3003 	ldr.w	r3, [r8, r3]
 8027a9e:	9308      	str	r3, [sp, #32]
 8027aa0:	0e1b      	lsrs	r3, r3, #24
 8027aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8027aa4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8027aaa:	0e1b      	lsrs	r3, r3, #24
 8027aac:	9313      	str	r3, [sp, #76]	; 0x4c
 8027aae:	b280      	uxth	r0, r0
 8027ab0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027ab2:	b289      	uxth	r1, r1
 8027ab4:	fb00 f901 	mul.w	r9, r0, r1
 8027ab8:	0100      	lsls	r0, r0, #4
 8027aba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027abe:	eba0 0809 	sub.w	r8, r0, r9
 8027ac2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027ac6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8027ac8:	b289      	uxth	r1, r1
 8027aca:	fa1f f888 	uxth.w	r8, r8
 8027ace:	1a5b      	subs	r3, r3, r1
 8027ad0:	fb08 f000 	mul.w	r0, r8, r0
 8027ad4:	b29b      	uxth	r3, r3
 8027ad6:	fb03 000e 	mla	r0, r3, lr, r0
 8027ada:	fb01 0005 	mla	r0, r1, r5, r0
 8027ade:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027ae0:	fb09 0005 	mla	r0, r9, r5, r0
 8027ae4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ae8:	2800      	cmp	r0, #0
 8027aea:	f000 80d3 	beq.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027aee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027af2:	d01b      	beq.n	8027b2c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8027af4:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027af8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027afc:	fb0e fa0a 	mul.w	sl, lr, sl
 8027b00:	fb0e fe02 	mul.w	lr, lr, r2
 8027b04:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027b08:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027b0c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027b10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027b14:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027b18:	4452      	add	r2, sl
 8027b1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b1e:	0a12      	lsrs	r2, r2, #8
 8027b20:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027b24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027b28:	ea42 020c 	orr.w	r2, r2, ip
 8027b2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027b2e:	2dff      	cmp	r5, #255	; 0xff
 8027b30:	d021      	beq.n	8027b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8027b32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027b34:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027b38:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027b3a:	fb05 fb0b 	mul.w	fp, r5, fp
 8027b3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027b40:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027b44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027b46:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027b4a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027b4e:	fb05 fa0a 	mul.w	sl, r5, sl
 8027b52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027b56:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027b5a:	44de      	add	lr, fp
 8027b5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027b60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027b6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b70:	ea4e 050a 	orr.w	r5, lr, sl
 8027b74:	950b      	str	r5, [sp, #44]	; 0x2c
 8027b76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b78:	2dff      	cmp	r5, #255	; 0xff
 8027b7a:	d021      	beq.n	8027bc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8027b7c:	9d08      	ldr	r5, [sp, #32]
 8027b7e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027b82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b84:	fb05 fb0b 	mul.w	fp, r5, fp
 8027b88:	9d08      	ldr	r5, [sp, #32]
 8027b8a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027b8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027b94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027b98:	fb05 fa0a 	mul.w	sl, r5, sl
 8027b9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ba0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027ba4:	44de      	add	lr, fp
 8027ba6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027baa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027bb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027bba:	ea4e 050a 	orr.w	r5, lr, sl
 8027bbe:	9508      	str	r5, [sp, #32]
 8027bc0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027bc2:	2dff      	cmp	r5, #255	; 0xff
 8027bc4:	d021      	beq.n	8027c0a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027bc8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027bcc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027bce:	fb05 fb0b 	mul.w	fp, r5, fp
 8027bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027bd4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027bd8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027bda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027bde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027be2:	fb05 fa0a 	mul.w	sl, r5, sl
 8027be6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027bea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027bee:	44de      	add	lr, fp
 8027bf0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027bf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027c00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c04:	ea4e 050a 	orr.w	r5, lr, sl
 8027c08:	950c      	str	r5, [sp, #48]	; 0x30
 8027c0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c0c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027c10:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027c14:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027c18:	9d08      	ldr	r5, [sp, #32]
 8027c1a:	fb08 fc0c 	mul.w	ip, r8, ip
 8027c1e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027c22:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c28:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027c2c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027c30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c32:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027c36:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027c3a:	fb08 f80e 	mul.w	r8, r8, lr
 8027c3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c42:	fb03 8202 	mla	r2, r3, r2, r8
 8027c46:	9b08      	ldr	r3, [sp, #32]
 8027c48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c4c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027c52:	fb01 220a 	mla	r2, r1, sl, r2
 8027c56:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027c5a:	9b07      	ldr	r3, [sp, #28]
 8027c5c:	fb09 2901 	mla	r9, r9, r1, r2
 8027c60:	4358      	muls	r0, r3
 8027c62:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c66:	1c43      	adds	r3, r0, #1
 8027c68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027c6c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027c70:	ea4c 0c09 	orr.w	ip, ip, r9
 8027c74:	1200      	asrs	r0, r0, #8
 8027c76:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8027c7a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8027c7e:	28ff      	cmp	r0, #255	; 0xff
 8027c80:	b2d9      	uxtb	r1, r3
 8027c82:	fa5f fe82 	uxtb.w	lr, r2
 8027c86:	f040 8086 	bne.w	8027d96 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8027c8a:	f887 c000 	strb.w	ip, [r7]
 8027c8e:	707a      	strb	r2, [r7, #1]
 8027c90:	70bb      	strb	r3, [r7, #2]
 8027c92:	70f8      	strb	r0, [r7, #3]
 8027c94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027c96:	3704      	adds	r7, #4
 8027c98:	441c      	add	r4, r3
 8027c9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027c9c:	441e      	add	r6, r3
 8027c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ca0:	3b01      	subs	r3, #1
 8027ca2:	9317      	str	r3, [sp, #92]	; 0x5c
 8027ca4:	e6bf      	b.n	8027a26 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027ca6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027ca8:	441c      	add	r4, r3
 8027caa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027cac:	441e      	add	r6, r3
 8027cae:	9b06      	ldr	r3, [sp, #24]
 8027cb0:	3b01      	subs	r3, #1
 8027cb2:	9306      	str	r3, [sp, #24]
 8027cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027cb6:	3304      	adds	r3, #4
 8027cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8027cba:	e694      	b.n	80279e6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8027cbc:	d023      	beq.n	8027d06 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8027cbe:	9b06      	ldr	r3, [sp, #24]
 8027cc0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027cc2:	3b01      	subs	r3, #1
 8027cc4:	fb00 4003 	mla	r0, r0, r3, r4
 8027cc8:	1400      	asrs	r0, r0, #16
 8027cca:	f53f aea9 	bmi.w	8027a20 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027cce:	3901      	subs	r1, #1
 8027cd0:	4288      	cmp	r0, r1
 8027cd2:	f6bf aea5 	bge.w	8027a20 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027cd6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027cd8:	fb01 6303 	mla	r3, r1, r3, r6
 8027cdc:	141b      	asrs	r3, r3, #16
 8027cde:	f53f ae9f 	bmi.w	8027a20 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027ce2:	3a01      	subs	r2, #1
 8027ce4:	4293      	cmp	r3, r2
 8027ce6:	f6bf ae9b 	bge.w	8027a20 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027cea:	f8dd b018 	ldr.w	fp, [sp, #24]
 8027cee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027cf0:	f1bb 0f00 	cmp.w	fp, #0
 8027cf4:	f300 80ae 	bgt.w	8027e54 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027cf8:	9b06      	ldr	r3, [sp, #24]
 8027cfa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d00:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8027d04:	930a      	str	r3, [sp, #40]	; 0x28
 8027d06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	f340 8218 	ble.w	802813e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8027d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027d18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027d1c:	eef0 6a62 	vmov.f32	s13, s5
 8027d20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027d24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027d28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d2c:	ee16 4a90 	vmov	r4, s13
 8027d30:	eef0 6a43 	vmov.f32	s13, s6
 8027d34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d38:	ee16 6a90 	vmov	r6, s13
 8027d3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027d40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027d44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027d48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027d4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027d50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027d54:	ee12 2a90 	vmov	r2, s5
 8027d58:	eef0 2a47 	vmov.f32	s5, s14
 8027d5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d60:	ee13 2a10 	vmov	r2, s6
 8027d64:	9327      	str	r3, [sp, #156]	; 0x9c
 8027d66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d68:	eeb0 3a67 	vmov.f32	s6, s15
 8027d6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d70:	9328      	str	r3, [sp, #160]	; 0xa0
 8027d72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027d74:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027d76:	3b01      	subs	r3, #1
 8027d78:	9316      	str	r3, [sp, #88]	; 0x58
 8027d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d7c:	bf08      	it	eq
 8027d7e:	4613      	moveq	r3, r2
 8027d80:	9306      	str	r3, [sp, #24]
 8027d82:	e622      	b.n	80279ca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8027d84:	2900      	cmp	r1, #0
 8027d86:	f43f ae92 	beq.w	8027aae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027d8a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027d8e:	9308      	str	r3, [sp, #32]
 8027d90:	0e1b      	lsrs	r3, r3, #24
 8027d92:	9310      	str	r3, [sp, #64]	; 0x40
 8027d94:	e68b      	b.n	8027aae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027d96:	b2c3      	uxtb	r3, r0
 8027d98:	2800      	cmp	r0, #0
 8027d9a:	f43f af7b 	beq.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027d9e:	78f8      	ldrb	r0, [r7, #3]
 8027da0:	fa5f fc8c 	uxtb.w	ip, ip
 8027da4:	9d07      	ldr	r5, [sp, #28]
 8027da6:	fb03 f800 	mul.w	r8, r3, r0
 8027daa:	4403      	add	r3, r0
 8027dac:	f108 0201 	add.w	r2, r8, #1
 8027db0:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8027db4:	1212      	asrs	r2, r2, #8
 8027db6:	1a80      	subs	r0, r0, r2
 8027db8:	1a9b      	subs	r3, r3, r2
 8027dba:	783a      	ldrb	r2, [r7, #0]
 8027dbc:	b2db      	uxtb	r3, r3
 8027dbe:	4342      	muls	r2, r0
 8027dc0:	70fb      	strb	r3, [r7, #3]
 8027dc2:	fb05 220c 	mla	r2, r5, ip, r2
 8027dc6:	9d07      	ldr	r5, [sp, #28]
 8027dc8:	fb92 f2f3 	sdiv	r2, r2, r3
 8027dcc:	fb15 fe0e 	smulbb	lr, r5, lr
 8027dd0:	2aff      	cmp	r2, #255	; 0xff
 8027dd2:	9d07      	ldr	r5, [sp, #28]
 8027dd4:	bfd4      	ite	le
 8027dd6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027dda:	22ff      	movgt	r2, #255	; 0xff
 8027ddc:	fb15 f101 	smulbb	r1, r5, r1
 8027de0:	bfd8      	it	le
 8027de2:	b2d2      	uxtble	r2, r2
 8027de4:	703a      	strb	r2, [r7, #0]
 8027de6:	787a      	ldrb	r2, [r7, #1]
 8027de8:	fb00 e202 	mla	r2, r0, r2, lr
 8027dec:	fb92 f2f3 	sdiv	r2, r2, r3
 8027df0:	2aff      	cmp	r2, #255	; 0xff
 8027df2:	bfd6      	itet	le
 8027df4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027df8:	22ff      	movgt	r2, #255	; 0xff
 8027dfa:	b2d2      	uxtble	r2, r2
 8027dfc:	707a      	strb	r2, [r7, #1]
 8027dfe:	78ba      	ldrb	r2, [r7, #2]
 8027e00:	fb00 1202 	mla	r2, r0, r2, r1
 8027e04:	fb92 f2f3 	sdiv	r2, r2, r3
 8027e08:	2aff      	cmp	r2, #255	; 0xff
 8027e0a:	bfd6      	itet	le
 8027e0c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027e10:	22ff      	movgt	r2, #255	; 0xff
 8027e12:	b2d2      	uxtble	r2, r2
 8027e14:	70ba      	strb	r2, [r7, #2]
 8027e16:	e73d      	b.n	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e18:	f112 0801 	adds.w	r8, r2, #1
 8027e1c:	f53f af3a 	bmi.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e20:	4543      	cmp	r3, r8
 8027e22:	f6ff af37 	blt.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e26:	f11c 0801 	adds.w	r8, ip, #1
 8027e2a:	f53f af33 	bmi.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e2e:	45c6      	cmp	lr, r8
 8027e30:	f6ff af30 	blt.w	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e34:	9d07      	ldr	r5, [sp, #28]
 8027e36:	b21b      	sxth	r3, r3
 8027e38:	9201      	str	r2, [sp, #4]
 8027e3a:	fa0f f28e 	sxth.w	r2, lr
 8027e3e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027e42:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027e46:	9200      	str	r2, [sp, #0]
 8027e48:	4639      	mov	r1, r7
 8027e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027e4c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027e4e:	f7ff fc4e 	bl	80276ee <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 8027e52:	e71f      	b.n	8027c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027e54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e56:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8027e5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027e5c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027e60:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027e64:	1433      	asrs	r3, r6, #16
 8027e66:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8027e6a:	fb00 c303 	mla	r3, r0, r3, ip
 8027e6e:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8027e72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027e76:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027e7a:	2a00      	cmp	r2, #0
 8027e7c:	f000 8111 	beq.w	80280a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027e80:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8027e84:	950d      	str	r5, [sp, #52]	; 0x34
 8027e86:	0e2d      	lsrs	r5, r5, #24
 8027e88:	9514      	str	r5, [sp, #80]	; 0x50
 8027e8a:	b187      	cbz	r7, 8027eae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8027e8c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8027e90:	3801      	subs	r0, #1
 8027e92:	0080      	lsls	r0, r0, #2
 8027e94:	3004      	adds	r0, #4
 8027e96:	eb0c 0800 	add.w	r8, ip, r0
 8027e9a:	f85c 0000 	ldr.w	r0, [ip, r0]
 8027e9e:	9009      	str	r0, [sp, #36]	; 0x24
 8027ea0:	0e00      	lsrs	r0, r0, #24
 8027ea2:	9011      	str	r0, [sp, #68]	; 0x44
 8027ea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027ea8:	900e      	str	r0, [sp, #56]	; 0x38
 8027eaa:	0e00      	lsrs	r0, r0, #24
 8027eac:	9015      	str	r0, [sp, #84]	; 0x54
 8027eae:	b292      	uxth	r2, r2
 8027eb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027eb2:	b2bf      	uxth	r7, r7
 8027eb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027eb6:	fb02 f907 	mul.w	r9, r2, r7
 8027eba:	0112      	lsls	r2, r2, #4
 8027ebc:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 8027ec0:	eba2 0809 	sub.w	r8, r2, r9
 8027ec4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027ec8:	b2bf      	uxth	r7, r7
 8027eca:	fa1f f888 	uxth.w	r8, r8
 8027ece:	1bd2      	subs	r2, r2, r7
 8027ed0:	fb08 f000 	mul.w	r0, r8, r0
 8027ed4:	b292      	uxth	r2, r2
 8027ed6:	fb02 000e 	mla	r0, r2, lr, r0
 8027eda:	fb07 0005 	mla	r0, r7, r5, r0
 8027ede:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027ee0:	fb09 0005 	mla	r0, r9, r5, r0
 8027ee4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ee8:	2800      	cmp	r0, #0
 8027eea:	f000 80d2 	beq.w	8028092 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027eee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027ef2:	d01b      	beq.n	8027f2c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8027ef4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027ef8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027efc:	fb0e fa0a 	mul.w	sl, lr, sl
 8027f00:	fb0e fe03 	mul.w	lr, lr, r3
 8027f04:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027f08:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027f0c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027f10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f14:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027f18:	4453      	add	r3, sl
 8027f1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027f1e:	0a1b      	lsrs	r3, r3, #8
 8027f20:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027f24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f28:	ea43 030c 	orr.w	r3, r3, ip
 8027f2c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f2e:	2dff      	cmp	r5, #255	; 0xff
 8027f30:	d021      	beq.n	8027f76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8027f32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027f34:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027f38:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f3a:	fb05 fc0c 	mul.w	ip, r5, ip
 8027f3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027f40:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027f44:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027f48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027f4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027f4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f52:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f56:	44e6      	add	lr, ip
 8027f58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027f5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027f64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027f6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027f70:	ea4e 050a 	orr.w	r5, lr, sl
 8027f74:	950d      	str	r5, [sp, #52]	; 0x34
 8027f76:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f78:	2dff      	cmp	r5, #255	; 0xff
 8027f7a:	d021      	beq.n	8027fc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8027f7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027f7e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027f82:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f84:	fb05 fc0c 	mul.w	ip, r5, ip
 8027f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027f8a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027f8e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027f92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f94:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027f98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f9c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027fa0:	44e6      	add	lr, ip
 8027fa2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027fa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027faa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027fae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027fb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027fba:	ea4e 050a 	orr.w	r5, lr, sl
 8027fbe:	9509      	str	r5, [sp, #36]	; 0x24
 8027fc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027fc2:	2dff      	cmp	r5, #255	; 0xff
 8027fc4:	d021      	beq.n	802800a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8027fc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027fc8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027fcc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027fce:	fb05 fc0c 	mul.w	ip, r5, ip
 8027fd2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027fd4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027fd8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027fdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027fde:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027fe2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027fe6:	fb05 fa0a 	mul.w	sl, r5, sl
 8027fea:	44e6      	add	lr, ip
 8027fec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027ff0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ff4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027ff8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ffc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028004:	ea4e 050a 	orr.w	r5, lr, sl
 8028008:	950e      	str	r5, [sp, #56]	; 0x38
 802800a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802800c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028014:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028018:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802801a:	fb08 fc0c 	mul.w	ip, r8, ip
 802801e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8028022:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028026:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028028:	fb07 cc0e 	mla	ip, r7, lr, ip
 802802c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028030:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028032:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028036:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802803a:	fb08 f80e 	mul.w	r8, r8, lr
 802803e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028042:	fb02 8303 	mla	r3, r2, r3, r8
 8028046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028048:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802804c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028052:	fb07 330a 	mla	r3, r7, sl, r3
 8028056:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802805a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802805e:	9b07      	ldr	r3, [sp, #28]
 8028060:	4358      	muls	r0, r3
 8028062:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028066:	1c43      	adds	r3, r0, #1
 8028068:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802806c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028070:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028074:	1200      	asrs	r0, r0, #8
 8028076:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802807a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802807e:	28ff      	cmp	r0, #255	; 0xff
 8028080:	b2df      	uxtb	r7, r3
 8028082:	fa5f fe82 	uxtb.w	lr, r2
 8028086:	d115      	bne.n	80280b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 8028088:	f881 c000 	strb.w	ip, [r1]
 802808c:	704a      	strb	r2, [r1, #1]
 802808e:	708b      	strb	r3, [r1, #2]
 8028090:	70c8      	strb	r0, [r1, #3]
 8028092:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028094:	3104      	adds	r1, #4
 8028096:	f10b 3bff 	add.w	fp, fp, #4294967295
 802809a:	441c      	add	r4, r3
 802809c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802809e:	441e      	add	r6, r3
 80280a0:	e626      	b.n	8027cf0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80280a2:	2f00      	cmp	r7, #0
 80280a4:	f43f af03 	beq.w	8027eae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80280a8:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80280ac:	9009      	str	r0, [sp, #36]	; 0x24
 80280ae:	0e00      	lsrs	r0, r0, #24
 80280b0:	9011      	str	r0, [sp, #68]	; 0x44
 80280b2:	e6fc      	b.n	8027eae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80280b4:	b2c3      	uxtb	r3, r0
 80280b6:	2800      	cmp	r0, #0
 80280b8:	d0eb      	beq.n	8028092 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80280ba:	78c8      	ldrb	r0, [r1, #3]
 80280bc:	fa5f fc8c 	uxtb.w	ip, ip
 80280c0:	9d07      	ldr	r5, [sp, #28]
 80280c2:	fb03 f800 	mul.w	r8, r3, r0
 80280c6:	4403      	add	r3, r0
 80280c8:	f108 0201 	add.w	r2, r8, #1
 80280cc:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 80280d0:	1212      	asrs	r2, r2, #8
 80280d2:	1a9b      	subs	r3, r3, r2
 80280d4:	1a82      	subs	r2, r0, r2
 80280d6:	7808      	ldrb	r0, [r1, #0]
 80280d8:	b2db      	uxtb	r3, r3
 80280da:	4350      	muls	r0, r2
 80280dc:	70cb      	strb	r3, [r1, #3]
 80280de:	fb05 0c0c 	mla	ip, r5, ip, r0
 80280e2:	9d07      	ldr	r5, [sp, #28]
 80280e4:	7848      	ldrb	r0, [r1, #1]
 80280e6:	fb15 fe0e 	smulbb	lr, r5, lr
 80280ea:	9d07      	ldr	r5, [sp, #28]
 80280ec:	fb9c fcf3 	sdiv	ip, ip, r3
 80280f0:	fb02 e000 	mla	r0, r2, r0, lr
 80280f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80280f8:	fb15 f707 	smulbb	r7, r5, r7
 80280fc:	bfd4      	ite	le
 80280fe:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8028102:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8028106:	fb90 f0f3 	sdiv	r0, r0, r3
 802810a:	bfd8      	it	le
 802810c:	fa5f fc8c 	uxtble.w	ip, ip
 8028110:	28ff      	cmp	r0, #255	; 0xff
 8028112:	bfd4      	ite	le
 8028114:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028118:	20ff      	movgt	r0, #255	; 0xff
 802811a:	f881 c000 	strb.w	ip, [r1]
 802811e:	bfd8      	it	le
 8028120:	b2c0      	uxtble	r0, r0
 8028122:	7048      	strb	r0, [r1, #1]
 8028124:	7888      	ldrb	r0, [r1, #2]
 8028126:	fb02 7200 	mla	r2, r2, r0, r7
 802812a:	fb92 f2f3 	sdiv	r2, r2, r3
 802812e:	2aff      	cmp	r2, #255	; 0xff
 8028130:	bfd6      	itet	le
 8028132:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028136:	22ff      	movgt	r2, #255	; 0xff
 8028138:	b2d2      	uxtble	r2, r2
 802813a:	708a      	strb	r2, [r1, #2]
 802813c:	e7a9      	b.n	8028092 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802813e:	b01b      	add	sp, #108	; 0x6c
 8028140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028144 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 8028144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028148:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802814c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028150:	2c00      	cmp	r4, #0
 8028152:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028156:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802815a:	fb00 4e03 	mla	lr, r0, r3, r4
 802815e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8028162:	f2c0 808f 	blt.w	8028284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8028166:	45a1      	cmp	r9, r4
 8028168:	f340 808c 	ble.w	8028284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802816c:	2800      	cmp	r0, #0
 802816e:	f2c0 8089 	blt.w	8028284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8028172:	4580      	cmp	r8, r0
 8028174:	f340 8086 	ble.w	8028284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8028178:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802817c:	f01e 0f01 	tst.w	lr, #1
 8028180:	5d56      	ldrb	r6, [r2, r5]
 8028182:	bf0c      	ite	eq
 8028184:	f006 060f 	andeq.w	r6, r6, #15
 8028188:	1136      	asrne	r6, r6, #4
 802818a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802818e:	b2f6      	uxtb	r6, r6
 8028190:	f114 0a01 	adds.w	sl, r4, #1
 8028194:	d478      	bmi.n	8028288 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 8028196:	45d1      	cmp	r9, sl
 8028198:	dd76      	ble.n	8028288 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802819a:	2800      	cmp	r0, #0
 802819c:	db74      	blt.n	8028288 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802819e:	4580      	cmp	r8, r0
 80281a0:	dd72      	ble.n	8028288 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80281a2:	2f00      	cmp	r7, #0
 80281a4:	d072      	beq.n	802828c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 80281a6:	f10e 0b01 	add.w	fp, lr, #1
 80281aa:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80281ae:	f01b 0f01 	tst.w	fp, #1
 80281b2:	5d55      	ldrb	r5, [r2, r5]
 80281b4:	bf0c      	ite	eq
 80281b6:	f005 050f 	andeq.w	r5, r5, #15
 80281ba:	112d      	asrne	r5, r5, #4
 80281bc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80281c0:	b2ed      	uxtb	r5, r5
 80281c2:	f1bc 0f00 	cmp.w	ip, #0
 80281c6:	d065      	beq.n	8028294 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 80281c8:	2c00      	cmp	r4, #0
 80281ca:	f100 0001 	add.w	r0, r0, #1
 80281ce:	db5f      	blt.n	8028290 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80281d0:	45a1      	cmp	r9, r4
 80281d2:	dd5d      	ble.n	8028290 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80281d4:	2800      	cmp	r0, #0
 80281d6:	db5b      	blt.n	8028290 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80281d8:	4580      	cmp	r8, r0
 80281da:	dd59      	ble.n	8028290 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80281dc:	eb03 0b0e 	add.w	fp, r3, lr
 80281e0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80281e4:	f01b 0f01 	tst.w	fp, #1
 80281e8:	5d14      	ldrb	r4, [r2, r4]
 80281ea:	bf0c      	ite	eq
 80281ec:	f004 040f 	andeq.w	r4, r4, #15
 80281f0:	1124      	asrne	r4, r4, #4
 80281f2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80281f6:	b2e4      	uxtb	r4, r4
 80281f8:	f1ba 0f00 	cmp.w	sl, #0
 80281fc:	db4d      	blt.n	802829a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80281fe:	45d1      	cmp	r9, sl
 8028200:	dd4b      	ble.n	802829a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8028202:	2800      	cmp	r0, #0
 8028204:	db49      	blt.n	802829a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8028206:	4580      	cmp	r8, r0
 8028208:	dd47      	ble.n	802829a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802820a:	2f00      	cmp	r7, #0
 802820c:	d047      	beq.n	802829e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802820e:	3301      	adds	r3, #1
 8028210:	449e      	add	lr, r3
 8028212:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028216:	f01e 0f01 	tst.w	lr, #1
 802821a:	5cd0      	ldrb	r0, [r2, r3]
 802821c:	bf0c      	ite	eq
 802821e:	f000 000f 	andeq.w	r0, r0, #15
 8028222:	1100      	asrne	r0, r0, #4
 8028224:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028228:	b2c3      	uxtb	r3, r0
 802822a:	b2ba      	uxth	r2, r7
 802822c:	fa1f fc8c 	uxth.w	ip, ip
 8028230:	fb02 f00c 	mul.w	r0, r2, ip
 8028234:	0112      	lsls	r2, r2, #4
 8028236:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802823a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802823e:	1a12      	subs	r2, r2, r0
 8028240:	fa1f fc8c 	uxth.w	ip, ip
 8028244:	b292      	uxth	r2, r2
 8028246:	eba7 070c 	sub.w	r7, r7, ip
 802824a:	436a      	muls	r2, r5
 802824c:	b2bf      	uxth	r7, r7
 802824e:	fb06 2207 	mla	r2, r6, r7, r2
 8028252:	fb0c 2404 	mla	r4, ip, r4, r2
 8028256:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802825a:	fb00 4303 	mla	r3, r0, r3, r4
 802825e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028262:	4353      	muls	r3, r2
 8028264:	1c5a      	adds	r2, r3, #1
 8028266:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802826a:	4a21      	ldr	r2, [pc, #132]	; (80282f0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 802826c:	121b      	asrs	r3, r3, #8
 802826e:	7895      	ldrb	r5, [r2, #2]
 8028270:	7857      	ldrb	r7, [r2, #1]
 8028272:	2bff      	cmp	r3, #255	; 0xff
 8028274:	7814      	ldrb	r4, [r2, #0]
 8028276:	d114      	bne.n	80282a2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 8028278:	700c      	strb	r4, [r1, #0]
 802827a:	704f      	strb	r7, [r1, #1]
 802827c:	708d      	strb	r5, [r1, #2]
 802827e:	70cb      	strb	r3, [r1, #3]
 8028280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028284:	2600      	movs	r6, #0
 8028286:	e783      	b.n	8028190 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 8028288:	2500      	movs	r5, #0
 802828a:	e79a      	b.n	80281c2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802828c:	463d      	mov	r5, r7
 802828e:	e798      	b.n	80281c2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 8028290:	2400      	movs	r4, #0
 8028292:	e7b1      	b.n	80281f8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 8028294:	4663      	mov	r3, ip
 8028296:	4664      	mov	r4, ip
 8028298:	e7c7      	b.n	802822a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802829a:	2300      	movs	r3, #0
 802829c:	e7c5      	b.n	802822a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802829e:	463b      	mov	r3, r7
 80282a0:	e7c3      	b.n	802822a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80282a2:	b2da      	uxtb	r2, r3
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	d0eb      	beq.n	8028280 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80282a8:	78ce      	ldrb	r6, [r1, #3]
 80282aa:	435c      	muls	r4, r3
 80282ac:	435f      	muls	r7, r3
 80282ae:	fb02 fc06 	mul.w	ip, r2, r6
 80282b2:	4432      	add	r2, r6
 80282b4:	436b      	muls	r3, r5
 80282b6:	f10c 0001 	add.w	r0, ip, #1
 80282ba:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80282be:	1200      	asrs	r0, r0, #8
 80282c0:	1a12      	subs	r2, r2, r0
 80282c2:	1a30      	subs	r0, r6, r0
 80282c4:	780e      	ldrb	r6, [r1, #0]
 80282c6:	b2d2      	uxtb	r2, r2
 80282c8:	fb00 4606 	mla	r6, r0, r6, r4
 80282cc:	784c      	ldrb	r4, [r1, #1]
 80282ce:	70ca      	strb	r2, [r1, #3]
 80282d0:	fb00 7404 	mla	r4, r0, r4, r7
 80282d4:	fb94 f4f2 	sdiv	r4, r4, r2
 80282d8:	704c      	strb	r4, [r1, #1]
 80282da:	788c      	ldrb	r4, [r1, #2]
 80282dc:	fb00 3304 	mla	r3, r0, r4, r3
 80282e0:	fb96 f6f2 	sdiv	r6, r6, r2
 80282e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80282e8:	700e      	strb	r6, [r1, #0]
 80282ea:	708b      	strb	r3, [r1, #2]
 80282ec:	e7c8      	b.n	8028280 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80282ee:	bf00      	nop
 80282f0:	2003c27c 	.word	0x2003c27c

080282f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80282f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282f8:	b097      	sub	sp, #92	; 0x5c
 80282fa:	9214      	str	r2, [sp, #80]	; 0x50
 80282fc:	9309      	str	r3, [sp, #36]	; 0x24
 80282fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028300:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8028304:	9015      	str	r0, [sp, #84]	; 0x54
 8028306:	910d      	str	r1, [sp, #52]	; 0x34
 8028308:	6850      	ldr	r0, [r2, #4]
 802830a:	930e      	str	r3, [sp, #56]	; 0x38
 802830c:	6812      	ldr	r2, [r2, #0]
 802830e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8028312:	e9dd a521 	ldrd	sl, r5, [sp, #132]	; 0x84
 8028316:	fb00 1303 	mla	r3, r0, r3, r1
 802831a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802831e:	930a      	str	r3, [sp, #40]	; 0x28
 8028320:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028322:	689b      	ldr	r3, [r3, #8]
 8028324:	3301      	adds	r3, #1
 8028326:	f023 0301 	bic.w	r3, r3, #1
 802832a:	930f      	str	r3, [sp, #60]	; 0x3c
 802832c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802832e:	681e      	ldr	r6, [r3, #0]
 8028330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028332:	2b00      	cmp	r3, #0
 8028334:	dc03      	bgt.n	802833e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028338:	2b00      	cmp	r3, #0
 802833a:	f340 8255 	ble.w	80287e8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802833e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028340:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028344:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028348:	1e48      	subs	r0, r1, #1
 802834a:	1e57      	subs	r7, r2, #1
 802834c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802834e:	2b00      	cmp	r3, #0
 8028350:	f340 80bb 	ble.w	80284ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028354:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8028358:	ea4f 4325 	mov.w	r3, r5, asr #16
 802835c:	d406      	bmi.n	802836c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802835e:	4584      	cmp	ip, r0
 8028360:	da04      	bge.n	802836c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028362:	2b00      	cmp	r3, #0
 8028364:	db02      	blt.n	802836c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028366:	42bb      	cmp	r3, r7
 8028368:	f2c0 80b0 	blt.w	80284cc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802836c:	f11c 0c01 	adds.w	ip, ip, #1
 8028370:	f100 80a0 	bmi.w	80284b4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028374:	4561      	cmp	r1, ip
 8028376:	f2c0 809d 	blt.w	80284b4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802837a:	3301      	adds	r3, #1
 802837c:	f100 809a 	bmi.w	80284b4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028380:	429a      	cmp	r2, r3
 8028382:	f2c0 8097 	blt.w	80284b4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028386:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 802838a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802838e:	f1bb 0f00 	cmp.w	fp, #0
 8028392:	f340 80bb 	ble.w	802850c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8028396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028398:	1428      	asrs	r0, r5, #16
 802839a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802839e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80283a2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80283a6:	ea5f 432a 	movs.w	r3, sl, asr #16
 80283aa:	f100 8134 	bmi.w	8028616 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80283ae:	f10c 39ff 	add.w	r9, ip, #4294967295
 80283b2:	454b      	cmp	r3, r9
 80283b4:	f280 812f 	bge.w	8028616 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80283b8:	2800      	cmp	r0, #0
 80283ba:	f2c0 812c 	blt.w	8028616 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80283be:	f10e 39ff 	add.w	r9, lr, #4294967295
 80283c2:	4548      	cmp	r0, r9
 80283c4:	f280 8127 	bge.w	8028616 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80283c8:	fb00 3308 	mla	r3, r0, r8, r3
 80283cc:	0858      	lsrs	r0, r3, #1
 80283ce:	07dc      	lsls	r4, r3, #31
 80283d0:	f816 c000 	ldrb.w	ip, [r6, r0]
 80283d4:	bf54      	ite	pl
 80283d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80283da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80283de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80283e2:	fa5f fc8c 	uxtb.w	ip, ip
 80283e6:	2a00      	cmp	r2, #0
 80283e8:	f000 80d6 	beq.w	8028598 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80283ec:	1c58      	adds	r0, r3, #1
 80283ee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80283f2:	07c0      	lsls	r0, r0, #31
 80283f4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80283f8:	bf54      	ite	pl
 80283fa:	f00e 0e0f 	andpl.w	lr, lr, #15
 80283fe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028402:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028406:	fa5f f08e 	uxtb.w	r0, lr
 802840a:	9010      	str	r0, [sp, #64]	; 0x40
 802840c:	b1d9      	cbz	r1, 8028446 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802840e:	4443      	add	r3, r8
 8028410:	0858      	lsrs	r0, r3, #1
 8028412:	07dc      	lsls	r4, r3, #31
 8028414:	f103 0301 	add.w	r3, r3, #1
 8028418:	5c30      	ldrb	r0, [r6, r0]
 802841a:	bf54      	ite	pl
 802841c:	f000 000f 	andpl.w	r0, r0, #15
 8028420:	1100      	asrmi	r0, r0, #4
 8028422:	07dc      	lsls	r4, r3, #31
 8028424:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028428:	b2c0      	uxtb	r0, r0
 802842a:	900b      	str	r0, [sp, #44]	; 0x2c
 802842c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028430:	f816 e000 	ldrb.w	lr, [r6, r0]
 8028434:	bf54      	ite	pl
 8028436:	f00e 030f 	andpl.w	r3, lr, #15
 802843a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802843e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028442:	b2db      	uxtb	r3, r3
 8028444:	9311      	str	r3, [sp, #68]	; 0x44
 8028446:	b292      	uxth	r2, r2
 8028448:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802844a:	b289      	uxth	r1, r1
 802844c:	fb02 f301 	mul.w	r3, r2, r1
 8028450:	0112      	lsls	r2, r2, #4
 8028452:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028456:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802845a:	1ad2      	subs	r2, r2, r3
 802845c:	b289      	uxth	r1, r1
 802845e:	b292      	uxth	r2, r2
 8028460:	1a40      	subs	r0, r0, r1
 8028462:	4362      	muls	r2, r4
 8028464:	b280      	uxth	r0, r0
 8028466:	fb0c 2c00 	mla	ip, ip, r0, r2
 802846a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802846c:	fb01 c102 	mla	r1, r1, r2, ip
 8028470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028472:	fb03 1302 	mla	r3, r3, r2, r1
 8028476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028478:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802847c:	4353      	muls	r3, r2
 802847e:	1c5a      	adds	r2, r3, #1
 8028480:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028484:	4abf      	ldr	r2, [pc, #764]	; (8028784 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8028486:	121b      	asrs	r3, r3, #8
 8028488:	f892 9002 	ldrb.w	r9, [r2, #2]
 802848c:	7850      	ldrb	r0, [r2, #1]
 802848e:	2bff      	cmp	r3, #255	; 0xff
 8028490:	f892 c000 	ldrb.w	ip, [r2]
 8028494:	f040 8091 	bne.w	80285ba <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8028498:	f887 c000 	strb.w	ip, [r7]
 802849c:	7078      	strb	r0, [r7, #1]
 802849e:	f887 9002 	strb.w	r9, [r7, #2]
 80284a2:	70fb      	strb	r3, [r7, #3]
 80284a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80284a6:	3704      	adds	r7, #4
 80284a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80284ac:	449a      	add	sl, r3
 80284ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80284b0:	441d      	add	r5, r3
 80284b2:	e76c      	b.n	802838e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80284b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80284b6:	449a      	add	sl, r3
 80284b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80284ba:	441d      	add	r5, r3
 80284bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80284be:	3b01      	subs	r3, #1
 80284c0:	9309      	str	r3, [sp, #36]	; 0x24
 80284c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80284c4:	3304      	adds	r3, #4
 80284c6:	930a      	str	r3, [sp, #40]	; 0x28
 80284c8:	e740      	b.n	802834c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80284ca:	d026      	beq.n	802851a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80284cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80284ce:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80284d0:	3b01      	subs	r3, #1
 80284d2:	fb00 a003 	mla	r0, r0, r3, sl
 80284d6:	1400      	asrs	r0, r0, #16
 80284d8:	f53f af55 	bmi.w	8028386 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80284dc:	3901      	subs	r1, #1
 80284de:	4288      	cmp	r0, r1
 80284e0:	f6bf af51 	bge.w	8028386 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80284e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80284e6:	fb01 5303 	mla	r3, r1, r3, r5
 80284ea:	141b      	asrs	r3, r3, #16
 80284ec:	f53f af4b 	bmi.w	8028386 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80284f0:	3a01      	subs	r2, #1
 80284f2:	4293      	cmp	r3, r2
 80284f4:	f6bf af47 	bge.w	8028386 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80284f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80284fa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80284fe:	3304      	adds	r3, #4
 8028500:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8028504:	f1be 0f00 	cmp.w	lr, #0
 8028508:	f300 80a6 	bgt.w	8028658 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 802850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802850e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028518:	930a      	str	r3, [sp, #40]	; 0x28
 802851a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802851c:	2b00      	cmp	r3, #0
 802851e:	f340 8163 	ble.w	80287e8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8028522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028528:	ee30 0a04 	vadd.f32	s0, s0, s8
 802852c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028530:	eef0 6a62 	vmov.f32	s13, s5
 8028534:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028538:	ee31 1a05 	vadd.f32	s2, s2, s10
 802853c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028540:	ee16 aa90 	vmov	sl, s13
 8028544:	eef0 6a43 	vmov.f32	s13, s6
 8028548:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802854c:	ee16 5a90 	vmov	r5, s13
 8028550:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028554:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028558:	ee77 2a62 	vsub.f32	s5, s14, s5
 802855c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028560:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028564:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028568:	ee12 2a90 	vmov	r2, s5
 802856c:	eef0 2a47 	vmov.f32	s5, s14
 8028570:	fb92 f3f3 	sdiv	r3, r2, r3
 8028574:	ee13 2a10 	vmov	r2, s6
 8028578:	9323      	str	r3, [sp, #140]	; 0x8c
 802857a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802857c:	eeb0 3a67 	vmov.f32	s6, s15
 8028580:	fb92 f3f3 	sdiv	r3, r2, r3
 8028584:	9324      	str	r3, [sp, #144]	; 0x90
 8028586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802858a:	3b01      	subs	r3, #1
 802858c:	930d      	str	r3, [sp, #52]	; 0x34
 802858e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028590:	bf08      	it	eq
 8028592:	4613      	moveq	r3, r2
 8028594:	9309      	str	r3, [sp, #36]	; 0x24
 8028596:	e6cb      	b.n	8028330 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028598:	2900      	cmp	r1, #0
 802859a:	f43f af54 	beq.w	8028446 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802859e:	eb08 0003 	add.w	r0, r8, r3
 80285a2:	0843      	lsrs	r3, r0, #1
 80285a4:	07c0      	lsls	r0, r0, #31
 80285a6:	5cf3      	ldrb	r3, [r6, r3]
 80285a8:	bf54      	ite	pl
 80285aa:	f003 030f 	andpl.w	r3, r3, #15
 80285ae:	111b      	asrmi	r3, r3, #4
 80285b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80285b4:	b2db      	uxtb	r3, r3
 80285b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80285b8:	e745      	b.n	8028446 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80285ba:	b2da      	uxtb	r2, r3
 80285bc:	2b00      	cmp	r3, #0
 80285be:	f43f af71 	beq.w	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80285c2:	f897 e003 	ldrb.w	lr, [r7, #3]
 80285c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80285ca:	4358      	muls	r0, r3
 80285cc:	fb02 f10e 	mul.w	r1, r2, lr
 80285d0:	4472      	add	r2, lr
 80285d2:	fb03 f309 	mul.w	r3, r3, r9
 80285d6:	1c4c      	adds	r4, r1, #1
 80285d8:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80285dc:	1209      	asrs	r1, r1, #8
 80285de:	1a52      	subs	r2, r2, r1
 80285e0:	ebae 0101 	sub.w	r1, lr, r1
 80285e4:	f897 e000 	ldrb.w	lr, [r7]
 80285e8:	b2d2      	uxtb	r2, r2
 80285ea:	fb01 cc0e 	mla	ip, r1, lr, ip
 80285ee:	f897 e002 	ldrb.w	lr, [r7, #2]
 80285f2:	70fa      	strb	r2, [r7, #3]
 80285f4:	fb9c fcf2 	sdiv	ip, ip, r2
 80285f8:	f887 c000 	strb.w	ip, [r7]
 80285fc:	f897 c001 	ldrb.w	ip, [r7, #1]
 8028600:	fb01 000c 	mla	r0, r1, ip, r0
 8028604:	fb01 310e 	mla	r1, r1, lr, r3
 8028608:	fb90 f0f2 	sdiv	r0, r0, r2
 802860c:	fb91 f1f2 	sdiv	r1, r1, r2
 8028610:	7078      	strb	r0, [r7, #1]
 8028612:	70b9      	strb	r1, [r7, #2]
 8028614:	e746      	b.n	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028616:	f113 0901 	adds.w	r9, r3, #1
 802861a:	f53f af43 	bmi.w	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802861e:	45cc      	cmp	ip, r9
 8028620:	f6ff af40 	blt.w	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028624:	f110 0901 	adds.w	r9, r0, #1
 8028628:	f53f af3c 	bmi.w	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802862c:	45ce      	cmp	lr, r9
 802862e:	f6ff af39 	blt.w	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028632:	9302      	str	r3, [sp, #8]
 8028634:	fa0f f38e 	sxth.w	r3, lr
 8028638:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802863a:	9301      	str	r3, [sp, #4]
 802863c:	fa0f f38c 	sxth.w	r3, ip
 8028640:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028644:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028648:	9300      	str	r3, [sp, #0]
 802864a:	4632      	mov	r2, r6
 802864c:	4643      	mov	r3, r8
 802864e:	4639      	mov	r1, r7
 8028650:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028652:	f7ff fd77 	bl	8028144 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8028656:	e725      	b.n	80284a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028658:	ea4f 412a 	mov.w	r1, sl, asr #16
 802865c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8028660:	142a      	asrs	r2, r5, #16
 8028662:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8028666:	fb08 1202 	mla	r2, r8, r2, r1
 802866a:	0851      	lsrs	r1, r2, #1
 802866c:	07d4      	lsls	r4, r2, #31
 802866e:	5c71      	ldrb	r1, [r6, r1]
 8028670:	bf54      	ite	pl
 8028672:	f001 010f 	andpl.w	r1, r1, #15
 8028676:	1109      	asrmi	r1, r1, #4
 8028678:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802867c:	b2c9      	uxtb	r1, r1
 802867e:	2800      	cmp	r0, #0
 8028680:	d06d      	beq.n	802875e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8028682:	f102 0901 	add.w	r9, r2, #1
 8028686:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 802868a:	f019 0f01 	tst.w	r9, #1
 802868e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028692:	bf0c      	ite	eq
 8028694:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028698:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802869c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80286a0:	fa5f f48c 	uxtb.w	r4, ip
 80286a4:	9412      	str	r4, [sp, #72]	; 0x48
 80286a6:	b307      	cbz	r7, 80286ea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80286a8:	4442      	add	r2, r8
 80286aa:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80286ae:	07d4      	lsls	r4, r2, #31
 80286b0:	f102 0201 	add.w	r2, r2, #1
 80286b4:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80286b8:	bf54      	ite	pl
 80286ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80286be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80286c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80286c6:	fa5f f48c 	uxtb.w	r4, ip
 80286ca:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80286ce:	940c      	str	r4, [sp, #48]	; 0x30
 80286d0:	07d4      	lsls	r4, r2, #31
 80286d2:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80286d6:	bf54      	ite	pl
 80286d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80286dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80286e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80286e4:	fa5f f28c 	uxtb.w	r2, ip
 80286e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80286ea:	b280      	uxth	r0, r0
 80286ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80286ee:	b2bf      	uxth	r7, r7
 80286f0:	fb00 f207 	mul.w	r2, r0, r7
 80286f4:	0100      	lsls	r0, r0, #4
 80286f6:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 80286fa:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80286fe:	1a80      	subs	r0, r0, r2
 8028700:	b2bf      	uxth	r7, r7
 8028702:	b280      	uxth	r0, r0
 8028704:	ebac 0c07 	sub.w	ip, ip, r7
 8028708:	4360      	muls	r0, r4
 802870a:	fa1f fc8c 	uxth.w	ip, ip
 802870e:	fb01 010c 	mla	r1, r1, ip, r0
 8028712:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028714:	fb07 1700 	mla	r7, r7, r0, r1
 8028718:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802871a:	fb02 7201 	mla	r2, r2, r1, r7
 802871e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028720:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028724:	434a      	muls	r2, r1
 8028726:	1c51      	adds	r1, r2, #1
 8028728:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802872c:	4915      	ldr	r1, [pc, #84]	; (8028784 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802872e:	1212      	asrs	r2, r2, #8
 8028730:	7888      	ldrb	r0, [r1, #2]
 8028732:	784f      	ldrb	r7, [r1, #1]
 8028734:	2aff      	cmp	r2, #255	; 0xff
 8028736:	4604      	mov	r4, r0
 8028738:	f891 c000 	ldrb.w	ip, [r1]
 802873c:	d124      	bne.n	8028788 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802873e:	f803 cc04 	strb.w	ip, [r3, #-4]
 8028742:	f803 7c03 	strb.w	r7, [r3, #-3]
 8028746:	f803 0c02 	strb.w	r0, [r3, #-2]
 802874a:	f803 2c01 	strb.w	r2, [r3, #-1]
 802874e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8028750:	3304      	adds	r3, #4
 8028752:	f10e 3eff 	add.w	lr, lr, #4294967295
 8028756:	4492      	add	sl, r2
 8028758:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802875a:	4415      	add	r5, r2
 802875c:	e6d2      	b.n	8028504 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802875e:	2f00      	cmp	r7, #0
 8028760:	d0c3      	beq.n	80286ea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028762:	4442      	add	r2, r8
 8028764:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028768:	07d2      	lsls	r2, r2, #31
 802876a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802876e:	bf54      	ite	pl
 8028770:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028774:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028778:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802877c:	fa5f f28c 	uxtb.w	r2, ip
 8028780:	920c      	str	r2, [sp, #48]	; 0x30
 8028782:	e7b2      	b.n	80286ea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028784:	2003c27c 	.word	0x2003c27c
 8028788:	b2d1      	uxtb	r1, r2
 802878a:	2a00      	cmp	r2, #0
 802878c:	d0df      	beq.n	802874e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802878e:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8028792:	fb02 fc0c 	mul.w	ip, r2, ip
 8028796:	4357      	muls	r7, r2
 8028798:	fb01 fb09 	mul.w	fp, r1, r9
 802879c:	4449      	add	r1, r9
 802879e:	4362      	muls	r2, r4
 80287a0:	f10b 0001 	add.w	r0, fp, #1
 80287a4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80287a8:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 80287ac:	1200      	asrs	r0, r0, #8
 80287ae:	1a09      	subs	r1, r1, r0
 80287b0:	eba9 0000 	sub.w	r0, r9, r0
 80287b4:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 80287b8:	b2c9      	uxtb	r1, r1
 80287ba:	fb00 cc0b 	mla	ip, r0, fp, ip
 80287be:	fb9c fcf1 	sdiv	ip, ip, r1
 80287c2:	f803 cc04 	strb.w	ip, [r3, #-4]
 80287c6:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 80287ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80287ce:	fb00 770c 	mla	r7, r0, ip, r7
 80287d2:	fb00 2009 	mla	r0, r0, r9, r2
 80287d6:	fb97 f7f1 	sdiv	r7, r7, r1
 80287da:	fb90 f0f1 	sdiv	r0, r0, r1
 80287de:	f803 7c03 	strb.w	r7, [r3, #-3]
 80287e2:	f803 0c02 	strb.w	r0, [r3, #-2]
 80287e6:	e7b2      	b.n	802874e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 80287e8:	b017      	add	sp, #92	; 0x5c
 80287ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287ee:	bf00      	nop

080287f0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 80287f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287f4:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	; 0x2c
 80287f8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80287fc:	2800      	cmp	r0, #0
 80287fe:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028802:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8028806:	fb0c 0e03 	mla	lr, ip, r3, r0
 802880a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802880e:	f2c0 8088 	blt.w	8028922 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028812:	4581      	cmp	r9, r0
 8028814:	f340 8085 	ble.w	8028922 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028818:	f1bc 0f00 	cmp.w	ip, #0
 802881c:	f2c0 8081 	blt.w	8028922 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028820:	45e0      	cmp	r8, ip
 8028822:	dd7e      	ble.n	8028922 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028824:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028828:	f01e 0f01 	tst.w	lr, #1
 802882c:	5d15      	ldrb	r5, [r2, r4]
 802882e:	bf0c      	ite	eq
 8028830:	f005 050f 	andeq.w	r5, r5, #15
 8028834:	112d      	asrne	r5, r5, #4
 8028836:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802883a:	b2ed      	uxtb	r5, r5
 802883c:	f110 0a01 	adds.w	sl, r0, #1
 8028840:	d471      	bmi.n	8028926 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028842:	45d1      	cmp	r9, sl
 8028844:	dd6f      	ble.n	8028926 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028846:	f1bc 0f00 	cmp.w	ip, #0
 802884a:	db6c      	blt.n	8028926 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802884c:	45e0      	cmp	r8, ip
 802884e:	dd6a      	ble.n	8028926 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028850:	2e00      	cmp	r6, #0
 8028852:	d06a      	beq.n	802892a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 8028854:	f10e 0b01 	add.w	fp, lr, #1
 8028858:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802885c:	f01b 0f01 	tst.w	fp, #1
 8028860:	5d14      	ldrb	r4, [r2, r4]
 8028862:	bf0c      	ite	eq
 8028864:	f004 040f 	andeq.w	r4, r4, #15
 8028868:	1124      	asrne	r4, r4, #4
 802886a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802886e:	b2e4      	uxtb	r4, r4
 8028870:	2f00      	cmp	r7, #0
 8028872:	d05e      	beq.n	8028932 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 8028874:	2800      	cmp	r0, #0
 8028876:	f10c 0c01 	add.w	ip, ip, #1
 802887a:	db58      	blt.n	802892e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802887c:	4581      	cmp	r9, r0
 802887e:	dd56      	ble.n	802892e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028880:	f1bc 0f00 	cmp.w	ip, #0
 8028884:	db53      	blt.n	802892e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028886:	45e0      	cmp	r8, ip
 8028888:	dd51      	ble.n	802892e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802888a:	eb03 0b0e 	add.w	fp, r3, lr
 802888e:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028892:	f01b 0f01 	tst.w	fp, #1
 8028896:	5c10      	ldrb	r0, [r2, r0]
 8028898:	bf0c      	ite	eq
 802889a:	f000 000f 	andeq.w	r0, r0, #15
 802889e:	1100      	asrne	r0, r0, #4
 80288a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80288a4:	b2c0      	uxtb	r0, r0
 80288a6:	f1ba 0f00 	cmp.w	sl, #0
 80288aa:	db45      	blt.n	8028938 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80288ac:	45d1      	cmp	r9, sl
 80288ae:	dd43      	ble.n	8028938 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80288b0:	f1bc 0f00 	cmp.w	ip, #0
 80288b4:	db40      	blt.n	8028938 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80288b6:	45e0      	cmp	r8, ip
 80288b8:	dd3e      	ble.n	8028938 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80288ba:	2e00      	cmp	r6, #0
 80288bc:	d03e      	beq.n	802893c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 80288be:	3301      	adds	r3, #1
 80288c0:	449e      	add	lr, r3
 80288c2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80288c6:	f01e 0f01 	tst.w	lr, #1
 80288ca:	5cd3      	ldrb	r3, [r2, r3]
 80288cc:	bf0c      	ite	eq
 80288ce:	f003 030f 	andeq.w	r3, r3, #15
 80288d2:	111b      	asrne	r3, r3, #4
 80288d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80288d8:	b2db      	uxtb	r3, r3
 80288da:	b2b2      	uxth	r2, r6
 80288dc:	b2bf      	uxth	r7, r7
 80288de:	fb02 f607 	mul.w	r6, r2, r7
 80288e2:	0112      	lsls	r2, r2, #4
 80288e4:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 80288e8:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80288ec:	1b92      	subs	r2, r2, r6
 80288ee:	b2bf      	uxth	r7, r7
 80288f0:	b292      	uxth	r2, r2
 80288f2:	ebac 0c07 	sub.w	ip, ip, r7
 80288f6:	4362      	muls	r2, r4
 80288f8:	fa1f fc8c 	uxth.w	ip, ip
 80288fc:	fb05 220c 	mla	r2, r5, ip, r2
 8028900:	fb07 2000 	mla	r0, r7, r0, r2
 8028904:	4a22      	ldr	r2, [pc, #136]	; (8028990 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 8028906:	fb06 0303 	mla	r3, r6, r3, r0
 802890a:	7817      	ldrb	r7, [r2, #0]
 802890c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028910:	2bff      	cmp	r3, #255	; 0xff
 8028912:	d115      	bne.n	8028940 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 8028914:	700f      	strb	r7, [r1, #0]
 8028916:	7853      	ldrb	r3, [r2, #1]
 8028918:	704b      	strb	r3, [r1, #1]
 802891a:	7893      	ldrb	r3, [r2, #2]
 802891c:	708b      	strb	r3, [r1, #2]
 802891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028922:	2500      	movs	r5, #0
 8028924:	e78a      	b.n	802883c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 8028926:	2400      	movs	r4, #0
 8028928:	e7a2      	b.n	8028870 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802892a:	4634      	mov	r4, r6
 802892c:	e7a0      	b.n	8028870 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802892e:	2000      	movs	r0, #0
 8028930:	e7b9      	b.n	80288a6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 8028932:	463b      	mov	r3, r7
 8028934:	4638      	mov	r0, r7
 8028936:	e7d0      	b.n	80288da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028938:	2300      	movs	r3, #0
 802893a:	e7ce      	b.n	80288da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802893c:	4633      	mov	r3, r6
 802893e:	e7cc      	b.n	80288da <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028940:	2b00      	cmp	r3, #0
 8028942:	d0ec      	beq.n	802891e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028944:	78cc      	ldrb	r4, [r1, #3]
 8028946:	435f      	muls	r7, r3
 8028948:	7896      	ldrb	r6, [r2, #2]
 802894a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802894e:	fb03 f204 	mul.w	r2, r3, r4
 8028952:	780d      	ldrb	r5, [r1, #0]
 8028954:	1c50      	adds	r0, r2, #1
 8028956:	fb03 fc0c 	mul.w	ip, r3, ip
 802895a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802895e:	191a      	adds	r2, r3, r4
 8028960:	4373      	muls	r3, r6
 8028962:	1200      	asrs	r0, r0, #8
 8028964:	1a12      	subs	r2, r2, r0
 8028966:	1a20      	subs	r0, r4, r0
 8028968:	784c      	ldrb	r4, [r1, #1]
 802896a:	b2d2      	uxtb	r2, r2
 802896c:	fb00 7505 	mla	r5, r0, r5, r7
 8028970:	fb00 c404 	mla	r4, r0, r4, ip
 8028974:	70ca      	strb	r2, [r1, #3]
 8028976:	fb94 f4f2 	sdiv	r4, r4, r2
 802897a:	704c      	strb	r4, [r1, #1]
 802897c:	788c      	ldrb	r4, [r1, #2]
 802897e:	fb00 3304 	mla	r3, r0, r4, r3
 8028982:	fb95 f5f2 	sdiv	r5, r5, r2
 8028986:	fb93 f3f2 	sdiv	r3, r3, r2
 802898a:	700d      	strb	r5, [r1, #0]
 802898c:	708b      	strb	r3, [r1, #2]
 802898e:	e7c6      	b.n	802891e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028990:	2003c27c 	.word	0x2003c27c

08028994 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028998:	b095      	sub	sp, #84	; 0x54
 802899a:	461c      	mov	r4, r3
 802899c:	4fc4      	ldr	r7, [pc, #784]	; (8028cb0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 802899e:	920d      	str	r2, [sp, #52]	; 0x34
 80289a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80289a2:	9013      	str	r0, [sp, #76]	; 0x4c
 80289a4:	9108      	str	r1, [sp, #32]
 80289a6:	6850      	ldr	r0, [r2, #4]
 80289a8:	6812      	ldr	r2, [r2, #0]
 80289aa:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80289ae:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	; 0x7c
 80289b2:	fb00 1303 	mla	r3, r0, r3, r1
 80289b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80289ba:	9307      	str	r3, [sp, #28]
 80289bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80289be:	689b      	ldr	r3, [r3, #8]
 80289c0:	3301      	adds	r3, #1
 80289c2:	f023 0301 	bic.w	r3, r3, #1
 80289c6:	930a      	str	r3, [sp, #40]	; 0x28
 80289c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80289ca:	681e      	ldr	r6, [r3, #0]
 80289cc:	9b08      	ldr	r3, [sp, #32]
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	dc03      	bgt.n	80289da <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80289d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	f340 824e 	ble.w	8028e76 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80289da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80289dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80289e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80289e4:	1e48      	subs	r0, r1, #1
 80289e6:	f102 3cff 	add.w	ip, r2, #4294967295
 80289ea:	2c00      	cmp	r4, #0
 80289ec:	f340 80b3 	ble.w	8028b56 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80289f0:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 80289f4:	ea4f 4325 	mov.w	r3, r5, asr #16
 80289f8:	d406      	bmi.n	8028a08 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80289fa:	4586      	cmp	lr, r0
 80289fc:	da04      	bge.n	8028a08 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	db02      	blt.n	8028a08 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028a02:	4563      	cmp	r3, ip
 8028a04:	f2c0 80a8 	blt.w	8028b58 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8028a08:	f11e 0e01 	adds.w	lr, lr, #1
 8028a0c:	f100 809a 	bmi.w	8028b44 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028a10:	4571      	cmp	r1, lr
 8028a12:	f2c0 8097 	blt.w	8028b44 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028a16:	3301      	adds	r3, #1
 8028a18:	f100 8094 	bmi.w	8028b44 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028a1c:	429a      	cmp	r2, r3
 8028a1e:	f2c0 8091 	blt.w	8028b44 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028a22:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028a26:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8028a2a:	9409      	str	r4, [sp, #36]	; 0x24
 8028a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	f340 80b0 	ble.w	8028b94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028a34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028a36:	1428      	asrs	r0, r5, #16
 8028a38:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8028a3c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028a40:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028a44:	ea5f 432b 	movs.w	r3, fp, asr #16
 8028a48:	f100 8134 	bmi.w	8028cb4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028a4c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8028a50:	4553      	cmp	r3, sl
 8028a52:	f280 812f 	bge.w	8028cb4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028a56:	2800      	cmp	r0, #0
 8028a58:	f2c0 812c 	blt.w	8028cb4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028a5c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028a60:	4550      	cmp	r0, sl
 8028a62:	f280 8127 	bge.w	8028cb4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028a66:	fb00 3309 	mla	r3, r0, r9, r3
 8028a6a:	0858      	lsrs	r0, r3, #1
 8028a6c:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028a70:	07d8      	lsls	r0, r3, #31
 8028a72:	bf54      	ite	pl
 8028a74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028a78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028a7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a80:	fa5f fc8c 	uxtb.w	ip, ip
 8028a84:	2a00      	cmp	r2, #0
 8028a86:	f000 80cb 	beq.w	8028c20 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028a8a:	1c58      	adds	r0, r3, #1
 8028a8c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028a90:	07c0      	lsls	r0, r0, #31
 8028a92:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028a96:	bf54      	ite	pl
 8028a98:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028a9c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028aa0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028aa4:	fa5f fe8e 	uxtb.w	lr, lr
 8028aa8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8028aac:	b1c1      	cbz	r1, 8028ae0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028aae:	444b      	add	r3, r9
 8028ab0:	0858      	lsrs	r0, r3, #1
 8028ab2:	f013 0f01 	tst.w	r3, #1
 8028ab6:	5c30      	ldrb	r0, [r6, r0]
 8028ab8:	bf0c      	ite	eq
 8028aba:	f000 000f 	andeq.w	r0, r0, #15
 8028abe:	1100      	asrne	r0, r0, #4
 8028ac0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028ac4:	b2c0      	uxtb	r0, r0
 8028ac6:	900b      	str	r0, [sp, #44]	; 0x2c
 8028ac8:	1c58      	adds	r0, r3, #1
 8028aca:	0843      	lsrs	r3, r0, #1
 8028acc:	07c0      	lsls	r0, r0, #31
 8028ace:	5cf3      	ldrb	r3, [r6, r3]
 8028ad0:	bf54      	ite	pl
 8028ad2:	f003 030f 	andpl.w	r3, r3, #15
 8028ad6:	111b      	asrmi	r3, r3, #4
 8028ad8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028adc:	b2db      	uxtb	r3, r3
 8028ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8028ae0:	b292      	uxth	r2, r2
 8028ae2:	b289      	uxth	r1, r1
 8028ae4:	fb02 f301 	mul.w	r3, r2, r1
 8028ae8:	0112      	lsls	r2, r2, #4
 8028aea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028aee:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028af2:	1ad2      	subs	r2, r2, r3
 8028af4:	b289      	uxth	r1, r1
 8028af6:	b292      	uxth	r2, r2
 8028af8:	1a40      	subs	r0, r0, r1
 8028afa:	fa1f fe80 	uxth.w	lr, r0
 8028afe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028b00:	4342      	muls	r2, r0
 8028b02:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028b08:	fb01 c102 	mla	r1, r1, r2, ip
 8028b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028b0e:	f897 c000 	ldrb.w	ip, [r7]
 8028b12:	fb03 1302 	mla	r3, r3, r2, r1
 8028b16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028b1a:	2bff      	cmp	r3, #255	; 0xff
 8028b1c:	f040 8091 	bne.w	8028c42 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028b20:	f888 c000 	strb.w	ip, [r8]
 8028b24:	787b      	ldrb	r3, [r7, #1]
 8028b26:	f888 3001 	strb.w	r3, [r8, #1]
 8028b2a:	78bb      	ldrb	r3, [r7, #2]
 8028b2c:	f888 3002 	strb.w	r3, [r8, #2]
 8028b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028b32:	f108 0804 	add.w	r8, r8, #4
 8028b36:	449b      	add	fp, r3
 8028b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8028b3a:	441d      	add	r5, r3
 8028b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b3e:	3b01      	subs	r3, #1
 8028b40:	9309      	str	r3, [sp, #36]	; 0x24
 8028b42:	e773      	b.n	8028a2c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028b46:	3c01      	subs	r4, #1
 8028b48:	449b      	add	fp, r3
 8028b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8028b4c:	441d      	add	r5, r3
 8028b4e:	9b07      	ldr	r3, [sp, #28]
 8028b50:	3304      	adds	r3, #4
 8028b52:	9307      	str	r3, [sp, #28]
 8028b54:	e749      	b.n	80289ea <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028b56:	d023      	beq.n	8028ba0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028b58:	1e63      	subs	r3, r4, #1
 8028b5a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8028b5c:	fb00 b003 	mla	r0, r0, r3, fp
 8028b60:	1400      	asrs	r0, r0, #16
 8028b62:	f53f af5e 	bmi.w	8028a22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b66:	3901      	subs	r1, #1
 8028b68:	4288      	cmp	r0, r1
 8028b6a:	f6bf af5a 	bge.w	8028a22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b6e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8028b70:	fb01 5303 	mla	r3, r1, r3, r5
 8028b74:	141b      	asrs	r3, r3, #16
 8028b76:	f53f af54 	bmi.w	8028a22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b7a:	3a01      	subs	r2, #1
 8028b7c:	4293      	cmp	r3, r2
 8028b7e:	f6bf af50 	bge.w	8028a22 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b82:	9b07      	ldr	r3, [sp, #28]
 8028b84:	46a0      	mov	r8, r4
 8028b86:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8028b8a:	1d1a      	adds	r2, r3, #4
 8028b8c:	f1b8 0f00 	cmp.w	r8, #0
 8028b90:	f300 80af 	bgt.w	8028cf2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028b94:	9b07      	ldr	r3, [sp, #28]
 8028b96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8028b9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028b9e:	9307      	str	r3, [sp, #28]
 8028ba0:	9b08      	ldr	r3, [sp, #32]
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	f340 8167 	ble.w	8028e76 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028bae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028bb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028bb6:	eef0 6a62 	vmov.f32	s13, s5
 8028bba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028bbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028bc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028bc6:	ee16 ba90 	vmov	fp, s13
 8028bca:	eef0 6a43 	vmov.f32	s13, s6
 8028bce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028bd2:	ee16 5a90 	vmov	r5, s13
 8028bd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028bda:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028bde:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028be2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028be6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028bea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028bee:	ee12 2a90 	vmov	r2, s5
 8028bf2:	eef0 2a47 	vmov.f32	s5, s14
 8028bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028bfa:	ee13 2a10 	vmov	r2, s6
 8028bfe:	9321      	str	r3, [sp, #132]	; 0x84
 8028c00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028c02:	eeb0 3a67 	vmov.f32	s6, s15
 8028c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c0a:	9322      	str	r3, [sp, #136]	; 0x88
 8028c0c:	9b08      	ldr	r3, [sp, #32]
 8028c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028c10:	3b01      	subs	r3, #1
 8028c12:	9308      	str	r3, [sp, #32]
 8028c14:	bf08      	it	eq
 8028c16:	4614      	moveq	r4, r2
 8028c18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028c1a:	bf18      	it	ne
 8028c1c:	461c      	movne	r4, r3
 8028c1e:	e6d5      	b.n	80289cc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028c20:	2900      	cmp	r1, #0
 8028c22:	f43f af5d 	beq.w	8028ae0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028c26:	eb09 0003 	add.w	r0, r9, r3
 8028c2a:	0843      	lsrs	r3, r0, #1
 8028c2c:	07c0      	lsls	r0, r0, #31
 8028c2e:	5cf3      	ldrb	r3, [r6, r3]
 8028c30:	bf54      	ite	pl
 8028c32:	f003 030f 	andpl.w	r3, r3, #15
 8028c36:	111b      	asrmi	r3, r3, #4
 8028c38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c3c:	b2db      	uxtb	r3, r3
 8028c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028c40:	e74e      	b.n	8028ae0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	f43f af74 	beq.w	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028c48:	f898 a003 	ldrb.w	sl, [r8, #3]
 8028c4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8028c50:	78ba      	ldrb	r2, [r7, #2]
 8028c52:	fb03 f00a 	mul.w	r0, r3, sl
 8028c56:	f897 e001 	ldrb.w	lr, [r7, #1]
 8028c5a:	9210      	str	r2, [sp, #64]	; 0x40
 8028c5c:	eb03 020a 	add.w	r2, r3, sl
 8028c60:	1c41      	adds	r1, r0, #1
 8028c62:	fb03 fe0e 	mul.w	lr, r3, lr
 8028c66:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028c6a:	1208      	asrs	r0, r1, #8
 8028c6c:	ebaa 0100 	sub.w	r1, sl, r0
 8028c70:	1a12      	subs	r2, r2, r0
 8028c72:	f898 0000 	ldrb.w	r0, [r8]
 8028c76:	b2d2      	uxtb	r2, r2
 8028c78:	fb01 cc00 	mla	ip, r1, r0, ip
 8028c7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8028c80:	f888 2003 	strb.w	r2, [r8, #3]
 8028c84:	fb01 ee00 	mla	lr, r1, r0, lr
 8028c88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8028c8a:	fb9c fcf2 	sdiv	ip, ip, r2
 8028c8e:	4343      	muls	r3, r0
 8028c90:	f888 c000 	strb.w	ip, [r8]
 8028c94:	f898 c002 	ldrb.w	ip, [r8, #2]
 8028c98:	fb01 330c 	mla	r3, r1, ip, r3
 8028c9c:	fb9e fef2 	sdiv	lr, lr, r2
 8028ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8028ca4:	f888 e001 	strb.w	lr, [r8, #1]
 8028ca8:	f888 3002 	strb.w	r3, [r8, #2]
 8028cac:	e740      	b.n	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cae:	bf00      	nop
 8028cb0:	2003c27c 	.word	0x2003c27c
 8028cb4:	f113 0a01 	adds.w	sl, r3, #1
 8028cb8:	f53f af3a 	bmi.w	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cbc:	45d4      	cmp	ip, sl
 8028cbe:	f6ff af37 	blt.w	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cc2:	f110 0a01 	adds.w	sl, r0, #1
 8028cc6:	f53f af33 	bmi.w	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cca:	45d6      	cmp	lr, sl
 8028ccc:	f6ff af30 	blt.w	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cd0:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8028cd4:	fa0f f38e 	sxth.w	r3, lr
 8028cd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028cda:	9301      	str	r3, [sp, #4]
 8028cdc:	fa0f f38c 	sxth.w	r3, ip
 8028ce0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8028ce4:	9300      	str	r3, [sp, #0]
 8028ce6:	4632      	mov	r2, r6
 8028ce8:	464b      	mov	r3, r9
 8028cea:	4641      	mov	r1, r8
 8028cec:	f7ff fd80 	bl	80287f0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 8028cf0:	e71e      	b.n	8028b30 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028cf2:	ea4f 412b 	mov.w	r1, fp, asr #16
 8028cf6:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 8028cfa:	142b      	asrs	r3, r5, #16
 8028cfc:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 8028d00:	fb09 1303 	mla	r3, r9, r3, r1
 8028d04:	0859      	lsrs	r1, r3, #1
 8028d06:	07d8      	lsls	r0, r3, #31
 8028d08:	5c71      	ldrb	r1, [r6, r1]
 8028d0a:	bf54      	ite	pl
 8028d0c:	f001 010f 	andpl.w	r1, r1, #15
 8028d10:	1109      	asrmi	r1, r1, #4
 8028d12:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028d16:	b2c9      	uxtb	r1, r1
 8028d18:	f1bc 0f00 	cmp.w	ip, #0
 8028d1c:	d062      	beq.n	8028de4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028d1e:	f103 0a01 	add.w	sl, r3, #1
 8028d22:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028d26:	f01a 0f01 	tst.w	sl, #1
 8028d2a:	5c30      	ldrb	r0, [r6, r0]
 8028d2c:	bf0c      	ite	eq
 8028d2e:	f000 000f 	andeq.w	r0, r0, #15
 8028d32:	1100      	asrne	r0, r0, #4
 8028d34:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028d38:	b2c0      	uxtb	r0, r0
 8028d3a:	9011      	str	r0, [sp, #68]	; 0x44
 8028d3c:	f1be 0f00 	cmp.w	lr, #0
 8028d40:	d019      	beq.n	8028d76 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028d42:	444b      	add	r3, r9
 8028d44:	0858      	lsrs	r0, r3, #1
 8028d46:	f013 0f01 	tst.w	r3, #1
 8028d4a:	f103 0301 	add.w	r3, r3, #1
 8028d4e:	5c30      	ldrb	r0, [r6, r0]
 8028d50:	bf0c      	ite	eq
 8028d52:	f000 000f 	andeq.w	r0, r0, #15
 8028d56:	1100      	asrne	r0, r0, #4
 8028d58:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028d5c:	b2c0      	uxtb	r0, r0
 8028d5e:	900c      	str	r0, [sp, #48]	; 0x30
 8028d60:	0858      	lsrs	r0, r3, #1
 8028d62:	07db      	lsls	r3, r3, #31
 8028d64:	5c30      	ldrb	r0, [r6, r0]
 8028d66:	bf54      	ite	pl
 8028d68:	f000 000f 	andpl.w	r0, r0, #15
 8028d6c:	1100      	asrmi	r0, r0, #4
 8028d6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028d72:	b2c0      	uxtb	r0, r0
 8028d74:	9012      	str	r0, [sp, #72]	; 0x48
 8028d76:	fa1f fc8c 	uxth.w	ip, ip
 8028d7a:	fa1f fe8e 	uxth.w	lr, lr
 8028d7e:	fb0c f30e 	mul.w	r3, ip, lr
 8028d82:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028d86:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 8028d8a:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 8028d8e:	ebac 0c03 	sub.w	ip, ip, r3
 8028d92:	fa1f fe8e 	uxth.w	lr, lr
 8028d96:	fa1f fc8c 	uxth.w	ip, ip
 8028d9a:	eba0 000e 	sub.w	r0, r0, lr
 8028d9e:	fa1f fa80 	uxth.w	sl, r0
 8028da2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028da4:	fb00 fc0c 	mul.w	ip, r0, ip
 8028da8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028daa:	fb01 c10a 	mla	r1, r1, sl, ip
 8028dae:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028db2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028db4:	fb03 e301 	mla	r3, r3, r1, lr
 8028db8:	f897 e000 	ldrb.w	lr, [r7]
 8028dbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028dc0:	2bff      	cmp	r3, #255	; 0xff
 8028dc2:	d11f      	bne.n	8028e04 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8028dc4:	f802 ec04 	strb.w	lr, [r2, #-4]
 8028dc8:	787b      	ldrb	r3, [r7, #1]
 8028dca:	f802 3c03 	strb.w	r3, [r2, #-3]
 8028dce:	78bb      	ldrb	r3, [r7, #2]
 8028dd0:	f802 3c02 	strb.w	r3, [r2, #-2]
 8028dd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028dd6:	3204      	adds	r2, #4
 8028dd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8028ddc:	449b      	add	fp, r3
 8028dde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8028de0:	441d      	add	r5, r3
 8028de2:	e6d3      	b.n	8028b8c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8028de4:	f1be 0f00 	cmp.w	lr, #0
 8028de8:	d0c5      	beq.n	8028d76 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028dea:	444b      	add	r3, r9
 8028dec:	0858      	lsrs	r0, r3, #1
 8028dee:	07db      	lsls	r3, r3, #31
 8028df0:	5c30      	ldrb	r0, [r6, r0]
 8028df2:	bf54      	ite	pl
 8028df4:	f000 000f 	andpl.w	r0, r0, #15
 8028df8:	1100      	asrmi	r0, r0, #4
 8028dfa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028dfe:	b2c0      	uxtb	r0, r0
 8028e00:	900c      	str	r0, [sp, #48]	; 0x30
 8028e02:	e7b8      	b.n	8028d76 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028e04:	2b00      	cmp	r3, #0
 8028e06:	d0e5      	beq.n	8028dd4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028e08:	78b9      	ldrb	r1, [r7, #2]
 8028e0a:	fb03 fe0e 	mul.w	lr, r3, lr
 8028e0e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8028e12:	9110      	str	r1, [sp, #64]	; 0x40
 8028e14:	fb03 f100 	mul.w	r1, r3, r0
 8028e18:	f897 a001 	ldrb.w	sl, [r7, #1]
 8028e1c:	f101 0c01 	add.w	ip, r1, #1
 8028e20:	fb03 fa0a 	mul.w	sl, r3, sl
 8028e24:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028e28:	1819      	adds	r1, r3, r0
 8028e2a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8028e2e:	eba0 000c 	sub.w	r0, r0, ip
 8028e32:	eba1 010c 	sub.w	r1, r1, ip
 8028e36:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 8028e3a:	9009      	str	r0, [sp, #36]	; 0x24
 8028e3c:	b2c9      	uxtb	r1, r1
 8028e3e:	fb00 ee0c 	mla	lr, r0, ip, lr
 8028e42:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8028e46:	f802 1c01 	strb.w	r1, [r2, #-1]
 8028e4a:	fb00 aa0c 	mla	sl, r0, ip, sl
 8028e4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8028e50:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8028e54:	4343      	muls	r3, r0
 8028e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028e58:	fb00 330c 	mla	r3, r0, ip, r3
 8028e5c:	fb9e fef1 	sdiv	lr, lr, r1
 8028e60:	fb9a faf1 	sdiv	sl, sl, r1
 8028e64:	fb93 f3f1 	sdiv	r3, r3, r1
 8028e68:	f802 ec04 	strb.w	lr, [r2, #-4]
 8028e6c:	f802 ac03 	strb.w	sl, [r2, #-3]
 8028e70:	f802 3c02 	strb.w	r3, [r2, #-2]
 8028e74:	e7ae      	b.n	8028dd4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028e76:	b015      	add	sp, #84	; 0x54
 8028e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028e7c <CRC_Lock>:
 8028e7c:	4a20      	ldr	r2, [pc, #128]	; (8028f00 <CRC_Lock+0x84>)
 8028e7e:	b530      	push	{r4, r5, lr}
 8028e80:	6813      	ldr	r3, [r2, #0]
 8028e82:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028e86:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028e8a:	f023 0301 	bic.w	r3, r3, #1
 8028e8e:	6013      	str	r3, [r2, #0]
 8028e90:	4b1c      	ldr	r3, [pc, #112]	; (8028f04 <CRC_Lock+0x88>)
 8028e92:	681a      	ldr	r2, [r3, #0]
 8028e94:	4022      	ands	r2, r4
 8028e96:	42aa      	cmp	r2, r5
 8028e98:	d005      	beq.n	8028ea6 <CRC_Lock+0x2a>
 8028e9a:	681b      	ldr	r3, [r3, #0]
 8028e9c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028ea0:	4023      	ands	r3, r4
 8028ea2:	4293      	cmp	r3, r2
 8028ea4:	d124      	bne.n	8028ef0 <CRC_Lock+0x74>
 8028ea6:	4b18      	ldr	r3, [pc, #96]	; (8028f08 <CRC_Lock+0x8c>)
 8028ea8:	681b      	ldr	r3, [r3, #0]
 8028eaa:	bb0b      	cbnz	r3, 8028ef0 <CRC_Lock+0x74>
 8028eac:	4b17      	ldr	r3, [pc, #92]	; (8028f0c <CRC_Lock+0x90>)
 8028eae:	681a      	ldr	r2, [r3, #0]
 8028eb0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028eb4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8028eb8:	d00d      	beq.n	8028ed6 <CRC_Lock+0x5a>
 8028eba:	681a      	ldr	r2, [r3, #0]
 8028ebc:	f240 4483 	movw	r4, #1155	; 0x483
 8028ec0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028ec4:	42a2      	cmp	r2, r4
 8028ec6:	d006      	beq.n	8028ed6 <CRC_Lock+0x5a>
 8028ec8:	681b      	ldr	r3, [r3, #0]
 8028eca:	f240 4285 	movw	r2, #1157	; 0x485
 8028ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028ed2:	4293      	cmp	r3, r2
 8028ed4:	d10c      	bne.n	8028ef0 <CRC_Lock+0x74>
 8028ed6:	4b0e      	ldr	r3, [pc, #56]	; (8028f10 <CRC_Lock+0x94>)
 8028ed8:	2201      	movs	r2, #1
 8028eda:	601a      	str	r2, [r3, #0]
 8028edc:	681a      	ldr	r2, [r3, #0]
 8028ede:	2a00      	cmp	r2, #0
 8028ee0:	d1fc      	bne.n	8028edc <CRC_Lock+0x60>
 8028ee2:	4b0c      	ldr	r3, [pc, #48]	; (8028f14 <CRC_Lock+0x98>)
 8028ee4:	6018      	str	r0, [r3, #0]
 8028ee6:	6818      	ldr	r0, [r3, #0]
 8028ee8:	1a43      	subs	r3, r0, r1
 8028eea:	4258      	negs	r0, r3
 8028eec:	4158      	adcs	r0, r3
 8028eee:	bd30      	pop	{r4, r5, pc}
 8028ef0:	4b09      	ldr	r3, [pc, #36]	; (8028f18 <CRC_Lock+0x9c>)
 8028ef2:	2201      	movs	r2, #1
 8028ef4:	601a      	str	r2, [r3, #0]
 8028ef6:	681a      	ldr	r2, [r3, #0]
 8028ef8:	2a00      	cmp	r2, #0
 8028efa:	d1fc      	bne.n	8028ef6 <CRC_Lock+0x7a>
 8028efc:	4b07      	ldr	r3, [pc, #28]	; (8028f1c <CRC_Lock+0xa0>)
 8028efe:	e7f1      	b.n	8028ee4 <CRC_Lock+0x68>
 8028f00:	e0002000 	.word	0xe0002000
 8028f04:	e000ed00 	.word	0xe000ed00
 8028f08:	e0042000 	.word	0xe0042000
 8028f0c:	5c001000 	.word	0x5c001000
 8028f10:	58024c08 	.word	0x58024c08
 8028f14:	58024c00 	.word	0x58024c00
 8028f18:	40023008 	.word	0x40023008
 8028f1c:	40023000 	.word	0x40023000

08028f20 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028f20:	6101      	str	r1, [r0, #16]
 8028f22:	4770      	bx	lr

08028f24 <_ZN8touchgfx8Gestures4tickEv>:
 8028f24:	7b83      	ldrb	r3, [r0, #14]
 8028f26:	b14b      	cbz	r3, 8028f3c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028f28:	8903      	ldrh	r3, [r0, #8]
 8028f2a:	3301      	adds	r3, #1
 8028f2c:	b29b      	uxth	r3, r3
 8028f2e:	2b07      	cmp	r3, #7
 8028f30:	8103      	strh	r3, [r0, #8]
 8028f32:	bf81      	itttt	hi
 8028f34:	2300      	movhi	r3, #0
 8028f36:	8143      	strhhi	r3, [r0, #10]
 8028f38:	8183      	strhhi	r3, [r0, #12]
 8028f3a:	7383      	strbhi	r3, [r0, #14]
 8028f3c:	4770      	bx	lr
	...

08028f40 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028f40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028f44:	4698      	mov	r8, r3
 8028f46:	8883      	ldrh	r3, [r0, #4]
 8028f48:	4604      	mov	r4, r0
 8028f4a:	4617      	mov	r7, r2
 8028f4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028f50:	eba8 0303 	sub.w	r3, r8, r3
 8028f54:	4a19      	ldr	r2, [pc, #100]	; (8028fbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028f56:	460e      	mov	r6, r1
 8028f58:	b21b      	sxth	r3, r3
 8028f5a:	88c1      	ldrh	r1, [r0, #6]
 8028f5c:	9200      	str	r2, [sp, #0]
 8028f5e:	2000      	movs	r0, #0
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	8aa2      	ldrh	r2, [r4, #20]
 8028f64:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028f68:	bfb8      	it	lt
 8028f6a:	425b      	neglt	r3, r3
 8028f6c:	f88d 0004 	strb.w	r0, [sp, #4]
 8028f70:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028f74:	b21b      	sxth	r3, r3
 8028f76:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028f7a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028f7e:	4293      	cmp	r3, r2
 8028f80:	dc07      	bgt.n	8028f92 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028f82:	1a69      	subs	r1, r5, r1
 8028f84:	b209      	sxth	r1, r1
 8028f86:	2900      	cmp	r1, #0
 8028f88:	bfb8      	it	lt
 8028f8a:	4249      	neglt	r1, r1
 8028f8c:	b209      	sxth	r1, r1
 8028f8e:	428a      	cmp	r2, r1
 8028f90:	da10      	bge.n	8028fb4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028f92:	6920      	ldr	r0, [r4, #16]
 8028f94:	4669      	mov	r1, sp
 8028f96:	eba8 0606 	sub.w	r6, r8, r6
 8028f9a:	1bef      	subs	r7, r5, r7
 8028f9c:	6803      	ldr	r3, [r0, #0]
 8028f9e:	685b      	ldr	r3, [r3, #4]
 8028fa0:	4798      	blx	r3
 8028fa2:	2300      	movs	r3, #0
 8028fa4:	2001      	movs	r0, #1
 8028fa6:	8166      	strh	r6, [r4, #10]
 8028fa8:	8123      	strh	r3, [r4, #8]
 8028faa:	81a7      	strh	r7, [r4, #12]
 8028fac:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028fb0:	80e5      	strh	r5, [r4, #6]
 8028fb2:	73a0      	strb	r0, [r4, #14]
 8028fb4:	b004      	add	sp, #16
 8028fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fba:	bf00      	nop
 8028fbc:	0803049c 	.word	0x0803049c

08028fc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028fc2:	461e      	mov	r6, r3
 8028fc4:	1e4b      	subs	r3, r1, #1
 8028fc6:	b085      	sub	sp, #20
 8028fc8:	4604      	mov	r4, r0
 8028fca:	2b01      	cmp	r3, #1
 8028fcc:	460d      	mov	r5, r1
 8028fce:	4617      	mov	r7, r2
 8028fd0:	d84b      	bhi.n	802906a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028fd2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028fd6:	1cd3      	adds	r3, r2, #3
 8028fd8:	b29b      	uxth	r3, r3
 8028fda:	2b06      	cmp	r3, #6
 8028fdc:	d916      	bls.n	802900c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028fde:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029080 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028fe2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028fe6:	f8cd c004 	str.w	ip, [sp, #4]
 8028fea:	f04f 0c00 	mov.w	ip, #0
 8028fee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028ff2:	6900      	ldr	r0, [r0, #16]
 8028ff4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028ff8:	a901      	add	r1, sp, #4
 8028ffa:	f88d c008 	strb.w	ip, [sp, #8]
 8028ffe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029002:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029006:	6803      	ldr	r3, [r0, #0]
 8029008:	689b      	ldr	r3, [r3, #8]
 802900a:	4798      	blx	r3
 802900c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029010:	1cd3      	adds	r3, r2, #3
 8029012:	b29b      	uxth	r3, r3
 8029014:	2b06      	cmp	r3, #6
 8029016:	d916      	bls.n	8029046 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029018:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029080 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802901c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029020:	f8cd c004 	str.w	ip, [sp, #4]
 8029024:	f04f 0c01 	mov.w	ip, #1
 8029028:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802902c:	6920      	ldr	r0, [r4, #16]
 802902e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029032:	a901      	add	r1, sp, #4
 8029034:	f88d c008 	strb.w	ip, [sp, #8]
 8029038:	f8ad 200a 	strh.w	r2, [sp, #10]
 802903c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029040:	6803      	ldr	r3, [r0, #0]
 8029042:	689b      	ldr	r3, [r3, #8]
 8029044:	4798      	blx	r3
 8029046:	4b0d      	ldr	r3, [pc, #52]	; (802907c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029048:	a901      	add	r1, sp, #4
 802904a:	6920      	ldr	r0, [r4, #16]
 802904c:	9301      	str	r3, [sp, #4]
 802904e:	2300      	movs	r3, #0
 8029050:	f88d 5008 	strb.w	r5, [sp, #8]
 8029054:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029058:	f8ad 600c 	strh.w	r6, [sp, #12]
 802905c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029060:	6803      	ldr	r3, [r0, #0]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	4798      	blx	r3
 8029066:	b005      	add	sp, #20
 8029068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802906a:	2900      	cmp	r1, #0
 802906c:	d1eb      	bne.n	8029046 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802906e:	80a2      	strh	r2, [r4, #4]
 8029070:	80c6      	strh	r6, [r0, #6]
 8029072:	60a1      	str	r1, [r4, #8]
 8029074:	81a1      	strh	r1, [r4, #12]
 8029076:	73a1      	strb	r1, [r4, #14]
 8029078:	e7e5      	b.n	8029046 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802907a:	bf00      	nop
 802907c:	08030488 	.word	0x08030488
 8029080:	080304b0 	.word	0x080304b0

08029084 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8029084:	10c9      	asrs	r1, r1, #3
 8029086:	2900      	cmp	r1, #0
 8029088:	bfb8      	it	lt
 802908a:	4249      	neglt	r1, r1
 802908c:	2801      	cmp	r0, #1
 802908e:	d108      	bne.n	80290a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8029090:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029094:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8029098:	4601      	mov	r1, r0
 802909a:	dd02      	ble.n	80290a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802909c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80290a0:	4770      	bx	lr
 80290a2:	29ff      	cmp	r1, #255	; 0xff
 80290a4:	bfa8      	it	ge
 80290a6:	21ff      	movge	r1, #255	; 0xff
 80290a8:	4608      	mov	r0, r1
 80290aa:	4770      	bx	lr

080290ac <_ZN8touchgfx10Rasterizer6lineToEii>:
 80290ac:	b410      	push	{r4}
 80290ae:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80290b2:	429c      	cmp	r4, r3
 80290b4:	d803      	bhi.n	80290be <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80290b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80290ba:	f7ef be3d 	b.w	8018d38 <_ZN8touchgfx7Outline6lineToEii>
 80290be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80290c2:	4770      	bx	lr

080290c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80290c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290c8:	b08b      	sub	sp, #44	; 0x2c
 80290ca:	4606      	mov	r6, r0
 80290cc:	468a      	mov	sl, r1
 80290ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80290d2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80290d6:	9308      	str	r3, [sp, #32]
 80290d8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80290dc:	9309      	str	r3, [sp, #36]	; 0x24
 80290de:	f7ef ff96 	bl	801900e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80290e2:	68b5      	ldr	r5, [r6, #8]
 80290e4:	4604      	mov	r4, r0
 80290e6:	2d00      	cmp	r5, #0
 80290e8:	d044      	beq.n	8029174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80290ea:	6873      	ldr	r3, [r6, #4]
 80290ec:	42ab      	cmp	r3, r5
 80290ee:	d33d      	bcc.n	802916c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80290f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80290f4:	f04f 0800 	mov.w	r8, #0
 80290f8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80290fc:	eb02 0b03 	add.w	fp, r2, r3
 8029100:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029104:	fb02 1203 	mla	r2, r2, r3, r1
 8029108:	9205      	str	r2, [sp, #20]
 802910a:	1e6a      	subs	r2, r5, #1
 802910c:	9204      	str	r2, [sp, #16]
 802910e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029112:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029116:	454b      	cmp	r3, r9
 8029118:	463a      	mov	r2, r7
 802911a:	d008      	beq.n	802912e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802911c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8029120:	eb03 0b09 	add.w	fp, r3, r9
 8029124:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029128:	fb03 1309 	mla	r3, r3, r9, r1
 802912c:	9305      	str	r3, [sp, #20]
 802912e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029132:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029136:	4498      	add	r8, r3
 8029138:	9b04      	ldr	r3, [sp, #16]
 802913a:	3b01      	subs	r3, #1
 802913c:	9304      	str	r3, [sp, #16]
 802913e:	9b04      	ldr	r3, [sp, #16]
 8029140:	3301      	adds	r3, #1
 8029142:	d015      	beq.n	8029170 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029144:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029148:	42bb      	cmp	r3, r7
 802914a:	d117      	bne.n	802917c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802914c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8029150:	9b04      	ldr	r3, [sp, #16]
 8029152:	4548      	cmp	r0, r9
 8029154:	f103 33ff 	add.w	r3, r3, #4294967295
 8029158:	d17d      	bne.n	8029256 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802915a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802915e:	4401      	add	r1, r0
 8029160:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029164:	4480      	add	r8, r0
 8029166:	e7e9      	b.n	802913c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029168:	461f      	mov	r7, r3
 802916a:	e042      	b.n	80291f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802916c:	2000      	movs	r0, #0
 802916e:	e002      	b.n	8029176 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8029170:	2900      	cmp	r1, #0
 8029172:	d16d      	bne.n	8029250 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029174:	2001      	movs	r0, #1
 8029176:	b00b      	add	sp, #44	; 0x2c
 8029178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802917c:	b379      	cbz	r1, 80291de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802917e:	2f00      	cmp	r7, #0
 8029180:	db29      	blt.n	80291d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029182:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8029186:	42bb      	cmp	r3, r7
 8029188:	dd25      	ble.n	80291d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802918a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802918e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8029192:	f7ff ff77 	bl	8029084 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8029196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029198:	fb10 f003 	smulbb	r0, r0, r3
 802919c:	b280      	uxth	r0, r0
 802919e:	1c41      	adds	r1, r0, #1
 80291a0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80291a4:	1209      	asrs	r1, r1, #8
 80291a6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80291aa:	d014      	beq.n	80291d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80291ac:	b2c9      	uxtb	r1, r1
 80291ae:	9808      	ldr	r0, [sp, #32]
 80291b0:	b2ba      	uxth	r2, r7
 80291b2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80291b4:	9102      	str	r1, [sp, #8]
 80291b6:	2101      	movs	r1, #1
 80291b8:	4413      	add	r3, r2
 80291ba:	4402      	add	r2, r0
 80291bc:	9101      	str	r1, [sp, #4]
 80291be:	fa0f f18b 	sxth.w	r1, fp
 80291c2:	f8da 0000 	ldr.w	r0, [sl]
 80291c6:	b21b      	sxth	r3, r3
 80291c8:	9100      	str	r1, [sp, #0]
 80291ca:	b212      	sxth	r2, r2
 80291cc:	6941      	ldr	r1, [r0, #20]
 80291ce:	4650      	mov	r0, sl
 80291d0:	460d      	mov	r5, r1
 80291d2:	9905      	ldr	r1, [sp, #20]
 80291d4:	47a8      	blx	r5
 80291d6:	9b04      	ldr	r3, [sp, #16]
 80291d8:	1c7a      	adds	r2, r7, #1
 80291da:	3301      	adds	r3, #1
 80291dc:	d0ca      	beq.n	8029174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80291de:	f9b4 7000 	ldrsh.w	r7, [r4]
 80291e2:	1abb      	subs	r3, r7, r2
 80291e4:	2b00      	cmp	r3, #0
 80291e6:	dd31      	ble.n	802924c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80291e8:	2a00      	cmp	r2, #0
 80291ea:	dabd      	bge.n	8029168 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80291ec:	2f00      	cmp	r7, #0
 80291ee:	dd2d      	ble.n	802924c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80291f0:	2200      	movs	r2, #0
 80291f2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80291f6:	19d1      	adds	r1, r2, r7
 80291f8:	4299      	cmp	r1, r3
 80291fa:	db02      	blt.n	8029202 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80291fc:	1a9f      	subs	r7, r3, r2
 80291fe:	2f00      	cmp	r7, #0
 8029200:	dd24      	ble.n	802924c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029202:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029206:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802920a:	f7ff ff3b 	bl	8029084 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802920e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029210:	fb10 f003 	smulbb	r0, r0, r3
 8029214:	b280      	uxth	r0, r0
 8029216:	1c41      	adds	r1, r0, #1
 8029218:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802921c:	1209      	asrs	r1, r1, #8
 802921e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8029222:	d013      	beq.n	802924c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029224:	b292      	uxth	r2, r2
 8029226:	9808      	ldr	r0, [sp, #32]
 8029228:	b2c9      	uxtb	r1, r1
 802922a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802922c:	b23f      	sxth	r7, r7
 802922e:	4413      	add	r3, r2
 8029230:	9102      	str	r1, [sp, #8]
 8029232:	4402      	add	r2, r0
 8029234:	fa0f f18b 	sxth.w	r1, fp
 8029238:	f8da 0000 	ldr.w	r0, [sl]
 802923c:	b21b      	sxth	r3, r3
 802923e:	9100      	str	r1, [sp, #0]
 8029240:	b212      	sxth	r2, r2
 8029242:	9701      	str	r7, [sp, #4]
 8029244:	9905      	ldr	r1, [sp, #20]
 8029246:	6947      	ldr	r7, [r0, #20]
 8029248:	4650      	mov	r0, sl
 802924a:	47b8      	blx	r7
 802924c:	464b      	mov	r3, r9
 802924e:	e75e      	b.n	802910e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8029250:	2f00      	cmp	r7, #0
 8029252:	da96      	bge.n	8029182 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8029254:	e78e      	b.n	8029174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029256:	2900      	cmp	r1, #0
 8029258:	d0f8      	beq.n	802924c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802925a:	e790      	b.n	802917e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802925c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802925c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8029260:	4b4b      	ldr	r3, [pc, #300]	; (8029390 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8029262:	2500      	movs	r5, #0
 8029264:	f100 0620 	add.w	r6, r0, #32
 8029268:	4604      	mov	r4, r0
 802926a:	f100 0718 	add.w	r7, r0, #24
 802926e:	4690      	mov	r8, r2
 8029270:	e9c0 3100 	strd	r3, r1, [r0]
 8029274:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8029278:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802927c:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8029280:	4630      	mov	r0, r6
 8029282:	f7ef f89f 	bl	80183c4 <_ZN8touchgfx7OutlineC1Ev>
 8029286:	2301      	movs	r3, #1
 8029288:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802928c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8029290:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8029294:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8029298:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802929c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80292a0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80292a4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80292a8:	9500      	str	r5, [sp, #0]
 80292aa:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80292ae:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80292b2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80292b6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80292ba:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80292be:	4410      	add	r0, r2
 80292c0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80292c4:	b280      	uxth	r0, r0
 80292c6:	fa0f fa80 	sxth.w	sl, r0
 80292ca:	45aa      	cmp	sl, r5
 80292cc:	dd5c      	ble.n	8029388 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80292ce:	4591      	cmp	r9, r2
 80292d0:	dd5a      	ble.n	8029388 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80292d2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80292d6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80292da:	440b      	add	r3, r1
 80292dc:	b29b      	uxth	r3, r3
 80292de:	b21d      	sxth	r5, r3
 80292e0:	2d00      	cmp	r5, #0
 80292e2:	dd51      	ble.n	8029388 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80292e4:	458e      	cmp	lr, r1
 80292e6:	dd4f      	ble.n	8029388 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80292e8:	45d1      	cmp	r9, sl
 80292ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80292ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80292f2:	bfb8      	it	lt
 80292f4:	fa1f f089 	uxthlt.w	r0, r9
 80292f8:	45ae      	cmp	lr, r5
 80292fa:	f8ad 2000 	strh.w	r2, [sp]
 80292fe:	bfb8      	it	lt
 8029300:	fa1f f38e 	uxthlt.w	r3, lr
 8029304:	1a80      	subs	r0, r0, r2
 8029306:	f8ad 1002 	strh.w	r1, [sp, #2]
 802930a:	1a5b      	subs	r3, r3, r1
 802930c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8029310:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029314:	466d      	mov	r5, sp
 8029316:	e895 0003 	ldmia.w	r5, {r0, r1}
 802931a:	e887 0003 	stmia.w	r7, {r0, r1}
 802931e:	f8dc 3000 	ldr.w	r3, [ip]
 8029322:	4660      	mov	r0, ip
 8029324:	4639      	mov	r1, r7
 8029326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029328:	4798      	blx	r3
 802932a:	6861      	ldr	r1, [r4, #4]
 802932c:	4628      	mov	r0, r5
 802932e:	3104      	adds	r1, #4
 8029330:	f7f1 f9cc 	bl	801a6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029334:	4638      	mov	r0, r7
 8029336:	f7f1 f9a1 	bl	801a67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802933a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802933e:	f8bd 2000 	ldrh.w	r2, [sp]
 8029342:	4630      	mov	r0, r6
 8029344:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8029348:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802934c:	f7ef f81f 	bl	801838e <_ZN8touchgfx7Outline5resetEv>
 8029350:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029354:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8029358:	4620      	mov	r0, r4
 802935a:	015b      	lsls	r3, r3, #5
 802935c:	60a3      	str	r3, [r4, #8]
 802935e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029362:	015b      	lsls	r3, r3, #5
 8029364:	60e3      	str	r3, [r4, #12]
 8029366:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802936a:	015b      	lsls	r3, r3, #5
 802936c:	6123      	str	r3, [r4, #16]
 802936e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029372:	015b      	lsls	r3, r3, #5
 8029374:	6163      	str	r3, [r4, #20]
 8029376:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802937a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802937e:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8029382:	b002      	add	sp, #8
 8029384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029388:	2300      	movs	r3, #0
 802938a:	9301      	str	r3, [sp, #4]
 802938c:	e7c2      	b.n	8029314 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802938e:	bf00      	nop
 8029390:	0802ff88 	.word	0x0802ff88

08029394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029394:	4b07      	ldr	r3, [pc, #28]	; (80293b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029396:	b510      	push	{r4, lr}
 8029398:	781b      	ldrb	r3, [r3, #0]
 802939a:	2b01      	cmp	r3, #1
 802939c:	d108      	bne.n	80293b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802939e:	6843      	ldr	r3, [r0, #4]
 80293a0:	6814      	ldr	r4, [r2, #0]
 80293a2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80293a6:	680b      	ldr	r3, [r1, #0]
 80293a8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80293ac:	6013      	str	r3, [r2, #0]
 80293ae:	600c      	str	r4, [r1, #0]
 80293b0:	bd10      	pop	{r4, pc}
 80293b2:	bf00      	nop
 80293b4:	2003c264 	.word	0x2003c264

080293b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80293b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80293ba:	ab02      	add	r3, sp, #8
 80293bc:	4604      	mov	r4, r0
 80293be:	9101      	str	r1, [sp, #4]
 80293c0:	a901      	add	r1, sp, #4
 80293c2:	f843 2d08 	str.w	r2, [r3, #-8]!
 80293c6:	461a      	mov	r2, r3
 80293c8:	f7ff ffe4 	bl	8029394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80293cc:	68a3      	ldr	r3, [r4, #8]
 80293ce:	9901      	ldr	r1, [sp, #4]
 80293d0:	9a00      	ldr	r2, [sp, #0]
 80293d2:	1ac9      	subs	r1, r1, r3
 80293d4:	68e3      	ldr	r3, [r4, #12]
 80293d6:	1ad2      	subs	r2, r2, r3
 80293d8:	9101      	str	r1, [sp, #4]
 80293da:	2a00      	cmp	r2, #0
 80293dc:	9200      	str	r2, [sp, #0]
 80293de:	db1c      	blt.n	802941a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80293e0:	6963      	ldr	r3, [r4, #20]
 80293e2:	429a      	cmp	r2, r3
 80293e4:	bfac      	ite	ge
 80293e6:	2002      	movge	r0, #2
 80293e8:	2000      	movlt	r0, #0
 80293ea:	2900      	cmp	r1, #0
 80293ec:	db17      	blt.n	802941e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80293ee:	6923      	ldr	r3, [r4, #16]
 80293f0:	4299      	cmp	r1, r3
 80293f2:	bfac      	ite	ge
 80293f4:	2308      	movge	r3, #8
 80293f6:	2300      	movlt	r3, #0
 80293f8:	4303      	orrs	r3, r0
 80293fa:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80293fe:	b2dd      	uxtb	r5, r3
 8029400:	b978      	cbnz	r0, 8029422 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029402:	f104 0020 	add.w	r0, r4, #32
 8029406:	f7ff fe51 	bl	80290ac <_ZN8touchgfx10Rasterizer6lineToEii>
 802940a:	9b01      	ldr	r3, [sp, #4]
 802940c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8029410:	65e3      	str	r3, [r4, #92]	; 0x5c
 8029412:	9b00      	ldr	r3, [sp, #0]
 8029414:	6623      	str	r3, [r4, #96]	; 0x60
 8029416:	b002      	add	sp, #8
 8029418:	bd70      	pop	{r4, r5, r6, pc}
 802941a:	2001      	movs	r0, #1
 802941c:	e7e5      	b.n	80293ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802941e:	2304      	movs	r3, #4
 8029420:	e7ea      	b.n	80293f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029422:	b113      	cbz	r3, 802942a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029424:	ea10 0305 	ands.w	r3, r0, r5
 8029428:	d11d      	bne.n	8029466 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802942a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802942e:	f104 0620 	add.w	r6, r4, #32
 8029432:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8029436:	b193      	cbz	r3, 802945e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029438:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802943c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029440:	4298      	cmp	r0, r3
 8029442:	d802      	bhi.n	802944a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029444:	4630      	mov	r0, r6
 8029446:	f7ef fc91 	bl	8018d6c <_ZN8touchgfx7Outline6moveToEii>
 802944a:	2300      	movs	r3, #0
 802944c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029450:	2301      	movs	r3, #1
 8029452:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8029456:	4630      	mov	r0, r6
 8029458:	e9dd 2100 	ldrd	r2, r1, [sp]
 802945c:	e7d3      	b.n	8029406 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802945e:	4630      	mov	r0, r6
 8029460:	f7ff fe24 	bl	80290ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8029464:	e7f7      	b.n	8029456 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8029466:	461d      	mov	r5, r3
 8029468:	e7cf      	b.n	802940a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

0802946a <_ZN8touchgfx6Canvas5closeEv>:
 802946a:	b538      	push	{r3, r4, r5, lr}
 802946c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8029470:	4604      	mov	r4, r0
 8029472:	b993      	cbnz	r3, 802949a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029474:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8029478:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802947c:	4213      	tst	r3, r2
 802947e:	d10c      	bne.n	802949a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029480:	f100 0520 	add.w	r5, r0, #32
 8029484:	b123      	cbz	r3, 8029490 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029486:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802948a:	4628      	mov	r0, r5
 802948c:	f7ff fe0e 	bl	80290ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8029490:	4628      	mov	r0, r5
 8029492:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8029496:	f7ff fe09 	bl	80290ac <_ZN8touchgfx10Rasterizer6lineToEii>
 802949a:	2300      	movs	r3, #0
 802949c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80294a0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80294a4:	4298      	cmp	r0, r3
 80294a6:	bf34      	ite	cc
 80294a8:	2000      	movcc	r0, #0
 80294aa:	2001      	movcs	r0, #1
 80294ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080294b0 <_ZN8touchgfx6Canvas6renderEh>:
 80294b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80294b4:	4604      	mov	r4, r0
 80294b6:	6840      	ldr	r0, [r0, #4]
 80294b8:	460d      	mov	r5, r1
 80294ba:	6803      	ldr	r3, [r0, #0]
 80294bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80294be:	4798      	blx	r3
 80294c0:	fb10 f105 	smulbb	r1, r0, r5
 80294c4:	b289      	uxth	r1, r1
 80294c6:	1c4d      	adds	r5, r1, #1
 80294c8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80294cc:	122d      	asrs	r5, r5, #8
 80294ce:	f000 8097 	beq.w	8029600 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80294d2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80294d6:	2b00      	cmp	r3, #0
 80294d8:	f000 8092 	beq.w	8029600 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80294dc:	4620      	mov	r0, r4
 80294de:	f7ff ffc4 	bl	802946a <_ZN8touchgfx6Canvas5closeEv>
 80294e2:	4607      	mov	r7, r0
 80294e4:	2800      	cmp	r0, #0
 80294e6:	d043      	beq.n	8029570 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80294e8:	6863      	ldr	r3, [r4, #4]
 80294ea:	4e46      	ldr	r6, [pc, #280]	; (8029604 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 80294ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80294ee:	6837      	ldr	r7, [r6, #0]
 80294f0:	6803      	ldr	r3, [r0, #0]
 80294f2:	689b      	ldr	r3, [r3, #8]
 80294f4:	4798      	blx	r3
 80294f6:	4601      	mov	r1, r0
 80294f8:	4638      	mov	r0, r7
 80294fa:	f7ed fc4d 	bl	8016d98 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80294fe:	4607      	mov	r7, r0
 8029500:	f7e5 f870 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8029504:	6803      	ldr	r3, [r0, #0]
 8029506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029508:	4798      	blx	r3
 802950a:	4680      	mov	r8, r0
 802950c:	f7e5 f86a 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8029510:	6803      	ldr	r3, [r0, #0]
 8029512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029514:	4798      	blx	r3
 8029516:	280b      	cmp	r0, #11
 8029518:	d857      	bhi.n	80295ca <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802951a:	e8df f000 	tbb	[pc, r0]
 802951e:	584d      	.short	0x584d
 8029520:	2d560668 	.word	0x2d560668
 8029524:	6161613d 	.word	0x6161613d
 8029528:	6161      	.short	0x6161
 802952a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802952e:	2208      	movs	r2, #8
 8029530:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029534:	fb91 f2f2 	sdiv	r2, r1, r2
 8029538:	fb08 2303 	mla	r3, r8, r3, r2
 802953c:	441f      	add	r7, r3
 802953e:	424b      	negs	r3, r1
 8029540:	f001 0107 	and.w	r1, r1, #7
 8029544:	f003 0307 	and.w	r3, r3, #7
 8029548:	bf58      	it	pl
 802954a:	4259      	negpl	r1, r3
 802954c:	b2c9      	uxtb	r1, r1
 802954e:	6860      	ldr	r0, [r4, #4]
 8029550:	b2ed      	uxtb	r5, r5
 8029552:	fa0f f388 	sxth.w	r3, r8
 8029556:	463a      	mov	r2, r7
 8029558:	e9cd 1500 	strd	r1, r5, [sp]
 802955c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802955e:	f104 0020 	add.w	r0, r4, #32
 8029562:	f7ff fdaf 	bl	80290c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029566:	4607      	mov	r7, r0
 8029568:	6830      	ldr	r0, [r6, #0]
 802956a:	6803      	ldr	r3, [r0, #0]
 802956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802956e:	4798      	blx	r3
 8029570:	4638      	mov	r0, r7
 8029572:	b002      	add	sp, #8
 8029574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029578:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802957c:	2204      	movs	r2, #4
 802957e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029582:	fb91 f2f2 	sdiv	r2, r1, r2
 8029586:	fb08 2303 	mla	r3, r8, r3, r2
 802958a:	441f      	add	r7, r3
 802958c:	424b      	negs	r3, r1
 802958e:	f001 0103 	and.w	r1, r1, #3
 8029592:	f003 0303 	and.w	r3, r3, #3
 8029596:	e7d7      	b.n	8029548 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8029598:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802959c:	2202      	movs	r2, #2
 802959e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80295a2:	2900      	cmp	r1, #0
 80295a4:	fb91 f2f2 	sdiv	r2, r1, r2
 80295a8:	f001 0101 	and.w	r1, r1, #1
 80295ac:	fb08 2303 	mla	r3, r8, r3, r2
 80295b0:	bfb8      	it	lt
 80295b2:	4249      	neglt	r1, r1
 80295b4:	441f      	add	r7, r3
 80295b6:	e7c9      	b.n	802954c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80295b8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80295bc:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80295c0:	fb08 f303 	mul.w	r3, r8, r3
 80295c4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80295c8:	441f      	add	r7, r3
 80295ca:	2100      	movs	r1, #0
 80295cc:	e7bf      	b.n	802954e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80295ce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80295d2:	2103      	movs	r1, #3
 80295d4:	fb08 f203 	mul.w	r2, r8, r3
 80295d8:	8b23      	ldrh	r3, [r4, #24]
 80295da:	fb13 2301 	smlabb	r3, r3, r1, r2
 80295de:	e7f3      	b.n	80295c8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80295e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80295e4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80295e8:	fb08 2303 	mla	r3, r8, r3, r2
 80295ec:	e7ec      	b.n	80295c8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80295ee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80295f2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80295f6:	fb08 f303 	mul.w	r3, r8, r3
 80295fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80295fe:	e7e3      	b.n	80295c8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029600:	2701      	movs	r7, #1
 8029602:	e7b5      	b.n	8029570 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8029604:	2003c26c 	.word	0x2003c26c

08029608 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029608:	b513      	push	{r0, r1, r4, lr}
 802960a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802960e:	4604      	mov	r4, r0
 8029610:	e9cd 2100 	strd	r2, r1, [sp]
 8029614:	b1a3      	cbz	r3, 8029640 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029616:	466a      	mov	r2, sp
 8029618:	a901      	add	r1, sp, #4
 802961a:	4620      	mov	r0, r4
 802961c:	f7ff feba 	bl	8029394 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029620:	68a3      	ldr	r3, [r4, #8]
 8029622:	9901      	ldr	r1, [sp, #4]
 8029624:	9a00      	ldr	r2, [sp, #0]
 8029626:	1ac9      	subs	r1, r1, r3
 8029628:	68e3      	ldr	r3, [r4, #12]
 802962a:	1ad2      	subs	r2, r2, r3
 802962c:	9101      	str	r1, [sp, #4]
 802962e:	2a00      	cmp	r2, #0
 8029630:	9200      	str	r2, [sp, #0]
 8029632:	da0b      	bge.n	802964c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029634:	2301      	movs	r3, #1
 8029636:	2900      	cmp	r1, #0
 8029638:	da0e      	bge.n	8029658 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802963a:	f043 0304 	orr.w	r3, r3, #4
 802963e:	e013      	b.n	8029668 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029640:	f7ff ff13 	bl	802946a <_ZN8touchgfx6Canvas5closeEv>
 8029644:	2800      	cmp	r0, #0
 8029646:	d1e6      	bne.n	8029616 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029648:	b002      	add	sp, #8
 802964a:	bd10      	pop	{r4, pc}
 802964c:	6963      	ldr	r3, [r4, #20]
 802964e:	429a      	cmp	r2, r3
 8029650:	bfac      	ite	ge
 8029652:	2302      	movge	r3, #2
 8029654:	2300      	movlt	r3, #0
 8029656:	e7ee      	b.n	8029636 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029658:	6920      	ldr	r0, [r4, #16]
 802965a:	4281      	cmp	r1, r0
 802965c:	bfac      	ite	ge
 802965e:	2008      	movge	r0, #8
 8029660:	2000      	movlt	r0, #0
 8029662:	4318      	orrs	r0, r3
 8029664:	b2c3      	uxtb	r3, r0
 8029666:	b158      	cbz	r0, 8029680 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029668:	2201      	movs	r2, #1
 802966a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802966e:	9901      	ldr	r1, [sp, #4]
 8029670:	9a00      	ldr	r2, [sp, #0]
 8029672:	66a1      	str	r1, [r4, #104]	; 0x68
 8029674:	66e2      	str	r2, [r4, #108]	; 0x6c
 8029676:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802967a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802967e:	e7e3      	b.n	8029648 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029680:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8029684:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029688:	4298      	cmp	r0, r3
 802968a:	d803      	bhi.n	8029694 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802968c:	f104 0020 	add.w	r0, r4, #32
 8029690:	f7ef fb6c 	bl	8018d6c <_ZN8touchgfx7Outline6moveToEii>
 8029694:	2300      	movs	r3, #0
 8029696:	2201      	movs	r2, #1
 8029698:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802969c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80296a0:	e7e5      	b.n	802966e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080296a2 <__aeabi_atexit>:
 80296a2:	460b      	mov	r3, r1
 80296a4:	4601      	mov	r1, r0
 80296a6:	4618      	mov	r0, r3
 80296a8:	f000 b8ce 	b.w	8029848 <__cxa_atexit>

080296ac <_ZdlPvj>:
 80296ac:	f000 b812 	b.w	80296d4 <_ZdlPv>

080296b0 <__cxa_guard_acquire>:
 80296b0:	6803      	ldr	r3, [r0, #0]
 80296b2:	07db      	lsls	r3, r3, #31
 80296b4:	d406      	bmi.n	80296c4 <__cxa_guard_acquire+0x14>
 80296b6:	7843      	ldrb	r3, [r0, #1]
 80296b8:	b103      	cbz	r3, 80296bc <__cxa_guard_acquire+0xc>
 80296ba:	deff      	udf	#255	; 0xff
 80296bc:	2301      	movs	r3, #1
 80296be:	7043      	strb	r3, [r0, #1]
 80296c0:	4618      	mov	r0, r3
 80296c2:	4770      	bx	lr
 80296c4:	2000      	movs	r0, #0
 80296c6:	4770      	bx	lr

080296c8 <__cxa_guard_release>:
 80296c8:	2301      	movs	r3, #1
 80296ca:	6003      	str	r3, [r0, #0]
 80296cc:	4770      	bx	lr

080296ce <__cxa_pure_virtual>:
 80296ce:	b508      	push	{r3, lr}
 80296d0:	f000 f80e 	bl	80296f0 <_ZSt9terminatev>

080296d4 <_ZdlPv>:
 80296d4:	f000 b90a 	b.w	80298ec <free>

080296d8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80296d8:	b508      	push	{r3, lr}
 80296da:	4780      	blx	r0
 80296dc:	f000 f888 	bl	80297f0 <abort>

080296e0 <_ZSt13get_terminatev>:
 80296e0:	4b02      	ldr	r3, [pc, #8]	; (80296ec <_ZSt13get_terminatev+0xc>)
 80296e2:	6818      	ldr	r0, [r3, #0]
 80296e4:	f3bf 8f5b 	dmb	ish
 80296e8:	4770      	bx	lr
 80296ea:	bf00      	nop
 80296ec:	200000b8 	.word	0x200000b8

080296f0 <_ZSt9terminatev>:
 80296f0:	b508      	push	{r3, lr}
 80296f2:	f7ff fff5 	bl	80296e0 <_ZSt13get_terminatev>
 80296f6:	f7ff ffef 	bl	80296d8 <_ZN10__cxxabiv111__terminateEPFvvE>
 80296fa:	0000      	movs	r0, r0
 80296fc:	0000      	movs	r0, r0
	...

08029700 <ceil>:
 8029700:	ee10 1a90 	vmov	r1, s1
 8029704:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8029708:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 802970c:	2b13      	cmp	r3, #19
 802970e:	b530      	push	{r4, r5, lr}
 8029710:	ee10 0a10 	vmov	r0, s0
 8029714:	ee10 5a10 	vmov	r5, s0
 8029718:	dc2f      	bgt.n	802977a <ceil+0x7a>
 802971a:	2b00      	cmp	r3, #0
 802971c:	da13      	bge.n	8029746 <ceil+0x46>
 802971e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80297e0 <ceil+0xe0>
 8029722:	ee30 0b07 	vadd.f64	d0, d0, d7
 8029726:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802972a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802972e:	dd05      	ble.n	802973c <ceil+0x3c>
 8029730:	2900      	cmp	r1, #0
 8029732:	db4c      	blt.n	80297ce <ceil+0xce>
 8029734:	4301      	orrs	r1, r0
 8029736:	d04e      	beq.n	80297d6 <ceil+0xd6>
 8029738:	492b      	ldr	r1, [pc, #172]	; (80297e8 <ceil+0xe8>)
 802973a:	2000      	movs	r0, #0
 802973c:	460b      	mov	r3, r1
 802973e:	4602      	mov	r2, r0
 8029740:	ec43 2b10 	vmov	d0, r2, r3
 8029744:	e020      	b.n	8029788 <ceil+0x88>
 8029746:	4a29      	ldr	r2, [pc, #164]	; (80297ec <ceil+0xec>)
 8029748:	411a      	asrs	r2, r3
 802974a:	ea01 0402 	and.w	r4, r1, r2
 802974e:	4304      	orrs	r4, r0
 8029750:	d01a      	beq.n	8029788 <ceil+0x88>
 8029752:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80297e0 <ceil+0xe0>
 8029756:	ee30 0b07 	vadd.f64	d0, d0, d7
 802975a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029762:	ddeb      	ble.n	802973c <ceil+0x3c>
 8029764:	2900      	cmp	r1, #0
 8029766:	bfc2      	ittt	gt
 8029768:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 802976c:	fa40 f303 	asrgt.w	r3, r0, r3
 8029770:	18c9      	addgt	r1, r1, r3
 8029772:	ea21 0102 	bic.w	r1, r1, r2
 8029776:	2000      	movs	r0, #0
 8029778:	e7e0      	b.n	802973c <ceil+0x3c>
 802977a:	2b33      	cmp	r3, #51	; 0x33
 802977c:	dd05      	ble.n	802978a <ceil+0x8a>
 802977e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029782:	d101      	bne.n	8029788 <ceil+0x88>
 8029784:	ee30 0b00 	vadd.f64	d0, d0, d0
 8029788:	bd30      	pop	{r4, r5, pc}
 802978a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 802978e:	f04f 32ff 	mov.w	r2, #4294967295
 8029792:	40e2      	lsrs	r2, r4
 8029794:	4202      	tst	r2, r0
 8029796:	d0f7      	beq.n	8029788 <ceil+0x88>
 8029798:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80297e0 <ceil+0xe0>
 802979c:	ee30 0b07 	vadd.f64	d0, d0, d7
 80297a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80297a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297a8:	ddc8      	ble.n	802973c <ceil+0x3c>
 80297aa:	2900      	cmp	r1, #0
 80297ac:	dd02      	ble.n	80297b4 <ceil+0xb4>
 80297ae:	2b14      	cmp	r3, #20
 80297b0:	d103      	bne.n	80297ba <ceil+0xba>
 80297b2:	3101      	adds	r1, #1
 80297b4:	ea20 0002 	bic.w	r0, r0, r2
 80297b8:	e7c0      	b.n	802973c <ceil+0x3c>
 80297ba:	2401      	movs	r4, #1
 80297bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80297c0:	fa04 f303 	lsl.w	r3, r4, r3
 80297c4:	4418      	add	r0, r3
 80297c6:	42a8      	cmp	r0, r5
 80297c8:	bf38      	it	cc
 80297ca:	1909      	addcc	r1, r1, r4
 80297cc:	e7f2      	b.n	80297b4 <ceil+0xb4>
 80297ce:	2000      	movs	r0, #0
 80297d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80297d4:	e7b2      	b.n	802973c <ceil+0x3c>
 80297d6:	4608      	mov	r0, r1
 80297d8:	e7b0      	b.n	802973c <ceil+0x3c>
 80297da:	bf00      	nop
 80297dc:	f3af 8000 	nop.w
 80297e0:	8800759c 	.word	0x8800759c
 80297e4:	7e37e43c 	.word	0x7e37e43c
 80297e8:	3ff00000 	.word	0x3ff00000
 80297ec:	000fffff 	.word	0x000fffff

080297f0 <abort>:
 80297f0:	b508      	push	{r3, lr}
 80297f2:	2006      	movs	r0, #6
 80297f4:	f000 ff10 	bl	802a618 <raise>
 80297f8:	2001      	movs	r0, #1
 80297fa:	f7d8 fd3d 	bl	8002278 <_exit>
	...

08029800 <__assert_func>:
 8029800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029802:	4614      	mov	r4, r2
 8029804:	461a      	mov	r2, r3
 8029806:	4b09      	ldr	r3, [pc, #36]	; (802982c <__assert_func+0x2c>)
 8029808:	681b      	ldr	r3, [r3, #0]
 802980a:	4605      	mov	r5, r0
 802980c:	68d8      	ldr	r0, [r3, #12]
 802980e:	b14c      	cbz	r4, 8029824 <__assert_func+0x24>
 8029810:	4b07      	ldr	r3, [pc, #28]	; (8029830 <__assert_func+0x30>)
 8029812:	9100      	str	r1, [sp, #0]
 8029814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029818:	4906      	ldr	r1, [pc, #24]	; (8029834 <__assert_func+0x34>)
 802981a:	462b      	mov	r3, r5
 802981c:	f000 f828 	bl	8029870 <fiprintf>
 8029820:	f7ff ffe6 	bl	80297f0 <abort>
 8029824:	4b04      	ldr	r3, [pc, #16]	; (8029838 <__assert_func+0x38>)
 8029826:	461c      	mov	r4, r3
 8029828:	e7f3      	b.n	8029812 <__assert_func+0x12>
 802982a:	bf00      	nop
 802982c:	200000bc 	.word	0x200000bc
 8029830:	08030778 	.word	0x08030778
 8029834:	08030785 	.word	0x08030785
 8029838:	080307b3 	.word	0x080307b3

0802983c <atexit>:
 802983c:	2300      	movs	r3, #0
 802983e:	4601      	mov	r1, r0
 8029840:	461a      	mov	r2, r3
 8029842:	4618      	mov	r0, r3
 8029844:	f001 bf84 	b.w	802b750 <__register_exitproc>

08029848 <__cxa_atexit>:
 8029848:	b510      	push	{r4, lr}
 802984a:	4c05      	ldr	r4, [pc, #20]	; (8029860 <__cxa_atexit+0x18>)
 802984c:	4613      	mov	r3, r2
 802984e:	b12c      	cbz	r4, 802985c <__cxa_atexit+0x14>
 8029850:	460a      	mov	r2, r1
 8029852:	4601      	mov	r1, r0
 8029854:	2002      	movs	r0, #2
 8029856:	f001 ff7b 	bl	802b750 <__register_exitproc>
 802985a:	bd10      	pop	{r4, pc}
 802985c:	4620      	mov	r0, r4
 802985e:	e7fc      	b.n	802985a <__cxa_atexit+0x12>
 8029860:	0802b751 	.word	0x0802b751

08029864 <__errno>:
 8029864:	4b01      	ldr	r3, [pc, #4]	; (802986c <__errno+0x8>)
 8029866:	6818      	ldr	r0, [r3, #0]
 8029868:	4770      	bx	lr
 802986a:	bf00      	nop
 802986c:	200000bc 	.word	0x200000bc

08029870 <fiprintf>:
 8029870:	b40e      	push	{r1, r2, r3}
 8029872:	b503      	push	{r0, r1, lr}
 8029874:	4601      	mov	r1, r0
 8029876:	ab03      	add	r3, sp, #12
 8029878:	4805      	ldr	r0, [pc, #20]	; (8029890 <fiprintf+0x20>)
 802987a:	f853 2b04 	ldr.w	r2, [r3], #4
 802987e:	6800      	ldr	r0, [r0, #0]
 8029880:	9301      	str	r3, [sp, #4]
 8029882:	f000 fbcd 	bl	802a020 <_vfiprintf_r>
 8029886:	b002      	add	sp, #8
 8029888:	f85d eb04 	ldr.w	lr, [sp], #4
 802988c:	b003      	add	sp, #12
 802988e:	4770      	bx	lr
 8029890:	200000bc 	.word	0x200000bc

08029894 <__libc_init_array>:
 8029894:	b570      	push	{r4, r5, r6, lr}
 8029896:	4d0d      	ldr	r5, [pc, #52]	; (80298cc <__libc_init_array+0x38>)
 8029898:	4c0d      	ldr	r4, [pc, #52]	; (80298d0 <__libc_init_array+0x3c>)
 802989a:	1b64      	subs	r4, r4, r5
 802989c:	10a4      	asrs	r4, r4, #2
 802989e:	2600      	movs	r6, #0
 80298a0:	42a6      	cmp	r6, r4
 80298a2:	d109      	bne.n	80298b8 <__libc_init_array+0x24>
 80298a4:	4d0b      	ldr	r5, [pc, #44]	; (80298d4 <__libc_init_array+0x40>)
 80298a6:	4c0c      	ldr	r4, [pc, #48]	; (80298d8 <__libc_init_array+0x44>)
 80298a8:	f003 f8dc 	bl	802ca64 <_init>
 80298ac:	1b64      	subs	r4, r4, r5
 80298ae:	10a4      	asrs	r4, r4, #2
 80298b0:	2600      	movs	r6, #0
 80298b2:	42a6      	cmp	r6, r4
 80298b4:	d105      	bne.n	80298c2 <__libc_init_array+0x2e>
 80298b6:	bd70      	pop	{r4, r5, r6, pc}
 80298b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80298bc:	4798      	blx	r3
 80298be:	3601      	adds	r6, #1
 80298c0:	e7ee      	b.n	80298a0 <__libc_init_array+0xc>
 80298c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80298c6:	4798      	blx	r3
 80298c8:	3601      	adds	r6, #1
 80298ca:	e7f2      	b.n	80298b2 <__libc_init_array+0x1e>
 80298cc:	0816463c 	.word	0x0816463c
 80298d0:	0816463c 	.word	0x0816463c
 80298d4:	0816463c 	.word	0x0816463c
 80298d8:	08164654 	.word	0x08164654

080298dc <malloc>:
 80298dc:	4b02      	ldr	r3, [pc, #8]	; (80298e8 <malloc+0xc>)
 80298de:	4601      	mov	r1, r0
 80298e0:	6818      	ldr	r0, [r3, #0]
 80298e2:	f000 baff 	b.w	8029ee4 <_malloc_r>
 80298e6:	bf00      	nop
 80298e8:	200000bc 	.word	0x200000bc

080298ec <free>:
 80298ec:	4b02      	ldr	r3, [pc, #8]	; (80298f8 <free+0xc>)
 80298ee:	4601      	mov	r1, r0
 80298f0:	6818      	ldr	r0, [r3, #0]
 80298f2:	f000 ba8b 	b.w	8029e0c <_free_r>
 80298f6:	bf00      	nop
 80298f8:	200000bc 	.word	0x200000bc

080298fc <memcpy>:
 80298fc:	440a      	add	r2, r1
 80298fe:	4291      	cmp	r1, r2
 8029900:	f100 33ff 	add.w	r3, r0, #4294967295
 8029904:	d100      	bne.n	8029908 <memcpy+0xc>
 8029906:	4770      	bx	lr
 8029908:	b510      	push	{r4, lr}
 802990a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802990e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029912:	4291      	cmp	r1, r2
 8029914:	d1f9      	bne.n	802990a <memcpy+0xe>
 8029916:	bd10      	pop	{r4, pc}

08029918 <memset>:
 8029918:	4402      	add	r2, r0
 802991a:	4603      	mov	r3, r0
 802991c:	4293      	cmp	r3, r2
 802991e:	d100      	bne.n	8029922 <memset+0xa>
 8029920:	4770      	bx	lr
 8029922:	f803 1b01 	strb.w	r1, [r3], #1
 8029926:	e7f9      	b.n	802991c <memset+0x4>

08029928 <validate_structure>:
 8029928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802992a:	6801      	ldr	r1, [r0, #0]
 802992c:	293b      	cmp	r1, #59	; 0x3b
 802992e:	4604      	mov	r4, r0
 8029930:	d911      	bls.n	8029956 <validate_structure+0x2e>
 8029932:	223c      	movs	r2, #60	; 0x3c
 8029934:	4668      	mov	r0, sp
 8029936:	f001 ff7d 	bl	802b834 <div>
 802993a:	9a01      	ldr	r2, [sp, #4]
 802993c:	6863      	ldr	r3, [r4, #4]
 802993e:	9900      	ldr	r1, [sp, #0]
 8029940:	2a00      	cmp	r2, #0
 8029942:	440b      	add	r3, r1
 8029944:	6063      	str	r3, [r4, #4]
 8029946:	bfbb      	ittet	lt
 8029948:	323c      	addlt	r2, #60	; 0x3c
 802994a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802994e:	6022      	strge	r2, [r4, #0]
 8029950:	6022      	strlt	r2, [r4, #0]
 8029952:	bfb8      	it	lt
 8029954:	6063      	strlt	r3, [r4, #4]
 8029956:	6861      	ldr	r1, [r4, #4]
 8029958:	293b      	cmp	r1, #59	; 0x3b
 802995a:	d911      	bls.n	8029980 <validate_structure+0x58>
 802995c:	223c      	movs	r2, #60	; 0x3c
 802995e:	4668      	mov	r0, sp
 8029960:	f001 ff68 	bl	802b834 <div>
 8029964:	9a01      	ldr	r2, [sp, #4]
 8029966:	68a3      	ldr	r3, [r4, #8]
 8029968:	9900      	ldr	r1, [sp, #0]
 802996a:	2a00      	cmp	r2, #0
 802996c:	440b      	add	r3, r1
 802996e:	60a3      	str	r3, [r4, #8]
 8029970:	bfbb      	ittet	lt
 8029972:	323c      	addlt	r2, #60	; 0x3c
 8029974:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8029978:	6062      	strge	r2, [r4, #4]
 802997a:	6062      	strlt	r2, [r4, #4]
 802997c:	bfb8      	it	lt
 802997e:	60a3      	strlt	r3, [r4, #8]
 8029980:	68a1      	ldr	r1, [r4, #8]
 8029982:	2917      	cmp	r1, #23
 8029984:	d911      	bls.n	80299aa <validate_structure+0x82>
 8029986:	2218      	movs	r2, #24
 8029988:	4668      	mov	r0, sp
 802998a:	f001 ff53 	bl	802b834 <div>
 802998e:	9a01      	ldr	r2, [sp, #4]
 8029990:	68e3      	ldr	r3, [r4, #12]
 8029992:	9900      	ldr	r1, [sp, #0]
 8029994:	2a00      	cmp	r2, #0
 8029996:	440b      	add	r3, r1
 8029998:	60e3      	str	r3, [r4, #12]
 802999a:	bfbb      	ittet	lt
 802999c:	3218      	addlt	r2, #24
 802999e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80299a2:	60a2      	strge	r2, [r4, #8]
 80299a4:	60a2      	strlt	r2, [r4, #8]
 80299a6:	bfb8      	it	lt
 80299a8:	60e3      	strlt	r3, [r4, #12]
 80299aa:	6921      	ldr	r1, [r4, #16]
 80299ac:	290b      	cmp	r1, #11
 80299ae:	d911      	bls.n	80299d4 <validate_structure+0xac>
 80299b0:	220c      	movs	r2, #12
 80299b2:	4668      	mov	r0, sp
 80299b4:	f001 ff3e 	bl	802b834 <div>
 80299b8:	9a01      	ldr	r2, [sp, #4]
 80299ba:	6963      	ldr	r3, [r4, #20]
 80299bc:	9900      	ldr	r1, [sp, #0]
 80299be:	2a00      	cmp	r2, #0
 80299c0:	440b      	add	r3, r1
 80299c2:	6163      	str	r3, [r4, #20]
 80299c4:	bfbb      	ittet	lt
 80299c6:	320c      	addlt	r2, #12
 80299c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80299cc:	6122      	strge	r2, [r4, #16]
 80299ce:	6122      	strlt	r2, [r4, #16]
 80299d0:	bfb8      	it	lt
 80299d2:	6163      	strlt	r3, [r4, #20]
 80299d4:	6963      	ldr	r3, [r4, #20]
 80299d6:	0798      	lsls	r0, r3, #30
 80299d8:	d120      	bne.n	8029a1c <validate_structure+0xf4>
 80299da:	2164      	movs	r1, #100	; 0x64
 80299dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80299e0:	fb01 3212 	mls	r2, r1, r2, r3
 80299e4:	b9e2      	cbnz	r2, 8029a20 <validate_structure+0xf8>
 80299e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80299ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80299ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80299f2:	fb02 3311 	mls	r3, r2, r1, r3
 80299f6:	2b00      	cmp	r3, #0
 80299f8:	bf14      	ite	ne
 80299fa:	231c      	movne	r3, #28
 80299fc:	231d      	moveq	r3, #29
 80299fe:	68e2      	ldr	r2, [r4, #12]
 8029a00:	2a00      	cmp	r2, #0
 8029a02:	dc0f      	bgt.n	8029a24 <validate_structure+0xfc>
 8029a04:	4f33      	ldr	r7, [pc, #204]	; (8029ad4 <validate_structure+0x1ac>)
 8029a06:	260b      	movs	r6, #11
 8029a08:	2064      	movs	r0, #100	; 0x64
 8029a0a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8029a0e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8029a12:	f1bc 0f00 	cmp.w	ip, #0
 8029a16:	dd31      	ble.n	8029a7c <validate_structure+0x154>
 8029a18:	b003      	add	sp, #12
 8029a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a1c:	231c      	movs	r3, #28
 8029a1e:	e7ee      	b.n	80299fe <validate_structure+0xd6>
 8029a20:	231d      	movs	r3, #29
 8029a22:	e7ec      	b.n	80299fe <validate_structure+0xd6>
 8029a24:	4e2b      	ldr	r6, [pc, #172]	; (8029ad4 <validate_structure+0x1ac>)
 8029a26:	2700      	movs	r7, #0
 8029a28:	2064      	movs	r0, #100	; 0x64
 8029a2a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8029a2e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8029a32:	2a01      	cmp	r2, #1
 8029a34:	bf14      	ite	ne
 8029a36:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8029a3a:	469c      	moveq	ip, r3
 8029a3c:	4561      	cmp	r1, ip
 8029a3e:	ddeb      	ble.n	8029a18 <validate_structure+0xf0>
 8029a40:	3201      	adds	r2, #1
 8029a42:	eba1 010c 	sub.w	r1, r1, ip
 8029a46:	2a0c      	cmp	r2, #12
 8029a48:	60e1      	str	r1, [r4, #12]
 8029a4a:	6122      	str	r2, [r4, #16]
 8029a4c:	d1ef      	bne.n	8029a2e <validate_structure+0x106>
 8029a4e:	6963      	ldr	r3, [r4, #20]
 8029a50:	1c5a      	adds	r2, r3, #1
 8029a52:	0791      	lsls	r1, r2, #30
 8029a54:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8029a58:	d137      	bne.n	8029aca <validate_structure+0x1a2>
 8029a5a:	fb92 f1f0 	sdiv	r1, r2, r0
 8029a5e:	fb00 2211 	mls	r2, r0, r1, r2
 8029a62:	2a00      	cmp	r2, #0
 8029a64:	d133      	bne.n	8029ace <validate_structure+0x1a6>
 8029a66:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8029a6a:	fb93 f2f5 	sdiv	r2, r3, r5
 8029a6e:	fb05 3312 	mls	r3, r5, r2, r3
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	bf14      	ite	ne
 8029a76:	231c      	movne	r3, #28
 8029a78:	231d      	moveq	r3, #29
 8029a7a:	e7d8      	b.n	8029a2e <validate_structure+0x106>
 8029a7c:	6921      	ldr	r1, [r4, #16]
 8029a7e:	3901      	subs	r1, #1
 8029a80:	6121      	str	r1, [r4, #16]
 8029a82:	3101      	adds	r1, #1
 8029a84:	d114      	bne.n	8029ab0 <validate_structure+0x188>
 8029a86:	6963      	ldr	r3, [r4, #20]
 8029a88:	1e5a      	subs	r2, r3, #1
 8029a8a:	0791      	lsls	r1, r2, #30
 8029a8c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8029a90:	d117      	bne.n	8029ac2 <validate_structure+0x19a>
 8029a92:	fb92 f1f0 	sdiv	r1, r2, r0
 8029a96:	fb00 2211 	mls	r2, r0, r1, r2
 8029a9a:	b9a2      	cbnz	r2, 8029ac6 <validate_structure+0x19e>
 8029a9c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8029aa0:	fb93 f2f5 	sdiv	r2, r3, r5
 8029aa4:	fb05 3312 	mls	r3, r5, r2, r3
 8029aa8:	2b00      	cmp	r3, #0
 8029aaa:	bf14      	ite	ne
 8029aac:	231c      	movne	r3, #28
 8029aae:	231d      	moveq	r3, #29
 8029ab0:	6922      	ldr	r2, [r4, #16]
 8029ab2:	2a01      	cmp	r2, #1
 8029ab4:	bf14      	ite	ne
 8029ab6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8029aba:	461a      	moveq	r2, r3
 8029abc:	4462      	add	r2, ip
 8029abe:	60e2      	str	r2, [r4, #12]
 8029ac0:	e7a5      	b.n	8029a0e <validate_structure+0xe6>
 8029ac2:	231c      	movs	r3, #28
 8029ac4:	e7f4      	b.n	8029ab0 <validate_structure+0x188>
 8029ac6:	231d      	movs	r3, #29
 8029ac8:	e7f2      	b.n	8029ab0 <validate_structure+0x188>
 8029aca:	231c      	movs	r3, #28
 8029acc:	e7af      	b.n	8029a2e <validate_structure+0x106>
 8029ace:	231d      	movs	r3, #29
 8029ad0:	e7ad      	b.n	8029a2e <validate_structure+0x106>
 8029ad2:	bf00      	nop
 8029ad4:	080307b8 	.word	0x080307b8

08029ad8 <mktime>:
 8029ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029adc:	b085      	sub	sp, #20
 8029ade:	4607      	mov	r7, r0
 8029ae0:	f002 f8b8 	bl	802bc54 <__gettzinfo>
 8029ae4:	4681      	mov	r9, r0
 8029ae6:	4638      	mov	r0, r7
 8029ae8:	f7ff ff1e 	bl	8029928 <validate_structure>
 8029aec:	e9d7 4000 	ldrd	r4, r0, [r7]
 8029af0:	233c      	movs	r3, #60	; 0x3c
 8029af2:	fb03 4400 	mla	r4, r3, r0, r4
 8029af6:	68b8      	ldr	r0, [r7, #8]
 8029af8:	4abc      	ldr	r2, [pc, #752]	; (8029dec <mktime+0x314>)
 8029afa:	697e      	ldr	r6, [r7, #20]
 8029afc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8029b00:	fb03 4400 	mla	r4, r3, r0, r4
 8029b04:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8029b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029b0c:	3d01      	subs	r5, #1
 8029b0e:	2b01      	cmp	r3, #1
 8029b10:	4415      	add	r5, r2
 8029b12:	dd11      	ble.n	8029b38 <mktime+0x60>
 8029b14:	07b1      	lsls	r1, r6, #30
 8029b16:	d10f      	bne.n	8029b38 <mktime+0x60>
 8029b18:	2264      	movs	r2, #100	; 0x64
 8029b1a:	fb96 f3f2 	sdiv	r3, r6, r2
 8029b1e:	fb02 6313 	mls	r3, r2, r3, r6
 8029b22:	b943      	cbnz	r3, 8029b36 <mktime+0x5e>
 8029b24:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8029b28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8029b2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8029b30:	fb02 3311 	mls	r3, r2, r1, r3
 8029b34:	b903      	cbnz	r3, 8029b38 <mktime+0x60>
 8029b36:	3501      	adds	r5, #1
 8029b38:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8029b3c:	3310      	adds	r3, #16
 8029b3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8029b42:	4293      	cmp	r3, r2
 8029b44:	61fd      	str	r5, [r7, #28]
 8029b46:	f200 815d 	bhi.w	8029e04 <mktime+0x32c>
 8029b4a:	2e46      	cmp	r6, #70	; 0x46
 8029b4c:	dd71      	ble.n	8029c32 <mktime+0x15a>
 8029b4e:	2346      	movs	r3, #70	; 0x46
 8029b50:	f240 1c6d 	movw	ip, #365	; 0x16d
 8029b54:	2164      	movs	r1, #100	; 0x64
 8029b56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8029b5a:	079a      	lsls	r2, r3, #30
 8029b5c:	d163      	bne.n	8029c26 <mktime+0x14e>
 8029b5e:	fb93 f2f1 	sdiv	r2, r3, r1
 8029b62:	fb01 3212 	mls	r2, r1, r2, r3
 8029b66:	2a00      	cmp	r2, #0
 8029b68:	d160      	bne.n	8029c2c <mktime+0x154>
 8029b6a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8029b6e:	fb92 fef0 	sdiv	lr, r2, r0
 8029b72:	fb00 221e 	mls	r2, r0, lr, r2
 8029b76:	2a00      	cmp	r2, #0
 8029b78:	bf14      	ite	ne
 8029b7a:	4662      	movne	r2, ip
 8029b7c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8029b80:	3301      	adds	r3, #1
 8029b82:	429e      	cmp	r6, r3
 8029b84:	4415      	add	r5, r2
 8029b86:	d1e8      	bne.n	8029b5a <mktime+0x82>
 8029b88:	4b99      	ldr	r3, [pc, #612]	; (8029df0 <mktime+0x318>)
 8029b8a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8029b8e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8029b92:	f001 fb79 	bl	802b288 <__tz_lock>
 8029b96:	f001 fb83 	bl	802b2a0 <_tzset_unlocked>
 8029b9a:	4b96      	ldr	r3, [pc, #600]	; (8029df4 <mktime+0x31c>)
 8029b9c:	f8d3 b000 	ldr.w	fp, [r3]
 8029ba0:	f1bb 0f00 	cmp.w	fp, #0
 8029ba4:	d039      	beq.n	8029c1a <mktime+0x142>
 8029ba6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8029baa:	6978      	ldr	r0, [r7, #20]
 8029bac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8029bb0:	f1bb 0f01 	cmp.w	fp, #1
 8029bb4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8029bb8:	46da      	mov	sl, fp
 8029bba:	bfa8      	it	ge
 8029bbc:	f04f 0a01 	movge.w	sl, #1
 8029bc0:	4283      	cmp	r3, r0
 8029bc2:	d178      	bne.n	8029cb6 <mktime+0x1de>
 8029bc4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8029bc8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8029bcc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8029bd0:	1a5b      	subs	r3, r3, r1
 8029bd2:	9302      	str	r3, [sp, #8]
 8029bd4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8029bd8:	9303      	str	r3, [sp, #12]
 8029bda:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8029bde:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8029be2:	9301      	str	r3, [sp, #4]
 8029be4:	ebb3 0c02 	subs.w	ip, r3, r2
 8029be8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8029bec:	4564      	cmp	r4, ip
 8029bee:	eb78 0300 	sbcs.w	r3, r8, r0
 8029bf2:	da66      	bge.n	8029cc2 <mktime+0x1ea>
 8029bf4:	f8d9 3000 	ldr.w	r3, [r9]
 8029bf8:	2b00      	cmp	r3, #0
 8029bfa:	d06f      	beq.n	8029cdc <mktime+0x204>
 8029bfc:	9b02      	ldr	r3, [sp, #8]
 8029bfe:	429c      	cmp	r4, r3
 8029c00:	9b03      	ldr	r3, [sp, #12]
 8029c02:	eb78 0303 	sbcs.w	r3, r8, r3
 8029c06:	db03      	blt.n	8029c10 <mktime+0x138>
 8029c08:	4564      	cmp	r4, ip
 8029c0a:	eb78 0300 	sbcs.w	r3, r8, r0
 8029c0e:	db6b      	blt.n	8029ce8 <mktime+0x210>
 8029c10:	f1bb 0f00 	cmp.w	fp, #0
 8029c14:	f04f 0b00 	mov.w	fp, #0
 8029c18:	da6b      	bge.n	8029cf2 <mktime+0x21a>
 8029c1a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8029c1e:	190c      	adds	r4, r1, r4
 8029c20:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8029c24:	e0a9      	b.n	8029d7a <mktime+0x2a2>
 8029c26:	f240 126d 	movw	r2, #365	; 0x16d
 8029c2a:	e7a9      	b.n	8029b80 <mktime+0xa8>
 8029c2c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8029c30:	e7a6      	b.n	8029b80 <mktime+0xa8>
 8029c32:	d0a9      	beq.n	8029b88 <mktime+0xb0>
 8029c34:	2345      	movs	r3, #69	; 0x45
 8029c36:	f240 1c6d 	movw	ip, #365	; 0x16d
 8029c3a:	2164      	movs	r1, #100	; 0x64
 8029c3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8029c40:	e012      	b.n	8029c68 <mktime+0x190>
 8029c42:	bb62      	cbnz	r2, 8029c9e <mktime+0x1c6>
 8029c44:	fb93 f2f1 	sdiv	r2, r3, r1
 8029c48:	fb01 3212 	mls	r2, r1, r2, r3
 8029c4c:	bb52      	cbnz	r2, 8029ca4 <mktime+0x1cc>
 8029c4e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8029c52:	fb92 fef0 	sdiv	lr, r2, r0
 8029c56:	fb00 221e 	mls	r2, r0, lr, r2
 8029c5a:	2a00      	cmp	r2, #0
 8029c5c:	bf14      	ite	ne
 8029c5e:	4662      	movne	r2, ip
 8029c60:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8029c64:	1aad      	subs	r5, r5, r2
 8029c66:	3b01      	subs	r3, #1
 8029c68:	429e      	cmp	r6, r3
 8029c6a:	f003 0203 	and.w	r2, r3, #3
 8029c6e:	dbe8      	blt.n	8029c42 <mktime+0x16a>
 8029c70:	b9da      	cbnz	r2, 8029caa <mktime+0x1d2>
 8029c72:	2264      	movs	r2, #100	; 0x64
 8029c74:	fb96 f3f2 	sdiv	r3, r6, r2
 8029c78:	fb02 6313 	mls	r3, r2, r3, r6
 8029c7c:	b9c3      	cbnz	r3, 8029cb0 <mktime+0x1d8>
 8029c7e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8029c82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8029c86:	fb93 f1f2 	sdiv	r1, r3, r2
 8029c8a:	fb02 3311 	mls	r3, r2, r1, r3
 8029c8e:	2b00      	cmp	r3, #0
 8029c90:	f240 136d 	movw	r3, #365	; 0x16d
 8029c94:	bf08      	it	eq
 8029c96:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8029c9a:	1aed      	subs	r5, r5, r3
 8029c9c:	e774      	b.n	8029b88 <mktime+0xb0>
 8029c9e:	f240 126d 	movw	r2, #365	; 0x16d
 8029ca2:	e7df      	b.n	8029c64 <mktime+0x18c>
 8029ca4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8029ca8:	e7dc      	b.n	8029c64 <mktime+0x18c>
 8029caa:	f240 136d 	movw	r3, #365	; 0x16d
 8029cae:	e7f4      	b.n	8029c9a <mktime+0x1c2>
 8029cb0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8029cb4:	e7f1      	b.n	8029c9a <mktime+0x1c2>
 8029cb6:	f001 fa3d 	bl	802b134 <__tzcalc_limits>
 8029cba:	2800      	cmp	r0, #0
 8029cbc:	d182      	bne.n	8029bc4 <mktime+0xec>
 8029cbe:	46d3      	mov	fp, sl
 8029cc0:	e050      	b.n	8029d64 <mktime+0x28c>
 8029cc2:	9b01      	ldr	r3, [sp, #4]
 8029cc4:	1a5b      	subs	r3, r3, r1
 8029cc6:	9301      	str	r3, [sp, #4]
 8029cc8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8029ccc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8029cd0:	9b01      	ldr	r3, [sp, #4]
 8029cd2:	429c      	cmp	r4, r3
 8029cd4:	eb78 030e 	sbcs.w	r3, r8, lr
 8029cd8:	dbf1      	blt.n	8029cbe <mktime+0x1e6>
 8029cda:	e78b      	b.n	8029bf4 <mktime+0x11c>
 8029cdc:	9b02      	ldr	r3, [sp, #8]
 8029cde:	429c      	cmp	r4, r3
 8029ce0:	9b03      	ldr	r3, [sp, #12]
 8029ce2:	eb78 0303 	sbcs.w	r3, r8, r3
 8029ce6:	db8f      	blt.n	8029c08 <mktime+0x130>
 8029ce8:	f1bb 0f00 	cmp.w	fp, #0
 8029cec:	db3e      	blt.n	8029d6c <mktime+0x294>
 8029cee:	f04f 0b01 	mov.w	fp, #1
 8029cf2:	ea8a 0a0b 	eor.w	sl, sl, fp
 8029cf6:	f1ba 0f01 	cmp.w	sl, #1
 8029cfa:	d133      	bne.n	8029d64 <mktime+0x28c>
 8029cfc:	f1bb 0f00 	cmp.w	fp, #0
 8029d00:	d04e      	beq.n	8029da0 <mktime+0x2c8>
 8029d02:	1a52      	subs	r2, r2, r1
 8029d04:	683b      	ldr	r3, [r7, #0]
 8029d06:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8029d0a:	4413      	add	r3, r2
 8029d0c:	1914      	adds	r4, r2, r4
 8029d0e:	603b      	str	r3, [r7, #0]
 8029d10:	4638      	mov	r0, r7
 8029d12:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8029d16:	f7ff fe07 	bl	8029928 <validate_structure>
 8029d1a:	68fa      	ldr	r2, [r7, #12]
 8029d1c:	ebb2 020a 	subs.w	r2, r2, sl
 8029d20:	d020      	beq.n	8029d64 <mktime+0x28c>
 8029d22:	2a01      	cmp	r2, #1
 8029d24:	dc3e      	bgt.n	8029da4 <mktime+0x2cc>
 8029d26:	1c90      	adds	r0, r2, #2
 8029d28:	bfd8      	it	le
 8029d2a:	2201      	movle	r2, #1
 8029d2c:	69fb      	ldr	r3, [r7, #28]
 8029d2e:	18d3      	adds	r3, r2, r3
 8029d30:	4415      	add	r5, r2
 8029d32:	d540      	bpl.n	8029db6 <mktime+0x2de>
 8029d34:	1e73      	subs	r3, r6, #1
 8029d36:	0799      	lsls	r1, r3, #30
 8029d38:	d137      	bne.n	8029daa <mktime+0x2d2>
 8029d3a:	2264      	movs	r2, #100	; 0x64
 8029d3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8029d40:	fb02 3311 	mls	r3, r2, r1, r3
 8029d44:	bba3      	cbnz	r3, 8029db0 <mktime+0x2d8>
 8029d46:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8029d4a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8029d4e:	fb96 f2f3 	sdiv	r2, r6, r3
 8029d52:	fb03 6612 	mls	r6, r3, r2, r6
 8029d56:	2e00      	cmp	r6, #0
 8029d58:	f240 136d 	movw	r3, #365	; 0x16d
 8029d5c:	bf18      	it	ne
 8029d5e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8029d62:	61fb      	str	r3, [r7, #28]
 8029d64:	f1bb 0f01 	cmp.w	fp, #1
 8029d68:	f47f af57 	bne.w	8029c1a <mktime+0x142>
 8029d6c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8029d70:	190c      	adds	r4, r1, r4
 8029d72:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8029d76:	f04f 0b01 	mov.w	fp, #1
 8029d7a:	f001 fa8b 	bl	802b294 <__tz_unlock>
 8029d7e:	3504      	adds	r5, #4
 8029d80:	2307      	movs	r3, #7
 8029d82:	fb95 f3f3 	sdiv	r3, r5, r3
 8029d86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029d8a:	1aed      	subs	r5, r5, r3
 8029d8c:	bf48      	it	mi
 8029d8e:	3507      	addmi	r5, #7
 8029d90:	f8c7 b020 	str.w	fp, [r7, #32]
 8029d94:	61bd      	str	r5, [r7, #24]
 8029d96:	4620      	mov	r0, r4
 8029d98:	4641      	mov	r1, r8
 8029d9a:	b005      	add	sp, #20
 8029d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029da0:	1a8a      	subs	r2, r1, r2
 8029da2:	e7af      	b.n	8029d04 <mktime+0x22c>
 8029da4:	f04f 32ff 	mov.w	r2, #4294967295
 8029da8:	e7c0      	b.n	8029d2c <mktime+0x254>
 8029daa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8029dae:	e7d8      	b.n	8029d62 <mktime+0x28a>
 8029db0:	f240 136d 	movw	r3, #365	; 0x16d
 8029db4:	e7d5      	b.n	8029d62 <mktime+0x28a>
 8029db6:	07b2      	lsls	r2, r6, #30
 8029db8:	d11e      	bne.n	8029df8 <mktime+0x320>
 8029dba:	2164      	movs	r1, #100	; 0x64
 8029dbc:	fb96 f2f1 	sdiv	r2, r6, r1
 8029dc0:	fb01 6212 	mls	r2, r1, r2, r6
 8029dc4:	b9da      	cbnz	r2, 8029dfe <mktime+0x326>
 8029dc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8029dca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8029dce:	fb96 f1f2 	sdiv	r1, r6, r2
 8029dd2:	fb02 6611 	mls	r6, r2, r1, r6
 8029dd6:	2e00      	cmp	r6, #0
 8029dd8:	f240 126d 	movw	r2, #365	; 0x16d
 8029ddc:	bf08      	it	eq
 8029dde:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8029de2:	4293      	cmp	r3, r2
 8029de4:	bfa8      	it	ge
 8029de6:	1a9b      	subge	r3, r3, r2
 8029de8:	e7bb      	b.n	8029d62 <mktime+0x28a>
 8029dea:	bf00      	nop
 8029dec:	080307e8 	.word	0x080307e8
 8029df0:	00015180 	.word	0x00015180
 8029df4:	2003c49c 	.word	0x2003c49c
 8029df8:	f240 126d 	movw	r2, #365	; 0x16d
 8029dfc:	e7f1      	b.n	8029de2 <mktime+0x30a>
 8029dfe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8029e02:	e7ee      	b.n	8029de2 <mktime+0x30a>
 8029e04:	f04f 34ff 	mov.w	r4, #4294967295
 8029e08:	46a0      	mov	r8, r4
 8029e0a:	e7c4      	b.n	8029d96 <mktime+0x2be>

08029e0c <_free_r>:
 8029e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029e0e:	2900      	cmp	r1, #0
 8029e10:	d044      	beq.n	8029e9c <_free_r+0x90>
 8029e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029e16:	9001      	str	r0, [sp, #4]
 8029e18:	2b00      	cmp	r3, #0
 8029e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8029e1e:	bfb8      	it	lt
 8029e20:	18e4      	addlt	r4, r4, r3
 8029e22:	f002 f89f 	bl	802bf64 <__malloc_lock>
 8029e26:	4a1e      	ldr	r2, [pc, #120]	; (8029ea0 <_free_r+0x94>)
 8029e28:	9801      	ldr	r0, [sp, #4]
 8029e2a:	6813      	ldr	r3, [r2, #0]
 8029e2c:	b933      	cbnz	r3, 8029e3c <_free_r+0x30>
 8029e2e:	6063      	str	r3, [r4, #4]
 8029e30:	6014      	str	r4, [r2, #0]
 8029e32:	b003      	add	sp, #12
 8029e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029e38:	f002 b89a 	b.w	802bf70 <__malloc_unlock>
 8029e3c:	42a3      	cmp	r3, r4
 8029e3e:	d908      	bls.n	8029e52 <_free_r+0x46>
 8029e40:	6825      	ldr	r5, [r4, #0]
 8029e42:	1961      	adds	r1, r4, r5
 8029e44:	428b      	cmp	r3, r1
 8029e46:	bf01      	itttt	eq
 8029e48:	6819      	ldreq	r1, [r3, #0]
 8029e4a:	685b      	ldreq	r3, [r3, #4]
 8029e4c:	1949      	addeq	r1, r1, r5
 8029e4e:	6021      	streq	r1, [r4, #0]
 8029e50:	e7ed      	b.n	8029e2e <_free_r+0x22>
 8029e52:	461a      	mov	r2, r3
 8029e54:	685b      	ldr	r3, [r3, #4]
 8029e56:	b10b      	cbz	r3, 8029e5c <_free_r+0x50>
 8029e58:	42a3      	cmp	r3, r4
 8029e5a:	d9fa      	bls.n	8029e52 <_free_r+0x46>
 8029e5c:	6811      	ldr	r1, [r2, #0]
 8029e5e:	1855      	adds	r5, r2, r1
 8029e60:	42a5      	cmp	r5, r4
 8029e62:	d10b      	bne.n	8029e7c <_free_r+0x70>
 8029e64:	6824      	ldr	r4, [r4, #0]
 8029e66:	4421      	add	r1, r4
 8029e68:	1854      	adds	r4, r2, r1
 8029e6a:	42a3      	cmp	r3, r4
 8029e6c:	6011      	str	r1, [r2, #0]
 8029e6e:	d1e0      	bne.n	8029e32 <_free_r+0x26>
 8029e70:	681c      	ldr	r4, [r3, #0]
 8029e72:	685b      	ldr	r3, [r3, #4]
 8029e74:	6053      	str	r3, [r2, #4]
 8029e76:	4421      	add	r1, r4
 8029e78:	6011      	str	r1, [r2, #0]
 8029e7a:	e7da      	b.n	8029e32 <_free_r+0x26>
 8029e7c:	d902      	bls.n	8029e84 <_free_r+0x78>
 8029e7e:	230c      	movs	r3, #12
 8029e80:	6003      	str	r3, [r0, #0]
 8029e82:	e7d6      	b.n	8029e32 <_free_r+0x26>
 8029e84:	6825      	ldr	r5, [r4, #0]
 8029e86:	1961      	adds	r1, r4, r5
 8029e88:	428b      	cmp	r3, r1
 8029e8a:	bf04      	itt	eq
 8029e8c:	6819      	ldreq	r1, [r3, #0]
 8029e8e:	685b      	ldreq	r3, [r3, #4]
 8029e90:	6063      	str	r3, [r4, #4]
 8029e92:	bf04      	itt	eq
 8029e94:	1949      	addeq	r1, r1, r5
 8029e96:	6021      	streq	r1, [r4, #0]
 8029e98:	6054      	str	r4, [r2, #4]
 8029e9a:	e7ca      	b.n	8029e32 <_free_r+0x26>
 8029e9c:	b003      	add	sp, #12
 8029e9e:	bd30      	pop	{r4, r5, pc}
 8029ea0:	2003c370 	.word	0x2003c370

08029ea4 <sbrk_aligned>:
 8029ea4:	b570      	push	{r4, r5, r6, lr}
 8029ea6:	4e0e      	ldr	r6, [pc, #56]	; (8029ee0 <sbrk_aligned+0x3c>)
 8029ea8:	460c      	mov	r4, r1
 8029eaa:	6831      	ldr	r1, [r6, #0]
 8029eac:	4605      	mov	r5, r0
 8029eae:	b911      	cbnz	r1, 8029eb6 <sbrk_aligned+0x12>
 8029eb0:	f000 fb7a 	bl	802a5a8 <_sbrk_r>
 8029eb4:	6030      	str	r0, [r6, #0]
 8029eb6:	4621      	mov	r1, r4
 8029eb8:	4628      	mov	r0, r5
 8029eba:	f000 fb75 	bl	802a5a8 <_sbrk_r>
 8029ebe:	1c43      	adds	r3, r0, #1
 8029ec0:	d00a      	beq.n	8029ed8 <sbrk_aligned+0x34>
 8029ec2:	1cc4      	adds	r4, r0, #3
 8029ec4:	f024 0403 	bic.w	r4, r4, #3
 8029ec8:	42a0      	cmp	r0, r4
 8029eca:	d007      	beq.n	8029edc <sbrk_aligned+0x38>
 8029ecc:	1a21      	subs	r1, r4, r0
 8029ece:	4628      	mov	r0, r5
 8029ed0:	f000 fb6a 	bl	802a5a8 <_sbrk_r>
 8029ed4:	3001      	adds	r0, #1
 8029ed6:	d101      	bne.n	8029edc <sbrk_aligned+0x38>
 8029ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8029edc:	4620      	mov	r0, r4
 8029ede:	bd70      	pop	{r4, r5, r6, pc}
 8029ee0:	2003c374 	.word	0x2003c374

08029ee4 <_malloc_r>:
 8029ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ee8:	1ccd      	adds	r5, r1, #3
 8029eea:	f025 0503 	bic.w	r5, r5, #3
 8029eee:	3508      	adds	r5, #8
 8029ef0:	2d0c      	cmp	r5, #12
 8029ef2:	bf38      	it	cc
 8029ef4:	250c      	movcc	r5, #12
 8029ef6:	2d00      	cmp	r5, #0
 8029ef8:	4607      	mov	r7, r0
 8029efa:	db01      	blt.n	8029f00 <_malloc_r+0x1c>
 8029efc:	42a9      	cmp	r1, r5
 8029efe:	d905      	bls.n	8029f0c <_malloc_r+0x28>
 8029f00:	230c      	movs	r3, #12
 8029f02:	603b      	str	r3, [r7, #0]
 8029f04:	2600      	movs	r6, #0
 8029f06:	4630      	mov	r0, r6
 8029f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029f0c:	4e2e      	ldr	r6, [pc, #184]	; (8029fc8 <_malloc_r+0xe4>)
 8029f0e:	f002 f829 	bl	802bf64 <__malloc_lock>
 8029f12:	6833      	ldr	r3, [r6, #0]
 8029f14:	461c      	mov	r4, r3
 8029f16:	bb34      	cbnz	r4, 8029f66 <_malloc_r+0x82>
 8029f18:	4629      	mov	r1, r5
 8029f1a:	4638      	mov	r0, r7
 8029f1c:	f7ff ffc2 	bl	8029ea4 <sbrk_aligned>
 8029f20:	1c43      	adds	r3, r0, #1
 8029f22:	4604      	mov	r4, r0
 8029f24:	d14d      	bne.n	8029fc2 <_malloc_r+0xde>
 8029f26:	6834      	ldr	r4, [r6, #0]
 8029f28:	4626      	mov	r6, r4
 8029f2a:	2e00      	cmp	r6, #0
 8029f2c:	d140      	bne.n	8029fb0 <_malloc_r+0xcc>
 8029f2e:	6823      	ldr	r3, [r4, #0]
 8029f30:	4631      	mov	r1, r6
 8029f32:	4638      	mov	r0, r7
 8029f34:	eb04 0803 	add.w	r8, r4, r3
 8029f38:	f000 fb36 	bl	802a5a8 <_sbrk_r>
 8029f3c:	4580      	cmp	r8, r0
 8029f3e:	d13a      	bne.n	8029fb6 <_malloc_r+0xd2>
 8029f40:	6821      	ldr	r1, [r4, #0]
 8029f42:	3503      	adds	r5, #3
 8029f44:	1a6d      	subs	r5, r5, r1
 8029f46:	f025 0503 	bic.w	r5, r5, #3
 8029f4a:	3508      	adds	r5, #8
 8029f4c:	2d0c      	cmp	r5, #12
 8029f4e:	bf38      	it	cc
 8029f50:	250c      	movcc	r5, #12
 8029f52:	4629      	mov	r1, r5
 8029f54:	4638      	mov	r0, r7
 8029f56:	f7ff ffa5 	bl	8029ea4 <sbrk_aligned>
 8029f5a:	3001      	adds	r0, #1
 8029f5c:	d02b      	beq.n	8029fb6 <_malloc_r+0xd2>
 8029f5e:	6823      	ldr	r3, [r4, #0]
 8029f60:	442b      	add	r3, r5
 8029f62:	6023      	str	r3, [r4, #0]
 8029f64:	e00e      	b.n	8029f84 <_malloc_r+0xa0>
 8029f66:	6822      	ldr	r2, [r4, #0]
 8029f68:	1b52      	subs	r2, r2, r5
 8029f6a:	d41e      	bmi.n	8029faa <_malloc_r+0xc6>
 8029f6c:	2a0b      	cmp	r2, #11
 8029f6e:	d916      	bls.n	8029f9e <_malloc_r+0xba>
 8029f70:	1961      	adds	r1, r4, r5
 8029f72:	42a3      	cmp	r3, r4
 8029f74:	6025      	str	r5, [r4, #0]
 8029f76:	bf18      	it	ne
 8029f78:	6059      	strne	r1, [r3, #4]
 8029f7a:	6863      	ldr	r3, [r4, #4]
 8029f7c:	bf08      	it	eq
 8029f7e:	6031      	streq	r1, [r6, #0]
 8029f80:	5162      	str	r2, [r4, r5]
 8029f82:	604b      	str	r3, [r1, #4]
 8029f84:	4638      	mov	r0, r7
 8029f86:	f104 060b 	add.w	r6, r4, #11
 8029f8a:	f001 fff1 	bl	802bf70 <__malloc_unlock>
 8029f8e:	f026 0607 	bic.w	r6, r6, #7
 8029f92:	1d23      	adds	r3, r4, #4
 8029f94:	1af2      	subs	r2, r6, r3
 8029f96:	d0b6      	beq.n	8029f06 <_malloc_r+0x22>
 8029f98:	1b9b      	subs	r3, r3, r6
 8029f9a:	50a3      	str	r3, [r4, r2]
 8029f9c:	e7b3      	b.n	8029f06 <_malloc_r+0x22>
 8029f9e:	6862      	ldr	r2, [r4, #4]
 8029fa0:	42a3      	cmp	r3, r4
 8029fa2:	bf0c      	ite	eq
 8029fa4:	6032      	streq	r2, [r6, #0]
 8029fa6:	605a      	strne	r2, [r3, #4]
 8029fa8:	e7ec      	b.n	8029f84 <_malloc_r+0xa0>
 8029faa:	4623      	mov	r3, r4
 8029fac:	6864      	ldr	r4, [r4, #4]
 8029fae:	e7b2      	b.n	8029f16 <_malloc_r+0x32>
 8029fb0:	4634      	mov	r4, r6
 8029fb2:	6876      	ldr	r6, [r6, #4]
 8029fb4:	e7b9      	b.n	8029f2a <_malloc_r+0x46>
 8029fb6:	230c      	movs	r3, #12
 8029fb8:	603b      	str	r3, [r7, #0]
 8029fba:	4638      	mov	r0, r7
 8029fbc:	f001 ffd8 	bl	802bf70 <__malloc_unlock>
 8029fc0:	e7a1      	b.n	8029f06 <_malloc_r+0x22>
 8029fc2:	6025      	str	r5, [r4, #0]
 8029fc4:	e7de      	b.n	8029f84 <_malloc_r+0xa0>
 8029fc6:	bf00      	nop
 8029fc8:	2003c370 	.word	0x2003c370

08029fcc <__sfputc_r>:
 8029fcc:	6893      	ldr	r3, [r2, #8]
 8029fce:	3b01      	subs	r3, #1
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	b410      	push	{r4}
 8029fd4:	6093      	str	r3, [r2, #8]
 8029fd6:	da08      	bge.n	8029fea <__sfputc_r+0x1e>
 8029fd8:	6994      	ldr	r4, [r2, #24]
 8029fda:	42a3      	cmp	r3, r4
 8029fdc:	db01      	blt.n	8029fe2 <__sfputc_r+0x16>
 8029fde:	290a      	cmp	r1, #10
 8029fe0:	d103      	bne.n	8029fea <__sfputc_r+0x1e>
 8029fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029fe6:	f001 bae1 	b.w	802b5ac <__swbuf_r>
 8029fea:	6813      	ldr	r3, [r2, #0]
 8029fec:	1c58      	adds	r0, r3, #1
 8029fee:	6010      	str	r0, [r2, #0]
 8029ff0:	7019      	strb	r1, [r3, #0]
 8029ff2:	4608      	mov	r0, r1
 8029ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ff8:	4770      	bx	lr

08029ffa <__sfputs_r>:
 8029ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ffc:	4606      	mov	r6, r0
 8029ffe:	460f      	mov	r7, r1
 802a000:	4614      	mov	r4, r2
 802a002:	18d5      	adds	r5, r2, r3
 802a004:	42ac      	cmp	r4, r5
 802a006:	d101      	bne.n	802a00c <__sfputs_r+0x12>
 802a008:	2000      	movs	r0, #0
 802a00a:	e007      	b.n	802a01c <__sfputs_r+0x22>
 802a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a010:	463a      	mov	r2, r7
 802a012:	4630      	mov	r0, r6
 802a014:	f7ff ffda 	bl	8029fcc <__sfputc_r>
 802a018:	1c43      	adds	r3, r0, #1
 802a01a:	d1f3      	bne.n	802a004 <__sfputs_r+0xa>
 802a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a020 <_vfiprintf_r>:
 802a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a024:	460d      	mov	r5, r1
 802a026:	b09d      	sub	sp, #116	; 0x74
 802a028:	4614      	mov	r4, r2
 802a02a:	4698      	mov	r8, r3
 802a02c:	4606      	mov	r6, r0
 802a02e:	b118      	cbz	r0, 802a038 <_vfiprintf_r+0x18>
 802a030:	6983      	ldr	r3, [r0, #24]
 802a032:	b90b      	cbnz	r3, 802a038 <_vfiprintf_r+0x18>
 802a034:	f001 fd2c 	bl	802ba90 <__sinit>
 802a038:	4b89      	ldr	r3, [pc, #548]	; (802a260 <_vfiprintf_r+0x240>)
 802a03a:	429d      	cmp	r5, r3
 802a03c:	d11b      	bne.n	802a076 <_vfiprintf_r+0x56>
 802a03e:	6875      	ldr	r5, [r6, #4]
 802a040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a042:	07d9      	lsls	r1, r3, #31
 802a044:	d405      	bmi.n	802a052 <_vfiprintf_r+0x32>
 802a046:	89ab      	ldrh	r3, [r5, #12]
 802a048:	059a      	lsls	r2, r3, #22
 802a04a:	d402      	bmi.n	802a052 <_vfiprintf_r+0x32>
 802a04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a04e:	f001 fefb 	bl	802be48 <__retarget_lock_acquire_recursive>
 802a052:	89ab      	ldrh	r3, [r5, #12]
 802a054:	071b      	lsls	r3, r3, #28
 802a056:	d501      	bpl.n	802a05c <_vfiprintf_r+0x3c>
 802a058:	692b      	ldr	r3, [r5, #16]
 802a05a:	b9eb      	cbnz	r3, 802a098 <_vfiprintf_r+0x78>
 802a05c:	4629      	mov	r1, r5
 802a05e:	4630      	mov	r0, r6
 802a060:	f001 fb08 	bl	802b674 <__swsetup_r>
 802a064:	b1c0      	cbz	r0, 802a098 <_vfiprintf_r+0x78>
 802a066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a068:	07dc      	lsls	r4, r3, #31
 802a06a:	d50e      	bpl.n	802a08a <_vfiprintf_r+0x6a>
 802a06c:	f04f 30ff 	mov.w	r0, #4294967295
 802a070:	b01d      	add	sp, #116	; 0x74
 802a072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a076:	4b7b      	ldr	r3, [pc, #492]	; (802a264 <_vfiprintf_r+0x244>)
 802a078:	429d      	cmp	r5, r3
 802a07a:	d101      	bne.n	802a080 <_vfiprintf_r+0x60>
 802a07c:	68b5      	ldr	r5, [r6, #8]
 802a07e:	e7df      	b.n	802a040 <_vfiprintf_r+0x20>
 802a080:	4b79      	ldr	r3, [pc, #484]	; (802a268 <_vfiprintf_r+0x248>)
 802a082:	429d      	cmp	r5, r3
 802a084:	bf08      	it	eq
 802a086:	68f5      	ldreq	r5, [r6, #12]
 802a088:	e7da      	b.n	802a040 <_vfiprintf_r+0x20>
 802a08a:	89ab      	ldrh	r3, [r5, #12]
 802a08c:	0598      	lsls	r0, r3, #22
 802a08e:	d4ed      	bmi.n	802a06c <_vfiprintf_r+0x4c>
 802a090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a092:	f001 fedb 	bl	802be4c <__retarget_lock_release_recursive>
 802a096:	e7e9      	b.n	802a06c <_vfiprintf_r+0x4c>
 802a098:	2300      	movs	r3, #0
 802a09a:	9309      	str	r3, [sp, #36]	; 0x24
 802a09c:	2320      	movs	r3, #32
 802a09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 802a0a6:	2330      	movs	r3, #48	; 0x30
 802a0a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a26c <_vfiprintf_r+0x24c>
 802a0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a0b0:	f04f 0901 	mov.w	r9, #1
 802a0b4:	4623      	mov	r3, r4
 802a0b6:	469a      	mov	sl, r3
 802a0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0bc:	b10a      	cbz	r2, 802a0c2 <_vfiprintf_r+0xa2>
 802a0be:	2a25      	cmp	r2, #37	; 0x25
 802a0c0:	d1f9      	bne.n	802a0b6 <_vfiprintf_r+0x96>
 802a0c2:	ebba 0b04 	subs.w	fp, sl, r4
 802a0c6:	d00b      	beq.n	802a0e0 <_vfiprintf_r+0xc0>
 802a0c8:	465b      	mov	r3, fp
 802a0ca:	4622      	mov	r2, r4
 802a0cc:	4629      	mov	r1, r5
 802a0ce:	4630      	mov	r0, r6
 802a0d0:	f7ff ff93 	bl	8029ffa <__sfputs_r>
 802a0d4:	3001      	adds	r0, #1
 802a0d6:	f000 80aa 	beq.w	802a22e <_vfiprintf_r+0x20e>
 802a0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a0dc:	445a      	add	r2, fp
 802a0de:	9209      	str	r2, [sp, #36]	; 0x24
 802a0e0:	f89a 3000 	ldrb.w	r3, [sl]
 802a0e4:	2b00      	cmp	r3, #0
 802a0e6:	f000 80a2 	beq.w	802a22e <_vfiprintf_r+0x20e>
 802a0ea:	2300      	movs	r3, #0
 802a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 802a0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a0f4:	f10a 0a01 	add.w	sl, sl, #1
 802a0f8:	9304      	str	r3, [sp, #16]
 802a0fa:	9307      	str	r3, [sp, #28]
 802a0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a100:	931a      	str	r3, [sp, #104]	; 0x68
 802a102:	4654      	mov	r4, sl
 802a104:	2205      	movs	r2, #5
 802a106:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a10a:	4858      	ldr	r0, [pc, #352]	; (802a26c <_vfiprintf_r+0x24c>)
 802a10c:	f7d6 f8a0 	bl	8000250 <memchr>
 802a110:	9a04      	ldr	r2, [sp, #16]
 802a112:	b9d8      	cbnz	r0, 802a14c <_vfiprintf_r+0x12c>
 802a114:	06d1      	lsls	r1, r2, #27
 802a116:	bf44      	itt	mi
 802a118:	2320      	movmi	r3, #32
 802a11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a11e:	0713      	lsls	r3, r2, #28
 802a120:	bf44      	itt	mi
 802a122:	232b      	movmi	r3, #43	; 0x2b
 802a124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a128:	f89a 3000 	ldrb.w	r3, [sl]
 802a12c:	2b2a      	cmp	r3, #42	; 0x2a
 802a12e:	d015      	beq.n	802a15c <_vfiprintf_r+0x13c>
 802a130:	9a07      	ldr	r2, [sp, #28]
 802a132:	4654      	mov	r4, sl
 802a134:	2000      	movs	r0, #0
 802a136:	f04f 0c0a 	mov.w	ip, #10
 802a13a:	4621      	mov	r1, r4
 802a13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a140:	3b30      	subs	r3, #48	; 0x30
 802a142:	2b09      	cmp	r3, #9
 802a144:	d94e      	bls.n	802a1e4 <_vfiprintf_r+0x1c4>
 802a146:	b1b0      	cbz	r0, 802a176 <_vfiprintf_r+0x156>
 802a148:	9207      	str	r2, [sp, #28]
 802a14a:	e014      	b.n	802a176 <_vfiprintf_r+0x156>
 802a14c:	eba0 0308 	sub.w	r3, r0, r8
 802a150:	fa09 f303 	lsl.w	r3, r9, r3
 802a154:	4313      	orrs	r3, r2
 802a156:	9304      	str	r3, [sp, #16]
 802a158:	46a2      	mov	sl, r4
 802a15a:	e7d2      	b.n	802a102 <_vfiprintf_r+0xe2>
 802a15c:	9b03      	ldr	r3, [sp, #12]
 802a15e:	1d19      	adds	r1, r3, #4
 802a160:	681b      	ldr	r3, [r3, #0]
 802a162:	9103      	str	r1, [sp, #12]
 802a164:	2b00      	cmp	r3, #0
 802a166:	bfbb      	ittet	lt
 802a168:	425b      	neglt	r3, r3
 802a16a:	f042 0202 	orrlt.w	r2, r2, #2
 802a16e:	9307      	strge	r3, [sp, #28]
 802a170:	9307      	strlt	r3, [sp, #28]
 802a172:	bfb8      	it	lt
 802a174:	9204      	strlt	r2, [sp, #16]
 802a176:	7823      	ldrb	r3, [r4, #0]
 802a178:	2b2e      	cmp	r3, #46	; 0x2e
 802a17a:	d10c      	bne.n	802a196 <_vfiprintf_r+0x176>
 802a17c:	7863      	ldrb	r3, [r4, #1]
 802a17e:	2b2a      	cmp	r3, #42	; 0x2a
 802a180:	d135      	bne.n	802a1ee <_vfiprintf_r+0x1ce>
 802a182:	9b03      	ldr	r3, [sp, #12]
 802a184:	1d1a      	adds	r2, r3, #4
 802a186:	681b      	ldr	r3, [r3, #0]
 802a188:	9203      	str	r2, [sp, #12]
 802a18a:	2b00      	cmp	r3, #0
 802a18c:	bfb8      	it	lt
 802a18e:	f04f 33ff 	movlt.w	r3, #4294967295
 802a192:	3402      	adds	r4, #2
 802a194:	9305      	str	r3, [sp, #20]
 802a196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a27c <_vfiprintf_r+0x25c>
 802a19a:	7821      	ldrb	r1, [r4, #0]
 802a19c:	2203      	movs	r2, #3
 802a19e:	4650      	mov	r0, sl
 802a1a0:	f7d6 f856 	bl	8000250 <memchr>
 802a1a4:	b140      	cbz	r0, 802a1b8 <_vfiprintf_r+0x198>
 802a1a6:	2340      	movs	r3, #64	; 0x40
 802a1a8:	eba0 000a 	sub.w	r0, r0, sl
 802a1ac:	fa03 f000 	lsl.w	r0, r3, r0
 802a1b0:	9b04      	ldr	r3, [sp, #16]
 802a1b2:	4303      	orrs	r3, r0
 802a1b4:	3401      	adds	r4, #1
 802a1b6:	9304      	str	r3, [sp, #16]
 802a1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a1bc:	482c      	ldr	r0, [pc, #176]	; (802a270 <_vfiprintf_r+0x250>)
 802a1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a1c2:	2206      	movs	r2, #6
 802a1c4:	f7d6 f844 	bl	8000250 <memchr>
 802a1c8:	2800      	cmp	r0, #0
 802a1ca:	d03f      	beq.n	802a24c <_vfiprintf_r+0x22c>
 802a1cc:	4b29      	ldr	r3, [pc, #164]	; (802a274 <_vfiprintf_r+0x254>)
 802a1ce:	bb1b      	cbnz	r3, 802a218 <_vfiprintf_r+0x1f8>
 802a1d0:	9b03      	ldr	r3, [sp, #12]
 802a1d2:	3307      	adds	r3, #7
 802a1d4:	f023 0307 	bic.w	r3, r3, #7
 802a1d8:	3308      	adds	r3, #8
 802a1da:	9303      	str	r3, [sp, #12]
 802a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a1de:	443b      	add	r3, r7
 802a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 802a1e2:	e767      	b.n	802a0b4 <_vfiprintf_r+0x94>
 802a1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 802a1e8:	460c      	mov	r4, r1
 802a1ea:	2001      	movs	r0, #1
 802a1ec:	e7a5      	b.n	802a13a <_vfiprintf_r+0x11a>
 802a1ee:	2300      	movs	r3, #0
 802a1f0:	3401      	adds	r4, #1
 802a1f2:	9305      	str	r3, [sp, #20]
 802a1f4:	4619      	mov	r1, r3
 802a1f6:	f04f 0c0a 	mov.w	ip, #10
 802a1fa:	4620      	mov	r0, r4
 802a1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a200:	3a30      	subs	r2, #48	; 0x30
 802a202:	2a09      	cmp	r2, #9
 802a204:	d903      	bls.n	802a20e <_vfiprintf_r+0x1ee>
 802a206:	2b00      	cmp	r3, #0
 802a208:	d0c5      	beq.n	802a196 <_vfiprintf_r+0x176>
 802a20a:	9105      	str	r1, [sp, #20]
 802a20c:	e7c3      	b.n	802a196 <_vfiprintf_r+0x176>
 802a20e:	fb0c 2101 	mla	r1, ip, r1, r2
 802a212:	4604      	mov	r4, r0
 802a214:	2301      	movs	r3, #1
 802a216:	e7f0      	b.n	802a1fa <_vfiprintf_r+0x1da>
 802a218:	ab03      	add	r3, sp, #12
 802a21a:	9300      	str	r3, [sp, #0]
 802a21c:	462a      	mov	r2, r5
 802a21e:	4b16      	ldr	r3, [pc, #88]	; (802a278 <_vfiprintf_r+0x258>)
 802a220:	a904      	add	r1, sp, #16
 802a222:	4630      	mov	r0, r6
 802a224:	f3af 8000 	nop.w
 802a228:	4607      	mov	r7, r0
 802a22a:	1c78      	adds	r0, r7, #1
 802a22c:	d1d6      	bne.n	802a1dc <_vfiprintf_r+0x1bc>
 802a22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a230:	07d9      	lsls	r1, r3, #31
 802a232:	d405      	bmi.n	802a240 <_vfiprintf_r+0x220>
 802a234:	89ab      	ldrh	r3, [r5, #12]
 802a236:	059a      	lsls	r2, r3, #22
 802a238:	d402      	bmi.n	802a240 <_vfiprintf_r+0x220>
 802a23a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a23c:	f001 fe06 	bl	802be4c <__retarget_lock_release_recursive>
 802a240:	89ab      	ldrh	r3, [r5, #12]
 802a242:	065b      	lsls	r3, r3, #25
 802a244:	f53f af12 	bmi.w	802a06c <_vfiprintf_r+0x4c>
 802a248:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a24a:	e711      	b.n	802a070 <_vfiprintf_r+0x50>
 802a24c:	ab03      	add	r3, sp, #12
 802a24e:	9300      	str	r3, [sp, #0]
 802a250:	462a      	mov	r2, r5
 802a252:	4b09      	ldr	r3, [pc, #36]	; (802a278 <_vfiprintf_r+0x258>)
 802a254:	a904      	add	r1, sp, #16
 802a256:	4630      	mov	r0, r6
 802a258:	f000 f880 	bl	802a35c <_printf_i>
 802a25c:	e7e4      	b.n	802a228 <_vfiprintf_r+0x208>
 802a25e:	bf00      	nop
 802a260:	08030c1c 	.word	0x08030c1c
 802a264:	08030c3c 	.word	0x08030c3c
 802a268:	08030bfc 	.word	0x08030bfc
 802a26c:	08030818 	.word	0x08030818
 802a270:	08030822 	.word	0x08030822
 802a274:	00000000 	.word	0x00000000
 802a278:	08029ffb 	.word	0x08029ffb
 802a27c:	0803081e 	.word	0x0803081e

0802a280 <_printf_common>:
 802a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a284:	4616      	mov	r6, r2
 802a286:	4699      	mov	r9, r3
 802a288:	688a      	ldr	r2, [r1, #8]
 802a28a:	690b      	ldr	r3, [r1, #16]
 802a28c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a290:	4293      	cmp	r3, r2
 802a292:	bfb8      	it	lt
 802a294:	4613      	movlt	r3, r2
 802a296:	6033      	str	r3, [r6, #0]
 802a298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a29c:	4607      	mov	r7, r0
 802a29e:	460c      	mov	r4, r1
 802a2a0:	b10a      	cbz	r2, 802a2a6 <_printf_common+0x26>
 802a2a2:	3301      	adds	r3, #1
 802a2a4:	6033      	str	r3, [r6, #0]
 802a2a6:	6823      	ldr	r3, [r4, #0]
 802a2a8:	0699      	lsls	r1, r3, #26
 802a2aa:	bf42      	ittt	mi
 802a2ac:	6833      	ldrmi	r3, [r6, #0]
 802a2ae:	3302      	addmi	r3, #2
 802a2b0:	6033      	strmi	r3, [r6, #0]
 802a2b2:	6825      	ldr	r5, [r4, #0]
 802a2b4:	f015 0506 	ands.w	r5, r5, #6
 802a2b8:	d106      	bne.n	802a2c8 <_printf_common+0x48>
 802a2ba:	f104 0a19 	add.w	sl, r4, #25
 802a2be:	68e3      	ldr	r3, [r4, #12]
 802a2c0:	6832      	ldr	r2, [r6, #0]
 802a2c2:	1a9b      	subs	r3, r3, r2
 802a2c4:	42ab      	cmp	r3, r5
 802a2c6:	dc26      	bgt.n	802a316 <_printf_common+0x96>
 802a2c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a2cc:	1e13      	subs	r3, r2, #0
 802a2ce:	6822      	ldr	r2, [r4, #0]
 802a2d0:	bf18      	it	ne
 802a2d2:	2301      	movne	r3, #1
 802a2d4:	0692      	lsls	r2, r2, #26
 802a2d6:	d42b      	bmi.n	802a330 <_printf_common+0xb0>
 802a2d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a2dc:	4649      	mov	r1, r9
 802a2de:	4638      	mov	r0, r7
 802a2e0:	47c0      	blx	r8
 802a2e2:	3001      	adds	r0, #1
 802a2e4:	d01e      	beq.n	802a324 <_printf_common+0xa4>
 802a2e6:	6823      	ldr	r3, [r4, #0]
 802a2e8:	68e5      	ldr	r5, [r4, #12]
 802a2ea:	6832      	ldr	r2, [r6, #0]
 802a2ec:	f003 0306 	and.w	r3, r3, #6
 802a2f0:	2b04      	cmp	r3, #4
 802a2f2:	bf08      	it	eq
 802a2f4:	1aad      	subeq	r5, r5, r2
 802a2f6:	68a3      	ldr	r3, [r4, #8]
 802a2f8:	6922      	ldr	r2, [r4, #16]
 802a2fa:	bf0c      	ite	eq
 802a2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a300:	2500      	movne	r5, #0
 802a302:	4293      	cmp	r3, r2
 802a304:	bfc4      	itt	gt
 802a306:	1a9b      	subgt	r3, r3, r2
 802a308:	18ed      	addgt	r5, r5, r3
 802a30a:	2600      	movs	r6, #0
 802a30c:	341a      	adds	r4, #26
 802a30e:	42b5      	cmp	r5, r6
 802a310:	d11a      	bne.n	802a348 <_printf_common+0xc8>
 802a312:	2000      	movs	r0, #0
 802a314:	e008      	b.n	802a328 <_printf_common+0xa8>
 802a316:	2301      	movs	r3, #1
 802a318:	4652      	mov	r2, sl
 802a31a:	4649      	mov	r1, r9
 802a31c:	4638      	mov	r0, r7
 802a31e:	47c0      	blx	r8
 802a320:	3001      	adds	r0, #1
 802a322:	d103      	bne.n	802a32c <_printf_common+0xac>
 802a324:	f04f 30ff 	mov.w	r0, #4294967295
 802a328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a32c:	3501      	adds	r5, #1
 802a32e:	e7c6      	b.n	802a2be <_printf_common+0x3e>
 802a330:	18e1      	adds	r1, r4, r3
 802a332:	1c5a      	adds	r2, r3, #1
 802a334:	2030      	movs	r0, #48	; 0x30
 802a336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a33a:	4422      	add	r2, r4
 802a33c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a344:	3302      	adds	r3, #2
 802a346:	e7c7      	b.n	802a2d8 <_printf_common+0x58>
 802a348:	2301      	movs	r3, #1
 802a34a:	4622      	mov	r2, r4
 802a34c:	4649      	mov	r1, r9
 802a34e:	4638      	mov	r0, r7
 802a350:	47c0      	blx	r8
 802a352:	3001      	adds	r0, #1
 802a354:	d0e6      	beq.n	802a324 <_printf_common+0xa4>
 802a356:	3601      	adds	r6, #1
 802a358:	e7d9      	b.n	802a30e <_printf_common+0x8e>
	...

0802a35c <_printf_i>:
 802a35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a360:	7e0f      	ldrb	r7, [r1, #24]
 802a362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a364:	2f78      	cmp	r7, #120	; 0x78
 802a366:	4691      	mov	r9, r2
 802a368:	4680      	mov	r8, r0
 802a36a:	460c      	mov	r4, r1
 802a36c:	469a      	mov	sl, r3
 802a36e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802a372:	d807      	bhi.n	802a384 <_printf_i+0x28>
 802a374:	2f62      	cmp	r7, #98	; 0x62
 802a376:	d80a      	bhi.n	802a38e <_printf_i+0x32>
 802a378:	2f00      	cmp	r7, #0
 802a37a:	f000 80d8 	beq.w	802a52e <_printf_i+0x1d2>
 802a37e:	2f58      	cmp	r7, #88	; 0x58
 802a380:	f000 80a3 	beq.w	802a4ca <_printf_i+0x16e>
 802a384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a38c:	e03a      	b.n	802a404 <_printf_i+0xa8>
 802a38e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a392:	2b15      	cmp	r3, #21
 802a394:	d8f6      	bhi.n	802a384 <_printf_i+0x28>
 802a396:	a101      	add	r1, pc, #4	; (adr r1, 802a39c <_printf_i+0x40>)
 802a398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a39c:	0802a3f5 	.word	0x0802a3f5
 802a3a0:	0802a409 	.word	0x0802a409
 802a3a4:	0802a385 	.word	0x0802a385
 802a3a8:	0802a385 	.word	0x0802a385
 802a3ac:	0802a385 	.word	0x0802a385
 802a3b0:	0802a385 	.word	0x0802a385
 802a3b4:	0802a409 	.word	0x0802a409
 802a3b8:	0802a385 	.word	0x0802a385
 802a3bc:	0802a385 	.word	0x0802a385
 802a3c0:	0802a385 	.word	0x0802a385
 802a3c4:	0802a385 	.word	0x0802a385
 802a3c8:	0802a515 	.word	0x0802a515
 802a3cc:	0802a439 	.word	0x0802a439
 802a3d0:	0802a4f7 	.word	0x0802a4f7
 802a3d4:	0802a385 	.word	0x0802a385
 802a3d8:	0802a385 	.word	0x0802a385
 802a3dc:	0802a537 	.word	0x0802a537
 802a3e0:	0802a385 	.word	0x0802a385
 802a3e4:	0802a439 	.word	0x0802a439
 802a3e8:	0802a385 	.word	0x0802a385
 802a3ec:	0802a385 	.word	0x0802a385
 802a3f0:	0802a4ff 	.word	0x0802a4ff
 802a3f4:	682b      	ldr	r3, [r5, #0]
 802a3f6:	1d1a      	adds	r2, r3, #4
 802a3f8:	681b      	ldr	r3, [r3, #0]
 802a3fa:	602a      	str	r2, [r5, #0]
 802a3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a404:	2301      	movs	r3, #1
 802a406:	e0a3      	b.n	802a550 <_printf_i+0x1f4>
 802a408:	6820      	ldr	r0, [r4, #0]
 802a40a:	6829      	ldr	r1, [r5, #0]
 802a40c:	0606      	lsls	r6, r0, #24
 802a40e:	f101 0304 	add.w	r3, r1, #4
 802a412:	d50a      	bpl.n	802a42a <_printf_i+0xce>
 802a414:	680e      	ldr	r6, [r1, #0]
 802a416:	602b      	str	r3, [r5, #0]
 802a418:	2e00      	cmp	r6, #0
 802a41a:	da03      	bge.n	802a424 <_printf_i+0xc8>
 802a41c:	232d      	movs	r3, #45	; 0x2d
 802a41e:	4276      	negs	r6, r6
 802a420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a424:	485e      	ldr	r0, [pc, #376]	; (802a5a0 <_printf_i+0x244>)
 802a426:	230a      	movs	r3, #10
 802a428:	e019      	b.n	802a45e <_printf_i+0x102>
 802a42a:	680e      	ldr	r6, [r1, #0]
 802a42c:	602b      	str	r3, [r5, #0]
 802a42e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a432:	bf18      	it	ne
 802a434:	b236      	sxthne	r6, r6
 802a436:	e7ef      	b.n	802a418 <_printf_i+0xbc>
 802a438:	682b      	ldr	r3, [r5, #0]
 802a43a:	6820      	ldr	r0, [r4, #0]
 802a43c:	1d19      	adds	r1, r3, #4
 802a43e:	6029      	str	r1, [r5, #0]
 802a440:	0601      	lsls	r1, r0, #24
 802a442:	d501      	bpl.n	802a448 <_printf_i+0xec>
 802a444:	681e      	ldr	r6, [r3, #0]
 802a446:	e002      	b.n	802a44e <_printf_i+0xf2>
 802a448:	0646      	lsls	r6, r0, #25
 802a44a:	d5fb      	bpl.n	802a444 <_printf_i+0xe8>
 802a44c:	881e      	ldrh	r6, [r3, #0]
 802a44e:	4854      	ldr	r0, [pc, #336]	; (802a5a0 <_printf_i+0x244>)
 802a450:	2f6f      	cmp	r7, #111	; 0x6f
 802a452:	bf0c      	ite	eq
 802a454:	2308      	moveq	r3, #8
 802a456:	230a      	movne	r3, #10
 802a458:	2100      	movs	r1, #0
 802a45a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a45e:	6865      	ldr	r5, [r4, #4]
 802a460:	60a5      	str	r5, [r4, #8]
 802a462:	2d00      	cmp	r5, #0
 802a464:	bfa2      	ittt	ge
 802a466:	6821      	ldrge	r1, [r4, #0]
 802a468:	f021 0104 	bicge.w	r1, r1, #4
 802a46c:	6021      	strge	r1, [r4, #0]
 802a46e:	b90e      	cbnz	r6, 802a474 <_printf_i+0x118>
 802a470:	2d00      	cmp	r5, #0
 802a472:	d04d      	beq.n	802a510 <_printf_i+0x1b4>
 802a474:	4615      	mov	r5, r2
 802a476:	fbb6 f1f3 	udiv	r1, r6, r3
 802a47a:	fb03 6711 	mls	r7, r3, r1, r6
 802a47e:	5dc7      	ldrb	r7, [r0, r7]
 802a480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a484:	4637      	mov	r7, r6
 802a486:	42bb      	cmp	r3, r7
 802a488:	460e      	mov	r6, r1
 802a48a:	d9f4      	bls.n	802a476 <_printf_i+0x11a>
 802a48c:	2b08      	cmp	r3, #8
 802a48e:	d10b      	bne.n	802a4a8 <_printf_i+0x14c>
 802a490:	6823      	ldr	r3, [r4, #0]
 802a492:	07de      	lsls	r6, r3, #31
 802a494:	d508      	bpl.n	802a4a8 <_printf_i+0x14c>
 802a496:	6923      	ldr	r3, [r4, #16]
 802a498:	6861      	ldr	r1, [r4, #4]
 802a49a:	4299      	cmp	r1, r3
 802a49c:	bfde      	ittt	le
 802a49e:	2330      	movle	r3, #48	; 0x30
 802a4a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a4a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a4a8:	1b52      	subs	r2, r2, r5
 802a4aa:	6122      	str	r2, [r4, #16]
 802a4ac:	f8cd a000 	str.w	sl, [sp]
 802a4b0:	464b      	mov	r3, r9
 802a4b2:	aa03      	add	r2, sp, #12
 802a4b4:	4621      	mov	r1, r4
 802a4b6:	4640      	mov	r0, r8
 802a4b8:	f7ff fee2 	bl	802a280 <_printf_common>
 802a4bc:	3001      	adds	r0, #1
 802a4be:	d14c      	bne.n	802a55a <_printf_i+0x1fe>
 802a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 802a4c4:	b004      	add	sp, #16
 802a4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a4ca:	4835      	ldr	r0, [pc, #212]	; (802a5a0 <_printf_i+0x244>)
 802a4cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802a4d0:	6829      	ldr	r1, [r5, #0]
 802a4d2:	6823      	ldr	r3, [r4, #0]
 802a4d4:	f851 6b04 	ldr.w	r6, [r1], #4
 802a4d8:	6029      	str	r1, [r5, #0]
 802a4da:	061d      	lsls	r5, r3, #24
 802a4dc:	d514      	bpl.n	802a508 <_printf_i+0x1ac>
 802a4de:	07df      	lsls	r7, r3, #31
 802a4e0:	bf44      	itt	mi
 802a4e2:	f043 0320 	orrmi.w	r3, r3, #32
 802a4e6:	6023      	strmi	r3, [r4, #0]
 802a4e8:	b91e      	cbnz	r6, 802a4f2 <_printf_i+0x196>
 802a4ea:	6823      	ldr	r3, [r4, #0]
 802a4ec:	f023 0320 	bic.w	r3, r3, #32
 802a4f0:	6023      	str	r3, [r4, #0]
 802a4f2:	2310      	movs	r3, #16
 802a4f4:	e7b0      	b.n	802a458 <_printf_i+0xfc>
 802a4f6:	6823      	ldr	r3, [r4, #0]
 802a4f8:	f043 0320 	orr.w	r3, r3, #32
 802a4fc:	6023      	str	r3, [r4, #0]
 802a4fe:	2378      	movs	r3, #120	; 0x78
 802a500:	4828      	ldr	r0, [pc, #160]	; (802a5a4 <_printf_i+0x248>)
 802a502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a506:	e7e3      	b.n	802a4d0 <_printf_i+0x174>
 802a508:	0659      	lsls	r1, r3, #25
 802a50a:	bf48      	it	mi
 802a50c:	b2b6      	uxthmi	r6, r6
 802a50e:	e7e6      	b.n	802a4de <_printf_i+0x182>
 802a510:	4615      	mov	r5, r2
 802a512:	e7bb      	b.n	802a48c <_printf_i+0x130>
 802a514:	682b      	ldr	r3, [r5, #0]
 802a516:	6826      	ldr	r6, [r4, #0]
 802a518:	6961      	ldr	r1, [r4, #20]
 802a51a:	1d18      	adds	r0, r3, #4
 802a51c:	6028      	str	r0, [r5, #0]
 802a51e:	0635      	lsls	r5, r6, #24
 802a520:	681b      	ldr	r3, [r3, #0]
 802a522:	d501      	bpl.n	802a528 <_printf_i+0x1cc>
 802a524:	6019      	str	r1, [r3, #0]
 802a526:	e002      	b.n	802a52e <_printf_i+0x1d2>
 802a528:	0670      	lsls	r0, r6, #25
 802a52a:	d5fb      	bpl.n	802a524 <_printf_i+0x1c8>
 802a52c:	8019      	strh	r1, [r3, #0]
 802a52e:	2300      	movs	r3, #0
 802a530:	6123      	str	r3, [r4, #16]
 802a532:	4615      	mov	r5, r2
 802a534:	e7ba      	b.n	802a4ac <_printf_i+0x150>
 802a536:	682b      	ldr	r3, [r5, #0]
 802a538:	1d1a      	adds	r2, r3, #4
 802a53a:	602a      	str	r2, [r5, #0]
 802a53c:	681d      	ldr	r5, [r3, #0]
 802a53e:	6862      	ldr	r2, [r4, #4]
 802a540:	2100      	movs	r1, #0
 802a542:	4628      	mov	r0, r5
 802a544:	f7d5 fe84 	bl	8000250 <memchr>
 802a548:	b108      	cbz	r0, 802a54e <_printf_i+0x1f2>
 802a54a:	1b40      	subs	r0, r0, r5
 802a54c:	6060      	str	r0, [r4, #4]
 802a54e:	6863      	ldr	r3, [r4, #4]
 802a550:	6123      	str	r3, [r4, #16]
 802a552:	2300      	movs	r3, #0
 802a554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a558:	e7a8      	b.n	802a4ac <_printf_i+0x150>
 802a55a:	6923      	ldr	r3, [r4, #16]
 802a55c:	462a      	mov	r2, r5
 802a55e:	4649      	mov	r1, r9
 802a560:	4640      	mov	r0, r8
 802a562:	47d0      	blx	sl
 802a564:	3001      	adds	r0, #1
 802a566:	d0ab      	beq.n	802a4c0 <_printf_i+0x164>
 802a568:	6823      	ldr	r3, [r4, #0]
 802a56a:	079b      	lsls	r3, r3, #30
 802a56c:	d413      	bmi.n	802a596 <_printf_i+0x23a>
 802a56e:	68e0      	ldr	r0, [r4, #12]
 802a570:	9b03      	ldr	r3, [sp, #12]
 802a572:	4298      	cmp	r0, r3
 802a574:	bfb8      	it	lt
 802a576:	4618      	movlt	r0, r3
 802a578:	e7a4      	b.n	802a4c4 <_printf_i+0x168>
 802a57a:	2301      	movs	r3, #1
 802a57c:	4632      	mov	r2, r6
 802a57e:	4649      	mov	r1, r9
 802a580:	4640      	mov	r0, r8
 802a582:	47d0      	blx	sl
 802a584:	3001      	adds	r0, #1
 802a586:	d09b      	beq.n	802a4c0 <_printf_i+0x164>
 802a588:	3501      	adds	r5, #1
 802a58a:	68e3      	ldr	r3, [r4, #12]
 802a58c:	9903      	ldr	r1, [sp, #12]
 802a58e:	1a5b      	subs	r3, r3, r1
 802a590:	42ab      	cmp	r3, r5
 802a592:	dcf2      	bgt.n	802a57a <_printf_i+0x21e>
 802a594:	e7eb      	b.n	802a56e <_printf_i+0x212>
 802a596:	2500      	movs	r5, #0
 802a598:	f104 0619 	add.w	r6, r4, #25
 802a59c:	e7f5      	b.n	802a58a <_printf_i+0x22e>
 802a59e:	bf00      	nop
 802a5a0:	08030829 	.word	0x08030829
 802a5a4:	0803083a 	.word	0x0803083a

0802a5a8 <_sbrk_r>:
 802a5a8:	b538      	push	{r3, r4, r5, lr}
 802a5aa:	4d06      	ldr	r5, [pc, #24]	; (802a5c4 <_sbrk_r+0x1c>)
 802a5ac:	2300      	movs	r3, #0
 802a5ae:	4604      	mov	r4, r0
 802a5b0:	4608      	mov	r0, r1
 802a5b2:	602b      	str	r3, [r5, #0]
 802a5b4:	f7d7 fed8 	bl	8002368 <_sbrk>
 802a5b8:	1c43      	adds	r3, r0, #1
 802a5ba:	d102      	bne.n	802a5c2 <_sbrk_r+0x1a>
 802a5bc:	682b      	ldr	r3, [r5, #0]
 802a5be:	b103      	cbz	r3, 802a5c2 <_sbrk_r+0x1a>
 802a5c0:	6023      	str	r3, [r4, #0]
 802a5c2:	bd38      	pop	{r3, r4, r5, pc}
 802a5c4:	2003c53c 	.word	0x2003c53c

0802a5c8 <_raise_r>:
 802a5c8:	291f      	cmp	r1, #31
 802a5ca:	b538      	push	{r3, r4, r5, lr}
 802a5cc:	4604      	mov	r4, r0
 802a5ce:	460d      	mov	r5, r1
 802a5d0:	d904      	bls.n	802a5dc <_raise_r+0x14>
 802a5d2:	2316      	movs	r3, #22
 802a5d4:	6003      	str	r3, [r0, #0]
 802a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 802a5da:	bd38      	pop	{r3, r4, r5, pc}
 802a5dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a5de:	b112      	cbz	r2, 802a5e6 <_raise_r+0x1e>
 802a5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a5e4:	b94b      	cbnz	r3, 802a5fa <_raise_r+0x32>
 802a5e6:	4620      	mov	r0, r4
 802a5e8:	f000 f830 	bl	802a64c <_getpid_r>
 802a5ec:	462a      	mov	r2, r5
 802a5ee:	4601      	mov	r1, r0
 802a5f0:	4620      	mov	r0, r4
 802a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a5f6:	f000 b817 	b.w	802a628 <_kill_r>
 802a5fa:	2b01      	cmp	r3, #1
 802a5fc:	d00a      	beq.n	802a614 <_raise_r+0x4c>
 802a5fe:	1c59      	adds	r1, r3, #1
 802a600:	d103      	bne.n	802a60a <_raise_r+0x42>
 802a602:	2316      	movs	r3, #22
 802a604:	6003      	str	r3, [r0, #0]
 802a606:	2001      	movs	r0, #1
 802a608:	e7e7      	b.n	802a5da <_raise_r+0x12>
 802a60a:	2400      	movs	r4, #0
 802a60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a610:	4628      	mov	r0, r5
 802a612:	4798      	blx	r3
 802a614:	2000      	movs	r0, #0
 802a616:	e7e0      	b.n	802a5da <_raise_r+0x12>

0802a618 <raise>:
 802a618:	4b02      	ldr	r3, [pc, #8]	; (802a624 <raise+0xc>)
 802a61a:	4601      	mov	r1, r0
 802a61c:	6818      	ldr	r0, [r3, #0]
 802a61e:	f7ff bfd3 	b.w	802a5c8 <_raise_r>
 802a622:	bf00      	nop
 802a624:	200000bc 	.word	0x200000bc

0802a628 <_kill_r>:
 802a628:	b538      	push	{r3, r4, r5, lr}
 802a62a:	4d07      	ldr	r5, [pc, #28]	; (802a648 <_kill_r+0x20>)
 802a62c:	2300      	movs	r3, #0
 802a62e:	4604      	mov	r4, r0
 802a630:	4608      	mov	r0, r1
 802a632:	4611      	mov	r1, r2
 802a634:	602b      	str	r3, [r5, #0]
 802a636:	f7d7 fe0f 	bl	8002258 <_kill>
 802a63a:	1c43      	adds	r3, r0, #1
 802a63c:	d102      	bne.n	802a644 <_kill_r+0x1c>
 802a63e:	682b      	ldr	r3, [r5, #0]
 802a640:	b103      	cbz	r3, 802a644 <_kill_r+0x1c>
 802a642:	6023      	str	r3, [r4, #0]
 802a644:	bd38      	pop	{r3, r4, r5, pc}
 802a646:	bf00      	nop
 802a648:	2003c53c 	.word	0x2003c53c

0802a64c <_getpid_r>:
 802a64c:	f7d7 bdfc 	b.w	8002248 <_getpid>

0802a650 <siscanf>:
 802a650:	b40e      	push	{r1, r2, r3}
 802a652:	b510      	push	{r4, lr}
 802a654:	b09f      	sub	sp, #124	; 0x7c
 802a656:	ac21      	add	r4, sp, #132	; 0x84
 802a658:	f44f 7101 	mov.w	r1, #516	; 0x204
 802a65c:	f854 2b04 	ldr.w	r2, [r4], #4
 802a660:	9201      	str	r2, [sp, #4]
 802a662:	f8ad 101c 	strh.w	r1, [sp, #28]
 802a666:	9004      	str	r0, [sp, #16]
 802a668:	9008      	str	r0, [sp, #32]
 802a66a:	f7d5 fde9 	bl	8000240 <strlen>
 802a66e:	4b0c      	ldr	r3, [pc, #48]	; (802a6a0 <siscanf+0x50>)
 802a670:	9005      	str	r0, [sp, #20]
 802a672:	9009      	str	r0, [sp, #36]	; 0x24
 802a674:	930d      	str	r3, [sp, #52]	; 0x34
 802a676:	480b      	ldr	r0, [pc, #44]	; (802a6a4 <siscanf+0x54>)
 802a678:	9a01      	ldr	r2, [sp, #4]
 802a67a:	6800      	ldr	r0, [r0, #0]
 802a67c:	9403      	str	r4, [sp, #12]
 802a67e:	2300      	movs	r3, #0
 802a680:	9311      	str	r3, [sp, #68]	; 0x44
 802a682:	9316      	str	r3, [sp, #88]	; 0x58
 802a684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a688:	f8ad 301e 	strh.w	r3, [sp, #30]
 802a68c:	a904      	add	r1, sp, #16
 802a68e:	4623      	mov	r3, r4
 802a690:	f001 fcfe 	bl	802c090 <__ssvfiscanf_r>
 802a694:	b01f      	add	sp, #124	; 0x7c
 802a696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a69a:	b003      	add	sp, #12
 802a69c:	4770      	bx	lr
 802a69e:	bf00      	nop
 802a6a0:	0802a6cb 	.word	0x0802a6cb
 802a6a4:	200000bc 	.word	0x200000bc

0802a6a8 <__sread>:
 802a6a8:	b510      	push	{r4, lr}
 802a6aa:	460c      	mov	r4, r1
 802a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a6b0:	f001 ffb8 	bl	802c624 <_read_r>
 802a6b4:	2800      	cmp	r0, #0
 802a6b6:	bfab      	itete	ge
 802a6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a6ba:	89a3      	ldrhlt	r3, [r4, #12]
 802a6bc:	181b      	addge	r3, r3, r0
 802a6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a6c2:	bfac      	ite	ge
 802a6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 802a6c6:	81a3      	strhlt	r3, [r4, #12]
 802a6c8:	bd10      	pop	{r4, pc}

0802a6ca <__seofread>:
 802a6ca:	2000      	movs	r0, #0
 802a6cc:	4770      	bx	lr

0802a6ce <__swrite>:
 802a6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6d2:	461f      	mov	r7, r3
 802a6d4:	898b      	ldrh	r3, [r1, #12]
 802a6d6:	05db      	lsls	r3, r3, #23
 802a6d8:	4605      	mov	r5, r0
 802a6da:	460c      	mov	r4, r1
 802a6dc:	4616      	mov	r6, r2
 802a6de:	d505      	bpl.n	802a6ec <__swrite+0x1e>
 802a6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a6e4:	2302      	movs	r3, #2
 802a6e6:	2200      	movs	r2, #0
 802a6e8:	f001 fbb2 	bl	802be50 <_lseek_r>
 802a6ec:	89a3      	ldrh	r3, [r4, #12]
 802a6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a6f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a6f6:	81a3      	strh	r3, [r4, #12]
 802a6f8:	4632      	mov	r2, r6
 802a6fa:	463b      	mov	r3, r7
 802a6fc:	4628      	mov	r0, r5
 802a6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a702:	f000 bfa5 	b.w	802b650 <_write_r>

0802a706 <__sseek>:
 802a706:	b510      	push	{r4, lr}
 802a708:	460c      	mov	r4, r1
 802a70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a70e:	f001 fb9f 	bl	802be50 <_lseek_r>
 802a712:	1c43      	adds	r3, r0, #1
 802a714:	89a3      	ldrh	r3, [r4, #12]
 802a716:	bf15      	itete	ne
 802a718:	6560      	strne	r0, [r4, #84]	; 0x54
 802a71a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a71e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a722:	81a3      	strheq	r3, [r4, #12]
 802a724:	bf18      	it	ne
 802a726:	81a3      	strhne	r3, [r4, #12]
 802a728:	bd10      	pop	{r4, pc}

0802a72a <__sclose>:
 802a72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a72e:	f001 b871 	b.w	802b814 <_close_r>

0802a732 <strncmp>:
 802a732:	b510      	push	{r4, lr}
 802a734:	b17a      	cbz	r2, 802a756 <strncmp+0x24>
 802a736:	4603      	mov	r3, r0
 802a738:	3901      	subs	r1, #1
 802a73a:	1884      	adds	r4, r0, r2
 802a73c:	f813 0b01 	ldrb.w	r0, [r3], #1
 802a740:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802a744:	4290      	cmp	r0, r2
 802a746:	d101      	bne.n	802a74c <strncmp+0x1a>
 802a748:	42a3      	cmp	r3, r4
 802a74a:	d101      	bne.n	802a750 <strncmp+0x1e>
 802a74c:	1a80      	subs	r0, r0, r2
 802a74e:	bd10      	pop	{r4, pc}
 802a750:	2800      	cmp	r0, #0
 802a752:	d1f3      	bne.n	802a73c <strncmp+0xa>
 802a754:	e7fa      	b.n	802a74c <strncmp+0x1a>
 802a756:	4610      	mov	r0, r2
 802a758:	e7f9      	b.n	802a74e <strncmp+0x1c>

0802a75a <strncpy>:
 802a75a:	b510      	push	{r4, lr}
 802a75c:	3901      	subs	r1, #1
 802a75e:	4603      	mov	r3, r0
 802a760:	b132      	cbz	r2, 802a770 <strncpy+0x16>
 802a762:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802a766:	f803 4b01 	strb.w	r4, [r3], #1
 802a76a:	3a01      	subs	r2, #1
 802a76c:	2c00      	cmp	r4, #0
 802a76e:	d1f7      	bne.n	802a760 <strncpy+0x6>
 802a770:	441a      	add	r2, r3
 802a772:	2100      	movs	r1, #0
 802a774:	4293      	cmp	r3, r2
 802a776:	d100      	bne.n	802a77a <strncpy+0x20>
 802a778:	bd10      	pop	{r4, pc}
 802a77a:	f803 1b01 	strb.w	r1, [r3], #1
 802a77e:	e7f9      	b.n	802a774 <strncpy+0x1a>

0802a780 <is_leap_year>:
 802a780:	0783      	lsls	r3, r0, #30
 802a782:	d10f      	bne.n	802a7a4 <is_leap_year+0x24>
 802a784:	2264      	movs	r2, #100	; 0x64
 802a786:	fb90 f3f2 	sdiv	r3, r0, r2
 802a78a:	fb02 0313 	mls	r3, r2, r3, r0
 802a78e:	b95b      	cbnz	r3, 802a7a8 <is_leap_year+0x28>
 802a790:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802a794:	fb90 f2f3 	sdiv	r2, r0, r3
 802a798:	fb03 0012 	mls	r0, r3, r2, r0
 802a79c:	fab0 f080 	clz	r0, r0
 802a7a0:	0940      	lsrs	r0, r0, #5
 802a7a2:	4770      	bx	lr
 802a7a4:	2000      	movs	r0, #0
 802a7a6:	4770      	bx	lr
 802a7a8:	2001      	movs	r0, #1
 802a7aa:	4770      	bx	lr

0802a7ac <first_day>:
 802a7ac:	b570      	push	{r4, r5, r6, lr}
 802a7ae:	2104      	movs	r1, #4
 802a7b0:	4604      	mov	r4, r0
 802a7b2:	f240 75b1 	movw	r5, #1969	; 0x7b1
 802a7b6:	2607      	movs	r6, #7
 802a7b8:	3c01      	subs	r4, #1
 802a7ba:	42ac      	cmp	r4, r5
 802a7bc:	dc01      	bgt.n	802a7c2 <first_day+0x16>
 802a7be:	4608      	mov	r0, r1
 802a7c0:	bd70      	pop	{r4, r5, r6, pc}
 802a7c2:	4620      	mov	r0, r4
 802a7c4:	f7ff ffdc 	bl	802a780 <is_leap_year>
 802a7c8:	f201 136d 	addw	r3, r1, #365	; 0x16d
 802a7cc:	1819      	adds	r1, r3, r0
 802a7ce:	fb91 f3f6 	sdiv	r3, r1, r6
 802a7d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802a7d6:	1ac9      	subs	r1, r1, r3
 802a7d8:	e7ee      	b.n	802a7b8 <first_day+0xc>

0802a7da <match_string>:
 802a7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a7de:	4605      	mov	r5, r0
 802a7e0:	4690      	mov	r8, r2
 802a7e2:	1f0c      	subs	r4, r1, #4
 802a7e4:	2600      	movs	r6, #0
 802a7e6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 802a7ea:	b910      	cbnz	r0, 802a7f2 <match_string+0x18>
 802a7ec:	f04f 36ff 	mov.w	r6, #4294967295
 802a7f0:	e00c      	b.n	802a80c <match_string+0x32>
 802a7f2:	f7d5 fd25 	bl	8000240 <strlen>
 802a7f6:	6821      	ldr	r1, [r4, #0]
 802a7f8:	4607      	mov	r7, r0
 802a7fa:	4602      	mov	r2, r0
 802a7fc:	4643      	mov	r3, r8
 802a7fe:	6828      	ldr	r0, [r5, #0]
 802a800:	f001 ff62 	bl	802c6c8 <strncasecmp_l>
 802a804:	b928      	cbnz	r0, 802a812 <match_string+0x38>
 802a806:	6828      	ldr	r0, [r5, #0]
 802a808:	4438      	add	r0, r7
 802a80a:	6028      	str	r0, [r5, #0]
 802a80c:	4630      	mov	r0, r6
 802a80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a812:	3601      	adds	r6, #1
 802a814:	e7e7      	b.n	802a7e6 <match_string+0xc>
	...

0802a818 <strptime_l>:
 802a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a81c:	b087      	sub	sp, #28
 802a81e:	f8df 9334 	ldr.w	r9, [pc, #820]	; 802ab54 <strptime_l+0x33c>
 802a822:	4fc5      	ldr	r7, [pc, #788]	; (802ab38 <strptime_l+0x320>)
 802a824:	9001      	str	r0, [sp, #4]
 802a826:	460e      	mov	r6, r1
 802a828:	4614      	mov	r4, r2
 802a82a:	461d      	mov	r5, r3
 802a82c:	f04f 0800 	mov.w	r8, #0
 802a830:	7832      	ldrb	r2, [r6, #0]
 802a832:	bb7a      	cbnz	r2, 802a894 <strptime_l+0x7c>
 802a834:	f008 0307 	and.w	r3, r8, #7
 802a838:	2b07      	cmp	r3, #7
 802a83a:	f040 8311 	bne.w	802ae60 <strptime_l+0x648>
 802a83e:	f018 0f10 	tst.w	r8, #16
 802a842:	d112      	bne.n	802a86a <strptime_l+0x52>
 802a844:	4bbd      	ldr	r3, [pc, #756]	; (802ab3c <strptime_l+0x324>)
 802a846:	6925      	ldr	r5, [r4, #16]
 802a848:	6960      	ldr	r0, [r4, #20]
 802a84a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 802a84e:	68e3      	ldr	r3, [r4, #12]
 802a850:	4419      	add	r1, r3
 802a852:	61e1      	str	r1, [r4, #28]
 802a854:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a858:	f7ff ff92 	bl	802a780 <is_leap_year>
 802a85c:	b108      	cbz	r0, 802a862 <strptime_l+0x4a>
 802a85e:	2d01      	cmp	r5, #1
 802a860:	dc01      	bgt.n	802a866 <strptime_l+0x4e>
 802a862:	3901      	subs	r1, #1
 802a864:	61e1      	str	r1, [r4, #28]
 802a866:	f048 0810 	orr.w	r8, r8, #16
 802a86a:	f008 081c 	and.w	r8, r8, #28
 802a86e:	f1b8 0f14 	cmp.w	r8, #20
 802a872:	d10d      	bne.n	802a890 <strptime_l+0x78>
 802a874:	6960      	ldr	r0, [r4, #20]
 802a876:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a87a:	f7ff ff97 	bl	802a7ac <first_day>
 802a87e:	69e3      	ldr	r3, [r4, #28]
 802a880:	4418      	add	r0, r3
 802a882:	2307      	movs	r3, #7
 802a884:	fb90 f3f3 	sdiv	r3, r0, r3
 802a888:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802a88c:	1ac0      	subs	r0, r0, r3
 802a88e:	61a0      	str	r0, [r4, #24]
 802a890:	9801      	ldr	r0, [sp, #4]
 802a892:	e221      	b.n	802acd8 <strptime_l+0x4c0>
 802a894:	f812 3009 	ldrb.w	r3, [r2, r9]
 802a898:	0719      	lsls	r1, r3, #28
 802a89a:	d50a      	bpl.n	802a8b2 <strptime_l+0x9a>
 802a89c:	9b01      	ldr	r3, [sp, #4]
 802a89e:	781a      	ldrb	r2, [r3, #0]
 802a8a0:	f819 2002 	ldrb.w	r2, [r9, r2]
 802a8a4:	0712      	lsls	r2, r2, #28
 802a8a6:	d401      	bmi.n	802a8ac <strptime_l+0x94>
 802a8a8:	3601      	adds	r6, #1
 802a8aa:	e7c1      	b.n	802a830 <strptime_l+0x18>
 802a8ac:	3301      	adds	r3, #1
 802a8ae:	9301      	str	r3, [sp, #4]
 802a8b0:	e7f4      	b.n	802a89c <strptime_l+0x84>
 802a8b2:	2a25      	cmp	r2, #37	; 0x25
 802a8b4:	f040 82ca 	bne.w	802ae4c <strptime_l+0x634>
 802a8b8:	7873      	ldrb	r3, [r6, #1]
 802a8ba:	2b00      	cmp	r3, #0
 802a8bc:	f000 82c6 	beq.w	802ae4c <strptime_l+0x634>
 802a8c0:	2b45      	cmp	r3, #69	; 0x45
 802a8c2:	f000 80bb 	beq.w	802aa3c <strptime_l+0x224>
 802a8c6:	2b4f      	cmp	r3, #79	; 0x4f
 802a8c8:	f000 80b8 	beq.w	802aa3c <strptime_l+0x224>
 802a8cc:	3601      	adds	r6, #1
 802a8ce:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 802a8d2:	b2d1      	uxtb	r1, r2
 802a8d4:	2954      	cmp	r1, #84	; 0x54
 802a8d6:	f200 82ac 	bhi.w	802ae32 <strptime_l+0x61a>
 802a8da:	2a54      	cmp	r2, #84	; 0x54
 802a8dc:	f200 82a9 	bhi.w	802ae32 <strptime_l+0x61a>
 802a8e0:	a101      	add	r1, pc, #4	; (adr r1, 802a8e8 <strptime_l+0xd0>)
 802a8e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802a8e6:	bf00      	nop
 802a8e8:	0802ae2b 	.word	0x0802ae2b
 802a8ec:	0802ae33 	.word	0x0802ae33
 802a8f0:	0802ae33 	.word	0x0802ae33
 802a8f4:	0802ae33 	.word	0x0802ae33
 802a8f8:	0802ae33 	.word	0x0802ae33
 802a8fc:	0802ae33 	.word	0x0802ae33
 802a900:	0802ae33 	.word	0x0802ae33
 802a904:	0802ae33 	.word	0x0802ae33
 802a908:	0802ae33 	.word	0x0802ae33
 802a90c:	0802ae33 	.word	0x0802ae33
 802a910:	0802ae33 	.word	0x0802ae33
 802a914:	0802ae33 	.word	0x0802ae33
 802a918:	0802ae33 	.word	0x0802ae33
 802a91c:	0802ae33 	.word	0x0802ae33
 802a920:	0802ae33 	.word	0x0802ae33
 802a924:	0802ae33 	.word	0x0802ae33
 802a928:	0802ae33 	.word	0x0802ae33
 802a92c:	0802ae33 	.word	0x0802ae33
 802a930:	0802ae33 	.word	0x0802ae33
 802a934:	0802ae33 	.word	0x0802ae33
 802a938:	0802ae33 	.word	0x0802ae33
 802a93c:	0802ae33 	.word	0x0802ae33
 802a940:	0802ae33 	.word	0x0802ae33
 802a944:	0802ae33 	.word	0x0802ae33
 802a948:	0802ae33 	.word	0x0802ae33
 802a94c:	0802ae33 	.word	0x0802ae33
 802a950:	0802ae33 	.word	0x0802ae33
 802a954:	0802ae33 	.word	0x0802ae33
 802a958:	0802aa4b 	.word	0x0802aa4b
 802a95c:	0802aa69 	.word	0x0802aa69
 802a960:	0802aa87 	.word	0x0802aa87
 802a964:	0802aac5 	.word	0x0802aac5
 802a968:	0802ae33 	.word	0x0802ae33
 802a96c:	0802aaf7 	.word	0x0802aaf7
 802a970:	0802ae33 	.word	0x0802ae33
 802a974:	0802ab1b 	.word	0x0802ab1b
 802a978:	0802ab59 	.word	0x0802ab59
 802a97c:	0802ae33 	.word	0x0802ae33
 802a980:	0802ae33 	.word	0x0802ae33
 802a984:	0802ae33 	.word	0x0802ae33
 802a988:	0802abb7 	.word	0x0802abb7
 802a98c:	0802ae33 	.word	0x0802ae33
 802a990:	0802ae33 	.word	0x0802ae33
 802a994:	0802ae33 	.word	0x0802ae33
 802a998:	0802ae33 	.word	0x0802ae33
 802a99c:	0802ac17 	.word	0x0802ac17
 802a9a0:	0802ac7f 	.word	0x0802ac7f
 802a9a4:	0802ac9f 	.word	0x0802ac9f
 802a9a8:	0802acdf 	.word	0x0802acdf
 802a9ac:	0802ad1d 	.word	0x0802ad1d
 802a9b0:	0802ad6f 	.word	0x0802ad6f
 802a9b4:	0802ade1 	.word	0x0802ade1
 802a9b8:	0802ae11 	.word	0x0802ae11
 802a9bc:	0802a8a9 	.word	0x0802a8a9
 802a9c0:	0802ae33 	.word	0x0802ae33
 802a9c4:	0802ae33 	.word	0x0802ae33
 802a9c8:	0802ae33 	.word	0x0802ae33
 802a9cc:	0802ae33 	.word	0x0802ae33
 802a9d0:	0802ae33 	.word	0x0802ae33
 802a9d4:	0802ae33 	.word	0x0802ae33
 802a9d8:	0802aa63 	.word	0x0802aa63
 802a9dc:	0802aa81 	.word	0x0802aa81
 802a9e0:	0802aaa7 	.word	0x0802aaa7
 802a9e4:	0802aad7 	.word	0x0802aad7
 802a9e8:	0802aad7 	.word	0x0802aad7
 802a9ec:	0802ae33 	.word	0x0802ae33
 802a9f0:	0802ae33 	.word	0x0802ae33
 802a9f4:	0802aa81 	.word	0x0802aa81
 802a9f8:	0802ae33 	.word	0x0802ae33
 802a9fc:	0802ab77 	.word	0x0802ab77
 802aa00:	0802ab1b 	.word	0x0802ab1b
 802aa04:	0802ab59 	.word	0x0802ab59
 802aa08:	0802ab99 	.word	0x0802ab99
 802aa0c:	0802abd1 	.word	0x0802abd1
 802aa10:	0802ae33 	.word	0x0802ae33
 802aa14:	0802abdd 	.word	0x0802abdd
 802aa18:	0802ae33 	.word	0x0802ae33
 802aa1c:	0802abff 	.word	0x0802abff
 802aa20:	0802ac1f 	.word	0x0802ac1f
 802aa24:	0802ac97 	.word	0x0802ac97
 802aa28:	0802aca7 	.word	0x0802aca7
 802aa2c:	0802ae33 	.word	0x0802ae33
 802aa30:	0802acc3 	.word	0x0802acc3
 802aa34:	0802add7 	.word	0x0802add7
 802aa38:	0802adeb 	.word	0x0802adeb
 802aa3c:	78b3      	ldrb	r3, [r6, #2]
 802aa3e:	1cb2      	adds	r2, r6, #2
 802aa40:	2b00      	cmp	r3, #0
 802aa42:	f000 81f1 	beq.w	802ae28 <strptime_l+0x610>
 802aa46:	4616      	mov	r6, r2
 802aa48:	e741      	b.n	802a8ce <strptime_l+0xb6>
 802aa4a:	493d      	ldr	r1, [pc, #244]	; (802ab40 <strptime_l+0x328>)
 802aa4c:	462a      	mov	r2, r5
 802aa4e:	a801      	add	r0, sp, #4
 802aa50:	f7ff fec3 	bl	802a7da <match_string>
 802aa54:	2800      	cmp	r0, #0
 802aa56:	f2c0 813e 	blt.w	802acd6 <strptime_l+0x4be>
 802aa5a:	61a0      	str	r0, [r4, #24]
 802aa5c:	f048 0808 	orr.w	r8, r8, #8
 802aa60:	e722      	b.n	802a8a8 <strptime_l+0x90>
 802aa62:	4938      	ldr	r1, [pc, #224]	; (802ab44 <strptime_l+0x32c>)
 802aa64:	462a      	mov	r2, r5
 802aa66:	e7f2      	b.n	802aa4e <strptime_l+0x236>
 802aa68:	4937      	ldr	r1, [pc, #220]	; (802ab48 <strptime_l+0x330>)
 802aa6a:	462a      	mov	r2, r5
 802aa6c:	a801      	add	r0, sp, #4
 802aa6e:	f7ff feb4 	bl	802a7da <match_string>
 802aa72:	2800      	cmp	r0, #0
 802aa74:	f2c0 812f 	blt.w	802acd6 <strptime_l+0x4be>
 802aa78:	6120      	str	r0, [r4, #16]
 802aa7a:	f048 0802 	orr.w	r8, r8, #2
 802aa7e:	e713      	b.n	802a8a8 <strptime_l+0x90>
 802aa80:	462a      	mov	r2, r5
 802aa82:	4639      	mov	r1, r7
 802aa84:	e7f2      	b.n	802aa6c <strptime_l+0x254>
 802aa86:	462b      	mov	r3, r5
 802aa88:	220a      	movs	r2, #10
 802aa8a:	9801      	ldr	r0, [sp, #4]
 802aa8c:	a903      	add	r1, sp, #12
 802aa8e:	f000 faa7 	bl	802afe0 <strtol_l>
 802aa92:	9b03      	ldr	r3, [sp, #12]
 802aa94:	9a01      	ldr	r2, [sp, #4]
 802aa96:	4293      	cmp	r3, r2
 802aa98:	f000 811d 	beq.w	802acd6 <strptime_l+0x4be>
 802aa9c:	2264      	movs	r2, #100	; 0x64
 802aa9e:	4350      	muls	r0, r2
 802aaa0:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 802aaa4:	e1af      	b.n	802ae06 <strptime_l+0x5ee>
 802aaa6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802aaaa:	9801      	ldr	r0, [sp, #4]
 802aaac:	462b      	mov	r3, r5
 802aaae:	4622      	mov	r2, r4
 802aab0:	f7ff feb2 	bl	802a818 <strptime_l>
 802aab4:	9003      	str	r0, [sp, #12]
 802aab6:	2800      	cmp	r0, #0
 802aab8:	f000 810d 	beq.w	802acd6 <strptime_l+0x4be>
 802aabc:	9001      	str	r0, [sp, #4]
 802aabe:	f048 080f 	orr.w	r8, r8, #15
 802aac2:	e6f1      	b.n	802a8a8 <strptime_l+0x90>
 802aac4:	4921      	ldr	r1, [pc, #132]	; (802ab4c <strptime_l+0x334>)
 802aac6:	462b      	mov	r3, r5
 802aac8:	4622      	mov	r2, r4
 802aaca:	9801      	ldr	r0, [sp, #4]
 802aacc:	f7ff fea4 	bl	802a818 <strptime_l>
 802aad0:	9003      	str	r0, [sp, #12]
 802aad2:	b9f0      	cbnz	r0, 802ab12 <strptime_l+0x2fa>
 802aad4:	e0ff      	b.n	802acd6 <strptime_l+0x4be>
 802aad6:	462b      	mov	r3, r5
 802aad8:	220a      	movs	r2, #10
 802aada:	9801      	ldr	r0, [sp, #4]
 802aadc:	a903      	add	r1, sp, #12
 802aade:	f000 fa7f 	bl	802afe0 <strtol_l>
 802aae2:	9b03      	ldr	r3, [sp, #12]
 802aae4:	9a01      	ldr	r2, [sp, #4]
 802aae6:	4293      	cmp	r3, r2
 802aae8:	f000 80f5 	beq.w	802acd6 <strptime_l+0x4be>
 802aaec:	60e0      	str	r0, [r4, #12]
 802aaee:	9301      	str	r3, [sp, #4]
 802aaf0:	f048 0801 	orr.w	r8, r8, #1
 802aaf4:	e6d8      	b.n	802a8a8 <strptime_l+0x90>
 802aaf6:	4916      	ldr	r1, [pc, #88]	; (802ab50 <strptime_l+0x338>)
 802aaf8:	9801      	ldr	r0, [sp, #4]
 802aafa:	462b      	mov	r3, r5
 802aafc:	4622      	mov	r2, r4
 802aafe:	f7ff fe8b 	bl	802a818 <strptime_l>
 802ab02:	9003      	str	r0, [sp, #12]
 802ab04:	2800      	cmp	r0, #0
 802ab06:	f000 80e6 	beq.w	802acd6 <strptime_l+0x4be>
 802ab0a:	9b01      	ldr	r3, [sp, #4]
 802ab0c:	4298      	cmp	r0, r3
 802ab0e:	f000 80e2 	beq.w	802acd6 <strptime_l+0x4be>
 802ab12:	9001      	str	r0, [sp, #4]
 802ab14:	f048 0807 	orr.w	r8, r8, #7
 802ab18:	e6c6      	b.n	802a8a8 <strptime_l+0x90>
 802ab1a:	462b      	mov	r3, r5
 802ab1c:	220a      	movs	r2, #10
 802ab1e:	9801      	ldr	r0, [sp, #4]
 802ab20:	a903      	add	r1, sp, #12
 802ab22:	f000 fa5d 	bl	802afe0 <strtol_l>
 802ab26:	9b03      	ldr	r3, [sp, #12]
 802ab28:	9a01      	ldr	r2, [sp, #4]
 802ab2a:	4293      	cmp	r3, r2
 802ab2c:	f000 80d3 	beq.w	802acd6 <strptime_l+0x4be>
 802ab30:	60a0      	str	r0, [r4, #8]
 802ab32:	9301      	str	r3, [sp, #4]
 802ab34:	e6b8      	b.n	802a8a8 <strptime_l+0x90>
 802ab36:	bf00      	nop
 802ab38:	080309c0 	.word	0x080309c0
 802ab3c:	08030874 	.word	0x08030874
 802ab40:	08030a3c 	.word	0x08030a3c
 802ab44:	08030a20 	.word	0x08030a20
 802ab48:	080309f0 	.word	0x080309f0
 802ab4c:	08030850 	.word	0x08030850
 802ab50:	08030859 	.word	0x08030859
 802ab54:	08030af9 	.word	0x08030af9
 802ab58:	462b      	mov	r3, r5
 802ab5a:	220a      	movs	r2, #10
 802ab5c:	9801      	ldr	r0, [sp, #4]
 802ab5e:	a903      	add	r1, sp, #12
 802ab60:	f000 fa3e 	bl	802afe0 <strtol_l>
 802ab64:	9b03      	ldr	r3, [sp, #12]
 802ab66:	9a01      	ldr	r2, [sp, #4]
 802ab68:	4293      	cmp	r3, r2
 802ab6a:	f000 80b4 	beq.w	802acd6 <strptime_l+0x4be>
 802ab6e:	280c      	cmp	r0, #12
 802ab70:	bf08      	it	eq
 802ab72:	2000      	moveq	r0, #0
 802ab74:	e7dc      	b.n	802ab30 <strptime_l+0x318>
 802ab76:	462b      	mov	r3, r5
 802ab78:	220a      	movs	r2, #10
 802ab7a:	9801      	ldr	r0, [sp, #4]
 802ab7c:	a903      	add	r1, sp, #12
 802ab7e:	f000 fa2f 	bl	802afe0 <strtol_l>
 802ab82:	9b03      	ldr	r3, [sp, #12]
 802ab84:	9a01      	ldr	r2, [sp, #4]
 802ab86:	4293      	cmp	r3, r2
 802ab88:	f000 80a5 	beq.w	802acd6 <strptime_l+0x4be>
 802ab8c:	3801      	subs	r0, #1
 802ab8e:	61e0      	str	r0, [r4, #28]
 802ab90:	9301      	str	r3, [sp, #4]
 802ab92:	f048 0810 	orr.w	r8, r8, #16
 802ab96:	e687      	b.n	802a8a8 <strptime_l+0x90>
 802ab98:	462b      	mov	r3, r5
 802ab9a:	220a      	movs	r2, #10
 802ab9c:	9801      	ldr	r0, [sp, #4]
 802ab9e:	a903      	add	r1, sp, #12
 802aba0:	f000 fa1e 	bl	802afe0 <strtol_l>
 802aba4:	9b03      	ldr	r3, [sp, #12]
 802aba6:	9a01      	ldr	r2, [sp, #4]
 802aba8:	4293      	cmp	r3, r2
 802abaa:	f000 8094 	beq.w	802acd6 <strptime_l+0x4be>
 802abae:	3801      	subs	r0, #1
 802abb0:	6120      	str	r0, [r4, #16]
 802abb2:	9301      	str	r3, [sp, #4]
 802abb4:	e761      	b.n	802aa7a <strptime_l+0x262>
 802abb6:	462b      	mov	r3, r5
 802abb8:	220a      	movs	r2, #10
 802abba:	9801      	ldr	r0, [sp, #4]
 802abbc:	a903      	add	r1, sp, #12
 802abbe:	f000 fa0f 	bl	802afe0 <strtol_l>
 802abc2:	9b03      	ldr	r3, [sp, #12]
 802abc4:	9a01      	ldr	r2, [sp, #4]
 802abc6:	4293      	cmp	r3, r2
 802abc8:	f000 8085 	beq.w	802acd6 <strptime_l+0x4be>
 802abcc:	6060      	str	r0, [r4, #4]
 802abce:	e7b0      	b.n	802ab32 <strptime_l+0x31a>
 802abd0:	9b01      	ldr	r3, [sp, #4]
 802abd2:	781a      	ldrb	r2, [r3, #0]
 802abd4:	2a0a      	cmp	r2, #10
 802abd6:	f000 8131 	beq.w	802ae3c <strptime_l+0x624>
 802abda:	e07c      	b.n	802acd6 <strptime_l+0x4be>
 802abdc:	499d      	ldr	r1, [pc, #628]	; (802ae54 <strptime_l+0x63c>)
 802abde:	462a      	mov	r2, r5
 802abe0:	a801      	add	r0, sp, #4
 802abe2:	f7ff fdfa 	bl	802a7da <match_string>
 802abe6:	2800      	cmp	r0, #0
 802abe8:	db75      	blt.n	802acd6 <strptime_l+0x4be>
 802abea:	68a3      	ldr	r3, [r4, #8]
 802abec:	b92b      	cbnz	r3, 802abfa <strptime_l+0x3e2>
 802abee:	2801      	cmp	r0, #1
 802abf0:	f47f ae5a 	bne.w	802a8a8 <strptime_l+0x90>
 802abf4:	230c      	movs	r3, #12
 802abf6:	60a3      	str	r3, [r4, #8]
 802abf8:	e656      	b.n	802a8a8 <strptime_l+0x90>
 802abfa:	330c      	adds	r3, #12
 802abfc:	e7fb      	b.n	802abf6 <strptime_l+0x3de>
 802abfe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 802ac02:	462b      	mov	r3, r5
 802ac04:	4622      	mov	r2, r4
 802ac06:	9801      	ldr	r0, [sp, #4]
 802ac08:	f7ff fe06 	bl	802a818 <strptime_l>
 802ac0c:	9003      	str	r0, [sp, #12]
 802ac0e:	2800      	cmp	r0, #0
 802ac10:	d061      	beq.n	802acd6 <strptime_l+0x4be>
 802ac12:	9001      	str	r0, [sp, #4]
 802ac14:	e648      	b.n	802a8a8 <strptime_l+0x90>
 802ac16:	4990      	ldr	r1, [pc, #576]	; (802ae58 <strptime_l+0x640>)
 802ac18:	462b      	mov	r3, r5
 802ac1a:	4622      	mov	r2, r4
 802ac1c:	e7f3      	b.n	802ac06 <strptime_l+0x3ee>
 802ac1e:	f7fe fe21 	bl	8029864 <__errno>
 802ac22:	f8d0 b000 	ldr.w	fp, [r0]
 802ac26:	f7fe fe1d 	bl	8029864 <__errno>
 802ac2a:	2300      	movs	r3, #0
 802ac2c:	6003      	str	r3, [r0, #0]
 802ac2e:	220a      	movs	r2, #10
 802ac30:	462b      	mov	r3, r5
 802ac32:	9801      	ldr	r0, [sp, #4]
 802ac34:	a903      	add	r1, sp, #12
 802ac36:	f000 fa73 	bl	802b120 <strtoll_l>
 802ac3a:	9a03      	ldr	r2, [sp, #12]
 802ac3c:	9b01      	ldr	r3, [sp, #4]
 802ac3e:	429a      	cmp	r2, r3
 802ac40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ac44:	4680      	mov	r8, r0
 802ac46:	468a      	mov	sl, r1
 802ac48:	d045      	beq.n	802acd6 <strptime_l+0x4be>
 802ac4a:	f7fe fe0b 	bl	8029864 <__errno>
 802ac4e:	6803      	ldr	r3, [r0, #0]
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	d140      	bne.n	802acd6 <strptime_l+0x4be>
 802ac54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ac58:	4553      	cmp	r3, sl
 802ac5a:	bf08      	it	eq
 802ac5c:	4542      	cmpeq	r2, r8
 802ac5e:	d13a      	bne.n	802acd6 <strptime_l+0x4be>
 802ac60:	4621      	mov	r1, r4
 802ac62:	a804      	add	r0, sp, #16
 802ac64:	f000 fffa 	bl	802bc5c <localtime_r>
 802ac68:	4284      	cmp	r4, r0
 802ac6a:	d134      	bne.n	802acd6 <strptime_l+0x4be>
 802ac6c:	f7fe fdfa 	bl	8029864 <__errno>
 802ac70:	9b03      	ldr	r3, [sp, #12]
 802ac72:	f8c0 b000 	str.w	fp, [r0]
 802ac76:	f04f 081f 	mov.w	r8, #31
 802ac7a:	9301      	str	r3, [sp, #4]
 802ac7c:	e614      	b.n	802a8a8 <strptime_l+0x90>
 802ac7e:	462b      	mov	r3, r5
 802ac80:	220a      	movs	r2, #10
 802ac82:	9801      	ldr	r0, [sp, #4]
 802ac84:	a903      	add	r1, sp, #12
 802ac86:	f000 f9ab 	bl	802afe0 <strtol_l>
 802ac8a:	9b03      	ldr	r3, [sp, #12]
 802ac8c:	9a01      	ldr	r2, [sp, #4]
 802ac8e:	4293      	cmp	r3, r2
 802ac90:	d021      	beq.n	802acd6 <strptime_l+0x4be>
 802ac92:	6020      	str	r0, [r4, #0]
 802ac94:	e74d      	b.n	802ab32 <strptime_l+0x31a>
 802ac96:	9b01      	ldr	r3, [sp, #4]
 802ac98:	781a      	ldrb	r2, [r3, #0]
 802ac9a:	2a09      	cmp	r2, #9
 802ac9c:	e79b      	b.n	802abd6 <strptime_l+0x3be>
 802ac9e:	496f      	ldr	r1, [pc, #444]	; (802ae5c <strptime_l+0x644>)
 802aca0:	462b      	mov	r3, r5
 802aca2:	4622      	mov	r2, r4
 802aca4:	e7af      	b.n	802ac06 <strptime_l+0x3ee>
 802aca6:	462b      	mov	r3, r5
 802aca8:	220a      	movs	r2, #10
 802acaa:	9801      	ldr	r0, [sp, #4]
 802acac:	a903      	add	r1, sp, #12
 802acae:	f000 f997 	bl	802afe0 <strtol_l>
 802acb2:	9b03      	ldr	r3, [sp, #12]
 802acb4:	9a01      	ldr	r2, [sp, #4]
 802acb6:	4293      	cmp	r3, r2
 802acb8:	d00d      	beq.n	802acd6 <strptime_l+0x4be>
 802acba:	3801      	subs	r0, #1
 802acbc:	61a0      	str	r0, [r4, #24]
 802acbe:	9301      	str	r3, [sp, #4]
 802acc0:	e6cc      	b.n	802aa5c <strptime_l+0x244>
 802acc2:	462b      	mov	r3, r5
 802acc4:	220a      	movs	r2, #10
 802acc6:	9801      	ldr	r0, [sp, #4]
 802acc8:	a903      	add	r1, sp, #12
 802acca:	f000 f989 	bl	802afe0 <strtol_l>
 802acce:	9b03      	ldr	r3, [sp, #12]
 802acd0:	9a01      	ldr	r2, [sp, #4]
 802acd2:	4293      	cmp	r3, r2
 802acd4:	d1f2      	bne.n	802acbc <strptime_l+0x4a4>
 802acd6:	2000      	movs	r0, #0
 802acd8:	b007      	add	sp, #28
 802acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acde:	462b      	mov	r3, r5
 802ace0:	9801      	ldr	r0, [sp, #4]
 802ace2:	220a      	movs	r2, #10
 802ace4:	a903      	add	r1, sp, #12
 802ace6:	f000 f97b 	bl	802afe0 <strtol_l>
 802acea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802acee:	9b01      	ldr	r3, [sp, #4]
 802acf0:	459b      	cmp	fp, r3
 802acf2:	4682      	mov	sl, r0
 802acf4:	d0ef      	beq.n	802acd6 <strptime_l+0x4be>
 802acf6:	6960      	ldr	r0, [r4, #20]
 802acf8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802acfc:	f7ff fd56 	bl	802a7ac <first_day>
 802ad00:	69a3      	ldr	r3, [r4, #24]
 802ad02:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 802ad06:	4453      	add	r3, sl
 802ad08:	1a1b      	subs	r3, r3, r0
 802ad0a:	2b00      	cmp	r3, #0
 802ad0c:	61e3      	str	r3, [r4, #28]
 802ad0e:	da02      	bge.n	802ad16 <strptime_l+0x4fe>
 802ad10:	61a0      	str	r0, [r4, #24]
 802ad12:	2300      	movs	r3, #0
 802ad14:	61e3      	str	r3, [r4, #28]
 802ad16:	f8cd b004 	str.w	fp, [sp, #4]
 802ad1a:	e73a      	b.n	802ab92 <strptime_l+0x37a>
 802ad1c:	462b      	mov	r3, r5
 802ad1e:	9801      	ldr	r0, [sp, #4]
 802ad20:	220a      	movs	r2, #10
 802ad22:	a903      	add	r1, sp, #12
 802ad24:	f000 f95c 	bl	802afe0 <strtol_l>
 802ad28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802ad2c:	9b01      	ldr	r3, [sp, #4]
 802ad2e:	459b      	cmp	fp, r3
 802ad30:	4682      	mov	sl, r0
 802ad32:	d0d0      	beq.n	802acd6 <strptime_l+0x4be>
 802ad34:	6960      	ldr	r0, [r4, #20]
 802ad36:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802ad3a:	f7ff fd37 	bl	802a7ac <first_day>
 802ad3e:	2307      	movs	r3, #7
 802ad40:	3006      	adds	r0, #6
 802ad42:	fb90 f3f3 	sdiv	r3, r0, r3
 802ad46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802ad4a:	1ac2      	subs	r2, r0, r3
 802ad4c:	2a03      	cmp	r2, #3
 802ad4e:	f10a 30ff 	add.w	r0, sl, #4294967295
 802ad52:	bfcc      	ite	gt
 802ad54:	2300      	movgt	r3, #0
 802ad56:	2307      	movle	r3, #7
 802ad58:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 802ad5c:	4403      	add	r3, r0
 802ad5e:	69a0      	ldr	r0, [r4, #24]
 802ad60:	4403      	add	r3, r0
 802ad62:	1a9b      	subs	r3, r3, r2
 802ad64:	2b00      	cmp	r3, #0
 802ad66:	61e3      	str	r3, [r4, #28]
 802ad68:	dad5      	bge.n	802ad16 <strptime_l+0x4fe>
 802ad6a:	61a2      	str	r2, [r4, #24]
 802ad6c:	e7d1      	b.n	802ad12 <strptime_l+0x4fa>
 802ad6e:	462b      	mov	r3, r5
 802ad70:	9801      	ldr	r0, [sp, #4]
 802ad72:	220a      	movs	r2, #10
 802ad74:	a903      	add	r1, sp, #12
 802ad76:	f000 f933 	bl	802afe0 <strtol_l>
 802ad7a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 802ad7e:	9b01      	ldr	r3, [sp, #4]
 802ad80:	459a      	cmp	sl, r3
 802ad82:	4683      	mov	fp, r0
 802ad84:	d0a7      	beq.n	802acd6 <strptime_l+0x4be>
 802ad86:	6960      	ldr	r0, [r4, #20]
 802ad88:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802ad8c:	f7ff fd0e 	bl	802a7ac <first_day>
 802ad90:	69a1      	ldr	r1, [r4, #24]
 802ad92:	3006      	adds	r0, #6
 802ad94:	f04f 0c07 	mov.w	ip, #7
 802ad98:	fb90 f2fc 	sdiv	r2, r0, ip
 802ad9c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802ada0:	1a83      	subs	r3, r0, r2
 802ada2:	3106      	adds	r1, #6
 802ada4:	fb91 f2fc 	sdiv	r2, r1, ip
 802ada8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802adac:	1a89      	subs	r1, r1, r2
 802adae:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 802adb2:	440a      	add	r2, r1
 802adb4:	1ad2      	subs	r2, r2, r3
 802adb6:	2a00      	cmp	r2, #0
 802adb8:	61e2      	str	r2, [r4, #28]
 802adba:	da09      	bge.n	802add0 <strptime_l+0x5b8>
 802adbc:	3301      	adds	r3, #1
 802adbe:	fb93 fcfc 	sdiv	ip, r3, ip
 802adc2:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 802adc6:	eba3 030c 	sub.w	r3, r3, ip
 802adca:	61a3      	str	r3, [r4, #24]
 802adcc:	2300      	movs	r3, #0
 802adce:	61e3      	str	r3, [r4, #28]
 802add0:	f8cd a004 	str.w	sl, [sp, #4]
 802add4:	e6dd      	b.n	802ab92 <strptime_l+0x37a>
 802add6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 802adda:	462b      	mov	r3, r5
 802addc:	4622      	mov	r2, r4
 802adde:	e674      	b.n	802aaca <strptime_l+0x2b2>
 802ade0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 802ade4:	462b      	mov	r3, r5
 802ade6:	4622      	mov	r2, r4
 802ade8:	e70d      	b.n	802ac06 <strptime_l+0x3ee>
 802adea:	462b      	mov	r3, r5
 802adec:	220a      	movs	r2, #10
 802adee:	9801      	ldr	r0, [sp, #4]
 802adf0:	a903      	add	r1, sp, #12
 802adf2:	f000 f8f5 	bl	802afe0 <strtol_l>
 802adf6:	9b03      	ldr	r3, [sp, #12]
 802adf8:	9a01      	ldr	r2, [sp, #4]
 802adfa:	4293      	cmp	r3, r2
 802adfc:	f43f af6b 	beq.w	802acd6 <strptime_l+0x4be>
 802ae00:	2845      	cmp	r0, #69	; 0x45
 802ae02:	dc00      	bgt.n	802ae06 <strptime_l+0x5ee>
 802ae04:	3064      	adds	r0, #100	; 0x64
 802ae06:	6160      	str	r0, [r4, #20]
 802ae08:	9301      	str	r3, [sp, #4]
 802ae0a:	f048 0804 	orr.w	r8, r8, #4
 802ae0e:	e54b      	b.n	802a8a8 <strptime_l+0x90>
 802ae10:	462b      	mov	r3, r5
 802ae12:	220a      	movs	r2, #10
 802ae14:	9801      	ldr	r0, [sp, #4]
 802ae16:	a903      	add	r1, sp, #12
 802ae18:	f000 f8e2 	bl	802afe0 <strtol_l>
 802ae1c:	9b03      	ldr	r3, [sp, #12]
 802ae1e:	9a01      	ldr	r2, [sp, #4]
 802ae20:	4293      	cmp	r3, r2
 802ae22:	f47f ae3d 	bne.w	802aaa0 <strptime_l+0x288>
 802ae26:	e756      	b.n	802acd6 <strptime_l+0x4be>
 802ae28:	3601      	adds	r6, #1
 802ae2a:	9b01      	ldr	r3, [sp, #4]
 802ae2c:	781a      	ldrb	r2, [r3, #0]
 802ae2e:	2a25      	cmp	r2, #37	; 0x25
 802ae30:	e6d1      	b.n	802abd6 <strptime_l+0x3be>
 802ae32:	9a01      	ldr	r2, [sp, #4]
 802ae34:	7811      	ldrb	r1, [r2, #0]
 802ae36:	2925      	cmp	r1, #37	; 0x25
 802ae38:	d102      	bne.n	802ae40 <strptime_l+0x628>
 802ae3a:	9b01      	ldr	r3, [sp, #4]
 802ae3c:	3301      	adds	r3, #1
 802ae3e:	e678      	b.n	802ab32 <strptime_l+0x31a>
 802ae40:	1c51      	adds	r1, r2, #1
 802ae42:	9101      	str	r1, [sp, #4]
 802ae44:	7852      	ldrb	r2, [r2, #1]
 802ae46:	429a      	cmp	r2, r3
 802ae48:	d0f7      	beq.n	802ae3a <strptime_l+0x622>
 802ae4a:	e744      	b.n	802acd6 <strptime_l+0x4be>
 802ae4c:	9b01      	ldr	r3, [sp, #4]
 802ae4e:	7819      	ldrb	r1, [r3, #0]
 802ae50:	4291      	cmp	r1, r2
 802ae52:	e6c0      	b.n	802abd6 <strptime_l+0x3be>
 802ae54:	08030a64 	.word	0x08030a64
 802ae58:	08030862 	.word	0x08030862
 802ae5c:	08030868 	.word	0x08030868
 802ae60:	f008 0314 	and.w	r3, r8, #20
 802ae64:	2b14      	cmp	r3, #20
 802ae66:	f47f ad00 	bne.w	802a86a <strptime_l+0x52>
 802ae6a:	f018 0302 	ands.w	r3, r8, #2
 802ae6e:	d103      	bne.n	802ae78 <strptime_l+0x660>
 802ae70:	69e1      	ldr	r1, [r4, #28]
 802ae72:	291e      	cmp	r1, #30
 802ae74:	dc17      	bgt.n	802aea6 <strptime_l+0x68e>
 802ae76:	6123      	str	r3, [r4, #16]
 802ae78:	f018 0f01 	tst.w	r8, #1
 802ae7c:	f47f acf5 	bne.w	802a86a <strptime_l+0x52>
 802ae80:	6925      	ldr	r5, [r4, #16]
 802ae82:	4b11      	ldr	r3, [pc, #68]	; (802aec8 <strptime_l+0x6b0>)
 802ae84:	69e1      	ldr	r1, [r4, #28]
 802ae86:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802ae8a:	6960      	ldr	r0, [r4, #20]
 802ae8c:	1ac9      	subs	r1, r1, r3
 802ae8e:	60e1      	str	r1, [r4, #12]
 802ae90:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802ae94:	f7ff fc74 	bl	802a780 <is_leap_year>
 802ae98:	b110      	cbz	r0, 802aea0 <strptime_l+0x688>
 802ae9a:	2d01      	cmp	r5, #1
 802ae9c:	f73f ace5 	bgt.w	802a86a <strptime_l+0x52>
 802aea0:	3101      	adds	r1, #1
 802aea2:	60e1      	str	r1, [r4, #12]
 802aea4:	e4e1      	b.n	802a86a <strptime_l+0x52>
 802aea6:	6960      	ldr	r0, [r4, #20]
 802aea8:	4d07      	ldr	r5, [pc, #28]	; (802aec8 <strptime_l+0x6b0>)
 802aeaa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802aeae:	f7ff fc67 	bl	802a780 <is_leap_year>
 802aeb2:	2302      	movs	r3, #2
 802aeb4:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802aeb8:	4402      	add	r2, r0
 802aeba:	4291      	cmp	r1, r2
 802aebc:	db02      	blt.n	802aec4 <strptime_l+0x6ac>
 802aebe:	3301      	adds	r3, #1
 802aec0:	2b0c      	cmp	r3, #12
 802aec2:	d1f7      	bne.n	802aeb4 <strptime_l+0x69c>
 802aec4:	3b01      	subs	r3, #1
 802aec6:	e7d6      	b.n	802ae76 <strptime_l+0x65e>
 802aec8:	08030874 	.word	0x08030874

0802aecc <strptime>:
 802aecc:	4b01      	ldr	r3, [pc, #4]	; (802aed4 <strptime+0x8>)
 802aece:	f7ff bca3 	b.w	802a818 <strptime_l>
 802aed2:	bf00      	nop
 802aed4:	20000188 	.word	0x20000188

0802aed8 <_strtol_l.constprop.0>:
 802aed8:	2b01      	cmp	r3, #1
 802aeda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aede:	d001      	beq.n	802aee4 <_strtol_l.constprop.0+0xc>
 802aee0:	2b24      	cmp	r3, #36	; 0x24
 802aee2:	d906      	bls.n	802aef2 <_strtol_l.constprop.0+0x1a>
 802aee4:	f7fe fcbe 	bl	8029864 <__errno>
 802aee8:	2316      	movs	r3, #22
 802aeea:	6003      	str	r3, [r0, #0]
 802aeec:	2000      	movs	r0, #0
 802aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aef2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802afd8 <_strtol_l.constprop.0+0x100>
 802aef6:	460d      	mov	r5, r1
 802aef8:	462e      	mov	r6, r5
 802aefa:	f815 4b01 	ldrb.w	r4, [r5], #1
 802aefe:	f814 700c 	ldrb.w	r7, [r4, ip]
 802af02:	f017 0708 	ands.w	r7, r7, #8
 802af06:	d1f7      	bne.n	802aef8 <_strtol_l.constprop.0+0x20>
 802af08:	2c2d      	cmp	r4, #45	; 0x2d
 802af0a:	d132      	bne.n	802af72 <_strtol_l.constprop.0+0x9a>
 802af0c:	782c      	ldrb	r4, [r5, #0]
 802af0e:	2701      	movs	r7, #1
 802af10:	1cb5      	adds	r5, r6, #2
 802af12:	2b00      	cmp	r3, #0
 802af14:	d05b      	beq.n	802afce <_strtol_l.constprop.0+0xf6>
 802af16:	2b10      	cmp	r3, #16
 802af18:	d109      	bne.n	802af2e <_strtol_l.constprop.0+0x56>
 802af1a:	2c30      	cmp	r4, #48	; 0x30
 802af1c:	d107      	bne.n	802af2e <_strtol_l.constprop.0+0x56>
 802af1e:	782c      	ldrb	r4, [r5, #0]
 802af20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802af24:	2c58      	cmp	r4, #88	; 0x58
 802af26:	d14d      	bne.n	802afc4 <_strtol_l.constprop.0+0xec>
 802af28:	786c      	ldrb	r4, [r5, #1]
 802af2a:	2310      	movs	r3, #16
 802af2c:	3502      	adds	r5, #2
 802af2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802af32:	f108 38ff 	add.w	r8, r8, #4294967295
 802af36:	f04f 0c00 	mov.w	ip, #0
 802af3a:	fbb8 f9f3 	udiv	r9, r8, r3
 802af3e:	4666      	mov	r6, ip
 802af40:	fb03 8a19 	mls	sl, r3, r9, r8
 802af44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802af48:	f1be 0f09 	cmp.w	lr, #9
 802af4c:	d816      	bhi.n	802af7c <_strtol_l.constprop.0+0xa4>
 802af4e:	4674      	mov	r4, lr
 802af50:	42a3      	cmp	r3, r4
 802af52:	dd24      	ble.n	802af9e <_strtol_l.constprop.0+0xc6>
 802af54:	f1bc 0f00 	cmp.w	ip, #0
 802af58:	db1e      	blt.n	802af98 <_strtol_l.constprop.0+0xc0>
 802af5a:	45b1      	cmp	r9, r6
 802af5c:	d31c      	bcc.n	802af98 <_strtol_l.constprop.0+0xc0>
 802af5e:	d101      	bne.n	802af64 <_strtol_l.constprop.0+0x8c>
 802af60:	45a2      	cmp	sl, r4
 802af62:	db19      	blt.n	802af98 <_strtol_l.constprop.0+0xc0>
 802af64:	fb06 4603 	mla	r6, r6, r3, r4
 802af68:	f04f 0c01 	mov.w	ip, #1
 802af6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802af70:	e7e8      	b.n	802af44 <_strtol_l.constprop.0+0x6c>
 802af72:	2c2b      	cmp	r4, #43	; 0x2b
 802af74:	bf04      	itt	eq
 802af76:	782c      	ldrbeq	r4, [r5, #0]
 802af78:	1cb5      	addeq	r5, r6, #2
 802af7a:	e7ca      	b.n	802af12 <_strtol_l.constprop.0+0x3a>
 802af7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802af80:	f1be 0f19 	cmp.w	lr, #25
 802af84:	d801      	bhi.n	802af8a <_strtol_l.constprop.0+0xb2>
 802af86:	3c37      	subs	r4, #55	; 0x37
 802af88:	e7e2      	b.n	802af50 <_strtol_l.constprop.0+0x78>
 802af8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802af8e:	f1be 0f19 	cmp.w	lr, #25
 802af92:	d804      	bhi.n	802af9e <_strtol_l.constprop.0+0xc6>
 802af94:	3c57      	subs	r4, #87	; 0x57
 802af96:	e7db      	b.n	802af50 <_strtol_l.constprop.0+0x78>
 802af98:	f04f 3cff 	mov.w	ip, #4294967295
 802af9c:	e7e6      	b.n	802af6c <_strtol_l.constprop.0+0x94>
 802af9e:	f1bc 0f00 	cmp.w	ip, #0
 802afa2:	da05      	bge.n	802afb0 <_strtol_l.constprop.0+0xd8>
 802afa4:	2322      	movs	r3, #34	; 0x22
 802afa6:	6003      	str	r3, [r0, #0]
 802afa8:	4646      	mov	r6, r8
 802afaa:	b942      	cbnz	r2, 802afbe <_strtol_l.constprop.0+0xe6>
 802afac:	4630      	mov	r0, r6
 802afae:	e79e      	b.n	802aeee <_strtol_l.constprop.0+0x16>
 802afb0:	b107      	cbz	r7, 802afb4 <_strtol_l.constprop.0+0xdc>
 802afb2:	4276      	negs	r6, r6
 802afb4:	2a00      	cmp	r2, #0
 802afb6:	d0f9      	beq.n	802afac <_strtol_l.constprop.0+0xd4>
 802afb8:	f1bc 0f00 	cmp.w	ip, #0
 802afbc:	d000      	beq.n	802afc0 <_strtol_l.constprop.0+0xe8>
 802afbe:	1e69      	subs	r1, r5, #1
 802afc0:	6011      	str	r1, [r2, #0]
 802afc2:	e7f3      	b.n	802afac <_strtol_l.constprop.0+0xd4>
 802afc4:	2430      	movs	r4, #48	; 0x30
 802afc6:	2b00      	cmp	r3, #0
 802afc8:	d1b1      	bne.n	802af2e <_strtol_l.constprop.0+0x56>
 802afca:	2308      	movs	r3, #8
 802afcc:	e7af      	b.n	802af2e <_strtol_l.constprop.0+0x56>
 802afce:	2c30      	cmp	r4, #48	; 0x30
 802afd0:	d0a5      	beq.n	802af1e <_strtol_l.constprop.0+0x46>
 802afd2:	230a      	movs	r3, #10
 802afd4:	e7ab      	b.n	802af2e <_strtol_l.constprop.0+0x56>
 802afd6:	bf00      	nop
 802afd8:	08030af9 	.word	0x08030af9

0802afdc <_strtol_r>:
 802afdc:	f7ff bf7c 	b.w	802aed8 <_strtol_l.constprop.0>

0802afe0 <strtol_l>:
 802afe0:	4613      	mov	r3, r2
 802afe2:	460a      	mov	r2, r1
 802afe4:	4601      	mov	r1, r0
 802afe6:	4802      	ldr	r0, [pc, #8]	; (802aff0 <strtol_l+0x10>)
 802afe8:	6800      	ldr	r0, [r0, #0]
 802afea:	f7ff bf75 	b.w	802aed8 <_strtol_l.constprop.0>
 802afee:	bf00      	nop
 802aff0:	200000bc 	.word	0x200000bc

0802aff4 <_strtoll_l.constprop.0>:
 802aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aff8:	b085      	sub	sp, #20
 802affa:	4688      	mov	r8, r1
 802affc:	9201      	str	r2, [sp, #4]
 802affe:	4a47      	ldr	r2, [pc, #284]	; (802b11c <_strtoll_l.constprop.0+0x128>)
 802b000:	9003      	str	r0, [sp, #12]
 802b002:	461e      	mov	r6, r3
 802b004:	460d      	mov	r5, r1
 802b006:	462b      	mov	r3, r5
 802b008:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b00c:	5ca7      	ldrb	r7, [r4, r2]
 802b00e:	f017 0708 	ands.w	r7, r7, #8
 802b012:	d1f8      	bne.n	802b006 <_strtoll_l.constprop.0+0x12>
 802b014:	2c2d      	cmp	r4, #45	; 0x2d
 802b016:	d147      	bne.n	802b0a8 <_strtoll_l.constprop.0+0xb4>
 802b018:	782c      	ldrb	r4, [r5, #0]
 802b01a:	2701      	movs	r7, #1
 802b01c:	1c9d      	adds	r5, r3, #2
 802b01e:	2e00      	cmp	r6, #0
 802b020:	d077      	beq.n	802b112 <_strtoll_l.constprop.0+0x11e>
 802b022:	2e10      	cmp	r6, #16
 802b024:	d109      	bne.n	802b03a <_strtoll_l.constprop.0+0x46>
 802b026:	2c30      	cmp	r4, #48	; 0x30
 802b028:	d107      	bne.n	802b03a <_strtoll_l.constprop.0+0x46>
 802b02a:	782b      	ldrb	r3, [r5, #0]
 802b02c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802b030:	2b58      	cmp	r3, #88	; 0x58
 802b032:	d169      	bne.n	802b108 <_strtoll_l.constprop.0+0x114>
 802b034:	786c      	ldrb	r4, [r5, #1]
 802b036:	2610      	movs	r6, #16
 802b038:	3502      	adds	r5, #2
 802b03a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 802b03e:	f107 3bff 	add.w	fp, r7, #4294967295
 802b042:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b046:	ea4f 79e6 	mov.w	r9, r6, asr #31
 802b04a:	4632      	mov	r2, r6
 802b04c:	464b      	mov	r3, r9
 802b04e:	4658      	mov	r0, fp
 802b050:	4651      	mov	r1, sl
 802b052:	f7d5 f9a7 	bl	80003a4 <__aeabi_uldivmod>
 802b056:	2300      	movs	r3, #0
 802b058:	9202      	str	r2, [sp, #8]
 802b05a:	468c      	mov	ip, r1
 802b05c:	4602      	mov	r2, r0
 802b05e:	4619      	mov	r1, r3
 802b060:	4618      	mov	r0, r3
 802b062:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802b066:	f1be 0f09 	cmp.w	lr, #9
 802b06a:	d822      	bhi.n	802b0b2 <_strtoll_l.constprop.0+0xbe>
 802b06c:	4674      	mov	r4, lr
 802b06e:	42a6      	cmp	r6, r4
 802b070:	dd30      	ble.n	802b0d4 <_strtoll_l.constprop.0+0xe0>
 802b072:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b076:	d014      	beq.n	802b0a2 <_strtoll_l.constprop.0+0xae>
 802b078:	4282      	cmp	r2, r0
 802b07a:	eb7c 0301 	sbcs.w	r3, ip, r1
 802b07e:	d326      	bcc.n	802b0ce <_strtoll_l.constprop.0+0xda>
 802b080:	458c      	cmp	ip, r1
 802b082:	bf08      	it	eq
 802b084:	4282      	cmpeq	r2, r0
 802b086:	d102      	bne.n	802b08e <_strtoll_l.constprop.0+0x9a>
 802b088:	9b02      	ldr	r3, [sp, #8]
 802b08a:	42a3      	cmp	r3, r4
 802b08c:	db1f      	blt.n	802b0ce <_strtoll_l.constprop.0+0xda>
 802b08e:	4371      	muls	r1, r6
 802b090:	fb00 1109 	mla	r1, r0, r9, r1
 802b094:	fba6 0300 	umull	r0, r3, r6, r0
 802b098:	4419      	add	r1, r3
 802b09a:	1820      	adds	r0, r4, r0
 802b09c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802b0a0:	2301      	movs	r3, #1
 802b0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b0a6:	e7dc      	b.n	802b062 <_strtoll_l.constprop.0+0x6e>
 802b0a8:	2c2b      	cmp	r4, #43	; 0x2b
 802b0aa:	bf04      	itt	eq
 802b0ac:	782c      	ldrbeq	r4, [r5, #0]
 802b0ae:	1c9d      	addeq	r5, r3, #2
 802b0b0:	e7b5      	b.n	802b01e <_strtoll_l.constprop.0+0x2a>
 802b0b2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802b0b6:	f1be 0f19 	cmp.w	lr, #25
 802b0ba:	d801      	bhi.n	802b0c0 <_strtoll_l.constprop.0+0xcc>
 802b0bc:	3c37      	subs	r4, #55	; 0x37
 802b0be:	e7d6      	b.n	802b06e <_strtoll_l.constprop.0+0x7a>
 802b0c0:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802b0c4:	f1be 0f19 	cmp.w	lr, #25
 802b0c8:	d804      	bhi.n	802b0d4 <_strtoll_l.constprop.0+0xe0>
 802b0ca:	3c57      	subs	r4, #87	; 0x57
 802b0cc:	e7cf      	b.n	802b06e <_strtoll_l.constprop.0+0x7a>
 802b0ce:	f04f 33ff 	mov.w	r3, #4294967295
 802b0d2:	e7e6      	b.n	802b0a2 <_strtoll_l.constprop.0+0xae>
 802b0d4:	1c5a      	adds	r2, r3, #1
 802b0d6:	d109      	bne.n	802b0ec <_strtoll_l.constprop.0+0xf8>
 802b0d8:	9a03      	ldr	r2, [sp, #12]
 802b0da:	2322      	movs	r3, #34	; 0x22
 802b0dc:	6013      	str	r3, [r2, #0]
 802b0de:	9b01      	ldr	r3, [sp, #4]
 802b0e0:	4658      	mov	r0, fp
 802b0e2:	4651      	mov	r1, sl
 802b0e4:	b953      	cbnz	r3, 802b0fc <_strtoll_l.constprop.0+0x108>
 802b0e6:	b005      	add	sp, #20
 802b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0ec:	b117      	cbz	r7, 802b0f4 <_strtoll_l.constprop.0+0x100>
 802b0ee:	4240      	negs	r0, r0
 802b0f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802b0f4:	9a01      	ldr	r2, [sp, #4]
 802b0f6:	2a00      	cmp	r2, #0
 802b0f8:	d0f5      	beq.n	802b0e6 <_strtoll_l.constprop.0+0xf2>
 802b0fa:	b10b      	cbz	r3, 802b100 <_strtoll_l.constprop.0+0x10c>
 802b0fc:	f105 38ff 	add.w	r8, r5, #4294967295
 802b100:	9b01      	ldr	r3, [sp, #4]
 802b102:	f8c3 8000 	str.w	r8, [r3]
 802b106:	e7ee      	b.n	802b0e6 <_strtoll_l.constprop.0+0xf2>
 802b108:	2430      	movs	r4, #48	; 0x30
 802b10a:	2e00      	cmp	r6, #0
 802b10c:	d195      	bne.n	802b03a <_strtoll_l.constprop.0+0x46>
 802b10e:	2608      	movs	r6, #8
 802b110:	e793      	b.n	802b03a <_strtoll_l.constprop.0+0x46>
 802b112:	2c30      	cmp	r4, #48	; 0x30
 802b114:	d089      	beq.n	802b02a <_strtoll_l.constprop.0+0x36>
 802b116:	260a      	movs	r6, #10
 802b118:	e78f      	b.n	802b03a <_strtoll_l.constprop.0+0x46>
 802b11a:	bf00      	nop
 802b11c:	08030af9 	.word	0x08030af9

0802b120 <strtoll_l>:
 802b120:	4613      	mov	r3, r2
 802b122:	460a      	mov	r2, r1
 802b124:	4601      	mov	r1, r0
 802b126:	4802      	ldr	r0, [pc, #8]	; (802b130 <strtoll_l+0x10>)
 802b128:	6800      	ldr	r0, [r0, #0]
 802b12a:	f7ff bf63 	b.w	802aff4 <_strtoll_l.constprop.0>
 802b12e:	bf00      	nop
 802b130:	200000bc 	.word	0x200000bc

0802b134 <__tzcalc_limits>:
 802b134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b138:	4605      	mov	r5, r0
 802b13a:	f000 fd8b 	bl	802bc54 <__gettzinfo>
 802b13e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802b142:	429d      	cmp	r5, r3
 802b144:	f340 8099 	ble.w	802b27a <__tzcalc_limits+0x146>
 802b148:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 802b14c:	18ac      	adds	r4, r5, r2
 802b14e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802b152:	f240 126d 	movw	r2, #365	; 0x16d
 802b156:	10a4      	asrs	r4, r4, #2
 802b158:	fb02 4403 	mla	r4, r2, r3, r4
 802b15c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 802b160:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802b164:	fb93 f3f2 	sdiv	r3, r3, r2
 802b168:	441c      	add	r4, r3
 802b16a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802b16e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802b172:	fb95 fcf3 	sdiv	ip, r5, r3
 802b176:	fb03 5c1c 	mls	ip, r3, ip, r5
 802b17a:	186a      	adds	r2, r5, r1
 802b17c:	fabc f68c 	clz	r6, ip
 802b180:	fbb2 f2f3 	udiv	r2, r2, r3
 802b184:	f005 0303 	and.w	r3, r5, #3
 802b188:	4414      	add	r4, r2
 802b18a:	2264      	movs	r2, #100	; 0x64
 802b18c:	6045      	str	r5, [r0, #4]
 802b18e:	fb95 f7f2 	sdiv	r7, r5, r2
 802b192:	0976      	lsrs	r6, r6, #5
 802b194:	fb02 5717 	mls	r7, r2, r7, r5
 802b198:	4601      	mov	r1, r0
 802b19a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802b19e:	9300      	str	r3, [sp, #0]
 802b1a0:	f04f 0a07 	mov.w	sl, #7
 802b1a4:	7a0d      	ldrb	r5, [r1, #8]
 802b1a6:	694b      	ldr	r3, [r1, #20]
 802b1a8:	2d4a      	cmp	r5, #74	; 0x4a
 802b1aa:	d12d      	bne.n	802b208 <__tzcalc_limits+0xd4>
 802b1ac:	9a00      	ldr	r2, [sp, #0]
 802b1ae:	eb04 0e03 	add.w	lr, r4, r3
 802b1b2:	b902      	cbnz	r2, 802b1b6 <__tzcalc_limits+0x82>
 802b1b4:	b917      	cbnz	r7, 802b1bc <__tzcalc_limits+0x88>
 802b1b6:	f1bc 0f00 	cmp.w	ip, #0
 802b1ba:	d123      	bne.n	802b204 <__tzcalc_limits+0xd0>
 802b1bc:	2b3b      	cmp	r3, #59	; 0x3b
 802b1be:	bfd4      	ite	le
 802b1c0:	2300      	movle	r3, #0
 802b1c2:	2301      	movgt	r3, #1
 802b1c4:	4473      	add	r3, lr
 802b1c6:	3b01      	subs	r3, #1
 802b1c8:	698d      	ldr	r5, [r1, #24]
 802b1ca:	4a2d      	ldr	r2, [pc, #180]	; (802b280 <__tzcalc_limits+0x14c>)
 802b1cc:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 802b1d0:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802b1d4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802b1d6:	18ed      	adds	r5, r5, r3
 802b1d8:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 802b1dc:	e9c1 5308 	strd	r5, r3, [r1, #32]
 802b1e0:	3128      	adds	r1, #40	; 0x28
 802b1e2:	458b      	cmp	fp, r1
 802b1e4:	d1de      	bne.n	802b1a4 <__tzcalc_limits+0x70>
 802b1e6:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 802b1ea:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 802b1ee:	428c      	cmp	r4, r1
 802b1f0:	eb72 0303 	sbcs.w	r3, r2, r3
 802b1f4:	bfb4      	ite	lt
 802b1f6:	2301      	movlt	r3, #1
 802b1f8:	2300      	movge	r3, #0
 802b1fa:	6003      	str	r3, [r0, #0]
 802b1fc:	2001      	movs	r0, #1
 802b1fe:	b003      	add	sp, #12
 802b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b204:	2300      	movs	r3, #0
 802b206:	e7dd      	b.n	802b1c4 <__tzcalc_limits+0x90>
 802b208:	2d44      	cmp	r5, #68	; 0x44
 802b20a:	d101      	bne.n	802b210 <__tzcalc_limits+0xdc>
 802b20c:	4423      	add	r3, r4
 802b20e:	e7db      	b.n	802b1c8 <__tzcalc_limits+0x94>
 802b210:	9a00      	ldr	r2, [sp, #0]
 802b212:	bb62      	cbnz	r2, 802b26e <__tzcalc_limits+0x13a>
 802b214:	2f00      	cmp	r7, #0
 802b216:	bf0c      	ite	eq
 802b218:	4635      	moveq	r5, r6
 802b21a:	2501      	movne	r5, #1
 802b21c:	68ca      	ldr	r2, [r1, #12]
 802b21e:	9201      	str	r2, [sp, #4]
 802b220:	4a18      	ldr	r2, [pc, #96]	; (802b284 <__tzcalc_limits+0x150>)
 802b222:	f04f 0930 	mov.w	r9, #48	; 0x30
 802b226:	fb09 2505 	mla	r5, r9, r5, r2
 802b22a:	46a6      	mov	lr, r4
 802b22c:	f04f 0800 	mov.w	r8, #0
 802b230:	3d04      	subs	r5, #4
 802b232:	9a01      	ldr	r2, [sp, #4]
 802b234:	f108 0801 	add.w	r8, r8, #1
 802b238:	4542      	cmp	r2, r8
 802b23a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 802b23e:	dc18      	bgt.n	802b272 <__tzcalc_limits+0x13e>
 802b240:	f10e 0504 	add.w	r5, lr, #4
 802b244:	fb95 f8fa 	sdiv	r8, r5, sl
 802b248:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 802b24c:	eba5 0808 	sub.w	r8, r5, r8
 802b250:	ebb3 0808 	subs.w	r8, r3, r8
 802b254:	690b      	ldr	r3, [r1, #16]
 802b256:	f103 33ff 	add.w	r3, r3, #4294967295
 802b25a:	bf48      	it	mi
 802b25c:	f108 0807 	addmi.w	r8, r8, #7
 802b260:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802b264:	4443      	add	r3, r8
 802b266:	454b      	cmp	r3, r9
 802b268:	da05      	bge.n	802b276 <__tzcalc_limits+0x142>
 802b26a:	4473      	add	r3, lr
 802b26c:	e7ac      	b.n	802b1c8 <__tzcalc_limits+0x94>
 802b26e:	4635      	mov	r5, r6
 802b270:	e7d4      	b.n	802b21c <__tzcalc_limits+0xe8>
 802b272:	44ce      	add	lr, r9
 802b274:	e7dd      	b.n	802b232 <__tzcalc_limits+0xfe>
 802b276:	3b07      	subs	r3, #7
 802b278:	e7f5      	b.n	802b266 <__tzcalc_limits+0x132>
 802b27a:	2000      	movs	r0, #0
 802b27c:	e7bf      	b.n	802b1fe <__tzcalc_limits+0xca>
 802b27e:	bf00      	nop
 802b280:	00015180 	.word	0x00015180
 802b284:	08030c68 	.word	0x08030c68

0802b288 <__tz_lock>:
 802b288:	4801      	ldr	r0, [pc, #4]	; (802b290 <__tz_lock+0x8>)
 802b28a:	f000 bddc 	b.w	802be46 <__retarget_lock_acquire>
 802b28e:	bf00      	nop
 802b290:	2003c539 	.word	0x2003c539

0802b294 <__tz_unlock>:
 802b294:	4801      	ldr	r0, [pc, #4]	; (802b29c <__tz_unlock+0x8>)
 802b296:	f000 bdd8 	b.w	802be4a <__retarget_lock_release>
 802b29a:	bf00      	nop
 802b29c:	2003c539 	.word	0x2003c539

0802b2a0 <_tzset_unlocked>:
 802b2a0:	4b01      	ldr	r3, [pc, #4]	; (802b2a8 <_tzset_unlocked+0x8>)
 802b2a2:	6818      	ldr	r0, [r3, #0]
 802b2a4:	f000 b802 	b.w	802b2ac <_tzset_unlocked_r>
 802b2a8:	200000bc 	.word	0x200000bc

0802b2ac <_tzset_unlocked_r>:
 802b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b2b0:	b08d      	sub	sp, #52	; 0x34
 802b2b2:	4607      	mov	r7, r0
 802b2b4:	f000 fcce 	bl	802bc54 <__gettzinfo>
 802b2b8:	49b0      	ldr	r1, [pc, #704]	; (802b57c <_tzset_unlocked_r+0x2d0>)
 802b2ba:	4eb1      	ldr	r6, [pc, #708]	; (802b580 <_tzset_unlocked_r+0x2d4>)
 802b2bc:	4605      	mov	r5, r0
 802b2be:	4638      	mov	r0, r7
 802b2c0:	f000 fcc0 	bl	802bc44 <_getenv_r>
 802b2c4:	4604      	mov	r4, r0
 802b2c6:	b970      	cbnz	r0, 802b2e6 <_tzset_unlocked_r+0x3a>
 802b2c8:	4bae      	ldr	r3, [pc, #696]	; (802b584 <_tzset_unlocked_r+0x2d8>)
 802b2ca:	4aaf      	ldr	r2, [pc, #700]	; (802b588 <_tzset_unlocked_r+0x2dc>)
 802b2cc:	6018      	str	r0, [r3, #0]
 802b2ce:	4baf      	ldr	r3, [pc, #700]	; (802b58c <_tzset_unlocked_r+0x2e0>)
 802b2d0:	6018      	str	r0, [r3, #0]
 802b2d2:	4baf      	ldr	r3, [pc, #700]	; (802b590 <_tzset_unlocked_r+0x2e4>)
 802b2d4:	6830      	ldr	r0, [r6, #0]
 802b2d6:	e9c3 2200 	strd	r2, r2, [r3]
 802b2da:	f7fe fb07 	bl	80298ec <free>
 802b2de:	6034      	str	r4, [r6, #0]
 802b2e0:	b00d      	add	sp, #52	; 0x34
 802b2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b2e6:	6831      	ldr	r1, [r6, #0]
 802b2e8:	2900      	cmp	r1, #0
 802b2ea:	d162      	bne.n	802b3b2 <_tzset_unlocked_r+0x106>
 802b2ec:	6830      	ldr	r0, [r6, #0]
 802b2ee:	f7fe fafd 	bl	80298ec <free>
 802b2f2:	4620      	mov	r0, r4
 802b2f4:	f7d4 ffa4 	bl	8000240 <strlen>
 802b2f8:	1c41      	adds	r1, r0, #1
 802b2fa:	4638      	mov	r0, r7
 802b2fc:	f7fe fdf2 	bl	8029ee4 <_malloc_r>
 802b300:	6030      	str	r0, [r6, #0]
 802b302:	2800      	cmp	r0, #0
 802b304:	d15a      	bne.n	802b3bc <_tzset_unlocked_r+0x110>
 802b306:	7823      	ldrb	r3, [r4, #0]
 802b308:	4aa2      	ldr	r2, [pc, #648]	; (802b594 <_tzset_unlocked_r+0x2e8>)
 802b30a:	49a3      	ldr	r1, [pc, #652]	; (802b598 <_tzset_unlocked_r+0x2ec>)
 802b30c:	2b3a      	cmp	r3, #58	; 0x3a
 802b30e:	bf08      	it	eq
 802b310:	3401      	addeq	r4, #1
 802b312:	ae0a      	add	r6, sp, #40	; 0x28
 802b314:	4633      	mov	r3, r6
 802b316:	4620      	mov	r0, r4
 802b318:	f7ff f99a 	bl	802a650 <siscanf>
 802b31c:	2800      	cmp	r0, #0
 802b31e:	dddf      	ble.n	802b2e0 <_tzset_unlocked_r+0x34>
 802b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b322:	18e7      	adds	r7, r4, r3
 802b324:	5ce3      	ldrb	r3, [r4, r3]
 802b326:	2b2d      	cmp	r3, #45	; 0x2d
 802b328:	d14c      	bne.n	802b3c4 <_tzset_unlocked_r+0x118>
 802b32a:	3701      	adds	r7, #1
 802b32c:	f04f 38ff 	mov.w	r8, #4294967295
 802b330:	f10d 0a20 	add.w	sl, sp, #32
 802b334:	f10d 0b1e 	add.w	fp, sp, #30
 802b338:	2400      	movs	r4, #0
 802b33a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802b33e:	4997      	ldr	r1, [pc, #604]	; (802b59c <_tzset_unlocked_r+0x2f0>)
 802b340:	9603      	str	r6, [sp, #12]
 802b342:	f8cd b000 	str.w	fp, [sp]
 802b346:	4633      	mov	r3, r6
 802b348:	aa07      	add	r2, sp, #28
 802b34a:	4638      	mov	r0, r7
 802b34c:	f8ad 401e 	strh.w	r4, [sp, #30]
 802b350:	f8ad 4020 	strh.w	r4, [sp, #32]
 802b354:	f7ff f97c 	bl	802a650 <siscanf>
 802b358:	42a0      	cmp	r0, r4
 802b35a:	ddc1      	ble.n	802b2e0 <_tzset_unlocked_r+0x34>
 802b35c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b360:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802b364:	f8df 9240 	ldr.w	r9, [pc, #576]	; 802b5a8 <_tzset_unlocked_r+0x2fc>
 802b368:	213c      	movs	r1, #60	; 0x3c
 802b36a:	fb01 3302 	mla	r3, r1, r2, r3
 802b36e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802b372:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802b376:	fb01 3302 	mla	r3, r1, r2, r3
 802b37a:	fb08 f303 	mul.w	r3, r8, r3
 802b37e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 802b590 <_tzset_unlocked_r+0x2e4>
 802b382:	62ab      	str	r3, [r5, #40]	; 0x28
 802b384:	4b83      	ldr	r3, [pc, #524]	; (802b594 <_tzset_unlocked_r+0x2e8>)
 802b386:	f8c8 3000 	str.w	r3, [r8]
 802b38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b38c:	4982      	ldr	r1, [pc, #520]	; (802b598 <_tzset_unlocked_r+0x2ec>)
 802b38e:	441f      	add	r7, r3
 802b390:	464a      	mov	r2, r9
 802b392:	4633      	mov	r3, r6
 802b394:	4638      	mov	r0, r7
 802b396:	f7ff f95b 	bl	802a650 <siscanf>
 802b39a:	42a0      	cmp	r0, r4
 802b39c:	dc18      	bgt.n	802b3d0 <_tzset_unlocked_r+0x124>
 802b39e:	f8d8 3000 	ldr.w	r3, [r8]
 802b3a2:	f8c8 3004 	str.w	r3, [r8, #4]
 802b3a6:	4b77      	ldr	r3, [pc, #476]	; (802b584 <_tzset_unlocked_r+0x2d8>)
 802b3a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802b3aa:	601a      	str	r2, [r3, #0]
 802b3ac:	4b77      	ldr	r3, [pc, #476]	; (802b58c <_tzset_unlocked_r+0x2e0>)
 802b3ae:	601c      	str	r4, [r3, #0]
 802b3b0:	e796      	b.n	802b2e0 <_tzset_unlocked_r+0x34>
 802b3b2:	f7d4 ff9d 	bl	80002f0 <strcmp>
 802b3b6:	2800      	cmp	r0, #0
 802b3b8:	d198      	bne.n	802b2ec <_tzset_unlocked_r+0x40>
 802b3ba:	e791      	b.n	802b2e0 <_tzset_unlocked_r+0x34>
 802b3bc:	4621      	mov	r1, r4
 802b3be:	f001 f97b 	bl	802c6b8 <strcpy>
 802b3c2:	e7a0      	b.n	802b306 <_tzset_unlocked_r+0x5a>
 802b3c4:	2b2b      	cmp	r3, #43	; 0x2b
 802b3c6:	bf08      	it	eq
 802b3c8:	3701      	addeq	r7, #1
 802b3ca:	f04f 0801 	mov.w	r8, #1
 802b3ce:	e7af      	b.n	802b330 <_tzset_unlocked_r+0x84>
 802b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b3d2:	f8c8 9004 	str.w	r9, [r8, #4]
 802b3d6:	18fc      	adds	r4, r7, r3
 802b3d8:	5cfb      	ldrb	r3, [r7, r3]
 802b3da:	2b2d      	cmp	r3, #45	; 0x2d
 802b3dc:	f040 808b 	bne.w	802b4f6 <_tzset_unlocked_r+0x24a>
 802b3e0:	3401      	adds	r4, #1
 802b3e2:	f04f 37ff 	mov.w	r7, #4294967295
 802b3e6:	2300      	movs	r3, #0
 802b3e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802b3ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 802b3f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 802b3f4:	930a      	str	r3, [sp, #40]	; 0x28
 802b3f6:	e9cd a602 	strd	sl, r6, [sp, #8]
 802b3fa:	e9cd b600 	strd	fp, r6, [sp]
 802b3fe:	4967      	ldr	r1, [pc, #412]	; (802b59c <_tzset_unlocked_r+0x2f0>)
 802b400:	4633      	mov	r3, r6
 802b402:	aa07      	add	r2, sp, #28
 802b404:	4620      	mov	r0, r4
 802b406:	f7ff f923 	bl	802a650 <siscanf>
 802b40a:	2800      	cmp	r0, #0
 802b40c:	dc78      	bgt.n	802b500 <_tzset_unlocked_r+0x254>
 802b40e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802b410:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802b414:	652b      	str	r3, [r5, #80]	; 0x50
 802b416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b418:	462f      	mov	r7, r5
 802b41a:	441c      	add	r4, r3
 802b41c:	f04f 0900 	mov.w	r9, #0
 802b420:	7823      	ldrb	r3, [r4, #0]
 802b422:	2b2c      	cmp	r3, #44	; 0x2c
 802b424:	bf08      	it	eq
 802b426:	3401      	addeq	r4, #1
 802b428:	f894 8000 	ldrb.w	r8, [r4]
 802b42c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802b430:	d178      	bne.n	802b524 <_tzset_unlocked_r+0x278>
 802b432:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802b436:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802b43a:	ab09      	add	r3, sp, #36	; 0x24
 802b43c:	9300      	str	r3, [sp, #0]
 802b43e:	4958      	ldr	r1, [pc, #352]	; (802b5a0 <_tzset_unlocked_r+0x2f4>)
 802b440:	9603      	str	r6, [sp, #12]
 802b442:	4633      	mov	r3, r6
 802b444:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802b448:	4620      	mov	r0, r4
 802b44a:	f7ff f901 	bl	802a650 <siscanf>
 802b44e:	2803      	cmp	r0, #3
 802b450:	f47f af46 	bne.w	802b2e0 <_tzset_unlocked_r+0x34>
 802b454:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802b458:	1e4b      	subs	r3, r1, #1
 802b45a:	2b0b      	cmp	r3, #11
 802b45c:	f63f af40 	bhi.w	802b2e0 <_tzset_unlocked_r+0x34>
 802b460:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802b464:	1e53      	subs	r3, r2, #1
 802b466:	2b04      	cmp	r3, #4
 802b468:	f63f af3a 	bhi.w	802b2e0 <_tzset_unlocked_r+0x34>
 802b46c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802b470:	2b06      	cmp	r3, #6
 802b472:	f63f af35 	bhi.w	802b2e0 <_tzset_unlocked_r+0x34>
 802b476:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802b47a:	f887 8008 	strb.w	r8, [r7, #8]
 802b47e:	617b      	str	r3, [r7, #20]
 802b480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b482:	eb04 0803 	add.w	r8, r4, r3
 802b486:	2302      	movs	r3, #2
 802b488:	f8ad 301c 	strh.w	r3, [sp, #28]
 802b48c:	2300      	movs	r3, #0
 802b48e:	f8ad 301e 	strh.w	r3, [sp, #30]
 802b492:	f8ad 3020 	strh.w	r3, [sp, #32]
 802b496:	930a      	str	r3, [sp, #40]	; 0x28
 802b498:	f898 3000 	ldrb.w	r3, [r8]
 802b49c:	2b2f      	cmp	r3, #47	; 0x2f
 802b49e:	d109      	bne.n	802b4b4 <_tzset_unlocked_r+0x208>
 802b4a0:	e9cd a602 	strd	sl, r6, [sp, #8]
 802b4a4:	e9cd b600 	strd	fp, r6, [sp]
 802b4a8:	493e      	ldr	r1, [pc, #248]	; (802b5a4 <_tzset_unlocked_r+0x2f8>)
 802b4aa:	4633      	mov	r3, r6
 802b4ac:	aa07      	add	r2, sp, #28
 802b4ae:	4640      	mov	r0, r8
 802b4b0:	f7ff f8ce 	bl	802a650 <siscanf>
 802b4b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b4b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802b4bc:	213c      	movs	r1, #60	; 0x3c
 802b4be:	fb01 3302 	mla	r3, r1, r2, r3
 802b4c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802b4c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802b4ca:	fb01 3302 	mla	r3, r1, r2, r3
 802b4ce:	61bb      	str	r3, [r7, #24]
 802b4d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802b4d2:	3728      	adds	r7, #40	; 0x28
 802b4d4:	4444      	add	r4, r8
 802b4d6:	f1b9 0f00 	cmp.w	r9, #0
 802b4da:	d020      	beq.n	802b51e <_tzset_unlocked_r+0x272>
 802b4dc:	6868      	ldr	r0, [r5, #4]
 802b4de:	f7ff fe29 	bl	802b134 <__tzcalc_limits>
 802b4e2:	4b28      	ldr	r3, [pc, #160]	; (802b584 <_tzset_unlocked_r+0x2d8>)
 802b4e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802b4e6:	601a      	str	r2, [r3, #0]
 802b4e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802b4ea:	1a9b      	subs	r3, r3, r2
 802b4ec:	4a27      	ldr	r2, [pc, #156]	; (802b58c <_tzset_unlocked_r+0x2e0>)
 802b4ee:	bf18      	it	ne
 802b4f0:	2301      	movne	r3, #1
 802b4f2:	6013      	str	r3, [r2, #0]
 802b4f4:	e6f4      	b.n	802b2e0 <_tzset_unlocked_r+0x34>
 802b4f6:	2b2b      	cmp	r3, #43	; 0x2b
 802b4f8:	bf08      	it	eq
 802b4fa:	3401      	addeq	r4, #1
 802b4fc:	2701      	movs	r7, #1
 802b4fe:	e772      	b.n	802b3e6 <_tzset_unlocked_r+0x13a>
 802b500:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b504:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802b508:	213c      	movs	r1, #60	; 0x3c
 802b50a:	fb01 3302 	mla	r3, r1, r2, r3
 802b50e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802b512:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802b516:	fb01 3302 	mla	r3, r1, r2, r3
 802b51a:	437b      	muls	r3, r7
 802b51c:	e77a      	b.n	802b414 <_tzset_unlocked_r+0x168>
 802b51e:	f04f 0901 	mov.w	r9, #1
 802b522:	e77d      	b.n	802b420 <_tzset_unlocked_r+0x174>
 802b524:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802b528:	bf06      	itte	eq
 802b52a:	3401      	addeq	r4, #1
 802b52c:	4643      	moveq	r3, r8
 802b52e:	2344      	movne	r3, #68	; 0x44
 802b530:	220a      	movs	r2, #10
 802b532:	a90b      	add	r1, sp, #44	; 0x2c
 802b534:	4620      	mov	r0, r4
 802b536:	9305      	str	r3, [sp, #20]
 802b538:	f001 f956 	bl	802c7e8 <strtoul>
 802b53c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802b540:	9b05      	ldr	r3, [sp, #20]
 802b542:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802b546:	45a0      	cmp	r8, r4
 802b548:	d114      	bne.n	802b574 <_tzset_unlocked_r+0x2c8>
 802b54a:	234d      	movs	r3, #77	; 0x4d
 802b54c:	f1b9 0f00 	cmp.w	r9, #0
 802b550:	d107      	bne.n	802b562 <_tzset_unlocked_r+0x2b6>
 802b552:	722b      	strb	r3, [r5, #8]
 802b554:	2103      	movs	r1, #3
 802b556:	2302      	movs	r3, #2
 802b558:	e9c5 1303 	strd	r1, r3, [r5, #12]
 802b55c:	f8c5 9014 	str.w	r9, [r5, #20]
 802b560:	e791      	b.n	802b486 <_tzset_unlocked_r+0x1da>
 802b562:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802b566:	220b      	movs	r2, #11
 802b568:	2301      	movs	r3, #1
 802b56a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 802b56e:	2300      	movs	r3, #0
 802b570:	63eb      	str	r3, [r5, #60]	; 0x3c
 802b572:	e788      	b.n	802b486 <_tzset_unlocked_r+0x1da>
 802b574:	b280      	uxth	r0, r0
 802b576:	723b      	strb	r3, [r7, #8]
 802b578:	6178      	str	r0, [r7, #20]
 802b57a:	e784      	b.n	802b486 <_tzset_unlocked_r+0x1da>
 802b57c:	08030abc 	.word	0x08030abc
 802b580:	2003c498 	.word	0x2003c498
 802b584:	2003c4a0 	.word	0x2003c4a0
 802b588:	08030abf 	.word	0x08030abf
 802b58c:	2003c49c 	.word	0x2003c49c
 802b590:	20000120 	.word	0x20000120
 802b594:	2003c48b 	.word	0x2003c48b
 802b598:	08030ac3 	.word	0x08030ac3
 802b59c:	08030ae6 	.word	0x08030ae6
 802b5a0:	08030ad2 	.word	0x08030ad2
 802b5a4:	08030ae5 	.word	0x08030ae5
 802b5a8:	2003c480 	.word	0x2003c480

0802b5ac <__swbuf_r>:
 802b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5ae:	460e      	mov	r6, r1
 802b5b0:	4614      	mov	r4, r2
 802b5b2:	4605      	mov	r5, r0
 802b5b4:	b118      	cbz	r0, 802b5be <__swbuf_r+0x12>
 802b5b6:	6983      	ldr	r3, [r0, #24]
 802b5b8:	b90b      	cbnz	r3, 802b5be <__swbuf_r+0x12>
 802b5ba:	f000 fa69 	bl	802ba90 <__sinit>
 802b5be:	4b21      	ldr	r3, [pc, #132]	; (802b644 <__swbuf_r+0x98>)
 802b5c0:	429c      	cmp	r4, r3
 802b5c2:	d12b      	bne.n	802b61c <__swbuf_r+0x70>
 802b5c4:	686c      	ldr	r4, [r5, #4]
 802b5c6:	69a3      	ldr	r3, [r4, #24]
 802b5c8:	60a3      	str	r3, [r4, #8]
 802b5ca:	89a3      	ldrh	r3, [r4, #12]
 802b5cc:	071a      	lsls	r2, r3, #28
 802b5ce:	d52f      	bpl.n	802b630 <__swbuf_r+0x84>
 802b5d0:	6923      	ldr	r3, [r4, #16]
 802b5d2:	b36b      	cbz	r3, 802b630 <__swbuf_r+0x84>
 802b5d4:	6923      	ldr	r3, [r4, #16]
 802b5d6:	6820      	ldr	r0, [r4, #0]
 802b5d8:	1ac0      	subs	r0, r0, r3
 802b5da:	6963      	ldr	r3, [r4, #20]
 802b5dc:	b2f6      	uxtb	r6, r6
 802b5de:	4283      	cmp	r3, r0
 802b5e0:	4637      	mov	r7, r6
 802b5e2:	dc04      	bgt.n	802b5ee <__swbuf_r+0x42>
 802b5e4:	4621      	mov	r1, r4
 802b5e6:	4628      	mov	r0, r5
 802b5e8:	f000 f9be 	bl	802b968 <_fflush_r>
 802b5ec:	bb30      	cbnz	r0, 802b63c <__swbuf_r+0x90>
 802b5ee:	68a3      	ldr	r3, [r4, #8]
 802b5f0:	3b01      	subs	r3, #1
 802b5f2:	60a3      	str	r3, [r4, #8]
 802b5f4:	6823      	ldr	r3, [r4, #0]
 802b5f6:	1c5a      	adds	r2, r3, #1
 802b5f8:	6022      	str	r2, [r4, #0]
 802b5fa:	701e      	strb	r6, [r3, #0]
 802b5fc:	6963      	ldr	r3, [r4, #20]
 802b5fe:	3001      	adds	r0, #1
 802b600:	4283      	cmp	r3, r0
 802b602:	d004      	beq.n	802b60e <__swbuf_r+0x62>
 802b604:	89a3      	ldrh	r3, [r4, #12]
 802b606:	07db      	lsls	r3, r3, #31
 802b608:	d506      	bpl.n	802b618 <__swbuf_r+0x6c>
 802b60a:	2e0a      	cmp	r6, #10
 802b60c:	d104      	bne.n	802b618 <__swbuf_r+0x6c>
 802b60e:	4621      	mov	r1, r4
 802b610:	4628      	mov	r0, r5
 802b612:	f000 f9a9 	bl	802b968 <_fflush_r>
 802b616:	b988      	cbnz	r0, 802b63c <__swbuf_r+0x90>
 802b618:	4638      	mov	r0, r7
 802b61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b61c:	4b0a      	ldr	r3, [pc, #40]	; (802b648 <__swbuf_r+0x9c>)
 802b61e:	429c      	cmp	r4, r3
 802b620:	d101      	bne.n	802b626 <__swbuf_r+0x7a>
 802b622:	68ac      	ldr	r4, [r5, #8]
 802b624:	e7cf      	b.n	802b5c6 <__swbuf_r+0x1a>
 802b626:	4b09      	ldr	r3, [pc, #36]	; (802b64c <__swbuf_r+0xa0>)
 802b628:	429c      	cmp	r4, r3
 802b62a:	bf08      	it	eq
 802b62c:	68ec      	ldreq	r4, [r5, #12]
 802b62e:	e7ca      	b.n	802b5c6 <__swbuf_r+0x1a>
 802b630:	4621      	mov	r1, r4
 802b632:	4628      	mov	r0, r5
 802b634:	f000 f81e 	bl	802b674 <__swsetup_r>
 802b638:	2800      	cmp	r0, #0
 802b63a:	d0cb      	beq.n	802b5d4 <__swbuf_r+0x28>
 802b63c:	f04f 37ff 	mov.w	r7, #4294967295
 802b640:	e7ea      	b.n	802b618 <__swbuf_r+0x6c>
 802b642:	bf00      	nop
 802b644:	08030c1c 	.word	0x08030c1c
 802b648:	08030c3c 	.word	0x08030c3c
 802b64c:	08030bfc 	.word	0x08030bfc

0802b650 <_write_r>:
 802b650:	b538      	push	{r3, r4, r5, lr}
 802b652:	4d07      	ldr	r5, [pc, #28]	; (802b670 <_write_r+0x20>)
 802b654:	4604      	mov	r4, r0
 802b656:	4608      	mov	r0, r1
 802b658:	4611      	mov	r1, r2
 802b65a:	2200      	movs	r2, #0
 802b65c:	602a      	str	r2, [r5, #0]
 802b65e:	461a      	mov	r2, r3
 802b660:	f7d6 fe31 	bl	80022c6 <_write>
 802b664:	1c43      	adds	r3, r0, #1
 802b666:	d102      	bne.n	802b66e <_write_r+0x1e>
 802b668:	682b      	ldr	r3, [r5, #0]
 802b66a:	b103      	cbz	r3, 802b66e <_write_r+0x1e>
 802b66c:	6023      	str	r3, [r4, #0]
 802b66e:	bd38      	pop	{r3, r4, r5, pc}
 802b670:	2003c53c 	.word	0x2003c53c

0802b674 <__swsetup_r>:
 802b674:	4b32      	ldr	r3, [pc, #200]	; (802b740 <__swsetup_r+0xcc>)
 802b676:	b570      	push	{r4, r5, r6, lr}
 802b678:	681d      	ldr	r5, [r3, #0]
 802b67a:	4606      	mov	r6, r0
 802b67c:	460c      	mov	r4, r1
 802b67e:	b125      	cbz	r5, 802b68a <__swsetup_r+0x16>
 802b680:	69ab      	ldr	r3, [r5, #24]
 802b682:	b913      	cbnz	r3, 802b68a <__swsetup_r+0x16>
 802b684:	4628      	mov	r0, r5
 802b686:	f000 fa03 	bl	802ba90 <__sinit>
 802b68a:	4b2e      	ldr	r3, [pc, #184]	; (802b744 <__swsetup_r+0xd0>)
 802b68c:	429c      	cmp	r4, r3
 802b68e:	d10f      	bne.n	802b6b0 <__swsetup_r+0x3c>
 802b690:	686c      	ldr	r4, [r5, #4]
 802b692:	89a3      	ldrh	r3, [r4, #12]
 802b694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b698:	0719      	lsls	r1, r3, #28
 802b69a:	d42c      	bmi.n	802b6f6 <__swsetup_r+0x82>
 802b69c:	06dd      	lsls	r5, r3, #27
 802b69e:	d411      	bmi.n	802b6c4 <__swsetup_r+0x50>
 802b6a0:	2309      	movs	r3, #9
 802b6a2:	6033      	str	r3, [r6, #0]
 802b6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b6a8:	81a3      	strh	r3, [r4, #12]
 802b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 802b6ae:	e03e      	b.n	802b72e <__swsetup_r+0xba>
 802b6b0:	4b25      	ldr	r3, [pc, #148]	; (802b748 <__swsetup_r+0xd4>)
 802b6b2:	429c      	cmp	r4, r3
 802b6b4:	d101      	bne.n	802b6ba <__swsetup_r+0x46>
 802b6b6:	68ac      	ldr	r4, [r5, #8]
 802b6b8:	e7eb      	b.n	802b692 <__swsetup_r+0x1e>
 802b6ba:	4b24      	ldr	r3, [pc, #144]	; (802b74c <__swsetup_r+0xd8>)
 802b6bc:	429c      	cmp	r4, r3
 802b6be:	bf08      	it	eq
 802b6c0:	68ec      	ldreq	r4, [r5, #12]
 802b6c2:	e7e6      	b.n	802b692 <__swsetup_r+0x1e>
 802b6c4:	0758      	lsls	r0, r3, #29
 802b6c6:	d512      	bpl.n	802b6ee <__swsetup_r+0x7a>
 802b6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b6ca:	b141      	cbz	r1, 802b6de <__swsetup_r+0x6a>
 802b6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b6d0:	4299      	cmp	r1, r3
 802b6d2:	d002      	beq.n	802b6da <__swsetup_r+0x66>
 802b6d4:	4630      	mov	r0, r6
 802b6d6:	f7fe fb99 	bl	8029e0c <_free_r>
 802b6da:	2300      	movs	r3, #0
 802b6dc:	6363      	str	r3, [r4, #52]	; 0x34
 802b6de:	89a3      	ldrh	r3, [r4, #12]
 802b6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b6e4:	81a3      	strh	r3, [r4, #12]
 802b6e6:	2300      	movs	r3, #0
 802b6e8:	6063      	str	r3, [r4, #4]
 802b6ea:	6923      	ldr	r3, [r4, #16]
 802b6ec:	6023      	str	r3, [r4, #0]
 802b6ee:	89a3      	ldrh	r3, [r4, #12]
 802b6f0:	f043 0308 	orr.w	r3, r3, #8
 802b6f4:	81a3      	strh	r3, [r4, #12]
 802b6f6:	6923      	ldr	r3, [r4, #16]
 802b6f8:	b94b      	cbnz	r3, 802b70e <__swsetup_r+0x9a>
 802b6fa:	89a3      	ldrh	r3, [r4, #12]
 802b6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b704:	d003      	beq.n	802b70e <__swsetup_r+0x9a>
 802b706:	4621      	mov	r1, r4
 802b708:	4630      	mov	r0, r6
 802b70a:	f000 fbd9 	bl	802bec0 <__smakebuf_r>
 802b70e:	89a0      	ldrh	r0, [r4, #12]
 802b710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b714:	f010 0301 	ands.w	r3, r0, #1
 802b718:	d00a      	beq.n	802b730 <__swsetup_r+0xbc>
 802b71a:	2300      	movs	r3, #0
 802b71c:	60a3      	str	r3, [r4, #8]
 802b71e:	6963      	ldr	r3, [r4, #20]
 802b720:	425b      	negs	r3, r3
 802b722:	61a3      	str	r3, [r4, #24]
 802b724:	6923      	ldr	r3, [r4, #16]
 802b726:	b943      	cbnz	r3, 802b73a <__swsetup_r+0xc6>
 802b728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b72c:	d1ba      	bne.n	802b6a4 <__swsetup_r+0x30>
 802b72e:	bd70      	pop	{r4, r5, r6, pc}
 802b730:	0781      	lsls	r1, r0, #30
 802b732:	bf58      	it	pl
 802b734:	6963      	ldrpl	r3, [r4, #20]
 802b736:	60a3      	str	r3, [r4, #8]
 802b738:	e7f4      	b.n	802b724 <__swsetup_r+0xb0>
 802b73a:	2000      	movs	r0, #0
 802b73c:	e7f7      	b.n	802b72e <__swsetup_r+0xba>
 802b73e:	bf00      	nop
 802b740:	200000bc 	.word	0x200000bc
 802b744:	08030c1c 	.word	0x08030c1c
 802b748:	08030c3c 	.word	0x08030c3c
 802b74c:	08030bfc 	.word	0x08030bfc

0802b750 <__register_exitproc>:
 802b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b754:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802b810 <__register_exitproc+0xc0>
 802b758:	4606      	mov	r6, r0
 802b75a:	f8d8 0000 	ldr.w	r0, [r8]
 802b75e:	461f      	mov	r7, r3
 802b760:	460d      	mov	r5, r1
 802b762:	4691      	mov	r9, r2
 802b764:	f000 fb70 	bl	802be48 <__retarget_lock_acquire_recursive>
 802b768:	4b25      	ldr	r3, [pc, #148]	; (802b800 <__register_exitproc+0xb0>)
 802b76a:	681c      	ldr	r4, [r3, #0]
 802b76c:	b934      	cbnz	r4, 802b77c <__register_exitproc+0x2c>
 802b76e:	4c25      	ldr	r4, [pc, #148]	; (802b804 <__register_exitproc+0xb4>)
 802b770:	601c      	str	r4, [r3, #0]
 802b772:	4b25      	ldr	r3, [pc, #148]	; (802b808 <__register_exitproc+0xb8>)
 802b774:	b113      	cbz	r3, 802b77c <__register_exitproc+0x2c>
 802b776:	681b      	ldr	r3, [r3, #0]
 802b778:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b77c:	6863      	ldr	r3, [r4, #4]
 802b77e:	2b1f      	cmp	r3, #31
 802b780:	dd07      	ble.n	802b792 <__register_exitproc+0x42>
 802b782:	f8d8 0000 	ldr.w	r0, [r8]
 802b786:	f000 fb61 	bl	802be4c <__retarget_lock_release_recursive>
 802b78a:	f04f 30ff 	mov.w	r0, #4294967295
 802b78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b792:	b34e      	cbz	r6, 802b7e8 <__register_exitproc+0x98>
 802b794:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b798:	b988      	cbnz	r0, 802b7be <__register_exitproc+0x6e>
 802b79a:	4b1c      	ldr	r3, [pc, #112]	; (802b80c <__register_exitproc+0xbc>)
 802b79c:	b923      	cbnz	r3, 802b7a8 <__register_exitproc+0x58>
 802b79e:	f8d8 0000 	ldr.w	r0, [r8]
 802b7a2:	f000 fb52 	bl	802be4a <__retarget_lock_release>
 802b7a6:	e7f0      	b.n	802b78a <__register_exitproc+0x3a>
 802b7a8:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b7ac:	f7fe f896 	bl	80298dc <malloc>
 802b7b0:	2800      	cmp	r0, #0
 802b7b2:	d0f4      	beq.n	802b79e <__register_exitproc+0x4e>
 802b7b4:	2300      	movs	r3, #0
 802b7b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b7ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b7be:	6863      	ldr	r3, [r4, #4]
 802b7c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b7c4:	2201      	movs	r2, #1
 802b7c6:	409a      	lsls	r2, r3
 802b7c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b7cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b7d0:	4313      	orrs	r3, r2
 802b7d2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b7d6:	2e02      	cmp	r6, #2
 802b7d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b7dc:	bf02      	ittt	eq
 802b7de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b7e2:	4313      	orreq	r3, r2
 802b7e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b7e8:	6863      	ldr	r3, [r4, #4]
 802b7ea:	f8d8 0000 	ldr.w	r0, [r8]
 802b7ee:	1c5a      	adds	r2, r3, #1
 802b7f0:	3302      	adds	r3, #2
 802b7f2:	6062      	str	r2, [r4, #4]
 802b7f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b7f8:	f000 fb28 	bl	802be4c <__retarget_lock_release_recursive>
 802b7fc:	2000      	movs	r0, #0
 802b7fe:	e7c6      	b.n	802b78e <__register_exitproc+0x3e>
 802b800:	2003c530 	.word	0x2003c530
 802b804:	2003c4a4 	.word	0x2003c4a4
 802b808:	0803084c 	.word	0x0803084c
 802b80c:	080298dd 	.word	0x080298dd
 802b810:	20000128 	.word	0x20000128

0802b814 <_close_r>:
 802b814:	b538      	push	{r3, r4, r5, lr}
 802b816:	4d06      	ldr	r5, [pc, #24]	; (802b830 <_close_r+0x1c>)
 802b818:	2300      	movs	r3, #0
 802b81a:	4604      	mov	r4, r0
 802b81c:	4608      	mov	r0, r1
 802b81e:	602b      	str	r3, [r5, #0]
 802b820:	f7d6 fd6d 	bl	80022fe <_close>
 802b824:	1c43      	adds	r3, r0, #1
 802b826:	d102      	bne.n	802b82e <_close_r+0x1a>
 802b828:	682b      	ldr	r3, [r5, #0]
 802b82a:	b103      	cbz	r3, 802b82e <_close_r+0x1a>
 802b82c:	6023      	str	r3, [r4, #0]
 802b82e:	bd38      	pop	{r3, r4, r5, pc}
 802b830:	2003c53c 	.word	0x2003c53c

0802b834 <div>:
 802b834:	2900      	cmp	r1, #0
 802b836:	b510      	push	{r4, lr}
 802b838:	fb91 f4f2 	sdiv	r4, r1, r2
 802b83c:	fb02 1314 	mls	r3, r2, r4, r1
 802b840:	db06      	blt.n	802b850 <div+0x1c>
 802b842:	2b00      	cmp	r3, #0
 802b844:	da01      	bge.n	802b84a <div+0x16>
 802b846:	3401      	adds	r4, #1
 802b848:	1a9b      	subs	r3, r3, r2
 802b84a:	e9c0 4300 	strd	r4, r3, [r0]
 802b84e:	bd10      	pop	{r4, pc}
 802b850:	2b00      	cmp	r3, #0
 802b852:	bfc4      	itt	gt
 802b854:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802b858:	189b      	addgt	r3, r3, r2
 802b85a:	e7f6      	b.n	802b84a <div+0x16>

0802b85c <__sflush_r>:
 802b85c:	898a      	ldrh	r2, [r1, #12]
 802b85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b862:	4605      	mov	r5, r0
 802b864:	0710      	lsls	r0, r2, #28
 802b866:	460c      	mov	r4, r1
 802b868:	d458      	bmi.n	802b91c <__sflush_r+0xc0>
 802b86a:	684b      	ldr	r3, [r1, #4]
 802b86c:	2b00      	cmp	r3, #0
 802b86e:	dc05      	bgt.n	802b87c <__sflush_r+0x20>
 802b870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b872:	2b00      	cmp	r3, #0
 802b874:	dc02      	bgt.n	802b87c <__sflush_r+0x20>
 802b876:	2000      	movs	r0, #0
 802b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b87c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b87e:	2e00      	cmp	r6, #0
 802b880:	d0f9      	beq.n	802b876 <__sflush_r+0x1a>
 802b882:	2300      	movs	r3, #0
 802b884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b888:	682f      	ldr	r7, [r5, #0]
 802b88a:	602b      	str	r3, [r5, #0]
 802b88c:	d032      	beq.n	802b8f4 <__sflush_r+0x98>
 802b88e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b890:	89a3      	ldrh	r3, [r4, #12]
 802b892:	075a      	lsls	r2, r3, #29
 802b894:	d505      	bpl.n	802b8a2 <__sflush_r+0x46>
 802b896:	6863      	ldr	r3, [r4, #4]
 802b898:	1ac0      	subs	r0, r0, r3
 802b89a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b89c:	b10b      	cbz	r3, 802b8a2 <__sflush_r+0x46>
 802b89e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b8a0:	1ac0      	subs	r0, r0, r3
 802b8a2:	2300      	movs	r3, #0
 802b8a4:	4602      	mov	r2, r0
 802b8a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b8a8:	6a21      	ldr	r1, [r4, #32]
 802b8aa:	4628      	mov	r0, r5
 802b8ac:	47b0      	blx	r6
 802b8ae:	1c43      	adds	r3, r0, #1
 802b8b0:	89a3      	ldrh	r3, [r4, #12]
 802b8b2:	d106      	bne.n	802b8c2 <__sflush_r+0x66>
 802b8b4:	6829      	ldr	r1, [r5, #0]
 802b8b6:	291d      	cmp	r1, #29
 802b8b8:	d82c      	bhi.n	802b914 <__sflush_r+0xb8>
 802b8ba:	4a2a      	ldr	r2, [pc, #168]	; (802b964 <__sflush_r+0x108>)
 802b8bc:	40ca      	lsrs	r2, r1
 802b8be:	07d6      	lsls	r6, r2, #31
 802b8c0:	d528      	bpl.n	802b914 <__sflush_r+0xb8>
 802b8c2:	2200      	movs	r2, #0
 802b8c4:	6062      	str	r2, [r4, #4]
 802b8c6:	04d9      	lsls	r1, r3, #19
 802b8c8:	6922      	ldr	r2, [r4, #16]
 802b8ca:	6022      	str	r2, [r4, #0]
 802b8cc:	d504      	bpl.n	802b8d8 <__sflush_r+0x7c>
 802b8ce:	1c42      	adds	r2, r0, #1
 802b8d0:	d101      	bne.n	802b8d6 <__sflush_r+0x7a>
 802b8d2:	682b      	ldr	r3, [r5, #0]
 802b8d4:	b903      	cbnz	r3, 802b8d8 <__sflush_r+0x7c>
 802b8d6:	6560      	str	r0, [r4, #84]	; 0x54
 802b8d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b8da:	602f      	str	r7, [r5, #0]
 802b8dc:	2900      	cmp	r1, #0
 802b8de:	d0ca      	beq.n	802b876 <__sflush_r+0x1a>
 802b8e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b8e4:	4299      	cmp	r1, r3
 802b8e6:	d002      	beq.n	802b8ee <__sflush_r+0x92>
 802b8e8:	4628      	mov	r0, r5
 802b8ea:	f7fe fa8f 	bl	8029e0c <_free_r>
 802b8ee:	2000      	movs	r0, #0
 802b8f0:	6360      	str	r0, [r4, #52]	; 0x34
 802b8f2:	e7c1      	b.n	802b878 <__sflush_r+0x1c>
 802b8f4:	6a21      	ldr	r1, [r4, #32]
 802b8f6:	2301      	movs	r3, #1
 802b8f8:	4628      	mov	r0, r5
 802b8fa:	47b0      	blx	r6
 802b8fc:	1c41      	adds	r1, r0, #1
 802b8fe:	d1c7      	bne.n	802b890 <__sflush_r+0x34>
 802b900:	682b      	ldr	r3, [r5, #0]
 802b902:	2b00      	cmp	r3, #0
 802b904:	d0c4      	beq.n	802b890 <__sflush_r+0x34>
 802b906:	2b1d      	cmp	r3, #29
 802b908:	d001      	beq.n	802b90e <__sflush_r+0xb2>
 802b90a:	2b16      	cmp	r3, #22
 802b90c:	d101      	bne.n	802b912 <__sflush_r+0xb6>
 802b90e:	602f      	str	r7, [r5, #0]
 802b910:	e7b1      	b.n	802b876 <__sflush_r+0x1a>
 802b912:	89a3      	ldrh	r3, [r4, #12]
 802b914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b918:	81a3      	strh	r3, [r4, #12]
 802b91a:	e7ad      	b.n	802b878 <__sflush_r+0x1c>
 802b91c:	690f      	ldr	r7, [r1, #16]
 802b91e:	2f00      	cmp	r7, #0
 802b920:	d0a9      	beq.n	802b876 <__sflush_r+0x1a>
 802b922:	0793      	lsls	r3, r2, #30
 802b924:	680e      	ldr	r6, [r1, #0]
 802b926:	bf08      	it	eq
 802b928:	694b      	ldreq	r3, [r1, #20]
 802b92a:	600f      	str	r7, [r1, #0]
 802b92c:	bf18      	it	ne
 802b92e:	2300      	movne	r3, #0
 802b930:	eba6 0807 	sub.w	r8, r6, r7
 802b934:	608b      	str	r3, [r1, #8]
 802b936:	f1b8 0f00 	cmp.w	r8, #0
 802b93a:	dd9c      	ble.n	802b876 <__sflush_r+0x1a>
 802b93c:	6a21      	ldr	r1, [r4, #32]
 802b93e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b940:	4643      	mov	r3, r8
 802b942:	463a      	mov	r2, r7
 802b944:	4628      	mov	r0, r5
 802b946:	47b0      	blx	r6
 802b948:	2800      	cmp	r0, #0
 802b94a:	dc06      	bgt.n	802b95a <__sflush_r+0xfe>
 802b94c:	89a3      	ldrh	r3, [r4, #12]
 802b94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b952:	81a3      	strh	r3, [r4, #12]
 802b954:	f04f 30ff 	mov.w	r0, #4294967295
 802b958:	e78e      	b.n	802b878 <__sflush_r+0x1c>
 802b95a:	4407      	add	r7, r0
 802b95c:	eba8 0800 	sub.w	r8, r8, r0
 802b960:	e7e9      	b.n	802b936 <__sflush_r+0xda>
 802b962:	bf00      	nop
 802b964:	20400001 	.word	0x20400001

0802b968 <_fflush_r>:
 802b968:	b538      	push	{r3, r4, r5, lr}
 802b96a:	690b      	ldr	r3, [r1, #16]
 802b96c:	4605      	mov	r5, r0
 802b96e:	460c      	mov	r4, r1
 802b970:	b913      	cbnz	r3, 802b978 <_fflush_r+0x10>
 802b972:	2500      	movs	r5, #0
 802b974:	4628      	mov	r0, r5
 802b976:	bd38      	pop	{r3, r4, r5, pc}
 802b978:	b118      	cbz	r0, 802b982 <_fflush_r+0x1a>
 802b97a:	6983      	ldr	r3, [r0, #24]
 802b97c:	b90b      	cbnz	r3, 802b982 <_fflush_r+0x1a>
 802b97e:	f000 f887 	bl	802ba90 <__sinit>
 802b982:	4b14      	ldr	r3, [pc, #80]	; (802b9d4 <_fflush_r+0x6c>)
 802b984:	429c      	cmp	r4, r3
 802b986:	d11b      	bne.n	802b9c0 <_fflush_r+0x58>
 802b988:	686c      	ldr	r4, [r5, #4]
 802b98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b98e:	2b00      	cmp	r3, #0
 802b990:	d0ef      	beq.n	802b972 <_fflush_r+0xa>
 802b992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b994:	07d0      	lsls	r0, r2, #31
 802b996:	d404      	bmi.n	802b9a2 <_fflush_r+0x3a>
 802b998:	0599      	lsls	r1, r3, #22
 802b99a:	d402      	bmi.n	802b9a2 <_fflush_r+0x3a>
 802b99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b99e:	f000 fa53 	bl	802be48 <__retarget_lock_acquire_recursive>
 802b9a2:	4628      	mov	r0, r5
 802b9a4:	4621      	mov	r1, r4
 802b9a6:	f7ff ff59 	bl	802b85c <__sflush_r>
 802b9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b9ac:	07da      	lsls	r2, r3, #31
 802b9ae:	4605      	mov	r5, r0
 802b9b0:	d4e0      	bmi.n	802b974 <_fflush_r+0xc>
 802b9b2:	89a3      	ldrh	r3, [r4, #12]
 802b9b4:	059b      	lsls	r3, r3, #22
 802b9b6:	d4dd      	bmi.n	802b974 <_fflush_r+0xc>
 802b9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b9ba:	f000 fa47 	bl	802be4c <__retarget_lock_release_recursive>
 802b9be:	e7d9      	b.n	802b974 <_fflush_r+0xc>
 802b9c0:	4b05      	ldr	r3, [pc, #20]	; (802b9d8 <_fflush_r+0x70>)
 802b9c2:	429c      	cmp	r4, r3
 802b9c4:	d101      	bne.n	802b9ca <_fflush_r+0x62>
 802b9c6:	68ac      	ldr	r4, [r5, #8]
 802b9c8:	e7df      	b.n	802b98a <_fflush_r+0x22>
 802b9ca:	4b04      	ldr	r3, [pc, #16]	; (802b9dc <_fflush_r+0x74>)
 802b9cc:	429c      	cmp	r4, r3
 802b9ce:	bf08      	it	eq
 802b9d0:	68ec      	ldreq	r4, [r5, #12]
 802b9d2:	e7da      	b.n	802b98a <_fflush_r+0x22>
 802b9d4:	08030c1c 	.word	0x08030c1c
 802b9d8:	08030c3c 	.word	0x08030c3c
 802b9dc:	08030bfc 	.word	0x08030bfc

0802b9e0 <std>:
 802b9e0:	2300      	movs	r3, #0
 802b9e2:	b510      	push	{r4, lr}
 802b9e4:	4604      	mov	r4, r0
 802b9e6:	e9c0 3300 	strd	r3, r3, [r0]
 802b9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b9ee:	6083      	str	r3, [r0, #8]
 802b9f0:	8181      	strh	r1, [r0, #12]
 802b9f2:	6643      	str	r3, [r0, #100]	; 0x64
 802b9f4:	81c2      	strh	r2, [r0, #14]
 802b9f6:	6183      	str	r3, [r0, #24]
 802b9f8:	4619      	mov	r1, r3
 802b9fa:	2208      	movs	r2, #8
 802b9fc:	305c      	adds	r0, #92	; 0x5c
 802b9fe:	f7fd ff8b 	bl	8029918 <memset>
 802ba02:	4b05      	ldr	r3, [pc, #20]	; (802ba18 <std+0x38>)
 802ba04:	6263      	str	r3, [r4, #36]	; 0x24
 802ba06:	4b05      	ldr	r3, [pc, #20]	; (802ba1c <std+0x3c>)
 802ba08:	62a3      	str	r3, [r4, #40]	; 0x28
 802ba0a:	4b05      	ldr	r3, [pc, #20]	; (802ba20 <std+0x40>)
 802ba0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802ba0e:	4b05      	ldr	r3, [pc, #20]	; (802ba24 <std+0x44>)
 802ba10:	6224      	str	r4, [r4, #32]
 802ba12:	6323      	str	r3, [r4, #48]	; 0x30
 802ba14:	bd10      	pop	{r4, pc}
 802ba16:	bf00      	nop
 802ba18:	0802a6a9 	.word	0x0802a6a9
 802ba1c:	0802a6cf 	.word	0x0802a6cf
 802ba20:	0802a707 	.word	0x0802a707
 802ba24:	0802a72b 	.word	0x0802a72b

0802ba28 <_cleanup_r>:
 802ba28:	4901      	ldr	r1, [pc, #4]	; (802ba30 <_cleanup_r+0x8>)
 802ba2a:	f000 b8af 	b.w	802bb8c <_fwalk_reent>
 802ba2e:	bf00      	nop
 802ba30:	0802b969 	.word	0x0802b969

0802ba34 <__sfmoreglue>:
 802ba34:	b570      	push	{r4, r5, r6, lr}
 802ba36:	2268      	movs	r2, #104	; 0x68
 802ba38:	1e4d      	subs	r5, r1, #1
 802ba3a:	4355      	muls	r5, r2
 802ba3c:	460e      	mov	r6, r1
 802ba3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802ba42:	f7fe fa4f 	bl	8029ee4 <_malloc_r>
 802ba46:	4604      	mov	r4, r0
 802ba48:	b140      	cbz	r0, 802ba5c <__sfmoreglue+0x28>
 802ba4a:	2100      	movs	r1, #0
 802ba4c:	e9c0 1600 	strd	r1, r6, [r0]
 802ba50:	300c      	adds	r0, #12
 802ba52:	60a0      	str	r0, [r4, #8]
 802ba54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802ba58:	f7fd ff5e 	bl	8029918 <memset>
 802ba5c:	4620      	mov	r0, r4
 802ba5e:	bd70      	pop	{r4, r5, r6, pc}

0802ba60 <__sfp_lock_acquire>:
 802ba60:	4801      	ldr	r0, [pc, #4]	; (802ba68 <__sfp_lock_acquire+0x8>)
 802ba62:	f000 b9f1 	b.w	802be48 <__retarget_lock_acquire_recursive>
 802ba66:	bf00      	nop
 802ba68:	2003c537 	.word	0x2003c537

0802ba6c <__sfp_lock_release>:
 802ba6c:	4801      	ldr	r0, [pc, #4]	; (802ba74 <__sfp_lock_release+0x8>)
 802ba6e:	f000 b9ed 	b.w	802be4c <__retarget_lock_release_recursive>
 802ba72:	bf00      	nop
 802ba74:	2003c537 	.word	0x2003c537

0802ba78 <__sinit_lock_acquire>:
 802ba78:	4801      	ldr	r0, [pc, #4]	; (802ba80 <__sinit_lock_acquire+0x8>)
 802ba7a:	f000 b9e5 	b.w	802be48 <__retarget_lock_acquire_recursive>
 802ba7e:	bf00      	nop
 802ba80:	2003c538 	.word	0x2003c538

0802ba84 <__sinit_lock_release>:
 802ba84:	4801      	ldr	r0, [pc, #4]	; (802ba8c <__sinit_lock_release+0x8>)
 802ba86:	f000 b9e1 	b.w	802be4c <__retarget_lock_release_recursive>
 802ba8a:	bf00      	nop
 802ba8c:	2003c538 	.word	0x2003c538

0802ba90 <__sinit>:
 802ba90:	b510      	push	{r4, lr}
 802ba92:	4604      	mov	r4, r0
 802ba94:	f7ff fff0 	bl	802ba78 <__sinit_lock_acquire>
 802ba98:	69a3      	ldr	r3, [r4, #24]
 802ba9a:	b11b      	cbz	r3, 802baa4 <__sinit+0x14>
 802ba9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802baa0:	f7ff bff0 	b.w	802ba84 <__sinit_lock_release>
 802baa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802baa8:	6523      	str	r3, [r4, #80]	; 0x50
 802baaa:	4b13      	ldr	r3, [pc, #76]	; (802baf8 <__sinit+0x68>)
 802baac:	4a13      	ldr	r2, [pc, #76]	; (802bafc <__sinit+0x6c>)
 802baae:	681b      	ldr	r3, [r3, #0]
 802bab0:	62a2      	str	r2, [r4, #40]	; 0x28
 802bab2:	42a3      	cmp	r3, r4
 802bab4:	bf04      	itt	eq
 802bab6:	2301      	moveq	r3, #1
 802bab8:	61a3      	streq	r3, [r4, #24]
 802baba:	4620      	mov	r0, r4
 802babc:	f000 f820 	bl	802bb00 <__sfp>
 802bac0:	6060      	str	r0, [r4, #4]
 802bac2:	4620      	mov	r0, r4
 802bac4:	f000 f81c 	bl	802bb00 <__sfp>
 802bac8:	60a0      	str	r0, [r4, #8]
 802baca:	4620      	mov	r0, r4
 802bacc:	f000 f818 	bl	802bb00 <__sfp>
 802bad0:	2200      	movs	r2, #0
 802bad2:	60e0      	str	r0, [r4, #12]
 802bad4:	2104      	movs	r1, #4
 802bad6:	6860      	ldr	r0, [r4, #4]
 802bad8:	f7ff ff82 	bl	802b9e0 <std>
 802badc:	68a0      	ldr	r0, [r4, #8]
 802bade:	2201      	movs	r2, #1
 802bae0:	2109      	movs	r1, #9
 802bae2:	f7ff ff7d 	bl	802b9e0 <std>
 802bae6:	68e0      	ldr	r0, [r4, #12]
 802bae8:	2202      	movs	r2, #2
 802baea:	2112      	movs	r1, #18
 802baec:	f7ff ff78 	bl	802b9e0 <std>
 802baf0:	2301      	movs	r3, #1
 802baf2:	61a3      	str	r3, [r4, #24]
 802baf4:	e7d2      	b.n	802ba9c <__sinit+0xc>
 802baf6:	bf00      	nop
 802baf8:	080307b4 	.word	0x080307b4
 802bafc:	0802ba29 	.word	0x0802ba29

0802bb00 <__sfp>:
 802bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb02:	4607      	mov	r7, r0
 802bb04:	f7ff ffac 	bl	802ba60 <__sfp_lock_acquire>
 802bb08:	4b1e      	ldr	r3, [pc, #120]	; (802bb84 <__sfp+0x84>)
 802bb0a:	681e      	ldr	r6, [r3, #0]
 802bb0c:	69b3      	ldr	r3, [r6, #24]
 802bb0e:	b913      	cbnz	r3, 802bb16 <__sfp+0x16>
 802bb10:	4630      	mov	r0, r6
 802bb12:	f7ff ffbd 	bl	802ba90 <__sinit>
 802bb16:	3648      	adds	r6, #72	; 0x48
 802bb18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802bb1c:	3b01      	subs	r3, #1
 802bb1e:	d503      	bpl.n	802bb28 <__sfp+0x28>
 802bb20:	6833      	ldr	r3, [r6, #0]
 802bb22:	b30b      	cbz	r3, 802bb68 <__sfp+0x68>
 802bb24:	6836      	ldr	r6, [r6, #0]
 802bb26:	e7f7      	b.n	802bb18 <__sfp+0x18>
 802bb28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802bb2c:	b9d5      	cbnz	r5, 802bb64 <__sfp+0x64>
 802bb2e:	4b16      	ldr	r3, [pc, #88]	; (802bb88 <__sfp+0x88>)
 802bb30:	60e3      	str	r3, [r4, #12]
 802bb32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802bb36:	6665      	str	r5, [r4, #100]	; 0x64
 802bb38:	f000 f984 	bl	802be44 <__retarget_lock_init_recursive>
 802bb3c:	f7ff ff96 	bl	802ba6c <__sfp_lock_release>
 802bb40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802bb44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802bb48:	6025      	str	r5, [r4, #0]
 802bb4a:	61a5      	str	r5, [r4, #24]
 802bb4c:	2208      	movs	r2, #8
 802bb4e:	4629      	mov	r1, r5
 802bb50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bb54:	f7fd fee0 	bl	8029918 <memset>
 802bb58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bb5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bb60:	4620      	mov	r0, r4
 802bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bb64:	3468      	adds	r4, #104	; 0x68
 802bb66:	e7d9      	b.n	802bb1c <__sfp+0x1c>
 802bb68:	2104      	movs	r1, #4
 802bb6a:	4638      	mov	r0, r7
 802bb6c:	f7ff ff62 	bl	802ba34 <__sfmoreglue>
 802bb70:	4604      	mov	r4, r0
 802bb72:	6030      	str	r0, [r6, #0]
 802bb74:	2800      	cmp	r0, #0
 802bb76:	d1d5      	bne.n	802bb24 <__sfp+0x24>
 802bb78:	f7ff ff78 	bl	802ba6c <__sfp_lock_release>
 802bb7c:	230c      	movs	r3, #12
 802bb7e:	603b      	str	r3, [r7, #0]
 802bb80:	e7ee      	b.n	802bb60 <__sfp+0x60>
 802bb82:	bf00      	nop
 802bb84:	080307b4 	.word	0x080307b4
 802bb88:	ffff0001 	.word	0xffff0001

0802bb8c <_fwalk_reent>:
 802bb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bb90:	4606      	mov	r6, r0
 802bb92:	4688      	mov	r8, r1
 802bb94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bb98:	2700      	movs	r7, #0
 802bb9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bb9e:	f1b9 0901 	subs.w	r9, r9, #1
 802bba2:	d505      	bpl.n	802bbb0 <_fwalk_reent+0x24>
 802bba4:	6824      	ldr	r4, [r4, #0]
 802bba6:	2c00      	cmp	r4, #0
 802bba8:	d1f7      	bne.n	802bb9a <_fwalk_reent+0xe>
 802bbaa:	4638      	mov	r0, r7
 802bbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bbb0:	89ab      	ldrh	r3, [r5, #12]
 802bbb2:	2b01      	cmp	r3, #1
 802bbb4:	d907      	bls.n	802bbc6 <_fwalk_reent+0x3a>
 802bbb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bbba:	3301      	adds	r3, #1
 802bbbc:	d003      	beq.n	802bbc6 <_fwalk_reent+0x3a>
 802bbbe:	4629      	mov	r1, r5
 802bbc0:	4630      	mov	r0, r6
 802bbc2:	47c0      	blx	r8
 802bbc4:	4307      	orrs	r7, r0
 802bbc6:	3568      	adds	r5, #104	; 0x68
 802bbc8:	e7e9      	b.n	802bb9e <_fwalk_reent+0x12>
	...

0802bbcc <_findenv_r>:
 802bbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bbd0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 802bc40 <_findenv_r+0x74>
 802bbd4:	4607      	mov	r7, r0
 802bbd6:	4689      	mov	r9, r1
 802bbd8:	4616      	mov	r6, r2
 802bbda:	f000 fe61 	bl	802c8a0 <__env_lock>
 802bbde:	f8da 4000 	ldr.w	r4, [sl]
 802bbe2:	b134      	cbz	r4, 802bbf2 <_findenv_r+0x26>
 802bbe4:	464b      	mov	r3, r9
 802bbe6:	4698      	mov	r8, r3
 802bbe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbec:	b13a      	cbz	r2, 802bbfe <_findenv_r+0x32>
 802bbee:	2a3d      	cmp	r2, #61	; 0x3d
 802bbf0:	d1f9      	bne.n	802bbe6 <_findenv_r+0x1a>
 802bbf2:	4638      	mov	r0, r7
 802bbf4:	f000 fe5a 	bl	802c8ac <__env_unlock>
 802bbf8:	2000      	movs	r0, #0
 802bbfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bbfe:	eba8 0809 	sub.w	r8, r8, r9
 802bc02:	46a3      	mov	fp, r4
 802bc04:	f854 0b04 	ldr.w	r0, [r4], #4
 802bc08:	2800      	cmp	r0, #0
 802bc0a:	d0f2      	beq.n	802bbf2 <_findenv_r+0x26>
 802bc0c:	4642      	mov	r2, r8
 802bc0e:	4649      	mov	r1, r9
 802bc10:	f7fe fd8f 	bl	802a732 <strncmp>
 802bc14:	2800      	cmp	r0, #0
 802bc16:	d1f4      	bne.n	802bc02 <_findenv_r+0x36>
 802bc18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802bc1c:	eb03 0508 	add.w	r5, r3, r8
 802bc20:	f813 3008 	ldrb.w	r3, [r3, r8]
 802bc24:	2b3d      	cmp	r3, #61	; 0x3d
 802bc26:	d1ec      	bne.n	802bc02 <_findenv_r+0x36>
 802bc28:	f8da 3000 	ldr.w	r3, [sl]
 802bc2c:	ebab 0303 	sub.w	r3, fp, r3
 802bc30:	109b      	asrs	r3, r3, #2
 802bc32:	4638      	mov	r0, r7
 802bc34:	6033      	str	r3, [r6, #0]
 802bc36:	f000 fe39 	bl	802c8ac <__env_unlock>
 802bc3a:	1c68      	adds	r0, r5, #1
 802bc3c:	e7dd      	b.n	802bbfa <_findenv_r+0x2e>
 802bc3e:	bf00      	nop
 802bc40:	20000010 	.word	0x20000010

0802bc44 <_getenv_r>:
 802bc44:	b507      	push	{r0, r1, r2, lr}
 802bc46:	aa01      	add	r2, sp, #4
 802bc48:	f7ff ffc0 	bl	802bbcc <_findenv_r>
 802bc4c:	b003      	add	sp, #12
 802bc4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802bc54 <__gettzinfo>:
 802bc54:	4800      	ldr	r0, [pc, #0]	; (802bc58 <__gettzinfo+0x4>)
 802bc56:	4770      	bx	lr
 802bc58:	20000130 	.word	0x20000130

0802bc5c <localtime_r>:
 802bc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802bc60:	4680      	mov	r8, r0
 802bc62:	9101      	str	r1, [sp, #4]
 802bc64:	f7ff fff6 	bl	802bc54 <__gettzinfo>
 802bc68:	9901      	ldr	r1, [sp, #4]
 802bc6a:	4605      	mov	r5, r0
 802bc6c:	4640      	mov	r0, r8
 802bc6e:	f000 fe35 	bl	802c8dc <gmtime_r>
 802bc72:	6943      	ldr	r3, [r0, #20]
 802bc74:	0799      	lsls	r1, r3, #30
 802bc76:	4604      	mov	r4, r0
 802bc78:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 802bc7c:	d105      	bne.n	802bc8a <localtime_r+0x2e>
 802bc7e:	2264      	movs	r2, #100	; 0x64
 802bc80:	fb97 f3f2 	sdiv	r3, r7, r2
 802bc84:	fb02 7313 	mls	r3, r2, r3, r7
 802bc88:	bb73      	cbnz	r3, 802bce8 <localtime_r+0x8c>
 802bc8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802bc8e:	fb97 f6f3 	sdiv	r6, r7, r3
 802bc92:	fb03 7616 	mls	r6, r3, r6, r7
 802bc96:	fab6 f386 	clz	r3, r6
 802bc9a:	095b      	lsrs	r3, r3, #5
 802bc9c:	4e67      	ldr	r6, [pc, #412]	; (802be3c <localtime_r+0x1e0>)
 802bc9e:	2230      	movs	r2, #48	; 0x30
 802bca0:	fb02 6603 	mla	r6, r2, r3, r6
 802bca4:	f7ff faf0 	bl	802b288 <__tz_lock>
 802bca8:	f7ff fafa 	bl	802b2a0 <_tzset_unlocked>
 802bcac:	4b64      	ldr	r3, [pc, #400]	; (802be40 <localtime_r+0x1e4>)
 802bcae:	681b      	ldr	r3, [r3, #0]
 802bcb0:	b34b      	cbz	r3, 802bd06 <localtime_r+0xaa>
 802bcb2:	686b      	ldr	r3, [r5, #4]
 802bcb4:	42bb      	cmp	r3, r7
 802bcb6:	d119      	bne.n	802bcec <localtime_r+0x90>
 802bcb8:	682f      	ldr	r7, [r5, #0]
 802bcba:	e9d8 2300 	ldrd	r2, r3, [r8]
 802bcbe:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802bcc2:	b9df      	cbnz	r7, 802bcfc <localtime_r+0xa0>
 802bcc4:	4282      	cmp	r2, r0
 802bcc6:	eb73 0101 	sbcs.w	r1, r3, r1
 802bcca:	da23      	bge.n	802bd14 <localtime_r+0xb8>
 802bccc:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802bcd0:	4282      	cmp	r2, r0
 802bcd2:	eb73 0701 	sbcs.w	r7, r3, r1
 802bcd6:	bfb4      	ite	lt
 802bcd8:	2701      	movlt	r7, #1
 802bcda:	2700      	movge	r7, #0
 802bcdc:	4282      	cmp	r2, r0
 802bcde:	418b      	sbcs	r3, r1
 802bce0:	6227      	str	r7, [r4, #32]
 802bce2:	db19      	blt.n	802bd18 <localtime_r+0xbc>
 802bce4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802bce6:	e018      	b.n	802bd1a <localtime_r+0xbe>
 802bce8:	2301      	movs	r3, #1
 802bcea:	e7d7      	b.n	802bc9c <localtime_r+0x40>
 802bcec:	4638      	mov	r0, r7
 802bcee:	f7ff fa21 	bl	802b134 <__tzcalc_limits>
 802bcf2:	2800      	cmp	r0, #0
 802bcf4:	d1e0      	bne.n	802bcb8 <localtime_r+0x5c>
 802bcf6:	f04f 33ff 	mov.w	r3, #4294967295
 802bcfa:	e004      	b.n	802bd06 <localtime_r+0xaa>
 802bcfc:	4282      	cmp	r2, r0
 802bcfe:	eb73 0101 	sbcs.w	r1, r3, r1
 802bd02:	da02      	bge.n	802bd0a <localtime_r+0xae>
 802bd04:	2300      	movs	r3, #0
 802bd06:	6223      	str	r3, [r4, #32]
 802bd08:	e7ec      	b.n	802bce4 <localtime_r+0x88>
 802bd0a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802bd0e:	4282      	cmp	r2, r0
 802bd10:	418b      	sbcs	r3, r1
 802bd12:	daf7      	bge.n	802bd04 <localtime_r+0xa8>
 802bd14:	2301      	movs	r3, #1
 802bd16:	6223      	str	r3, [r4, #32]
 802bd18:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802bd1a:	6861      	ldr	r1, [r4, #4]
 802bd1c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 802bd20:	203c      	movs	r0, #60	; 0x3c
 802bd22:	fb93 f5f2 	sdiv	r5, r3, r2
 802bd26:	fb02 3315 	mls	r3, r2, r5, r3
 802bd2a:	fb93 f2f0 	sdiv	r2, r3, r0
 802bd2e:	fb00 3012 	mls	r0, r0, r2, r3
 802bd32:	6823      	ldr	r3, [r4, #0]
 802bd34:	1a89      	subs	r1, r1, r2
 802bd36:	68a2      	ldr	r2, [r4, #8]
 802bd38:	6061      	str	r1, [r4, #4]
 802bd3a:	1a1b      	subs	r3, r3, r0
 802bd3c:	1b52      	subs	r2, r2, r5
 802bd3e:	2b3b      	cmp	r3, #59	; 0x3b
 802bd40:	6023      	str	r3, [r4, #0]
 802bd42:	60a2      	str	r2, [r4, #8]
 802bd44:	dd35      	ble.n	802bdb2 <localtime_r+0x156>
 802bd46:	3101      	adds	r1, #1
 802bd48:	6061      	str	r1, [r4, #4]
 802bd4a:	3b3c      	subs	r3, #60	; 0x3c
 802bd4c:	6023      	str	r3, [r4, #0]
 802bd4e:	6863      	ldr	r3, [r4, #4]
 802bd50:	2b3b      	cmp	r3, #59	; 0x3b
 802bd52:	dd34      	ble.n	802bdbe <localtime_r+0x162>
 802bd54:	3201      	adds	r2, #1
 802bd56:	60a2      	str	r2, [r4, #8]
 802bd58:	3b3c      	subs	r3, #60	; 0x3c
 802bd5a:	6063      	str	r3, [r4, #4]
 802bd5c:	68a3      	ldr	r3, [r4, #8]
 802bd5e:	2b17      	cmp	r3, #23
 802bd60:	dd33      	ble.n	802bdca <localtime_r+0x16e>
 802bd62:	69e2      	ldr	r2, [r4, #28]
 802bd64:	3201      	adds	r2, #1
 802bd66:	61e2      	str	r2, [r4, #28]
 802bd68:	69a2      	ldr	r2, [r4, #24]
 802bd6a:	3201      	adds	r2, #1
 802bd6c:	2a06      	cmp	r2, #6
 802bd6e:	bfc8      	it	gt
 802bd70:	2200      	movgt	r2, #0
 802bd72:	61a2      	str	r2, [r4, #24]
 802bd74:	68e2      	ldr	r2, [r4, #12]
 802bd76:	3b18      	subs	r3, #24
 802bd78:	3201      	adds	r2, #1
 802bd7a:	60a3      	str	r3, [r4, #8]
 802bd7c:	6923      	ldr	r3, [r4, #16]
 802bd7e:	60e2      	str	r2, [r4, #12]
 802bd80:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bd84:	428a      	cmp	r2, r1
 802bd86:	dd0e      	ble.n	802bda6 <localtime_r+0x14a>
 802bd88:	2b0b      	cmp	r3, #11
 802bd8a:	eba2 0201 	sub.w	r2, r2, r1
 802bd8e:	60e2      	str	r2, [r4, #12]
 802bd90:	f103 0201 	add.w	r2, r3, #1
 802bd94:	bf09      	itett	eq
 802bd96:	6963      	ldreq	r3, [r4, #20]
 802bd98:	6122      	strne	r2, [r4, #16]
 802bd9a:	2200      	moveq	r2, #0
 802bd9c:	3301      	addeq	r3, #1
 802bd9e:	bf02      	ittt	eq
 802bda0:	6122      	streq	r2, [r4, #16]
 802bda2:	6163      	streq	r3, [r4, #20]
 802bda4:	61e2      	streq	r2, [r4, #28]
 802bda6:	f7ff fa75 	bl	802b294 <__tz_unlock>
 802bdaa:	4620      	mov	r0, r4
 802bdac:	b002      	add	sp, #8
 802bdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdb2:	2b00      	cmp	r3, #0
 802bdb4:	dacb      	bge.n	802bd4e <localtime_r+0xf2>
 802bdb6:	3901      	subs	r1, #1
 802bdb8:	6061      	str	r1, [r4, #4]
 802bdba:	333c      	adds	r3, #60	; 0x3c
 802bdbc:	e7c6      	b.n	802bd4c <localtime_r+0xf0>
 802bdbe:	2b00      	cmp	r3, #0
 802bdc0:	dacc      	bge.n	802bd5c <localtime_r+0x100>
 802bdc2:	3a01      	subs	r2, #1
 802bdc4:	60a2      	str	r2, [r4, #8]
 802bdc6:	333c      	adds	r3, #60	; 0x3c
 802bdc8:	e7c7      	b.n	802bd5a <localtime_r+0xfe>
 802bdca:	2b00      	cmp	r3, #0
 802bdcc:	daeb      	bge.n	802bda6 <localtime_r+0x14a>
 802bdce:	69e2      	ldr	r2, [r4, #28]
 802bdd0:	3a01      	subs	r2, #1
 802bdd2:	61e2      	str	r2, [r4, #28]
 802bdd4:	69a2      	ldr	r2, [r4, #24]
 802bdd6:	3a01      	subs	r2, #1
 802bdd8:	bf48      	it	mi
 802bdda:	2206      	movmi	r2, #6
 802bddc:	61a2      	str	r2, [r4, #24]
 802bdde:	68e2      	ldr	r2, [r4, #12]
 802bde0:	3318      	adds	r3, #24
 802bde2:	3a01      	subs	r2, #1
 802bde4:	60e2      	str	r2, [r4, #12]
 802bde6:	60a3      	str	r3, [r4, #8]
 802bde8:	2a00      	cmp	r2, #0
 802bdea:	d1dc      	bne.n	802bda6 <localtime_r+0x14a>
 802bdec:	6923      	ldr	r3, [r4, #16]
 802bdee:	3b01      	subs	r3, #1
 802bdf0:	d405      	bmi.n	802bdfe <localtime_r+0x1a2>
 802bdf2:	6123      	str	r3, [r4, #16]
 802bdf4:	6923      	ldr	r3, [r4, #16]
 802bdf6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802bdfa:	60e3      	str	r3, [r4, #12]
 802bdfc:	e7d3      	b.n	802bda6 <localtime_r+0x14a>
 802bdfe:	230b      	movs	r3, #11
 802be00:	6123      	str	r3, [r4, #16]
 802be02:	6963      	ldr	r3, [r4, #20]
 802be04:	1e5a      	subs	r2, r3, #1
 802be06:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802be0a:	6162      	str	r2, [r4, #20]
 802be0c:	079a      	lsls	r2, r3, #30
 802be0e:	d105      	bne.n	802be1c <localtime_r+0x1c0>
 802be10:	2164      	movs	r1, #100	; 0x64
 802be12:	fb93 f2f1 	sdiv	r2, r3, r1
 802be16:	fb01 3212 	mls	r2, r1, r2, r3
 802be1a:	b962      	cbnz	r2, 802be36 <localtime_r+0x1da>
 802be1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802be20:	fb93 f1f2 	sdiv	r1, r3, r2
 802be24:	fb02 3311 	mls	r3, r2, r1, r3
 802be28:	fab3 f383 	clz	r3, r3
 802be2c:	095b      	lsrs	r3, r3, #5
 802be2e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802be32:	61e3      	str	r3, [r4, #28]
 802be34:	e7de      	b.n	802bdf4 <localtime_r+0x198>
 802be36:	2301      	movs	r3, #1
 802be38:	e7f9      	b.n	802be2e <localtime_r+0x1d2>
 802be3a:	bf00      	nop
 802be3c:	08030c68 	.word	0x08030c68
 802be40:	2003c49c 	.word	0x2003c49c

0802be44 <__retarget_lock_init_recursive>:
 802be44:	4770      	bx	lr

0802be46 <__retarget_lock_acquire>:
 802be46:	4770      	bx	lr

0802be48 <__retarget_lock_acquire_recursive>:
 802be48:	4770      	bx	lr

0802be4a <__retarget_lock_release>:
 802be4a:	4770      	bx	lr

0802be4c <__retarget_lock_release_recursive>:
 802be4c:	4770      	bx	lr
	...

0802be50 <_lseek_r>:
 802be50:	b538      	push	{r3, r4, r5, lr}
 802be52:	4d07      	ldr	r5, [pc, #28]	; (802be70 <_lseek_r+0x20>)
 802be54:	4604      	mov	r4, r0
 802be56:	4608      	mov	r0, r1
 802be58:	4611      	mov	r1, r2
 802be5a:	2200      	movs	r2, #0
 802be5c:	602a      	str	r2, [r5, #0]
 802be5e:	461a      	mov	r2, r3
 802be60:	f7d6 fa74 	bl	800234c <_lseek>
 802be64:	1c43      	adds	r3, r0, #1
 802be66:	d102      	bne.n	802be6e <_lseek_r+0x1e>
 802be68:	682b      	ldr	r3, [r5, #0]
 802be6a:	b103      	cbz	r3, 802be6e <_lseek_r+0x1e>
 802be6c:	6023      	str	r3, [r4, #0]
 802be6e:	bd38      	pop	{r3, r4, r5, pc}
 802be70:	2003c53c 	.word	0x2003c53c

0802be74 <__swhatbuf_r>:
 802be74:	b570      	push	{r4, r5, r6, lr}
 802be76:	460e      	mov	r6, r1
 802be78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be7c:	2900      	cmp	r1, #0
 802be7e:	b096      	sub	sp, #88	; 0x58
 802be80:	4614      	mov	r4, r2
 802be82:	461d      	mov	r5, r3
 802be84:	da08      	bge.n	802be98 <__swhatbuf_r+0x24>
 802be86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802be8a:	2200      	movs	r2, #0
 802be8c:	602a      	str	r2, [r5, #0]
 802be8e:	061a      	lsls	r2, r3, #24
 802be90:	d410      	bmi.n	802beb4 <__swhatbuf_r+0x40>
 802be92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802be96:	e00e      	b.n	802beb6 <__swhatbuf_r+0x42>
 802be98:	466a      	mov	r2, sp
 802be9a:	f000 fd0d 	bl	802c8b8 <_fstat_r>
 802be9e:	2800      	cmp	r0, #0
 802bea0:	dbf1      	blt.n	802be86 <__swhatbuf_r+0x12>
 802bea2:	9a01      	ldr	r2, [sp, #4]
 802bea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802beac:	425a      	negs	r2, r3
 802beae:	415a      	adcs	r2, r3
 802beb0:	602a      	str	r2, [r5, #0]
 802beb2:	e7ee      	b.n	802be92 <__swhatbuf_r+0x1e>
 802beb4:	2340      	movs	r3, #64	; 0x40
 802beb6:	2000      	movs	r0, #0
 802beb8:	6023      	str	r3, [r4, #0]
 802beba:	b016      	add	sp, #88	; 0x58
 802bebc:	bd70      	pop	{r4, r5, r6, pc}
	...

0802bec0 <__smakebuf_r>:
 802bec0:	898b      	ldrh	r3, [r1, #12]
 802bec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bec4:	079d      	lsls	r5, r3, #30
 802bec6:	4606      	mov	r6, r0
 802bec8:	460c      	mov	r4, r1
 802beca:	d507      	bpl.n	802bedc <__smakebuf_r+0x1c>
 802becc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bed0:	6023      	str	r3, [r4, #0]
 802bed2:	6123      	str	r3, [r4, #16]
 802bed4:	2301      	movs	r3, #1
 802bed6:	6163      	str	r3, [r4, #20]
 802bed8:	b002      	add	sp, #8
 802beda:	bd70      	pop	{r4, r5, r6, pc}
 802bedc:	ab01      	add	r3, sp, #4
 802bede:	466a      	mov	r2, sp
 802bee0:	f7ff ffc8 	bl	802be74 <__swhatbuf_r>
 802bee4:	9900      	ldr	r1, [sp, #0]
 802bee6:	4605      	mov	r5, r0
 802bee8:	4630      	mov	r0, r6
 802beea:	f7fd fffb 	bl	8029ee4 <_malloc_r>
 802beee:	b948      	cbnz	r0, 802bf04 <__smakebuf_r+0x44>
 802bef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bef4:	059a      	lsls	r2, r3, #22
 802bef6:	d4ef      	bmi.n	802bed8 <__smakebuf_r+0x18>
 802bef8:	f023 0303 	bic.w	r3, r3, #3
 802befc:	f043 0302 	orr.w	r3, r3, #2
 802bf00:	81a3      	strh	r3, [r4, #12]
 802bf02:	e7e3      	b.n	802becc <__smakebuf_r+0xc>
 802bf04:	4b0d      	ldr	r3, [pc, #52]	; (802bf3c <__smakebuf_r+0x7c>)
 802bf06:	62b3      	str	r3, [r6, #40]	; 0x28
 802bf08:	89a3      	ldrh	r3, [r4, #12]
 802bf0a:	6020      	str	r0, [r4, #0]
 802bf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bf10:	81a3      	strh	r3, [r4, #12]
 802bf12:	9b00      	ldr	r3, [sp, #0]
 802bf14:	6163      	str	r3, [r4, #20]
 802bf16:	9b01      	ldr	r3, [sp, #4]
 802bf18:	6120      	str	r0, [r4, #16]
 802bf1a:	b15b      	cbz	r3, 802bf34 <__smakebuf_r+0x74>
 802bf1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bf20:	4630      	mov	r0, r6
 802bf22:	f000 fd87 	bl	802ca34 <_isatty_r>
 802bf26:	b128      	cbz	r0, 802bf34 <__smakebuf_r+0x74>
 802bf28:	89a3      	ldrh	r3, [r4, #12]
 802bf2a:	f023 0303 	bic.w	r3, r3, #3
 802bf2e:	f043 0301 	orr.w	r3, r3, #1
 802bf32:	81a3      	strh	r3, [r4, #12]
 802bf34:	89a0      	ldrh	r0, [r4, #12]
 802bf36:	4305      	orrs	r5, r0
 802bf38:	81a5      	strh	r5, [r4, #12]
 802bf3a:	e7cd      	b.n	802bed8 <__smakebuf_r+0x18>
 802bf3c:	0802ba29 	.word	0x0802ba29

0802bf40 <__ascii_mbtowc>:
 802bf40:	b082      	sub	sp, #8
 802bf42:	b901      	cbnz	r1, 802bf46 <__ascii_mbtowc+0x6>
 802bf44:	a901      	add	r1, sp, #4
 802bf46:	b142      	cbz	r2, 802bf5a <__ascii_mbtowc+0x1a>
 802bf48:	b14b      	cbz	r3, 802bf5e <__ascii_mbtowc+0x1e>
 802bf4a:	7813      	ldrb	r3, [r2, #0]
 802bf4c:	600b      	str	r3, [r1, #0]
 802bf4e:	7812      	ldrb	r2, [r2, #0]
 802bf50:	1e10      	subs	r0, r2, #0
 802bf52:	bf18      	it	ne
 802bf54:	2001      	movne	r0, #1
 802bf56:	b002      	add	sp, #8
 802bf58:	4770      	bx	lr
 802bf5a:	4610      	mov	r0, r2
 802bf5c:	e7fb      	b.n	802bf56 <__ascii_mbtowc+0x16>
 802bf5e:	f06f 0001 	mvn.w	r0, #1
 802bf62:	e7f8      	b.n	802bf56 <__ascii_mbtowc+0x16>

0802bf64 <__malloc_lock>:
 802bf64:	4801      	ldr	r0, [pc, #4]	; (802bf6c <__malloc_lock+0x8>)
 802bf66:	f7ff bf6f 	b.w	802be48 <__retarget_lock_acquire_recursive>
 802bf6a:	bf00      	nop
 802bf6c:	2003c536 	.word	0x2003c536

0802bf70 <__malloc_unlock>:
 802bf70:	4801      	ldr	r0, [pc, #4]	; (802bf78 <__malloc_unlock+0x8>)
 802bf72:	f7ff bf6b 	b.w	802be4c <__retarget_lock_release_recursive>
 802bf76:	bf00      	nop
 802bf78:	2003c536 	.word	0x2003c536

0802bf7c <_realloc_r>:
 802bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bf80:	4680      	mov	r8, r0
 802bf82:	4614      	mov	r4, r2
 802bf84:	460e      	mov	r6, r1
 802bf86:	b921      	cbnz	r1, 802bf92 <_realloc_r+0x16>
 802bf88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bf8c:	4611      	mov	r1, r2
 802bf8e:	f7fd bfa9 	b.w	8029ee4 <_malloc_r>
 802bf92:	b92a      	cbnz	r2, 802bfa0 <_realloc_r+0x24>
 802bf94:	f7fd ff3a 	bl	8029e0c <_free_r>
 802bf98:	4625      	mov	r5, r4
 802bf9a:	4628      	mov	r0, r5
 802bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bfa0:	f000 fd58 	bl	802ca54 <_malloc_usable_size_r>
 802bfa4:	4284      	cmp	r4, r0
 802bfa6:	4607      	mov	r7, r0
 802bfa8:	d802      	bhi.n	802bfb0 <_realloc_r+0x34>
 802bfaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802bfae:	d812      	bhi.n	802bfd6 <_realloc_r+0x5a>
 802bfb0:	4621      	mov	r1, r4
 802bfb2:	4640      	mov	r0, r8
 802bfb4:	f7fd ff96 	bl	8029ee4 <_malloc_r>
 802bfb8:	4605      	mov	r5, r0
 802bfba:	2800      	cmp	r0, #0
 802bfbc:	d0ed      	beq.n	802bf9a <_realloc_r+0x1e>
 802bfbe:	42bc      	cmp	r4, r7
 802bfc0:	4622      	mov	r2, r4
 802bfc2:	4631      	mov	r1, r6
 802bfc4:	bf28      	it	cs
 802bfc6:	463a      	movcs	r2, r7
 802bfc8:	f7fd fc98 	bl	80298fc <memcpy>
 802bfcc:	4631      	mov	r1, r6
 802bfce:	4640      	mov	r0, r8
 802bfd0:	f7fd ff1c 	bl	8029e0c <_free_r>
 802bfd4:	e7e1      	b.n	802bf9a <_realloc_r+0x1e>
 802bfd6:	4635      	mov	r5, r6
 802bfd8:	e7df      	b.n	802bf9a <_realloc_r+0x1e>

0802bfda <_sungetc_r>:
 802bfda:	b538      	push	{r3, r4, r5, lr}
 802bfdc:	1c4b      	adds	r3, r1, #1
 802bfde:	4614      	mov	r4, r2
 802bfe0:	d103      	bne.n	802bfea <_sungetc_r+0x10>
 802bfe2:	f04f 35ff 	mov.w	r5, #4294967295
 802bfe6:	4628      	mov	r0, r5
 802bfe8:	bd38      	pop	{r3, r4, r5, pc}
 802bfea:	8993      	ldrh	r3, [r2, #12]
 802bfec:	f023 0320 	bic.w	r3, r3, #32
 802bff0:	8193      	strh	r3, [r2, #12]
 802bff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bff4:	6852      	ldr	r2, [r2, #4]
 802bff6:	b2cd      	uxtb	r5, r1
 802bff8:	b18b      	cbz	r3, 802c01e <_sungetc_r+0x44>
 802bffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802bffc:	4293      	cmp	r3, r2
 802bffe:	dd08      	ble.n	802c012 <_sungetc_r+0x38>
 802c000:	6823      	ldr	r3, [r4, #0]
 802c002:	1e5a      	subs	r2, r3, #1
 802c004:	6022      	str	r2, [r4, #0]
 802c006:	f803 5c01 	strb.w	r5, [r3, #-1]
 802c00a:	6863      	ldr	r3, [r4, #4]
 802c00c:	3301      	adds	r3, #1
 802c00e:	6063      	str	r3, [r4, #4]
 802c010:	e7e9      	b.n	802bfe6 <_sungetc_r+0xc>
 802c012:	4621      	mov	r1, r4
 802c014:	f000 fbfc 	bl	802c810 <__submore>
 802c018:	2800      	cmp	r0, #0
 802c01a:	d0f1      	beq.n	802c000 <_sungetc_r+0x26>
 802c01c:	e7e1      	b.n	802bfe2 <_sungetc_r+0x8>
 802c01e:	6921      	ldr	r1, [r4, #16]
 802c020:	6823      	ldr	r3, [r4, #0]
 802c022:	b151      	cbz	r1, 802c03a <_sungetc_r+0x60>
 802c024:	4299      	cmp	r1, r3
 802c026:	d208      	bcs.n	802c03a <_sungetc_r+0x60>
 802c028:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802c02c:	42a9      	cmp	r1, r5
 802c02e:	d104      	bne.n	802c03a <_sungetc_r+0x60>
 802c030:	3b01      	subs	r3, #1
 802c032:	3201      	adds	r2, #1
 802c034:	6023      	str	r3, [r4, #0]
 802c036:	6062      	str	r2, [r4, #4]
 802c038:	e7d5      	b.n	802bfe6 <_sungetc_r+0xc>
 802c03a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802c03e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c042:	6363      	str	r3, [r4, #52]	; 0x34
 802c044:	2303      	movs	r3, #3
 802c046:	63a3      	str	r3, [r4, #56]	; 0x38
 802c048:	4623      	mov	r3, r4
 802c04a:	f803 5f46 	strb.w	r5, [r3, #70]!
 802c04e:	6023      	str	r3, [r4, #0]
 802c050:	2301      	movs	r3, #1
 802c052:	e7dc      	b.n	802c00e <_sungetc_r+0x34>

0802c054 <__ssrefill_r>:
 802c054:	b510      	push	{r4, lr}
 802c056:	460c      	mov	r4, r1
 802c058:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c05a:	b169      	cbz	r1, 802c078 <__ssrefill_r+0x24>
 802c05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c060:	4299      	cmp	r1, r3
 802c062:	d001      	beq.n	802c068 <__ssrefill_r+0x14>
 802c064:	f7fd fed2 	bl	8029e0c <_free_r>
 802c068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c06a:	6063      	str	r3, [r4, #4]
 802c06c:	2000      	movs	r0, #0
 802c06e:	6360      	str	r0, [r4, #52]	; 0x34
 802c070:	b113      	cbz	r3, 802c078 <__ssrefill_r+0x24>
 802c072:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c074:	6023      	str	r3, [r4, #0]
 802c076:	bd10      	pop	{r4, pc}
 802c078:	6923      	ldr	r3, [r4, #16]
 802c07a:	6023      	str	r3, [r4, #0]
 802c07c:	2300      	movs	r3, #0
 802c07e:	6063      	str	r3, [r4, #4]
 802c080:	89a3      	ldrh	r3, [r4, #12]
 802c082:	f043 0320 	orr.w	r3, r3, #32
 802c086:	81a3      	strh	r3, [r4, #12]
 802c088:	f04f 30ff 	mov.w	r0, #4294967295
 802c08c:	e7f3      	b.n	802c076 <__ssrefill_r+0x22>
	...

0802c090 <__ssvfiscanf_r>:
 802c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c094:	460c      	mov	r4, r1
 802c096:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802c09a:	2100      	movs	r1, #0
 802c09c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802c0a0:	49a6      	ldr	r1, [pc, #664]	; (802c33c <__ssvfiscanf_r+0x2ac>)
 802c0a2:	91a0      	str	r1, [sp, #640]	; 0x280
 802c0a4:	f10d 0804 	add.w	r8, sp, #4
 802c0a8:	49a5      	ldr	r1, [pc, #660]	; (802c340 <__ssvfiscanf_r+0x2b0>)
 802c0aa:	4fa6      	ldr	r7, [pc, #664]	; (802c344 <__ssvfiscanf_r+0x2b4>)
 802c0ac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802c348 <__ssvfiscanf_r+0x2b8>
 802c0b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802c0b4:	4606      	mov	r6, r0
 802c0b6:	91a1      	str	r1, [sp, #644]	; 0x284
 802c0b8:	9300      	str	r3, [sp, #0]
 802c0ba:	7813      	ldrb	r3, [r2, #0]
 802c0bc:	2b00      	cmp	r3, #0
 802c0be:	f000 815a 	beq.w	802c376 <__ssvfiscanf_r+0x2e6>
 802c0c2:	5dd9      	ldrb	r1, [r3, r7]
 802c0c4:	f011 0108 	ands.w	r1, r1, #8
 802c0c8:	f102 0501 	add.w	r5, r2, #1
 802c0cc:	d019      	beq.n	802c102 <__ssvfiscanf_r+0x72>
 802c0ce:	6863      	ldr	r3, [r4, #4]
 802c0d0:	2b00      	cmp	r3, #0
 802c0d2:	dd0f      	ble.n	802c0f4 <__ssvfiscanf_r+0x64>
 802c0d4:	6823      	ldr	r3, [r4, #0]
 802c0d6:	781a      	ldrb	r2, [r3, #0]
 802c0d8:	5cba      	ldrb	r2, [r7, r2]
 802c0da:	0712      	lsls	r2, r2, #28
 802c0dc:	d401      	bmi.n	802c0e2 <__ssvfiscanf_r+0x52>
 802c0de:	462a      	mov	r2, r5
 802c0e0:	e7eb      	b.n	802c0ba <__ssvfiscanf_r+0x2a>
 802c0e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c0e4:	3201      	adds	r2, #1
 802c0e6:	9245      	str	r2, [sp, #276]	; 0x114
 802c0e8:	6862      	ldr	r2, [r4, #4]
 802c0ea:	3301      	adds	r3, #1
 802c0ec:	3a01      	subs	r2, #1
 802c0ee:	6062      	str	r2, [r4, #4]
 802c0f0:	6023      	str	r3, [r4, #0]
 802c0f2:	e7ec      	b.n	802c0ce <__ssvfiscanf_r+0x3e>
 802c0f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c0f6:	4621      	mov	r1, r4
 802c0f8:	4630      	mov	r0, r6
 802c0fa:	4798      	blx	r3
 802c0fc:	2800      	cmp	r0, #0
 802c0fe:	d0e9      	beq.n	802c0d4 <__ssvfiscanf_r+0x44>
 802c100:	e7ed      	b.n	802c0de <__ssvfiscanf_r+0x4e>
 802c102:	2b25      	cmp	r3, #37	; 0x25
 802c104:	d012      	beq.n	802c12c <__ssvfiscanf_r+0x9c>
 802c106:	469a      	mov	sl, r3
 802c108:	6863      	ldr	r3, [r4, #4]
 802c10a:	2b00      	cmp	r3, #0
 802c10c:	f340 8091 	ble.w	802c232 <__ssvfiscanf_r+0x1a2>
 802c110:	6822      	ldr	r2, [r4, #0]
 802c112:	7813      	ldrb	r3, [r2, #0]
 802c114:	4553      	cmp	r3, sl
 802c116:	f040 812e 	bne.w	802c376 <__ssvfiscanf_r+0x2e6>
 802c11a:	6863      	ldr	r3, [r4, #4]
 802c11c:	3b01      	subs	r3, #1
 802c11e:	6063      	str	r3, [r4, #4]
 802c120:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802c122:	3201      	adds	r2, #1
 802c124:	3301      	adds	r3, #1
 802c126:	6022      	str	r2, [r4, #0]
 802c128:	9345      	str	r3, [sp, #276]	; 0x114
 802c12a:	e7d8      	b.n	802c0de <__ssvfiscanf_r+0x4e>
 802c12c:	9141      	str	r1, [sp, #260]	; 0x104
 802c12e:	9143      	str	r1, [sp, #268]	; 0x10c
 802c130:	7853      	ldrb	r3, [r2, #1]
 802c132:	2b2a      	cmp	r3, #42	; 0x2a
 802c134:	bf02      	ittt	eq
 802c136:	2310      	moveq	r3, #16
 802c138:	1c95      	addeq	r5, r2, #2
 802c13a:	9341      	streq	r3, [sp, #260]	; 0x104
 802c13c:	220a      	movs	r2, #10
 802c13e:	46aa      	mov	sl, r5
 802c140:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802c144:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802c148:	2b09      	cmp	r3, #9
 802c14a:	d91d      	bls.n	802c188 <__ssvfiscanf_r+0xf8>
 802c14c:	487e      	ldr	r0, [pc, #504]	; (802c348 <__ssvfiscanf_r+0x2b8>)
 802c14e:	2203      	movs	r2, #3
 802c150:	f7d4 f87e 	bl	8000250 <memchr>
 802c154:	b140      	cbz	r0, 802c168 <__ssvfiscanf_r+0xd8>
 802c156:	2301      	movs	r3, #1
 802c158:	eba0 0009 	sub.w	r0, r0, r9
 802c15c:	fa03 f000 	lsl.w	r0, r3, r0
 802c160:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c162:	4318      	orrs	r0, r3
 802c164:	9041      	str	r0, [sp, #260]	; 0x104
 802c166:	4655      	mov	r5, sl
 802c168:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c16c:	2b78      	cmp	r3, #120	; 0x78
 802c16e:	d806      	bhi.n	802c17e <__ssvfiscanf_r+0xee>
 802c170:	2b57      	cmp	r3, #87	; 0x57
 802c172:	d810      	bhi.n	802c196 <__ssvfiscanf_r+0x106>
 802c174:	2b25      	cmp	r3, #37	; 0x25
 802c176:	d0c6      	beq.n	802c106 <__ssvfiscanf_r+0x76>
 802c178:	d856      	bhi.n	802c228 <__ssvfiscanf_r+0x198>
 802c17a:	2b00      	cmp	r3, #0
 802c17c:	d064      	beq.n	802c248 <__ssvfiscanf_r+0x1b8>
 802c17e:	2303      	movs	r3, #3
 802c180:	9347      	str	r3, [sp, #284]	; 0x11c
 802c182:	230a      	movs	r3, #10
 802c184:	9342      	str	r3, [sp, #264]	; 0x108
 802c186:	e071      	b.n	802c26c <__ssvfiscanf_r+0x1dc>
 802c188:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802c18a:	fb02 1103 	mla	r1, r2, r3, r1
 802c18e:	3930      	subs	r1, #48	; 0x30
 802c190:	9143      	str	r1, [sp, #268]	; 0x10c
 802c192:	4655      	mov	r5, sl
 802c194:	e7d3      	b.n	802c13e <__ssvfiscanf_r+0xae>
 802c196:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802c19a:	2a20      	cmp	r2, #32
 802c19c:	d8ef      	bhi.n	802c17e <__ssvfiscanf_r+0xee>
 802c19e:	a101      	add	r1, pc, #4	; (adr r1, 802c1a4 <__ssvfiscanf_r+0x114>)
 802c1a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802c1a4:	0802c257 	.word	0x0802c257
 802c1a8:	0802c17f 	.word	0x0802c17f
 802c1ac:	0802c17f 	.word	0x0802c17f
 802c1b0:	0802c2b5 	.word	0x0802c2b5
 802c1b4:	0802c17f 	.word	0x0802c17f
 802c1b8:	0802c17f 	.word	0x0802c17f
 802c1bc:	0802c17f 	.word	0x0802c17f
 802c1c0:	0802c17f 	.word	0x0802c17f
 802c1c4:	0802c17f 	.word	0x0802c17f
 802c1c8:	0802c17f 	.word	0x0802c17f
 802c1cc:	0802c17f 	.word	0x0802c17f
 802c1d0:	0802c2cb 	.word	0x0802c2cb
 802c1d4:	0802c2a1 	.word	0x0802c2a1
 802c1d8:	0802c22f 	.word	0x0802c22f
 802c1dc:	0802c22f 	.word	0x0802c22f
 802c1e0:	0802c22f 	.word	0x0802c22f
 802c1e4:	0802c17f 	.word	0x0802c17f
 802c1e8:	0802c2a5 	.word	0x0802c2a5
 802c1ec:	0802c17f 	.word	0x0802c17f
 802c1f0:	0802c17f 	.word	0x0802c17f
 802c1f4:	0802c17f 	.word	0x0802c17f
 802c1f8:	0802c17f 	.word	0x0802c17f
 802c1fc:	0802c2db 	.word	0x0802c2db
 802c200:	0802c2ad 	.word	0x0802c2ad
 802c204:	0802c24f 	.word	0x0802c24f
 802c208:	0802c17f 	.word	0x0802c17f
 802c20c:	0802c17f 	.word	0x0802c17f
 802c210:	0802c2d7 	.word	0x0802c2d7
 802c214:	0802c17f 	.word	0x0802c17f
 802c218:	0802c2a1 	.word	0x0802c2a1
 802c21c:	0802c17f 	.word	0x0802c17f
 802c220:	0802c17f 	.word	0x0802c17f
 802c224:	0802c257 	.word	0x0802c257
 802c228:	3b45      	subs	r3, #69	; 0x45
 802c22a:	2b02      	cmp	r3, #2
 802c22c:	d8a7      	bhi.n	802c17e <__ssvfiscanf_r+0xee>
 802c22e:	2305      	movs	r3, #5
 802c230:	e01b      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c232:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c234:	4621      	mov	r1, r4
 802c236:	4630      	mov	r0, r6
 802c238:	4798      	blx	r3
 802c23a:	2800      	cmp	r0, #0
 802c23c:	f43f af68 	beq.w	802c110 <__ssvfiscanf_r+0x80>
 802c240:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c242:	2800      	cmp	r0, #0
 802c244:	f040 808d 	bne.w	802c362 <__ssvfiscanf_r+0x2d2>
 802c248:	f04f 30ff 	mov.w	r0, #4294967295
 802c24c:	e08f      	b.n	802c36e <__ssvfiscanf_r+0x2de>
 802c24e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c250:	f042 0220 	orr.w	r2, r2, #32
 802c254:	9241      	str	r2, [sp, #260]	; 0x104
 802c256:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c25c:	9241      	str	r2, [sp, #260]	; 0x104
 802c25e:	2210      	movs	r2, #16
 802c260:	2b6f      	cmp	r3, #111	; 0x6f
 802c262:	9242      	str	r2, [sp, #264]	; 0x108
 802c264:	bf34      	ite	cc
 802c266:	2303      	movcc	r3, #3
 802c268:	2304      	movcs	r3, #4
 802c26a:	9347      	str	r3, [sp, #284]	; 0x11c
 802c26c:	6863      	ldr	r3, [r4, #4]
 802c26e:	2b00      	cmp	r3, #0
 802c270:	dd42      	ble.n	802c2f8 <__ssvfiscanf_r+0x268>
 802c272:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c274:	0659      	lsls	r1, r3, #25
 802c276:	d404      	bmi.n	802c282 <__ssvfiscanf_r+0x1f2>
 802c278:	6823      	ldr	r3, [r4, #0]
 802c27a:	781a      	ldrb	r2, [r3, #0]
 802c27c:	5cba      	ldrb	r2, [r7, r2]
 802c27e:	0712      	lsls	r2, r2, #28
 802c280:	d441      	bmi.n	802c306 <__ssvfiscanf_r+0x276>
 802c282:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802c284:	2b02      	cmp	r3, #2
 802c286:	dc50      	bgt.n	802c32a <__ssvfiscanf_r+0x29a>
 802c288:	466b      	mov	r3, sp
 802c28a:	4622      	mov	r2, r4
 802c28c:	a941      	add	r1, sp, #260	; 0x104
 802c28e:	4630      	mov	r0, r6
 802c290:	f000 f876 	bl	802c380 <_scanf_chars>
 802c294:	2801      	cmp	r0, #1
 802c296:	d06e      	beq.n	802c376 <__ssvfiscanf_r+0x2e6>
 802c298:	2802      	cmp	r0, #2
 802c29a:	f47f af20 	bne.w	802c0de <__ssvfiscanf_r+0x4e>
 802c29e:	e7cf      	b.n	802c240 <__ssvfiscanf_r+0x1b0>
 802c2a0:	220a      	movs	r2, #10
 802c2a2:	e7dd      	b.n	802c260 <__ssvfiscanf_r+0x1d0>
 802c2a4:	2300      	movs	r3, #0
 802c2a6:	9342      	str	r3, [sp, #264]	; 0x108
 802c2a8:	2303      	movs	r3, #3
 802c2aa:	e7de      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c2ac:	2308      	movs	r3, #8
 802c2ae:	9342      	str	r3, [sp, #264]	; 0x108
 802c2b0:	2304      	movs	r3, #4
 802c2b2:	e7da      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c2b4:	4629      	mov	r1, r5
 802c2b6:	4640      	mov	r0, r8
 802c2b8:	f000 f9c6 	bl	802c648 <__sccl>
 802c2bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c2c2:	9341      	str	r3, [sp, #260]	; 0x104
 802c2c4:	4605      	mov	r5, r0
 802c2c6:	2301      	movs	r3, #1
 802c2c8:	e7cf      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c2ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c2d0:	9341      	str	r3, [sp, #260]	; 0x104
 802c2d2:	2300      	movs	r3, #0
 802c2d4:	e7c9      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c2d6:	2302      	movs	r3, #2
 802c2d8:	e7c7      	b.n	802c26a <__ssvfiscanf_r+0x1da>
 802c2da:	9841      	ldr	r0, [sp, #260]	; 0x104
 802c2dc:	06c3      	lsls	r3, r0, #27
 802c2de:	f53f aefe 	bmi.w	802c0de <__ssvfiscanf_r+0x4e>
 802c2e2:	9b00      	ldr	r3, [sp, #0]
 802c2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c2e6:	1d19      	adds	r1, r3, #4
 802c2e8:	9100      	str	r1, [sp, #0]
 802c2ea:	681b      	ldr	r3, [r3, #0]
 802c2ec:	f010 0f01 	tst.w	r0, #1
 802c2f0:	bf14      	ite	ne
 802c2f2:	801a      	strhne	r2, [r3, #0]
 802c2f4:	601a      	streq	r2, [r3, #0]
 802c2f6:	e6f2      	b.n	802c0de <__ssvfiscanf_r+0x4e>
 802c2f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c2fa:	4621      	mov	r1, r4
 802c2fc:	4630      	mov	r0, r6
 802c2fe:	4798      	blx	r3
 802c300:	2800      	cmp	r0, #0
 802c302:	d0b6      	beq.n	802c272 <__ssvfiscanf_r+0x1e2>
 802c304:	e79c      	b.n	802c240 <__ssvfiscanf_r+0x1b0>
 802c306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c308:	3201      	adds	r2, #1
 802c30a:	9245      	str	r2, [sp, #276]	; 0x114
 802c30c:	6862      	ldr	r2, [r4, #4]
 802c30e:	3a01      	subs	r2, #1
 802c310:	2a00      	cmp	r2, #0
 802c312:	6062      	str	r2, [r4, #4]
 802c314:	dd02      	ble.n	802c31c <__ssvfiscanf_r+0x28c>
 802c316:	3301      	adds	r3, #1
 802c318:	6023      	str	r3, [r4, #0]
 802c31a:	e7ad      	b.n	802c278 <__ssvfiscanf_r+0x1e8>
 802c31c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c31e:	4621      	mov	r1, r4
 802c320:	4630      	mov	r0, r6
 802c322:	4798      	blx	r3
 802c324:	2800      	cmp	r0, #0
 802c326:	d0a7      	beq.n	802c278 <__ssvfiscanf_r+0x1e8>
 802c328:	e78a      	b.n	802c240 <__ssvfiscanf_r+0x1b0>
 802c32a:	2b04      	cmp	r3, #4
 802c32c:	dc0e      	bgt.n	802c34c <__ssvfiscanf_r+0x2bc>
 802c32e:	466b      	mov	r3, sp
 802c330:	4622      	mov	r2, r4
 802c332:	a941      	add	r1, sp, #260	; 0x104
 802c334:	4630      	mov	r0, r6
 802c336:	f000 f87d 	bl	802c434 <_scanf_i>
 802c33a:	e7ab      	b.n	802c294 <__ssvfiscanf_r+0x204>
 802c33c:	0802bfdb 	.word	0x0802bfdb
 802c340:	0802c055 	.word	0x0802c055
 802c344:	08030af9 	.word	0x08030af9
 802c348:	0803081e 	.word	0x0803081e
 802c34c:	4b0b      	ldr	r3, [pc, #44]	; (802c37c <__ssvfiscanf_r+0x2ec>)
 802c34e:	2b00      	cmp	r3, #0
 802c350:	f43f aec5 	beq.w	802c0de <__ssvfiscanf_r+0x4e>
 802c354:	466b      	mov	r3, sp
 802c356:	4622      	mov	r2, r4
 802c358:	a941      	add	r1, sp, #260	; 0x104
 802c35a:	4630      	mov	r0, r6
 802c35c:	f3af 8000 	nop.w
 802c360:	e798      	b.n	802c294 <__ssvfiscanf_r+0x204>
 802c362:	89a3      	ldrh	r3, [r4, #12]
 802c364:	f013 0f40 	tst.w	r3, #64	; 0x40
 802c368:	bf18      	it	ne
 802c36a:	f04f 30ff 	movne.w	r0, #4294967295
 802c36e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c376:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c378:	e7f9      	b.n	802c36e <__ssvfiscanf_r+0x2de>
 802c37a:	bf00      	nop
 802c37c:	00000000 	.word	0x00000000

0802c380 <_scanf_chars>:
 802c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c384:	4615      	mov	r5, r2
 802c386:	688a      	ldr	r2, [r1, #8]
 802c388:	4680      	mov	r8, r0
 802c38a:	460c      	mov	r4, r1
 802c38c:	b932      	cbnz	r2, 802c39c <_scanf_chars+0x1c>
 802c38e:	698a      	ldr	r2, [r1, #24]
 802c390:	2a00      	cmp	r2, #0
 802c392:	bf0c      	ite	eq
 802c394:	2201      	moveq	r2, #1
 802c396:	f04f 32ff 	movne.w	r2, #4294967295
 802c39a:	608a      	str	r2, [r1, #8]
 802c39c:	6822      	ldr	r2, [r4, #0]
 802c39e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802c430 <_scanf_chars+0xb0>
 802c3a2:	06d1      	lsls	r1, r2, #27
 802c3a4:	bf5f      	itttt	pl
 802c3a6:	681a      	ldrpl	r2, [r3, #0]
 802c3a8:	1d11      	addpl	r1, r2, #4
 802c3aa:	6019      	strpl	r1, [r3, #0]
 802c3ac:	6816      	ldrpl	r6, [r2, #0]
 802c3ae:	2700      	movs	r7, #0
 802c3b0:	69a0      	ldr	r0, [r4, #24]
 802c3b2:	b188      	cbz	r0, 802c3d8 <_scanf_chars+0x58>
 802c3b4:	2801      	cmp	r0, #1
 802c3b6:	d107      	bne.n	802c3c8 <_scanf_chars+0x48>
 802c3b8:	682a      	ldr	r2, [r5, #0]
 802c3ba:	7811      	ldrb	r1, [r2, #0]
 802c3bc:	6962      	ldr	r2, [r4, #20]
 802c3be:	5c52      	ldrb	r2, [r2, r1]
 802c3c0:	b952      	cbnz	r2, 802c3d8 <_scanf_chars+0x58>
 802c3c2:	2f00      	cmp	r7, #0
 802c3c4:	d031      	beq.n	802c42a <_scanf_chars+0xaa>
 802c3c6:	e022      	b.n	802c40e <_scanf_chars+0x8e>
 802c3c8:	2802      	cmp	r0, #2
 802c3ca:	d120      	bne.n	802c40e <_scanf_chars+0x8e>
 802c3cc:	682b      	ldr	r3, [r5, #0]
 802c3ce:	781b      	ldrb	r3, [r3, #0]
 802c3d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 802c3d4:	071b      	lsls	r3, r3, #28
 802c3d6:	d41a      	bmi.n	802c40e <_scanf_chars+0x8e>
 802c3d8:	6823      	ldr	r3, [r4, #0]
 802c3da:	06da      	lsls	r2, r3, #27
 802c3dc:	bf5e      	ittt	pl
 802c3de:	682b      	ldrpl	r3, [r5, #0]
 802c3e0:	781b      	ldrbpl	r3, [r3, #0]
 802c3e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 802c3e6:	682a      	ldr	r2, [r5, #0]
 802c3e8:	686b      	ldr	r3, [r5, #4]
 802c3ea:	3201      	adds	r2, #1
 802c3ec:	602a      	str	r2, [r5, #0]
 802c3ee:	68a2      	ldr	r2, [r4, #8]
 802c3f0:	3b01      	subs	r3, #1
 802c3f2:	3a01      	subs	r2, #1
 802c3f4:	606b      	str	r3, [r5, #4]
 802c3f6:	3701      	adds	r7, #1
 802c3f8:	60a2      	str	r2, [r4, #8]
 802c3fa:	b142      	cbz	r2, 802c40e <_scanf_chars+0x8e>
 802c3fc:	2b00      	cmp	r3, #0
 802c3fe:	dcd7      	bgt.n	802c3b0 <_scanf_chars+0x30>
 802c400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c404:	4629      	mov	r1, r5
 802c406:	4640      	mov	r0, r8
 802c408:	4798      	blx	r3
 802c40a:	2800      	cmp	r0, #0
 802c40c:	d0d0      	beq.n	802c3b0 <_scanf_chars+0x30>
 802c40e:	6823      	ldr	r3, [r4, #0]
 802c410:	f013 0310 	ands.w	r3, r3, #16
 802c414:	d105      	bne.n	802c422 <_scanf_chars+0xa2>
 802c416:	68e2      	ldr	r2, [r4, #12]
 802c418:	3201      	adds	r2, #1
 802c41a:	60e2      	str	r2, [r4, #12]
 802c41c:	69a2      	ldr	r2, [r4, #24]
 802c41e:	b102      	cbz	r2, 802c422 <_scanf_chars+0xa2>
 802c420:	7033      	strb	r3, [r6, #0]
 802c422:	6923      	ldr	r3, [r4, #16]
 802c424:	443b      	add	r3, r7
 802c426:	6123      	str	r3, [r4, #16]
 802c428:	2000      	movs	r0, #0
 802c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c42e:	bf00      	nop
 802c430:	08030af9 	.word	0x08030af9

0802c434 <_scanf_i>:
 802c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c438:	4698      	mov	r8, r3
 802c43a:	4b76      	ldr	r3, [pc, #472]	; (802c614 <_scanf_i+0x1e0>)
 802c43c:	460c      	mov	r4, r1
 802c43e:	4682      	mov	sl, r0
 802c440:	4616      	mov	r6, r2
 802c442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802c446:	b087      	sub	sp, #28
 802c448:	ab03      	add	r3, sp, #12
 802c44a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c44e:	4b72      	ldr	r3, [pc, #456]	; (802c618 <_scanf_i+0x1e4>)
 802c450:	69a1      	ldr	r1, [r4, #24]
 802c452:	4a72      	ldr	r2, [pc, #456]	; (802c61c <_scanf_i+0x1e8>)
 802c454:	2903      	cmp	r1, #3
 802c456:	bf18      	it	ne
 802c458:	461a      	movne	r2, r3
 802c45a:	68a3      	ldr	r3, [r4, #8]
 802c45c:	9201      	str	r2, [sp, #4]
 802c45e:	1e5a      	subs	r2, r3, #1
 802c460:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802c464:	bf88      	it	hi
 802c466:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802c46a:	4627      	mov	r7, r4
 802c46c:	bf82      	ittt	hi
 802c46e:	eb03 0905 	addhi.w	r9, r3, r5
 802c472:	f240 135d 	movwhi	r3, #349	; 0x15d
 802c476:	60a3      	strhi	r3, [r4, #8]
 802c478:	f857 3b1c 	ldr.w	r3, [r7], #28
 802c47c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802c480:	bf98      	it	ls
 802c482:	f04f 0900 	movls.w	r9, #0
 802c486:	6023      	str	r3, [r4, #0]
 802c488:	463d      	mov	r5, r7
 802c48a:	f04f 0b00 	mov.w	fp, #0
 802c48e:	6831      	ldr	r1, [r6, #0]
 802c490:	ab03      	add	r3, sp, #12
 802c492:	7809      	ldrb	r1, [r1, #0]
 802c494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802c498:	2202      	movs	r2, #2
 802c49a:	f7d3 fed9 	bl	8000250 <memchr>
 802c49e:	b328      	cbz	r0, 802c4ec <_scanf_i+0xb8>
 802c4a0:	f1bb 0f01 	cmp.w	fp, #1
 802c4a4:	d159      	bne.n	802c55a <_scanf_i+0x126>
 802c4a6:	6862      	ldr	r2, [r4, #4]
 802c4a8:	b92a      	cbnz	r2, 802c4b6 <_scanf_i+0x82>
 802c4aa:	6822      	ldr	r2, [r4, #0]
 802c4ac:	2308      	movs	r3, #8
 802c4ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c4b2:	6063      	str	r3, [r4, #4]
 802c4b4:	6022      	str	r2, [r4, #0]
 802c4b6:	6822      	ldr	r2, [r4, #0]
 802c4b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802c4bc:	6022      	str	r2, [r4, #0]
 802c4be:	68a2      	ldr	r2, [r4, #8]
 802c4c0:	1e51      	subs	r1, r2, #1
 802c4c2:	60a1      	str	r1, [r4, #8]
 802c4c4:	b192      	cbz	r2, 802c4ec <_scanf_i+0xb8>
 802c4c6:	6832      	ldr	r2, [r6, #0]
 802c4c8:	1c51      	adds	r1, r2, #1
 802c4ca:	6031      	str	r1, [r6, #0]
 802c4cc:	7812      	ldrb	r2, [r2, #0]
 802c4ce:	f805 2b01 	strb.w	r2, [r5], #1
 802c4d2:	6872      	ldr	r2, [r6, #4]
 802c4d4:	3a01      	subs	r2, #1
 802c4d6:	2a00      	cmp	r2, #0
 802c4d8:	6072      	str	r2, [r6, #4]
 802c4da:	dc07      	bgt.n	802c4ec <_scanf_i+0xb8>
 802c4dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802c4e0:	4631      	mov	r1, r6
 802c4e2:	4650      	mov	r0, sl
 802c4e4:	4790      	blx	r2
 802c4e6:	2800      	cmp	r0, #0
 802c4e8:	f040 8085 	bne.w	802c5f6 <_scanf_i+0x1c2>
 802c4ec:	f10b 0b01 	add.w	fp, fp, #1
 802c4f0:	f1bb 0f03 	cmp.w	fp, #3
 802c4f4:	d1cb      	bne.n	802c48e <_scanf_i+0x5a>
 802c4f6:	6863      	ldr	r3, [r4, #4]
 802c4f8:	b90b      	cbnz	r3, 802c4fe <_scanf_i+0xca>
 802c4fa:	230a      	movs	r3, #10
 802c4fc:	6063      	str	r3, [r4, #4]
 802c4fe:	6863      	ldr	r3, [r4, #4]
 802c500:	4947      	ldr	r1, [pc, #284]	; (802c620 <_scanf_i+0x1ec>)
 802c502:	6960      	ldr	r0, [r4, #20]
 802c504:	1ac9      	subs	r1, r1, r3
 802c506:	f000 f89f 	bl	802c648 <__sccl>
 802c50a:	f04f 0b00 	mov.w	fp, #0
 802c50e:	68a3      	ldr	r3, [r4, #8]
 802c510:	6822      	ldr	r2, [r4, #0]
 802c512:	2b00      	cmp	r3, #0
 802c514:	d03d      	beq.n	802c592 <_scanf_i+0x15e>
 802c516:	6831      	ldr	r1, [r6, #0]
 802c518:	6960      	ldr	r0, [r4, #20]
 802c51a:	f891 c000 	ldrb.w	ip, [r1]
 802c51e:	f810 000c 	ldrb.w	r0, [r0, ip]
 802c522:	2800      	cmp	r0, #0
 802c524:	d035      	beq.n	802c592 <_scanf_i+0x15e>
 802c526:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802c52a:	d124      	bne.n	802c576 <_scanf_i+0x142>
 802c52c:	0510      	lsls	r0, r2, #20
 802c52e:	d522      	bpl.n	802c576 <_scanf_i+0x142>
 802c530:	f10b 0b01 	add.w	fp, fp, #1
 802c534:	f1b9 0f00 	cmp.w	r9, #0
 802c538:	d003      	beq.n	802c542 <_scanf_i+0x10e>
 802c53a:	3301      	adds	r3, #1
 802c53c:	f109 39ff 	add.w	r9, r9, #4294967295
 802c540:	60a3      	str	r3, [r4, #8]
 802c542:	6873      	ldr	r3, [r6, #4]
 802c544:	3b01      	subs	r3, #1
 802c546:	2b00      	cmp	r3, #0
 802c548:	6073      	str	r3, [r6, #4]
 802c54a:	dd1b      	ble.n	802c584 <_scanf_i+0x150>
 802c54c:	6833      	ldr	r3, [r6, #0]
 802c54e:	3301      	adds	r3, #1
 802c550:	6033      	str	r3, [r6, #0]
 802c552:	68a3      	ldr	r3, [r4, #8]
 802c554:	3b01      	subs	r3, #1
 802c556:	60a3      	str	r3, [r4, #8]
 802c558:	e7d9      	b.n	802c50e <_scanf_i+0xda>
 802c55a:	f1bb 0f02 	cmp.w	fp, #2
 802c55e:	d1ae      	bne.n	802c4be <_scanf_i+0x8a>
 802c560:	6822      	ldr	r2, [r4, #0]
 802c562:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802c566:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802c56a:	d1bf      	bne.n	802c4ec <_scanf_i+0xb8>
 802c56c:	2310      	movs	r3, #16
 802c56e:	6063      	str	r3, [r4, #4]
 802c570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c574:	e7a2      	b.n	802c4bc <_scanf_i+0x88>
 802c576:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802c57a:	6022      	str	r2, [r4, #0]
 802c57c:	780b      	ldrb	r3, [r1, #0]
 802c57e:	f805 3b01 	strb.w	r3, [r5], #1
 802c582:	e7de      	b.n	802c542 <_scanf_i+0x10e>
 802c584:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c588:	4631      	mov	r1, r6
 802c58a:	4650      	mov	r0, sl
 802c58c:	4798      	blx	r3
 802c58e:	2800      	cmp	r0, #0
 802c590:	d0df      	beq.n	802c552 <_scanf_i+0x11e>
 802c592:	6823      	ldr	r3, [r4, #0]
 802c594:	05db      	lsls	r3, r3, #23
 802c596:	d50d      	bpl.n	802c5b4 <_scanf_i+0x180>
 802c598:	42bd      	cmp	r5, r7
 802c59a:	d909      	bls.n	802c5b0 <_scanf_i+0x17c>
 802c59c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802c5a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802c5a4:	4632      	mov	r2, r6
 802c5a6:	4650      	mov	r0, sl
 802c5a8:	4798      	blx	r3
 802c5aa:	f105 39ff 	add.w	r9, r5, #4294967295
 802c5ae:	464d      	mov	r5, r9
 802c5b0:	42bd      	cmp	r5, r7
 802c5b2:	d02d      	beq.n	802c610 <_scanf_i+0x1dc>
 802c5b4:	6822      	ldr	r2, [r4, #0]
 802c5b6:	f012 0210 	ands.w	r2, r2, #16
 802c5ba:	d113      	bne.n	802c5e4 <_scanf_i+0x1b0>
 802c5bc:	702a      	strb	r2, [r5, #0]
 802c5be:	6863      	ldr	r3, [r4, #4]
 802c5c0:	9e01      	ldr	r6, [sp, #4]
 802c5c2:	4639      	mov	r1, r7
 802c5c4:	4650      	mov	r0, sl
 802c5c6:	47b0      	blx	r6
 802c5c8:	6821      	ldr	r1, [r4, #0]
 802c5ca:	f8d8 3000 	ldr.w	r3, [r8]
 802c5ce:	f011 0f20 	tst.w	r1, #32
 802c5d2:	d013      	beq.n	802c5fc <_scanf_i+0x1c8>
 802c5d4:	1d1a      	adds	r2, r3, #4
 802c5d6:	f8c8 2000 	str.w	r2, [r8]
 802c5da:	681b      	ldr	r3, [r3, #0]
 802c5dc:	6018      	str	r0, [r3, #0]
 802c5de:	68e3      	ldr	r3, [r4, #12]
 802c5e0:	3301      	adds	r3, #1
 802c5e2:	60e3      	str	r3, [r4, #12]
 802c5e4:	1bed      	subs	r5, r5, r7
 802c5e6:	44ab      	add	fp, r5
 802c5e8:	6925      	ldr	r5, [r4, #16]
 802c5ea:	445d      	add	r5, fp
 802c5ec:	6125      	str	r5, [r4, #16]
 802c5ee:	2000      	movs	r0, #0
 802c5f0:	b007      	add	sp, #28
 802c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c5f6:	f04f 0b00 	mov.w	fp, #0
 802c5fa:	e7ca      	b.n	802c592 <_scanf_i+0x15e>
 802c5fc:	1d1a      	adds	r2, r3, #4
 802c5fe:	f8c8 2000 	str.w	r2, [r8]
 802c602:	681b      	ldr	r3, [r3, #0]
 802c604:	f011 0f01 	tst.w	r1, #1
 802c608:	bf14      	ite	ne
 802c60a:	8018      	strhne	r0, [r3, #0]
 802c60c:	6018      	streq	r0, [r3, #0]
 802c60e:	e7e6      	b.n	802c5de <_scanf_i+0x1aa>
 802c610:	2001      	movs	r0, #1
 802c612:	e7ed      	b.n	802c5f0 <_scanf_i+0x1bc>
 802c614:	0802eea4 	.word	0x0802eea4
 802c618:	0802c7e5 	.word	0x0802c7e5
 802c61c:	0802afdd 	.word	0x0802afdd
 802c620:	08030ce1 	.word	0x08030ce1

0802c624 <_read_r>:
 802c624:	b538      	push	{r3, r4, r5, lr}
 802c626:	4d07      	ldr	r5, [pc, #28]	; (802c644 <_read_r+0x20>)
 802c628:	4604      	mov	r4, r0
 802c62a:	4608      	mov	r0, r1
 802c62c:	4611      	mov	r1, r2
 802c62e:	2200      	movs	r2, #0
 802c630:	602a      	str	r2, [r5, #0]
 802c632:	461a      	mov	r2, r3
 802c634:	f7d5 fe2a 	bl	800228c <_read>
 802c638:	1c43      	adds	r3, r0, #1
 802c63a:	d102      	bne.n	802c642 <_read_r+0x1e>
 802c63c:	682b      	ldr	r3, [r5, #0]
 802c63e:	b103      	cbz	r3, 802c642 <_read_r+0x1e>
 802c640:	6023      	str	r3, [r4, #0]
 802c642:	bd38      	pop	{r3, r4, r5, pc}
 802c644:	2003c53c 	.word	0x2003c53c

0802c648 <__sccl>:
 802c648:	b570      	push	{r4, r5, r6, lr}
 802c64a:	780b      	ldrb	r3, [r1, #0]
 802c64c:	4604      	mov	r4, r0
 802c64e:	2b5e      	cmp	r3, #94	; 0x5e
 802c650:	bf0b      	itete	eq
 802c652:	784b      	ldrbeq	r3, [r1, #1]
 802c654:	1c48      	addne	r0, r1, #1
 802c656:	1c88      	addeq	r0, r1, #2
 802c658:	2200      	movne	r2, #0
 802c65a:	bf08      	it	eq
 802c65c:	2201      	moveq	r2, #1
 802c65e:	1e61      	subs	r1, r4, #1
 802c660:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802c664:	f801 2f01 	strb.w	r2, [r1, #1]!
 802c668:	42a9      	cmp	r1, r5
 802c66a:	d1fb      	bne.n	802c664 <__sccl+0x1c>
 802c66c:	b90b      	cbnz	r3, 802c672 <__sccl+0x2a>
 802c66e:	3801      	subs	r0, #1
 802c670:	bd70      	pop	{r4, r5, r6, pc}
 802c672:	f082 0201 	eor.w	r2, r2, #1
 802c676:	54e2      	strb	r2, [r4, r3]
 802c678:	4605      	mov	r5, r0
 802c67a:	4628      	mov	r0, r5
 802c67c:	f810 1b01 	ldrb.w	r1, [r0], #1
 802c680:	292d      	cmp	r1, #45	; 0x2d
 802c682:	d006      	beq.n	802c692 <__sccl+0x4a>
 802c684:	295d      	cmp	r1, #93	; 0x5d
 802c686:	d0f3      	beq.n	802c670 <__sccl+0x28>
 802c688:	b909      	cbnz	r1, 802c68e <__sccl+0x46>
 802c68a:	4628      	mov	r0, r5
 802c68c:	e7f0      	b.n	802c670 <__sccl+0x28>
 802c68e:	460b      	mov	r3, r1
 802c690:	e7f1      	b.n	802c676 <__sccl+0x2e>
 802c692:	786e      	ldrb	r6, [r5, #1]
 802c694:	2e5d      	cmp	r6, #93	; 0x5d
 802c696:	d0fa      	beq.n	802c68e <__sccl+0x46>
 802c698:	42b3      	cmp	r3, r6
 802c69a:	dcf8      	bgt.n	802c68e <__sccl+0x46>
 802c69c:	3502      	adds	r5, #2
 802c69e:	4619      	mov	r1, r3
 802c6a0:	3101      	adds	r1, #1
 802c6a2:	428e      	cmp	r6, r1
 802c6a4:	5462      	strb	r2, [r4, r1]
 802c6a6:	dcfb      	bgt.n	802c6a0 <__sccl+0x58>
 802c6a8:	1af1      	subs	r1, r6, r3
 802c6aa:	3901      	subs	r1, #1
 802c6ac:	1c58      	adds	r0, r3, #1
 802c6ae:	42b3      	cmp	r3, r6
 802c6b0:	bfa8      	it	ge
 802c6b2:	2100      	movge	r1, #0
 802c6b4:	1843      	adds	r3, r0, r1
 802c6b6:	e7e0      	b.n	802c67a <__sccl+0x32>

0802c6b8 <strcpy>:
 802c6b8:	4603      	mov	r3, r0
 802c6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c6be:	f803 2b01 	strb.w	r2, [r3], #1
 802c6c2:	2a00      	cmp	r2, #0
 802c6c4:	d1f9      	bne.n	802c6ba <strcpy+0x2>
 802c6c6:	4770      	bx	lr

0802c6c8 <strncasecmp_l>:
 802c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c6cc:	4605      	mov	r5, r0
 802c6ce:	460e      	mov	r6, r1
 802c6d0:	461f      	mov	r7, r3
 802c6d2:	eb00 0802 	add.w	r8, r0, r2
 802c6d6:	4545      	cmp	r5, r8
 802c6d8:	d00e      	beq.n	802c6f8 <strncasecmp_l+0x30>
 802c6da:	4639      	mov	r1, r7
 802c6dc:	f815 0b01 	ldrb.w	r0, [r5], #1
 802c6e0:	f000 f88c 	bl	802c7fc <tolower_l>
 802c6e4:	4639      	mov	r1, r7
 802c6e6:	4604      	mov	r4, r0
 802c6e8:	f816 0b01 	ldrb.w	r0, [r6], #1
 802c6ec:	f000 f886 	bl	802c7fc <tolower_l>
 802c6f0:	1a24      	subs	r4, r4, r0
 802c6f2:	d102      	bne.n	802c6fa <strncasecmp_l+0x32>
 802c6f4:	2800      	cmp	r0, #0
 802c6f6:	d1ee      	bne.n	802c6d6 <strncasecmp_l+0xe>
 802c6f8:	2400      	movs	r4, #0
 802c6fa:	4620      	mov	r0, r4
 802c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c700 <_strtoul_l.constprop.0>:
 802c700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802c704:	4f36      	ldr	r7, [pc, #216]	; (802c7e0 <_strtoul_l.constprop.0+0xe0>)
 802c706:	4686      	mov	lr, r0
 802c708:	460d      	mov	r5, r1
 802c70a:	4628      	mov	r0, r5
 802c70c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c710:	5de6      	ldrb	r6, [r4, r7]
 802c712:	f016 0608 	ands.w	r6, r6, #8
 802c716:	d1f8      	bne.n	802c70a <_strtoul_l.constprop.0+0xa>
 802c718:	2c2d      	cmp	r4, #45	; 0x2d
 802c71a:	d12f      	bne.n	802c77c <_strtoul_l.constprop.0+0x7c>
 802c71c:	782c      	ldrb	r4, [r5, #0]
 802c71e:	2601      	movs	r6, #1
 802c720:	1c85      	adds	r5, r0, #2
 802c722:	2b00      	cmp	r3, #0
 802c724:	d057      	beq.n	802c7d6 <_strtoul_l.constprop.0+0xd6>
 802c726:	2b10      	cmp	r3, #16
 802c728:	d109      	bne.n	802c73e <_strtoul_l.constprop.0+0x3e>
 802c72a:	2c30      	cmp	r4, #48	; 0x30
 802c72c:	d107      	bne.n	802c73e <_strtoul_l.constprop.0+0x3e>
 802c72e:	7828      	ldrb	r0, [r5, #0]
 802c730:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802c734:	2858      	cmp	r0, #88	; 0x58
 802c736:	d149      	bne.n	802c7cc <_strtoul_l.constprop.0+0xcc>
 802c738:	786c      	ldrb	r4, [r5, #1]
 802c73a:	2310      	movs	r3, #16
 802c73c:	3502      	adds	r5, #2
 802c73e:	f04f 38ff 	mov.w	r8, #4294967295
 802c742:	2700      	movs	r7, #0
 802c744:	fbb8 f8f3 	udiv	r8, r8, r3
 802c748:	fb03 f908 	mul.w	r9, r3, r8
 802c74c:	ea6f 0909 	mvn.w	r9, r9
 802c750:	4638      	mov	r0, r7
 802c752:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802c756:	f1bc 0f09 	cmp.w	ip, #9
 802c75a:	d814      	bhi.n	802c786 <_strtoul_l.constprop.0+0x86>
 802c75c:	4664      	mov	r4, ip
 802c75e:	42a3      	cmp	r3, r4
 802c760:	dd22      	ble.n	802c7a8 <_strtoul_l.constprop.0+0xa8>
 802c762:	2f00      	cmp	r7, #0
 802c764:	db1d      	blt.n	802c7a2 <_strtoul_l.constprop.0+0xa2>
 802c766:	4580      	cmp	r8, r0
 802c768:	d31b      	bcc.n	802c7a2 <_strtoul_l.constprop.0+0xa2>
 802c76a:	d101      	bne.n	802c770 <_strtoul_l.constprop.0+0x70>
 802c76c:	45a1      	cmp	r9, r4
 802c76e:	db18      	blt.n	802c7a2 <_strtoul_l.constprop.0+0xa2>
 802c770:	fb00 4003 	mla	r0, r0, r3, r4
 802c774:	2701      	movs	r7, #1
 802c776:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c77a:	e7ea      	b.n	802c752 <_strtoul_l.constprop.0+0x52>
 802c77c:	2c2b      	cmp	r4, #43	; 0x2b
 802c77e:	bf04      	itt	eq
 802c780:	782c      	ldrbeq	r4, [r5, #0]
 802c782:	1c85      	addeq	r5, r0, #2
 802c784:	e7cd      	b.n	802c722 <_strtoul_l.constprop.0+0x22>
 802c786:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802c78a:	f1bc 0f19 	cmp.w	ip, #25
 802c78e:	d801      	bhi.n	802c794 <_strtoul_l.constprop.0+0x94>
 802c790:	3c37      	subs	r4, #55	; 0x37
 802c792:	e7e4      	b.n	802c75e <_strtoul_l.constprop.0+0x5e>
 802c794:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802c798:	f1bc 0f19 	cmp.w	ip, #25
 802c79c:	d804      	bhi.n	802c7a8 <_strtoul_l.constprop.0+0xa8>
 802c79e:	3c57      	subs	r4, #87	; 0x57
 802c7a0:	e7dd      	b.n	802c75e <_strtoul_l.constprop.0+0x5e>
 802c7a2:	f04f 37ff 	mov.w	r7, #4294967295
 802c7a6:	e7e6      	b.n	802c776 <_strtoul_l.constprop.0+0x76>
 802c7a8:	2f00      	cmp	r7, #0
 802c7aa:	da07      	bge.n	802c7bc <_strtoul_l.constprop.0+0xbc>
 802c7ac:	2322      	movs	r3, #34	; 0x22
 802c7ae:	f8ce 3000 	str.w	r3, [lr]
 802c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 802c7b6:	b932      	cbnz	r2, 802c7c6 <_strtoul_l.constprop.0+0xc6>
 802c7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c7bc:	b106      	cbz	r6, 802c7c0 <_strtoul_l.constprop.0+0xc0>
 802c7be:	4240      	negs	r0, r0
 802c7c0:	2a00      	cmp	r2, #0
 802c7c2:	d0f9      	beq.n	802c7b8 <_strtoul_l.constprop.0+0xb8>
 802c7c4:	b107      	cbz	r7, 802c7c8 <_strtoul_l.constprop.0+0xc8>
 802c7c6:	1e69      	subs	r1, r5, #1
 802c7c8:	6011      	str	r1, [r2, #0]
 802c7ca:	e7f5      	b.n	802c7b8 <_strtoul_l.constprop.0+0xb8>
 802c7cc:	2430      	movs	r4, #48	; 0x30
 802c7ce:	2b00      	cmp	r3, #0
 802c7d0:	d1b5      	bne.n	802c73e <_strtoul_l.constprop.0+0x3e>
 802c7d2:	2308      	movs	r3, #8
 802c7d4:	e7b3      	b.n	802c73e <_strtoul_l.constprop.0+0x3e>
 802c7d6:	2c30      	cmp	r4, #48	; 0x30
 802c7d8:	d0a9      	beq.n	802c72e <_strtoul_l.constprop.0+0x2e>
 802c7da:	230a      	movs	r3, #10
 802c7dc:	e7af      	b.n	802c73e <_strtoul_l.constprop.0+0x3e>
 802c7de:	bf00      	nop
 802c7e0:	08030af9 	.word	0x08030af9

0802c7e4 <_strtoul_r>:
 802c7e4:	f7ff bf8c 	b.w	802c700 <_strtoul_l.constprop.0>

0802c7e8 <strtoul>:
 802c7e8:	4613      	mov	r3, r2
 802c7ea:	460a      	mov	r2, r1
 802c7ec:	4601      	mov	r1, r0
 802c7ee:	4802      	ldr	r0, [pc, #8]	; (802c7f8 <strtoul+0x10>)
 802c7f0:	6800      	ldr	r0, [r0, #0]
 802c7f2:	f7ff bf85 	b.w	802c700 <_strtoul_l.constprop.0>
 802c7f6:	bf00      	nop
 802c7f8:	200000bc 	.word	0x200000bc

0802c7fc <tolower_l>:
 802c7fc:	4b03      	ldr	r3, [pc, #12]	; (802c80c <tolower_l+0x10>)
 802c7fe:	5cc3      	ldrb	r3, [r0, r3]
 802c800:	f003 0303 	and.w	r3, r3, #3
 802c804:	2b01      	cmp	r3, #1
 802c806:	bf08      	it	eq
 802c808:	3020      	addeq	r0, #32
 802c80a:	4770      	bx	lr
 802c80c:	08030af9 	.word	0x08030af9

0802c810 <__submore>:
 802c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c814:	460c      	mov	r4, r1
 802c816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c81c:	4299      	cmp	r1, r3
 802c81e:	d11d      	bne.n	802c85c <__submore+0x4c>
 802c820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802c824:	f7fd fb5e 	bl	8029ee4 <_malloc_r>
 802c828:	b918      	cbnz	r0, 802c832 <__submore+0x22>
 802c82a:	f04f 30ff 	mov.w	r0, #4294967295
 802c82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c836:	63a3      	str	r3, [r4, #56]	; 0x38
 802c838:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802c83c:	6360      	str	r0, [r4, #52]	; 0x34
 802c83e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802c842:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802c846:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802c84a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802c84e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802c852:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802c856:	6020      	str	r0, [r4, #0]
 802c858:	2000      	movs	r0, #0
 802c85a:	e7e8      	b.n	802c82e <__submore+0x1e>
 802c85c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802c85e:	0077      	lsls	r7, r6, #1
 802c860:	463a      	mov	r2, r7
 802c862:	f7ff fb8b 	bl	802bf7c <_realloc_r>
 802c866:	4605      	mov	r5, r0
 802c868:	2800      	cmp	r0, #0
 802c86a:	d0de      	beq.n	802c82a <__submore+0x1a>
 802c86c:	eb00 0806 	add.w	r8, r0, r6
 802c870:	4601      	mov	r1, r0
 802c872:	4632      	mov	r2, r6
 802c874:	4640      	mov	r0, r8
 802c876:	f7fd f841 	bl	80298fc <memcpy>
 802c87a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802c87e:	f8c4 8000 	str.w	r8, [r4]
 802c882:	e7e9      	b.n	802c858 <__submore+0x48>

0802c884 <__ascii_wctomb>:
 802c884:	b149      	cbz	r1, 802c89a <__ascii_wctomb+0x16>
 802c886:	2aff      	cmp	r2, #255	; 0xff
 802c888:	bf85      	ittet	hi
 802c88a:	238a      	movhi	r3, #138	; 0x8a
 802c88c:	6003      	strhi	r3, [r0, #0]
 802c88e:	700a      	strbls	r2, [r1, #0]
 802c890:	f04f 30ff 	movhi.w	r0, #4294967295
 802c894:	bf98      	it	ls
 802c896:	2001      	movls	r0, #1
 802c898:	4770      	bx	lr
 802c89a:	4608      	mov	r0, r1
 802c89c:	4770      	bx	lr
	...

0802c8a0 <__env_lock>:
 802c8a0:	4801      	ldr	r0, [pc, #4]	; (802c8a8 <__env_lock+0x8>)
 802c8a2:	f7ff bad1 	b.w	802be48 <__retarget_lock_acquire_recursive>
 802c8a6:	bf00      	nop
 802c8a8:	2003c535 	.word	0x2003c535

0802c8ac <__env_unlock>:
 802c8ac:	4801      	ldr	r0, [pc, #4]	; (802c8b4 <__env_unlock+0x8>)
 802c8ae:	f7ff bacd 	b.w	802be4c <__retarget_lock_release_recursive>
 802c8b2:	bf00      	nop
 802c8b4:	2003c535 	.word	0x2003c535

0802c8b8 <_fstat_r>:
 802c8b8:	b538      	push	{r3, r4, r5, lr}
 802c8ba:	4d07      	ldr	r5, [pc, #28]	; (802c8d8 <_fstat_r+0x20>)
 802c8bc:	2300      	movs	r3, #0
 802c8be:	4604      	mov	r4, r0
 802c8c0:	4608      	mov	r0, r1
 802c8c2:	4611      	mov	r1, r2
 802c8c4:	602b      	str	r3, [r5, #0]
 802c8c6:	f7d5 fd26 	bl	8002316 <_fstat>
 802c8ca:	1c43      	adds	r3, r0, #1
 802c8cc:	d102      	bne.n	802c8d4 <_fstat_r+0x1c>
 802c8ce:	682b      	ldr	r3, [r5, #0]
 802c8d0:	b103      	cbz	r3, 802c8d4 <_fstat_r+0x1c>
 802c8d2:	6023      	str	r3, [r4, #0]
 802c8d4:	bd38      	pop	{r3, r4, r5, pc}
 802c8d6:	bf00      	nop
 802c8d8:	2003c53c 	.word	0x2003c53c

0802c8dc <gmtime_r>:
 802c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c8e0:	e9d0 6700 	ldrd	r6, r7, [r0]
 802c8e4:	460c      	mov	r4, r1
 802c8e6:	4a4f      	ldr	r2, [pc, #316]	; (802ca24 <gmtime_r+0x148>)
 802c8e8:	2300      	movs	r3, #0
 802c8ea:	4630      	mov	r0, r6
 802c8ec:	4639      	mov	r1, r7
 802c8ee:	f7d3 fd09 	bl	8000304 <__aeabi_ldivmod>
 802c8f2:	4639      	mov	r1, r7
 802c8f4:	4605      	mov	r5, r0
 802c8f6:	4a4b      	ldr	r2, [pc, #300]	; (802ca24 <gmtime_r+0x148>)
 802c8f8:	4630      	mov	r0, r6
 802c8fa:	2300      	movs	r3, #0
 802c8fc:	f7d3 fd02 	bl	8000304 <__aeabi_ldivmod>
 802c900:	2a00      	cmp	r2, #0
 802c902:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802c906:	bfb7      	itett	lt
 802c908:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802c90c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 802c910:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 802c914:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802c918:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 802c91c:	fbb2 f1f0 	udiv	r1, r2, r0
 802c920:	fb00 2211 	mls	r2, r0, r1, r2
 802c924:	203c      	movs	r0, #60	; 0x3c
 802c926:	60a1      	str	r1, [r4, #8]
 802c928:	fbb2 f1f0 	udiv	r1, r2, r0
 802c92c:	fb00 2211 	mls	r2, r0, r1, r2
 802c930:	6061      	str	r1, [r4, #4]
 802c932:	6022      	str	r2, [r4, #0]
 802c934:	2107      	movs	r1, #7
 802c936:	1cda      	adds	r2, r3, #3
 802c938:	fb92 f1f1 	sdiv	r1, r2, r1
 802c93c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 802c940:	1a52      	subs	r2, r2, r1
 802c942:	bf48      	it	mi
 802c944:	3207      	addmi	r2, #7
 802c946:	4d38      	ldr	r5, [pc, #224]	; (802ca28 <gmtime_r+0x14c>)
 802c948:	4838      	ldr	r0, [pc, #224]	; (802ca2c <gmtime_r+0x150>)
 802c94a:	61a2      	str	r2, [r4, #24]
 802c94c:	2b00      	cmp	r3, #0
 802c94e:	bfb7      	itett	lt
 802c950:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 802c954:	fb93 f5f5 	sdivge	r5, r3, r5
 802c958:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 802c95c:	fb92 f5f5 	sdivlt	r5, r2, r5
 802c960:	fb00 3005 	mla	r0, r0, r5, r3
 802c964:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802c968:	fbb0 f2f2 	udiv	r2, r0, r2
 802c96c:	4402      	add	r2, r0
 802c96e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 802c972:	fbb0 f1f3 	udiv	r1, r0, r3
 802c976:	1a52      	subs	r2, r2, r1
 802c978:	f240 1c6d 	movw	ip, #365	; 0x16d
 802c97c:	492c      	ldr	r1, [pc, #176]	; (802ca30 <gmtime_r+0x154>)
 802c97e:	fbb0 f1f1 	udiv	r1, r0, r1
 802c982:	2764      	movs	r7, #100	; 0x64
 802c984:	1a52      	subs	r2, r2, r1
 802c986:	fbb2 f1fc 	udiv	r1, r2, ip
 802c98a:	fbb2 f3f3 	udiv	r3, r2, r3
 802c98e:	fbb1 f6f7 	udiv	r6, r1, r7
 802c992:	1af3      	subs	r3, r6, r3
 802c994:	4403      	add	r3, r0
 802c996:	fb0c 3311 	mls	r3, ip, r1, r3
 802c99a:	2299      	movs	r2, #153	; 0x99
 802c99c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 802c9a0:	f10e 0e02 	add.w	lr, lr, #2
 802c9a4:	f103 0c01 	add.w	ip, r3, #1
 802c9a8:	fbbe f0f2 	udiv	r0, lr, r2
 802c9ac:	4342      	muls	r2, r0
 802c9ae:	3202      	adds	r2, #2
 802c9b0:	f04f 0805 	mov.w	r8, #5
 802c9b4:	fbb2 f2f8 	udiv	r2, r2, r8
 802c9b8:	ebac 0c02 	sub.w	ip, ip, r2
 802c9bc:	f240 52f9 	movw	r2, #1529	; 0x5f9
 802c9c0:	4596      	cmp	lr, r2
 802c9c2:	bf94      	ite	ls
 802c9c4:	2202      	movls	r2, #2
 802c9c6:	f06f 0209 	mvnhi.w	r2, #9
 802c9ca:	4410      	add	r0, r2
 802c9cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802c9d0:	fb02 1505 	mla	r5, r2, r5, r1
 802c9d4:	2801      	cmp	r0, #1
 802c9d6:	bf98      	it	ls
 802c9d8:	3501      	addls	r5, #1
 802c9da:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802c9de:	d30d      	bcc.n	802c9fc <gmtime_r+0x120>
 802c9e0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802c9e4:	61e3      	str	r3, [r4, #28]
 802c9e6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802c9ea:	2300      	movs	r3, #0
 802c9ec:	e9c4 0504 	strd	r0, r5, [r4, #16]
 802c9f0:	f8c4 c00c 	str.w	ip, [r4, #12]
 802c9f4:	6223      	str	r3, [r4, #32]
 802c9f6:	4620      	mov	r0, r4
 802c9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9fc:	078a      	lsls	r2, r1, #30
 802c9fe:	d102      	bne.n	802ca06 <gmtime_r+0x12a>
 802ca00:	fb07 1616 	mls	r6, r7, r6, r1
 802ca04:	b95e      	cbnz	r6, 802ca1e <gmtime_r+0x142>
 802ca06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802ca0a:	fbb1 f6f2 	udiv	r6, r1, r2
 802ca0e:	fb02 1216 	mls	r2, r2, r6, r1
 802ca12:	fab2 f282 	clz	r2, r2
 802ca16:	0952      	lsrs	r2, r2, #5
 802ca18:	333b      	adds	r3, #59	; 0x3b
 802ca1a:	4413      	add	r3, r2
 802ca1c:	e7e2      	b.n	802c9e4 <gmtime_r+0x108>
 802ca1e:	2201      	movs	r2, #1
 802ca20:	e7fa      	b.n	802ca18 <gmtime_r+0x13c>
 802ca22:	bf00      	nop
 802ca24:	00015180 	.word	0x00015180
 802ca28:	00023ab1 	.word	0x00023ab1
 802ca2c:	fffdc54f 	.word	0xfffdc54f
 802ca30:	00023ab0 	.word	0x00023ab0

0802ca34 <_isatty_r>:
 802ca34:	b538      	push	{r3, r4, r5, lr}
 802ca36:	4d06      	ldr	r5, [pc, #24]	; (802ca50 <_isatty_r+0x1c>)
 802ca38:	2300      	movs	r3, #0
 802ca3a:	4604      	mov	r4, r0
 802ca3c:	4608      	mov	r0, r1
 802ca3e:	602b      	str	r3, [r5, #0]
 802ca40:	f7d5 fc79 	bl	8002336 <_isatty>
 802ca44:	1c43      	adds	r3, r0, #1
 802ca46:	d102      	bne.n	802ca4e <_isatty_r+0x1a>
 802ca48:	682b      	ldr	r3, [r5, #0]
 802ca4a:	b103      	cbz	r3, 802ca4e <_isatty_r+0x1a>
 802ca4c:	6023      	str	r3, [r4, #0]
 802ca4e:	bd38      	pop	{r3, r4, r5, pc}
 802ca50:	2003c53c 	.word	0x2003c53c

0802ca54 <_malloc_usable_size_r>:
 802ca54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ca58:	1f18      	subs	r0, r3, #4
 802ca5a:	2b00      	cmp	r3, #0
 802ca5c:	bfbc      	itt	lt
 802ca5e:	580b      	ldrlt	r3, [r1, r0]
 802ca60:	18c0      	addlt	r0, r0, r3
 802ca62:	4770      	bx	lr

0802ca64 <_init>:
 802ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca66:	bf00      	nop
 802ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ca6a:	bc08      	pop	{r3}
 802ca6c:	469e      	mov	lr, r3
 802ca6e:	4770      	bx	lr

0802ca70 <_fini>:
 802ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca72:	bf00      	nop
 802ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ca76:	bc08      	pop	{r3}
 802ca78:	469e      	mov	lr, r3
 802ca7a:	4770      	bx	lr
