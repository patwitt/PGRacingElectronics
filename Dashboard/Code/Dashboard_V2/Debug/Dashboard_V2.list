
Dashboard_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000297e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d74  080299e8  080299e8  000399e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  0802d75c  0802d75c  0003d75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000011c  080d73bc  080d73bc  000e73bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000898c8  080d74d8  080d74d8  000e74d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000030c  08160da0  08160da0  00170da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  081610ac  081610ac  00180114  2**0
                  CONTENTS
  8 .ARM          00000008  081610ac  081610ac  001710ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  081610b4  081610b4  00180114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  081610b4  081610b4  001710b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  081610cc  081610cc  001710cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000114  20000000  081610d8  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0003bea0  20000114  081611ec  00180114  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2003bfb4  081611ec  0018bfb4  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00180114  2**0
                  CONTENTS, READONLY
 16 .debug_info   000d5b81  00000000  00000000  00180142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018c57  00000000  00000000  00255cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000046a0  00000000  00000000  0026e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004010  00000000  00000000  00272fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a2b8  00000000  00000000  00276fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00054c59  00000000  00000000  002b1288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00132f47  00000000  00000000  00305ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00438e28  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00012d40  00000000  00000000  00438ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000114 	.word	0x20000114
 800021c:	00000000 	.word	0x00000000
 8000220:	080299d0 	.word	0x080299d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000118 	.word	0x20000118
 800023c:	080299d0 	.word	0x080299d0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f007 fa66 	bl	8007ac0 <HAL_TIM_PWM_Stop_DMA>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f001 fe03 	bl	8002268 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f001 f90a 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800066c:	230b      	movs	r3, #11
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f001 fe37 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f001 f8fa 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000130 	.word	0x20000130
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0x74>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d123      	bne.n	800070a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_ADC_MspInit+0x78>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_ADC_MspInit+0x7c>)
 8000706:	f003 f895 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40012000 	.word	0x40012000
 8000718:	40023800 	.word	0x40023800
 800071c:	40020800 	.word	0x40020800

08000720 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <FLASH_QSPI_Init+0x70>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <FLASH_QSPI_Init+0x74>)
 8000728:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 800072a:	4819      	ldr	r0, [pc, #100]	; (8000790 <FLASH_QSPI_Init+0x70>)
 800072c:	f005 fad6 	bl	8005cdc <HAL_QSPI_DeInit>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e028      	b.n	800078c <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 800073a:	f001 f8a7 	bl	800188c <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 800073e:	f000 f82b 	bl	8000798 <FLASH_QSPI_ResetChip>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e01f      	b.n	800078c <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fd67 	bl	8002220 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000752:	f000 f87f 	bl	8000854 <FLASH_QSPI_AutoPollingMemReady>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e015      	b.n	800078c <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000760:	f000 f8b0 	bl	80008c4 <FLASH_QSPI_WriteEnable>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 800076e:	f000 f8f3 	bl	8000958 <FLASH_QSPI_Configuration>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e007      	b.n	800078c <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 800077c:	f000 f962 	bl	8000a44 <FLASH_QSPI_EnableMemoryMappedMode>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200003a0 	.word	0x200003a0
 8000794:	a0001000 	.word	0xa0001000

08000798 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	; 0x40
 800079c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 80007a2:	2366      	movs	r3, #102	; 0x66
 80007a4:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80007d8:	4619      	mov	r1, r3
 80007da:	481d      	ldr	r0, [pc, #116]	; (8000850 <FLASH_QSPI_ResetChip+0xb8>)
 80007dc:	f005 faa2 	bl	8005d24 <HAL_QSPI_Command>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e02e      	b.n	8000848 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007ee:	e003      	b.n	80007f8 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 80007f0:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80007f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f4:	3301      	adds	r3, #1
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fa:	2b2e      	cmp	r3, #46	; 0x2e
 80007fc:	d9f8      	bls.n	80007f0 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 80007fe:	2399      	movs	r3, #153	; 0x99
 8000800:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000806:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	f241 3288 	movw	r2, #5000	; 0x1388
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <FLASH_QSPI_ResetChip+0xb8>)
 8000838:	f005 fa74 	bl	8005d24 <HAL_QSPI_Command>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3740      	adds	r7, #64	; 0x40
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200003a0 	.word	0x200003a0

08000854 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800085a:	2305      	movs	r3, #5
 800085c:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800085e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800086c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800087a:	2300      	movs	r3, #0
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800087e:	2300      	movs	r3, #0
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000892:	2310      	movs	r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800089c:	463a      	mov	r2, r7
 800089e:	f107 0118 	add.w	r1, r7, #24
 80008a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 80008a8:	f005 fbc9 	bl	800603e <HAL_QSPI_AutoPolling>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3750      	adds	r7, #80	; 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200003a0 	.word	0x200003a0

080008c4 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80008ca:	2306      	movs	r3, #6
 80008cc:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <FLASH_QSPI_WriteEnable+0x90>)
 80008fc:	f005 fa12 	bl	8005d24 <HAL_QSPI_Command>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e01f      	b.n	800094a <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 800090a:	2302      	movs	r3, #2
 800090c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 800090e:	2302      	movs	r3, #2
 8000910:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800091a:	2310      	movs	r3, #16
 800091c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000924:	2305      	movs	r3, #5
 8000926:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800092e:	463a      	mov	r2, r7
 8000930:	f107 0118 	add.w	r1, r7, #24
 8000934:	f241 3388 	movw	r3, #5000	; 0x1388
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <FLASH_QSPI_WriteEnable+0x90>)
 800093a:	f005 fb80 	bl	800603e <HAL_QSPI_AutoPolling>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200003a0 	.word	0x200003a0

08000958 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	; 0x40
 800095c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 800095e:	2335      	movs	r3, #53	; 0x35
 8000960:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000966:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000982:	2300      	movs	r3, #0
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000986:	2301      	movs	r3, #1
 8000988:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000992:	4619      	mov	r1, r3
 8000994:	482a      	ldr	r0, [pc, #168]	; (8000a40 <FLASH_QSPI_Configuration+0xe8>)
 8000996:	f005 f9c5 	bl	8005d24 <HAL_QSPI_Command>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e049      	b.n	8000a38 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80009aa:	4619      	mov	r1, r3
 80009ac:	4824      	ldr	r0, [pc, #144]	; (8000a40 <FLASH_QSPI_Configuration+0xe8>)
 80009ae:	f005 faa9 	bl	8005f04 <HAL_QSPI_Receive>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e03d      	b.n	8000a38 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 80009bc:	f7ff ff82 	bl	80008c4 <FLASH_QSPI_WriteEnable>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e036      	b.n	8000a38 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 80009d4:	2331      	movs	r3, #49	; 0x31
 80009d6:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009dc:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80009f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <FLASH_QSPI_Configuration+0xe8>)
 8000a0c:	f005 f98a 	bl	8005d24 <HAL_QSPI_Command>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <FLASH_QSPI_Configuration+0xe8>)
 8000a24:	f005 f9dc 	bl	8005de0 <HAL_QSPI_Transmit>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000a2e:	f000 ff27 	bl	8001880 <Error_Handler>
		return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200003a0 	.word	0x200003a0

08000a44 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b090      	sub	sp, #64	; 0x40
 8000a48:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000a4a:	23eb      	movs	r3, #235	; 0xeb
 8000a4c:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000a5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000a7a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000a88:	2304      	movs	r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000a90:	463a      	mov	r2, r7
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000a9a:	f005 fb47 	bl	800612c <HAL_QSPI_MemoryMapped>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3740      	adds	r7, #64	; 0x40
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200003a0 	.word	0x200003a0

08000ab8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <MX_CAN1_Init+0xa4>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000ac6:	2209      	movs	r2, #9
 8000ac8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ad6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ade:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000b0e:	f001 fe3f 	bl	8002790 <HAL_CAN_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000b18:	f000 feb2 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8000b20:	2308      	movs	r3, #8
 8000b22:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8000b40:	230a      	movs	r3, #10
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_CAN1_Init+0xa0>)
 8000b4a:	f001 ff1d 	bl	8002988 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

  /* USER CODE END CAN1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000178 	.word	0x20000178
 8000b5c:	40006400 	.word	0x40006400

08000b60 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <MX_CAN2_Init+0xa4>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b6e:	2209      	movs	r2, #9
 8000b70:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b7e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b86:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b8e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000bb6:	f001 fdeb 	bl	8002790 <HAL_CAN_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000bc0:	f000 fe5e 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8000bc8:	2312      	movs	r3, #18
 8000bca:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8000be8:	230a      	movs	r3, #10
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_CAN2_Init+0xa0>)
 8000bf2:	f001 fec9 	bl	8002988 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

  /* USER CODE END CAN2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001a0 	.word	0x200001a0
 8000c04:	40006800 	.word	0x40006800

08000c08 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <HAL_CAN_MspInit+0x118>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d132      	bne.n	8000c90 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000c32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10b      	bne.n	8000c54 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c7e:	2309      	movs	r3, #9
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4828      	ldr	r0, [pc, #160]	; (8000d2c <HAL_CAN_MspInit+0x124>)
 8000c8a:	f002 fdd3 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000c8e:	e042      	b.n	8000d16 <HAL_CAN_MspInit+0x10e>
  else if(canHandle->Instance==CAN2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <HAL_CAN_MspInit+0x128>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d13d      	bne.n	8000d16 <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000cba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_CAN_MspInit+0x11c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10b      	bne.n	8000cdc <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_CAN_MspInit+0x120>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cf4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d06:	2309      	movs	r3, #9
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <HAL_CAN_MspInit+0x12c>)
 8000d12:	f002 fd8f 	bl	8003834 <HAL_GPIO_Init>
}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40006400 	.word	0x40006400
 8000d24:	200001c8 	.word	0x200001c8
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40006800 	.word	0x40006800
 8000d34:	40020400 	.word	0x40020400

08000d38 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <MX_CRC_Init+0x40>)
 8000d40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_CRC_Init+0x3c>)
 8000d62:	f001 ffdf 	bl	8002d24 <HAL_CRC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d6c:	f000 fd88 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200001cc 	.word	0x200001cc
 8000d78:	40023000 	.word	0x40023000

08000d7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_CRC_MspInit+0x38>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10b      	bne.n	8000da6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023000 	.word	0x40023000
 8000db8:	40023800 	.word	0x40023800

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	200b      	movs	r0, #11
 8000de0:	f001 ff76 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000de4:	200b      	movs	r0, #11
 8000de6:	f001 ff8f 	bl	8002d08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	200f      	movs	r0, #15
 8000df0:	f001 ff6e 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000df4:	200f      	movs	r0, #15
 8000df6:	f001 ff87 	bl	8002d08 <HAL_NVIC_EnableIRQ>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e0e:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <MX_DMA2D_Init+0x6c>)
 8000e10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e4a:	f002 fbfb 	bl	8003644 <HAL_DMA2D_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000e54:	f000 fd14 	bl	8001880 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_DMA2D_Init+0x68>)
 8000e5c:	f002 fc4c 	bl	80036f8 <HAL_DMA2D_ConfigLayer>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000e66:	f000 fd0b 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001f0 	.word	0x200001f0
 8000e74:	4002b000 	.word	0x4002b000

08000e78 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_DMA2D_MspInit+0x38>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_DMA2D_MspInit+0x3c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_DMA2D_MspInit+0x3c>)
 8000e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_DMA2D_MspInit+0x3c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	4002b000 	.word	0x4002b000
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <MX_FMC_Init+0x148>)
 8000ed4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000edc:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ee8:	4b44      	ldr	r3, [pc, #272]	; (8000ffc <MX_FMC_Init+0x144>)
 8000eea:	2210      	movs	r2, #16
 8000eec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <MX_FMC_Init+0x144>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <MX_FMC_Init+0x144>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f02:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f08:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000f24:	2306      	movs	r3, #6
 8000f26:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4830      	ldr	r0, [pc, #192]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f3a:	f006 fbff 	bl	800773c <HAL_SDRAM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f44:	f000 fc9c 	bl	8001880 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f54:	2210      	movs	r2, #16
 8000f56:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	4926      	ldr	r1, [pc, #152]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f6a:	4824      	ldr	r0, [pc, #144]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f6c:	f006 fc1a 	bl	80077a4 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f001 f955 	bl	8002220 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f7e:	2210      	movs	r2, #16
 8000f80:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f92:	491c      	ldr	r1, [pc, #112]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <MX_FMC_Init+0x144>)
 8000f96:	f006 fc05 	bl	80077a4 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_FMC_Init+0x14c>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb6:	4913      	ldr	r1, [pc, #76]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <MX_FMC_Init+0x144>)
 8000fba:	f006 fbf3 	bl	80077a4 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8000fbe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000fc2:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fcc:	2210      	movs	r2, #16
 8000fce:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fda:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	4908      	ldr	r1, [pc, #32]	; (8001004 <MX_FMC_Init+0x14c>)
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_FMC_Init+0x144>)
 8000fe4:	f006 fbde 	bl	80077a4 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8000fe8:	f240 617c 	movw	r1, #1660	; 0x67c
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <MX_FMC_Init+0x144>)
 8000fee:	f006 fc0e 	bl	800780e <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000248 	.word	0x20000248
 8001000:	a0000140 	.word	0xa0000140
 8001004:	20000280 	.word	0x20000280

08001008 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_FMC_MspInit+0x100>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d16d      	bne.n	8001100 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_FMC_MspInit+0x100>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <HAL_FMC_MspInit+0x104>)
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_FMC_MspInit+0x104>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6393      	str	r3, [r2, #56]	; 0x38
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_FMC_MspInit+0x104>)
 8001038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001042:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001046:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001054:	230c      	movs	r3, #12
 8001056:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <HAL_FMC_MspInit+0x108>)
 800105e:	f002 fbe9 	bl	8003834 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001062:	230c      	movs	r3, #12
 8001064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001072:	230c      	movs	r3, #12
 8001074:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4826      	ldr	r0, [pc, #152]	; (8001114 <HAL_FMC_MspInit+0x10c>)
 800107c:	f002 fbda 	bl	8003834 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001090:	230c      	movs	r3, #12
 8001092:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	481f      	ldr	r0, [pc, #124]	; (8001118 <HAL_FMC_MspInit+0x110>)
 800109a:	f002 fbcb 	bl	8003834 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800109e:	f248 1311 	movw	r3, #33041	; 0x8111
 80010a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b0:	230c      	movs	r3, #12
 80010b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <HAL_FMC_MspInit+0x114>)
 80010ba:	f002 fbbb 	bl	8003834 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80010be:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010d0:	230c      	movs	r3, #12
 80010d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_FMC_MspInit+0x118>)
 80010da:	f002 fbab 	bl	8003834 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010de:	f24c 7303 	movw	r3, #50947	; 0xc703
 80010e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f0:	230c      	movs	r3, #12
 80010f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <HAL_FMC_MspInit+0x11c>)
 80010fa:	f002 fb9b 	bl	8003834 <HAL_GPIO_Init>
 80010fe:	e000      	b.n	8001102 <HAL_FMC_MspInit+0xfa>
    return;
 8001100:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000027c 	.word	0x2000027c
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020000 	.word	0x40020000
 800111c:	40021800 	.word	0x40021800
 8001120:	40021000 	.word	0x40021000
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001130:	f7ff ff6a 	bl	8001008 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTask */
  hardwareTaskHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTask_attributes);
 8001140:	4a10      	ldr	r2, [pc, #64]	; (8001184 <MX_FREERTOS_Init+0x48>)
 8001142:	2100      	movs	r1, #0
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <MX_FREERTOS_Init+0x4c>)
 8001146:	f007 fe97 	bl	8008e78 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_FREERTOS_Init+0x50>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of RPMLed */
  RPMLedHandle = osThreadNew(startRPMLed, NULL, &RPMLed_attributes);
 8001150:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_FREERTOS_Init+0x54>)
 8001152:	2100      	movs	r1, #0
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <MX_FREERTOS_Init+0x58>)
 8001156:	f007 fe8f 	bl	8008e78 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <MX_FREERTOS_Init+0x5c>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(startTouchGFXTask, NULL, &touchGFXTask_attributes);
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <MX_FREERTOS_Init+0x60>)
 8001162:	2100      	movs	r1, #0
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_FREERTOS_Init+0x64>)
 8001166:	f007 fe87 	bl	8008e78 <osThreadNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <MX_FREERTOS_Init+0x68>)
 800116e:	6013      	str	r3, [r2, #0]

  /* creation of statusLedTask */
  statusLedTaskHandle = osThreadNew(startStatusLedTask, NULL, &statusLedTask_attributes);
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <MX_FREERTOS_Init+0x6c>)
 8001172:	2100      	movs	r1, #0
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_FREERTOS_Init+0x70>)
 8001176:	f007 fe7f 	bl	8008e78 <osThreadNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <MX_FREERTOS_Init+0x74>)
 800117e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0802bdbc 	.word	0x0802bdbc
 8001188:	080011b5 	.word	0x080011b5
 800118c:	20000290 	.word	0x20000290
 8001190:	0802bde0 	.word	0x0802bde0
 8001194:	080011c5 	.word	0x080011c5
 8001198:	20000294 	.word	0x20000294
 800119c:	0802be04 	.word	0x0802be04
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	20000298 	.word	0x20000298
 80011a8:	0802be28 	.word	0x0802be28
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	2000029c 	.word	0x2000029c

080011b4 <StartHardwareTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f007 ff01 	bl	8008fc4 <osDelay>
 80011c2:	e7fb      	b.n	80011bc <StartHardwareTask+0x8>

080011c4 <startRPMLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRPMLed */
void startRPMLed(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRPMLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f007 fef9 	bl	8008fc4 <osDelay>
 80011d2:	e7fb      	b.n	80011cc <startRPMLed+0x8>

080011d4 <startTouchGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchGFXTask */
void startTouchGFXTask(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchGFXTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f007 fef1 	bl	8008fc4 <osDelay>
 80011e2:	e7fb      	b.n	80011dc <startTouchGFXTask+0x8>

080011e4 <startStatusLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startStatusLedTask */
void startStatusLedTask(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStatusLedTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f007 fee9 	bl	8008fc4 <osDelay>
 80011f2:	e7fb      	b.n	80011ec <startStatusLedTask+0x8>

080011f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <MX_GPIO_Init+0xd4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0xd4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_GPIO_Init+0xd4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_GPIO_Init+0xd4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_GPIO_Init+0xd4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_GPIO_Init+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <MX_GPIO_Init+0xd4>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_GPIO_Init+0xd4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

}
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_JPEG_Init+0x20>)
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <MX_JPEG_Init+0x24>)
 80012d4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_JPEG_Init+0x20>)
 80012d8:	f002 fd64 	bl	8003da4 <HAL_JPEG_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80012e2:	f000 facd 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002a0 	.word	0x200002a0
 80012f0:	50051000 	.word	0x50051000

080012f4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_JPEG_MspInit+0x38>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10b      	bne.n	800131e <HAL_JPEG_MspInit+0x2a>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_JPEG_MspInit+0x3c>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_JPEG_MspInit+0x3c>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6353      	str	r3, [r2, #52]	; 0x34
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_JPEG_MspInit+0x3c>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	50051000 	.word	0x50051000
 8001330:	40023800 	.word	0x40023800

08001334 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2234      	movs	r2, #52	; 0x34
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f027 fb0d 	bl	8028960 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001348:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <MX_LTDC_Init+0x100>)
 800134a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <MX_LTDC_Init+0xfc>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <MX_LTDC_Init+0xfc>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001366:	2203      	movs	r2, #3
 8001368:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <MX_LTDC_Init+0xfc>)
 800136c:	2227      	movs	r2, #39	; 0x27
 800136e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001372:	220b      	movs	r2, #11
 8001374:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001378:	222f      	movs	r2, #47	; 0x2f
 800137a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <MX_LTDC_Init+0xfc>)
 800137e:	f240 322b 	movw	r2, #811	; 0x32b
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001386:	f240 220f 	movw	r2, #527	; 0x20f
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_LTDC_Init+0xfc>)
 800138e:	f240 3233 	movw	r2, #819	; 0x333
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_LTDC_Init+0xfc>)
 8001396:	f240 2217 	movw	r2, #535	; 0x217
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_LTDC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_LTDC_Init+0xfc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_LTDC_Init+0xfc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <MX_LTDC_Init+0xfc>)
 80013b6:	f004 f82d 	bl	8005414 <HAL_LTDC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fa5e 	bl	8001880 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80013c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80013d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013dc:	23ff      	movs	r3, #255	; 0xff
 80013de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013ea:	2305      	movs	r3, #5
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013ee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80013f4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80013fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_LTDC_Init+0xfc>)
 800141a:	f004 f983 	bl	8005724 <HAL_LTDC_ConfigLayer>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001424:	f000 fa2c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002f8 	.word	0x200002f8
 8001434:	40016800 	.word	0x40016800

08001438 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b4      	sub	sp, #208	; 0xd0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	2290      	movs	r2, #144	; 0x90
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f027 fa81 	bl	8028960 <memset>
  if(ltdcHandle->Instance==LTDC)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4aa6      	ldr	r2, [pc, #664]	; (80016fc <HAL_LTDC_MspInit+0x2c4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	f040 8145 	bne.w	80016f4 <HAL_LTDC_MspInit+0x2bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800146a:	2308      	movs	r3, #8
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 800146e:	f240 1317 	movw	r3, #279	; 0x117
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001474:	2303      	movs	r3, #3
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001478:	2302      	movs	r3, #2
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800147c:	2300      	movs	r3, #0
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fd2c 	bl	8006eec <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800149a:	f000 f9f1 	bl	8001880 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800149e:	4b98      	ldr	r3, [pc, #608]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a97      	ldr	r2, [pc, #604]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b95      	ldr	r3, [pc, #596]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a91      	ldr	r2, [pc, #580]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a8b      	ldr	r2, [pc, #556]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b89      	ldr	r3, [pc, #548]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b86      	ldr	r3, [pc, #536]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a85      	ldr	r2, [pc, #532]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b83      	ldr	r3, [pc, #524]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b80      	ldr	r3, [pc, #512]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a7f      	ldr	r2, [pc, #508]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a79      	ldr	r2, [pc, #484]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b77      	ldr	r3, [pc, #476]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800152e:	4b74      	ldr	r3, [pc, #464]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a73      	ldr	r2, [pc, #460]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b71      	ldr	r3, [pc, #452]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a6d      	ldr	r2, [pc, #436]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b6b      	ldr	r3, [pc, #428]	; (8001700 <HAL_LTDC_MspInit+0x2c8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800155e:	2370      	movs	r3, #112	; 0x70
 8001560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001576:	230e      	movs	r3, #14
 8001578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001580:	4619      	mov	r1, r3
 8001582:	4860      	ldr	r0, [pc, #384]	; (8001704 <HAL_LTDC_MspInit+0x2cc>)
 8001584:	f002 f956 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a2:	230e      	movs	r3, #14
 80015a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ac:	4619      	mov	r1, r3
 80015ae:	4856      	ldr	r0, [pc, #344]	; (8001708 <HAL_LTDC_MspInit+0x2d0>)
 80015b0:	f002 f940 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80015b4:	f240 23c1 	movw	r3, #705	; 0x2c1
 80015b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ce:	230e      	movs	r3, #14
 80015d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015d8:	4619      	mov	r1, r3
 80015da:	484c      	ldr	r0, [pc, #304]	; (800170c <HAL_LTDC_MspInit+0x2d4>)
 80015dc:	f002 f92a 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80015e0:	f240 437e 	movw	r3, #1150	; 0x47e
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fa:	230e      	movs	r3, #14
 80015fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001604:	4619      	mov	r1, r3
 8001606:	4842      	ldr	r0, [pc, #264]	; (8001710 <HAL_LTDC_MspInit+0x2d8>)
 8001608:	f002 f914 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800160c:	2303      	movs	r3, #3
 800160e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001624:	2309      	movs	r3, #9
 8001626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800162e:	4619      	mov	r1, r3
 8001630:	4838      	ldr	r0, [pc, #224]	; (8001714 <HAL_LTDC_MspInit+0x2dc>)
 8001632:	f002 f8ff 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001636:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800163a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001650:	230e      	movs	r3, #14
 8001652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800165a:	4619      	mov	r1, r3
 800165c:	482d      	ldr	r0, [pc, #180]	; (8001714 <HAL_LTDC_MspInit+0x2dc>)
 800165e:	f002 f8e9 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001662:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8001666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167c:	230e      	movs	r3, #14
 800167e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001686:	4619      	mov	r1, r3
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <HAL_LTDC_MspInit+0x2e0>)
 800168a:	f002 f8d3 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800168e:	2308      	movs	r3, #8
 8001690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a6:	230e      	movs	r3, #14
 80016a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016b0:	4619      	mov	r1, r3
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <HAL_LTDC_MspInit+0x2e4>)
 80016b4:	f002 f8be 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016d2:	2309      	movs	r3, #9
 80016d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016dc:	4619      	mov	r1, r3
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <HAL_LTDC_MspInit+0x2e0>)
 80016e0:	f002 f8a8 	bl	8003834 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2105      	movs	r1, #5
 80016e8:	2058      	movs	r0, #88	; 0x58
 80016ea:	f001 faf1 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016ee:	2058      	movs	r0, #88	; 0x58
 80016f0:	f001 fb0a 	bl	8002d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	37d0      	adds	r7, #208	; 0xd0
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40016800 	.word	0x40016800
 8001700:	40023800 	.word	0x40023800
 8001704:	40021000 	.word	0x40021000
 8001708:	40021400 	.word	0x40021400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40021800 	.word	0x40021800
 800171c:	40020c00 	.word	0x40020c00

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001724:	f000 fd4f 	bl	80021c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001728:	f000 f828 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172c:	f7ff fd62 	bl	80011f4 <MX_GPIO_Init>
  MX_CRC_Init();
 8001730:	f7ff fb02 	bl	8000d38 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001734:	f7ff fb68 	bl	8000e08 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001738:	f7ff fdfc 	bl	8001334 <MX_LTDC_Init>
  MX_ADC1_Init();
 800173c:	f7fe ff5e 	bl	80005fc <MX_ADC1_Init>
  MX_CAN1_Init();
 8001740:	f7ff f9ba 	bl	8000ab8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001744:	f7ff fa0c 	bl	8000b60 <MX_CAN2_Init>
  MX_FMC_Init();
 8001748:	f7ff fbb6 	bl	8000eb8 <MX_FMC_Init>
  MX_JPEG_Init();
 800174c:	f7ff fdbe 	bl	80012cc <MX_JPEG_Init>
  MX_QUADSPI_Init();
 8001750:	f000 f89c 	bl	800188c <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8001754:	f000 fb24 	bl	8001da0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001758:	f000 fb98 	bl	8001e8c <MX_TIM4_Init>
  MX_DMA_Init();
 800175c:	f7ff fb2e 	bl	8000dbc <MX_DMA_Init>
  MX_TouchGFX_Init();
 8001760:	f00b fa1b 	bl	800cb9a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001764:	f00b fa12 	bl	800cb8c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001768:	f7fe ffda 	bl	8000720 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800176c:	f007 fb1a 	bl	8008da4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001770:	f7ff fce4 	bl	800113c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001774:	f007 fb4a 	bl	8008e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001778:	e7fe      	b.n	8001778 <main+0x58>
	...

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2234      	movs	r2, #52	; 0x34
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f027 f8e8 	bl	8028960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <SystemClock_Config+0xd8>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <SystemClock_Config+0xd8>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <SystemClock_Config+0xd8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <SystemClock_Config+0xdc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a26      	ldr	r2, [pc, #152]	; (8001858 <SystemClock_Config+0xdc>)
 80017be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <SystemClock_Config+0xdc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017e4:	2319      	movs	r3, #25
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80017e8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fec2 	bl	8006588 <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800180a:	f000 f839 	bl	8001880 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800180e:	f004 f999 	bl	8005b44 <HAL_PWREx_EnableOverDrive>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001818:	f000 f832 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181c:	230f      	movs	r3, #15
 800181e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001820:	2302      	movs	r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001828:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	2107      	movs	r1, #7
 800183a:	4618      	mov	r0, r3
 800183c:	f005 f952 	bl	8006ae4 <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001846:	f000 f81b 	bl	8001880 <Error_Handler>
  }
}
 800184a:	bf00      	nop
 800184c:	3750      	adds	r7, #80	; 0x50
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186e:	f000 fcb7 	bl	80021e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40001000 	.word	0x40001000

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_QUADSPI_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_QUADSPI_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_QUADSPI_Init+0x50>)
 8001898:	2203      	movs	r2, #3
 800189a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_QUADSPI_Init+0x50>)
 800189e:	2201      	movs	r2, #1
 80018a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018a4:	2210      	movs	r2, #16
 80018a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018aa:	2217      	movs	r2, #23
 80018ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018b0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018b4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_QUADSPI_Init+0x50>)
 80018ca:	f004 f98b 	bl	8005be4 <HAL_QSPI_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f7ff ffd4 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200003a0 	.word	0x200003a0
 80018e0:	a0001000 	.word	0xa0001000

080018e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_QSPI_MspInit+0xf4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d164      	bne.n	80019d0 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	4a34      	ldr	r2, [pc, #208]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6393      	str	r3, [r2, #56]	; 0x38
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a28      	ldr	r2, [pc, #160]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_QSPI_MspInit+0xf8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800195e:	2309      	movs	r3, #9
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	481d      	ldr	r0, [pc, #116]	; (80019e0 <HAL_QSPI_MspInit+0xfc>)
 800196a:	f001 ff63 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800196e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001980:	230a      	movs	r3, #10
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4815      	ldr	r0, [pc, #84]	; (80019e0 <HAL_QSPI_MspInit+0xfc>)
 800198c:	f001 ff52 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001990:	2304      	movs	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019a0:	2309      	movs	r3, #9
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <HAL_QSPI_MspInit+0x100>)
 80019ac:	f001 ff42 	bl	8003834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019c0:	230a      	movs	r3, #10
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <HAL_QSPI_MspInit+0x100>)
 80019cc:	f001 ff32 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	a0001000 	.word	0xa0001000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40021400 	.word	0x40021400
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_QSPI_MspDeInit+0x38>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10e      	bne.n	8001a18 <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_QSPI_MspDeInit+0x3c>)
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_QSPI_MspDeInit+0x3c>)
 8001a00:	f023 0302 	bic.w	r3, r3, #2
 8001a04:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001a06:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <HAL_QSPI_MspDeInit+0x40>)
 8001a0c:	f002 f8be 	bl	8003b8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8001a10:	2144      	movs	r1, #68	; 0x44
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <HAL_QSPI_MspDeInit+0x44>)
 8001a14:	f002 f8ba 	bl	8003b8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	a0001000 	.word	0xa0001000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	210f      	movs	r1, #15
 8001a6a:	f06f 0001 	mvn.w	r0, #1
 8001a6e:	f001 f92f 	bl	8002cd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	; 0x38
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a90:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_InitTick+0xe0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_InitTick+0xe0>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_InitTick+0xe0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa8:	f107 0210 	add.w	r2, r7, #16
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 f9e8 	bl	8006e88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ac2:	f005 f9cd 	bl	8006e60 <HAL_RCC_GetPCLK1Freq>
 8001ac6:	6378      	str	r0, [r7, #52]	; 0x34
 8001ac8:	e004      	b.n	8001ad4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001aca:	f005 f9c9 	bl	8006e60 <HAL_RCC_GetPCLK1Freq>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_InitTick+0xe4>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	0c9b      	lsrs	r3, r3, #18
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_InitTick+0xe8>)
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_InitTick+0xec>)
 8001ae6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_InitTick+0xe8>)
 8001aea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_InitTick+0xe8>)
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_InitTick+0xe8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_InitTick+0xe8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_InitTick+0xe8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <HAL_InitTick+0xe8>)
 8001b0a:	f005 fea8 	bl	800785e <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11b      	bne.n	8001b54 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b1c:	4812      	ldr	r0, [pc, #72]	; (8001b68 <HAL_InitTick+0xe8>)
 8001b1e:	f005 fef5 	bl	800790c <HAL_TIM_Base_Start_IT>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d111      	bne.n	8001b54 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b30:	2036      	movs	r0, #54	; 0x36
 8001b32:	f001 f8e9 	bl	8002d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d808      	bhi.n	8001b4e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	2036      	movs	r0, #54	; 0x36
 8001b42:	f001 f8c5 	bl	8002cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_InitTick+0xf0>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e002      	b.n	8001b54 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3738      	adds	r7, #56	; 0x38
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	431bde83 	.word	0x431bde83
 8001b68:	200003ec 	.word	0x200003ec
 8001b6c:	40001000 	.word	0x40001000
 8001b70:	20000008 	.word	0x20000008

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ba6:	f001 fad7 	bl	8003158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000534 	.word	0x20000534

08001bb4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Stream4_IRQHandler+0x10>)
 8001bba:	f001 facd 	bl	8003158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200004d4 	.word	0x200004d4

08001bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM6_DAC_IRQHandler+0x10>)
 8001bce:	f006 f859 	bl	8007c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200003ec 	.word	0x200003ec

08001bdc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <LTDC_IRQHandler+0x10>)
 8001be2:	f003 fce7 	bl	80055b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200002f8 	.word	0x200002f8

08001bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_kill>:

int _kill(int pid, int sig)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c0a:	f026 fe4f 	bl	80288ac <__errno>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2216      	movs	r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
	return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_exit>:

void _exit (int status)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffe7 	bl	8001c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c32:	e7fe      	b.n	8001c32 <_exit+0x12>

08001c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e00a      	b.n	8001c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c46:	f3af 8000 	nop.w
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf0      	blt.n	8001c46 <_read+0x12>
	}

return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf1      	blt.n	8001c80 <_write+0x12>
	}
	return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:

int _close(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_isatty>:

int _isatty(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f026 fdb4 	bl	80288ac <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20080000 	.word	0x20080000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20000438 	.word	0x20000438
 8001d78:	2003bfb8 	.word	0x2003bfb8

08001d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <MX_TIM3_Init+0xe8>)
 8001dd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001de6:	2286      	movs	r2, #134	; 0x86
 8001de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df6:	4823      	ldr	r0, [pc, #140]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001df8:	f005 fd31 	bl	800785e <HAL_TIM_Base_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e02:	f7ff fd3d 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e10:	4619      	mov	r1, r3
 8001e12:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001e14:	f006 f96a 	bl	80080ec <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e1e:	f7ff fd2f 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001e24:	f005 fdea 	bl	80079fc <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e2e:	f7ff fd27 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001e42:	f006 fdf9 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e4c:	f7ff fd18 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e50:	2360      	movs	r3, #96	; 0x60
 8001e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001e68:	f006 f82c 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e72:	f7ff fd05 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001e78:	f000 f91e 	bl	80020b8 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000043c 	.word	0x2000043c
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <MX_TIM4_Init+0xe8>)
 8001ec2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ed2:	22d7      	movs	r2, #215	; 0xd7
 8001ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ee2:	4823      	ldr	r0, [pc, #140]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001ee4:	f005 fcbb 	bl	800785e <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001eee:	f7ff fcc7 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efc:	4619      	mov	r1, r3
 8001efe:	481c      	ldr	r0, [pc, #112]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001f00:	f006 f8f4 	bl	80080ec <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f0a:	f7ff fcb9 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f0e:	4818      	ldr	r0, [pc, #96]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001f10:	f005 fd74 	bl	80079fc <HAL_TIM_PWM_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f1a:	f7ff fcb1 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001f2e:	f006 fd83 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f38:	f7ff fca2 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3c:	2360      	movs	r3, #96	; 0x60
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001f54:	f005 ffb6 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f5e:	f7ff fc8f 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f62:	4803      	ldr	r0, [pc, #12]	; (8001f70 <MX_TIM4_Init+0xe4>)
 8001f64:	f000 f8a8 	bl	80020b8 <HAL_TIM_MspPostInit>

}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	; 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000488 	.word	0x20000488
 8001f74:	40000800 	.word	0x40000800

08001f78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_TIM_Base_MspInit+0x124>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d142      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a44      	ldr	r2, [pc, #272]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fa4:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_TIM_Base_MspInit+0x130>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001faa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001fae:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001fe6:	482f      	ldr	r0, [pc, #188]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001fe8:	f000 ff86 	bl	8002ef8 <HAL_DMA_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8001ff2:	f7ff fc45 	bl	8001880 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <HAL_TIM_Base_MspInit+0x12c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800200e:	e040      	b.n	8002092 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_TIM_Base_MspInit+0x134>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d13b      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_TIM_Base_MspInit+0x128>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_TIM_Base_MspInit+0x13c>)
 8002036:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800203a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800203e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800204e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002052:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800205e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002062:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002076:	480e      	ldr	r0, [pc, #56]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 8002078:	f000 ff3e 	bl	8002ef8 <HAL_DMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 8002082:	f7ff fbfd 	bl	8001880 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
 800208c:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_TIM_Base_MspInit+0x138>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40000400 	.word	0x40000400
 80020a0:	40023800 	.word	0x40023800
 80020a4:	200004d4 	.word	0x200004d4
 80020a8:	40026070 	.word	0x40026070
 80020ac:	40000800 	.word	0x40000800
 80020b0:	20000534 	.word	0x20000534
 80020b4:	40026010 	.word	0x40026010

080020b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d11c      	bne.n	8002114 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f2:	2310      	movs	r3, #16
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002102:	2302      	movs	r3, #2
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4816      	ldr	r0, [pc, #88]	; (8002168 <HAL_TIM_MspPostInit+0xb0>)
 800210e:	f001 fb91 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002112:	e021      	b.n	8002158 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_TIM_MspPostInit+0xb4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d11c      	bne.n	8002158 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002148:	2302      	movs	r3, #2
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <HAL_TIM_MspPostInit+0xb8>)
 8002154:	f001 fb6e 	bl	8003834 <HAL_GPIO_Init>
}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40000400 	.word	0x40000400
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400
 800216c:	40000800 	.word	0x40000800
 8002170:	40020c00 	.word	0x40020c00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002190:	4c0b      	ldr	r4, [pc, #44]	; (80021c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219e:	f7ff fded 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f026 fb9b 	bl	80288dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fabb 	bl	8001720 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80021b8:	081610d8 	.word	0x081610d8
  ldr r2, =_sbss
 80021bc:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80021c0:	2003bfb4 	.word	0x2003bfb4

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>

080021c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ca:	2003      	movs	r0, #3
 80021cc:	f000 fd75 	bl	8002cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d0:	200f      	movs	r0, #15
 80021d2:	f7ff fc55 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d6:	f7ff fc2b 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000000c 	.word	0x2000000c
 8002204:	20000594 	.word	0x20000594

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000594 	.word	0x20000594

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000000c 	.word	0x2000000c

08002268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e031      	b.n	80022e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fa0a 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_ADC_Init+0x84>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f970 	bl	800259c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	ffffeefd 	.word	0xffffeefd

080022f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1c>
 8002308:	2302      	movs	r3, #2
 800230a:	e136      	b.n	800257a <HAL_ADC_ConfigChannel+0x28a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b09      	cmp	r3, #9
 800231a:	d93a      	bls.n	8002392 <HAL_ADC_ConfigChannel+0xa2>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002324:	d035      	beq.n	8002392 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	3b1e      	subs	r3, #30
 800233c:	2207      	movs	r2, #7
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a8d      	ldr	r2, [pc, #564]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68d9      	ldr	r1, [r3, #12]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236a:	e035      	b.n	80023d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	4603      	mov	r3, r0
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4403      	add	r3, r0
 8002384:	3b1e      	subs	r3, #30
 8002386:	409a      	lsls	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002390:	e022      	b.n	80023d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43da      	mvns	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	400a      	ands	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4403      	add	r3, r0
 80023ce:	409a      	lsls	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d824      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b05      	subs	r3, #5
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b05      	subs	r3, #5
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
 8002428:	e04c      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d824      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b23      	subs	r3, #35	; 0x23
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b23      	subs	r3, #35	; 0x23
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
 800247a:	e023      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b41      	subs	r3, #65	; 0x41
 800248e:	221f      	movs	r2, #31
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b41      	subs	r3, #65	; 0x41
 80024b8:	fa00 f203 	lsl.w	r2, r0, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1f4>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10f      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002500:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800250c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d12b      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <HAL_ADC_ConfigChannel+0x23a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b11      	cmp	r3, #17
 8002528:	d122      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002530:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002534:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 800253c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002540:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_ADC_ConfigChannel+0x2a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x2a8>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9a      	lsrs	r2, r3, #18
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002562:	e002      	b.n	800256a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3b01      	subs	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	10000012 	.word	0x10000012
 800258c:	40012000 	.word	0x40012000
 8002590:	40012300 	.word	0x40012300
 8002594:	20000004 	.word	0x20000004
 8002598:	431bde83 	.word	0x431bde83

0800259c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025a4:	4b78      	ldr	r3, [pc, #480]	; (8002788 <ADC_Init+0x1ec>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a77      	ldr	r2, [pc, #476]	; (8002788 <ADC_Init+0x1ec>)
 80025aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <ADC_Init+0x1ec>)
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4973      	ldr	r1, [pc, #460]	; (8002788 <ADC_Init+0x1ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	021a      	lsls	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	4a58      	ldr	r2, [pc, #352]	; (800278c <ADC_Init+0x1f0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e00f      	b.n	8002696 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0202 	bic.w	r2, r2, #2
 80026a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	005a      	lsls	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	3b01      	subs	r3, #1
 80026f0:	035a      	lsls	r2, r3, #13
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e007      	b.n	800270c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	3b01      	subs	r3, #1
 8002728:	051a      	lsls	r2, r3, #20
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800274e:	025a      	lsls	r2, r3, #9
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	029a      	lsls	r2, r3, #10
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40012300 	.word	0x40012300
 800278c:	0f000001 	.word	0x0f000001

08002790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0ed      	b.n	800297e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fa2a 	bl	8000c08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff fd20 	bl	8002208 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027ca:	e012      	b.n	80027f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027cc:	f7ff fd1c 	bl	8002208 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d90b      	bls.n	80027f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0c5      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0e5      	beq.n	80027cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0202 	bic.w	r2, r2, #2
 800280e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7ff fcfa 	bl	8002208 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002816:	e012      	b.n	800283e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7ff fcf6 	bl	8002208 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e09f      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e007      	b.n	80028ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0220 	bic.w	r2, r2, #32
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7edb      	ldrb	r3, [r3, #27]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0210 	bic.w	r2, r2, #16
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0210 	orr.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f5b      	ldrb	r3, [r3, #29]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0204 	orr.w	r2, r2, #4
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e007      	b.n	8002948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d003      	beq.n	80029ae <HAL_CAN_ConfigFilter+0x26>
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	f040 80c7 	bne.w	8002b3c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_CAN_ConfigFilter+0x1d0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d001      	beq.n	80029bc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_CAN_ConfigFilter+0x1d4>)
 80029ba:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4a63      	ldr	r2, [pc, #396]	; (8002b5c <HAL_CAN_ConfigFilter+0x1d4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d123      	bne.n	8002a6a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3248      	adds	r2, #72	; 0x48
 8002a4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	3348      	adds	r3, #72	; 0x48
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d122      	bne.n	8002ab8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3248      	adds	r2, #72	; 0x48
 8002a98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ad2:	e007      	b.n	8002ae4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002afe:	e007      	b.n	8002b10 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b2e:	f023 0201 	bic.w	r2, r3, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e006      	b.n	8002b4a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40003400 	.word	0x40003400
 8002b5c:	40006400 	.word	0x40006400

08002b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00
 8002ba4:	05fa0000 	.word	0x05fa0000

08002ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff4c 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce2:	f7ff ff61 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f7ff ffb1 	bl	8002c54 <NVIC_EncodePriority>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff80 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d00:	bf00      	nop
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff54 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e054      	b.n	8002de0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7f5b      	ldrb	r3, [r3, #29]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f818 	bl	8000d7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	791b      	ldrb	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_CRC_Init+0xc4>)
 8002d60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0218 	bic.w	r2, r2, #24
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	e00c      	b.n	8002d8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f834 	bl	8002dec <HAL_CRCEx_Polynomial_Set>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e028      	b.n	8002de0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	795b      	ldrb	r3, [r3, #5]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9e:	611a      	str	r2, [r3, #16]
 8002da0:	e004      	b.n	8002dac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6912      	ldr	r2, [r2, #16]
 8002daa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	04c11db7 	.word	0x04c11db7

08002dec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002dfc:	231f      	movs	r3, #31
 8002dfe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e00:	bf00      	nop
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	613a      	str	r2, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_CRCEx_Polynomial_Set+0x34>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b18      	cmp	r3, #24
 8002e24:	d846      	bhi.n	8002eb4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002ebb 	.word	0x08002ebb
 8002e30:	08002eb5 	.word	0x08002eb5
 8002e34:	08002eb5 	.word	0x08002eb5
 8002e38:	08002eb5 	.word	0x08002eb5
 8002e3c:	08002eb5 	.word	0x08002eb5
 8002e40:	08002eb5 	.word	0x08002eb5
 8002e44:	08002eb5 	.word	0x08002eb5
 8002e48:	08002eb5 	.word	0x08002eb5
 8002e4c:	08002ea9 	.word	0x08002ea9
 8002e50:	08002eb5 	.word	0x08002eb5
 8002e54:	08002eb5 	.word	0x08002eb5
 8002e58:	08002eb5 	.word	0x08002eb5
 8002e5c:	08002eb5 	.word	0x08002eb5
 8002e60:	08002eb5 	.word	0x08002eb5
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002eb5 	.word	0x08002eb5
 8002e6c:	08002e9d 	.word	0x08002e9d
 8002e70:	08002eb5 	.word	0x08002eb5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002eb5 	.word	0x08002eb5
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002e91 	.word	0x08002e91
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d913      	bls.n	8002ebe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e9a:	e010      	b.n	8002ebe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b07      	cmp	r3, #7
 8002ea0:	d90f      	bls.n	8002ec2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ea6:	e00c      	b.n	8002ec2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	d90b      	bls.n	8002ec6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002eb2:	e008      	b.n	8002ec6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb8:	e006      	b.n	8002ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ec6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 0118 	bic.w	r1, r3, #24
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff f980 	bl	8002208 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e099      	b.n	8003048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f34:	e00f      	b.n	8002f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f36:	f7ff f967 	bl	8002208 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d908      	bls.n	8002f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e078      	b.n	8003048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e8      	bne.n	8002f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_DMA_Init+0x158>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f023 0307 	bic.w	r3, r3, #7
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d117      	bne.n	800301a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 faa5 	bl	800354c <DMA_CheckFifoParam>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003016:	2301      	movs	r3, #1
 8003018:	e016      	b.n	8003048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa5c 	bl	80034e0 <DMA_CalcBaseAndBitshift>
 8003028:	4603      	mov	r3, r0
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	223f      	movs	r2, #63	; 0x3f
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e010803f 	.word	0xe010803f

08003054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_DMA_Start_IT+0x26>
 8003076:	2302      	movs	r3, #2
 8003078:	e048      	b.n	800310c <HAL_DMA_Start_IT+0xb8>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d137      	bne.n	80030fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f9ee 	bl	8003484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	223f      	movs	r2, #63	; 0x3f
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0216 	orr.w	r2, r2, #22
 80030c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e005      	b.n	800310a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d004      	beq.n	8003132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00c      	b.n	800314c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2205      	movs	r2, #5
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003164:	4b8e      	ldr	r3, [pc, #568]	; (80033a0 <HAL_DMA_IRQHandler+0x248>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a8e      	ldr	r2, [pc, #568]	; (80033a4 <HAL_DMA_IRQHandler+0x24c>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0a9b      	lsrs	r3, r3, #10
 8003170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2208      	movs	r2, #8
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2208      	movs	r2, #8
 80031b2:	409a      	lsls	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	2201      	movs	r2, #1
 80031e8:	409a      	lsls	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2204      	movs	r2, #4
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	2204      	movs	r2, #4
 800321e:	409a      	lsls	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f043 0204 	orr.w	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2210      	movs	r2, #16
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d043      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03c      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	2210      	movs	r2, #16
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d024      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e01f      	b.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
 8003298:	e016      	b.n	80032c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2220      	movs	r2, #32
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808f 	beq.w	80033f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8087 	beq.w	80033f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2220      	movs	r2, #32
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d136      	bne.n	8003370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0216 	bic.w	r2, r2, #22
 8003310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_DMA_IRQHandler+0x1da>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0208 	bic.w	r2, r2, #8
 8003340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	223f      	movs	r2, #63	; 0x3f
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d07e      	beq.n	8003464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
        }
        return;
 800336e:	e079      	b.n	8003464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01d      	beq.n	80033ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	2b00      	cmp	r3, #0
 8003392:	d031      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e02c      	b.n	80033f8 <HAL_DMA_IRQHandler+0x2a0>
 800339e:	bf00      	nop
 80033a0:	20000004 	.word	0x20000004
 80033a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d023      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e01e      	b.n	80033f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10f      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0210 	bic.w	r2, r2, #16
 80033d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d032      	beq.n	8003466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d022      	beq.n	8003452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2205      	movs	r2, #5
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3301      	adds	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d307      	bcc.n	8003440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f2      	bne.n	8003424 <HAL_DMA_IRQHandler+0x2cc>
 800343e:	e000      	b.n	8003442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e000      	b.n	8003466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003464:	bf00      	nop
    }
  }
}
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d108      	bne.n	80034c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034c2:	e007      	b.n	80034d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3b10      	subs	r3, #16
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <DMA_CalcBaseAndBitshift+0x60>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <DMA_CalcBaseAndBitshift+0x64>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d908      	bls.n	8003520 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <DMA_CalcBaseAndBitshift+0x68>)
 8003516:	4013      	ands	r3, r2
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
 800351e:	e006      	b.n	800352e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <DMA_CalcBaseAndBitshift+0x68>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	aaaaaaab 	.word	0xaaaaaaab
 8003544:	0802be64 	.word	0x0802be64
 8003548:	fffffc00 	.word	0xfffffc00

0800354c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11f      	bne.n	80035a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d856      	bhi.n	800361a <DMA_CheckFifoParam+0xce>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <DMA_CheckFifoParam+0x28>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	08003597 	.word	0x08003597
 800357c:	08003585 	.word	0x08003585
 8003580:	0800361b 	.word	0x0800361b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d046      	beq.n	800361e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003594:	e043      	b.n	800361e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800359e:	d140      	bne.n	8003622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e03d      	b.n	8003622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d121      	bne.n	80035f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d837      	bhi.n	8003626 <DMA_CheckFifoParam+0xda>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <DMA_CheckFifoParam+0x70>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d3 	.word	0x080035d3
 80035c4:	080035cd 	.word	0x080035cd
 80035c8:	080035e5 	.word	0x080035e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e030      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d025      	beq.n	800362a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e2:	e022      	b.n	800362a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ec:	d11f      	bne.n	800362e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035f2:	e01c      	b.n	800362e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d903      	bls.n	8003602 <DMA_CheckFifoParam+0xb6>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d003      	beq.n	8003608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003600:	e018      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      break;
 8003606:	e015      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e00b      	b.n	8003632 <DMA_CheckFifoParam+0xe6>
      break;
 800361a:	bf00      	nop
 800361c:	e00a      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
 8003620:	e008      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e006      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e004      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e002      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;   
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
    }
  } 
  
  return status; 
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e049      	b.n	80036ea <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fc04 	bl	8000e78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	f023 0107 	bic.w	r1, r3, #7
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_DMA2D_Init+0xb0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d1      	ldr	r1, [r2, #12]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	051a      	lsls	r2, r3, #20
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	055b      	lsls	r3, r3, #21
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	ffffc000 	.word	0xffffc000

080036f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_DMA2D_ConfigLayer+0x20>
 8003714:	2302      	movs	r3, #2
 8003716:	e084      	b.n	8003822 <HAL_DMA2D_ConfigLayer+0x12a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	3320      	adds	r3, #32
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800374c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_DMA2D_ConfigLayer+0x138>)
 800375a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b0a      	cmp	r3, #10
 8003762:	d003      	beq.n	800376c <HAL_DMA2D_ConfigLayer+0x74>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b09      	cmp	r3, #9
 800376a:	d107      	bne.n	800377c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e005      	b.n	8003788 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d120      	bne.n	80037d0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	ea02 0103 	and.w	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b0a      	cmp	r3, #10
 80037b6:	d003      	beq.n	80037c0 <HAL_DMA2D_ConfigLayer+0xc8>
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d127      	bne.n	8003810 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
 80037ce:	e01f      	b.n	8003810 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	ea02 0103 	and.w	r1, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b0a      	cmp	r3, #10
 80037f8:	d003      	beq.n	8003802 <HAL_DMA2D_ConfigLayer+0x10a>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d106      	bne.n	8003810 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800380e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	ff33000f 	.word	0xff33000f

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e175      	b.n	8003b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	f040 8164 	bne.w	8003b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d005      	beq.n	800388a <HAL_GPIO_Init+0x56>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d130      	bne.n	80038ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	2203      	movs	r2, #3
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c0:	2201      	movs	r2, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0201 	and.w	r2, r3, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d017      	beq.n	8003928 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d123      	bne.n	800397c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	08da      	lsrs	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3208      	adds	r2, #8
 800393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	220f      	movs	r2, #15
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	69b9      	ldr	r1, [r7, #24]
 8003978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0203 	and.w	r2, r3, #3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80be 	beq.w	8003b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	4b66      	ldr	r3, [pc, #408]	; (8003b58 <HAL_GPIO_Init+0x324>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_GPIO_Init+0x324>)
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b63      	ldr	r3, [pc, #396]	; (8003b58 <HAL_GPIO_Init+0x324>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039d6:	4a61      	ldr	r2, [pc, #388]	; (8003b5c <HAL_GPIO_Init+0x328>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_GPIO_Init+0x32c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d037      	beq.n	8003a72 <HAL_GPIO_Init+0x23e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d031      	beq.n	8003a6e <HAL_GPIO_Init+0x23a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a56      	ldr	r2, [pc, #344]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02b      	beq.n	8003a6a <HAL_GPIO_Init+0x236>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a55      	ldr	r2, [pc, #340]	; (8003b6c <HAL_GPIO_Init+0x338>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_Init+0x232>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_GPIO_Init+0x33c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_Init+0x22e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <HAL_GPIO_Init+0x340>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x22a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_GPIO_Init+0x344>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x226>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <HAL_GPIO_Init+0x348>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x222>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_GPIO_Init+0x34c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x21e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4f      	ldr	r2, [pc, #316]	; (8003b84 <HAL_GPIO_Init+0x350>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x21a>
 8003a4a:	2309      	movs	r3, #9
 8003a4c:	e012      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a4e:	230a      	movs	r3, #10
 8003a50:	e010      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a52:	2308      	movs	r3, #8
 8003a54:	e00e      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e00c      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00a      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_Init+0x240>
 8003a72:	2300      	movs	r3, #0
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a84:	4935      	ldr	r1, [pc, #212]	; (8003b5c <HAL_GPIO_Init+0x328>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003abc:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae6:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <HAL_GPIO_Init+0x354>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f ae86 	bls.w	8003854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40021400 	.word	0x40021400
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	40021c00 	.word	0x40021c00
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40022400 	.word	0x40022400
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e0d9      	b.n	8003d5c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ba8:	2201      	movs	r2, #1
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f040 80c9 	bne.w	8003d56 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003bc4:	4a6b      	ldr	r2, [pc, #428]	; (8003d74 <HAL_GPIO_DeInit+0x1e8>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a63      	ldr	r2, [pc, #396]	; (8003d78 <HAL_GPIO_DeInit+0x1ec>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d037      	beq.n	8003c5e <HAL_GPIO_DeInit+0xd2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <HAL_GPIO_DeInit+0x1f0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d031      	beq.n	8003c5a <HAL_GPIO_DeInit+0xce>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_GPIO_DeInit+0x1f4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02b      	beq.n	8003c56 <HAL_GPIO_DeInit+0xca>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <HAL_GPIO_DeInit+0x1f8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d025      	beq.n	8003c52 <HAL_GPIO_DeInit+0xc6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a5f      	ldr	r2, [pc, #380]	; (8003d88 <HAL_GPIO_DeInit+0x1fc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01f      	beq.n	8003c4e <HAL_GPIO_DeInit+0xc2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_GPIO_DeInit+0x200>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d019      	beq.n	8003c4a <HAL_GPIO_DeInit+0xbe>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_GPIO_DeInit+0x204>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_GPIO_DeInit+0xba>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_GPIO_DeInit+0x208>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00d      	beq.n	8003c42 <HAL_GPIO_DeInit+0xb6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_GPIO_DeInit+0x20c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <HAL_GPIO_DeInit+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a5a      	ldr	r2, [pc, #360]	; (8003d9c <HAL_GPIO_DeInit+0x210>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d101      	bne.n	8003c3a <HAL_GPIO_DeInit+0xae>
 8003c36:	2309      	movs	r3, #9
 8003c38:	e012      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	e010      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	e00e      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c42:	2307      	movs	r3, #7
 8003c44:	e00c      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c46:	2306      	movs	r3, #6
 8003c48:	e00a      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	e008      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e004      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e002      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_GPIO_DeInit+0xd4>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	f002 0203 	and.w	r2, r2, #3
 8003c66:	0092      	lsls	r2, r2, #2
 8003c68:	4093      	lsls	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d132      	bne.n	8003cd6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c70:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	4949      	ldr	r1, [pc, #292]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c7e:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	4946      	ldr	r1, [pc, #280]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	4942      	ldr	r1, [pc, #264]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	493f      	ldr	r1, [pc, #252]	; (8003da0 <HAL_GPIO_DeInit+0x214>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <HAL_GPIO_DeInit+0x1e8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	482a      	ldr	r0, [pc, #168]	; (8003d74 <HAL_GPIO_DeInit+0x1e8>)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	400a      	ands	r2, r1
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2103      	movs	r1, #3
 8003ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	08da      	lsrs	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3208      	adds	r2, #8
 8003cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	08d2      	lsrs	r2, r2, #3
 8003d0c:	4019      	ands	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2103      	movs	r1, #3
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	2101      	movs	r1, #1
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2103      	movs	r1, #3
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	401a      	ands	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f af22 	bls.w	8003ba8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40013800 	.word	0x40013800
 8003d78:	40020000 	.word	0x40020000
 8003d7c:	40020400 	.word	0x40020400
 8003d80:	40020800 	.word	0x40020800
 8003d84:	40020c00 	.word	0x40020c00
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40021400 	.word	0x40021400
 8003d90:	40021800 	.word	0x40021800
 8003d94:	40021c00 	.word	0x40021c00
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40022400 	.word	0x40022400
 8003da0:	40013c00 	.word	0x40013c00

08003da4 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e078      	b.n	8003ea8 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fa92 	bl	80012f4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <HAL_JPEG_Init+0x10c>)
 8003e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_JPEG_Init+0x110>)
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fd0b 	bl	800487c <JPEG_Set_HuffEnc_Mem>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e018      	b.n	8003ea8 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e84:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	0802c00c 	.word	0x0802c00c
 8003eb4:	0802c04c 	.word	0x0802c04c

08003eb8 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_JPEG_Decode_DMA+0x20>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_JPEG_Decode_DMA+0x20>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04c      	b.n	8003f76 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_JPEG_Decode_DMA+0x32>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e045      	b.n	8003f76 <HAL_JPEG_Decode_DMA+0xbe>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d134      	bne.n	8003f68 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2204      	movs	r2, #4
 8003f02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f023 020f 	bic.w	r2, r3, #15
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 020e 	orr.w	r2, r3, #14
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 ff1c 	bl	8004d80 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 ff95 	bl	8004e78 <JPEG_DMA_StartProcess>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00f      	beq.n	8003f74 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2206      	movs	r2, #6
 8003f58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e006      	b.n	8003f76 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	e000      	b.n	8003f76 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d129      	bne.n	8003fec <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fb4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fd2:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fea:	e02c      	b.n	8004046 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d126      	bne.n	8004046 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f043 0306 	orr.w	r3, r3, #6
 8004014:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004032:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43da      	mvns	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	400a      	ands	r2, r1
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0a9      	b.n	80041c6 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d176      	bne.n	800416c <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d030      	beq.n	80040ea <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800409a:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f023 0203 	bic.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01c      	beq.n	80040ea <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4619      	mov	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3340      	adds	r3, #64	; 0x40
 80040c0:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	f7fe ffc4 	bl	8003054 <HAL_DMA_Start_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2206      	movs	r2, #6
 80040e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06d      	b.n	80041c6 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d030      	beq.n	8004156 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 ffa3 	bl	8005058 <JPEG_DMA_PollResidualData>
 8004112:	e020      	b.n	8004156 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800411a:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3344      	adds	r3, #68	; 0x44
 8004126:	4619      	mov	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	f7fe ff8e 	bl	8003054 <HAL_DMA_Start_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2206      	movs	r2, #6
 800414e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e037      	b.n	80041c6 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	e02b      	b.n	80041c4 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d125      	bne.n	80041c4 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f043 0306 	orr.w	r3, r3, #6
 8004194:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80041b2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_JPEG_GetState>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG state
  */
HAL_JPEG_STATETypeDef HAL_JPEG_GetState(JPEG_HandleTypeDef *hjpeg)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  return hjpeg->State;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_JPEG_GetError>:
  * @param  hjpeg  pointer to a JPEG_HandleTypeDef structure that contains
  *              the configuration information for the specified JPEG.
  * @retval JPEG Error Code
  */
uint32_t HAL_JPEG_GetError(JPEG_HandleTypeDef *hjpeg)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return hjpeg->ErrorCode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800425e:	b480      	push	{r7}
 8004260:	b08b      	sub	sp, #44	; 0x2c
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e020      	b.n	80042b8 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	4413      	add	r3, r2
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d90f      	bls.n	80042ac <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e055      	b.n	800433c <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	440b      	add	r3, r1
 800429a:	3201      	adds	r2, #1
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
      p++;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	3301      	adds	r3, #1
 80042a4:	623b      	str	r3, [r7, #32]
      i--;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	3b01      	subs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ee      	bne.n	8004290 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	d9db      	bls.n	8004276 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	4413      	add	r3, r2
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
  p = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80042dc:	e027      	b.n	800432e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	601a      	str	r2, [r3, #0]
      p++;
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	3301      	adds	r3, #1
 80042ee:	623b      	str	r3, [r7, #32]
      code++;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4293      	cmp	r3, r2
 8004304:	d0eb      	beq.n	80042de <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b1f      	cmp	r3, #31
 800430a:	d901      	bls.n	8004310 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e015      	b.n	800433c <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004310:	2201      	movs	r2, #1
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d301      	bcc.n	8004322 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e00c      	b.n	800433c <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	61bb      	str	r3, [r7, #24]
    si++;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	4413      	add	r3, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1dd      	bne.n	80042f6 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	372c      	adds	r7, #44	; 0x2c
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800434e:	af00      	add	r7, sp, #0
 8004350:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004354:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004358:	6018      	str	r0, [r3, #0]
 800435a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800435e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004362:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004364:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004368:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	f107 020c 	add.w	r2, r7, #12
 8004376:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800437a:	f7ff ff70 	bl	800425e <JPEG_Bits_To_SizeCodes>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004384:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800438c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004390:	e075      	b.n	800447e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004398:	e067      	b.n	800446a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800439a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800439e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80043a8:	4413      	add	r3, r2
 80043aa:	3310      	adds	r3, #16
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80043b2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80043ba:	23a0      	movs	r3, #160	; 0xa0
 80043bc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80043c0:	e021      	b.n	8004406 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80043c2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80043c6:	2bf0      	cmp	r3, #240	; 0xf0
 80043c8:	d103      	bne.n	80043d2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80043ca:	23a1      	movs	r3, #161	; 0xa1
 80043cc:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80043d0:	e019      	b.n	8004406 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80043d2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80043e0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80043ec:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	461a      	mov	r2, r3
 80043fa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80043fe:	4413      	add	r3, r2
 8004400:	3b01      	subs	r3, #1
 8004402:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004406:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800440a:	2ba1      	cmp	r3, #161	; 0xa1
 800440c:	d901      	bls.n	8004412 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800440e:	2301      	movs	r3, #1
 8004410:	e035      	b.n	800447e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004412:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004416:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800441a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800441e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004422:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004426:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004430:	3328      	adds	r3, #40	; 0x28
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004438:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800443c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8004440:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3b01      	subs	r3, #1
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004450:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800445a:	4413      	add	r3, r2
 800445c:	460a      	mov	r2, r1
 800445e:	701a      	strb	r2, [r3, #0]
      k++;
 8004460:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004464:	3301      	adds	r3, #1
 8004466:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 800446a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800446e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004478:	429a      	cmp	r2, r3
 800447a:	d38e      	bcc.n	800439a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800448e:	af00      	add	r7, sp, #0
 8004490:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004494:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004498:	6018      	str	r0, [r3, #0]
 800449a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800449e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80044a2:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80044a4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80044a8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80044b2:	f107 0208 	add.w	r2, r7, #8
 80044b6:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80044ba:	f7ff fed0 	bl	800425e <JPEG_Bits_To_SizeCodes>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80044c4:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80044cc:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80044d0:	e048      	b.n	8004564 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80044d8:	e03d      	b.n	8004556 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80044da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80044de:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80044e8:	4413      	add	r3, r2
 80044ea:	3310      	adds	r3, #16
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80044f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80044f6:	2b0b      	cmp	r3, #11
 80044f8:	d901      	bls.n	80044fe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80044fa:	2301      	movs	r3, #1
 80044fc:	e032      	b.n	8004564 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80044fe:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004502:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8004506:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800450a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800450e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004512:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800451c:	3302      	adds	r3, #2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004524:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004528:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800452c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004530:	4413      	add	r3, r2
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	b2d9      	uxtb	r1, r3
 8004538:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800453c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004546:	4413      	add	r3, r2
 8004548:	460a      	mov	r2, r1
 800454a:	701a      	strb	r2, [r3, #0]
      k++;
 800454c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004550:	3301      	adds	r3, #1
 8004552:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004556:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800455a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800455e:	429a      	cmp	r2, r3
 8004560:	d3bb      	bcc.n	80044da <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b09a      	sub	sp, #104	; 0x68
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004590:	3318      	adds	r3, #24
 8004592:	663b      	str	r3, [r7, #96]	; 0x60
 8004594:	e00f      	b.n	80045b6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d106      	bne.n	80045b2 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80045ac:	3318      	adds	r3, #24
 80045ae:	663b      	str	r3, [r7, #96]	; 0x60
 80045b0:	e001      	b.n	80045b6 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e059      	b.n	800466a <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d055      	beq.n	8004668 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	68b8      	ldr	r0, [r7, #8]
 80045c4:	f7ff ff60 	bl	8004488 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80045ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80045d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045da:	e046      	b.n	800466a <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80045dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80045e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e2:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80045e6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80045e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ea:	3304      	adds	r3, #4
 80045ec:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80045ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f0:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80045f4:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80045f6:	230c      	movs	r3, #12
 80045f8:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 80045fa:	e032      	b.n	8004662 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80045fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fe:	3b01      	subs	r3, #1
 8004600:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004604:	3b04      	subs	r3, #4
 8004606:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004608:	f107 0214 	add.w	r2, r7, #20
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	4413      	add	r3, r2
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461a:	3302      	adds	r3, #2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3368      	adds	r3, #104	; 0x68
 8004620:	443b      	add	r3, r7
 8004622:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800462c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800462e:	3b01      	subs	r3, #1
 8004630:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004632:	f107 0214 	add.w	r2, r7, #20
 8004636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004638:	4413      	add	r3, r2
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004644:	3302      	adds	r3, #2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	3368      	adds	r3, #104	; 0x68
 800464a:	443b      	add	r3, r7
 800464c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004658:	041a      	lsls	r2, r3, #16
 800465a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465c:	431a      	orrs	r2, r3
 800465e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004660:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004664:	2b01      	cmp	r3, #1
 8004666:	d8c9      	bhi.n	80045fc <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3768      	adds	r7, #104	; 0x68
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800467a:	af00      	add	r7, sp, #0
 800467c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004680:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004684:	6018      	str	r0, [r3, #0]
 8004686:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800468a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800468e:	6019      	str	r1, [r3, #0]
 8004690:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004694:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8004698:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800469a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800469e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80046ae:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d10c      	bne.n	80046d2 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80046b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80046bc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80046cc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80046d0:	e01d      	b.n	800470e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80046d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80046d6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80046e2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80046e6:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10c      	bne.n	800470a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80046f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80046f4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004700:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004704:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004708:	e001      	b.n	800470e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0a8      	b.n	8004860 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800470e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004712:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a0 	beq.w	800485e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800471e:	f107 0214 	add.w	r2, r7, #20
 8004722:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004726:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800472a:	4611      	mov	r1, r2
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f7ff fe0b 	bl	8004348 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004738:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8004740:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004744:	e08c      	b.n	8004860 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004746:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800474a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004754:	e00e      	b.n	8004774 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8004756:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800475a:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800475e:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004760:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004764:	3304      	adds	r3, #4
 8004766:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800476a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800476e:	3301      	adds	r3, #1
 8004770:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004774:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004778:	2b02      	cmp	r3, #2
 800477a:	d9ec      	bls.n	8004756 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800477c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004780:	4a3a      	ldr	r2, [pc, #232]	; (800486c <JPEG_Set_HuffAC_Mem+0x1f8>)
 8004782:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004784:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004788:	3304      	adds	r3, #4
 800478a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800478e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004792:	4a37      	ldr	r2, [pc, #220]	; (8004870 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8004794:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004796:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800479a:	3304      	adds	r3, #4
 800479c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 80047a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047a4:	4a33      	ldr	r2, [pc, #204]	; (8004874 <JPEG_Set_HuffAC_Mem+0x200>)
 80047a6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80047a8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047ac:	3304      	adds	r3, #4
 80047ae:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 80047b2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80047b6:	4a30      	ldr	r2, [pc, #192]	; (8004878 <JPEG_Set_HuffAC_Mem+0x204>)
 80047b8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80047ba:	23a2      	movs	r3, #162	; 0xa2
 80047bc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 80047c0:	e049      	b.n	8004856 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80047c2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80047c6:	3b01      	subs	r3, #1
 80047c8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 80047cc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80047d0:	3b04      	subs	r3, #4
 80047d2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80047da:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80047de:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80047ec:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80047f0:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 80047f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80047f8:	3328      	adds	r3, #40	; 0x28
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004808:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800480c:	3b01      	subs	r3, #1
 800480e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004812:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004816:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800481a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004828:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800482c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8004830:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004834:	3328      	adds	r3, #40	; 0x28
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004844:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800484e:	431a      	orrs	r2, r3
 8004850:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004854:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004856:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800485a:	2b01      	cmp	r3, #1
 800485c:	d8b1      	bhi.n	80047c2 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	0fd10fd0 	.word	0x0fd10fd0
 8004870:	0fd30fd2 	.word	0x0fd30fd2
 8004874:	0fd50fd4 	.word	0x0fd50fd4
 8004878:	0fd70fd6 	.word	0x0fd70fd6

0800487c <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f84d 	bl	8004924 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004892:	461a      	mov	r2, r3
 8004894:	491f      	ldr	r1, [pc, #124]	; (8004914 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff feec 	bl	8004674 <JPEG_Set_HuffAC_Mem>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	e030      	b.n	800490c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80048b2:	461a      	mov	r2, r3
 80048b4:	4918      	ldr	r1, [pc, #96]	; (8004918 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fedc 	bl	8004674 <JPEG_Set_HuffAC_Mem>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	e020      	b.n	800490c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80048d2:	461a      	mov	r2, r3
 80048d4:	4911      	ldr	r1, [pc, #68]	; (800491c <JPEG_Set_HuffEnc_Mem+0xa0>)
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fe49 	bl	800456e <JPEG_Set_HuffDC_Mem>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	e010      	b.n	800490c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80048f2:	461a      	mov	r2, r3
 80048f4:	490a      	ldr	r1, [pc, #40]	; (8004920 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fe39 	bl	800456e <JPEG_Set_HuffDC_Mem>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	e000      	b.n	800490c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0802bea4 	.word	0x0802bea4
 8004918:	0802bf58 	.word	0x0802bf58
 800491c:	0802be6c 	.word	0x0802be6c
 8004920:	0802be88 	.word	0x0802be88

08004924 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004924:	b480      	push	{r7}
 8004926:	b08b      	sub	sp, #44	; 0x2c
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800492c:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <JPEG_Set_Huff_DHTMem+0x20c>)
 800492e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004930:	4b80      	ldr	r3, [pc, #512]	; (8004b34 <JPEG_Set_Huff_DHTMem+0x210>)
 8004932:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004934:	4b80      	ldr	r3, [pc, #512]	; (8004b38 <JPEG_Set_Huff_DHTMem+0x214>)
 8004936:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004938:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <JPEG_Set_Huff_DHTMem+0x218>)
 800493a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004944:	330c      	adds	r3, #12
 8004946:	623b      	str	r3, [r7, #32]
  index = 16;
 8004948:	2310      	movs	r3, #16
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800494c:	e01d      	b.n	800498a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3b01      	subs	r3, #1
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	3b02      	subs	r3, #2
 800495c:	6979      	ldr	r1, [r7, #20]
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004962:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	3b03      	subs	r3, #3
 8004968:	6979      	ldr	r1, [r7, #20]
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800496e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	3a04      	subs	r2, #4
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004978:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	601a      	str	r2, [r3, #0]
    address--;
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	3b04      	subs	r3, #4
 8004982:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3b04      	subs	r3, #4
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	2b03      	cmp	r3, #3
 800498e:	d8de      	bhi.n	800494e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004998:	3318      	adds	r3, #24
 800499a:	623b      	str	r3, [r7, #32]
  index = 12;
 800499c:	230c      	movs	r3, #12
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049a0:	e021      	b.n	80049e6 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	3b01      	subs	r3, #1
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4413      	add	r3, r2
 80049aa:	7c1b      	ldrb	r3, [r3, #16]
 80049ac:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	3b02      	subs	r3, #2
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	440b      	add	r3, r1
 80049b6:	7c1b      	ldrb	r3, [r3, #16]
 80049b8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80049ba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	3b03      	subs	r3, #3
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	440b      	add	r3, r1
 80049c4:	7c1b      	ldrb	r3, [r3, #16]
 80049c6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80049c8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	3a04      	subs	r2, #4
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	440a      	add	r2, r1
 80049d2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80049d4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	601a      	str	r2, [r3, #0]
    address--;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	3b04      	subs	r3, #4
 80049de:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	3b04      	subs	r3, #4
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d8da      	bhi.n	80049a2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80049f4:	3328      	adds	r3, #40	; 0x28
 80049f6:	623b      	str	r3, [r7, #32]
  index = 16;
 80049f8:	2310      	movs	r3, #16
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80049fc:	e01d      	b.n	8004a3a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	3b01      	subs	r3, #1
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	5cd3      	ldrb	r3, [r2, r3]
 8004a06:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	3b02      	subs	r3, #2
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a12:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	3b03      	subs	r3, #3
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004a1e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a22:	3a04      	subs	r2, #4
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004a28:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	601a      	str	r2, [r3, #0]
    address--;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	3b04      	subs	r3, #4
 8004a32:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3b04      	subs	r3, #4
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d8de      	bhi.n	80049fe <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a48:	33cc      	adds	r3, #204	; 0xcc
 8004a4a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	3b04      	subs	r3, #4
 8004a76:	623b      	str	r3, [r7, #32]
  index = 160;
 8004a78:	23a0      	movs	r3, #160	; 0xa0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004a7c:	e021      	b.n	8004ac2 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3b01      	subs	r3, #1
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	7c1b      	ldrb	r3, [r3, #16]
 8004a88:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	69f9      	ldr	r1, [r7, #28]
 8004a90:	440b      	add	r3, r1
 8004a92:	7c1b      	ldrb	r3, [r3, #16]
 8004a94:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004a96:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	3b03      	subs	r3, #3
 8004a9c:	69f9      	ldr	r1, [r7, #28]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	7c1b      	ldrb	r3, [r3, #16]
 8004aa2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004aa4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	3a04      	subs	r2, #4
 8004aaa:	69f9      	ldr	r1, [r7, #28]
 8004aac:	440a      	add	r2, r1
 8004aae:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004ab0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	601a      	str	r2, [r3, #0]
    address--;
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d8da      	bhi.n	8004a7e <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ad0:	33cc      	adds	r3, #204	; 0xcc
 8004ad2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	061a      	lsls	r2, r3, #24
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004afe:	33dc      	adds	r3, #220	; 0xdc
 8004b00:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <JPEG_Set_Huff_DHTMem+0x21c>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	7bdb      	ldrb	r3, [r3, #15]
 8004b10:	021a      	lsls	r2, r3, #8
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	7b92      	ldrb	r2, [r2, #14]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	623b      	str	r3, [r7, #32]
  index = 12;
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b2e:	e027      	b.n	8004b80 <JPEG_Set_Huff_DHTMem+0x25c>
 8004b30:	0802bea4 	.word	0x0802bea4
 8004b34:	0802bf58 	.word	0x0802bf58
 8004b38:	0802be6c 	.word	0x0802be6c
 8004b3c:	0802be88 	.word	0x0802be88
 8004b40:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004b4e:	6939      	ldr	r1, [r7, #16]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	440b      	add	r3, r1
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b58:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	6939      	ldr	r1, [r7, #16]
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8004b64:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	3a02      	subs	r2, #2
 8004b6a:	6939      	ldr	r1, [r7, #16]
 8004b6c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004b6e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	601a      	str	r2, [r3, #0]
    address--;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	3b04      	subs	r3, #4
 8004b78:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d8de      	bhi.n	8004b44 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004b8e:	33dc      	adds	r3, #220	; 0xdc
 8004b90:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	7c5b      	ldrb	r3, [r3, #17]
 8004b9e:	061a      	lsls	r2, r3, #24
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	7c1b      	ldrb	r3, [r3, #16]
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004bbc:	33e8      	adds	r3, #232	; 0xe8
 8004bbe:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <JPEG_Set_Huff_DHTMem+0x458>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	7edb      	ldrb	r3, [r3, #27]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	7e92      	ldrb	r2, [r2, #26]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	3b04      	subs	r3, #4
 8004be6:	623b      	str	r3, [r7, #32]
  index = 8;
 8004be8:	2308      	movs	r3, #8
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004bec:	e021      	b.n	8004c32 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	7c1b      	ldrb	r3, [r3, #16]
 8004bf8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004bfa:	6939      	ldr	r1, [r7, #16]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	440b      	add	r3, r1
 8004c00:	3310      	adds	r3, #16
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c06:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	440b      	add	r3, r1
 8004c10:	7c1b      	ldrb	r3, [r3, #16]
 8004c12:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c14:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	3a02      	subs	r2, #2
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c20:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	601a      	str	r2, [r3, #0]
    address--;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d8da      	bhi.n	8004bee <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c40:	33e8      	adds	r3, #232	; 0xe8
 8004c42:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	785b      	ldrb	r3, [r3, #1]
 8004c50:	061a      	lsls	r2, r3, #24
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c6e:	33f8      	adds	r3, #248	; 0xf8
 8004c70:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <JPEG_Set_Huff_DHTMem+0x458>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	7bdb      	ldrb	r3, [r3, #15]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	7b92      	ldrb	r2, [r2, #14]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	3b04      	subs	r3, #4
 8004c98:	623b      	str	r3, [r7, #32]
  index = 12;
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004c9e:	e01d      	b.n	8004cdc <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	5cd3      	ldrb	r3, [r2, r3]
 8004ca8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	440b      	add	r3, r1
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004cb4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8004cc0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	3a02      	subs	r2, #2
 8004cc6:	69b9      	ldr	r1, [r7, #24]
 8004cc8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8004cca:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	601a      	str	r2, [r3, #0]
    address--;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d8de      	bhi.n	8004ca0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004cea:	33f8      	adds	r3, #248	; 0xf8
 8004cec:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	7c5b      	ldrb	r3, [r3, #17]
 8004cfa:	061a      	lsls	r2, r3, #24
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	7c1b      	ldrb	r3, [r3, #16]
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d18:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8004d1c:	623b      	str	r3, [r7, #32]
  index = 160;
 8004d1e:	23a0      	movs	r3, #160	; 0xa0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d22:	e021      	b.n	8004d68 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3301      	adds	r3, #1
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	7c1b      	ldrb	r3, [r3, #16]
 8004d2e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	440b      	add	r3, r1
 8004d36:	3310      	adds	r3, #16
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d3c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	3b01      	subs	r3, #1
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	440b      	add	r3, r1
 8004d46:	7c1b      	ldrb	r3, [r3, #16]
 8004d48:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004d4a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4e:	3a02      	subs	r2, #2
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	440a      	add	r2, r1
 8004d54:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004d56:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	601a      	str	r2, [r3, #0]
    address--;
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	3b04      	subs	r3, #4
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d8da      	bhi.n	8004d24 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	372c      	adds	r7, #44	; 0x2c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	ffff0000 	.word	0xffff0000

08004d80 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d108      	bne.n	8004db2 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	e007      	b.n	8004dc2 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0208 	bic.w	r2, r2, #8
 8004dc0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d108      	bne.n	8004e50 <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e4e:	e00d      	b.n	8004e6c <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d107      	bne.n	8004e6c <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d903      	bls.n	8004e90 <JPEG_DMA_StartProcess+0x18>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d801      	bhi.n	8004e94 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e068      	b.n	8004f66 <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	4a2e      	ldr	r2, [pc, #184]	; (8004f70 <JPEG_DMA_StartProcess+0xf8>)
 8004eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <JPEG_DMA_StartProcess+0xfc>)
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <JPEG_DMA_StartProcess+0x100>)
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <JPEG_DMA_StartProcess+0xfc>)
 8004ece:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <JPEG_DMA_StartProcess+0x104>)
 8004ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f023 0203 	bic.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	f023 0203 	bic.w	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3340      	adds	r3, #64	; 0x40
 8004f00:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	f7fe f8a4 	bl	8003054 <HAL_DMA_Start_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	f043 0204 	orr.w	r2, r3, #4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e021      	b.n	8004f66 <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3344      	adds	r3, #68	; 0x44
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	f7fe f88b 	bl	8003054 <HAL_DMA_Start_IT>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f48:	f043 0204 	orr.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e008      	b.n	8004f66 <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800519d 	.word	0x0800519d
 8004f74:	08005381 	.word	0x08005381
 8004f78:	0800529d 	.word	0x0800529d
 8004f7c:	080053ed 	.word	0x080053ed

08004f80 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0099      	lsls	r1, r3, #2
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <JPEG_DMA_EndProcess+0xd4>)
 8004f98:	400b      	ands	r3, r1
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d10a      	bne.n	8004fc2 <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69d9      	ldr	r1, [r3, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f00d f9f2 	bl	80123a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d134      	bne.n	800503a <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69d9      	ldr	r1, [r3, #28]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f00d f9dc 	bl	80123a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d103      	bne.n	8005032 <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f00d fa26 	bl	801247c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8005030:	e00c      	b.n	800504c <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff f8ef 	bl	8004216 <HAL_JPEG_EncodeCpltCallback>
}
 8005038:	e008      	b.n	800504c <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f806 	bl	8005058 <JPEG_DMA_PollResidualData>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	0003fffc 	.word	0x0003fffc

08005058 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005060:	2310      	movs	r3, #16
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e04f      	b.n	8005106 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d146      	bne.n	8005100 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03f      	beq.n	8005100 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4413      	add	r3, r2
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0a19      	lsrs	r1, r3, #8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	3301      	adds	r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	b2ca      	uxtb	r2, r1
 80050aa:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	0c19      	lsrs	r1, r3, #16
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	3302      	adds	r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	b2ca      	uxtb	r2, r1
 80050be:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	0e19      	lsrs	r1, r3, #24
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	3303      	adds	r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	b2ca      	uxtb	r2, r1
 80050d2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d10a      	bne.n	8005100 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69d9      	ldr	r1, [r3, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	461a      	mov	r2, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f00d f953 	bl	80123a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	3b01      	subs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ac      	bne.n	8005066 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <JPEG_DMA_PollResidualData+0xd2>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d133      	bne.n	8005192 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69d9      	ldr	r1, [r3, #28]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	461a      	mov	r2, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f00d f927 	bl	80123a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d103      	bne.n	800518c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f00d f979 	bl	801247c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800518a:	e002      	b.n	8005192 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff f842 	bl	8004216 <HAL_JPEG_EncodeCpltCallback>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051be:	f248 030c 	movw	r3, #32780	; 0x800c
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d163      	bne.n	8005290 <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	0099      	lsls	r1, r3, #2
 80051e4:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <JPEG_DMAInCpltCallback+0xfc>)
 80051e6:	400b      	ands	r3, r1
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f00d f89f 	bl	8012338 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d906      	bls.n	8005210 <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	f023 0203 	bic.w	r2, r3, #3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
 800520e:	e006      	b.n	800521e <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2204      	movs	r2, #4
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d12a      	bne.n	8005280 <JPEG_DMAInCpltCallback+0xe4>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d026      	beq.n	8005280 <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	4619      	mov	r1, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3340      	adds	r3, #64	; 0x40
 8005242:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	f7fd ff03 	bl	8003054 <HAL_DMA_Start_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2206      	movs	r2, #6
 8005264:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f00d f8f9 	bl	8012460 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800526e:	e00f      	b.n	8005290 <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	0003fffc 	.word	0x0003fffc

0800529c <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052be:	f248 030c 	movw	r3, #32780	; 0x800c
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d156      	bne.n	8005376 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d147      	bne.n	8005366 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	0099      	lsls	r1, r3, #2
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <JPEG_DMAOutCpltCallback+0xe0>)
 80052f4:	400b      	ands	r3, r1
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	461a      	mov	r2, r3
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f00d f84a 	bl	80123a0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d126      	bne.n	8005366 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3344      	adds	r3, #68	; 0x44
 8005322:	4619      	mov	r1, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	f7fd fe90 	bl	8003054 <HAL_DMA_Start_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	f043 0204 	orr.w	r2, r3, #4
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2206      	movs	r2, #6
 800534a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f00d f886 	bl	8012460 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8005354:	e00f      	b.n	8005376 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	0003fffc 	.word	0x0003fffc

08005380 <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fe f86c 	bl	800346c <HAL_DMA_GetError>
 8005394:	4603      	mov	r3, r0
 8005396:	2b02      	cmp	r3, #2
 8005398:	d024      	beq.n	80053e4 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f00d f83e 	bl	8012460 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fdba 	bl	8004f80 <JPEG_DMA_EndProcess>
  }
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0bf      	b.n	80055a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fffc 	bl	8001438 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005456:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800546c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6899      	ldr	r1, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_LTDC_Init+0x19c>)
 8005488:	400b      	ands	r3, r1
 800548a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68d9      	ldr	r1, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <HAL_LTDC_Init+0x19c>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68d9      	ldr	r1, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <HAL_LTDC_Init+0x19c>)
 80054e4:	400b      	ands	r3, r1
 80054e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6919      	ldr	r1, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6959      	ldr	r1, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <HAL_LTDC_Init+0x19c>)
 8005512:	400b      	ands	r3, r1
 8005514:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6959      	ldr	r1, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0206 	orr.w	r2, r2, #6
 8005582:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	f000f800 	.word	0xf000f800

080055b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d023      	beq.n	800561e <HAL_LTDC_IRQHandler+0x6a>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01e      	beq.n	800561e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2204      	movs	r2, #4
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055fe:	f043 0201 	orr.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2204      	movs	r2, #4
 800560c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f86f 	bl	80056fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <HAL_LTDC_IRQHandler+0xbc>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01e      	beq.n	8005670 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0202 	bic.w	r2, r2, #2
 8005640:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2202      	movs	r2, #2
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005650:	f043 0202 	orr.w	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f846 	bl	80056fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01b      	beq.n	80056b2 <HAL_LTDC_IRQHandler+0xfe>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d016      	beq.n	80056b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f00e fca5 	bl	8013ffc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <HAL_LTDC_IRQHandler+0x140>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0208 	bic.w	r2, r2, #8
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2208      	movs	r2, #8
 80056dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f80e 	bl	8005710 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005724:	b5b0      	push	{r4, r5, r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_LTDC_ConfigLayer+0x1a>
 800573a:	2302      	movs	r3, #2
 800573c:	e02c      	b.n	8005798 <HAL_LTDC_ConfigLayer+0x74>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2134      	movs	r1, #52	; 0x34
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4614      	mov	r4, r2
 8005762:	461d      	mov	r5, r3
 8005764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800576c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f849 	bl	8005810 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bdb0      	pop	{r4, r5, r7, pc}

080057a0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_LTDC_ProgramLineEvent+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e023      	b.n	8005800 <HAL_LTDC_ProgramLineEvent+0x60>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0201 	bic.w	r2, r2, #1
 80057d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80057d8:	4a0c      	ldr	r2, [pc, #48]	; (800580c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40016800 	.word	0x40016800

08005810 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	0c1b      	lsrs	r3, r3, #16
 8005828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582c:	4413      	add	r3, r2
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	01db      	lsls	r3, r3, #7
 800583c:	4413      	add	r3, r2
 800583e:	3384      	adds	r3, #132	; 0x84
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	4611      	mov	r1, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	01d2      	lsls	r2, r2, #7
 800584c:	440a      	add	r2, r1
 800584e:	3284      	adds	r2, #132	; 0x84
 8005850:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005854:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005866:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005868:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	01db      	lsls	r3, r3, #7
 8005874:	440b      	add	r3, r1
 8005876:	3384      	adds	r3, #132	; 0x84
 8005878:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800587e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800588e:	4413      	add	r3, r2
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	; 0x84
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	4611      	mov	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	01d2      	lsls	r2, r2, #7
 80058ae:	440a      	add	r2, r1
 80058b0:	3284      	adds	r2, #132	; 0x84
 80058b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80058b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058c6:	4413      	add	r3, r2
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	01db      	lsls	r3, r3, #7
 80058d4:	440b      	add	r3, r1
 80058d6:	3384      	adds	r3, #132	; 0x84
 80058d8:	4619      	mov	r1, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	01db      	lsls	r3, r3, #7
 80058ea:	4413      	add	r3, r2
 80058ec:	3384      	adds	r3, #132	; 0x84
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	4611      	mov	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	01d2      	lsls	r2, r2, #7
 80058fa:	440a      	add	r2, r1
 80058fc:	3284      	adds	r2, #132	; 0x84
 80058fe:	f023 0307 	bic.w	r3, r3, #7
 8005902:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	01db      	lsls	r3, r3, #7
 800590e:	4413      	add	r3, r2
 8005910:	3384      	adds	r3, #132	; 0x84
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	4413      	add	r3, r2
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	4413      	add	r3, r2
 8005952:	3384      	adds	r3, #132	; 0x84
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005960:	461a      	mov	r2, r3
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	431a      	orrs	r2, r3
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	01db      	lsls	r3, r3, #7
 8005974:	440b      	add	r3, r1
 8005976:	3384      	adds	r3, #132	; 0x84
 8005978:	4619      	mov	r1, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	01db      	lsls	r3, r3, #7
 800598a:	4413      	add	r3, r2
 800598c:	3384      	adds	r3, #132	; 0x84
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	4611      	mov	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	01d2      	lsls	r2, r2, #7
 800599a:	440a      	add	r2, r1
 800599c:	3284      	adds	r2, #132	; 0x84
 800599e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	01db      	lsls	r3, r3, #7
 80059ae:	4413      	add	r3, r2
 80059b0:	3384      	adds	r3, #132	; 0x84
 80059b2:	461a      	mov	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	01db      	lsls	r3, r3, #7
 80059c4:	4413      	add	r3, r2
 80059c6:	3384      	adds	r3, #132	; 0x84
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4619      	mov	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	01db      	lsls	r3, r3, #7
 80059d4:	440b      	add	r3, r1
 80059d6:	3384      	adds	r3, #132	; 0x84
 80059d8:	4619      	mov	r1, r3
 80059da:	4b58      	ldr	r3, [pc, #352]	; (8005b3c <LTDC_SetConfig+0x32c>)
 80059dc:	4013      	ands	r3, r2
 80059de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	6809      	ldr	r1, [r1, #0]
 80059ec:	4608      	mov	r0, r1
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	01c9      	lsls	r1, r1, #7
 80059f2:	4401      	add	r1, r0
 80059f4:	3184      	adds	r1, #132	; 0x84
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	01db      	lsls	r3, r3, #7
 8005a04:	4413      	add	r3, r2
 8005a06:	3384      	adds	r3, #132	; 0x84
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	01db      	lsls	r3, r3, #7
 8005a14:	4413      	add	r3, r2
 8005a16:	3384      	adds	r3, #132	; 0x84
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	01db      	lsls	r3, r3, #7
 8005a28:	4413      	add	r3, r2
 8005a2a:	3384      	adds	r3, #132	; 0x84
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e01b      	b.n	8005a7a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d102      	bne.n	8005a50 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	e014      	b.n	8005a7a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d00b      	beq.n	8005a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d007      	beq.n	8005a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d003      	beq.n	8005a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005a6c:	2b07      	cmp	r3, #7
 8005a6e:	d102      	bne.n	8005a76 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005a70:	2302      	movs	r3, #2
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e001      	b.n	8005a7a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005a76:	2301      	movs	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	01db      	lsls	r3, r3, #7
 8005a84:	4413      	add	r3, r2
 8005a86:	3384      	adds	r3, #132	; 0x84
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	01d2      	lsls	r2, r2, #7
 8005a94:	440a      	add	r2, r1
 8005a96:	3284      	adds	r2, #132	; 0x84
 8005a98:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	6809      	ldr	r1, [r1, #0]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	01c9      	lsls	r1, r1, #7
 8005ac6:	4401      	add	r1, r0
 8005ac8:	3184      	adds	r1, #132	; 0x84
 8005aca:	4313      	orrs	r3, r2
 8005acc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	4413      	add	r3, r2
 8005ada:	3384      	adds	r3, #132	; 0x84
 8005adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	440b      	add	r3, r1
 8005aea:	3384      	adds	r3, #132	; 0x84
 8005aec:	4619      	mov	r1, r3
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <LTDC_SetConfig+0x330>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	3384      	adds	r3, #132	; 0x84
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	01db      	lsls	r3, r3, #7
 8005b14:	4413      	add	r3, r2
 8005b16:	3384      	adds	r3, #132	; 0x84
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	01d2      	lsls	r2, r2, #7
 8005b24:	440a      	add	r2, r1
 8005b26:	3284      	adds	r2, #132	; 0x84
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	3724      	adds	r7, #36	; 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	fffff8f8 	.word	0xfffff8f8
 8005b40:	fffff800 	.word	0xfffff800

08005b44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b4e:	4b23      	ldr	r3, [pc, #140]	; (8005bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b66:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b72:	f7fc fb49 	bl	8002208 <HAL_GetTick>
 8005b76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b78:	e009      	b.n	8005b8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b7a:	f7fc fb45 	bl	8002208 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b88:	d901      	bls.n	8005b8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e022      	b.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9a:	d1ee      	bne.n	8005b7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba8:	f7fc fb2e 	bl	8002208 <HAL_GetTick>
 8005bac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bae:	e009      	b.n	8005bc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bb0:	f7fc fb2a 	bl	8002208 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bbe:	d901      	bls.n	8005bc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e007      	b.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd0:	d1ee      	bne.n	8005bb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40007000 	.word	0x40007000

08005be4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005bec:	f7fc fb0c 	bl	8002208 <HAL_GetTick>
 8005bf0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e067      	b.n	8005ccc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fb fe67 	bl	80018e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005c16:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fae8 	bl	80061f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2120      	movs	r1, #32
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fae0 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d135      	bne.n	8005cc2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_QSPI_Init+0xf0>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6852      	ldr	r2, [r2, #4]
 8005c64:	0611      	lsls	r1, r2, #24
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	69d2      	ldr	r2, [r2, #28]
 8005c70:	4311      	orrs	r1, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6a12      	ldr	r2, [r2, #32]
 8005c76:	4311      	orrs	r1, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <HAL_QSPI_Init+0xf4>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6912      	ldr	r2, [r2, #16]
 8005c8e:	0411      	lsls	r1, r2, #16
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6952      	ldr	r2, [r2, #20]
 8005c94:	4311      	orrs	r1, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6992      	ldr	r2, [r2, #24]
 8005c9a:	4311      	orrs	r1, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005cca:	7afb      	ldrb	r3, [r7, #11]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	00ffff2f 	.word	0x00ffff2f
 8005cd8:	ffe0f8fe 	.word	0xffe0f8fe

08005cdc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e016      	b.n	8005d1c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fe72 	bl	80019e8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7fc fa6a 	bl	8002208 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_QSPI_Command+0x22>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e048      	b.n	8005dd8 <HAL_QSPI_Command+0xb4>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d137      	bne.n	8005dca <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2120      	movs	r1, #32
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa4a 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d125      	bne.n	8005dce <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005d82:	2200      	movs	r2, #0
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa77 	bl	800627a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d115      	bne.n	8005dc0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fa34 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2202      	movs	r2, #2
 8005db4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbe:	e006      	b.n	8005dce <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc8:	e001      	b.n	8005dce <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005df0:	f7fc fa0a 	bl	8002208 <HAL_GetTick>
 8005df4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_QSPI_Transmit+0x2e>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e076      	b.n	8005efc <HAL_QSPI_Transmit+0x11c>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d165      	bne.n	8005eee <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d056      	beq.n	8005edc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2212      	movs	r2, #18
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e62:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005e64:	e01b      	b.n	8005e9e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2104      	movs	r1, #4
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f9cb 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d113      	bne.n	8005ea8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1df      	bne.n	8005e66 <HAL_QSPI_Transmit+0x86>
 8005ea6:	e000      	b.n	8005eaa <HAL_QSPI_Transmit+0xca>
          break;
 8005ea8:	bf00      	nop
      }

      if (status == HAL_OK)
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d110      	bne.n	8005ed2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2102      	movs	r1, #2
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f9a6 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005ec4:	7ffb      	ldrb	r3, [r7, #31]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eda:	e00a      	b.n	8005ef2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	f043 0208 	orr.w	r2, r3, #8
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e001      	b.n	8005ef2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005f14:	f7fc f978 	bl	8002208 <HAL_GetTick>
 8005f18:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3320      	adds	r3, #32
 8005f28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_QSPI_Receive+0x36>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e07d      	b.n	8006036 <HAL_QSPI_Receive+0x132>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d16c      	bne.n	8006028 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d05d      	beq.n	8006016 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2222      	movs	r2, #34	; 0x22
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f92:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005f9c:	e01c      	b.n	8005fd8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	2106      	movs	r1, #6
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f92f 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d114      	bne.n	8005fe2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1de      	bne.n	8005f9e <HAL_QSPI_Receive+0x9a>
 8005fe0:	e000      	b.n	8005fe4 <HAL_QSPI_Receive+0xe0>
          break;
 8005fe2:	bf00      	nop
      }

      if (status == HAL_OK)
 8005fe4:	7ffb      	ldrb	r3, [r7, #31]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d110      	bne.n	800600c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f909 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005ffe:	7ffb      	ldrb	r3, [r7, #31]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2202      	movs	r2, #2
 800600a:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006014:	e00a      	b.n	800602c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f043 0208 	orr.w	r2, r3, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e001      	b.n	800602c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006028:	2302      	movs	r3, #2
 800602a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006034:	7ffb      	ldrb	r3, [r7, #31]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b088      	sub	sp, #32
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800604c:	f7fc f8dc 	bl	8002208 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_QSPI_AutoPolling+0x24>
 800605e:	2302      	movs	r3, #2
 8006060:	e060      	b.n	8006124 <HAL_QSPI_AutoPolling+0xe6>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d14f      	bne.n	8006116 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2242      	movs	r2, #66	; 0x42
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2200      	movs	r2, #0
 800608c:	2120      	movs	r1, #32
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8bc 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d13d      	bne.n	800611a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6852      	ldr	r2, [r2, #4]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80060d4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80060de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f8c8 	bl	800627a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2201      	movs	r2, #1
 80060f2:	2108      	movs	r1, #8
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f889 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006114:	e001      	b.n	800611a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006116:	2302      	movs	r3, #2
 8006118:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006138:	f7fc f866 	bl	8002208 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_QSPI_MemoryMapped+0x22>
 800614a:	2302      	movs	r3, #2
 800614c:	e04c      	b.n	80061e8 <HAL_QSPI_MemoryMapped+0xbc>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d13b      	bne.n	80061da <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2282      	movs	r2, #130	; 0x82
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2200      	movs	r2, #0
 800617a:	2120      	movs	r1, #32
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f845 	bl	800620c <QSPI_WaitFlagStateUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d128      	bne.n	80061de <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 0108 	bic.w	r1, r3, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d110      	bne.n	80061cc <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2210      	movs	r2, #16
 80061ba:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80061ca:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80061cc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f851 	bl	800627a <QSPI_Config>
 80061d8:	e001      	b.n	80061de <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80061da:	2302      	movs	r3, #2
 80061dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800621c:	e01a      	b.n	8006254 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d016      	beq.n	8006254 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fb ffef 	bl	8002208 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2204      	movs	r2, #4
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	f043 0201 	orr.w	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e00e      	b.n	8006272 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	bf14      	ite	ne
 8006262:	2301      	movne	r3, #1
 8006264:	2300      	moveq	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	429a      	cmp	r2, r3
 800626e:	d1d6      	bne.n	800621e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <QSPI_Config+0x28>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006294:	d005      	beq.n	80062a2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3a01      	subs	r2, #1
 80062a0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80b9 	beq.w	800641e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d05f      	beq.n	8006374 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	6892      	ldr	r2, [r2, #8]
 80062bc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d031      	beq.n	800632a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	431a      	orrs	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	049b      	lsls	r3, r3, #18
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	431a      	orrs	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	ea42 0103 	orr.w	r1, r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	430a      	orrs	r2, r1
 8006312:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800631a:	f000 812e 	beq.w	800657a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	6852      	ldr	r2, [r2, #4]
 8006326:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006328:	e127      	b.n	800657a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	431a      	orrs	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	431a      	orrs	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	049b      	lsls	r3, r3, #18
 8006346:	431a      	orrs	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	431a      	orrs	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	431a      	orrs	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	431a      	orrs	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	431a      	orrs	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	430a      	orrs	r2, r1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	e102      	b.n	800657a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d02e      	beq.n	80063da <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	431a      	orrs	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	431a      	orrs	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	431a      	orrs	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	049b      	lsls	r3, r3, #18
 8006398:	431a      	orrs	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	ea42 0103 	orr.w	r1, r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063ca:	f000 80d6 	beq.w	800657a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	6852      	ldr	r2, [r2, #4]
 80063d6:	619a      	str	r2, [r3, #24]
}
 80063d8:	e0cf      	b.n	800657a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	049b      	lsls	r3, r3, #18
 80063f6:	431a      	orrs	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	431a      	orrs	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	431a      	orrs	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	ea42 0103 	orr.w	r1, r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	430a      	orrs	r2, r1
 800641a:	615a      	str	r2, [r3, #20]
}
 800641c:	e0ad      	b.n	800657a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d058      	beq.n	80064d8 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d02d      	beq.n	8006494 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	431a      	orrs	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	431a      	orrs	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	431a      	orrs	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	049b      	lsls	r3, r3, #18
 8006454:	431a      	orrs	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	431a      	orrs	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	431a      	orrs	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	431a      	orrs	r2, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	ea42 0103 	orr.w	r1, r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	430a      	orrs	r2, r1
 800647e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006486:	d078      	beq.n	800657a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	6852      	ldr	r2, [r2, #4]
 8006490:	619a      	str	r2, [r3, #24]
}
 8006492:	e072      	b.n	800657a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	431a      	orrs	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	049b      	lsls	r3, r3, #18
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	431a      	orrs	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	ea42 0103 	orr.w	r1, r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	615a      	str	r2, [r3, #20]
}
 80064d6:	e050      	b.n	800657a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02a      	beq.n	8006536 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	049b      	lsls	r3, r3, #18
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	431a      	orrs	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	431a      	orrs	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	431a      	orrs	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	ea42 0103 	orr.w	r1, r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	430a      	orrs	r2, r1
 8006520:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006528:	d027      	beq.n	800657a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	6852      	ldr	r2, [r2, #4]
 8006532:	619a      	str	r2, [r3, #24]
}
 8006534:	e021      	b.n	800657a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01d      	beq.n	800657a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	431a      	orrs	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	431a      	orrs	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	049b      	lsls	r3, r3, #18
 800655a:	431a      	orrs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	431a      	orrs	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	431a      	orrs	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	ea42 0103 	orr.w	r1, r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	430a      	orrs	r2, r1
 8006578:	615a      	str	r2, [r3, #20]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e29b      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8087 	beq.w	80066ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065ac:	4b96      	ldr	r3, [pc, #600]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 030c 	and.w	r3, r3, #12
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d00c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d112      	bne.n	80065ea <HAL_RCC_OscConfig+0x62>
 80065c4:	4b90      	ldr	r3, [pc, #576]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d0:	d10b      	bne.n	80065ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d2:	4b8d      	ldr	r3, [pc, #564]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d06c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x130>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d168      	bne.n	80066b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e275      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x7a>
 80065f4:	4b84      	ldr	r3, [pc, #528]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a83      	ldr	r2, [pc, #524]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e02e      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x9c>
 800660a:	4b7f      	ldr	r3, [pc, #508]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a7e      	ldr	r2, [pc, #504]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b7c      	ldr	r3, [pc, #496]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a7b      	ldr	r2, [pc, #492]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800661c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e01d      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0xc0>
 800662e:	4b76      	ldr	r3, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a75      	ldr	r2, [pc, #468]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b73      	ldr	r3, [pc, #460]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a72      	ldr	r2, [pc, #456]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006648:	4b6f      	ldr	r3, [pc, #444]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a6e      	ldr	r2, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6b      	ldr	r2, [pc, #428]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fb fdce 	bl	8002208 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006670:	f7fb fdca 	bl	8002208 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	; 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e229      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0xe8>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fb fdba 	bl	8002208 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006698:	f7fb fdb6 	bl	8002208 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e215      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x110>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d069      	beq.n	800679a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c6:	4b50      	ldr	r3, [pc, #320]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d2:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d11c      	bne.n	8006718 <HAL_RCC_OscConfig+0x190>
 80066de:	4b4a      	ldr	r3, [pc, #296]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d116      	bne.n	8006718 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCC_OscConfig+0x17a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e1e9      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006702:	4b41      	ldr	r3, [pc, #260]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	493d      	ldr	r1, [pc, #244]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006716:	e040      	b.n	800679a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d023      	beq.n	8006768 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006720:	4b39      	ldr	r3, [pc, #228]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a38      	ldr	r2, [pc, #224]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fb fd6c 	bl	8002208 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006734:	f7fb fd68 	bl	8002208 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1c7      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006746:	4b30      	ldr	r3, [pc, #192]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4929      	ldr	r1, [pc, #164]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006762:	4313      	orrs	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
 8006766:	e018      	b.n	800679a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fd48 	bl	8002208 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677c:	f7fb fd44 	bl	8002208 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e1a3      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678e:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d038      	beq.n	8006818 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ae:	4b16      	ldr	r3, [pc, #88]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ba:	f7fb fd25 	bl	8002208 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c2:	f7fb fd21 	bl	8002208 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e180      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x23a>
 80067e0:	e01a      	b.n	8006818 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fb fd0b 	bl	8002208 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f6:	f7fb fd07 	bl	8002208 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d903      	bls.n	800680c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e166      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
 8006808:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800680c:	4b92      	ldr	r3, [pc, #584]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 800680e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ee      	bne.n	80067f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a4 	beq.w	800696e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006826:	4b8c      	ldr	r3, [pc, #560]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10d      	bne.n	800684e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006832:	4b89      	ldr	r3, [pc, #548]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	4a88      	ldr	r2, [pc, #544]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683c:	6413      	str	r3, [r2, #64]	; 0x40
 800683e:	4b86      	ldr	r3, [pc, #536]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684e:	4b83      	ldr	r3, [pc, #524]	; (8006a5c <HAL_RCC_OscConfig+0x4d4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d118      	bne.n	800688c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800685a:	4b80      	ldr	r3, [pc, #512]	; (8006a5c <HAL_RCC_OscConfig+0x4d4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7f      	ldr	r2, [pc, #508]	; (8006a5c <HAL_RCC_OscConfig+0x4d4>)
 8006860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006866:	f7fb fccf 	bl	8002208 <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686e:	f7fb fccb 	bl	8002208 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b64      	cmp	r3, #100	; 0x64
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e12a      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	4b76      	ldr	r3, [pc, #472]	; (8006a5c <HAL_RCC_OscConfig+0x4d4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f0      	beq.n	800686e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d106      	bne.n	80068a2 <HAL_RCC_OscConfig+0x31a>
 8006894:	4b70      	ldr	r3, [pc, #448]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a6f      	ldr	r2, [pc, #444]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
 80068a0:	e02d      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x33c>
 80068aa:	4b6b      	ldr	r3, [pc, #428]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a6a      	ldr	r2, [pc, #424]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70
 80068b6:	4b68      	ldr	r3, [pc, #416]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	4a67      	ldr	r2, [pc, #412]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	6713      	str	r3, [r2, #112]	; 0x70
 80068c2:	e01c      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCC_OscConfig+0x35e>
 80068cc:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a61      	ldr	r2, [pc, #388]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
 80068d8:	4b5f      	ldr	r3, [pc, #380]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a5e      	ldr	r2, [pc, #376]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	e00b      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068e6:	4b5c      	ldr	r3, [pc, #368]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	4a5b      	ldr	r2, [pc, #364]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	6713      	str	r3, [r2, #112]	; 0x70
 80068f2:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80068f8:	f023 0304 	bic.w	r3, r3, #4
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d015      	beq.n	8006932 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fb fc7f 	bl	8002208 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	e00a      	b.n	8006924 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fb fc7b 	bl	8002208 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e0d8      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	4b4c      	ldr	r3, [pc, #304]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ee      	beq.n	800690e <HAL_RCC_OscConfig+0x386>
 8006930:	e014      	b.n	800695c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fb fc69 	bl	8002208 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006938:	e00a      	b.n	8006950 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fb fc65 	bl	8002208 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	; 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e0c2      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006950:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ee      	bne.n	800693a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	4a3c      	ldr	r2, [pc, #240]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80ae 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006978:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b08      	cmp	r3, #8
 8006982:	d06d      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d14b      	bne.n	8006a24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698c:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a31      	ldr	r2, [pc, #196]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fb fc36 	bl	8002208 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fb fc32 	bl	8002208 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e091      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	4b29      	ldr	r3, [pc, #164]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69da      	ldr	r2, [r3, #28]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	019b      	lsls	r3, r3, #6
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	3b01      	subs	r3, #1
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	061b      	lsls	r3, r3, #24
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	071b      	lsls	r3, r3, #28
 80069ea:	491b      	ldr	r1, [pc, #108]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fb fc04 	bl	8002208 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fb fc00 	bl	8002208 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e05f      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x47c>
 8006a22:	e057      	b.n	8006ad4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a0b      	ldr	r2, [pc, #44]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fb fbea 	bl	8002208 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fb fbe6 	bl	8002208 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e045      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x4b0>
 8006a56:	e03d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x54c>
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a60:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <HAL_RCC_OscConfig+0x558>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d030      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d129      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d122      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d119      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d10f      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d107      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40023800 	.word	0x40023800

08006ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0d0      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006afc:	4b6a      	ldr	r3, [pc, #424]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d910      	bls.n	8006b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b67      	ldr	r3, [pc, #412]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 020f 	bic.w	r2, r3, #15
 8006b12:	4965      	ldr	r1, [pc, #404]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b63      	ldr	r3, [pc, #396]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0b8      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d020      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b44:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a58      	ldr	r2, [pc, #352]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b5c:	4b53      	ldr	r3, [pc, #332]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4a52      	ldr	r2, [pc, #328]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b68:	4b50      	ldr	r3, [pc, #320]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	494d      	ldr	r1, [pc, #308]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d040      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	4b47      	ldr	r3, [pc, #284]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d115      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e07f      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba6:	4b41      	ldr	r3, [pc, #260]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e073      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e06b      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bc6:	4b39      	ldr	r3, [pc, #228]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 0203 	bic.w	r2, r3, #3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4936      	ldr	r1, [pc, #216]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd8:	f7fb fb16 	bl	8002208 <HAL_GetTick>
 8006bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be0:	f7fb fb12 	bl	8002208 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e053      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	4b2d      	ldr	r3, [pc, #180]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 020c 	and.w	r2, r3, #12
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d1eb      	bne.n	8006be0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c08:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d210      	bcs.n	8006c38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f023 020f 	bic.w	r2, r3, #15
 8006c1e:	4922      	ldr	r1, [pc, #136]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c26:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e032      	b.n	8006c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c44:	4b19      	ldr	r3, [pc, #100]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4916      	ldr	r1, [pc, #88]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	490e      	ldr	r1, [pc, #56]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c76:	f000 f821 	bl	8006cbc <HAL_RCC_GetSysClockFreq>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	490a      	ldr	r1, [pc, #40]	; (8006cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8006c88:	5ccb      	ldrb	r3, [r1, r3]
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8006c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c92:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <HAL_RCC_ClockConfig+0x1d4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fa fef2 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40023c00 	.word	0x40023c00
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	0802be4c 	.word	0x0802be4c
 8006cb4:	20000004 	.word	0x20000004
 8006cb8:	20000008 	.word	0x20000008

08006cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc0:	b090      	sub	sp, #64	; 0x40
 8006cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	2300      	movs	r3, #0
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ccc:	2300      	movs	r3, #0
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cd4:	4b59      	ldr	r3, [pc, #356]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d00d      	beq.n	8006cfc <HAL_RCC_GetSysClockFreq+0x40>
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	f200 80a1 	bhi.w	8006e28 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cee:	e09b      	b.n	8006e28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cf0:	4b53      	ldr	r3, [pc, #332]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cf4:	e09b      	b.n	8006e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cf6:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cfa:	e098      	b.n	8006e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cfc:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d06:	4b4d      	ldr	r3, [pc, #308]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d028      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d12:	4b4a      	ldr	r3, [pc, #296]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	2200      	movs	r2, #0
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d24:	2100      	movs	r1, #0
 8006d26:	4b47      	ldr	r3, [pc, #284]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d28:	fb03 f201 	mul.w	r2, r3, r1
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	fb00 f303 	mul.w	r3, r0, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	4a43      	ldr	r2, [pc, #268]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d36:	fba0 1202 	umull	r1, r2, r0, r2
 8006d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3c:	460a      	mov	r2, r1
 8006d3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d42:	4413      	add	r3, r2
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	2200      	movs	r2, #0
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d56:	f7f9 fac3 	bl	80002e0 <__aeabi_uldivmod>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4613      	mov	r3, r2
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d62:	e053      	b.n	8006e0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d64:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	099b      	lsrs	r3, r3, #6
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	617a      	str	r2, [r7, #20]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d76:	f04f 0b00 	mov.w	fp, #0
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	f04f 0000 	mov.w	r0, #0
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	0159      	lsls	r1, r3, #5
 8006d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d8c:	0150      	lsls	r0, r2, #5
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	ebb2 080a 	subs.w	r8, r2, sl
 8006d96:	eb63 090b 	sbc.w	r9, r3, fp
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006da6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006daa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006dae:	ebb2 0408 	subs.w	r4, r2, r8
 8006db2:	eb63 0509 	sbc.w	r5, r3, r9
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	00eb      	lsls	r3, r5, #3
 8006dc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc4:	00e2      	lsls	r2, r4, #3
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	461d      	mov	r5, r3
 8006dca:	eb14 030a 	adds.w	r3, r4, sl
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	eb45 030b 	adc.w	r3, r5, fp
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006de2:	4629      	mov	r1, r5
 8006de4:	028b      	lsls	r3, r1, #10
 8006de6:	4621      	mov	r1, r4
 8006de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dec:	4621      	mov	r1, r4
 8006dee:	028a      	lsls	r2, r1, #10
 8006df0:	4610      	mov	r0, r2
 8006df2:	4619      	mov	r1, r3
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	2200      	movs	r2, #0
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	60fa      	str	r2, [r7, #12]
 8006dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e00:	f7f9 fa6e 	bl	80002e0 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	0c1b      	lsrs	r3, r3, #16
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	3301      	adds	r3, #1
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e26:	e002      	b.n	8006e2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3740      	adds	r7, #64	; 0x40
 8006e34:	46bd      	mov	sp, r7
 8006e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	00f42400 	.word	0x00f42400
 8006e44:	017d7840 	.word	0x017d7840

08006e48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	20000004 	.word	0x20000004

08006e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e64:	f7ff fff0 	bl	8006e48 <HAL_RCC_GetHCLKFreq>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	0a9b      	lsrs	r3, r3, #10
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	4903      	ldr	r1, [pc, #12]	; (8006e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e76:	5ccb      	ldrb	r3, [r1, r3]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40023800 	.word	0x40023800
 8006e84:	0802be5c 	.word	0x0802be5c

08006e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220f      	movs	r2, #15
 8006e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e98:	4b12      	ldr	r3, [pc, #72]	; (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0203 	and.w	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006eca:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <HAL_RCC_GetClockConfig+0x60>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 020f 	and.w	r2, r3, #15
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	601a      	str	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40023c00 	.word	0x40023c00

08006eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f14:	4b69      	ldr	r3, [pc, #420]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4a68      	ldr	r2, [pc, #416]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f1e:	6093      	str	r3, [r2, #8]
 8006f20:	4b66      	ldr	r3, [pc, #408]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	4964      	ldr	r1, [pc, #400]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f46:	4b5d      	ldr	r3, [pc, #372]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	4959      	ldr	r1, [pc, #356]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f64:	d101      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f82:	4b4e      	ldr	r3, [pc, #312]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	494a      	ldr	r1, [pc, #296]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 808b 	beq.w	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	4a39      	ldr	r2, [pc, #228]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6413      	str	r3, [r2, #64]	; 0x40
 8006fdc:	4b37      	ldr	r3, [pc, #220]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a34      	ldr	r2, [pc, #208]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff4:	f7fb f908 	bl	8002208 <HAL_GetTick>
 8006ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffc:	f7fb f904 	bl	8002208 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b64      	cmp	r3, #100	; 0x64
 8007008:	d901      	bls.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e38f      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800700e:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800701a:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d035      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d02e      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007060:	4b16      	ldr	r3, [pc, #88]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d114      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fb f8cc 	bl	8002208 <HAL_GetTick>
 8007070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	e00a      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007074:	f7fb f8c8 	bl	8002208 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007082:	4293      	cmp	r3, r2
 8007084:	d901      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e351      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0ee      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a2:	d111      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070b0:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070b2:	400b      	ands	r3, r1
 80070b4:	4901      	ldr	r1, [pc, #4]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
 80070ba:	e00b      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40007000 	.word	0x40007000
 80070c4:	0ffffcff 	.word	0x0ffffcff
 80070c8:	4bac      	ldr	r3, [pc, #688]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4aab      	ldr	r2, [pc, #684]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070d2:	6093      	str	r3, [r2, #8]
 80070d4:	4ba9      	ldr	r3, [pc, #676]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e0:	49a6      	ldr	r1, [pc, #664]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070f2:	4ba2      	ldr	r3, [pc, #648]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f8:	4aa0      	ldr	r2, [pc, #640]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007102:	4b9e      	ldr	r3, [pc, #632]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	499b      	ldr	r1, [pc, #620]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007120:	4b96      	ldr	r3, [pc, #600]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712e:	4993      	ldr	r1, [pc, #588]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007142:	4b8e      	ldr	r3, [pc, #568]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007150:	498a      	ldr	r1, [pc, #552]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007164:	4b85      	ldr	r3, [pc, #532]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007172:	4982      	ldr	r1, [pc, #520]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007186:	4b7d      	ldr	r3, [pc, #500]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007194:	4979      	ldr	r1, [pc, #484]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071a8:	4b74      	ldr	r3, [pc, #464]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	4971      	ldr	r1, [pc, #452]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071ca:	4b6c      	ldr	r3, [pc, #432]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f023 020c 	bic.w	r2, r3, #12
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d8:	4968      	ldr	r1, [pc, #416]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071ec:	4b63      	ldr	r3, [pc, #396]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	4960      	ldr	r1, [pc, #384]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800720e:	4b5b      	ldr	r3, [pc, #364]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	4957      	ldr	r1, [pc, #348]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007230:	4b52      	ldr	r3, [pc, #328]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	494f      	ldr	r1, [pc, #316]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007252:	4b4a      	ldr	r3, [pc, #296]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007260:	4946      	ldr	r1, [pc, #280]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007274:	4b41      	ldr	r3, [pc, #260]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	493e      	ldr	r1, [pc, #248]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	4935      	ldr	r1, [pc, #212]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072b8:	4b30      	ldr	r3, [pc, #192]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c6:	492d      	ldr	r1, [pc, #180]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d011      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072da:	4b28      	ldr	r3, [pc, #160]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e8:	4924      	ldr	r1, [pc, #144]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f8:	d101      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007328:	4914      	ldr	r1, [pc, #80]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734c:	490b      	ldr	r1, [pc, #44]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007370:	4902      	ldr	r1, [pc, #8]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007378:	e002      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800738c:	4b8a      	ldr	r3, [pc, #552]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800738e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739c:	4986      	ldr	r1, [pc, #536]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073b0:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c0:	497d      	ldr	r1, [pc, #500]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d006      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80d6 	beq.w	8007588 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073dc:	4b76      	ldr	r3, [pc, #472]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a75      	ldr	r2, [pc, #468]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e8:	f7fa ff0e 	bl	8002208 <HAL_GetTick>
 80073ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073f0:	f7fa ff0a 	bl	8002208 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	; 0x64
 80073fc:	d901      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e195      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007402:	4b6d      	ldr	r3, [pc, #436]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f0      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d021      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11d      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007422:	4b65      	ldr	r3, [pc, #404]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007430:	4b61      	ldr	r3, [pc, #388]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	019a      	lsls	r2, r3, #6
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	071b      	lsls	r3, r3, #28
 8007456:	4958      	ldr	r1, [pc, #352]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02e      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007488:	d129      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800748a:	4b4b      	ldr	r3, [pc, #300]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800749a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	019a      	lsls	r2, r3, #6
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	493e      	ldr	r1, [pc, #248]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074c6:	4b3c      	ldr	r3, [pc, #240]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074cc:	f023 021f 	bic.w	r2, r3, #31
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	3b01      	subs	r3, #1
 80074d6:	4938      	ldr	r1, [pc, #224]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01d      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f0:	0e1b      	lsrs	r3, r3, #24
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074f8:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fe:	0f1b      	lsrs	r3, r3, #28
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	019a      	lsls	r2, r3, #6
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	431a      	orrs	r2, r3
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	431a      	orrs	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	071b      	lsls	r3, r3, #28
 800751e:	4926      	ldr	r1, [pc, #152]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	019a      	lsls	r2, r3, #6
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	071b      	lsls	r3, r3, #28
 800754e:	491a      	ldr	r1, [pc, #104]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800755c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007562:	f7fa fe51 	bl	8002208 <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007568:	e008      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800756a:	f7fa fe4d 	bl	8002208 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b64      	cmp	r3, #100	; 0x64
 8007576:	d901      	bls.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e0d8      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f0      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b01      	cmp	r3, #1
 800758c:	f040 80ce 	bne.w	800772c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800759a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759c:	f7fa fe34 	bl	8002208 <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075a2:	e00b      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075a4:	f7fa fe30 	bl	8002208 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d904      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0bb      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075bc:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c8:	d0ec      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d02e      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12a      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f2:	4b51      	ldr	r3, [pc, #324]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007600:	4b4d      	ldr	r3, [pc, #308]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007606:	0f1b      	lsrs	r3, r3, #28
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	019a      	lsls	r2, r3, #6
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	061b      	lsls	r3, r3, #24
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	4944      	ldr	r1, [pc, #272]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800762e:	4b42      	ldr	r3, [pc, #264]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007634:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	3b01      	subs	r3, #1
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	493d      	ldr	r1, [pc, #244]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d022      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800765c:	d11d      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800765e:	4b36      	ldr	r3, [pc, #216]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800766c:	4b32      	ldr	r3, [pc, #200]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	0f1b      	lsrs	r3, r3, #28
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	019a      	lsls	r2, r3, #6
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	431a      	orrs	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	4929      	ldr	r1, [pc, #164]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d028      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	0c1b      	lsrs	r3, r3, #16
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	019a      	lsls	r2, r3, #6
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	431a      	orrs	r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	4917      	ldr	r1, [pc, #92]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	4911      	ldr	r1, [pc, #68]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0e      	ldr	r2, [pc, #56]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fa fd80 	bl	8002208 <HAL_GetTick>
 8007708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800770a:	e008      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800770c:	f7fa fd7c 	bl	8002208 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b64      	cmp	r3, #100	; 0x64
 8007718:	d901      	bls.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e007      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d1ef      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40023800 	.word	0x40023800

0800773c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e025      	b.n	800779c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7f9 fcdf 	bl	8001128 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f001 fa07 	bl	8008b90 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	461a      	mov	r2, r3
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	f001 fa5b 	bl	8008c48 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d101      	bne.n	80077c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80077be:	2302      	movs	r3, #2
 80077c0:	e021      	b.n	8007806 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d002      	beq.n	80077ce <HAL_SDRAM_SendCommand+0x2a>
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d118      	bne.n	8007800 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fa9c 	bl	8008d1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d104      	bne.n	80077f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2205      	movs	r2, #5
 80077f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80077f4:	e006      	b.n	8007804 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80077fe:	e001      	b.n	8007804 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d101      	bne.n	8007828 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
 8007826:	e016      	b.n	8007856 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10f      	bne.n	8007854 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fa8e 	bl	8008d64 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	e000      	b.n	8007856 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e049      	b.n	8007904 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7fa fb77 	bl	8001f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3304      	adds	r3, #4
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f000 fd0d 	bl	80082bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	d001      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e054      	b.n	80079ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a26      	ldr	r2, [pc, #152]	; (80079dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794e:	d01d      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <HAL_TIM_Base_Start_IT+0xe0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d115      	bne.n	80079b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <HAL_TIM_Base_Start_IT+0xec>)
 8007994:	4013      	ands	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b06      	cmp	r3, #6
 800799c:	d015      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0xbe>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a4:	d011      	beq.n	80079ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b6:	e008      	b.n	80079ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	e000      	b.n	80079cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40001800 	.word	0x40001800
 80079f8:	00010007 	.word	0x00010007

080079fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e049      	b.n	8007aa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f841 	bl	8007aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f000 fc3e 	bl	80082bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d855      	bhi.n	8007b80 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b81 	.word	0x08007b81
 8007ae4:	08007b81 	.word	0x08007b81
 8007ae8:	08007b81 	.word	0x08007b81
 8007aec:	08007b2d 	.word	0x08007b2d
 8007af0:	08007b81 	.word	0x08007b81
 8007af4:	08007b81 	.word	0x08007b81
 8007af8:	08007b81 	.word	0x08007b81
 8007afc:	08007b49 	.word	0x08007b49
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b81 	.word	0x08007b81
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007b65 	.word	0x08007b65
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fb faf5 	bl	8003114 <HAL_DMA_Abort_IT>
      break;
 8007b2a:	e02c      	b.n	8007b86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fb fae7 	bl	8003114 <HAL_DMA_Abort_IT>
      break;
 8007b46:	e01e      	b.n	8007b86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fb fad9 	bl	8003114 <HAL_DMA_Abort_IT>
      break;
 8007b62:	e010      	b.n	8007b86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fb facb 	bl	8003114 <HAL_DMA_Abort_IT>
      break;
 8007b7e:	e002      	b.n	8007b86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
      break;
 8007b84:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d171      	bne.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2200      	movs	r2, #0
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 ff29 	bl	80089ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a37      	ldr	r2, [pc, #220]	; (8007c7c <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_PWM_Stop_DMA+0xee>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a35      	ldr	r2, [pc, #212]	; (8007c80 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10f      	bne.n	8007be8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	f240 4344 	movw	r3, #1092	; 0x444
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10f      	bne.n	8007c18 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	f240 4344 	movw	r3, #1092	; 0x444
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d104      	bne.n	8007c28 <HAL_TIM_PWM_Stop_DMA+0x168>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c26:	e023      	b.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d104      	bne.n	8007c38 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c36:	e01b      	b.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d104      	bne.n	8007c48 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c46:	e013      	b.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b0c      	cmp	r3, #12
 8007c4c:	d104      	bne.n	8007c58 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c56:	e00b      	b.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d104      	bne.n	8007c68 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c66:	e003      	b.n	8007c70 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400

08007c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d122      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d11b      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0202 	mvn.w	r2, #2
 8007cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fae4 	bl	8008294 <HAL_TIM_IC_CaptureCallback>
 8007ccc:	e005      	b.n	8007cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fad6 	bl	8008280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7f8 fc85 	bl	80005e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d122      	bne.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d11b      	bne.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0204 	mvn.w	r2, #4
 8007d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 faba 	bl	8008294 <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 faac 	bl	8008280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7f8 fc5b 	bl	80005e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0208 	mvn.w	r2, #8
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa90 	bl	8008294 <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa82 	bl	8008280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7f8 fc31 	bl	80005e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0210 	mvn.w	r2, #16
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2208      	movs	r2, #8
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa66 	bl	8008294 <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa58 	bl	8008280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f8 fc07 	bl	80005e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d10e      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d107      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0201 	mvn.w	r2, #1
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 fd2a 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e12:	2b80      	cmp	r3, #128	; 0x80
 8007e14:	d10e      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d107      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fe9a 	bl	8008b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	d10e      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b80      	cmp	r3, #128	; 0x80
 8007e50:	d107      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fe8d 	bl	8008b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d10e      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fa0d 	bl	80082a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d10e      	bne.n	8007eba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d107      	bne.n	8007eba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f06f 0220 	mvn.w	r2, #32
 8007eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fe4d 	bl	8008b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e0ff      	b.n	80080e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b14      	cmp	r3, #20
 8007eee:	f200 80f0 	bhi.w	80080d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	080080d3 	.word	0x080080d3
 8007f00:	080080d3 	.word	0x080080d3
 8007f04:	080080d3 	.word	0x080080d3
 8007f08:	08007f8d 	.word	0x08007f8d
 8007f0c:	080080d3 	.word	0x080080d3
 8007f10:	080080d3 	.word	0x080080d3
 8007f14:	080080d3 	.word	0x080080d3
 8007f18:	08007fcf 	.word	0x08007fcf
 8007f1c:	080080d3 	.word	0x080080d3
 8007f20:	080080d3 	.word	0x080080d3
 8007f24:	080080d3 	.word	0x080080d3
 8007f28:	0800800f 	.word	0x0800800f
 8007f2c:	080080d3 	.word	0x080080d3
 8007f30:	080080d3 	.word	0x080080d3
 8007f34:	080080d3 	.word	0x080080d3
 8007f38:	08008051 	.word	0x08008051
 8007f3c:	080080d3 	.word	0x080080d3
 8007f40:	080080d3 	.word	0x080080d3
 8007f44:	080080d3 	.word	0x080080d3
 8007f48:	08008091 	.word	0x08008091
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa52 	bl	80083fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0208 	orr.w	r2, r2, #8
 8007f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0204 	bic.w	r2, r2, #4
 8007f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6999      	ldr	r1, [r3, #24]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	691a      	ldr	r2, [r3, #16]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	619a      	str	r2, [r3, #24]
      break;
 8007f8a:	e0a5      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 faa4 	bl	80084e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6999      	ldr	r1, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	021a      	lsls	r2, r3, #8
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	619a      	str	r2, [r3, #24]
      break;
 8007fcc:	e084      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fafb 	bl	80085d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0208 	orr.w	r2, r2, #8
 8007fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0204 	bic.w	r2, r2, #4
 8007ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	61da      	str	r2, [r3, #28]
      break;
 800800c:	e064      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fb51 	bl	80086bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69d9      	ldr	r1, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	021a      	lsls	r2, r3, #8
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	61da      	str	r2, [r3, #28]
      break;
 800804e:	e043      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fb88 	bl	800876c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0208 	orr.w	r2, r2, #8
 800806a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0204 	bic.w	r2, r2, #4
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800808e:	e023      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fbba 	bl	8008810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080d0:	e002      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
      break;
 80080d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop

080080ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIM_ConfigClockSource+0x1c>
 8008104:	2302      	movs	r3, #2
 8008106:	e0b4      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x186>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4b56      	ldr	r3, [pc, #344]	; (800827c <HAL_TIM_ConfigClockSource+0x190>)
 8008124:	4013      	ands	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800812e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008140:	d03e      	beq.n	80081c0 <HAL_TIM_ConfigClockSource+0xd4>
 8008142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008146:	f200 8087 	bhi.w	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814e:	f000 8086 	beq.w	800825e <HAL_TIM_ConfigClockSource+0x172>
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	d87f      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008158:	2b70      	cmp	r3, #112	; 0x70
 800815a:	d01a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0xa6>
 800815c:	2b70      	cmp	r3, #112	; 0x70
 800815e:	d87b      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008160:	2b60      	cmp	r3, #96	; 0x60
 8008162:	d050      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x11a>
 8008164:	2b60      	cmp	r3, #96	; 0x60
 8008166:	d877      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008168:	2b50      	cmp	r3, #80	; 0x50
 800816a:	d03c      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0xfa>
 800816c:	2b50      	cmp	r3, #80	; 0x50
 800816e:	d873      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d058      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x13a>
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d86f      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	d064      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x15a>
 800817c:	2b30      	cmp	r3, #48	; 0x30
 800817e:	d86b      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d060      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x15a>
 8008184:	2b20      	cmp	r3, #32
 8008186:	d867      	bhi.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05c      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x15a>
 800818c:	2b10      	cmp	r3, #16
 800818e:	d05a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x15a>
 8008190:	e062      	b.n	8008258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6899      	ldr	r1, [r3, #8]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f000 fc03 	bl	80089ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	609a      	str	r2, [r3, #8]
      break;
 80081be:	e04f      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	6899      	ldr	r1, [r3, #8]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f000 fbec 	bl	80089ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081e2:	609a      	str	r2, [r3, #8]
      break;
 80081e4:	e03c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f000 fb60 	bl	80088b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2150      	movs	r1, #80	; 0x50
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fbb9 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 8008204:	e02c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6859      	ldr	r1, [r3, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	461a      	mov	r2, r3
 8008214:	f000 fb7f 	bl	8008916 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2160      	movs	r1, #96	; 0x60
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fba9 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 8008224:	e01c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	461a      	mov	r2, r3
 8008234:	f000 fb40 	bl	80088b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2140      	movs	r1, #64	; 0x40
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fb99 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 8008244:	e00c      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f000 fb90 	bl	8008976 <TIM_ITRx_SetConfig>
      break;
 8008256:	e003      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
      break;
 800825c:	e000      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800825e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	fffeff88 	.word	0xfffeff88

08008280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a40      	ldr	r2, [pc, #256]	; (80083d0 <TIM_Base_SetConfig+0x114>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d013      	beq.n	80082fc <TIM_Base_SetConfig+0x40>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d00f      	beq.n	80082fc <TIM_Base_SetConfig+0x40>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a3d      	ldr	r2, [pc, #244]	; (80083d4 <TIM_Base_SetConfig+0x118>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00b      	beq.n	80082fc <TIM_Base_SetConfig+0x40>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a3c      	ldr	r2, [pc, #240]	; (80083d8 <TIM_Base_SetConfig+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d007      	beq.n	80082fc <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a3b      	ldr	r2, [pc, #236]	; (80083dc <TIM_Base_SetConfig+0x120>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d003      	beq.n	80082fc <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3a      	ldr	r2, [pc, #232]	; (80083e0 <TIM_Base_SetConfig+0x124>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d108      	bne.n	800830e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a2f      	ldr	r2, [pc, #188]	; (80083d0 <TIM_Base_SetConfig+0x114>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d02b      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831c:	d027      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <TIM_Base_SetConfig+0x118>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d023      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a2b      	ldr	r2, [pc, #172]	; (80083d8 <TIM_Base_SetConfig+0x11c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01f      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <TIM_Base_SetConfig+0x120>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d01b      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a29      	ldr	r2, [pc, #164]	; (80083e0 <TIM_Base_SetConfig+0x124>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d017      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a28      	ldr	r2, [pc, #160]	; (80083e4 <TIM_Base_SetConfig+0x128>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a27      	ldr	r2, [pc, #156]	; (80083e8 <TIM_Base_SetConfig+0x12c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00f      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a26      	ldr	r2, [pc, #152]	; (80083ec <TIM_Base_SetConfig+0x130>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a25      	ldr	r2, [pc, #148]	; (80083f0 <TIM_Base_SetConfig+0x134>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a24      	ldr	r2, [pc, #144]	; (80083f4 <TIM_Base_SetConfig+0x138>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a23      	ldr	r2, [pc, #140]	; (80083f8 <TIM_Base_SetConfig+0x13c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d108      	bne.n	8008380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <TIM_Base_SetConfig+0x114>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_Base_SetConfig+0xf8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a0c      	ldr	r2, [pc, #48]	; (80083e0 <TIM_Base_SetConfig+0x124>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d103      	bne.n	80083bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	691a      	ldr	r2, [r3, #16]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	615a      	str	r2, [r3, #20]
}
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40010000 	.word	0x40010000
 80083d4:	40000400 	.word	0x40000400
 80083d8:	40000800 	.word	0x40000800
 80083dc:	40000c00 	.word	0x40000c00
 80083e0:	40010400 	.word	0x40010400
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40014400 	.word	0x40014400
 80083ec:	40014800 	.word	0x40014800
 80083f0:	40001800 	.word	0x40001800
 80083f4:	40001c00 	.word	0x40001c00
 80083f8:	40002000 	.word	0x40002000

080083fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4b2b      	ldr	r3, [pc, #172]	; (80084d4 <TIM_OC1_SetConfig+0xd8>)
 8008428:	4013      	ands	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0303 	bic.w	r3, r3, #3
 8008432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f023 0302 	bic.w	r3, r3, #2
 8008444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <TIM_OC1_SetConfig+0xdc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_OC1_SetConfig+0x64>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a20      	ldr	r2, [pc, #128]	; (80084dc <TIM_OC1_SetConfig+0xe0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10c      	bne.n	800847a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f023 0308 	bic.w	r3, r3, #8
 8008466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f023 0304 	bic.w	r3, r3, #4
 8008478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a16      	ldr	r2, [pc, #88]	; (80084d8 <TIM_OC1_SetConfig+0xdc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d003      	beq.n	800848a <TIM_OC1_SetConfig+0x8e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a15      	ldr	r2, [pc, #84]	; (80084dc <TIM_OC1_SetConfig+0xe0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d111      	bne.n	80084ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	621a      	str	r2, [r3, #32]
}
 80084c8:	bf00      	nop
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	fffeff8f 	.word	0xfffeff8f
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40010400 	.word	0x40010400

080084e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0210 	bic.w	r2, r3, #16
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <TIM_OC2_SetConfig+0xe4>)
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f023 0320 	bic.w	r3, r3, #32
 800852a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a23      	ldr	r2, [pc, #140]	; (80085c8 <TIM_OC2_SetConfig+0xe8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_OC2_SetConfig+0x68>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a22      	ldr	r2, [pc, #136]	; (80085cc <TIM_OC2_SetConfig+0xec>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10d      	bne.n	8008564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <TIM_OC2_SetConfig+0xe8>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_OC2_SetConfig+0x94>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a17      	ldr	r2, [pc, #92]	; (80085cc <TIM_OC2_SetConfig+0xec>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d113      	bne.n	800859c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800857a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	feff8fff 	.word	0xfeff8fff
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40010400 	.word	0x40010400

080085d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4b2d      	ldr	r3, [pc, #180]	; (80086b0 <TIM_OC3_SetConfig+0xe0>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a22      	ldr	r2, [pc, #136]	; (80086b4 <TIM_OC3_SetConfig+0xe4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d003      	beq.n	8008636 <TIM_OC3_SetConfig+0x66>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <TIM_OC3_SetConfig+0xe8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d10d      	bne.n	8008652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <TIM_OC3_SetConfig+0xe4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d003      	beq.n	8008662 <TIM_OC3_SetConfig+0x92>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a16      	ldr	r2, [pc, #88]	; (80086b8 <TIM_OC3_SetConfig+0xe8>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d113      	bne.n	800868a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	621a      	str	r2, [r3, #32]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	fffeff8f 	.word	0xfffeff8f
 80086b4:	40010000 	.word	0x40010000
 80086b8:	40010400 	.word	0x40010400

080086bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4b1e      	ldr	r3, [pc, #120]	; (8008760 <TIM_OC4_SetConfig+0xa4>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	031b      	lsls	r3, r3, #12
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4313      	orrs	r3, r2
 8008712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a13      	ldr	r2, [pc, #76]	; (8008764 <TIM_OC4_SetConfig+0xa8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC4_SetConfig+0x68>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a12      	ldr	r2, [pc, #72]	; (8008768 <TIM_OC4_SetConfig+0xac>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d109      	bne.n	8008738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800872a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	019b      	lsls	r3, r3, #6
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	feff8fff 	.word	0xfeff8fff
 8008764:	40010000 	.word	0x40010000
 8008768:	40010400 	.word	0x40010400

0800876c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <TIM_OC5_SetConfig+0x98>)
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	041b      	lsls	r3, r3, #16
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a12      	ldr	r2, [pc, #72]	; (8008808 <TIM_OC5_SetConfig+0x9c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_OC5_SetConfig+0x5e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <TIM_OC5_SetConfig+0xa0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d109      	bne.n	80087de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	fffeff8f 	.word	0xfffeff8f
 8008808:	40010000 	.word	0x40010000
 800880c:	40010400 	.word	0x40010400

08008810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4b1c      	ldr	r3, [pc, #112]	; (80088ac <TIM_OC6_SetConfig+0x9c>)
 800883c:	4013      	ands	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	051b      	lsls	r3, r3, #20
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <TIM_OC6_SetConfig+0xa0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_OC6_SetConfig+0x60>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a12      	ldr	r2, [pc, #72]	; (80088b4 <TIM_OC6_SetConfig+0xa4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d109      	bne.n	8008884 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	029b      	lsls	r3, r3, #10
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	feff8fff 	.word	0xfeff8fff
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40010400 	.word	0x40010400

080088b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f023 0201 	bic.w	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f023 030a 	bic.w	r3, r3, #10
 80088f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0210 	bic.w	r2, r3, #16
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	f043 0307 	orr.w	r3, r3, #7
 8008998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	609a      	str	r2, [r3, #8]
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	021a      	lsls	r2, r3, #8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	609a      	str	r2, [r3, #8]
}
 80089e0:	bf00      	nop
 80089e2:	371c      	adds	r7, #28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	2201      	movs	r2, #1
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a1a      	ldr	r2, [r3, #32]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a1a      	ldr	r2, [r3, #32]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	fa01 f303 	lsl.w	r3, r1, r3
 8008a24:	431a      	orrs	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e06d      	b.n	8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a30      	ldr	r2, [pc, #192]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a2f      	ldr	r2, [pc, #188]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d108      	bne.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d022      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac2:	d01d      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d018      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d013      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1a      	ldr	r2, [pc, #104]	; (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a15      	ldr	r2, [pc, #84]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d10c      	bne.n	8008b1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400
 8008b40:	40000400 	.word	0x40000400
 8008b44:	40000800 	.word	0x40000800
 8008b48:	40000c00 	.word	0x40000c00
 8008b4c:	40014000 	.word	0x40014000
 8008b50:	40001800 	.word	0x40001800

08008b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d121      	bne.n	8008be6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <FMC_SDRAM_Init+0xb4>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	6851      	ldr	r1, [r2, #4]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	6892      	ldr	r2, [r2, #8]
 8008bb2:	4311      	orrs	r1, r2
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	68d2      	ldr	r2, [r2, #12]
 8008bb8:	4311      	orrs	r1, r2
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	6912      	ldr	r2, [r2, #16]
 8008bbe:	4311      	orrs	r1, r2
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	6952      	ldr	r2, [r2, #20]
 8008bc4:	4311      	orrs	r1, r2
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	6992      	ldr	r2, [r2, #24]
 8008bca:	4311      	orrs	r1, r2
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	69d2      	ldr	r2, [r2, #28]
 8008bd0:	4311      	orrs	r1, r2
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	6a12      	ldr	r2, [r2, #32]
 8008bd6:	4311      	orrs	r1, r2
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e026      	b.n	8008c34 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	69d9      	ldr	r1, [r3, #28]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	4319      	orrs	r1, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <FMC_SDRAM_Init+0xb4>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	6851      	ldr	r1, [r2, #4]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	6892      	ldr	r2, [r2, #8]
 8008c14:	4311      	orrs	r1, r2
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	68d2      	ldr	r2, [r2, #12]
 8008c1a:	4311      	orrs	r1, r2
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	6912      	ldr	r2, [r2, #16]
 8008c20:	4311      	orrs	r1, r2
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	6952      	ldr	r2, [r2, #20]
 8008c26:	4311      	orrs	r1, r2
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	6992      	ldr	r2, [r2, #24]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	ffff8000 	.word	0xffff8000

08008c48 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d128      	bne.n	8008cac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1e59      	subs	r1, r3, #1
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	4319      	orrs	r1, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	4319      	orrs	r1, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	031b      	lsls	r3, r3, #12
 8008c84:	4319      	orrs	r1, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	4319      	orrs	r1, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	051b      	lsls	r3, r3, #20
 8008c98:	4319      	orrs	r1, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	061b      	lsls	r3, r3, #24
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	609a      	str	r2, [r3, #8]
 8008caa:	e02d      	b.n	8008d08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <FMC_SDRAM_Timing_Init+0xd0>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	68d2      	ldr	r2, [r2, #12]
 8008cb8:	3a01      	subs	r2, #1
 8008cba:	0311      	lsls	r1, r2, #12
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	6952      	ldr	r2, [r2, #20]
 8008cc0:	3a01      	subs	r2, #1
 8008cc2:	0512      	lsls	r2, r2, #20
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1e59      	subs	r1, r3, #1
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	4319      	orrs	r1, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	4319      	orrs	r1, r3
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	4319      	orrs	r1, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	061b      	lsls	r3, r3, #24
 8008d00:	430b      	orrs	r3, r1
 8008d02:	431a      	orrs	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	ff0f0fff 	.word	0xff0f0fff

08008d1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	691a      	ldr	r2, [r3, #16]
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <FMC_SDRAM_SendCommand+0x44>)
 8008d2e:	4013      	ands	r3, r2
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	6811      	ldr	r1, [r2, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	6852      	ldr	r2, [r2, #4]
 8008d38:	4311      	orrs	r1, r2
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	6892      	ldr	r2, [r2, #8]
 8008d3e:	3a01      	subs	r2, #1
 8008d40:	0152      	lsls	r2, r2, #5
 8008d42:	4311      	orrs	r1, r2
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	68d2      	ldr	r2, [r2, #12]
 8008d48:	0252      	lsls	r2, r2, #9
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	ffc00000 	.word	0xffc00000

08008d64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	0052      	lsls	r2, r2, #1
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	ffffc001 	.word	0xffffc001

08008d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008daa:	f3ef 8305 	mrs	r3, IPSR
 8008dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10f      	bne.n	8008dd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dba:	607b      	str	r3, [r7, #4]
  return(result);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8008dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <osKernelInitialize+0x3a>
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <osKernelInitialize+0x64>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d103      	bne.n	8008dde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008dd6:	f06f 0305 	mvn.w	r3, #5
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	e00c      	b.n	8008df8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <osKernelInitialize+0x64>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008de6:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <osKernelInitialize+0x64>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e002      	b.n	8008df8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008df8:	68fb      	ldr	r3, [r7, #12]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000598 	.word	0x20000598

08008e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e12:	f3ef 8305 	mrs	r3, IPSR
 8008e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10f      	bne.n	8008e3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e22:	607b      	str	r3, [r7, #4]
  return(result);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <osKernelStart+0x3a>
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <osKernelStart+0x68>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d103      	bne.n	8008e46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008e3e:	f06f 0305 	mvn.w	r3, #5
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e010      	b.n	8008e68 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <osKernelStart+0x68>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d109      	bne.n	8008e62 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e4e:	f7ff ffa1 	bl	8008d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e52:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <osKernelStart+0x68>)
 8008e54:	2202      	movs	r2, #2
 8008e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e58:	f002 f8c8 	bl	800afec <vTaskStartScheduler>
      stat = osOK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e002      	b.n	8008e68 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295
 8008e66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000598 	.word	0x20000598

08008e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b090      	sub	sp, #64	; 0x40
 8008e7c:	af04      	add	r7, sp, #16
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e88:	f3ef 8305 	mrs	r3, IPSR
 8008e8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 808f 	bne.w	8008fb4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e96:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <osThreadNew+0x3e>
 8008eae:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <osThreadNew+0x148>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d07e      	beq.n	8008fb4 <osThreadNew+0x13c>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d07b      	beq.n	8008fb4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008ebc:	2380      	movs	r3, #128	; 0x80
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008ec0:	2318      	movs	r3, #24
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d045      	beq.n	8008f60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <osThreadNew+0x6a>
        name = attr->name;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <osThreadNew+0x90>
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	2b38      	cmp	r3, #56	; 0x38
 8008efa:	d805      	bhi.n	8008f08 <osThreadNew+0x90>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <osThreadNew+0x94>
        return (NULL);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e054      	b.n	8008fb6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	089b      	lsrs	r3, r3, #2
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <osThreadNew+0xca>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b5b      	cmp	r3, #91	; 0x5b
 8008f2a:	d90a      	bls.n	8008f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <osThreadNew+0xca>
        mem = 1;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	e010      	b.n	8008f64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10c      	bne.n	8008f64 <osThreadNew+0xec>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d108      	bne.n	8008f64 <osThreadNew+0xec>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <osThreadNew+0xec>
          mem = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	623b      	str	r3, [r7, #32]
 8008f5e:	e001      	b.n	8008f64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d110      	bne.n	8008f8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f001 fe53 	bl	800ac2c <xTaskCreateStatic>
 8008f86:	4603      	mov	r3, r0
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	e013      	b.n	8008fb4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d110      	bne.n	8008fb4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f001 fea4 	bl	800acf2 <xTaskCreate>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <osThreadNew+0x13c>
          hTask = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fb4:	693b      	ldr	r3, [r7, #16]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3730      	adds	r7, #48	; 0x30
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000598 	.word	0x20000598

08008fc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fcc:	f3ef 8305 	mrs	r3, IPSR
 8008fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <osDelay+0x3c>
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <osDelay+0x58>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d103      	bne.n	8009000 <osDelay+0x3c>
    stat = osErrorISR;
 8008ff8:	f06f 0305 	mvn.w	r3, #5
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e007      	b.n	8009010 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <osDelay+0x4c>
      vTaskDelay(ticks);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 ffb8 	bl	800af80 <vTaskDelay>
    }
  }

  return (stat);
 8009010:	697b      	ldr	r3, [r7, #20]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000598 	.word	0x20000598

08009020 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902c:	f3ef 8305 	mrs	r3, IPSR
 8009030:	613b      	str	r3, [r7, #16]
  return(result);
 8009032:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009034:	2b00      	cmp	r3, #0
 8009036:	f040 8085 	bne.w	8009144 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903a:	f3ef 8310 	mrs	r3, PRIMASK
 800903e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009046:	f3ef 8311 	mrs	r3, BASEPRI
 800904a:	60bb      	str	r3, [r7, #8]
  return(result);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <osMutexNew+0x3a>
 8009052:	4b3f      	ldr	r3, [pc, #252]	; (8009150 <osMutexNew+0x130>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d074      	beq.n	8009144 <osMutexNew+0x124>
    if (attr != NULL) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	623b      	str	r3, [r7, #32]
 8009066:	e001      	b.n	800906c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <osMutexNew+0x5c>
      rmtx = 1U;
 8009076:	2301      	movs	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	e001      	b.n	8009080 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d15c      	bne.n	8009144 <osMutexNew+0x124>
      mem = -1;
 800908a:	f04f 33ff 	mov.w	r3, #4294967295
 800908e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d015      	beq.n	80090c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d006      	beq.n	80090ac <osMutexNew+0x8c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b4f      	cmp	r3, #79	; 0x4f
 80090a4:	d902      	bls.n	80090ac <osMutexNew+0x8c>
          mem = 1;
 80090a6:	2301      	movs	r3, #1
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	e00c      	b.n	80090c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d108      	bne.n	80090c6 <osMutexNew+0xa6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <osMutexNew+0xa6>
            mem = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	e001      	b.n	80090c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d112      	bne.n	80090f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	4619      	mov	r1, r3
 80090d8:	2004      	movs	r0, #4
 80090da:	f000 fe1a 	bl	8009d12 <xQueueCreateMutexStatic>
 80090de:	6278      	str	r0, [r7, #36]	; 0x24
 80090e0:	e016      	b.n	8009110 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	4619      	mov	r1, r3
 80090e8:	2001      	movs	r0, #1
 80090ea:	f000 fe12 	bl	8009d12 <xQueueCreateMutexStatic>
 80090ee:	6278      	str	r0, [r7, #36]	; 0x24
 80090f0:	e00e      	b.n	8009110 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80090fe:	2004      	movs	r0, #4
 8009100:	f000 fdef 	bl	8009ce2 <xQueueCreateMutex>
 8009104:	6278      	str	r0, [r7, #36]	; 0x24
 8009106:	e003      	b.n	8009110 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009108:	2001      	movs	r0, #1
 800910a:	f000 fdea 	bl	8009ce2 <xQueueCreateMutex>
 800910e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00c      	beq.n	8009130 <osMutexNew+0x110>
        if (attr != NULL) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <osMutexNew+0x104>
          name = attr->name;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e001      	b.n	8009128 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800912c:	f001 fcf6 	bl	800ab1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d006      	beq.n	8009144 <osMutexNew+0x124>
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009146:	4618      	mov	r0, r3
 8009148:	3728      	adds	r7, #40	; 0x28
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000598 	.word	0x20000598

08009154 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f023 0301 	bic.w	r3, r3, #1
 8009164:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009172:	f3ef 8305 	mrs	r3, IPSR
 8009176:	613b      	str	r3, [r7, #16]
  return(result);
 8009178:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10f      	bne.n	800919e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917e:	f3ef 8310 	mrs	r3, PRIMASK
 8009182:	60fb      	str	r3, [r7, #12]
  return(result);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800918a:	f3ef 8311 	mrs	r3, BASEPRI
 800918e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d007      	beq.n	80091a6 <osMutexAcquire+0x52>
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <osMutexAcquire+0xb8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d103      	bne.n	80091a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800919e:	f06f 0305 	mvn.w	r3, #5
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	e02c      	b.n	8009200 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80091ac:	f06f 0303 	mvn.w	r3, #3
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	e025      	b.n	8009200 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d011      	beq.n	80091de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	69b8      	ldr	r0, [r7, #24]
 80091be:	f000 fdf9 	bl	8009db4 <xQueueTakeMutexRecursive>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d01b      	beq.n	8009200 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80091ce:	f06f 0301 	mvn.w	r3, #1
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	e014      	b.n	8009200 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80091d6:	f06f 0302 	mvn.w	r3, #2
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	e010      	b.n	8009200 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	69b8      	ldr	r0, [r7, #24]
 80091e2:	f001 f9b3 	bl	800a54c <xQueueSemaphoreTake>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d009      	beq.n	8009200 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80091f2:	f06f 0301 	mvn.w	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e002      	b.n	8009200 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80091fa:	f06f 0302 	mvn.w	r3, #2
 80091fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009200:	69fb      	ldr	r3, [r7, #28]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000598 	.word	0x20000598

08009210 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009228:	2300      	movs	r3, #0
 800922a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800922c:	f3ef 8305 	mrs	r3, IPSR
 8009230:	613b      	str	r3, [r7, #16]
  return(result);
 8009232:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10f      	bne.n	8009258 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009238:	f3ef 8310 	mrs	r3, PRIMASK
 800923c:	60fb      	str	r3, [r7, #12]
  return(result);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009244:	f3ef 8311 	mrs	r3, BASEPRI
 8009248:	60bb      	str	r3, [r7, #8]
  return(result);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <osMutexRelease+0x50>
 8009250:	4b16      	ldr	r3, [pc, #88]	; (80092ac <osMutexRelease+0x9c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b02      	cmp	r3, #2
 8009256:	d103      	bne.n	8009260 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009258:	f06f 0305 	mvn.w	r3, #5
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	e01f      	b.n	80092a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009266:	f06f 0303 	mvn.w	r3, #3
 800926a:	61fb      	str	r3, [r7, #28]
 800926c:	e018      	b.n	80092a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d009      	beq.n	8009288 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009274:	69b8      	ldr	r0, [r7, #24]
 8009276:	f000 fd67 	bl	8009d48 <xQueueGiveMutexRecursive>
 800927a:	4603      	mov	r3, r0
 800927c:	2b01      	cmp	r3, #1
 800927e:	d00f      	beq.n	80092a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009280:	f06f 0302 	mvn.w	r3, #2
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e00b      	b.n	80092a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009288:	2300      	movs	r3, #0
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	69b8      	ldr	r0, [r7, #24]
 8009290:	f000 fe3a 	bl	8009f08 <xQueueGenericSend>
 8009294:	4603      	mov	r3, r0
 8009296:	2b01      	cmp	r3, #1
 8009298:	d002      	beq.n	80092a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800929a:	f06f 0302 	mvn.w	r3, #2
 800929e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80092a0:	69fb      	ldr	r3, [r7, #28]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20000598 	.word	0x20000598

080092b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08c      	sub	sp, #48	; 0x30
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c0:	f3ef 8305 	mrs	r3, IPSR
 80092c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80092c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f040 8086 	bne.w	80093da <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ce:	f3ef 8310 	mrs	r3, PRIMASK
 80092d2:	617b      	str	r3, [r7, #20]
  return(result);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092da:	f3ef 8311 	mrs	r3, BASEPRI
 80092de:	613b      	str	r3, [r7, #16]
  return(result);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <osSemaphoreNew+0x3e>
 80092e6:	4b3f      	ldr	r3, [pc, #252]	; (80093e4 <osSemaphoreNew+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d075      	beq.n	80093da <osSemaphoreNew+0x12a>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d072      	beq.n	80093da <osSemaphoreNew+0x12a>
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d86e      	bhi.n	80093da <osSemaphoreNew+0x12a>
    mem = -1;
 80092fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009300:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d015      	beq.n	8009334 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <osSemaphoreNew+0x6e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b4f      	cmp	r3, #79	; 0x4f
 8009316:	d902      	bls.n	800931e <osSemaphoreNew+0x6e>
        mem = 1;
 8009318:	2301      	movs	r3, #1
 800931a:	623b      	str	r3, [r7, #32]
 800931c:	e00c      	b.n	8009338 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d108      	bne.n	8009338 <osSemaphoreNew+0x88>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <osSemaphoreNew+0x88>
          mem = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	623b      	str	r3, [r7, #32]
 8009332:	e001      	b.n	8009338 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d04c      	beq.n	80093da <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d128      	bne.n	8009398 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10a      	bne.n	8009362 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2203      	movs	r2, #3
 8009352:	9200      	str	r2, [sp, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	2100      	movs	r1, #0
 8009358:	2001      	movs	r0, #1
 800935a:	f000 fbc1 	bl	8009ae0 <xQueueGenericCreateStatic>
 800935e:	6278      	str	r0, [r7, #36]	; 0x24
 8009360:	e005      	b.n	800936e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009362:	2203      	movs	r2, #3
 8009364:	2100      	movs	r1, #0
 8009366:	2001      	movs	r0, #1
 8009368:	f000 fc3c 	bl	8009be4 <xQueueGenericCreate>
 800936c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d022      	beq.n	80093ba <osSemaphoreNew+0x10a>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01f      	beq.n	80093ba <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800937a:	2300      	movs	r3, #0
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009382:	f000 fdc1 	bl	8009f08 <xQueueGenericSend>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d016      	beq.n	80093ba <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800938c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800938e:	f001 fa77 	bl	800a880 <vQueueDelete>
            hSemaphore = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
 8009396:	e010      	b.n	80093ba <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d108      	bne.n	80093b0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	461a      	mov	r2, r3
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fd3c 	bl	8009e24 <xQueueCreateCountingSemaphoreStatic>
 80093ac:	6278      	str	r0, [r7, #36]	; 0x24
 80093ae:	e004      	b.n	80093ba <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fd71 	bl	8009e9a <xQueueCreateCountingSemaphore>
 80093b8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00c      	beq.n	80093da <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <osSemaphoreNew+0x11e>
          name = attr->name;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	61fb      	str	r3, [r7, #28]
 80093cc:	e001      	b.n	80093d2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80093d2:	69f9      	ldr	r1, [r7, #28]
 80093d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093d6:	f001 fba1 	bl	800ab1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3728      	adds	r7, #40	; 0x28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20000598 	.word	0x20000598

080093e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009400:	f06f 0303 	mvn.w	r3, #3
 8009404:	61fb      	str	r3, [r7, #28]
 8009406:	e04b      	b.n	80094a0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009408:	f3ef 8305 	mrs	r3, IPSR
 800940c:	617b      	str	r3, [r7, #20]
  return(result);
 800940e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10f      	bne.n	8009434 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009414:	f3ef 8310 	mrs	r3, PRIMASK
 8009418:	613b      	str	r3, [r7, #16]
  return(result);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009420:	f3ef 8311 	mrs	r3, BASEPRI
 8009424:	60fb      	str	r3, [r7, #12]
  return(result);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d026      	beq.n	800947a <osSemaphoreAcquire+0x92>
 800942c:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <osSemaphoreAcquire+0xc4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d122      	bne.n	800947a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800943a:	f06f 0303 	mvn.w	r3, #3
 800943e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009440:	e02d      	b.n	800949e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	461a      	mov	r2, r3
 800944c:	2100      	movs	r1, #0
 800944e:	69b8      	ldr	r0, [r7, #24]
 8009450:	f001 f990 	bl	800a774 <xQueueReceiveFromISR>
 8009454:	4603      	mov	r3, r0
 8009456:	2b01      	cmp	r3, #1
 8009458:	d003      	beq.n	8009462 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800945a:	f06f 0302 	mvn.w	r3, #2
 800945e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009460:	e01d      	b.n	800949e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01a      	beq.n	800949e <osSemaphoreAcquire+0xb6>
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <osSemaphoreAcquire+0xc8>)
 800946a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009478:	e011      	b.n	800949e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	69b8      	ldr	r0, [r7, #24]
 800947e:	f001 f865 	bl	800a54c <xQueueSemaphoreTake>
 8009482:	4603      	mov	r3, r0
 8009484:	2b01      	cmp	r3, #1
 8009486:	d00b      	beq.n	80094a0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800948e:	f06f 0301 	mvn.w	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e004      	b.n	80094a0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8009496:	f06f 0302 	mvn.w	r3, #2
 800949a:	61fb      	str	r3, [r7, #28]
 800949c:	e000      	b.n	80094a0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800949e:	bf00      	nop
      }
    }
  }

  return (stat);
 80094a0:	69fb      	ldr	r3, [r7, #28]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000598 	.word	0x20000598
 80094b0:	e000ed04 	.word	0xe000ed04

080094b4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d103      	bne.n	80094d2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80094ca:	f06f 0303 	mvn.w	r3, #3
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e03e      	b.n	8009550 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d2:	f3ef 8305 	mrs	r3, IPSR
 80094d6:	617b      	str	r3, [r7, #20]
  return(result);
 80094d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10f      	bne.n	80094fe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094de:	f3ef 8310 	mrs	r3, PRIMASK
 80094e2:	613b      	str	r3, [r7, #16]
  return(result);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094ea:	f3ef 8311 	mrs	r3, BASEPRI
 80094ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01e      	beq.n	8009534 <osSemaphoreRelease+0x80>
 80094f6:	4b19      	ldr	r3, [pc, #100]	; (800955c <osSemaphoreRelease+0xa8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d11a      	bne.n	8009534 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80094fe:	2300      	movs	r3, #0
 8009500:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009502:	f107 0308 	add.w	r3, r7, #8
 8009506:	4619      	mov	r1, r3
 8009508:	69b8      	ldr	r0, [r7, #24]
 800950a:	f000 fea3 	bl	800a254 <xQueueGiveFromISR>
 800950e:	4603      	mov	r3, r0
 8009510:	2b01      	cmp	r3, #1
 8009512:	d003      	beq.n	800951c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009514:	f06f 0302 	mvn.w	r3, #2
 8009518:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800951a:	e018      	b.n	800954e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d015      	beq.n	800954e <osSemaphoreRelease+0x9a>
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <osSemaphoreRelease+0xac>)
 8009524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009532:	e00c      	b.n	800954e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009534:	2300      	movs	r3, #0
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	69b8      	ldr	r0, [r7, #24]
 800953c:	f000 fce4 	bl	8009f08 <xQueueGenericSend>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d004      	beq.n	8009550 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009546:	f06f 0302 	mvn.w	r3, #2
 800954a:	61fb      	str	r3, [r7, #28]
 800954c:	e000      	b.n	8009550 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800954e:	bf00      	nop
    }
  }

  return (stat);
 8009550:	69fb      	ldr	r3, [r7, #28]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000598 	.word	0x20000598
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009564:	b580      	push	{r7, lr}
 8009566:	b08c      	sub	sp, #48	; 0x30
 8009568:	af02      	add	r7, sp, #8
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009570:	2300      	movs	r3, #0
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009574:	f3ef 8305 	mrs	r3, IPSR
 8009578:	61bb      	str	r3, [r7, #24]
  return(result);
 800957a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800957c:	2b00      	cmp	r3, #0
 800957e:	d16f      	bne.n	8009660 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009580:	f3ef 8310 	mrs	r3, PRIMASK
 8009584:	617b      	str	r3, [r7, #20]
  return(result);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800958c:	f3ef 8311 	mrs	r3, BASEPRI
 8009590:	613b      	str	r3, [r7, #16]
  return(result);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <osMessageQueueNew+0x3c>
 8009598:	4b34      	ldr	r3, [pc, #208]	; (800966c <osMessageQueueNew+0x108>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d05f      	beq.n	8009660 <osMessageQueueNew+0xfc>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d05c      	beq.n	8009660 <osMessageQueueNew+0xfc>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d059      	beq.n	8009660 <osMessageQueueNew+0xfc>
    mem = -1;
 80095ac:	f04f 33ff 	mov.w	r3, #4294967295
 80095b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d029      	beq.n	800960c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d012      	beq.n	80095e6 <osMessageQueueNew+0x82>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	2b4f      	cmp	r3, #79	; 0x4f
 80095c6:	d90e      	bls.n	80095e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	429a      	cmp	r2, r3
 80095de:	d302      	bcc.n	80095e6 <osMessageQueueNew+0x82>
        mem = 1;
 80095e0:	2301      	movs	r3, #1
 80095e2:	623b      	str	r3, [r7, #32]
 80095e4:	e014      	b.n	8009610 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d110      	bne.n	8009610 <osMessageQueueNew+0xac>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10c      	bne.n	8009610 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d108      	bne.n	8009610 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <osMessageQueueNew+0xac>
          mem = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	623b      	str	r3, [r7, #32]
 800960a:	e001      	b.n	8009610 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d10b      	bne.n	800962e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2100      	movs	r1, #0
 8009620:	9100      	str	r1, [sp, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 fa5b 	bl	8009ae0 <xQueueGenericCreateStatic>
 800962a:	6278      	str	r0, [r7, #36]	; 0x24
 800962c:	e008      	b.n	8009640 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d105      	bne.n	8009640 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009634:	2200      	movs	r2, #0
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fad3 	bl	8009be4 <xQueueGenericCreate>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00c      	beq.n	8009660 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <osMessageQueueNew+0xf0>
        name = attr->name;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e001      	b.n	8009658 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009658:	69f9      	ldr	r1, [r7, #28]
 800965a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800965c:	f001 fa5e 	bl	800ab1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009662:	4618      	mov	r0, r3
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000598 	.word	0x20000598

08009670 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	; 0x28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009684:	2300      	movs	r3, #0
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009688:	f3ef 8305 	mrs	r3, IPSR
 800968c:	61fb      	str	r3, [r7, #28]
  return(result);
 800968e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10f      	bne.n	80096b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009694:	f3ef 8310 	mrs	r3, PRIMASK
 8009698:	61bb      	str	r3, [r7, #24]
  return(result);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096a0:	f3ef 8311 	mrs	r3, BASEPRI
 80096a4:	617b      	str	r3, [r7, #20]
  return(result);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d02c      	beq.n	8009706 <osMessageQueuePut+0x96>
 80096ac:	4b28      	ldr	r3, [pc, #160]	; (8009750 <osMessageQueuePut+0xe0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d128      	bne.n	8009706 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <osMessageQueuePut+0x56>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <osMessageQueuePut+0x56>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80096c6:	f06f 0303 	mvn.w	r3, #3
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096cc:	e039      	b.n	8009742 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80096d2:	f107 0210 	add.w	r2, r7, #16
 80096d6:	2300      	movs	r3, #0
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	6a38      	ldr	r0, [r7, #32]
 80096dc:	f000 fd1a 	bl	800a114 <xQueueGenericSendFromISR>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d003      	beq.n	80096ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80096e6:	f06f 0302 	mvn.w	r3, #2
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096ec:	e029      	b.n	8009742 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d026      	beq.n	8009742 <osMessageQueuePut+0xd2>
 80096f4:	4b17      	ldr	r3, [pc, #92]	; (8009754 <osMessageQueuePut+0xe4>)
 80096f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009704:	e01d      	b.n	8009742 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <osMessageQueuePut+0xa2>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009712:	f06f 0303 	mvn.w	r3, #3
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
 8009718:	e014      	b.n	8009744 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800971a:	2300      	movs	r3, #0
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	6a38      	ldr	r0, [r7, #32]
 8009722:	f000 fbf1 	bl	8009f08 <xQueueGenericSend>
 8009726:	4603      	mov	r3, r0
 8009728:	2b01      	cmp	r3, #1
 800972a:	d00b      	beq.n	8009744 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009732:	f06f 0301 	mvn.w	r3, #1
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
 8009738:	e004      	b.n	8009744 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800973a:	f06f 0302 	mvn.w	r3, #2
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
 8009740:	e000      	b.n	8009744 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009742:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009746:	4618      	mov	r0, r3
 8009748:	3728      	adds	r7, #40	; 0x28
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000598 	.word	0x20000598
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b08a      	sub	sp, #40	; 0x28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800976a:	2300      	movs	r3, #0
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800976e:	f3ef 8305 	mrs	r3, IPSR
 8009772:	61fb      	str	r3, [r7, #28]
  return(result);
 8009774:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10f      	bne.n	800979a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800977a:	f3ef 8310 	mrs	r3, PRIMASK
 800977e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d105      	bne.n	8009792 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009786:	f3ef 8311 	mrs	r3, BASEPRI
 800978a:	617b      	str	r3, [r7, #20]
  return(result);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d02c      	beq.n	80097ec <osMessageQueueGet+0x94>
 8009792:	4b28      	ldr	r3, [pc, #160]	; (8009834 <osMessageQueueGet+0xdc>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d128      	bne.n	80097ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <osMessageQueueGet+0x54>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <osMessageQueueGet+0x54>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80097ac:	f06f 0303 	mvn.w	r3, #3
 80097b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097b2:	e038      	b.n	8009826 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80097b4:	2300      	movs	r3, #0
 80097b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80097b8:	f107 0310 	add.w	r3, r7, #16
 80097bc:	461a      	mov	r2, r3
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	6a38      	ldr	r0, [r7, #32]
 80097c2:	f000 ffd7 	bl	800a774 <xQueueReceiveFromISR>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d003      	beq.n	80097d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80097cc:	f06f 0302 	mvn.w	r3, #2
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097d2:	e028      	b.n	8009826 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d025      	beq.n	8009826 <osMessageQueueGet+0xce>
 80097da:	4b17      	ldr	r3, [pc, #92]	; (8009838 <osMessageQueueGet+0xe0>)
 80097dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097ea:	e01c      	b.n	8009826 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <osMessageQueueGet+0xa0>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80097f8:	f06f 0303 	mvn.w	r3, #3
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
 80097fe:	e013      	b.n	8009828 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	6a38      	ldr	r0, [r7, #32]
 8009806:	f000 fdbb 	bl	800a380 <xQueueReceive>
 800980a:	4603      	mov	r3, r0
 800980c:	2b01      	cmp	r3, #1
 800980e:	d00b      	beq.n	8009828 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009816:	f06f 0301 	mvn.w	r3, #1
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
 800981c:	e004      	b.n	8009828 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800981e:	f06f 0302 	mvn.w	r3, #2
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
 8009824:	e000      	b.n	8009828 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009826:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800982a:	4618      	mov	r0, r3
 800982c:	3728      	adds	r7, #40	; 0x28
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000598 	.word	0x20000598
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4a07      	ldr	r2, [pc, #28]	; (8009868 <vApplicationGetIdleTaskMemory+0x2c>)
 800984c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4a06      	ldr	r2, [pc, #24]	; (800986c <vApplicationGetIdleTaskMemory+0x30>)
 8009852:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2280      	movs	r2, #128	; 0x80
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	2000059c 	.word	0x2000059c
 800986c:	200005f8 	.word	0x200005f8

08009870 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a07      	ldr	r2, [pc, #28]	; (800989c <vApplicationGetTimerTaskMemory+0x2c>)
 8009880:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4a06      	ldr	r2, [pc, #24]	; (80098a0 <vApplicationGetTimerTaskMemory+0x30>)
 8009886:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800988e:	601a      	str	r2, [r3, #0]
}
 8009890:	bf00      	nop
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	200007f8 	.word	0x200007f8
 80098a0:	20000854 	.word	0x20000854

080098a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f103 0208 	add.w	r2, r3, #8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f103 0208 	add.w	r2, r3, #8
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f103 0208 	add.w	r2, r3, #8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
}
 800993a:	bf00      	nop
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009946:	b480      	push	{r7}
 8009948:	b085      	sub	sp, #20
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d103      	bne.n	8009966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e00c      	b.n	8009980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3308      	adds	r3, #8
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	e002      	b.n	8009974 <vListInsert+0x2e>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	429a      	cmp	r2, r3
 800997e:	d2f6      	bcs.n	800996e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6892      	ldr	r2, [r2, #8]
 80099ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	6852      	ldr	r2, [r2, #4]
 80099d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d103      	bne.n	80099ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	1e5a      	subs	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10c      	bne.n	8009a3a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	b672      	cpsid	i
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	b662      	cpsie	i
 8009a34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009a3a:	f002 fd97 	bl	800c56c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a46:	68f9      	ldr	r1, [r7, #12]
 8009a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	22ff      	movs	r2, #255	; 0xff
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	22ff      	movs	r2, #255	; 0xff
 8009a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d114      	bne.n	8009aba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01a      	beq.n	8009ace <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3310      	adds	r3, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fd3d 	bl	800b51c <xTaskRemoveFromEventList>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d012      	beq.n	8009ace <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <xQueueGenericReset+0xd0>)
 8009aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	e009      	b.n	8009ace <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3310      	adds	r3, #16
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fef0 	bl	80098a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3324      	adds	r3, #36	; 0x24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff feeb 	bl	80098a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ace:	f002 fd81 	bl	800c5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ad2:	2301      	movs	r3, #1
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	e000ed04 	.word	0xe000ed04

08009ae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08e      	sub	sp, #56	; 0x38
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10c      	bne.n	8009b0e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	b672      	cpsid	i
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	b662      	cpsie	i
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10c      	bne.n	8009b2e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	b672      	cpsid	i
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	b662      	cpsie	i
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <xQueueGenericCreateStatic+0x5a>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <xQueueGenericCreateStatic+0x5e>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <xQueueGenericCreateStatic+0x60>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10c      	bne.n	8009b5e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	b672      	cpsid	i
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	b662      	cpsie	i
 8009b58:	623b      	str	r3, [r7, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <xQueueGenericCreateStatic+0x8a>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericCreateStatic+0x8e>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericCreateStatic+0x90>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10c      	bne.n	8009b8e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	b672      	cpsid	i
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	b662      	cpsie	i
 8009b88:	61fb      	str	r3, [r7, #28]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b8e:	2350      	movs	r3, #80	; 0x50
 8009b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b50      	cmp	r3, #80	; 0x50
 8009b96:	d00c      	beq.n	8009bb2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	b672      	cpsid	i
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	b662      	cpsie	i
 8009bac:	61bb      	str	r3, [r7, #24]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00d      	beq.n	8009bda <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 f847 	bl	8009c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3730      	adds	r7, #48	; 0x30
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	; 0x28
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10c      	bne.n	8009c12 <xQueueGenericCreate+0x2e>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	b672      	cpsid	i
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	b662      	cpsie	i
 8009c0c:	613b      	str	r3, [r7, #16]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	e004      	b.n	8009c28 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	3350      	adds	r3, #80	; 0x50
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fdc9 	bl	800c7c4 <pvPortMalloc>
 8009c32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	3350      	adds	r3, #80	; 0x50
 8009c42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c4c:	79fa      	ldrb	r2, [r7, #7]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	4613      	mov	r3, r2
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f805 	bl	8009c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3720      	adds	r7, #32
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c96:	2101      	movs	r1, #1
 8009c98:	69b8      	ldr	r0, [r7, #24]
 8009c9a:	f7ff feb7 	bl	8009a0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f917 	bl	8009f08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	4603      	mov	r3, r0
 8009cea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009cec:	2301      	movs	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	6939      	ldr	r1, [r7, #16]
 8009cfa:	6978      	ldr	r0, [r7, #20]
 8009cfc:	f7ff ff72 	bl	8009be4 <xQueueGenericCreate>
 8009d00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f7ff ffd3 	bl	8009cae <prvInitialiseMutex>

		return xNewQueue;
 8009d08:	68fb      	ldr	r3, [r7, #12]
	}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af02      	add	r7, sp, #8
 8009d18:	4603      	mov	r3, r0
 8009d1a:	6039      	str	r1, [r7, #0]
 8009d1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	2300      	movs	r3, #0
 8009d24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	6939      	ldr	r1, [r7, #16]
 8009d30:	6978      	ldr	r0, [r7, #20]
 8009d32:	f7ff fed5 	bl	8009ae0 <xQueueGenericCreateStatic>
 8009d36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff ffb8 	bl	8009cae <prvInitialiseMutex>

		return xNewQueue;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10c      	bne.n	8009d74 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	b672      	cpsid	i
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	b662      	cpsie	i
 8009d6e:	60fb      	str	r3, [r7, #12]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	689c      	ldr	r4, [r3, #8]
 8009d78:	f001 fd96 	bl	800b8a8 <xTaskGetCurrentTaskHandle>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d111      	bne.n	8009da6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009d94:	2300      	movs	r3, #0
 8009d96:	2200      	movs	r2, #0
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f000 f8b4 	bl	8009f08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	e001      	b.n	8009daa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009daa:	697b      	ldr	r3, [r7, #20]
	}
 8009dac:	4618      	mov	r0, r3
 8009dae:	371c      	adds	r7, #28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd90      	pop	{r4, r7, pc}

08009db4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	b672      	cpsid	i
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	b662      	cpsie	i
 8009ddc:	60fb      	str	r3, [r7, #12]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	689c      	ldr	r4, [r3, #8]
 8009de6:	f001 fd5f 	bl	800b8a8 <xTaskGetCurrentTaskHandle>
 8009dea:	4603      	mov	r3, r0
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d107      	bne.n	8009e00 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	e00c      	b.n	8009e1a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6938      	ldr	r0, [r7, #16]
 8009e04:	f000 fba2 	bl	800a54c <xQueueSemaphoreTake>
 8009e08:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d004      	beq.n	8009e1a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009e1a:	697b      	ldr	r3, [r7, #20]
	}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd90      	pop	{r4, r7, pc}

08009e24 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af02      	add	r7, sp, #8
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10c      	bne.n	8009e50 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	b672      	cpsid	i
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	b662      	cpsie	i
 8009e4a:	61bb      	str	r3, [r7, #24]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d90c      	bls.n	8009e72 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	617b      	str	r3, [r7, #20]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e72:	2302      	movs	r3, #2
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7ff fe2f 	bl	8009ae0 <xQueueGenericCreateStatic>
 8009e82:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e90:	69fb      	ldr	r3, [r7, #28]
	}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10c      	bne.n	8009ec4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	b672      	cpsid	i
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	b662      	cpsie	i
 8009ebe:	613b      	str	r3, [r7, #16]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d90c      	bls.n	8009ee6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	b672      	cpsid	i
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	b662      	cpsie	i
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff fe7a 	bl	8009be4 <xQueueGenericCreate>
 8009ef0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009efe:	697b      	ldr	r3, [r7, #20]
	}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08e      	sub	sp, #56	; 0x38
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f16:	2300      	movs	r3, #0
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10c      	bne.n	8009f3e <xQueueGenericSend+0x36>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	b672      	cpsid	i
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	b662      	cpsie	i
 8009f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d103      	bne.n	8009f4c <xQueueGenericSend+0x44>
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <xQueueGenericSend+0x48>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <xQueueGenericSend+0x4a>
 8009f50:	2300      	movs	r3, #0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <xQueueGenericSend+0x68>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d103      	bne.n	8009f7e <xQueueGenericSend+0x76>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <xQueueGenericSend+0x7a>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <xQueueGenericSend+0x7c>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10c      	bne.n	8009fa2 <xQueueGenericSend+0x9a>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	b672      	cpsid	i
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	b662      	cpsie	i
 8009f9c:	623b      	str	r3, [r7, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fa2:	f001 fc91 	bl	800b8c8 <xTaskGetSchedulerState>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <xQueueGenericSend+0xaa>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <xQueueGenericSend+0xae>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueGenericSend+0xb0>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10c      	bne.n	8009fd6 <xQueueGenericSend+0xce>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	b672      	cpsid	i
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	b662      	cpsie	i
 8009fd0:	61fb      	str	r3, [r7, #28]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fd6:	f002 fac9 	bl	800c56c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d302      	bcc.n	8009fec <xQueueGenericSend+0xe4>
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d129      	bne.n	800a040 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ff2:	f000 fc82 	bl	800a8fa <prvCopyDataToQueue>
 8009ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d010      	beq.n	800a022 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	4618      	mov	r0, r3
 800a006:	f001 fa89 	bl	800b51c <xTaskRemoveFromEventList>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d013      	beq.n	800a038 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a010:	4b3f      	ldr	r3, [pc, #252]	; (800a110 <xQueueGenericSend+0x208>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	e00a      	b.n	800a038 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d007      	beq.n	800a038 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a028:	4b39      	ldr	r3, [pc, #228]	; (800a110 <xQueueGenericSend+0x208>)
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a038:	f002 facc 	bl	800c5d4 <vPortExitCritical>
				return pdPASS;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e063      	b.n	800a108 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a046:	f002 fac5 	bl	800c5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e05c      	b.n	800a108 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fac5 	bl	800b5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a062:	f002 fab7 	bl	800c5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a066:	f001 f82b 	bl	800b0c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a06a:	f002 fa7f 	bl	800c56c <vPortEnterCritical>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a074:	b25b      	sxtb	r3, r3
 800a076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07a:	d103      	bne.n	800a084 <xQueueGenericSend+0x17c>
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a08a:	b25b      	sxtb	r3, r3
 800a08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a090:	d103      	bne.n	800a09a <xQueueGenericSend+0x192>
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a09a:	f002 fa9b 	bl	800c5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a09e:	1d3a      	adds	r2, r7, #4
 800a0a0:	f107 0314 	add.w	r3, r7, #20
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 fab4 	bl	800b614 <xTaskCheckForTimeOut>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d124      	bne.n	800a0fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0b4:	f000 fd19 	bl	800aaea <prvIsQueueFull>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 f9d4 	bl	800b474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ce:	f000 fca4 	bl	800aa1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0d2:	f001 f803 	bl	800b0dc <xTaskResumeAll>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f47f af7c 	bne.w	8009fd6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a0de:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <xQueueGenericSend+0x208>)
 800a0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	e772      	b.n	8009fd6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0f2:	f000 fc92 	bl	800aa1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0f6:	f000 fff1 	bl	800b0dc <xTaskResumeAll>
 800a0fa:	e76c      	b.n	8009fd6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fe:	f000 fc8c 	bl	800aa1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a102:	f000 ffeb 	bl	800b0dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3738      	adds	r7, #56	; 0x38
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	; 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10c      	bne.n	800a146 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	b672      	cpsid	i
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	b662      	cpsie	i
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <xQueueGenericSendFromISR+0x40>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <xQueueGenericSendFromISR+0x44>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <xQueueGenericSendFromISR+0x46>
 800a158:	2300      	movs	r3, #0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10c      	bne.n	800a178 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	b672      	cpsid	i
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	b662      	cpsie	i
 800a172:	623b      	str	r3, [r7, #32]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d103      	bne.n	800a186 <xQueueGenericSendFromISR+0x72>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <xQueueGenericSendFromISR+0x76>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueGenericSendFromISR+0x78>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10c      	bne.n	800a1aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	b672      	cpsid	i
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	b662      	cpsie	i
 800a1a4:	61fb      	str	r3, [r7, #28]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1aa:	f002 fac7 	bl	800c73c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	b672      	cpsid	i
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	b662      	cpsie	i
 800a1c6:	61ba      	str	r2, [r7, #24]
 800a1c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d302      	bcc.n	800a1e0 <xQueueGenericSendFromISR+0xcc>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d12c      	bne.n	800a23a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f0:	f000 fb83 	bl	800a8fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d112      	bne.n	800a224 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b00      	cmp	r3, #0
 800a204:	d016      	beq.n	800a234 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 f986 	bl	800b51c <xTaskRemoveFromEventList>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00e      	beq.n	800a234 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e007      	b.n	800a234 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a228:	3301      	adds	r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	b25a      	sxtb	r2, r3
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a234:	2301      	movs	r3, #1
 800a236:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a238:	e001      	b.n	800a23e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a248:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3738      	adds	r7, #56	; 0x38
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08e      	sub	sp, #56	; 0x38
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10c      	bne.n	800a282 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	b672      	cpsid	i
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	b662      	cpsie	i
 800a27c:	623b      	str	r3, [r7, #32]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	b672      	cpsid	i
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	b662      	cpsie	i
 800a29e:	61fb      	str	r3, [r7, #28]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d103      	bne.n	800a2b4 <xQueueGiveFromISR+0x60>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <xQueueGiveFromISR+0x64>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <xQueueGiveFromISR+0x66>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10c      	bne.n	800a2d8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	b672      	cpsid	i
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	b662      	cpsie	i
 800a2d2:	61bb      	str	r3, [r7, #24]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2d8:	f002 fa30 	bl	800c73c <vPortValidateInterruptPriority>
	__asm volatile
 800a2dc:	f3ef 8211 	mrs	r2, BASEPRI
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	617a      	str	r2, [r7, #20]
 800a2f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a2f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a300:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a308:	429a      	cmp	r2, r3
 800a30a:	d22b      	bcs.n	800a364 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a31e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d112      	bne.n	800a34e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d016      	beq.n	800a35e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	3324      	adds	r3, #36	; 0x24
 800a334:	4618      	mov	r0, r3
 800a336:	f001 f8f1 	bl	800b51c <xTaskRemoveFromEventList>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00e      	beq.n	800a35e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00b      	beq.n	800a35e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2201      	movs	r2, #1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e007      	b.n	800a35e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a352:	3301      	adds	r3, #1
 800a354:	b2db      	uxtb	r3, r3
 800a356:	b25a      	sxtb	r2, r3
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a35e:	2301      	movs	r3, #1
 800a360:	637b      	str	r3, [r7, #52]	; 0x34
 800a362:	e001      	b.n	800a368 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a364:	2300      	movs	r3, #0
 800a366:	637b      	str	r3, [r7, #52]	; 0x34
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f383 8811 	msr	BASEPRI, r3
}
 800a372:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a376:	4618      	mov	r0, r3
 800a378:	3738      	adds	r7, #56	; 0x38
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	; 0x30
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a38c:	2300      	movs	r3, #0
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <xQueueReceive+0x34>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	b672      	cpsid	i
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	b662      	cpsie	i
 800a3ae:	623b      	str	r3, [r7, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <xQueueReceive+0x42>
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <xQueueReceive+0x46>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueReceive+0x48>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10c      	bne.n	800a3e6 <xQueueReceive+0x66>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	b672      	cpsid	i
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	b662      	cpsie	i
 800a3e0:	61fb      	str	r3, [r7, #28]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3e6:	f001 fa6f 	bl	800b8c8 <xTaskGetSchedulerState>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <xQueueReceive+0x76>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <xQueueReceive+0x7a>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <xQueueReceive+0x7c>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10c      	bne.n	800a41a <xQueueReceive+0x9a>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	b672      	cpsid	i
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	b662      	cpsie	i
 800a414:	61bb      	str	r3, [r7, #24]
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a41a:	f002 f8a7 	bl	800c56c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	2b00      	cmp	r3, #0
 800a428:	d01f      	beq.n	800a46a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42e:	f000 face 	bl	800a9ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	1e5a      	subs	r2, r3, #1
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	3310      	adds	r3, #16
 800a446:	4618      	mov	r0, r3
 800a448:	f001 f868 	bl	800b51c <xTaskRemoveFromEventList>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d007      	beq.n	800a462 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a452:	4b3d      	ldr	r3, [pc, #244]	; (800a548 <xQueueReceive+0x1c8>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a462:	f002 f8b7 	bl	800c5d4 <vPortExitCritical>
				return pdPASS;
 800a466:	2301      	movs	r3, #1
 800a468:	e069      	b.n	800a53e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a470:	f002 f8b0 	bl	800c5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a474:	2300      	movs	r3, #0
 800a476:	e062      	b.n	800a53e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	4618      	mov	r0, r3
 800a484:	f001 f8b0 	bl	800b5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a48c:	f002 f8a2 	bl	800c5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a490:	f000 fe16 	bl	800b0c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a494:	f002 f86a 	bl	800c56c <vPortEnterCritical>
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a49e:	b25b      	sxtb	r3, r3
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a4:	d103      	bne.n	800a4ae <xQueueReceive+0x12e>
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4b4:	b25b      	sxtb	r3, r3
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d103      	bne.n	800a4c4 <xQueueReceive+0x144>
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4c4:	f002 f886 	bl	800c5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4c8:	1d3a      	adds	r2, r7, #4
 800a4ca:	f107 0310 	add.w	r3, r7, #16
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f001 f89f 	bl	800b614 <xTaskCheckForTimeOut>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d123      	bne.n	800a524 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 faee 	bl	800aabe <prvIsQueueEmpty>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d017      	beq.n	800a518 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	3324      	adds	r3, #36	; 0x24
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 ffbf 	bl	800b474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f8:	f000 fa8f 	bl	800aa1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4fc:	f000 fdee 	bl	800b0dc <xTaskResumeAll>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d189      	bne.n	800a41a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a506:	4b10      	ldr	r3, [pc, #64]	; (800a548 <xQueueReceive+0x1c8>)
 800a508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	e780      	b.n	800a41a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51a:	f000 fa7e 	bl	800aa1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a51e:	f000 fddd 	bl	800b0dc <xTaskResumeAll>
 800a522:	e77a      	b.n	800a41a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a526:	f000 fa78 	bl	800aa1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a52a:	f000 fdd7 	bl	800b0dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a530:	f000 fac5 	bl	800aabe <prvIsQueueEmpty>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	f43f af6f 	beq.w	800a41a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a53c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3730      	adds	r7, #48	; 0x30
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	; 0x38
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a556:	2300      	movs	r3, #0
 800a558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a55e:	2300      	movs	r3, #0
 800a560:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10c      	bne.n	800a582 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	b672      	cpsid	i
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	b662      	cpsie	i
 800a57c:	623b      	str	r3, [r7, #32]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00c      	beq.n	800a5a4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	b672      	cpsid	i
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	b662      	cpsie	i
 800a59e:	61fb      	str	r3, [r7, #28]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5a4:	f001 f990 	bl	800b8c8 <xTaskGetSchedulerState>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <xQueueSemaphoreTake+0x68>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <xQueueSemaphoreTake+0x6c>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e000      	b.n	800a5ba <xQueueSemaphoreTake+0x6e>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10c      	bne.n	800a5d8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	b672      	cpsid	i
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	b662      	cpsie	i
 800a5d2:	61bb      	str	r3, [r7, #24]
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5d8:	f001 ffc8 	bl	800c56c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d024      	beq.n	800a632 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	1e5a      	subs	r2, r3, #1
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d104      	bne.n	800a602 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a5f8:	f001 fae4 	bl	800bbc4 <pvTaskIncrementMutexHeldCount>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00f      	beq.n	800a62a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	3310      	adds	r3, #16
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 ff84 	bl	800b51c <xTaskRemoveFromEventList>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d007      	beq.n	800a62a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a61a:	4b55      	ldr	r3, [pc, #340]	; (800a770 <xQueueSemaphoreTake+0x224>)
 800a61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a62a:	f001 ffd3 	bl	800c5d4 <vPortExitCritical>
				return pdPASS;
 800a62e:	2301      	movs	r3, #1
 800a630:	e099      	b.n	800a766 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d113      	bne.n	800a660 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00c      	beq.n	800a658 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	617b      	str	r3, [r7, #20]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a658:	f001 ffbc 	bl	800c5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a65c:	2300      	movs	r3, #0
 800a65e:	e082      	b.n	800a766 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a666:	f107 030c 	add.w	r3, r7, #12
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 ffbc 	bl	800b5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a670:	2301      	movs	r3, #1
 800a672:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a674:	f001 ffae 	bl	800c5d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a678:	f000 fd22 	bl	800b0c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a67c:	f001 ff76 	bl	800c56c <vPortEnterCritical>
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a686:	b25b      	sxtb	r3, r3
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d103      	bne.n	800a696 <xQueueSemaphoreTake+0x14a>
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d103      	bne.n	800a6ac <xQueueSemaphoreTake+0x160>
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ac:	f001 ff92 	bl	800c5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6b0:	463a      	mov	r2, r7
 800a6b2:	f107 030c 	add.w	r3, r7, #12
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 ffab 	bl	800b614 <xTaskCheckForTimeOut>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d132      	bne.n	800a72a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6c6:	f000 f9fa 	bl	800aabe <prvIsQueueEmpty>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d026      	beq.n	800a71e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a6d8:	f001 ff48 	bl	800c56c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 f90f 	bl	800b904 <xTaskPriorityInherit>
 800a6e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a6e8:	f001 ff74 	bl	800c5d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	3324      	adds	r3, #36	; 0x24
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 febd 	bl	800b474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6fc:	f000 f98d 	bl	800aa1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a700:	f000 fcec 	bl	800b0dc <xTaskResumeAll>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	f47f af66 	bne.w	800a5d8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a70c:	4b18      	ldr	r3, [pc, #96]	; (800a770 <xQueueSemaphoreTake+0x224>)
 800a70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	e75c      	b.n	800a5d8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a720:	f000 f97b 	bl	800aa1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a724:	f000 fcda 	bl	800b0dc <xTaskResumeAll>
 800a728:	e756      	b.n	800a5d8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a72a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a72c:	f000 f975 	bl	800aa1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a730:	f000 fcd4 	bl	800b0dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a736:	f000 f9c2 	bl	800aabe <prvIsQueueEmpty>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f43f af4b 	beq.w	800a5d8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00d      	beq.n	800a764 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a748:	f001 ff10 	bl	800c56c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a74e:	f000 f8bc 	bl	800a8ca <prvGetDisinheritPriorityAfterTimeout>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 f9ac 	bl	800bab8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a760:	f001 ff38 	bl	800c5d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a766:	4618      	mov	r0, r3
 800a768:	3738      	adds	r7, #56	; 0x38
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08e      	sub	sp, #56	; 0x38
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10c      	bne.n	800a7a4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	b672      	cpsid	i
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	b662      	cpsie	i
 800a79e:	623b      	str	r3, [r7, #32]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d103      	bne.n	800a7b2 <xQueueReceiveFromISR+0x3e>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <xQueueReceiveFromISR+0x42>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <xQueueReceiveFromISR+0x44>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10c      	bne.n	800a7d6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	b672      	cpsid	i
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	b662      	cpsie	i
 800a7d0:	61fb      	str	r3, [r7, #28]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7d6:	f001 ffb1 	bl	800c73c <vPortValidateInterruptPriority>
	__asm volatile
 800a7da:	f3ef 8211 	mrs	r2, BASEPRI
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	b672      	cpsid	i
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	b662      	cpsie	i
 800a7f2:	61ba      	str	r2, [r7, #24]
 800a7f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02f      	beq.n	800a866 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a810:	68b9      	ldr	r1, [r7, #8]
 800a812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a814:	f000 f8db 	bl	800a9ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	1e5a      	subs	r2, r3, #1
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a828:	d112      	bne.n	800a850 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d016      	beq.n	800a860 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	3310      	adds	r3, #16
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fe70 	bl	800b51c <xTaskRemoveFromEventList>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00e      	beq.n	800a860 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e007      	b.n	800a860 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a854:	3301      	adds	r3, #1
 800a856:	b2db      	uxtb	r3, r3
 800a858:	b25a      	sxtb	r2, r3
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a860:	2301      	movs	r3, #1
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
 800a864:	e001      	b.n	800a86a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f383 8811 	msr	BASEPRI, r3
}
 800a874:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3738      	adds	r7, #56	; 0x38
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10c      	bne.n	800a8ac <vQueueDelete+0x2c>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	b672      	cpsid	i
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	b662      	cpsie	i
 800a8a6:	60bb      	str	r3, [r7, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	e7fe      	b.n	800a8aa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 f95f 	bl	800ab70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d102      	bne.n	800a8c2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f002 f84b 	bl	800c958 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8c2:	bf00      	nop
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e001      	b.n	800a8ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
	}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10d      	bne.n	800a934 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d14d      	bne.n	800a9bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	4618      	mov	r0, r3
 800a926:	f001 f855 	bl	800b9d4 <xTaskPriorityDisinherit>
 800a92a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	609a      	str	r2, [r3, #8]
 800a932:	e043      	b.n	800a9bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d119      	bne.n	800a96e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6858      	ldr	r0, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a942:	461a      	mov	r2, r3
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	f01d fffd 	bl	8028944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	441a      	add	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	d32b      	bcc.n	800a9bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	605a      	str	r2, [r3, #4]
 800a96c:	e026      	b.n	800a9bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	68d8      	ldr	r0, [r3, #12]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	461a      	mov	r2, r3
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	f01d ffe3 	bl	8028944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	425b      	negs	r3, r3
 800a988:	441a      	add	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68da      	ldr	r2, [r3, #12]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d207      	bcs.n	800a9aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	425b      	negs	r3, r3
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d105      	bne.n	800a9bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9c4:	697b      	ldr	r3, [r7, #20]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d018      	beq.n	800aa12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	441a      	add	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d303      	bcc.n	800aa02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68d9      	ldr	r1, [r3, #12]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6838      	ldr	r0, [r7, #0]
 800aa0e:	f01d ff99 	bl	8028944 <memcpy>
	}
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa22:	f001 fda3 	bl	800c56c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa2e:	e011      	b.n	800aa54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d012      	beq.n	800aa5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3324      	adds	r3, #36	; 0x24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fd6d 	bl	800b51c <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa48:	f000 fe4a 	bl	800b6e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dce9      	bgt.n	800aa30 <prvUnlockQueue+0x16>
 800aa5c:	e000      	b.n	800aa60 <prvUnlockQueue+0x46>
					break;
 800aa5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	22ff      	movs	r2, #255	; 0xff
 800aa64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa68:	f001 fdb4 	bl	800c5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa6c:	f001 fd7e 	bl	800c56c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa78:	e011      	b.n	800aa9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d012      	beq.n	800aaa8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3310      	adds	r3, #16
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 fd48 	bl	800b51c <xTaskRemoveFromEventList>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa92:	f000 fe25 	bl	800b6e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dce9      	bgt.n	800aa7a <prvUnlockQueue+0x60>
 800aaa6:	e000      	b.n	800aaaa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaa8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	22ff      	movs	r2, #255	; 0xff
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aab2:	f001 fd8f 	bl	800c5d4 <vPortExitCritical>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aac6:	f001 fd51 	bl	800c56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aad2:	2301      	movs	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	e001      	b.n	800aadc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aadc:	f001 fd7a 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800aae0:	68fb      	ldr	r3, [r7, #12]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaf2:	f001 fd3b 	bl	800c56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d102      	bne.n	800ab08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	e001      	b.n	800ab0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f001 fd62 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800ab10:	68fb      	ldr	r3, [r7, #12]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e014      	b.n	800ab56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab2c:	4a0f      	ldr	r2, [pc, #60]	; (800ab6c <vQueueAddToRegistry+0x50>)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10b      	bne.n	800ab50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab38:	490c      	ldr	r1, [pc, #48]	; (800ab6c <vQueueAddToRegistry+0x50>)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab42:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <vQueueAddToRegistry+0x50>)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	4413      	add	r3, r2
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab4e:	e006      	b.n	800ab5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3301      	adds	r3, #1
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b07      	cmp	r3, #7
 800ab5a:	d9e7      	bls.n	800ab2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20000c54 	.word	0x20000c54

0800ab70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e016      	b.n	800abac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab7e:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <vQueueUnregisterQueue+0x50>)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	4413      	add	r3, r2
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d10b      	bne.n	800aba6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab8e:	4a0c      	ldr	r2, [pc, #48]	; (800abc0 <vQueueUnregisterQueue+0x50>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2100      	movs	r1, #0
 800ab94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <vQueueUnregisterQueue+0x50>)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	4413      	add	r3, r2
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]
				break;
 800aba4:	e006      	b.n	800abb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3301      	adds	r3, #1
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b07      	cmp	r3, #7
 800abb0:	d9e5      	bls.n	800ab7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000c54 	.word	0x20000c54

0800abc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abd4:	f001 fcca 	bl	800c56c <vPortEnterCritical>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abde:	b25b      	sxtb	r3, r3
 800abe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe4:	d103      	bne.n	800abee <vQueueWaitForMessageRestricted+0x2a>
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf4:	b25b      	sxtb	r3, r3
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfa:	d103      	bne.n	800ac04 <vQueueWaitForMessageRestricted+0x40>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac04:	f001 fce6 	bl	800c5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	3324      	adds	r3, #36	; 0x24
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fc51 	bl	800b4c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac1e:	6978      	ldr	r0, [r7, #20]
 800ac20:	f7ff fefb 	bl	800aa1a <prvUnlockQueue>
	}
 800ac24:	bf00      	nop
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10c      	bne.n	800ac5a <xTaskCreateStatic+0x2e>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	b672      	cpsid	i
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	b662      	cpsie	i
 800ac54:	623b      	str	r3, [r7, #32]
}
 800ac56:	bf00      	nop
 800ac58:	e7fe      	b.n	800ac58 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10c      	bne.n	800ac7a <xTaskCreateStatic+0x4e>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	b672      	cpsid	i
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	b662      	cpsie	i
 800ac74:	61fb      	str	r3, [r7, #28]
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac7a:	235c      	movs	r3, #92	; 0x5c
 800ac7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2b5c      	cmp	r3, #92	; 0x5c
 800ac82:	d00c      	beq.n	800ac9e <xTaskCreateStatic+0x72>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	b672      	cpsid	i
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	b662      	cpsie	i
 800ac98:	61bb      	str	r3, [r7, #24]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d01e      	beq.n	800ace4 <xTaskCreateStatic+0xb8>
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01b      	beq.n	800ace4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	2202      	movs	r2, #2
 800acba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acbe:	2300      	movs	r3, #0
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	f107 0314 	add.w	r3, r7, #20
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f850 	bl	800ad7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acde:	f000 f8df 	bl	800aea0 <prvAddNewTaskToReadyList>
 800ace2:	e001      	b.n	800ace8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ace8:	697b      	ldr	r3, [r7, #20]
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	; 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b08c      	sub	sp, #48	; 0x30
 800acf6:	af04      	add	r7, sp, #16
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	603b      	str	r3, [r7, #0]
 800acfe:	4613      	mov	r3, r2
 800ad00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 fd5c 	bl	800c7c4 <pvPortMalloc>
 800ad0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00e      	beq.n	800ad32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad14:	205c      	movs	r0, #92	; 0x5c
 800ad16:	f001 fd55 	bl	800c7c4 <pvPortMalloc>
 800ad1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
 800ad28:	e005      	b.n	800ad36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad2a:	6978      	ldr	r0, [r7, #20]
 800ad2c:	f001 fe14 	bl	800c958 <vPortFree>
 800ad30:	e001      	b.n	800ad36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d017      	beq.n	800ad6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad44:	88fa      	ldrh	r2, [r7, #6]
 800ad46:	2300      	movs	r3, #0
 800ad48:	9303      	str	r3, [sp, #12]
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 f80e 	bl	800ad7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad60:	69f8      	ldr	r0, [r7, #28]
 800ad62:	f000 f89d 	bl	800aea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad66:	2301      	movs	r3, #1
 800ad68:	61bb      	str	r3, [r7, #24]
 800ad6a:	e002      	b.n	800ad72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad72:	69bb      	ldr	r3, [r7, #24]
	}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3720      	adds	r7, #32
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	461a      	mov	r2, r3
 800ad94:	21a5      	movs	r1, #165	; 0xa5
 800ad96:	f01d fde3 	bl	8028960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ada4:	440b      	add	r3, r1
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	f023 0307 	bic.w	r3, r3, #7
 800adb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00c      	beq.n	800add8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	b672      	cpsid	i
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	b662      	cpsie	i
 800add2:	617b      	str	r3, [r7, #20]
}
 800add4:	bf00      	nop
 800add6:	e7fe      	b.n	800add6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01f      	beq.n	800ae1e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adde:	2300      	movs	r3, #0
 800ade0:	61fb      	str	r3, [r7, #28]
 800ade2:	e012      	b.n	800ae0a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	4413      	add	r3, r2
 800adea:	7819      	ldrb	r1, [r3, #0]
 800adec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4413      	add	r3, r2
 800adf2:	3334      	adds	r3, #52	; 0x34
 800adf4:	460a      	mov	r2, r1
 800adf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	4413      	add	r3, r2
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d006      	beq.n	800ae12 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	3301      	adds	r3, #1
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	2b0f      	cmp	r3, #15
 800ae0e:	d9e9      	bls.n	800ade4 <prvInitialiseNewTask+0x68>
 800ae10:	e000      	b.n	800ae14 <prvInitialiseNewTask+0x98>
			{
				break;
 800ae12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae1c:	e003      	b.n	800ae26 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	2b37      	cmp	r3, #55	; 0x37
 800ae2a:	d901      	bls.n	800ae30 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae2c:	2337      	movs	r3, #55	; 0x37
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	2200      	movs	r2, #0
 800ae40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	3304      	adds	r3, #4
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fd4c 	bl	80098e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	3318      	adds	r3, #24
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe fd47 	bl	80098e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	2200      	movs	r2, #0
 800ae70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	68f9      	ldr	r1, [r7, #12]
 800ae7e:	69b8      	ldr	r0, [r7, #24]
 800ae80:	f001 fa64 	bl	800c34c <pxPortInitialiseStack>
 800ae84:	4602      	mov	r2, r0
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae96:	bf00      	nop
 800ae98:	3720      	adds	r7, #32
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aea8:	f001 fb60 	bl	800c56c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeac:	4b2d      	ldr	r3, [pc, #180]	; (800af64 <prvAddNewTaskToReadyList+0xc4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	4a2c      	ldr	r2, [pc, #176]	; (800af64 <prvAddNewTaskToReadyList+0xc4>)
 800aeb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aeb6:	4b2c      	ldr	r3, [pc, #176]	; (800af68 <prvAddNewTaskToReadyList+0xc8>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aebe:	4a2a      	ldr	r2, [pc, #168]	; (800af68 <prvAddNewTaskToReadyList+0xc8>)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aec4:	4b27      	ldr	r3, [pc, #156]	; (800af64 <prvAddNewTaskToReadyList+0xc4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d110      	bne.n	800aeee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aecc:	f000 fc2c 	bl	800b728 <prvInitialiseTaskLists>
 800aed0:	e00d      	b.n	800aeee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aed2:	4b26      	ldr	r3, [pc, #152]	; (800af6c <prvAddNewTaskToReadyList+0xcc>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d109      	bne.n	800aeee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aeda:	4b23      	ldr	r3, [pc, #140]	; (800af68 <prvAddNewTaskToReadyList+0xc8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d802      	bhi.n	800aeee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aee8:	4a1f      	ldr	r2, [pc, #124]	; (800af68 <prvAddNewTaskToReadyList+0xc8>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aeee:	4b20      	ldr	r3, [pc, #128]	; (800af70 <prvAddNewTaskToReadyList+0xd0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3301      	adds	r3, #1
 800aef4:	4a1e      	ldr	r2, [pc, #120]	; (800af70 <prvAddNewTaskToReadyList+0xd0>)
 800aef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <prvAddNewTaskToReadyList+0xd0>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b1b      	ldr	r3, [pc, #108]	; (800af74 <prvAddNewTaskToReadyList+0xd4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d903      	bls.n	800af14 <prvAddNewTaskToReadyList+0x74>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	4a18      	ldr	r2, [pc, #96]	; (800af74 <prvAddNewTaskToReadyList+0xd4>)
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4a15      	ldr	r2, [pc, #84]	; (800af78 <prvAddNewTaskToReadyList+0xd8>)
 800af22:	441a      	add	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3304      	adds	r3, #4
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	f7fe fce7 	bl	80098fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af30:	f001 fb50 	bl	800c5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af34:	4b0d      	ldr	r3, [pc, #52]	; (800af6c <prvAddNewTaskToReadyList+0xcc>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00e      	beq.n	800af5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <prvAddNewTaskToReadyList+0xc8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	429a      	cmp	r2, r3
 800af48:	d207      	bcs.n	800af5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <prvAddNewTaskToReadyList+0xdc>)
 800af4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20001168 	.word	0x20001168
 800af68:	20000c94 	.word	0x20000c94
 800af6c:	20001174 	.word	0x20001174
 800af70:	20001184 	.word	0x20001184
 800af74:	20001170 	.word	0x20001170
 800af78:	20000c98 	.word	0x20000c98
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d019      	beq.n	800afc6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af92:	4b14      	ldr	r3, [pc, #80]	; (800afe4 <vTaskDelay+0x64>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00c      	beq.n	800afb4 <vTaskDelay+0x34>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	b672      	cpsid	i
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	b662      	cpsie	i
 800afae:	60bb      	str	r3, [r7, #8]
}
 800afb0:	bf00      	nop
 800afb2:	e7fe      	b.n	800afb2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800afb4:	f000 f884 	bl	800b0c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afb8:	2100      	movs	r1, #0
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fe16 	bl	800bbec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afc0:	f000 f88c 	bl	800b0dc <xTaskResumeAll>
 800afc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d107      	bne.n	800afdc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800afcc:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <vTaskDelay+0x68>)
 800afce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20001190 	.word	0x20001190
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08a      	sub	sp, #40	; 0x28
 800aff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800affa:	463a      	mov	r2, r7
 800affc:	1d39      	adds	r1, r7, #4
 800affe:	f107 0308 	add.w	r3, r7, #8
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fc1a 	bl	800983c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	9202      	str	r2, [sp, #8]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	2300      	movs	r3, #0
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	2300      	movs	r3, #0
 800b018:	460a      	mov	r2, r1
 800b01a:	4923      	ldr	r1, [pc, #140]	; (800b0a8 <vTaskStartScheduler+0xbc>)
 800b01c:	4823      	ldr	r0, [pc, #140]	; (800b0ac <vTaskStartScheduler+0xc0>)
 800b01e:	f7ff fe05 	bl	800ac2c <xTaskCreateStatic>
 800b022:	4603      	mov	r3, r0
 800b024:	4a22      	ldr	r2, [pc, #136]	; (800b0b0 <vTaskStartScheduler+0xc4>)
 800b026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b028:	4b21      	ldr	r3, [pc, #132]	; (800b0b0 <vTaskStartScheduler+0xc4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b030:	2301      	movs	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e001      	b.n	800b03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b036:	2300      	movs	r3, #0
 800b038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d102      	bne.n	800b046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b040:	f000 fe28 	bl	800bc94 <xTimerCreateTimerTask>
 800b044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d118      	bne.n	800b07e <vTaskStartScheduler+0x92>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	b672      	cpsid	i
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	b662      	cpsie	i
 800b060:	613b      	str	r3, [r7, #16]
}
 800b062:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b064:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <vTaskStartScheduler+0xc8>)
 800b066:	f04f 32ff 	mov.w	r2, #4294967295
 800b06a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b06c:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <vTaskStartScheduler+0xcc>)
 800b06e:	2201      	movs	r2, #1
 800b070:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b072:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <vTaskStartScheduler+0xd0>)
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b078:	f001 f9fa 	bl	800c470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b07c:	e010      	b.n	800b0a0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d10c      	bne.n	800b0a0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	b672      	cpsid	i
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	b662      	cpsie	i
 800b09a:	60fb      	str	r3, [r7, #12]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <vTaskStartScheduler+0xb2>
}
 800b0a0:	bf00      	nop
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	08029a20 	.word	0x08029a20
 800b0ac:	0800b6f9 	.word	0x0800b6f9
 800b0b0:	2000118c 	.word	0x2000118c
 800b0b4:	20001188 	.word	0x20001188
 800b0b8:	20001174 	.word	0x20001174
 800b0bc:	2000116c 	.word	0x2000116c

0800b0c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0c4:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <vTaskSuspendAll+0x18>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	4a03      	ldr	r2, [pc, #12]	; (800b0d8 <vTaskSuspendAll+0x18>)
 800b0cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b0ce:	bf00      	nop
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	20001190 	.word	0x20001190

0800b0dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0ea:	4b43      	ldr	r3, [pc, #268]	; (800b1f8 <xTaskResumeAll+0x11c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10c      	bne.n	800b10c <xTaskResumeAll+0x30>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	b672      	cpsid	i
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	b662      	cpsie	i
 800b106:	603b      	str	r3, [r7, #0]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b10c:	f001 fa2e 	bl	800c56c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b110:	4b39      	ldr	r3, [pc, #228]	; (800b1f8 <xTaskResumeAll+0x11c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3b01      	subs	r3, #1
 800b116:	4a38      	ldr	r2, [pc, #224]	; (800b1f8 <xTaskResumeAll+0x11c>)
 800b118:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b11a:	4b37      	ldr	r3, [pc, #220]	; (800b1f8 <xTaskResumeAll+0x11c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d162      	bne.n	800b1e8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b122:	4b36      	ldr	r3, [pc, #216]	; (800b1fc <xTaskResumeAll+0x120>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d05e      	beq.n	800b1e8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b12a:	e02f      	b.n	800b18c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12c:	4b34      	ldr	r3, [pc, #208]	; (800b200 <xTaskResumeAll+0x124>)
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3318      	adds	r3, #24
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fc3d 	bl	80099b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3304      	adds	r3, #4
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fc38 	bl	80099b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14c:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <xTaskResumeAll+0x128>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d903      	bls.n	800b15c <xTaskResumeAll+0x80>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	4a2a      	ldr	r2, [pc, #168]	; (800b204 <xTaskResumeAll+0x128>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4a27      	ldr	r2, [pc, #156]	; (800b208 <xTaskResumeAll+0x12c>)
 800b16a:	441a      	add	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3304      	adds	r3, #4
 800b170:	4619      	mov	r1, r3
 800b172:	4610      	mov	r0, r2
 800b174:	f7fe fbc3 	bl	80098fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4b23      	ldr	r3, [pc, #140]	; (800b20c <xTaskResumeAll+0x130>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	429a      	cmp	r2, r3
 800b184:	d302      	bcc.n	800b18c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b186:	4b22      	ldr	r3, [pc, #136]	; (800b210 <xTaskResumeAll+0x134>)
 800b188:	2201      	movs	r2, #1
 800b18a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b18c:	4b1c      	ldr	r3, [pc, #112]	; (800b200 <xTaskResumeAll+0x124>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1cb      	bne.n	800b12c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b19a:	f000 fb65 	bl	800b868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <xTaskResumeAll+0x138>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d010      	beq.n	800b1cc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1aa:	f000 f847 	bl	800b23c <xTaskIncrementTick>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b1b4:	4b16      	ldr	r3, [pc, #88]	; (800b210 <xTaskResumeAll+0x134>)
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1f1      	bne.n	800b1aa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b1c6:	4b13      	ldr	r3, [pc, #76]	; (800b214 <xTaskResumeAll+0x138>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1cc:	4b10      	ldr	r3, [pc, #64]	; (800b210 <xTaskResumeAll+0x134>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d009      	beq.n	800b1e8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <xTaskResumeAll+0x13c>)
 800b1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1e8:	f001 f9f4 	bl	800c5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20001190 	.word	0x20001190
 800b1fc:	20001168 	.word	0x20001168
 800b200:	20001128 	.word	0x20001128
 800b204:	20001170 	.word	0x20001170
 800b208:	20000c98 	.word	0x20000c98
 800b20c:	20000c94 	.word	0x20000c94
 800b210:	2000117c 	.word	0x2000117c
 800b214:	20001178 	.word	0x20001178
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b222:	4b05      	ldr	r3, [pc, #20]	; (800b238 <xTaskGetTickCount+0x1c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b228:	687b      	ldr	r3, [r7, #4]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	2000116c 	.word	0x2000116c

0800b23c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b246:	4b50      	ldr	r3, [pc, #320]	; (800b388 <xTaskIncrementTick+0x14c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 808b 	bne.w	800b366 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b250:	4b4e      	ldr	r3, [pc, #312]	; (800b38c <xTaskIncrementTick+0x150>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b258:	4a4c      	ldr	r2, [pc, #304]	; (800b38c <xTaskIncrementTick+0x150>)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d122      	bne.n	800b2aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b264:	4b4a      	ldr	r3, [pc, #296]	; (800b390 <xTaskIncrementTick+0x154>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	b672      	cpsid	i
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	b662      	cpsie	i
 800b282:	603b      	str	r3, [r7, #0]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xTaskIncrementTick+0x4a>
 800b288:	4b41      	ldr	r3, [pc, #260]	; (800b390 <xTaskIncrementTick+0x154>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	4b41      	ldr	r3, [pc, #260]	; (800b394 <xTaskIncrementTick+0x158>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a3f      	ldr	r2, [pc, #252]	; (800b390 <xTaskIncrementTick+0x154>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	4a3f      	ldr	r2, [pc, #252]	; (800b394 <xTaskIncrementTick+0x158>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	4b3e      	ldr	r3, [pc, #248]	; (800b398 <xTaskIncrementTick+0x15c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	4a3d      	ldr	r2, [pc, #244]	; (800b398 <xTaskIncrementTick+0x15c>)
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	f000 fadf 	bl	800b868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2aa:	4b3c      	ldr	r3, [pc, #240]	; (800b39c <xTaskIncrementTick+0x160>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d349      	bcc.n	800b348 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b4:	4b36      	ldr	r3, [pc, #216]	; (800b390 <xTaskIncrementTick+0x154>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d104      	bne.n	800b2c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2be:	4b37      	ldr	r3, [pc, #220]	; (800b39c <xTaskIncrementTick+0x160>)
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c4:	601a      	str	r2, [r3, #0]
					break;
 800b2c6:	e03f      	b.n	800b348 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c8:	4b31      	ldr	r3, [pc, #196]	; (800b390 <xTaskIncrementTick+0x154>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d203      	bcs.n	800b2e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2e0:	4a2e      	ldr	r2, [pc, #184]	; (800b39c <xTaskIncrementTick+0x160>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2e6:	e02f      	b.n	800b348 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fb63 	bl	80099b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d004      	beq.n	800b304 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	3318      	adds	r3, #24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fb5a 	bl	80099b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <xTaskIncrementTick+0x164>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d903      	bls.n	800b318 <xTaskIncrementTick+0xdc>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	4a22      	ldr	r2, [pc, #136]	; (800b3a0 <xTaskIncrementTick+0x164>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4a1f      	ldr	r2, [pc, #124]	; (800b3a4 <xTaskIncrementTick+0x168>)
 800b326:	441a      	add	r2, r3
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7fe fae5 	bl	80098fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <xTaskIncrementTick+0x16c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33e:	429a      	cmp	r2, r3
 800b340:	d3b8      	bcc.n	800b2b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b342:	2301      	movs	r3, #1
 800b344:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b346:	e7b5      	b.n	800b2b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b348:	4b17      	ldr	r3, [pc, #92]	; (800b3a8 <xTaskIncrementTick+0x16c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34e:	4915      	ldr	r1, [pc, #84]	; (800b3a4 <xTaskIncrementTick+0x168>)
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d907      	bls.n	800b370 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b360:	2301      	movs	r3, #1
 800b362:	617b      	str	r3, [r7, #20]
 800b364:	e004      	b.n	800b370 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b366:	4b11      	ldr	r3, [pc, #68]	; (800b3ac <xTaskIncrementTick+0x170>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	4a0f      	ldr	r2, [pc, #60]	; (800b3ac <xTaskIncrementTick+0x170>)
 800b36e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <xTaskIncrementTick+0x174>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b37c:	697b      	ldr	r3, [r7, #20]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20001190 	.word	0x20001190
 800b38c:	2000116c 	.word	0x2000116c
 800b390:	20001120 	.word	0x20001120
 800b394:	20001124 	.word	0x20001124
 800b398:	20001180 	.word	0x20001180
 800b39c:	20001188 	.word	0x20001188
 800b3a0:	20001170 	.word	0x20001170
 800b3a4:	20000c98 	.word	0x20000c98
 800b3a8:	20000c94 	.word	0x20000c94
 800b3ac:	20001178 	.word	0x20001178
 800b3b0:	2000117c 	.word	0x2000117c

0800b3b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3ba:	4b29      	ldr	r3, [pc, #164]	; (800b460 <vTaskSwitchContext+0xac>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3c2:	4b28      	ldr	r3, [pc, #160]	; (800b464 <vTaskSwitchContext+0xb0>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3c8:	e043      	b.n	800b452 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b3ca:	4b26      	ldr	r3, [pc, #152]	; (800b464 <vTaskSwitchContext+0xb0>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b25      	ldr	r3, [pc, #148]	; (800b468 <vTaskSwitchContext+0xb4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e012      	b.n	800b3fe <vTaskSwitchContext+0x4a>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10c      	bne.n	800b3f8 <vTaskSwitchContext+0x44>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	b672      	cpsid	i
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	b662      	cpsie	i
 800b3f2:	607b      	str	r3, [r7, #4]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <vTaskSwitchContext+0x42>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	491b      	ldr	r1, [pc, #108]	; (800b46c <vTaskSwitchContext+0xb8>)
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4613      	mov	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	440b      	add	r3, r1
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0e2      	beq.n	800b3d8 <vTaskSwitchContext+0x24>
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4a13      	ldr	r2, [pc, #76]	; (800b46c <vTaskSwitchContext+0xb8>)
 800b41e:	4413      	add	r3, r2
 800b420:	60bb      	str	r3, [r7, #8]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	605a      	str	r2, [r3, #4]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	685a      	ldr	r2, [r3, #4]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3308      	adds	r3, #8
 800b434:	429a      	cmp	r2, r3
 800b436:	d104      	bne.n	800b442 <vTaskSwitchContext+0x8e>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	605a      	str	r2, [r3, #4]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	4a09      	ldr	r2, [pc, #36]	; (800b470 <vTaskSwitchContext+0xbc>)
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	4a06      	ldr	r2, [pc, #24]	; (800b468 <vTaskSwitchContext+0xb4>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6013      	str	r3, [r2, #0]
}
 800b452:	bf00      	nop
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20001190 	.word	0x20001190
 800b464:	2000117c 	.word	0x2000117c
 800b468:	20001170 	.word	0x20001170
 800b46c:	20000c98 	.word	0x20000c98
 800b470:	20000c94 	.word	0x20000c94

0800b474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10c      	bne.n	800b49e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	b672      	cpsid	i
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	b662      	cpsie	i
 800b498:	60fb      	str	r3, [r7, #12]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <vTaskPlaceOnEventList+0x48>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fe fa4d 	bl	8009946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	6838      	ldr	r0, [r7, #0]
 800b4b0:	f000 fb9c 	bl	800bbec <prvAddCurrentTaskToDelayedList>
}
 800b4b4:	bf00      	nop
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000c94 	.word	0x20000c94

0800b4c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10c      	bne.n	800b4ec <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	b672      	cpsid	i
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	b662      	cpsie	i
 800b4e6:	617b      	str	r3, [r7, #20]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <vTaskPlaceOnEventListRestricted+0x58>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3318      	adds	r3, #24
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f7fe fa02 	bl	80098fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	68b8      	ldr	r0, [r7, #8]
 800b50a:	f000 fb6f 	bl	800bbec <prvAddCurrentTaskToDelayedList>
	}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20000c94 	.word	0x20000c94

0800b51c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10c      	bne.n	800b54c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	b672      	cpsid	i
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	b662      	cpsie	i
 800b546:	60fb      	str	r3, [r7, #12]
}
 800b548:	bf00      	nop
 800b54a:	e7fe      	b.n	800b54a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3318      	adds	r3, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe fa31 	bl	80099b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b556:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <xTaskRemoveFromEventList+0xb4>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d11d      	bne.n	800b59a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	3304      	adds	r3, #4
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fa28 	bl	80099b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4b19      	ldr	r3, [pc, #100]	; (800b5d4 <xTaskRemoveFromEventList+0xb8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d903      	bls.n	800b57c <xTaskRemoveFromEventList+0x60>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	4a16      	ldr	r2, [pc, #88]	; (800b5d4 <xTaskRemoveFromEventList+0xb8>)
 800b57a:	6013      	str	r3, [r2, #0]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b580:	4613      	mov	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <xTaskRemoveFromEventList+0xbc>)
 800b58a:	441a      	add	r2, r3
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	3304      	adds	r3, #4
 800b590:	4619      	mov	r1, r3
 800b592:	4610      	mov	r0, r2
 800b594:	f7fe f9b3 	bl	80098fe <vListInsertEnd>
 800b598:	e005      	b.n	800b5a6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	3318      	adds	r3, #24
 800b59e:	4619      	mov	r1, r3
 800b5a0:	480e      	ldr	r0, [pc, #56]	; (800b5dc <xTaskRemoveFromEventList+0xc0>)
 800b5a2:	f7fe f9ac 	bl	80098fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <xTaskRemoveFromEventList+0xc4>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d905      	bls.n	800b5c0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5b8:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <xTaskRemoveFromEventList+0xc8>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e001      	b.n	800b5c4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5c4:	697b      	ldr	r3, [r7, #20]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20001190 	.word	0x20001190
 800b5d4:	20001170 	.word	0x20001170
 800b5d8:	20000c98 	.word	0x20000c98
 800b5dc:	20001128 	.word	0x20001128
 800b5e0:	20000c94 	.word	0x20000c94
 800b5e4:	2000117c 	.word	0x2000117c

0800b5e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <vTaskInternalSetTimeOutState+0x24>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5f8:	4b05      	ldr	r3, [pc, #20]	; (800b610 <vTaskInternalSetTimeOutState+0x28>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	605a      	str	r2, [r3, #4]
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20001180 	.word	0x20001180
 800b610:	2000116c 	.word	0x2000116c

0800b614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10c      	bne.n	800b63e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	b672      	cpsid	i
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	b662      	cpsie	i
 800b638:	613b      	str	r3, [r7, #16]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10c      	bne.n	800b65e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	b672      	cpsid	i
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	b662      	cpsie	i
 800b658:	60fb      	str	r3, [r7, #12]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b65e:	f000 ff85 	bl	800c56c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b662:	4b1d      	ldr	r3, [pc, #116]	; (800b6d8 <xTaskCheckForTimeOut+0xc4>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d102      	bne.n	800b682 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e023      	b.n	800b6ca <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <xTaskCheckForTimeOut+0xc8>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d007      	beq.n	800b69e <xTaskCheckForTimeOut+0x8a>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	429a      	cmp	r2, r3
 800b696:	d302      	bcc.n	800b69e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e015      	b.n	800b6ca <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d20b      	bcs.n	800b6c0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ff97 	bl	800b5e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	e004      	b.n	800b6ca <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6ca:	f000 ff83 	bl	800c5d4 <vPortExitCritical>

	return xReturn;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3720      	adds	r7, #32
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	2000116c 	.word	0x2000116c
 800b6dc:	20001180 	.word	0x20001180

0800b6e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6e4:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <vTaskMissedYield+0x14>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	2000117c 	.word	0x2000117c

0800b6f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b700:	f000 f852 	bl	800b7a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b704:	4b06      	ldr	r3, [pc, #24]	; (800b720 <prvIdleTask+0x28>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d9f9      	bls.n	800b700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b70c:	4b05      	ldr	r3, [pc, #20]	; (800b724 <prvIdleTask+0x2c>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b71c:	e7f0      	b.n	800b700 <prvIdleTask+0x8>
 800b71e:	bf00      	nop
 800b720:	20000c98 	.word	0x20000c98
 800b724:	e000ed04 	.word	0xe000ed04

0800b728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b72e:	2300      	movs	r3, #0
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	e00c      	b.n	800b74e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4a12      	ldr	r2, [pc, #72]	; (800b788 <prvInitialiseTaskLists+0x60>)
 800b740:	4413      	add	r3, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe f8ae 	bl	80098a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3301      	adds	r3, #1
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b37      	cmp	r3, #55	; 0x37
 800b752:	d9ef      	bls.n	800b734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b754:	480d      	ldr	r0, [pc, #52]	; (800b78c <prvInitialiseTaskLists+0x64>)
 800b756:	f7fe f8a5 	bl	80098a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b75a:	480d      	ldr	r0, [pc, #52]	; (800b790 <prvInitialiseTaskLists+0x68>)
 800b75c:	f7fe f8a2 	bl	80098a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b760:	480c      	ldr	r0, [pc, #48]	; (800b794 <prvInitialiseTaskLists+0x6c>)
 800b762:	f7fe f89f 	bl	80098a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b766:	480c      	ldr	r0, [pc, #48]	; (800b798 <prvInitialiseTaskLists+0x70>)
 800b768:	f7fe f89c 	bl	80098a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b76c:	480b      	ldr	r0, [pc, #44]	; (800b79c <prvInitialiseTaskLists+0x74>)
 800b76e:	f7fe f899 	bl	80098a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <prvInitialiseTaskLists+0x78>)
 800b774:	4a05      	ldr	r2, [pc, #20]	; (800b78c <prvInitialiseTaskLists+0x64>)
 800b776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <prvInitialiseTaskLists+0x7c>)
 800b77a:	4a05      	ldr	r2, [pc, #20]	; (800b790 <prvInitialiseTaskLists+0x68>)
 800b77c:	601a      	str	r2, [r3, #0]
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20000c98 	.word	0x20000c98
 800b78c:	200010f8 	.word	0x200010f8
 800b790:	2000110c 	.word	0x2000110c
 800b794:	20001128 	.word	0x20001128
 800b798:	2000113c 	.word	0x2000113c
 800b79c:	20001154 	.word	0x20001154
 800b7a0:	20001120 	.word	0x20001120
 800b7a4:	20001124 	.word	0x20001124

0800b7a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7ae:	e019      	b.n	800b7e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7b0:	f000 fedc 	bl	800c56c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b4:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <prvCheckTasksWaitingTermination+0x50>)
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe f8f9 	bl	80099b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	; (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	; (800b7fc <prvCheckTasksWaitingTermination+0x54>)
 800b7ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7da:	f000 fefb 	bl	800c5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f810 	bl	800b804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7e4:	4b06      	ldr	r3, [pc, #24]	; (800b800 <prvCheckTasksWaitingTermination+0x58>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e1      	bne.n	800b7b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2000113c 	.word	0x2000113c
 800b7fc:	20001168 	.word	0x20001168
 800b800:	20001150 	.word	0x20001150

0800b804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81a:	4618      	mov	r0, r3
 800b81c:	f001 f89c 	bl	800c958 <vPortFree>
				vPortFree( pxTCB );
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f899 	bl	800c958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b826:	e01a      	b.n	800b85e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d103      	bne.n	800b83a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 f890 	bl	800c958 <vPortFree>
	}
 800b838:	e011      	b.n	800b85e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b840:	2b02      	cmp	r3, #2
 800b842:	d00c      	beq.n	800b85e <prvDeleteTCB+0x5a>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	b672      	cpsid	i
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	b662      	cpsie	i
 800b858:	60fb      	str	r3, [r7, #12]
}
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <prvDeleteTCB+0x58>
	}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <prvResetNextTaskUnblockTime+0x38>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d104      	bne.n	800b882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b880:	e008      	b.n	800b894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <prvResetNextTaskUnblockTime+0x38>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a04      	ldr	r2, [pc, #16]	; (800b8a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b892:	6013      	str	r3, [r2, #0]
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	20001120 	.word	0x20001120
 800b8a4:	20001188 	.word	0x20001188

0800b8a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <xTaskGetCurrentTaskHandle+0x1c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b8b4:	687b      	ldr	r3, [r7, #4]
	}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20000c94 	.word	0x20000c94

0800b8c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8ce:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <xTaskGetSchedulerState+0x34>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	607b      	str	r3, [r7, #4]
 800b8da:	e008      	b.n	800b8ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8dc:	4b08      	ldr	r3, [pc, #32]	; (800b900 <xTaskGetSchedulerState+0x38>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	607b      	str	r3, [r7, #4]
 800b8e8:	e001      	b.n	800b8ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8ee:	687b      	ldr	r3, [r7, #4]
	}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	20001174 	.word	0x20001174
 800b900:	20001190 	.word	0x20001190

0800b904 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d051      	beq.n	800b9be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91e:	4b2a      	ldr	r3, [pc, #168]	; (800b9c8 <xTaskPriorityInherit+0xc4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	429a      	cmp	r2, r3
 800b926:	d241      	bcs.n	800b9ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db06      	blt.n	800b93e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b930:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <xTaskPriorityInherit+0xc4>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6959      	ldr	r1, [r3, #20]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <xTaskPriorityInherit+0xc8>)
 800b950:	4413      	add	r3, r2
 800b952:	4299      	cmp	r1, r3
 800b954:	d122      	bne.n	800b99c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	3304      	adds	r3, #4
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe f82c 	bl	80099b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b960:	4b19      	ldr	r3, [pc, #100]	; (800b9c8 <xTaskPriorityInherit+0xc4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <xTaskPriorityInherit+0xcc>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d903      	bls.n	800b97e <xTaskPriorityInherit+0x7a>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	4a15      	ldr	r2, [pc, #84]	; (800b9d0 <xTaskPriorityInherit+0xcc>)
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	4613      	mov	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4a10      	ldr	r2, [pc, #64]	; (800b9cc <xTaskPriorityInherit+0xc8>)
 800b98c:	441a      	add	r2, r3
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	3304      	adds	r3, #4
 800b992:	4619      	mov	r1, r3
 800b994:	4610      	mov	r0, r2
 800b996:	f7fd ffb2 	bl	80098fe <vListInsertEnd>
 800b99a:	e004      	b.n	800b9a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b99c:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <xTaskPriorityInherit+0xc4>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e008      	b.n	800b9be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <xTaskPriorityInherit+0xc4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d201      	bcs.n	800b9be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9be:	68fb      	ldr	r3, [r7, #12]
	}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000c94 	.word	0x20000c94
 800b9cc:	20000c98 	.word	0x20000c98
 800b9d0:	20001170 	.word	0x20001170

0800b9d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d05a      	beq.n	800baa0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ea:	4b30      	ldr	r3, [pc, #192]	; (800baac <xTaskPriorityDisinherit+0xd8>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d00c      	beq.n	800ba0e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	b672      	cpsid	i
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	b662      	cpsie	i
 800ba08:	60fb      	str	r3, [r7, #12]
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10c      	bne.n	800ba30 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	b672      	cpsid	i
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	b662      	cpsie	i
 800ba2a:	60bb      	str	r3, [r7, #8]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba34:	1e5a      	subs	r2, r3, #1
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d02c      	beq.n	800baa0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d128      	bne.n	800baa0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd ffb0 	bl	80099b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <xTaskPriorityDisinherit+0xdc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d903      	bls.n	800ba80 <xTaskPriorityDisinherit+0xac>
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a0c      	ldr	r2, [pc, #48]	; (800bab0 <xTaskPriorityDisinherit+0xdc>)
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4a09      	ldr	r2, [pc, #36]	; (800bab4 <xTaskPriorityDisinherit+0xe0>)
 800ba8e:	441a      	add	r2, r3
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	f7fd ff31 	bl	80098fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baa0:	697b      	ldr	r3, [r7, #20]
	}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20000c94 	.word	0x20000c94
 800bab0:	20001170 	.word	0x20001170
 800bab4:	20000c98 	.word	0x20000c98

0800bab8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bac6:	2301      	movs	r3, #1
 800bac8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d06e      	beq.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10c      	bne.n	800baf2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	b672      	cpsid	i
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	b662      	cpsie	i
 800baec:	60fb      	str	r3, [r7, #12]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d902      	bls.n	800bb02 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	e002      	b.n	800bb08 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0c:	69fa      	ldr	r2, [r7, #28]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d04d      	beq.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d148      	bne.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb1c:	4b26      	ldr	r3, [pc, #152]	; (800bbb8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d10c      	bne.n	800bb40 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	b672      	cpsid	i
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	b662      	cpsie	i
 800bb3a:	60bb      	str	r3, [r7, #8]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	69fa      	ldr	r2, [r7, #28]
 800bb4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	db04      	blt.n	800bb5e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	6959      	ldr	r1, [r3, #20]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	4613      	mov	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4a13      	ldr	r2, [pc, #76]	; (800bbbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb6e:	4413      	add	r3, r2
 800bb70:	4299      	cmp	r1, r3
 800bb72:	d11c      	bne.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	3304      	adds	r3, #4
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fd ff1d 	bl	80099b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb82:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d903      	bls.n	800bb92 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	4a0c      	ldr	r2, [pc, #48]	; (800bbc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb96:	4613      	mov	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4a07      	ldr	r2, [pc, #28]	; (800bbbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bba0:	441a      	add	r2, r3
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4619      	mov	r1, r3
 800bba8:	4610      	mov	r0, r2
 800bbaa:	f7fd fea8 	bl	80098fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbae:	bf00      	nop
 800bbb0:	3720      	adds	r7, #32
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000c94 	.word	0x20000c94
 800bbbc:	20000c98 	.word	0x20000c98
 800bbc0:	20001170 	.word	0x20001170

0800bbc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbc4:	b480      	push	{r7}
 800bbc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbc8:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbd0:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbda:	4b03      	ldr	r3, [pc, #12]	; (800bbe8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
	}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	20000c94 	.word	0x20000c94

0800bbec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbf6:	4b21      	ldr	r3, [pc, #132]	; (800bc7c <prvAddCurrentTaskToDelayedList+0x90>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbfc:	4b20      	ldr	r3, [pc, #128]	; (800bc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3304      	adds	r3, #4
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fd fed8 	bl	80099b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	d10a      	bne.n	800bc26 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d007      	beq.n	800bc26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc16:	4b1a      	ldr	r3, [pc, #104]	; (800bc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4819      	ldr	r0, [pc, #100]	; (800bc84 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc20:	f7fd fe6d 	bl	80098fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc24:	e026      	b.n	800bc74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc2e:	4b14      	ldr	r3, [pc, #80]	; (800bc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d209      	bcs.n	800bc52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc3e:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b0f      	ldr	r3, [pc, #60]	; (800bc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3304      	adds	r3, #4
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7fd fe7b 	bl	8009946 <vListInsert>
}
 800bc50:	e010      	b.n	800bc74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc52:	4b0e      	ldr	r3, [pc, #56]	; (800bc8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fd fe71 	bl	8009946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc64:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d202      	bcs.n	800bc74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc6e:	4a08      	ldr	r2, [pc, #32]	; (800bc90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6013      	str	r3, [r2, #0]
}
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	2000116c 	.word	0x2000116c
 800bc80:	20000c94 	.word	0x20000c94
 800bc84:	20001154 	.word	0x20001154
 800bc88:	20001124 	.word	0x20001124
 800bc8c:	20001120 	.word	0x20001120
 800bc90:	20001188 	.word	0x20001188

0800bc94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	; 0x28
 800bc98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc9e:	f000 fb15 	bl	800c2cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bca2:	4b1d      	ldr	r3, [pc, #116]	; (800bd18 <xTimerCreateTimerTask+0x84>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d021      	beq.n	800bcee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcb2:	1d3a      	adds	r2, r7, #4
 800bcb4:	f107 0108 	add.w	r1, r7, #8
 800bcb8:	f107 030c 	add.w	r3, r7, #12
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fd fdd7 	bl	8009870 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	9202      	str	r2, [sp, #8]
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	2302      	movs	r3, #2
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	4911      	ldr	r1, [pc, #68]	; (800bd1c <xTimerCreateTimerTask+0x88>)
 800bcd6:	4812      	ldr	r0, [pc, #72]	; (800bd20 <xTimerCreateTimerTask+0x8c>)
 800bcd8:	f7fe ffa8 	bl	800ac2c <xTaskCreateStatic>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	4a11      	ldr	r2, [pc, #68]	; (800bd24 <xTimerCreateTimerTask+0x90>)
 800bce0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bce2:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <xTimerCreateTimerTask+0x90>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcea:	2301      	movs	r3, #1
 800bcec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10c      	bne.n	800bd0e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	b672      	cpsid	i
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	b662      	cpsie	i
 800bd08:	613b      	str	r3, [r7, #16]
}
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bd0e:	697b      	ldr	r3, [r7, #20]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	200011c4 	.word	0x200011c4
 800bd1c:	08029a28 	.word	0x08029a28
 800bd20:	0800be65 	.word	0x0800be65
 800bd24:	200011c8 	.word	0x200011c8

0800bd28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10c      	bne.n	800bd5a <xTimerGenericCommand+0x32>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	b672      	cpsid	i
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	b662      	cpsie	i
 800bd54:	623b      	str	r3, [r7, #32]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd5a:	4b1a      	ldr	r3, [pc, #104]	; (800bdc4 <xTimerGenericCommand+0x9c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d02a      	beq.n	800bdb8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b05      	cmp	r3, #5
 800bd72:	dc18      	bgt.n	800bda6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd74:	f7ff fda8 	bl	800b8c8 <xTaskGetSchedulerState>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d109      	bne.n	800bd92 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd7e:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <xTimerGenericCommand+0x9c>)
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	f107 0110 	add.w	r1, r7, #16
 800bd86:	2300      	movs	r3, #0
 800bd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd8a:	f7fe f8bd 	bl	8009f08 <xQueueGenericSend>
 800bd8e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd90:	e012      	b.n	800bdb8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd92:	4b0c      	ldr	r3, [pc, #48]	; (800bdc4 <xTimerGenericCommand+0x9c>)
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f107 0110 	add.w	r1, r7, #16
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f7fe f8b3 	bl	8009f08 <xQueueGenericSend>
 800bda2:	6278      	str	r0, [r7, #36]	; 0x24
 800bda4:	e008      	b.n	800bdb8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bda6:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <xTimerGenericCommand+0x9c>)
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f107 0110 	add.w	r1, r7, #16
 800bdae:	2300      	movs	r3, #0
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	f7fe f9af 	bl	800a114 <xQueueGenericSendFromISR>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3728      	adds	r7, #40	; 0x28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200011c4 	.word	0x200011c4

0800bdc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af02      	add	r7, sp, #8
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd2:	4b23      	ldr	r3, [pc, #140]	; (800be60 <prvProcessExpiredTimer+0x98>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fd fde9 	bl	80099b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdec:	f003 0304 	and.w	r3, r3, #4
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d024      	beq.n	800be3e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	699a      	ldr	r2, [r3, #24]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	18d1      	adds	r1, r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	6978      	ldr	r0, [r7, #20]
 800be02:	f000 f8d3 	bl	800bfac <prvInsertTimerInActiveList>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d021      	beq.n	800be50 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be0c:	2300      	movs	r3, #0
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	2100      	movs	r1, #0
 800be16:	6978      	ldr	r0, [r7, #20]
 800be18:	f7ff ff86 	bl	800bd28 <xTimerGenericCommand>
 800be1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d115      	bne.n	800be50 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	b672      	cpsid	i
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	b662      	cpsie	i
 800be38:	60fb      	str	r3, [r7, #12]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be44:	f023 0301 	bic.w	r3, r3, #1
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	6978      	ldr	r0, [r7, #20]
 800be56:	4798      	blx	r3
}
 800be58:	bf00      	nop
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200011bc 	.word	0x200011bc

0800be64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be6c:	f107 0308 	add.w	r3, r7, #8
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f857 	bl	800bf24 <prvGetNextExpireTime>
 800be76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4619      	mov	r1, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f803 	bl	800be88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be82:	f000 f8d5 	bl	800c030 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be86:	e7f1      	b.n	800be6c <prvTimerTask+0x8>

0800be88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be92:	f7ff f915 	bl	800b0c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be96:	f107 0308 	add.w	r3, r7, #8
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 f866 	bl	800bf6c <prvSampleTimeNow>
 800bea0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d130      	bne.n	800bf0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <prvProcessTimerOrBlockTask+0x3c>
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d806      	bhi.n	800bec4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beb6:	f7ff f911 	bl	800b0dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ff83 	bl	800bdc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bec2:	e024      	b.n	800bf0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <prvProcessTimerOrBlockTask+0x90>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <prvProcessTimerOrBlockTask+0x50>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e000      	b.n	800beda <prvProcessTimerOrBlockTask+0x52>
 800bed8:	2300      	movs	r3, #0
 800beda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bedc:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <prvProcessTimerOrBlockTask+0x94>)
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4619      	mov	r1, r3
 800beea:	f7fe fe6b 	bl	800abc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800beee:	f7ff f8f5 	bl	800b0dc <xTaskResumeAll>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bef8:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <prvProcessTimerOrBlockTask+0x98>)
 800befa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	f3bf 8f6f 	isb	sy
}
 800bf08:	e001      	b.n	800bf0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf0a:	f7ff f8e7 	bl	800b0dc <xTaskResumeAll>
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200011c0 	.word	0x200011c0
 800bf1c:	200011c4 	.word	0x200011c4
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf2c:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <prvGetNextExpireTime+0x44>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <prvGetNextExpireTime+0x16>
 800bf36:	2201      	movs	r2, #1
 800bf38:	e000      	b.n	800bf3c <prvGetNextExpireTime+0x18>
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d105      	bne.n	800bf54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf48:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <prvGetNextExpireTime+0x44>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e001      	b.n	800bf58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf58:	68fb      	ldr	r3, [r7, #12]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	200011bc 	.word	0x200011bc

0800bf6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf74:	f7ff f952 	bl	800b21c <xTaskGetTickCount>
 800bf78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <prvSampleTimeNow+0x3c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d205      	bcs.n	800bf90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf84:	f000 f93c 	bl	800c200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e002      	b.n	800bf96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf96:	4a04      	ldr	r2, [pc, #16]	; (800bfa8 <prvSampleTimeNow+0x3c>)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200011cc 	.word	0x200011cc

0800bfac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d812      	bhi.n	800bff8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d302      	bcc.n	800bfe6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	617b      	str	r3, [r7, #20]
 800bfe4:	e01b      	b.n	800c01e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <prvInsertTimerInActiveList+0x7c>)
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3304      	adds	r3, #4
 800bfee:	4619      	mov	r1, r3
 800bff0:	4610      	mov	r0, r2
 800bff2:	f7fd fca8 	bl	8009946 <vListInsert>
 800bff6:	e012      	b.n	800c01e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d206      	bcs.n	800c00e <prvInsertTimerInActiveList+0x62>
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	d302      	bcc.n	800c00e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	e007      	b.n	800c01e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c00e:	4b07      	ldr	r3, [pc, #28]	; (800c02c <prvInsertTimerInActiveList+0x80>)
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3304      	adds	r3, #4
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f7fd fc94 	bl	8009946 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c01e:	697b      	ldr	r3, [r7, #20]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	200011c0 	.word	0x200011c0
 800c02c:	200011bc 	.word	0x200011bc

0800c030 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08e      	sub	sp, #56	; 0x38
 800c034:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c036:	e0d0      	b.n	800c1da <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	da1a      	bge.n	800c074 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c03e:	1d3b      	adds	r3, r7, #4
 800c040:	3304      	adds	r3, #4
 800c042:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10c      	bne.n	800c064 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	b672      	cpsid	i
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	b662      	cpsie	i
 800c05e:	61fb      	str	r3, [r7, #28]
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06a:	6850      	ldr	r0, [r2, #4]
 800c06c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06e:	6892      	ldr	r2, [r2, #8]
 800c070:	4611      	mov	r1, r2
 800c072:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f2c0 80ae 	blt.w	800c1d8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fd fc93 	bl	80099b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c092:	463b      	mov	r3, r7
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff ff69 	bl	800bf6c <prvSampleTimeNow>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	f200 809b 	bhi.w	800c1da <prvProcessReceivedCommands+0x1aa>
 800c0a4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <prvProcessReceivedCommands+0x7c>)
 800c0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0aa:	bf00      	nop
 800c0ac:	0800c0d5 	.word	0x0800c0d5
 800c0b0:	0800c0d5 	.word	0x0800c0d5
 800c0b4:	0800c0d5 	.word	0x0800c0d5
 800c0b8:	0800c14d 	.word	0x0800c14d
 800c0bc:	0800c161 	.word	0x0800c161
 800c0c0:	0800c1af 	.word	0x0800c1af
 800c0c4:	0800c0d5 	.word	0x0800c0d5
 800c0c8:	0800c0d5 	.word	0x0800c0d5
 800c0cc:	0800c14d 	.word	0x0800c14d
 800c0d0:	0800c161 	.word	0x0800c161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f4:	f7ff ff5a 	bl	800bfac <prvInsertTimerInActiveList>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d06d      	beq.n	800c1da <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d062      	beq.n	800c1da <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	441a      	add	r2, r3
 800c11c:	2300      	movs	r3, #0
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	2100      	movs	r1, #0
 800c124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c126:	f7ff fdff 	bl	800bd28 <xTimerGenericCommand>
 800c12a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d153      	bne.n	800c1da <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	b672      	cpsid	i
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	b662      	cpsie	i
 800c146:	61bb      	str	r3, [r7, #24]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c152:	f023 0301 	bic.w	r3, r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c15e:	e03c      	b.n	800c1da <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c166:	f043 0301 	orr.w	r3, r3, #1
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10c      	bne.n	800c19a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	b672      	cpsid	i
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	b662      	cpsie	i
 800c194:	617b      	str	r3, [r7, #20]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19c:	699a      	ldr	r2, [r3, #24]
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	18d1      	adds	r1, r2, r3
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a8:	f7ff ff00 	bl	800bfac <prvInsertTimerInActiveList>
					break;
 800c1ac:	e015      	b.n	800c1da <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b4:	f003 0302 	and.w	r3, r3, #2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d103      	bne.n	800c1c4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1be:	f000 fbcb 	bl	800c958 <vPortFree>
 800c1c2:	e00a      	b.n	800c1da <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ca:	f023 0301 	bic.w	r3, r3, #1
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1d6:	e000      	b.n	800c1da <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1da:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <prvProcessReceivedCommands+0x1cc>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	1d39      	adds	r1, r7, #4
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe f8cc 	bl	800a380 <xQueueReceive>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f47f af24 	bne.w	800c038 <prvProcessReceivedCommands+0x8>
	}
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	3730      	adds	r7, #48	; 0x30
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200011c4 	.word	0x200011c4

0800c200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c206:	e04a      	b.n	800c29e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c208:	4b2e      	ldr	r3, [pc, #184]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c212:	4b2c      	ldr	r3, [pc, #176]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3304      	adds	r3, #4
 800c220:	4618      	mov	r0, r3
 800c222:	f7fd fbc9 	bl	80099b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d030      	beq.n	800c29e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	4413      	add	r3, r2
 800c244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d90e      	bls.n	800c26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25a:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3304      	adds	r3, #4
 800c262:	4619      	mov	r1, r3
 800c264:	4610      	mov	r0, r2
 800c266:	f7fd fb6e 	bl	8009946 <vListInsert>
 800c26a:	e018      	b.n	800c29e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c26c:	2300      	movs	r3, #0
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	2100      	movs	r1, #0
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f7ff fd56 	bl	800bd28 <xTimerGenericCommand>
 800c27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10c      	bne.n	800c29e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	b672      	cpsid	i
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	b662      	cpsie	i
 800c298:	603b      	str	r3, [r7, #0]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c29e:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1af      	bne.n	800c208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2a8:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <prvSwitchTimerLists+0xc8>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c2b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2b6:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <prvSwitchTimerLists+0xc8>)
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6013      	str	r3, [r2, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	200011bc 	.word	0x200011bc
 800c2c8:	200011c0 	.word	0x200011c0

0800c2cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2d2:	f000 f94b 	bl	800c56c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2d6:	4b15      	ldr	r3, [pc, #84]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d120      	bne.n	800c320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2de:	4814      	ldr	r0, [pc, #80]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2e0:	f7fd fae0 	bl	80098a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2e4:	4813      	ldr	r0, [pc, #76]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2e6:	f7fd fadd 	bl	80098a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	; (800c338 <prvCheckForValidListAndQueue+0x6c>)
 800c2ec:	4a10      	ldr	r2, [pc, #64]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <prvCheckForValidListAndQueue+0x70>)
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <prvCheckForValidListAndQueue+0x74>)
 800c2fc:	4a11      	ldr	r2, [pc, #68]	; (800c344 <prvCheckForValidListAndQueue+0x78>)
 800c2fe:	2110      	movs	r1, #16
 800c300:	200a      	movs	r0, #10
 800c302:	f7fd fbed 	bl	8009ae0 <xQueueGenericCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	490b      	ldr	r1, [pc, #44]	; (800c348 <prvCheckForValidListAndQueue+0x7c>)
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fbfe 	bl	800ab1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c320:	f000 f958 	bl	800c5d4 <vPortExitCritical>
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	200011c4 	.word	0x200011c4
 800c330:	20001194 	.word	0x20001194
 800c334:	200011a8 	.word	0x200011a8
 800c338:	200011bc 	.word	0x200011bc
 800c33c:	200011c0 	.word	0x200011c0
 800c340:	20001270 	.word	0x20001270
 800c344:	200011d0 	.word	0x200011d0
 800c348:	08029a30 	.word	0x08029a30

0800c34c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3b04      	subs	r3, #4
 800c35c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b04      	subs	r3, #4
 800c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f023 0201 	bic.w	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3b04      	subs	r3, #4
 800c37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c37c:	4a0c      	ldr	r2, [pc, #48]	; (800c3b0 <pxPortInitialiseStack+0x64>)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3b14      	subs	r3, #20
 800c386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f06f 0202 	mvn.w	r2, #2
 800c39a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3b20      	subs	r3, #32
 800c3a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	0800c3b5 	.word	0x0800c3b5

0800c3b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3be:	4b14      	ldr	r3, [pc, #80]	; (800c410 <prvTaskExitError+0x5c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d00c      	beq.n	800c3e2 <prvTaskExitError+0x2e>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3cc:	b672      	cpsid	i
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	b662      	cpsie	i
 800c3dc:	60fb      	str	r3, [r7, #12]
}
 800c3de:	bf00      	nop
 800c3e0:	e7fe      	b.n	800c3e0 <prvTaskExitError+0x2c>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	b672      	cpsid	i
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	b662      	cpsie	i
 800c3f6:	60bb      	str	r3, [r7, #8]
}
 800c3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3fa:	bf00      	nop
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0fc      	beq.n	800c3fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000010 	.word	0x20000010
	...

0800c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c420:	4b07      	ldr	r3, [pc, #28]	; (800c440 <pxCurrentTCBConst2>)
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6808      	ldr	r0, [r1, #0]
 800c426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42a:	f380 8809 	msr	PSP, r0
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8811 	msr	BASEPRI, r0
 800c43a:	4770      	bx	lr
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst2>:
 800c440:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c448:	4808      	ldr	r0, [pc, #32]	; (800c46c <prvPortStartFirstTask+0x24>)
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	6800      	ldr	r0, [r0, #0]
 800c44e:	f380 8808 	msr	MSP, r0
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8814 	msr	CONTROL, r0
 800c45a:	b662      	cpsie	i
 800c45c:	b661      	cpsie	f
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	df00      	svc	0
 800c468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c46a:	bf00      	nop
 800c46c:	e000ed08 	.word	0xe000ed08

0800c470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c476:	4b37      	ldr	r3, [pc, #220]	; (800c554 <xPortStartScheduler+0xe4>)
 800c478:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	22ff      	movs	r2, #255	; 0xff
 800c486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b2f      	ldr	r3, [pc, #188]	; (800c558 <xPortStartScheduler+0xe8>)
 800c49c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c49e:	4b2f      	ldr	r3, [pc, #188]	; (800c55c <xPortStartScheduler+0xec>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4a4:	e009      	b.n	800c4ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c4a6:	4b2d      	ldr	r3, [pc, #180]	; (800c55c <xPortStartScheduler+0xec>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4a2b      	ldr	r2, [pc, #172]	; (800c55c <xPortStartScheduler+0xec>)
 800c4ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ba:	78fb      	ldrb	r3, [r7, #3]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4c2:	2b80      	cmp	r3, #128	; 0x80
 800c4c4:	d0ef      	beq.n	800c4a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4c6:	4b25      	ldr	r3, [pc, #148]	; (800c55c <xPortStartScheduler+0xec>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1c3 0307 	rsb	r3, r3, #7
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d00c      	beq.n	800c4ec <xPortStartScheduler+0x7c>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	b672      	cpsid	i
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	b662      	cpsie	i
 800c4e6:	60bb      	str	r3, [r7, #8]
}
 800c4e8:	bf00      	nop
 800c4ea:	e7fe      	b.n	800c4ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4ec:	4b1b      	ldr	r3, [pc, #108]	; (800c55c <xPortStartScheduler+0xec>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	021b      	lsls	r3, r3, #8
 800c4f2:	4a1a      	ldr	r2, [pc, #104]	; (800c55c <xPortStartScheduler+0xec>)
 800c4f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4f6:	4b19      	ldr	r3, [pc, #100]	; (800c55c <xPortStartScheduler+0xec>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4fe:	4a17      	ldr	r2, [pc, #92]	; (800c55c <xPortStartScheduler+0xec>)
 800c500:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	b2da      	uxtb	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c50a:	4b15      	ldr	r3, [pc, #84]	; (800c560 <xPortStartScheduler+0xf0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a14      	ldr	r2, [pc, #80]	; (800c560 <xPortStartScheduler+0xf0>)
 800c510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c514:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c516:	4b12      	ldr	r3, [pc, #72]	; (800c560 <xPortStartScheduler+0xf0>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a11      	ldr	r2, [pc, #68]	; (800c560 <xPortStartScheduler+0xf0>)
 800c51c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c520:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c522:	f000 f8dd 	bl	800c6e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c526:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <xPortStartScheduler+0xf4>)
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c52c:	f000 f8fc 	bl	800c728 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c530:	4b0d      	ldr	r3, [pc, #52]	; (800c568 <xPortStartScheduler+0xf8>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a0c      	ldr	r2, [pc, #48]	; (800c568 <xPortStartScheduler+0xf8>)
 800c536:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c53a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c53c:	f7ff ff84 	bl	800c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c540:	f7fe ff38 	bl	800b3b4 <vTaskSwitchContext>
	prvTaskExitError();
 800c544:	f7ff ff36 	bl	800c3b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	e000e400 	.word	0xe000e400
 800c558:	200012c0 	.word	0x200012c0
 800c55c:	200012c4 	.word	0x200012c4
 800c560:	e000ed20 	.word	0xe000ed20
 800c564:	20000010 	.word	0x20000010
 800c568:	e000ef34 	.word	0xe000ef34

0800c56c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	b672      	cpsid	i
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	b662      	cpsie	i
 800c586:	607b      	str	r3, [r7, #4]
}
 800c588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <vPortEnterCritical+0x60>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	3301      	adds	r3, #1
 800c590:	4a0e      	ldr	r2, [pc, #56]	; (800c5cc <vPortEnterCritical+0x60>)
 800c592:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c594:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <vPortEnterCritical+0x60>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d111      	bne.n	800c5c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c59c:	4b0c      	ldr	r3, [pc, #48]	; (800c5d0 <vPortEnterCritical+0x64>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00c      	beq.n	800c5c0 <vPortEnterCritical+0x54>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	b672      	cpsid	i
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	b662      	cpsie	i
 800c5ba:	603b      	str	r3, [r7, #0]
}
 800c5bc:	bf00      	nop
 800c5be:	e7fe      	b.n	800c5be <vPortEnterCritical+0x52>
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	20000010 	.word	0x20000010
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5da:	4b13      	ldr	r3, [pc, #76]	; (800c628 <vPortExitCritical+0x54>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10c      	bne.n	800c5fc <vPortExitCritical+0x28>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	b672      	cpsid	i
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	b662      	cpsie	i
 800c5f6:	607b      	str	r3, [r7, #4]
}
 800c5f8:	bf00      	nop
 800c5fa:	e7fe      	b.n	800c5fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <vPortExitCritical+0x54>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3b01      	subs	r3, #1
 800c602:	4a09      	ldr	r2, [pc, #36]	; (800c628 <vPortExitCritical+0x54>)
 800c604:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c606:	4b08      	ldr	r3, [pc, #32]	; (800c628 <vPortExitCritical+0x54>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d105      	bne.n	800c61a <vPortExitCritical+0x46>
 800c60e:	2300      	movs	r3, #0
 800c610:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	f383 8811 	msr	BASEPRI, r3
}
 800c618:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	20000010 	.word	0x20000010
 800c62c:	00000000 	.word	0x00000000

0800c630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c630:	f3ef 8009 	mrs	r0, PSP
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	4b15      	ldr	r3, [pc, #84]	; (800c690 <pxCurrentTCBConst>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	f01e 0f10 	tst.w	lr, #16
 800c640:	bf08      	it	eq
 800c642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c654:	b672      	cpsid	i
 800c656:	f380 8811 	msr	BASEPRI, r0
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	b662      	cpsie	i
 800c664:	f7fe fea6 	bl	800b3b4 <vTaskSwitchContext>
 800c668:	f04f 0000 	mov.w	r0, #0
 800c66c:	f380 8811 	msr	BASEPRI, r0
 800c670:	bc09      	pop	{r0, r3}
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	6808      	ldr	r0, [r1, #0]
 800c676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	f01e 0f10 	tst.w	lr, #16
 800c67e:	bf08      	it	eq
 800c680:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c684:	f380 8809 	msr	PSP, r0
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop

0800c690 <pxCurrentTCBConst>:
 800c690:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	b672      	cpsid	i
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	b662      	cpsie	i
 800c6b2:	607b      	str	r3, [r7, #4]
}
 800c6b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6b6:	f7fe fdc1 	bl	800b23c <xTaskIncrementTick>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d003      	beq.n	800c6c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6c0:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <SysTick_Handler+0x44>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	f383 8811 	msr	BASEPRI, r3
}
 800c6d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6d4:	bf00      	nop
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	e000ed04 	.word	0xe000ed04

0800c6e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <vPortSetupTimerInterrupt+0x34>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	; (800c718 <vPortSetupTimerInterrupt+0x38>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6f0:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <vPortSetupTimerInterrupt+0x3c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a0a      	ldr	r2, [pc, #40]	; (800c720 <vPortSetupTimerInterrupt+0x40>)
 800c6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6fa:	099b      	lsrs	r3, r3, #6
 800c6fc:	4a09      	ldr	r2, [pc, #36]	; (800c724 <vPortSetupTimerInterrupt+0x44>)
 800c6fe:	3b01      	subs	r3, #1
 800c700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c702:	4b04      	ldr	r3, [pc, #16]	; (800c714 <vPortSetupTimerInterrupt+0x34>)
 800c704:	2207      	movs	r2, #7
 800c706:	601a      	str	r2, [r3, #0]
}
 800c708:	bf00      	nop
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	e000e010 	.word	0xe000e010
 800c718:	e000e018 	.word	0xe000e018
 800c71c:	20000004 	.word	0x20000004
 800c720:	10624dd3 	.word	0x10624dd3
 800c724:	e000e014 	.word	0xe000e014

0800c728 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c728:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c738 <vPortEnableVFP+0x10>
 800c72c:	6801      	ldr	r1, [r0, #0]
 800c72e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c732:	6001      	str	r1, [r0, #0]
 800c734:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c736:	bf00      	nop
 800c738:	e000ed88 	.word	0xe000ed88

0800c73c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c742:	f3ef 8305 	mrs	r3, IPSR
 800c746:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2b0f      	cmp	r3, #15
 800c74c:	d916      	bls.n	800c77c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c74e:	4a19      	ldr	r2, [pc, #100]	; (800c7b4 <vPortValidateInterruptPriority+0x78>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c758:	4b17      	ldr	r3, [pc, #92]	; (800c7b8 <vPortValidateInterruptPriority+0x7c>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	7afa      	ldrb	r2, [r7, #11]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d20c      	bcs.n	800c77c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	b672      	cpsid	i
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	b662      	cpsie	i
 800c776:	607b      	str	r3, [r7, #4]
}
 800c778:	bf00      	nop
 800c77a:	e7fe      	b.n	800c77a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c77c:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <vPortValidateInterruptPriority+0x80>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <vPortValidateInterruptPriority+0x84>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d90c      	bls.n	800c7a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	b672      	cpsid	i
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	b662      	cpsie	i
 800c7a0:	603b      	str	r3, [r7, #0]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <vPortValidateInterruptPriority+0x68>
	}
 800c7a6:	bf00      	nop
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	e000e3f0 	.word	0xe000e3f0
 800c7b8:	200012c0 	.word	0x200012c0
 800c7bc:	e000ed0c 	.word	0xe000ed0c
 800c7c0:	200012c4 	.word	0x200012c4

0800c7c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08a      	sub	sp, #40	; 0x28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7d0:	f7fe fc76 	bl	800b0c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7d4:	4b5b      	ldr	r3, [pc, #364]	; (800c944 <pvPortMalloc+0x180>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7dc:	f000 f91a 	bl	800ca14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7e0:	4b59      	ldr	r3, [pc, #356]	; (800c948 <pvPortMalloc+0x184>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f040 8092 	bne.w	800c912 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d01f      	beq.n	800c834 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c7f4:	2208      	movs	r2, #8
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	2b00      	cmp	r3, #0
 800c804:	d016      	beq.n	800c834 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f023 0307 	bic.w	r3, r3, #7
 800c80c:	3308      	adds	r3, #8
 800c80e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f003 0307 	and.w	r3, r3, #7
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <pvPortMalloc+0x70>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	b672      	cpsid	i
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	b662      	cpsie	i
 800c82e:	617b      	str	r3, [r7, #20]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d06b      	beq.n	800c912 <pvPortMalloc+0x14e>
 800c83a:	4b44      	ldr	r3, [pc, #272]	; (800c94c <pvPortMalloc+0x188>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d866      	bhi.n	800c912 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c844:	4b42      	ldr	r3, [pc, #264]	; (800c950 <pvPortMalloc+0x18c>)
 800c846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c848:	4b41      	ldr	r3, [pc, #260]	; (800c950 <pvPortMalloc+0x18c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c84e:	e004      	b.n	800c85a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	429a      	cmp	r2, r3
 800c862:	d903      	bls.n	800c86c <pvPortMalloc+0xa8>
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1f1      	bne.n	800c850 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c86c:	4b35      	ldr	r3, [pc, #212]	; (800c944 <pvPortMalloc+0x180>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c872:	429a      	cmp	r2, r3
 800c874:	d04d      	beq.n	800c912 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2208      	movs	r2, #8
 800c87c:	4413      	add	r3, r2
 800c87e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	2308      	movs	r3, #8
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	429a      	cmp	r2, r3
 800c896:	d921      	bls.n	800c8dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	f003 0307 	and.w	r3, r3, #7
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <pvPortMalloc+0x100>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	b672      	cpsid	i
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	b662      	cpsie	i
 800c8be:	613b      	str	r3, [r7, #16]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	1ad2      	subs	r2, r2, r3
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8d6:	69b8      	ldr	r0, [r7, #24]
 800c8d8:	f000 f8fe 	bl	800cad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8dc:	4b1b      	ldr	r3, [pc, #108]	; (800c94c <pvPortMalloc+0x188>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	4a19      	ldr	r2, [pc, #100]	; (800c94c <pvPortMalloc+0x188>)
 800c8e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ea:	4b18      	ldr	r3, [pc, #96]	; (800c94c <pvPortMalloc+0x188>)
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	4b19      	ldr	r3, [pc, #100]	; (800c954 <pvPortMalloc+0x190>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d203      	bcs.n	800c8fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8f6:	4b15      	ldr	r3, [pc, #84]	; (800c94c <pvPortMalloc+0x188>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a16      	ldr	r2, [pc, #88]	; (800c954 <pvPortMalloc+0x190>)
 800c8fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	4b11      	ldr	r3, [pc, #68]	; (800c948 <pvPortMalloc+0x184>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	431a      	orrs	r2, r3
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c912:	f7fe fbe3 	bl	800b0dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00c      	beq.n	800c93a <pvPortMalloc+0x176>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	60fb      	str	r3, [r7, #12]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <pvPortMalloc+0x174>
	return pvReturn;
 800c93a:	69fb      	ldr	r3, [r7, #28]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3728      	adds	r7, #40	; 0x28
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200332d0 	.word	0x200332d0
 800c948:	200332dc 	.word	0x200332dc
 800c94c:	200332d4 	.word	0x200332d4
 800c950:	200332c8 	.word	0x200332c8
 800c954:	200332d8 	.word	0x200332d8

0800c958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d04c      	beq.n	800ca04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c96a:	2308      	movs	r3, #8
 800c96c:	425b      	negs	r3, r3
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	4413      	add	r3, r2
 800c972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	4b23      	ldr	r3, [pc, #140]	; (800ca0c <vPortFree+0xb4>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4013      	ands	r3, r2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10c      	bne.n	800c9a0 <vPortFree+0x48>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	b672      	cpsid	i
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	b662      	cpsie	i
 800c99a:	60fb      	str	r3, [r7, #12]
}
 800c99c:	bf00      	nop
 800c99e:	e7fe      	b.n	800c99e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00c      	beq.n	800c9c2 <vPortFree+0x6a>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	b672      	cpsid	i
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	b662      	cpsie	i
 800c9bc:	60bb      	str	r3, [r7, #8]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <vPortFree+0xb4>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d019      	beq.n	800ca04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d115      	bne.n	800ca04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ca0c <vPortFree+0xb4>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	43db      	mvns	r3, r3
 800c9e2:	401a      	ands	r2, r3
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9e8:	f7fe fb6a 	bl	800b0c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <vPortFree+0xb8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	4a06      	ldr	r2, [pc, #24]	; (800ca10 <vPortFree+0xb8>)
 800c9f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9fa:	6938      	ldr	r0, [r7, #16]
 800c9fc:	f000 f86c 	bl	800cad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca00:	f7fe fb6c 	bl	800b0dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca04:	bf00      	nop
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200332dc 	.word	0x200332dc
 800ca10:	200332d4 	.word	0x200332d4

0800ca14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca1a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800ca1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca20:	4b27      	ldr	r3, [pc, #156]	; (800cac0 <prvHeapInit+0xac>)
 800ca22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00c      	beq.n	800ca48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3307      	adds	r3, #7
 800ca32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f023 0307 	bic.w	r3, r3, #7
 800ca3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	4a1f      	ldr	r2, [pc, #124]	; (800cac0 <prvHeapInit+0xac>)
 800ca44:	4413      	add	r3, r2
 800ca46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca4c:	4a1d      	ldr	r2, [pc, #116]	; (800cac4 <prvHeapInit+0xb0>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca52:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <prvHeapInit+0xb0>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca60:	2208      	movs	r2, #8
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	1a9b      	subs	r3, r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f023 0307 	bic.w	r3, r3, #7
 800ca6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4a15      	ldr	r2, [pc, #84]	; (800cac8 <prvHeapInit+0xb4>)
 800ca74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca76:	4b14      	ldr	r3, [pc, #80]	; (800cac8 <prvHeapInit+0xb4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca7e:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <prvHeapInit+0xb4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvHeapInit+0xb4>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4a0a      	ldr	r2, [pc, #40]	; (800cacc <prvHeapInit+0xb8>)
 800caa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <prvHeapInit+0xbc>)
 800caaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <prvHeapInit+0xc0>)
 800caae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cab2:	601a      	str	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	200012c8 	.word	0x200012c8
 800cac4:	200332c8 	.word	0x200332c8
 800cac8:	200332d0 	.word	0x200332d0
 800cacc:	200332d8 	.word	0x200332d8
 800cad0:	200332d4 	.word	0x200332d4
 800cad4:	200332dc 	.word	0x200332dc

0800cad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cae0:	4b28      	ldr	r3, [pc, #160]	; (800cb84 <prvInsertBlockIntoFreeList+0xac>)
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e002      	b.n	800caec <prvInsertBlockIntoFreeList+0x14>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d8f7      	bhi.n	800cae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	4413      	add	r3, r2
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d108      	bne.n	800cb1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	441a      	add	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	441a      	add	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d118      	bne.n	800cb60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <prvInsertBlockIntoFreeList+0xb0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d00d      	beq.n	800cb56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	441a      	add	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e008      	b.n	800cb68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb56:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <prvInsertBlockIntoFreeList+0xb0>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	e003      	b.n	800cb68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d002      	beq.n	800cb76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb76:	bf00      	nop
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	200332c8 	.word	0x200332c8
 800cb88:	200332d0 	.word	0x200332d0

0800cb8c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
}
 800cb90:	bf00      	nop
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800cb9e:	f006 fd4d 	bl	801363c <touchgfx_init>
}
 800cba2:	bf00      	nop
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
    {
 800cbb0:	4a04      	ldr	r2, [pc, #16]	; (800cbc4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
    }
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	0802c0a8 	.word	0x0802c0a8

0800cbc8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    }
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff ffe9 	bl	800cba8 <_ZN8touchgfx12FontProviderD1Ev>
 800cbd6:	2104      	movs	r1, #4
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f01b fe07 	bl	80287ec <_ZdlPvj>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800cbf4:	887b      	ldrh	r3, [r7, #2]
 800cbf6:	2b0a      	cmp	r3, #10
 800cbf8:	d84f      	bhi.n	800cc9a <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 800cbfa:	a201      	add	r2, pc, #4	; (adr r2, 800cc00 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cc2d 	.word	0x0800cc2d
 800cc04:	0800cc37 	.word	0x0800cc37
 800cc08:	0800cc41 	.word	0x0800cc41
 800cc0c:	0800cc4b 	.word	0x0800cc4b
 800cc10:	0800cc55 	.word	0x0800cc55
 800cc14:	0800cc5f 	.word	0x0800cc5f
 800cc18:	0800cc69 	.word	0x0800cc69
 800cc1c:	0800cc73 	.word	0x0800cc73
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc87 	.word	0x0800cc87
 800cc28:	0800cc91 	.word	0x0800cc91
    {
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800cc2c:	f004 f82a 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc30:	4603      	mov	r3, r0
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	e032      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800cc36:	f004 f825 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	e02d      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800cc40:	f004 f820 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc44:	4603      	mov	r3, r0
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	e028      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800cc4a:	f004 f81b 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	e023      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800cc54:	f004 f816 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	e01e      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800cc5e:	f004 f811 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc62:	4603      	mov	r3, r0
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	e019      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800cc68:	f004 f80c 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	e014      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 800cc72:	f004 f807 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc76:	4603      	mov	r3, r0
 800cc78:	69db      	ldr	r3, [r3, #28]
 800cc7a:	e00f      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800cc7c:	f004 f802 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc80:	4603      	mov	r3, r0
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	e00a      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800cc86:	f003 fffd 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	e005      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800cc90:	f003 fff8 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 800cc94:	4603      	mov	r3, r0
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	e000      	b.n	800cc9c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 800cc9a:	2300      	movs	r3, #0
    }
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 1; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 4; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	4a05      	ldr	r2, [pc, #20]	; (800ccc4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7ff ff77 	bl	800cba8 <_ZN8touchgfx12FontProviderD1Ev>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	0802c094 	.word	0x0802c094

0800ccc8 <_ZN23ApplicationFontProviderD0Ev>:
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff ffe7 	bl	800cca4 <_ZN23ApplicationFontProviderD1Ev>
 800ccd6:	2104      	movs	r1, #4
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f01b fd87 	bl	80287ec <_ZdlPvj>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
    {
 800ccf0:	4a04      	ldr	r2, [pc, #16]	; (800cd04 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
    }
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	0802c550 	.word	0x0802c550

0800cd08 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
    }
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff ffe9 	bl	800cce8 <_ZN8touchgfx4FontD1Ev>
 800cd16:	2110      	movs	r1, #16
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f01b fd67 	bl	80287ec <_ZdlPvj>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	460b      	mov	r3, r1
 800cd32:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800cd34:	887b      	ldrh	r3, [r7, #2]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e010      	b.n	800cd60 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	681c      	ldr	r4, [r3, #0]
 800cd4e:	f107 030f 	add.w	r3, r7, #15
 800cd52:	f107 0210 	add.w	r2, r7, #16
 800cd56:	8879      	ldrh	r1, [r7, #2]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	47a0      	blx	r4
 800cd5c:	6178      	str	r0, [r7, #20]
        return glyph;
 800cd5e:	697b      	ldr	r3, [r7, #20]
    }
 800cd60:	4618      	mov	r0, r3
 800cd62:	371c      	adds	r7, #28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd90      	pop	{r4, r7, pc}

0800cd68 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	895b      	ldrh	r3, [r3, #10]
    }
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
    }
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	889b      	ldrh	r3, [r3, #4]
    }
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	889a      	ldrh	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	799b      	ldrb	r3, [r3, #6]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	4413      	add	r3, r2
 800cdc4:	b29b      	uxth	r3, r3
    }
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	79db      	ldrb	r3, [r3, #7]
 800cdde:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cde2:	b2db      	uxtb	r3, r3
    }
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	79db      	ldrb	r3, [r3, #7]
 800cdfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ce00:	b2db      	uxtb	r3, r3
    }
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
	...

0800ce10 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	4a05      	ldr	r2, [pc, #20]	; (800ce30 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff ff61 	bl	800cce8 <_ZN8touchgfx4FontD1Ev>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0802d33c 	.word	0x0802d33c

0800ce34 <_ZN8touchgfx9ConstFontD0Ev>:
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff ffe7 	bl	800ce10 <_ZN8touchgfx9ConstFontD1Ev>
 800ce42:	2118      	movs	r1, #24
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f01b fcd1 	bl	80287ec <_ZdlPvj>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	4a05      	ldr	r2, [pc, #20]	; (800ce74 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff ffd3 	bl	800ce10 <_ZN8touchgfx9ConstFontD1Ev>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	0802c0cc 	.word	0x0802c0cc

0800ce78 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ffe7 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ce86:	2128      	movs	r1, #40	; 0x28
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f01b fcaf 	bl	80287ec <_ZdlPvj>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
    {
 800cea0:	4a04      	ldr	r2, [pc, #16]	; (800ceb4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]
    }
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr
 800ceb4:	0802c0bc 	.word	0x0802c0bc

0800ceb8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
    }
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff ffe9 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
 800cec6:	2108      	movs	r1, #8
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f01b fc8f 	bl	80287ec <_ZdlPvj>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
    }
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08c      	sub	sp, #48	; 0x30
 800cf0c:	af08      	add	r7, sp, #32
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4611      	mov	r1, r2
 800cf14:	461a      	mov	r2, r3
 800cf16:	460b      	mov	r3, r1
 800cf18:	80fb      	strh	r3, [r7, #6]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	88b9      	ldrh	r1, [r7, #4]
 800cf22:	88fa      	ldrh	r2, [r7, #6]
 800cf24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf26:	9306      	str	r3, [sp, #24]
 800cf28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	7f3b      	ldrb	r3, [r7, #28]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	7e3b      	ldrb	r3, [r7, #24]
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	460b      	mov	r3, r1
 800cf48:	68b9      	ldr	r1, [r7, #8]
 800cf4a:	f00d fe77 	bl	801ac3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800cf4e:	4a0a      	ldr	r2, [pc, #40]	; (800cf78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf58:	619a      	str	r2, [r3, #24]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf5e:	61da      	str	r2, [r3, #28]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf64:	621a      	str	r2, [r3, #32]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf6a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	0802c0cc 	.word	0x0802c0cc

0800cf7c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	889b      	ldrh	r3, [r3, #4]
 800cf90:	0adb      	lsrs	r3, r3, #11
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4413      	add	r3, r2
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b089      	sub	sp, #36	; 0x24
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7b1b      	ldrb	r3, [r3, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e030      	b.n	800d030 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	69da      	ldr	r2, [r3, #28]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	7b5b      	ldrb	r3, [r3, #13]
 800cfda:	021b      	lsls	r3, r3, #8
 800cfdc:	b21b      	sxth	r3, r3
 800cfde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfe2:	b219      	sxth	r1, r3
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	7adb      	ldrb	r3, [r3, #11]
 800cfe8:	b21b      	sxth	r3, r3
 800cfea:	430b      	orrs	r3, r1
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7b1b      	ldrb	r3, [r3, #12]
 800cffa:	837b      	strh	r3, [r7, #26]
 800cffc:	8b7b      	ldrh	r3, [r7, #26]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d015      	beq.n	800d02e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	897a      	ldrh	r2, [r7, #10]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d103      	bne.n	800d014 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d012:	e00d      	b.n	800d030 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	897a      	ldrh	r2, [r7, #10]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d306      	bcc.n	800d02c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d01e:	8b7b      	ldrh	r3, [r7, #26]
 800d020:	3b01      	subs	r3, #1
 800d022:	837b      	strh	r3, [r7, #26]
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3304      	adds	r3, #4
 800d028:	61fb      	str	r3, [r7, #28]
 800d02a:	e7e7      	b.n	800cffc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d02c:	bf00      	nop
        }
    }
    return 0;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3724      	adds	r7, #36	; 0x24
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
 800d040:	4801      	ldr	r0, [pc, #4]	; (800d048 <__tcf_0+0xc>)
 800d042:	f7ff ff07 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d046:	bd80      	pop	{r7, pc}
 800d048:	200332e0 	.word	0x200332e0

0800d04c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08c      	sub	sp, #48	; 0x30
 800d050:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800d052:	4b1f      	ldr	r3, [pc, #124]	; (800d0d0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f3bf 8f5b 	dmb	ish
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	f003 0301 	and.w	r3, r3, #1
 800d060:	2b00      	cmp	r3, #0
 800d062:	bf0c      	ite	eq
 800d064:	2301      	moveq	r3, #1
 800d066:	2300      	movne	r3, #0
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d02c      	beq.n	800d0c8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800d06e:	4818      	ldr	r0, [pc, #96]	; (800d0d0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d070:	f01b fbbe 	bl	80287f0 <__cxa_guard_acquire>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	bf14      	ite	ne
 800d07a:	2301      	movne	r3, #1
 800d07c:	2300      	moveq	r3, #0
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b00      	cmp	r3, #0
 800d082:	d021      	beq.n	800d0c8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800d084:	2300      	movs	r3, #0
 800d086:	930a      	str	r3, [sp, #40]	; 0x28
 800d088:	2300      	movs	r3, #0
 800d08a:	9309      	str	r3, [sp, #36]	; 0x24
 800d08c:	2300      	movs	r3, #0
 800d08e:	9308      	str	r3, [sp, #32]
 800d090:	233f      	movs	r3, #63	; 0x3f
 800d092:	9307      	str	r3, [sp, #28]
 800d094:	4b0f      	ldr	r3, [pc, #60]	; (800d0d4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 800d096:	9306      	str	r3, [sp, #24]
 800d098:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800d09a:	9305      	str	r3, [sp, #20]
 800d09c:	2300      	movs	r3, #0
 800d09e:	9304      	str	r3, [sp, #16]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	2307      	movs	r3, #7
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	2328      	movs	r3, #40	; 0x28
 800d0b2:	2242      	movs	r2, #66	; 0x42
 800d0b4:	4909      	ldr	r1, [pc, #36]	; (800d0dc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 800d0b6:	480a      	ldr	r0, [pc, #40]	; (800d0e0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 800d0b8:	f7ff ff26 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d0bc:	4809      	ldr	r0, [pc, #36]	; (800d0e4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 800d0be:	f01b fbe1 	bl	8028884 <atexit>
 800d0c2:	4803      	ldr	r0, [pc, #12]	; (800d0d0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d0c4:	f01b fba0 	bl	8028808 <__cxa_guard_release>
    return JetBrainsMono_Regular_40_4bpp;
 800d0c8:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20033308 	.word	0x20033308
 800d0d4:	080d73bc 	.word	0x080d73bc
 800d0d8:	080d74b8 	.word	0x080d74b8
 800d0dc:	080d61b0 	.word	0x080d61b0
 800d0e0:	200332e0 	.word	0x200332e0
 800d0e4:	0800d03d 	.word	0x0800d03d

0800d0e8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	4801      	ldr	r0, [pc, #4]	; (800d0f4 <__tcf_0+0xc>)
 800d0ee:	f7ff feb1 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	2003330c 	.word	0x2003330c

0800d0f8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08c      	sub	sp, #48	; 0x30
 800d0fc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800d0fe:	4b1f      	ldr	r3, [pc, #124]	; (800d17c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f3bf 8f5b 	dmb	ish
 800d106:	b2db      	uxtb	r3, r3
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	bf0c      	ite	eq
 800d110:	2301      	moveq	r3, #1
 800d112:	2300      	movne	r3, #0
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d02c      	beq.n	800d174 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800d11a:	4818      	ldr	r0, [pc, #96]	; (800d17c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d11c:	f01b fb68 	bl	80287f0 <__cxa_guard_acquire>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	bf14      	ite	ne
 800d126:	2301      	movne	r3, #1
 800d128:	2300      	moveq	r3, #0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d021      	beq.n	800d174 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800d130:	2300      	movs	r3, #0
 800d132:	930a      	str	r3, [sp, #40]	; 0x28
 800d134:	2300      	movs	r3, #0
 800d136:	9309      	str	r3, [sp, #36]	; 0x24
 800d138:	2300      	movs	r3, #0
 800d13a:	9308      	str	r3, [sp, #32]
 800d13c:	233f      	movs	r3, #63	; 0x3f
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 800d142:	9306      	str	r3, [sp, #24]
 800d144:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800d146:	9305      	str	r3, [sp, #20]
 800d148:	2300      	movs	r3, #0
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	2300      	movs	r3, #0
 800d14e:	9303      	str	r3, [sp, #12]
 800d150:	2301      	movs	r3, #1
 800d152:	9302      	str	r3, [sp, #8]
 800d154:	2304      	movs	r3, #4
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	230b      	movs	r3, #11
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	233c      	movs	r3, #60	; 0x3c
 800d15e:	223f      	movs	r2, #63	; 0x3f
 800d160:	4909      	ldr	r1, [pc, #36]	; (800d188 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 800d162:	480a      	ldr	r0, [pc, #40]	; (800d18c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 800d164:	f7ff fed0 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d168:	4809      	ldr	r0, [pc, #36]	; (800d190 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 800d16a:	f01b fb8b 	bl	8028884 <atexit>
 800d16e:	4803      	ldr	r0, [pc, #12]	; (800d17c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d170:	f01b fb4a 	bl	8028808 <__cxa_guard_release>
    return JetBrainsMono_Regular_60_4bpp;
 800d174:	4b05      	ldr	r3, [pc, #20]	; (800d18c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 800d176:	4618      	mov	r0, r3
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20033334 	.word	0x20033334
 800d180:	080d73c0 	.word	0x080d73c0
 800d184:	080d74bc 	.word	0x080d74bc
 800d188:	080d654c 	.word	0x080d654c
 800d18c:	2003330c 	.word	0x2003330c
 800d190:	0800d0e9 	.word	0x0800d0e9

0800d194 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_300_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800d194:	b580      	push	{r7, lr}
 800d196:	af00      	add	r7, sp, #0
 800d198:	4801      	ldr	r0, [pc, #4]	; (800d1a0 <__tcf_0+0xc>)
 800d19a:	f7ff fe5b 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20033338 	.word	0x20033338

0800d1a4 <_Z24getFont_swisop3_300_4bppv>:
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08c      	sub	sp, #48	; 0x30
 800d1a8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800d1aa:	4b20      	ldr	r3, [pc, #128]	; (800d22c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	f3bf 8f5b 	dmb	ish
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	bf0c      	ite	eq
 800d1bc:	2301      	moveq	r3, #1
 800d1be:	2300      	movne	r3, #0
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d02d      	beq.n	800d222 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800d1c6:	4819      	ldr	r0, [pc, #100]	; (800d22c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d1c8:	f01b fb12 	bl	80287f0 <__cxa_guard_acquire>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	bf14      	ite	ne
 800d1d2:	2301      	movne	r3, #1
 800d1d4:	2300      	moveq	r3, #0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d022      	beq.n	800d222 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	9308      	str	r3, [sp, #32]
 800d1e8:	233f      	movs	r3, #63	; 0x3f
 800d1ea:	9307      	str	r3, [sp, #28]
 800d1ec:	4b10      	ldr	r3, [pc, #64]	; (800d230 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800d1ee:	9306      	str	r3, [sp, #24]
 800d1f0:	4b10      	ldr	r3, [pc, #64]	; (800d234 <_Z24getFont_swisop3_300_4bppv+0x90>)
 800d1f2:	9305      	str	r3, [sp, #20]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	9304      	str	r3, [sp, #16]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9303      	str	r3, [sp, #12]
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	9302      	str	r3, [sp, #8]
 800d200:	2304      	movs	r3, #4
 800d202:	9301      	str	r3, [sp, #4]
 800d204:	233b      	movs	r3, #59	; 0x3b
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d20c:	223f      	movs	r2, #63	; 0x3f
 800d20e:	490a      	ldr	r1, [pc, #40]	; (800d238 <_Z24getFont_swisop3_300_4bppv+0x94>)
 800d210:	480a      	ldr	r0, [pc, #40]	; (800d23c <_Z24getFont_swisop3_300_4bppv+0x98>)
 800d212:	f7ff fe79 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d216:	480a      	ldr	r0, [pc, #40]	; (800d240 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 800d218:	f01b fb34 	bl	8028884 <atexit>
 800d21c:	4803      	ldr	r0, [pc, #12]	; (800d22c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d21e:	f01b faf3 	bl	8028808 <__cxa_guard_release>
    return swisop3_300_4bpp;
 800d222:	4b06      	ldr	r3, [pc, #24]	; (800d23c <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 800d224:	4618      	mov	r0, r3
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20033360 	.word	0x20033360
 800d230:	080d73c4 	.word	0x080d73c4
 800d234:	080d74c0 	.word	0x080d74c0
 800d238:	080d68c0 	.word	0x080d68c0
 800d23c:	20033338 	.word	0x20033338
 800d240:	0800d195 	.word	0x0800d195

0800d244 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
 800d248:	4801      	ldr	r0, [pc, #4]	; (800d250 <__tcf_0+0xc>)
 800d24a:	f7ff fe03 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20033364 	.word	0x20033364

0800d254 <_Z23getFont_swisop3_50_4bppv>:
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	; 0x30
 800d258:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800d25a:	4b1f      	ldr	r3, [pc, #124]	; (800d2d8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	f3bf 8f5b 	dmb	ish
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bf0c      	ite	eq
 800d26c:	2301      	moveq	r3, #1
 800d26e:	2300      	movne	r3, #0
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b00      	cmp	r3, #0
 800d274:	d02c      	beq.n	800d2d0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800d276:	4818      	ldr	r0, [pc, #96]	; (800d2d8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d278:	f01b faba 	bl	80287f0 <__cxa_guard_acquire>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bf14      	ite	ne
 800d282:	2301      	movne	r3, #1
 800d284:	2300      	moveq	r3, #0
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d021      	beq.n	800d2d0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800d28c:	2300      	movs	r3, #0
 800d28e:	930a      	str	r3, [sp, #40]	; 0x28
 800d290:	2300      	movs	r3, #0
 800d292:	9309      	str	r3, [sp, #36]	; 0x24
 800d294:	2300      	movs	r3, #0
 800d296:	9308      	str	r3, [sp, #32]
 800d298:	233f      	movs	r3, #63	; 0x3f
 800d29a:	9307      	str	r3, [sp, #28]
 800d29c:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <_Z23getFont_swisop3_50_4bppv+0x88>)
 800d29e:	9306      	str	r3, [sp, #24]
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 800d2a2:	9305      	str	r3, [sp, #20]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9303      	str	r3, [sp, #12]
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	9302      	str	r3, [sp, #8]
 800d2b0:	2304      	movs	r3, #4
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	230a      	movs	r3, #10
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	2332      	movs	r3, #50	; 0x32
 800d2ba:	2241      	movs	r2, #65	; 0x41
 800d2bc:	4909      	ldr	r1, [pc, #36]	; (800d2e4 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800d2be:	480a      	ldr	r0, [pc, #40]	; (800d2e8 <_Z23getFont_swisop3_50_4bppv+0x94>)
 800d2c0:	f7ff fe22 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d2c4:	4809      	ldr	r0, [pc, #36]	; (800d2ec <_Z23getFont_swisop3_50_4bppv+0x98>)
 800d2c6:	f01b fadd 	bl	8028884 <atexit>
 800d2ca:	4803      	ldr	r0, [pc, #12]	; (800d2d8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d2cc:	f01b fa9c 	bl	8028808 <__cxa_guard_release>
    return swisop3_50_4bpp;
 800d2d0:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	2003338c 	.word	0x2003338c
 800d2dc:	080d73c8 	.word	0x080d73c8
 800d2e0:	080d74c4 	.word	0x080d74c4
 800d2e4:	080d6c34 	.word	0x080d6c34
 800d2e8:	20033364 	.word	0x20033364
 800d2ec:	0800d245 	.word	0x0800d245

0800d2f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	4801      	ldr	r0, [pc, #4]	; (800d2fc <__tcf_0+0xc>)
 800d2f6:	f7ff fdad 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	20033390 	.word	0x20033390

0800d300 <_Z23getFont_verdana_10_4bppv>:
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08c      	sub	sp, #48	; 0x30
 800d304:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d306:	4b1f      	ldr	r3, [pc, #124]	; (800d384 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	f3bf 8f5b 	dmb	ish
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	2b00      	cmp	r3, #0
 800d316:	bf0c      	ite	eq
 800d318:	2301      	moveq	r3, #1
 800d31a:	2300      	movne	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d02c      	beq.n	800d37c <_Z23getFont_verdana_10_4bppv+0x7c>
 800d322:	4818      	ldr	r0, [pc, #96]	; (800d384 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d324:	f01b fa64 	bl	80287f0 <__cxa_guard_acquire>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	bf14      	ite	ne
 800d32e:	2301      	movne	r3, #1
 800d330:	2300      	moveq	r3, #0
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	d021      	beq.n	800d37c <_Z23getFont_verdana_10_4bppv+0x7c>
 800d338:	2300      	movs	r3, #0
 800d33a:	930a      	str	r3, [sp, #40]	; 0x28
 800d33c:	2300      	movs	r3, #0
 800d33e:	9309      	str	r3, [sp, #36]	; 0x24
 800d340:	2300      	movs	r3, #0
 800d342:	9308      	str	r3, [sp, #32]
 800d344:	233f      	movs	r3, #63	; 0x3f
 800d346:	9307      	str	r3, [sp, #28]
 800d348:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <_Z23getFont_verdana_10_4bppv+0x88>)
 800d34a:	9306      	str	r3, [sp, #24]
 800d34c:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d34e:	9305      	str	r3, [sp, #20]
 800d350:	2300      	movs	r3, #0
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	2300      	movs	r3, #0
 800d356:	9303      	str	r3, [sp, #12]
 800d358:	2301      	movs	r3, #1
 800d35a:	9302      	str	r3, [sp, #8]
 800d35c:	2304      	movs	r3, #4
 800d35e:	9301      	str	r3, [sp, #4]
 800d360:	2300      	movs	r3, #0
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	230a      	movs	r3, #10
 800d366:	2201      	movs	r2, #1
 800d368:	4909      	ldr	r1, [pc, #36]	; (800d390 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d36a:	480a      	ldr	r0, [pc, #40]	; (800d394 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d36c:	f7ff fdcc 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d370:	4809      	ldr	r0, [pc, #36]	; (800d398 <_Z23getFont_verdana_10_4bppv+0x98>)
 800d372:	f01b fa87 	bl	8028884 <atexit>
 800d376:	4803      	ldr	r0, [pc, #12]	; (800d384 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d378:	f01b fa46 	bl	8028808 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d37c:	4b05      	ldr	r3, [pc, #20]	; (800d394 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800d37e:	4618      	mov	r0, r3
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200333b8 	.word	0x200333b8
 800d388:	080d73cc 	.word	0x080d73cc
 800d38c:	080d74c8 	.word	0x080d74c8
 800d390:	080d6fc4 	.word	0x080d6fc4
 800d394:	20033390 	.word	0x20033390
 800d398:	0800d2f1 	.word	0x0800d2f1

0800d39c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	4801      	ldr	r0, [pc, #4]	; (800d3a8 <__tcf_0+0xc>)
 800d3a2:	f7ff fd57 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	200333bc 	.word	0x200333bc

0800d3ac <_Z23getFont_verdana_12_4bppv>:
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08c      	sub	sp, #48	; 0x30
 800d3b0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800d3b2:	4b1f      	ldr	r3, [pc, #124]	; (800d430 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	f3bf 8f5b 	dmb	ish
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf0c      	ite	eq
 800d3c4:	2301      	moveq	r3, #1
 800d3c6:	2300      	movne	r3, #0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d02c      	beq.n	800d428 <_Z23getFont_verdana_12_4bppv+0x7c>
 800d3ce:	4818      	ldr	r0, [pc, #96]	; (800d430 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d3d0:	f01b fa0e 	bl	80287f0 <__cxa_guard_acquire>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bf14      	ite	ne
 800d3da:	2301      	movne	r3, #1
 800d3dc:	2300      	moveq	r3, #0
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d021      	beq.n	800d428 <_Z23getFont_verdana_12_4bppv+0x7c>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9308      	str	r3, [sp, #32]
 800d3f0:	233f      	movs	r3, #63	; 0x3f
 800d3f2:	9307      	str	r3, [sp, #28]
 800d3f4:	4b0f      	ldr	r3, [pc, #60]	; (800d434 <_Z23getFont_verdana_12_4bppv+0x88>)
 800d3f6:	9306      	str	r3, [sp, #24]
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <_Z23getFont_verdana_12_4bppv+0x8c>)
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	9304      	str	r3, [sp, #16]
 800d400:	2300      	movs	r3, #0
 800d402:	9303      	str	r3, [sp, #12]
 800d404:	2301      	movs	r3, #1
 800d406:	9302      	str	r3, [sp, #8]
 800d408:	2304      	movs	r3, #4
 800d40a:	9301      	str	r3, [sp, #4]
 800d40c:	2300      	movs	r3, #0
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	230c      	movs	r3, #12
 800d412:	2207      	movs	r2, #7
 800d414:	4909      	ldr	r1, [pc, #36]	; (800d43c <_Z23getFont_verdana_12_4bppv+0x90>)
 800d416:	480a      	ldr	r0, [pc, #40]	; (800d440 <_Z23getFont_verdana_12_4bppv+0x94>)
 800d418:	f7ff fd76 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d41c:	4809      	ldr	r0, [pc, #36]	; (800d444 <_Z23getFont_verdana_12_4bppv+0x98>)
 800d41e:	f01b fa31 	bl	8028884 <atexit>
 800d422:	4803      	ldr	r0, [pc, #12]	; (800d430 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d424:	f01b f9f0 	bl	8028808 <__cxa_guard_release>
    return verdana_12_4bpp;
 800d428:	4b05      	ldr	r3, [pc, #20]	; (800d440 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	200333e4 	.word	0x200333e4
 800d434:	080d73d0 	.word	0x080d73d0
 800d438:	080d74cc 	.word	0x080d74cc
 800d43c:	080d6fd4 	.word	0x080d6fd4
 800d440:	200333bc 	.word	0x200333bc
 800d444:	0800d39d 	.word	0x0800d39d

0800d448 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	4801      	ldr	r0, [pc, #4]	; (800d454 <__tcf_0+0xc>)
 800d44e:	f7ff fd01 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d452:	bd80      	pop	{r7, pc}
 800d454:	200333e8 	.word	0x200333e8

0800d458 <_Z23getFont_verdana_20_4bppv>:
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08c      	sub	sp, #48	; 0x30
 800d45c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d45e:	4b1f      	ldr	r3, [pc, #124]	; (800d4dc <_Z23getFont_verdana_20_4bppv+0x84>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	f3bf 8f5b 	dmb	ish
 800d466:	b2db      	uxtb	r3, r3
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	bf0c      	ite	eq
 800d470:	2301      	moveq	r3, #1
 800d472:	2300      	movne	r3, #0
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d02c      	beq.n	800d4d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800d47a:	4818      	ldr	r0, [pc, #96]	; (800d4dc <_Z23getFont_verdana_20_4bppv+0x84>)
 800d47c:	f01b f9b8 	bl	80287f0 <__cxa_guard_acquire>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	bf14      	ite	ne
 800d486:	2301      	movne	r3, #1
 800d488:	2300      	moveq	r3, #0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d021      	beq.n	800d4d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800d490:	2300      	movs	r3, #0
 800d492:	930a      	str	r3, [sp, #40]	; 0x28
 800d494:	2300      	movs	r3, #0
 800d496:	9309      	str	r3, [sp, #36]	; 0x24
 800d498:	2300      	movs	r3, #0
 800d49a:	9308      	str	r3, [sp, #32]
 800d49c:	233f      	movs	r3, #63	; 0x3f
 800d49e:	9307      	str	r3, [sp, #28]
 800d4a0:	4b0f      	ldr	r3, [pc, #60]	; (800d4e0 <_Z23getFont_verdana_20_4bppv+0x88>)
 800d4a2:	9306      	str	r3, [sp, #24]
 800d4a4:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d4a6:	9305      	str	r3, [sp, #20]
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	9303      	str	r3, [sp, #12]
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	9302      	str	r3, [sp, #8]
 800d4b4:	2304      	movs	r3, #4
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	2304      	movs	r3, #4
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	2314      	movs	r3, #20
 800d4be:	223f      	movs	r2, #63	; 0x3f
 800d4c0:	4909      	ldr	r1, [pc, #36]	; (800d4e8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d4c2:	480a      	ldr	r0, [pc, #40]	; (800d4ec <_Z23getFont_verdana_20_4bppv+0x94>)
 800d4c4:	f7ff fd20 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d4c8:	4809      	ldr	r0, [pc, #36]	; (800d4f0 <_Z23getFont_verdana_20_4bppv+0x98>)
 800d4ca:	f01b f9db 	bl	8028884 <atexit>
 800d4ce:	4803      	ldr	r0, [pc, #12]	; (800d4dc <_Z23getFont_verdana_20_4bppv+0x84>)
 800d4d0:	f01b f99a 	bl	8028808 <__cxa_guard_release>
    return verdana_20_4bpp;
 800d4d4:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20033410 	.word	0x20033410
 800d4e0:	080d73d4 	.word	0x080d73d4
 800d4e4:	080d74d0 	.word	0x080d74d0
 800d4e8:	080d7038 	.word	0x080d7038
 800d4ec:	200333e8 	.word	0x200333e8
 800d4f0:	0800d449 	.word	0x0800d449

0800d4f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	4801      	ldr	r0, [pc, #4]	; (800d500 <__tcf_0+0xc>)
 800d4fa:	f7ff fcab 	bl	800ce54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20033414 	.word	0x20033414

0800d504 <_Z23getFont_verdana_40_4bppv>:
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08c      	sub	sp, #48	; 0x30
 800d508:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d50a:	4b1f      	ldr	r3, [pc, #124]	; (800d588 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	f3bf 8f5b 	dmb	ish
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	bf0c      	ite	eq
 800d51c:	2301      	moveq	r3, #1
 800d51e:	2300      	movne	r3, #0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d02c      	beq.n	800d580 <_Z23getFont_verdana_40_4bppv+0x7c>
 800d526:	4818      	ldr	r0, [pc, #96]	; (800d588 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d528:	f01b f962 	bl	80287f0 <__cxa_guard_acquire>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	bf14      	ite	ne
 800d532:	2301      	movne	r3, #1
 800d534:	2300      	moveq	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d021      	beq.n	800d580 <_Z23getFont_verdana_40_4bppv+0x7c>
 800d53c:	2300      	movs	r3, #0
 800d53e:	930a      	str	r3, [sp, #40]	; 0x28
 800d540:	2300      	movs	r3, #0
 800d542:	9309      	str	r3, [sp, #36]	; 0x24
 800d544:	2300      	movs	r3, #0
 800d546:	9308      	str	r3, [sp, #32]
 800d548:	233f      	movs	r3, #63	; 0x3f
 800d54a:	9307      	str	r3, [sp, #28]
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <_Z23getFont_verdana_40_4bppv+0x88>)
 800d54e:	9306      	str	r3, [sp, #24]
 800d550:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	2300      	movs	r3, #0
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	2300      	movs	r3, #0
 800d55a:	9303      	str	r3, [sp, #12]
 800d55c:	2301      	movs	r3, #1
 800d55e:	9302      	str	r3, [sp, #8]
 800d560:	2304      	movs	r3, #4
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	2300      	movs	r3, #0
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	2328      	movs	r3, #40	; 0x28
 800d56a:	2201      	movs	r2, #1
 800d56c:	4909      	ldr	r1, [pc, #36]	; (800d594 <_Z23getFont_verdana_40_4bppv+0x90>)
 800d56e:	480a      	ldr	r0, [pc, #40]	; (800d598 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d570:	f7ff fcca 	bl	800cf08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d574:	4809      	ldr	r0, [pc, #36]	; (800d59c <_Z23getFont_verdana_40_4bppv+0x98>)
 800d576:	f01b f985 	bl	8028884 <atexit>
 800d57a:	4803      	ldr	r0, [pc, #12]	; (800d588 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d57c:	f01b f944 	bl	8028808 <__cxa_guard_release>
    return verdana_40_4bpp;
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800d582:	4618      	mov	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	2003343c 	.word	0x2003343c
 800d58c:	080d74b4 	.word	0x080d74b4
 800d590:	080d74d4 	.word	0x080d74d4
 800d594:	080d73ac 	.word	0x080d73ac
 800d598:	20033414 	.word	0x20033414
 800d59c:	0800d4f5 	.word	0x0800d4f5

0800d5a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d5c2:	bf00      	nop
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	460b      	mov	r3, r1
 800d604:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d612:	b480      	push	{r7}
 800d614:	b083      	sub	sp, #12
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
    {
    }
 800d61a:	bf00      	nop
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
    {
    }
 800d62e:	bf00      	nop
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
	...

0800d63c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
    {
 800d644:	4a04      	ldr	r2, [pc, #16]	; (800d658 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	601a      	str	r2, [r3, #0]
    }
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	0802c234 	.word	0x0802c234

0800d65c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
    }
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff ffe9 	bl	800d63c <_ZN8touchgfx15UIEventListenerD1Ev>
 800d66a:	2104      	movs	r1, #4
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f01b f8bd 	bl	80287ec <_ZdlPvj>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
    {
    }
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	683a      	ldr	r2, [r7, #0]
 800d6b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d6ba:	6810      	ldr	r0, [r2, #0]
 800d6bc:	6851      	ldr	r1, [r2, #4]
 800d6be:	c303      	stmia	r3!, {r0, r1}
    }
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
    {
 800d6d4:	4a04      	ldr	r2, [pc, #16]	; (800d6e8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	601a      	str	r2, [r3, #0]
    }
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	0802c21c 	.word	0x0802c21c

0800d6ec <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
    }
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff ffe9 	bl	800d6cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d6fa:	2104      	movs	r1, #4
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f01b f875 	bl	80287ec <_ZdlPvj>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d70c:	b480      	push	{r7}
 800d70e:	af00      	add	r7, sp, #0
    {
        return instance;
 800d710:	4b03      	ldr	r3, [pc, #12]	; (800d720 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d712:	681b      	ldr	r3, [r3, #0]
    }
 800d714:	4618      	mov	r0, r3
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	2003bd08 	.word	0x2003bd08

0800d724 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d728:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d730:	2b00      	cmp	r3, #0
 800d732:	d008      	beq.n	800d746 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d734:	4b08      	ldr	r3, [pc, #32]	; (800d758 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d73e:	4b06      	ldr	r3, [pc, #24]	; (800d758 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d744:	e002      	b.n	800d74c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d746:	4b04      	ldr	r3, [pc, #16]	; (800d758 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	689b      	ldr	r3, [r3, #8]
    }
 800d74c:	4618      	mov	r0, r3
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	2003bd08 	.word	0x2003bd08

0800d75c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d764:	4a07      	ldr	r2, [pc, #28]	; (800d784 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	605a      	str	r2, [r3, #4]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	721a      	strb	r2, [r3, #8]
    {
    }
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	0802c1f8 	.word	0x0802c1f8

0800d788 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
    {
 800d790:	4a04      	ldr	r2, [pc, #16]	; (800d7a4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
    }
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	0802c1f8 	.word	0x0802c1f8

0800d7a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    }
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff ffe9 	bl	800d788 <_ZN8touchgfx10TransitionD1Ev>
 800d7b6:	210c      	movs	r1, #12
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f01b f817 	bl	80287ec <_ZdlPvj>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
    {
    }
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
    {
    }
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
    {
    }
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d80c:	f00c f9d0 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 800d810:	4603      	mov	r3, r0
 800d812:	4618      	mov	r0, r3
 800d814:	f00c fd72 	bl	801a2fc <_ZN8touchgfx11Application10invalidateEv>
    }
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	683a      	ldr	r2, [r7, #0]
 800d82e:	605a      	str	r2, [r3, #4]
    }
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	4a05      	ldr	r2, [pc, #20]	; (800d85c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	601a      	str	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff fef5 	bl	800d63c <_ZN8touchgfx15UIEventListenerD1Ev>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4618      	mov	r0, r3
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	0802d288 	.word	0x0802d288

0800d860 <_ZN8touchgfx11ApplicationD0Ev>:
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ffe7 	bl	800d83c <_ZN8touchgfx11ApplicationD1Ev>
 800d86e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f01a ffba 	bl	80287ec <_ZdlPvj>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	f00c f9b0 	bl	8019bf4 <_ZN8touchgfx11ApplicationC1Ev>
 800d894:	4a09      	ldr	r2, [pc, #36]	; (800d8bc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a04      	ldr	r2, [pc, #16]	; (800d8c0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d8ae:	6013      	str	r3, [r2, #0]
    }
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0802c1ac 	.word	0x0802c1ac
 800d8c0:	2003bd5c 	.word	0x2003bd5c

0800d8c4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f804 	bl	800d8da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00f      	beq.n	800d90c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	330c      	adds	r3, #12
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4610      	mov	r0, r2
 800d900:	4798      	blx	r3
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d90c:	2300      	movs	r3, #0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00e      	beq.n	800d930 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3308      	adds	r3, #8
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	601a      	str	r2, [r3, #0]
    }
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	4a05      	ldr	r2, [pc, #20]	; (800d974 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff ff69 	bl	800d83c <_ZN8touchgfx11ApplicationD1Ev>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4618      	mov	r0, r3
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	0802c1ac 	.word	0x0802c1ac

0800d978 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff ffe7 	bl	800d954 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f01a ff2e 	bl	80287ec <_ZdlPvj>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	4a08      	ldr	r2, [pc, #32]	; (800d9c8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 facb 	bl	800df4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff ffcb 	bl	800d954 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0802c148 	.word	0x0802c148

0800d9cc <_ZN23FrontendApplicationBaseD0Ev>:
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff ffe1 	bl	800d99c <_ZN23FrontendApplicationBaseD1Ev>
 800d9da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f01a ff04 	bl	80287ec <_ZdlPvj>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f87c 	bl	800daf4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	721a      	strb	r2, [r3, #8]
    }
 800da12:	bf00      	nop
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800da1e:	b480      	push	{r7}
 800da20:	b083      	sub	sp, #12
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
 800da26:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	605a      	str	r2, [r3, #4]
    }
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
	...

0800da3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff ff1a 	bl	800d884 <_ZN8touchgfx14MVPApplicationC1Ev>
 800da50:	4a13      	ldr	r2, [pc, #76]	; (800daa0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 f89f 	bl	800dba0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800da72:	f7ff fe4b 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 800da76:	4603      	mov	r3, r0
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	3208      	adds	r2, #8
 800da7c:	6812      	ldr	r2, [r2, #0]
 800da7e:	2100      	movs	r1, #0
 800da80:	4618      	mov	r0, r3
 800da82:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800da84:	2000      	movs	r0, #0
 800da86:	f003 f885 	bl	8010b94 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800da8a:	f7ff fe4b 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 800da8e:	4603      	mov	r3, r0
 800da90:	4618      	mov	r0, r3
 800da92:	f013 fd58 	bl	8021546 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
}
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	0802c148 	.word	0x0802c148

0800daa4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	4611      	mov	r1, r2
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff ffe9 	bl	800daa4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	605a      	str	r2, [r3, #4]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	3208      	adds	r2, #8
 800dae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dae6:	e883 0003 	stmia.w	r3, {r0, r1}
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800daf4:	b590      	push	{r4, r7, lr}
 800daf6:	b089      	sub	sp, #36	; 0x24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800db02:	4b10      	ldr	r3, [pc, #64]	; (800db44 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800db04:	61bb      	str	r3, [r7, #24]
 800db06:	2300      	movs	r3, #0
 800db08:	61fb      	str	r3, [r7, #28]
 800db0a:	f107 0008 	add.w	r0, r7, #8
 800db0e:	f107 0318 	add.w	r3, r7, #24
 800db12:	cb0c      	ldmia	r3, {r2, r3}
 800db14:	6879      	ldr	r1, [r7, #4]
 800db16:	f000 f85f 	bl	800dbd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800db1a:	f107 0308 	add.w	r3, r7, #8
 800db1e:	4619      	mov	r1, r3
 800db20:	4620      	mov	r0, r4
 800db22:	f7ff ffcb 	bl	800dabc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800db26:	f107 0308 	add.w	r3, r7, #8
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fa0e 	bl	800df4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800db3c:	bf00      	nop
 800db3e:	3724      	adds	r7, #36	; 0x24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd90      	pop	{r4, r7, pc}
 800db44:	0800db49 	.word	0x0800db49

0800db48 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af02      	add	r7, sp, #8
 800db4e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800db5c:	461a      	mov	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800db64:	9300      	str	r3, [sp, #0]
 800db66:	4b04      	ldr	r3, [pc, #16]	; (800db78 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800db68:	4804      	ldr	r0, [pc, #16]	; (800db7c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800db6a:	f000 f867 	bl	800dc3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	2003bd50 	.word	0x2003bd50
 800db7c:	2003bd4c 	.word	0x2003bd4c

0800db80 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	4a04      	ldr	r2, [pc, #16]	; (800db9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4618      	mov	r0, r3
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	0802c21c 	.word	0x0802c21c

0800dba0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7ff ffe8 	bl	800db80 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800dbb0:	4a08      	ldr	r2, [pc, #32]	; (800dbd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	605a      	str	r2, [r3, #4]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	609a      	str	r2, [r3, #8]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	60da      	str	r2, [r3, #12]
    {
    }
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	0802c194 	.word	0x0802c194

0800dbd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff ffc8 	bl	800db80 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800dbf0:	4a08      	ldr	r2, [pc, #32]	; (800dc14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	605a      	str	r2, [r3, #4]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3308      	adds	r3, #8
 800dc00:	463a      	mov	r2, r7
 800dc02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc06:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3710      	adds	r7, #16
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	0802c194 	.word	0x0802c194

0800dc18 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff fd9a 	bl	800d75c <_ZN8touchgfx10TransitionC1Ev>
 800dc28:	4a03      	ldr	r2, [pc, #12]	; (800dc38 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	601a      	str	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	0802c124 	.word	0x0802c124

0800dc3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dc3c:	b590      	push	{r4, r7, lr}
 800dc3e:	b08f      	sub	sp, #60	; 0x3c
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	689a      	ldr	r2, [r3, #8]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3320      	adds	r3, #32
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4610      	mov	r0, r2
 800dc5a:	4798      	blx	r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	f243 7263 	movw	r2, #14179	; 0x3763
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d805      	bhi.n	800dc72 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dc66:	4b7f      	ldr	r3, [pc, #508]	; (800de64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dc68:	4a7f      	ldr	r2, [pc, #508]	; (800de68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dc6a:	21a3      	movs	r1, #163	; 0xa3
 800dc6c:	487f      	ldr	r0, [pc, #508]	; (800de6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800dc6e:	f01a fdeb 	bl	8028848 <__assert_func>
 800dc72:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3320      	adds	r3, #32
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4610      	mov	r0, r2
 800dc84:	4798      	blx	r3
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b0f      	cmp	r3, #15
 800dc8a:	d805      	bhi.n	800dc98 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800dc8c:	4b78      	ldr	r3, [pc, #480]	; (800de70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800dc8e:	4a76      	ldr	r2, [pc, #472]	; (800de68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dc90:	21a4      	movs	r1, #164	; 0xa4
 800dc92:	4876      	ldr	r0, [pc, #472]	; (800de6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800dc94:	f01a fdd8 	bl	8028848 <__assert_func>
 800dc98:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68da      	ldr	r2, [r3, #12]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3320      	adds	r3, #32
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4798      	blx	r3
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b0b      	cmp	r3, #11
 800dcb0:	d805      	bhi.n	800dcbe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dcb2:	4b70      	ldr	r3, [pc, #448]	; (800de74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800dcb4:	4a6c      	ldr	r2, [pc, #432]	; (800de68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dcb6:	21a5      	movs	r1, #165	; 0xa5
 800dcb8:	486c      	ldr	r0, [pc, #432]	; (800de6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800dcba:	f01a fdc5 	bl	8028848 <__assert_func>
 800dcbe:	bf00      	nop
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	627b      	str	r3, [r7, #36]	; 0x24
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dccc:	f00b ff70 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f00b ff72 	bl	8019bbc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d008      	beq.n	800dcf2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	330c      	adds	r3, #12
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4610      	mov	r0, r2
 800dcf0:	4798      	blx	r3
    if (*currentTrans)
 800dcf2:	6a3b      	ldr	r3, [r7, #32]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d007      	beq.n	800dd0a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4610      	mov	r0, r2
 800dd08:	4798      	blx	r3
    if (*currentScreen)
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d008      	beq.n	800dd24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3314      	adds	r3, #20
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4610      	mov	r0, r2
 800dd22:	4798      	blx	r3
    if (*currentPresenter)
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d008      	beq.n	800dd3e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3304      	adds	r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	4798      	blx	r3
    if (*currentScreen)
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d007      	beq.n	800dd56 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4610      	mov	r0, r2
 800dd54:	4798      	blx	r3
    if (*currentPresenter)
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d008      	beq.n	800dd70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
}
 800dd70:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	2100      	movs	r1, #0
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f000 f87d 	bl	800de78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	4619      	mov	r1, r3
 800dd82:	200c      	movs	r0, #12
 800dd84:	f7ff fc0c 	bl	800d5a0 <_ZnwjPv>
 800dd88:	4604      	mov	r4, r0
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff ff44 	bl	800dc18 <_ZN8touchgfx12NoTransitionC1Ev>
 800dd90:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 f880 	bl	800de9e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4619      	mov	r1, r3
 800dda2:	f243 7064 	movw	r0, #14180	; 0x3764
 800dda6:	f7ff fbfb 	bl	800d5a0 <_ZnwjPv>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4620      	mov	r0, r4
 800ddae:	f003 f943 	bl	8011038 <_ZN8MainViewC1Ev>
 800ddb2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 f882 	bl	800dec4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	2010      	movs	r0, #16
 800ddc6:	f7ff fbeb 	bl	800d5a0 <_ZnwjPv>
 800ddca:	4604      	mov	r4, r0
 800ddcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f003 f8da 	bl	8010f88 <_ZN13MainPresenterC1ER8MainView>
 800ddd4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddda:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dde0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dde6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800ddee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	e000      	b.n	800ddf6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ddfa:	f7ff fd9d 	bl	800d938 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de00:	3304      	adds	r3, #4
 800de02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff fe0a 	bl	800da1e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f86b 	bl	800deea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	61fb      	str	r3, [r7, #28]
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de1e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	330c      	adds	r3, #12
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	69f8      	ldr	r0, [r7, #28]
 800de2a:	4798      	blx	r3
    newPresenter->activate();
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	69b8      	ldr	r0, [r7, #24]
 800de34:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800de36:	6979      	ldr	r1, [r7, #20]
 800de38:	69f8      	ldr	r0, [r7, #28]
 800de3a:	f00d fb61 	bl	801b500 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3310      	adds	r3, #16
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6978      	ldr	r0, [r7, #20]
 800de48:	4798      	blx	r3
    newTransition->invalidate();
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3314      	adds	r3, #20
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6978      	ldr	r0, [r7, #20]
 800de54:	4798      	blx	r3
}
 800de56:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	373c      	adds	r7, #60	; 0x3c
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd90      	pop	{r4, r7, pc}
 800de62:	bf00      	nop
 800de64:	08029a38 	.word	0x08029a38
 800de68:	08029ac8 	.word	0x08029ac8
 800de6c:	08029bc8 	.word	0x08029bc8
 800de70:	08029c0c 	.word	0x08029c0c
 800de74:	08029cb0 	.word	0x08029cb0

0800de78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3324      	adds	r3, #36	; 0x24
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	887a      	ldrh	r2, [r7, #2]
 800de8e:	4611      	mov	r1, r2
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	4798      	blx	r3
 800de94:	4603      	mov	r3, r0
    }
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b082      	sub	sp, #8
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	460b      	mov	r3, r1
 800dea8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3324      	adds	r3, #36	; 0x24
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	887a      	ldrh	r2, [r7, #2]
 800deb4:	4611      	mov	r1, r2
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	4798      	blx	r3
 800deba:	4603      	mov	r3, r0
    }
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3324      	adds	r3, #36	; 0x24
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	887a      	ldrh	r2, [r7, #2]
 800deda:	4611      	mov	r1, r2
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	4798      	blx	r3
 800dee0:	4603      	mov	r3, r0
    }
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800deea:	b480      	push	{r7}
 800deec:	b083      	sub	sp, #12
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
	...

0800df08 <_ZN8touchgfx12NoTransitionD1Ev>:
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	4a05      	ldr	r2, [pc, #20]	; (800df28 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fc35 	bl	800d788 <_ZN8touchgfx10TransitionD1Ev>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	0802c124 	.word	0x0802c124

0800df2c <_ZN8touchgfx12NoTransitionD0Ev>:
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ffe7 	bl	800df08 <_ZN8touchgfx12NoTransitionD1Ev>
 800df3a:	210c      	movs	r1, #12
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f01a fc55 	bl	80287ec <_ZdlPvj>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	4a05      	ldr	r2, [pc, #20]	; (800df6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fbb5 	bl	800d6cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	0802c194 	.word	0x0802c194

0800df70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff ffe7 	bl	800df4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800df7e:	2110      	movs	r1, #16
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f01a fc33 	bl	80287ec <_ZdlPvj>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	68d2      	ldr	r2, [r2, #12]
 800dfa0:	1052      	asrs	r2, r2, #1
 800dfa2:	1899      	adds	r1, r3, r2
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	e00a      	b.n	800dfcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	68d2      	ldr	r2, [r2, #12]
 800dfbe:	1052      	asrs	r2, r2, #1
 800dfc0:	4413      	add	r3, r2
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	6892      	ldr	r2, [r2, #8]
 800dfc8:	4413      	add	r3, r2
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4608      	mov	r0, r1
 800dfce:	4798      	blx	r3
    }
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d010      	beq.n	800e00a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d107      	bne.n	800e000 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f003 0301 	and.w	r3, r3, #1
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d101      	bne.n	800e000 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dffc:	2301      	movs	r3, #1
 800dffe:	e000      	b.n	800e002 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e000:	2300      	movs	r3, #0
 800e002:	2b01      	cmp	r3, #1
 800e004:	d001      	beq.n	800e00a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e006:	2301      	movs	r3, #1
 800e008:	e000      	b.n	800e00c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e00a:	2300      	movs	r3, #0
    }
 800e00c:	4618      	mov	r0, r3
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	801a      	strh	r2, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	805a      	strh	r2, [r3, #2]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	809a      	strh	r2, [r3, #4]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	80da      	strh	r2, [r3, #6]
    {
    }
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4618      	mov	r0, r3
 800e03c:	370c      	adds	r7, #12
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
	...

0800e048 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e050:	4a14      	ldr	r2, [pc, #80]	; (800e0a4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	3304      	adds	r3, #4
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff ffdc 	bl	800e018 <_ZN8touchgfx4RectC1Ev>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	330c      	adds	r3, #12
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff ffd7 	bl	800e018 <_ZN8touchgfx4RectC1Ev>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	615a      	str	r2, [r3, #20]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	619a      	str	r2, [r3, #24]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	61da      	str	r2, [r3, #28]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	841a      	strh	r2, [r3, #32]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	845a      	strh	r2, [r3, #34]	; 0x22
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	0802d2d4 	.word	0x0802d2d4

0800e0a8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    {
 800e0b0:	4a04      	ldr	r2, [pc, #16]	; (800e0c4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	601a      	str	r2, [r3, #0]
    }
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	0802d2d4 	.word	0x0802d2d4

0800e0c8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
    }
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff ffe9 	bl	800e0a8 <_ZN8touchgfx8DrawableD1Ev>
 800e0d6:	2128      	movs	r1, #40	; 0x28
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f01a fb87 	bl	80287ec <_ZdlPvj>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	887a      	ldrh	r2, [r7, #2]
 800e0f8:	809a      	strh	r2, [r3, #4]
    }
 800e0fa:	bf00      	nop
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e106:	b480      	push	{r7}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	460b      	mov	r3, r1
 800e110:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	887a      	ldrh	r2, [r7, #2]
 800e116:	80da      	strh	r2, [r3, #6]
    }
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	887a      	ldrh	r2, [r7, #2]
 800e134:	811a      	strh	r2, [r3, #8]
    }
 800e136:	bf00      	nop
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	887a      	ldrh	r2, [r7, #2]
 800e152:	815a      	strh	r2, [r3, #10]
    }
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
    {
    }
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e17e:	bf00      	nop
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e18a:	b480      	push	{r7}
 800e18c:	b083      	sub	sp, #12
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e1aa:	bf00      	nop
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
    {
    }
 800e1be:	bf00      	nop
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b082      	sub	sp, #8
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	807b      	strh	r3, [r7, #2]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3354      	adds	r3, #84	; 0x54
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	8879      	ldrh	r1, [r7, #2]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e1ea:	b292      	uxth	r2, r2
 800e1ec:	1a8a      	subs	r2, r1, r2
 800e1ee:	b292      	uxth	r2, r2
 800e1f0:	b210      	sxth	r0, r2
 800e1f2:	8839      	ldrh	r1, [r7, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e1fa:	b292      	uxth	r2, r2
 800e1fc:	1a8a      	subs	r2, r1, r2
 800e1fe:	b292      	uxth	r2, r2
 800e200:	b212      	sxth	r2, r2
 800e202:	4601      	mov	r1, r0
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	4798      	blx	r3
    }
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff ff14 	bl	800e048 <_ZN8touchgfx8DrawableC1Ev>
 800e220:	4a05      	ldr	r2, [pc, #20]	; (800e238 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	0802cbfc 	.word	0x0802cbfc

0800e23c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	4a05      	ldr	r2, [pc, #20]	; (800e274 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	601a      	str	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	f7ff ff1f 	bl	800e0a8 <_ZN8touchgfx8DrawableD1Ev>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	0802cbfc 	.word	0x0802cbfc

0800e278 <_ZN8touchgfx9ContainerD0Ev>:
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ffe7 	bl	800e254 <_ZN8touchgfx9ContainerD1Ev>
 800e286:	212c      	movs	r1, #44	; 0x2c
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f01a faaf 	bl	80287ec <_ZdlPvj>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
        : color(col)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	601a      	str	r2, [r3, #0]
    }
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e2b6:	b480      	push	{r7}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	60f8      	str	r0, [r7, #12]
 800e2be:	4608      	mov	r0, r1
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	817b      	strh	r3, [r7, #10]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	813b      	strh	r3, [r7, #8]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	897a      	ldrh	r2, [r7, #10]
 800e2d4:	801a      	strh	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	893a      	ldrh	r2, [r7, #8]
 800e2da:	805a      	strh	r2, [r3, #2]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	88fa      	ldrh	r2, [r7, #6]
 800e2e0:	809a      	strh	r2, [r3, #4]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	8b3a      	ldrh	r2, [r7, #24]
 800e2e6:	80da      	strh	r2, [r3, #6]
    {
    }
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
    virtual void invalidateContent() const
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
        if (visible)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e304:	2b00      	cmp	r3, #0
 800e306:	d005      	beq.n	800e314 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
            invalidate();
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3314      	adds	r3, #20
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
    }
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
        return 0;
 800e324:	2300      	movs	r3, #0
    }
 800e326:	4618      	mov	r0, r3
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	4608      	mov	r0, r1
 800e33c:	4611      	mov	r1, r2
 800e33e:	461a      	mov	r2, r3
 800e340:	4603      	mov	r3, r0
 800e342:	817b      	strh	r3, [r7, #10]
 800e344:	460b      	mov	r3, r1
 800e346:	813b      	strh	r3, [r7, #8]
 800e348:	4613      	mov	r3, r2
 800e34a:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800e34c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e350:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e354:	4619      	mov	r1, r3
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f000 f80c 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e35c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e364:	4619      	mov	r1, r3
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f000 f822 	bl	800e3b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e36c:	bf00      	nop
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	807b      	strh	r3, [r7, #2]
 800e380:	4613      	mov	r3, r2
 800e382:	803b      	strh	r3, [r7, #0]
        setX(x);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3330      	adds	r3, #48	; 0x30
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e390:	4611      	mov	r1, r2
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
        setY(y);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3334      	adds	r3, #52	; 0x34
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	4798      	blx	r3
    }
 800e3a8:	bf00      	nop
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	807b      	strh	r3, [r7, #2]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3338      	adds	r3, #56	; 0x38
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	4798      	blx	r3
        setHeight(height);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	333c      	adds	r3, #60	; 0x3c
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e3de:	4611      	mov	r1, r2
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	4798      	blx	r3
    }
 800e3e4:	bf00      	nop
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
        return visible;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	370c      	adds	r7, #12
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr

0800e406 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800e406:	b480      	push	{r7}
 800e408:	b083      	sub	sp, #12
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
        return touchable;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e42e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e436:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e43e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f7ff ffe1 	bl	800e420 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	601a      	str	r2, [r3, #0]
    }
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	460b      	mov	r3, r1
 800e480:	817b      	strh	r3, [r7, #10]
 800e482:	4613      	mov	r3, r2
 800e484:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff ffaf 	bl	800e3ec <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d008      	beq.n	800e4a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4618      	mov	r0, r3
 800e498:	f7ff ffb5 	bl	800e406 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
        }
    }
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fdbe 	bl	800e048 <_ZN8touchgfx8DrawableC1Ev>
 800e4cc:	4a03      	ldr	r2, [pc, #12]	; (800e4dc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	601a      	str	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	0802c380 	.word	0x0802c380

0800e4e0 <_ZN8touchgfx6WidgetD1Ev>:
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	4a05      	ldr	r2, [pc, #20]	; (800e500 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fdd9 	bl	800e0a8 <_ZN8touchgfx8DrawableD1Ev>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	0802c380 	.word	0x0802c380

0800e504 <_ZN8touchgfx6WidgetD0Ev>:
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff ffe7 	bl	800e4e0 <_ZN8touchgfx6WidgetD1Ev>
 800e512:	2128      	movs	r1, #40	; 0x28
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f01a f969 	bl	80287ec <_ZdlPvj>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4618      	mov	r0, r3
 800e530:	2326      	movs	r3, #38	; 0x26
 800e532:	461a      	mov	r2, r3
 800e534:	2100      	movs	r1, #0
 800e536:	f01a fa13 	bl	8028960 <memset>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff ffbd 	bl	800e4bc <_ZN8touchgfx6WidgetC1Ev>
 800e542:	4a09      	ldr	r2, [pc, #36]	; (800e568 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	22ff      	movs	r2, #255	; 0xff
 800e54c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	3328      	adds	r3, #40	; 0x28
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fe9e 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	0802d0c0 	.word	0x0802d0c0

0800e56c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e57c:	bf00      	nop
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	4a05      	ldr	r2, [pc, #20]	; (800e5a8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff ffa1 	bl	800e4e0 <_ZN8touchgfx6WidgetD1Ev>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	0802d0c0 	.word	0x0802d0c0

0800e5ac <_ZN8touchgfx3BoxD0Ev>:
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff ffe7 	bl	800e588 <_ZN8touchgfx3BoxD1Ev>
 800e5ba:	212c      	movs	r1, #44	; 0x2c
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f01a f915 	bl	80287ec <_ZdlPvj>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff ffa4 	bl	800e524 <_ZN8touchgfx3BoxC1Ev>
 800e5dc:	4a08      	ldr	r2, [pc, #32]	; (800e600 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	332c      	adds	r3, #44	; 0x2c
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fe55 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	0802d1b8 	.word	0x0802d1b8

0800e604 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	887a      	ldrh	r2, [r7, #2]
 800e630:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e64c:	4a06      	ldr	r2, [pc, #24]	; (800e668 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	887a      	ldrh	r2, [r7, #2]
 800e656:	809a      	strh	r2, [r3, #4]
    }
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4618      	mov	r0, r3
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	0802c0bc 	.word	0x0802c0bc

0800e66c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4618      	mov	r0, r3
 800e678:	2326      	movs	r3, #38	; 0x26
 800e67a:	461a      	mov	r2, r3
 800e67c:	2100      	movs	r1, #0
 800e67e:	f01a f96f 	bl	8028960 <memset>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff ff19 	bl	800e4bc <_ZN8touchgfx6WidgetC1Ev>
 800e68a:	4a16      	ldr	r2, [pc, #88]	; (800e6e4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	3328      	adds	r3, #40	; 0x28
 800e694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff ffd1 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3330      	adds	r3, #48	; 0x30
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7ff fdf7 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	869a      	strh	r2, [r3, #52]	; 0x34
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	22ff      	movs	r2, #255	; 0xff
 800e6b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	333c      	adds	r3, #60	; 0x3c
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f000 f8f2 	bl	800e8be <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	0802d030 	.word	0x0802d030

0800e6e8 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800e6e8:	b590      	push	{r4, r7, lr}
 800e6ea:	b087      	sub	sp, #28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6178      	str	r0, [r7, #20]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fd11 	bl	800e124 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3384      	adds	r3, #132	; 0x84
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	697c      	ldr	r4, [r7, #20]
 800e70c:	463a      	mov	r2, r7
 800e70e:	6979      	ldr	r1, [r7, #20]
 800e710:	4610      	mov	r0, r2
 800e712:	4798      	blx	r3
 800e714:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e718:	463a      	mov	r2, r7
 800e71a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e71c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e720:	bf00      	nop
 800e722:	371c      	adds	r7, #28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd90      	pop	{r4, r7, pc}

0800e728 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6178      	str	r0, [r7, #20]
 800e730:	460b      	mov	r3, r1
 800e732:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e73a:	4611      	mov	r1, r2
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7ff fd00 	bl	800e142 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3384      	adds	r3, #132	; 0x84
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	697c      	ldr	r4, [r7, #20]
 800e74c:	463a      	mov	r2, r7
 800e74e:	6979      	ldr	r1, [r7, #20]
 800e750:	4610      	mov	r0, r2
 800e752:	4798      	blx	r3
 800e754:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e758:	463a      	mov	r2, r7
 800e75a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e75c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e760:	bf00      	nop
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	bd90      	pop	{r4, r7, pc}

0800e768 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7ff fc50 	bl	800e018 <_ZN8touchgfx4RectC1Ev>
    }
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	78fa      	ldrb	r2, [r7, #3]
 800e790:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800e7ac:	687e      	ldr	r6, [r7, #4]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3334      	adds	r3, #52	; 0x34
 800e7b4:	681c      	ldr	r4, [r3, #0]
 800e7b6:	887d      	ldrh	r5, [r7, #2]
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f869 	bl	800e890 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e7c2:	4b1d      	ldr	r3, [pc, #116]	; (800e838 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d105      	bne.n	800e7d6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800e7ca:	4b1c      	ldr	r3, [pc, #112]	; (800e83c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e7cc:	4a1c      	ldr	r2, [pc, #112]	; (800e840 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e7ce:	216c      	movs	r1, #108	; 0x6c
 800e7d0:	481c      	ldr	r0, [pc, #112]	; (800e844 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800e7d2:	f01a f839 	bl	8028848 <__assert_func>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	889a      	ldrh	r2, [r3, #4]
 800e7de:	4b1a      	ldr	r3, [pc, #104]	; (800e848 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	bf34      	ite	cc
 800e7e6:	2301      	movcc	r3, #1
 800e7e8:	2300      	movcs	r3, #0
 800e7ea:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800e7f0:	4b16      	ldr	r3, [pc, #88]	; (800e84c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800e7f2:	4a13      	ldr	r2, [pc, #76]	; (800e840 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e7f4:	216d      	movs	r1, #109	; 0x6d
 800e7f6:	4813      	ldr	r0, [pc, #76]	; (800e844 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800e7f8:	f01a f826 	bl	8028848 <__assert_func>
 800e7fc:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800e7fe:	4b14      	ldr	r3, [pc, #80]	; (800e850 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b0d      	ldr	r3, [pc, #52]	; (800e838 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800e804:	6819      	ldr	r1, [r3, #0]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	889b      	ldrh	r3, [r3, #4]
 800e80a:	005b      	lsls	r3, r3, #1
 800e80c:	440b      	add	r3, r1
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	322c      	adds	r2, #44	; 0x2c
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	4790      	blx	r2
 800e820:	4603      	mov	r3, r0
 800e822:	1aeb      	subs	r3, r5, r3
 800e824:	b29b      	uxth	r3, r3
 800e826:	b21b      	sxth	r3, r3
 800e828:	4619      	mov	r1, r3
 800e82a:	4630      	mov	r0, r6
 800e82c:	47a0      	blx	r4
    }
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e836:	bf00      	nop
 800e838:	2003bd60 	.word	0x2003bd60
 800e83c:	08029d54 	.word	0x08029d54
 800e840:	08029d98 	.word	0x08029d98
 800e844:	08029dd4 	.word	0x08029dd4
 800e848:	2003bd64 	.word	0x2003bd64
 800e84c:	08029e18 	.word	0x08029e18
 800e850:	2003bd68 	.word	0x2003bd68

0800e854 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	460b      	mov	r3, r1
 800e85e:	807b      	strh	r3, [r7, #2]
 800e860:	4613      	mov	r3, r2
 800e862:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3330      	adds	r3, #48	; 0x30
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e872:	4610      	mov	r0, r2
 800e874:	4798      	blx	r3
        setBaselineY(baselineY);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3364      	adds	r3, #100	; 0x64
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e882:	4611      	mov	r1, r2
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	4798      	blx	r3
    }
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	3328      	adds	r3, #40	; 0x28
    }
 800e89c:	4618      	mov	r0, r3
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e8b0:	2300      	movs	r3, #0
    }
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr

0800e8be <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af02      	add	r7, sp, #8
 800e8c4:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	f7ff fcee 	bl	800e2b6 <_ZN8touchgfx4RectC1Essss>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	609a      	str	r2, [r3, #8]
        {
        }
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	4a08      	ldr	r2, [pc, #32]	; (800e918 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	3328      	adds	r3, #40	; 0x28
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe faca 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fdea 	bl	800e4e0 <_ZN8touchgfx6WidgetD1Ev>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	0802d030 	.word	0x0802d030

0800e91c <_ZN8touchgfx8TextAreaD0Ev>:
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff ffe1 	bl	800e8ec <_ZN8touchgfx8TextAreaD1Ev>
 800e92a:	2148      	movs	r1, #72	; 0x48
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f019 ff5d 	bl	80287ec <_ZdlPvj>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
        : TextArea()
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff fe90 	bl	800e66c <_ZN8touchgfx8TextAreaC1Ev>
 800e94c:	4a03      	ldr	r2, [pc, #12]	; (800e95c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	601a      	str	r2, [r3, #0]
    {
    }
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4618      	mov	r0, r3
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	0802d128 	.word	0x0802d128

0800e960 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7ff ffa7 	bl	800e8be <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	4a05      	ldr	r2, [pc, #20]	; (800e998 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	f7ff ffaf 	bl	800e8ec <_ZN8touchgfx8TextAreaD1Ev>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	0802d128 	.word	0x0802d128

0800e99c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ffe7 	bl	800e978 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e9aa:	2148      	movs	r1, #72	; 0x48
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f019 ff1d 	bl	80287ec <_ZdlPvj>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff ffb8 	bl	800e93c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800e9cc:	4a05      	ldr	r2, [pc, #20]	; (800e9e4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0802c2f0 	.word	0x0802c2f0

0800e9e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 800ea00:	b590      	push	{r4, r7, lr}
 800ea02:	b095      	sub	sp, #84	; 0x54
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	6178      	str	r0, [r7, #20]
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7ff fc00 	bl	800e210 <_ZN8touchgfx9ContainerC1Ev>
 800ea10:	4a71      	ldr	r2, [pc, #452]	; (800ebd8 <_ZN12alertBarBaseC1Ev+0x1d8>)
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	601a      	str	r2, [r3, #0]
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	332c      	adds	r3, #44	; 0x2c
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff fdd6 	bl	800e5cc <_ZN8touchgfx13BoxWithBorderC1Ev>
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	3360      	adds	r3, #96	; 0x60
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7ff ffc9 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff fb77 	bl	800e124 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	213c      	movs	r1, #60	; 0x3c
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff fb81 	bl	800e142 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800ea46:	233c      	movs	r3, #60	; 0x3c
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ea4e:	2200      	movs	r2, #0
 800ea50:	2100      	movs	r1, #0
 800ea52:	f7ff fc6e 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea5c:	23ff      	movs	r3, #255	; 0xff
 800ea5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ea62:	2300      	movs	r3, #0
 800ea64:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ea6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ea72:	041b      	lsls	r3, r3, #16
 800ea74:	461a      	mov	r2, r3
 800ea76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea7a:	021b      	lsls	r3, r3, #8
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ea82:	4313      	orrs	r3, r2
 800ea84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ea88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fc02 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800ea94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea96:	4619      	mov	r1, r3
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f7ff fd67 	bl	800e56c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eab0:	2300      	movs	r3, #0
 800eab2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800eab6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800eaba:	041b      	lsls	r3, r3, #16
 800eabc:	461a      	mov	r2, r3
 800eabe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eac2:	021b      	lsls	r3, r3, #8
 800eac4:	431a      	orrs	r2, r3
 800eac6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eaca:	4313      	orrs	r3, r2
 800eacc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ead0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fbde 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800eadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eade:	4619      	mov	r1, r3
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff fd8f 	bl	800e604 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	332c      	adds	r3, #44	; 0x2c
 800eaea:	2105      	movs	r1, #5
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fd97 	bl	800e620 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800eaf8:	233c      	movs	r3, #60	; 0x3c
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	f44f 7348 	mov.w	r3, #800	; 0x320
 800eb00:	2200      	movs	r2, #0
 800eb02:	2100      	movs	r1, #0
 800eb04:	f7ff fc15 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800eb0e:	23ff      	movs	r3, #255	; 0xff
 800eb10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800eb14:	23ff      	movs	r3, #255	; 0xff
 800eb16:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800eb1a:	23ff      	movs	r3, #255	; 0xff
 800eb1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800eb20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eb24:	041b      	lsls	r3, r3, #16
 800eb26:	461a      	mov	r2, r3
 800eb28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800eb2c:	021b      	lsls	r3, r3, #8
 800eb2e:	431a      	orrs	r2, r3
 800eb30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eb34:	4313      	orrs	r3, r2
 800eb36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800eb3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb3e:	4611      	mov	r1, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7ff fba9 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	63fc      	str	r4, [r7, #60]	; 0x3c
 800eb4a:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800eb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb4e:	69ba      	ldr	r2, [r7, #24]
 800eb50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800eb52:	bf00      	nop
    frontText.setLinespacing(0);
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	3360      	adds	r3, #96	; 0x60
 800eb58:	647b      	str	r3, [r7, #68]	; 0x44
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800eb60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb66:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800eb68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3384      	adds	r3, #132	; 0x84
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800eb72:	463a      	mov	r2, r7
 800eb74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb76:	4610      	mov	r0, r2
 800eb78:	4798      	blx	r3
 800eb7a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800eb7e:	463a      	mov	r2, r7
 800eb80:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800eb86:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_94W5));
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800eb8e:	f107 031c 	add.w	r3, r7, #28
 800eb92:	2105      	movs	r1, #5
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff fd53 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 800eb9a:	f107 031c 	add.w	r3, r7, #28
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4620      	mov	r0, r4
 800eba2:	f008 fad1 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800eba6:	f107 031c 	add.w	r3, r7, #28
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fe f974 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	332c      	adds	r3, #44	; 0x2c
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4610      	mov	r0, r2
 800ebba:	f006 f90d 	bl	8014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	3360      	adds	r3, #96	; 0x60
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	f006 f906 	bl	8014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	374c      	adds	r7, #76	; 0x4c
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd90      	pop	{r4, r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	0802c25c 	.word	0x0802c25c

0800ebdc <_ZN12alertBarBaseD1Ev>:

alertBarBase::~alertBarBase()
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	4a0a      	ldr	r2, [pc, #40]	; (800ec10 <_ZN12alertBarBaseD1Ev+0x34>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	3360      	adds	r3, #96	; 0x60
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f82a 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	332c      	adds	r3, #44	; 0x2c
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 f847 	bl	800ec8c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff fb27 	bl	800e254 <_ZN8touchgfx9ContainerD1Ev>
{

}
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	0802c25c 	.word	0x0802c25c

0800ec14 <_ZN12alertBarBaseD0Ev>:
alertBarBase::~alertBarBase()
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
}
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff ffdd 	bl	800ebdc <_ZN12alertBarBaseD1Ev>
 800ec22:	21ac      	movs	r1, #172	; 0xac
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f019 fde1 	bl	80287ec <_ZdlPvj>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]

}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	4a05      	ldr	r2, [pc, #20]	; (800ec68 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7ff fe8d 	bl	800e978 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	0802c2f0 	.word	0x0802c2f0

0800ec6c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff ffe7 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ec7a:	214c      	movs	r1, #76	; 0x4c
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f019 fdb5 	bl	80287ec <_ZdlPvj>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	4a05      	ldr	r2, [pc, #20]	; (800ecac <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff fc73 	bl	800e588 <_ZN8touchgfx3BoxD1Ev>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	0802d1b8 	.word	0x0802d1b8

0800ecb0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff ffe7 	bl	800ec8c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800ecbe:	2134      	movs	r1, #52	; 0x34
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f019 fd93 	bl	80287ec <_ZdlPvj>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
        : color(0)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]
    }
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
        return color;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
    }
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800ed10:	4618      	mov	r0, r3
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800ed24:	4a06      	ldr	r2, [pc, #24]	; (800ed40 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	809a      	strh	r2, [r3, #4]
    {
    }
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4618      	mov	r0, r3
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	0802c4b0 	.word	0x0802c4b0

0800ed44 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
    {
 800ed4c:	4a04      	ldr	r2, [pc, #16]	; (800ed60 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
    }
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	0802c4b0 	.word	0x0802c4b0

0800ed64 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
    }
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff ffe9 	bl	800ed44 <_ZN8touchgfx15AbstractPainterD1Ev>
 800ed72:	2108      	movs	r1, #8
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f019 fd39 	bl	80287ec <_ZdlPvj>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800ed8c:	2300      	movs	r3, #0
    }
 800ed8e:	4618      	mov	r0, r3
 800ed90:	370c      	adds	r7, #12
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	809a      	strh	r2, [r3, #4]
        return true;
 800edae:	2301      	movs	r3, #1
    }
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
    {
        return;
 800edc4:	bf00      	nop
    }
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
            : v(i)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	601a      	str	r2, [r3, #0]
        {
        }
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
        {
            return v;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
        }
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	683a      	ldr	r2, [r7, #0]
 800ee14:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800ee22:	b590      	push	{r4, r7, lr}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	333c      	adds	r3, #60	; 0x3c
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff ffdc 	bl	800edee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800ee36:	4604      	mov	r4, r0
 800ee38:	463b      	mov	r3, r7
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff ffd7 	bl	800edee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800ee40:	4603      	mov	r3, r0
 800ee42:	429c      	cmp	r4, r3
 800ee44:	bf0c      	ite	eq
 800ee46:	2301      	moveq	r3, #1
 800ee48:	2300      	movne	r3, #0
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d106      	bne.n	800ee5e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f007 fc4a 	bl	80166f0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800ee5c:	e000      	b.n	800ee60 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 800ee5e:	bf00      	nop
    }
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd90      	pop	{r4, r7, pc}
	...

0800ee68 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff ff52 	bl	800ed1c <_ZN8touchgfx15AbstractPainterC1Ev>
 800ee78:	4a26      	ldr	r2, [pc, #152]	; (800ef14 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	601a      	str	r2, [r3, #0]
 800ee7e:	2302      	movs	r3, #2
 800ee80:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800ee82:	f7fe fc4f 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 800ee86:	4603      	mov	r3, r0
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	322c      	adds	r2, #44	; 0x2c
 800ee8c:	6812      	ldr	r2, [r2, #0]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	4790      	blx	r2
 800ee92:	4603      	mov	r3, r0
 800ee94:	461a      	mov	r2, r3
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	bf0c      	ite	eq
 800ee9c:	2301      	moveq	r3, #1
 800ee9e:	2300      	movne	r3, #0
 800eea0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800eea2:	f7fe fc33 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 800eea6:	4603      	mov	r3, r0
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff ff2b 	bl	800ed04 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bf14      	ite	ne
 800eeb4:	2301      	movne	r3, #1
 800eeb6:	2300      	moveq	r3, #0
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01b      	beq.n	800eef6 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800eebe:	f7fe fc25 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 800eec2:	4603      	mov	r3, r0
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff ff1d 	bl	800ed04 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800eeca:	4603      	mov	r3, r0
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	322c      	adds	r2, #44	; 0x2c
 800eed0:	6812      	ldr	r2, [r2, #0]
 800eed2:	4618      	mov	r0, r3
 800eed4:	4790      	blx	r2
 800eed6:	4603      	mov	r3, r0
 800eed8:	461a      	mov	r2, r3
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	4293      	cmp	r3, r2
 800eede:	bf0c      	ite	eq
 800eee0:	2301      	moveq	r3, #1
 800eee2:	2300      	movne	r3, #0
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	bf14      	ite	ne
 800eef0:	2301      	movne	r3, #1
 800eef2:	2300      	moveq	r3, #0
 800eef4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800eef6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d105      	bne.n	800ef08 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 800eefc:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 800eefe:	4a07      	ldr	r2, [pc, #28]	; (800ef1c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 800ef00:	2128      	movs	r1, #40	; 0x28
 800ef02:	4807      	ldr	r0, [pc, #28]	; (800ef20 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 800ef04:	f019 fca0 	bl	8028848 <__assert_func>
 800ef08:	bf00      	nop
    }
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	0802c490 	.word	0x0802c490
 800ef18:	08029e58 	.word	0x08029e58
 800ef1c:	08029ebc 	.word	0x08029ebc
 800ef20:	08029efc 	.word	0x08029efc

0800ef24 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
    {
 800ef2e:	4a08      	ldr	r2, [pc, #32]	; (800ef50 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3304      	adds	r3, #4
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff fec9 	bl	800ecd0 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f827 	bl	800ef94 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	0802c47c 	.word	0x0802c47c

0800ef54 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
    {
 800ef5c:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	601a      	str	r2, [r3, #0]
    }
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4618      	mov	r0, r3
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	0802c47c 	.word	0x0802c47c

0800ef74 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
    }
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff ffe9 	bl	800ef54 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800ef82:	2108      	movs	r1, #8
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f019 fc31 	bl	80287ec <_ZdlPvj>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	605a      	str	r2, [r3, #4]
    }
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	4a05      	ldr	r2, [pc, #20]	; (800efd0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff febf 	bl	800ed44 <_ZN8touchgfx15AbstractPainterD1Ev>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	0802c490 	.word	0x0802c490

0800efd4 <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7ff ffe7 	bl	800efb0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800efe2:	2108      	movs	r1, #8
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f019 fc01 	bl	80287ec <_ZdlPvj>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff ff31 	bl	800ee68 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3308      	adds	r3, #8
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7ff ff89 	bl	800ef24 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f012:	4a05      	ldr	r2, [pc, #20]	; (800f028 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	4a04      	ldr	r2, [pc, #16]	; (800f02c <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	609a      	str	r2, [r3, #8]
    {
    }
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	0802cde4 	.word	0x0802cde4
 800f02c:	0802ce08 	.word	0x0802ce08

0800f030 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	3308      	adds	r3, #8
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	4618      	mov	r0, r3
 800f042:	f7ff ffa7 	bl	800ef94 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800f04a:	f107 0314 	add.w	r3, r7, #20
 800f04e:	4618      	mov	r0, r3
 800f050:	f7ff fe4c 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 800f054:	4603      	mov	r3, r0
 800f056:	0c1b      	lsrs	r3, r3, #16
 800f058:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	741a      	strb	r2, [r3, #16]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800f062:	f107 0310 	add.w	r3, r7, #16
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fe40 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 800f06c:	4603      	mov	r3, r0
 800f06e:	0a1b      	lsrs	r3, r3, #8
 800f070:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	745a      	strb	r2, [r3, #17]
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800f07a:	f107 030c 	add.w	r3, r7, #12
 800f07e:	4618      	mov	r0, r3
 800f080:	f7ff fe34 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 800f084:	4603      	mov	r3, r0
 800f086:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	749a      	strb	r2, [r3, #18]
    }
 800f08c:	bf00      	nop
 800f08e:	3718      	adds	r7, #24
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f094:	f1a0 0008 	sub.w	r0, r0, #8
 800f098:	e7ca      	b.n	800f030 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

0800f09c <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 800f09c:	b590      	push	{r4, r7, lr}
 800f09e:	b095      	sub	sp, #84	; 0x54
 800f0a0:	af02      	add	r7, sp, #8
 800f0a2:	6178      	str	r0, [r7, #20]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff f8b2 	bl	800e210 <_ZN8touchgfx9ContainerC1Ev>
 800f0ac:	4a72      	ldr	r2, [pc, #456]	; (800f278 <_ZN11tempBoxBaseC1Ev+0x1dc>)
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	332c      	adds	r3, #44	; 0x2c
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f007 fafa 	bl	80166b0 <_ZN8touchgfx4LineC1Ev>
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f0c2:	f107 0320 	add.w	r3, r7, #32
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff f8e5 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f0ce:	6a39      	ldr	r1, [r7, #32]
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f7ff ff8f 	bl	800eff4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	33b0      	adds	r3, #176	; 0xb0
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fac6 	bl	800e66c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	21dc      	movs	r1, #220	; 0xdc
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff f81d 	bl	800e124 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	213c      	movs	r1, #60	; 0x3c
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7ff f827 	bl	800e142 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800f0fa:	233c      	movs	r3, #60	; 0x3c
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	2364      	movs	r3, #100	; 0x64
 800f100:	2200      	movs	r2, #0
 800f102:	2100      	movs	r1, #0
 800f104:	f7ff f915 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f10e:	23ff      	movs	r3, #255	; 0xff
 800f110:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800f114:	23ff      	movs	r3, #255	; 0xff
 800f116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f11a:	23ff      	movs	r3, #255	; 0xff
 800f11c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f120:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f124:	041b      	lsls	r3, r3, #16
 800f126:	461a      	mov	r2, r3
 800f128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	431a      	orrs	r2, r3
 800f130:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f134:	4313      	orrs	r3, r2
 800f136:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f13a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f13e:	4611      	mov	r1, r2
 800f140:	4618      	mov	r0, r3
 800f142:	f7ff f8a9 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	4619      	mov	r1, r3
 800f14a:	4620      	mov	r0, r4
 800f14c:	f7ff ff70 	bl	800f030 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	339c      	adds	r3, #156	; 0x9c
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f7ff fe52 	bl	800ee06 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	332c      	adds	r3, #44	; 0x2c
 800f166:	2200      	movs	r2, #0
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f000 f8c2 	bl	800f2f4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	332c      	adds	r3, #44	; 0x2c
 800f174:	22dc      	movs	r2, #220	; 0xdc
 800f176:	2100      	movs	r1, #0
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 f8e1 	bl	800f340 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	332c      	adds	r3, #44	; 0x2c
 800f182:	2101      	movs	r1, #1
 800f184:	4618      	mov	r0, r3
 800f186:	f000 f901 	bl	800f38c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	332c      	adds	r3, #44	; 0x2c
 800f18e:	2101      	movs	r1, #1
 800f190:	4618      	mov	r0, r3
 800f192:	f007 fbb9 	bl	8016908 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800f19c:	233c      	movs	r3, #60	; 0x3c
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	23dc      	movs	r3, #220	; 0xdc
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	f7ff f8c4 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800f1b0:	23ff      	movs	r3, #255	; 0xff
 800f1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f1b6:	23ff      	movs	r3, #255	; 0xff
 800f1b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800f1bc:	23ff      	movs	r3, #255	; 0xff
 800f1be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800f1c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	431a      	orrs	r2, r3
 800f1d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f1dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff f858 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	63fc      	str	r4, [r7, #60]	; 0x3c
 800f1ec:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800f1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f0:	69fa      	ldr	r2, [r7, #28]
 800f1f2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f1f4:	bf00      	nop
    textArea1.setLinespacing(2);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	33b0      	adds	r3, #176	; 0xb0
 800f1fa:	647b      	str	r3, [r7, #68]	; 0x44
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800f202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f204:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f208:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	3384      	adds	r3, #132	; 0x84
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800f214:	463a      	mov	r2, r7
 800f216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f218:	4610      	mov	r0, r2
 800f21a:	4798      	blx	r3
 800f21c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f220:	463a      	mov	r2, r7
 800f222:	ca07      	ldmia	r2, {r0, r1, r2}
 800f224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f228:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VVN0));
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800f230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f234:	2104      	movs	r1, #4
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff fa02 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 800f23c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f240:	4619      	mov	r1, r3
 800f242:	4620      	mov	r0, r4
 800f244:	f007 ff80 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fd fe23 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 800f252:	697a      	ldr	r2, [r7, #20]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	332c      	adds	r3, #44	; 0x2c
 800f258:	4619      	mov	r1, r3
 800f25a:	4610      	mov	r0, r2
 800f25c:	f005 fdbc 	bl	8014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	33b0      	adds	r3, #176	; 0xb0
 800f266:	4619      	mov	r1, r3
 800f268:	4610      	mov	r0, r2
 800f26a:	f005 fdb5 	bl	8014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	4618      	mov	r0, r3
 800f272:	374c      	adds	r7, #76	; 0x4c
 800f274:	46bd      	mov	sp, r7
 800f276:	bd90      	pop	{r4, r7, pc}
 800f278:	0802c3e8 	.word	0x0802c3e8

0800f27c <_ZN11tempBoxBaseD1Ev>:

tempBoxBase::~tempBoxBase()
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	4a0d      	ldr	r2, [pc, #52]	; (800f2bc <_ZN11tempBoxBaseD1Ev+0x40>)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	601a      	str	r2, [r3, #0]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	33b0      	adds	r3, #176	; 0xb0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff fb2c 	bl	800e8ec <_ZN8touchgfx8TextAreaD1Ev>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	339c      	adds	r3, #156	; 0x9c
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 f8d3 	bl	800f444 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	332c      	adds	r3, #44	; 0x2c
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 f8ac 	bl	800f400 <_ZN8touchgfx4LineD1Ev>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe ffd2 	bl	800e254 <_ZN8touchgfx9ContainerD1Ev>
{

}
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	0802c3e8 	.word	0x0802c3e8

0800f2c0 <_ZN11tempBoxBaseD0Ev>:
tempBoxBase::~tempBoxBase()
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
}
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff ffd7 	bl	800f27c <_ZN11tempBoxBaseD1Ev>
 800f2ce:	21f8      	movs	r1, #248	; 0xf8
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f019 fa8b 	bl	80287ec <_ZdlPvj>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]

}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b089      	sub	sp, #36	; 0x24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	f107 0314 	add.w	r3, r7, #20
 800f30c:	4611      	mov	r1, r2
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff fd5e 	bl	800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	461c      	mov	r4, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	61fb      	str	r3, [r7, #28]
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	f107 0310 	add.w	r3, r7, #16
 800f324:	4611      	mov	r1, r2
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff fd52 	bl	800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f32c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800f32e:	461a      	mov	r2, r3
 800f330:	4621      	mov	r1, r4
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f007 fad2 	bl	80168dc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800f338:	bf00      	nop
 800f33a:	3724      	adds	r7, #36	; 0x24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd90      	pop	{r4, r7, pc}

0800f340 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 800f340:	b590      	push	{r4, r7, lr}
 800f342:	b089      	sub	sp, #36	; 0x24
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	61bb      	str	r3, [r7, #24]
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	015a      	lsls	r2, r3, #5
 800f354:	f107 0314 	add.w	r3, r7, #20
 800f358:	4611      	mov	r1, r2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff fd38 	bl	800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	461c      	mov	r4, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	015a      	lsls	r2, r3, #5
 800f36c:	f107 0310 	add.w	r3, r7, #16
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff fd2c 	bl	800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f378:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800f37a:	461a      	mov	r2, r3
 800f37c:	4621      	mov	r1, r4
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f007 fab7 	bl	80168f2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 800f384:	bf00      	nop
 800f386:	3724      	adds	r7, #36	; 0x24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd90      	pop	{r4, r7, pc}

0800f38c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	015a      	lsls	r2, r3, #5
 800f39e:	f107 0308 	add.w	r3, r7, #8
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff fd13 	bl	800edd0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7ff fd37 	bl	800ee22 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 800f3b4:	bf00      	nop
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	4a05      	ldr	r2, [pc, #20]	; (800f3dc <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff f887 	bl	800e4e0 <_ZN8touchgfx6WidgetD1Ev>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	0802ce1c 	.word	0x0802ce1c

0800f3e0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff ffe7 	bl	800f3bc <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f3ee:	212c      	movs	r1, #44	; 0x2c
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f019 f9fb 	bl	80287ec <_ZdlPvj>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	4a05      	ldr	r2, [pc, #20]	; (800f420 <_ZN8touchgfx4LineD1Ev+0x20>)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	601a      	str	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff ffd3 	bl	800f3bc <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	0802cfb8 	.word	0x0802cfb8

0800f424 <_ZN8touchgfx4LineD0Ev>:
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ffe7 	bl	800f400 <_ZN8touchgfx4LineD1Ev>
 800f432:	2170      	movs	r1, #112	; 0x70
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f019 f9d9 	bl	80287ec <_ZdlPvj>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	4a09      	ldr	r2, [pc, #36]	; (800f474 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	4a09      	ldr	r2, [pc, #36]	; (800f478 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	609a      	str	r2, [r3, #8]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3308      	adds	r3, #8
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7ff fd79 	bl	800ef54 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff fda3 	bl	800efb0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4618      	mov	r0, r3
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	0802cde4 	.word	0x0802cde4
 800f478:	0802ce08 	.word	0x0802ce08

0800f47c <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 800f47c:	f1a0 0008 	sub.w	r0, r0, #8
 800f480:	e7e0      	b.n	800f444 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f482:	bf00      	nop

0800f484 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ffd9 	bl	800f444 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f492:	2114      	movs	r1, #20
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f019 f9a9 	bl	80287ec <_ZdlPvj>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 800f4a4:	f1a0 0008 	sub.w	r0, r0, #8
 800f4a8:	e7ec      	b.n	800f484 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

0800f4ac <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
    {
 800f4b4:	4a06      	ldr	r2, [pc, #24]	; (800f4d0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe fec8 	bl	800e254 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	0802d3d0 	.word	0x0802d3d0

0800f4d4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
    }
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ffe5 	bl	800f4ac <_ZN8touchgfx6ScreenD1Ev>
 800f4e2:	213c      	movs	r1, #60	; 0x3c
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f019 f981 	bl	80287ec <_ZdlPvj>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
    {
    }
 800f4fc:	bf00      	nop
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
    {
    }
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
    {
    }
 800f524:	bf00      	nop
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
    {
    }
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3304      	adds	r3, #4
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f005 fc33 	bl	8014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f572:	bf00      	nop
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
    void setWildcard1(const Unicode::UnicodeChar* value)
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	6039      	str	r1, [r7, #0]
        wc1 = value;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800f58a:	bf00      	nop
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800f5a0:	6839      	ldr	r1, [r7, #0]
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7ff ffe9 	bl	800f57a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	4a05      	ldr	r2, [pc, #20]	; (800f5d0 <_ZN7tempBoxD1Ev+0x20>)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff fe5b 	bl	800f27c <_ZN11tempBoxBaseD1Ev>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	0802c684 	.word	0x0802c684

0800f5d4 <_ZN7tempBoxD0Ev>:
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff ffe7 	bl	800f5b0 <_ZN7tempBoxD1Ev>
 800f5e2:	21f8      	movs	r1, #248	; 0xf8
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f019 f901 	bl	80287ec <_ZdlPvj>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	4a05      	ldr	r2, [pc, #20]	; (800f614 <_ZN8alertBarD1Ev+0x20>)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	601a      	str	r2, [r3, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff fae9 	bl	800ebdc <_ZN12alertBarBaseD1Ev>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	0802c5f0 	.word	0x0802c5f0

0800f618 <_ZN8alertBarD0Ev>:
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff ffe7 	bl	800f5f4 <_ZN8alertBarD1Ev>
 800f626:	21ac      	movs	r1, #172	; 0xac
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f019 f8df 	bl	80287ec <_ZdlPvj>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	4a05      	ldr	r2, [pc, #20]	; (800f658 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	601a      	str	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7ff ff2f 	bl	800f4ac <_ZN8touchgfx6ScreenD1Ev>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	0802c508 	.word	0x0802c508

0800f65c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff ffe7 	bl	800f638 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800f66a:	2140      	movs	r1, #64	; 0x40
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f019 f8bd 	bl	80287ec <_ZdlPvj>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	4a33      	ldr	r2, [pc, #204]	; (800f754 <_ZN12MainViewBaseD1Ev+0xd8>)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff fad9 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f203 7384 	addw	r3, r3, #1924	; 0x784
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff fad3 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7ff ffa3 	bl	800f5f4 <_ZN8alertBarD1Ev>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff ff9d 	bl	800f5f4 <_ZN8alertBarD1Ev>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff ff75 	bl	800f5b0 <_ZN7tempBoxD1Ev>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7ff ff6f 	bl	800f5b0 <_ZN7tempBoxD1Ev>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff ff69 	bl	800f5b0 <_ZN7tempBoxD1Ev>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff ff63 	bl	800f5b0 <_ZN7tempBoxD1Ev>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff faa9 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff faa3 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f708:	4618      	mov	r0, r3
 800f70a:	f7ff fa9d 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fe95 	bl	800f444 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	33e4      	adds	r3, #228	; 0xe4
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff fe6e 	bl	800f400 <_ZN8touchgfx4LineD1Ev>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	3398      	adds	r3, #152	; 0x98
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fa8d 	bl	800ec48 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	336c      	adds	r3, #108	; 0x6c
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe ff28 	bl	800e588 <_ZN8touchgfx3BoxD1Ev>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	3340      	adds	r3, #64	; 0x40
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe ff23 	bl	800e588 <_ZN8touchgfx3BoxD1Ev>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff ff77 	bl	800f638 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	0802c4d0 	.word	0x0802c4d0

0800f758 <_ZN12MainViewBaseD0Ev>:
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f7ff ff8b 	bl	800f67c <_ZN12MainViewBaseD1Ev>
 800f766:	f243 7164 	movw	r1, #14180	; 0x3764
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f019 f83e 	bl	80287ec <_ZdlPvj>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <_ZN12MainViewBase9function1Ev>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 800f77a:	b480      	push	{r7}
 800f77c:	b083      	sub	sp, #12
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 800f782:	bf00      	nop
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
	...

0800f790 <_ZN12MainViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


MainViewBase::MainViewBase()
 800f790:	b590      	push	{r4, r7, lr}
 800f792:	b0d3      	sub	sp, #332	; 0x14c
 800f794:	af02      	add	r7, sp, #8
 800f796:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f79a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f79e:	6018      	str	r0, [r3, #0]
 800f7a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f001 f88e 	bl	80108cc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 800f7b0:	4ae0      	ldr	r2, [pc, #896]	; (800fb34 <_ZN12MainViewBaseC1Ev+0x3a4>)
 800f7b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	601a      	str	r2, [r3, #0]
 800f7be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3340      	adds	r3, #64	; 0x40
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe feaa 	bl	800e524 <_ZN8touchgfx3BoxC1Ev>
 800f7d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	336c      	adds	r3, #108	; 0x6c
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fea1 	bl	800e524 <_ZN8touchgfx3BoxC1Ev>
 800f7e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3398      	adds	r3, #152	; 0x98
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7ff f8e4 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f7f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	33e4      	adds	r3, #228	; 0xe4
 800f800:	4618      	mov	r0, r3
 800f802:	f006 ff55 	bl	80166b0 <_ZN8touchgfx4LineC1Ev>
 800f806:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f80a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 800f814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f818:	2100      	movs	r1, #0
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fe fd3c 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f820:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f824:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f828:	6819      	ldr	r1, [r3, #0]
 800f82a:	4620      	mov	r0, r4
 800f82c:	f7ff fbe2 	bl	800eff4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800f830:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff f8bc 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f844:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff f8b2 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f858:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f85c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff f8a8 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f86c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800f87a:	4618      	mov	r0, r3
 800f87c:	f001 faba 	bl	8010df4 <_ZN7tempBoxC1Ev>
 800f880:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800f88e:	4618      	mov	r0, r3
 800f890:	f001 fab0 	bl	8010df4 <_ZN7tempBoxC1Ev>
 800f894:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f001 faa6 	bl	8010df4 <_ZN7tempBoxC1Ev>
 800f8a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f001 fa9c 	bl	8010df4 <_ZN7tempBoxC1Ev>
 800f8bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f001 fa74 	bl	8010db8 <_ZN8alertBarC1Ev>
 800f8d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f001 fa6a 	bl	8010db8 <_ZN8alertBarC1Ev>
 800f8e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f203 7384 	addw	r3, r3, #1924	; 0x784
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7ff f862 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f8f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800f906:	4618      	mov	r0, r3
 800f908:	f7ff f858 	bl	800e9bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f90c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f603 0384 	addw	r3, r3, #2180	; 0x884
 800f91a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800f91e:	4618      	mov	r0, r3
 800f920:	f008 fc4a 	bl	80181b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 800f924:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f932:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f93c:	2200      	movs	r2, #0
 800f93e:	2100      	movs	r1, #0
 800f940:	f7fe fcf7 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f944:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f952:	2300      	movs	r3, #0
 800f954:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 800f958:	2300      	movs	r3, #0
 800f95a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 800f95e:	2300      	movs	r3, #0
 800f960:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800f964:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800f968:	041b      	lsls	r3, r3, #16
 800f96a:	461a      	mov	r2, r3
 800f96c:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800f970:	021b      	lsls	r3, r3, #8
 800f972:	431a      	orrs	r2, r3
 800f974:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800f978:	4313      	orrs	r3, r2
 800f97a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f97e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f982:	4611      	mov	r1, r2
 800f984:	4618      	mov	r0, r3
 800f986:	f7fe fc87 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f98a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f98e:	4619      	mov	r1, r3
 800f990:	4620      	mov	r0, r4
 800f992:	f7fe fdeb 	bl	800e56c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 800f996:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f99a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800f9a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	f240 3325 	movw	r3, #805	; 0x325
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	f7fe fcbe 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f9b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f9ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 800f9d6:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800f9da:	041b      	lsls	r3, r3, #16
 800f9dc:	461a      	mov	r2, r3
 800f9de:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800f9e2:	021b      	lsls	r3, r3, #8
 800f9e4:	431a      	orrs	r2, r3
 800f9e6:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f9f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe fc4e 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800f9fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa00:	4619      	mov	r1, r3
 800fa02:	4620      	mov	r0, r4
 800fa04:	f7fe fdb2 	bl	800e56c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 800fa08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3398      	adds	r3, #152	; 0x98
 800fa14:	223c      	movs	r2, #60	; 0x3c
 800fa16:	f240 114b 	movw	r1, #331	; 0x14b
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fcaa 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800fa20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800fa2e:	23ff      	movs	r3, #255	; 0xff
 800fa30:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800fa34:	23ff      	movs	r3, #255	; 0xff
 800fa36:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800fa3a:	23ff      	movs	r3, #255	; 0xff
 800fa3c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 800fa40:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800fa44:	041b      	lsls	r3, r3, #16
 800fa46:	461a      	mov	r2, r3
 800fa48:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	431a      	orrs	r2, r3
 800fa50:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800fa54:	4313      	orrs	r3, r2
 800fa56:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fa5a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fc19 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800fa66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800fa70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fa78:	601a      	str	r2, [r3, #0]
        color = newColor;
 800fa7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fa7e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800fa82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800fa86:	6812      	ldr	r2, [r2, #0]
 800fa88:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fa8a:	bf00      	nop
    gearArea.setLinespacing(0);
 800fa8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3398      	adds	r3, #152	; 0x98
 800fa98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 800faa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800faa6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800faaa:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800faac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3384      	adds	r3, #132	; 0x84
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800faba:	463a      	mov	r2, r7
 800fabc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800fac0:	4610      	mov	r0, r2
 800fac2:	4798      	blx	r3
 800fac4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fac8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800facc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800fad0:	ca07      	ldmia	r2, {r0, r1, r2}
 800fad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800fad6:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CBCX).getText());
 800fad8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fadc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 800fae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800faea:	210b      	movs	r1, #11
 800faec:	4618      	mov	r0, r3
 800faee:	f7fe fda7 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800faf2:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <_ZN12MainViewBaseC1Ev+0x3a8>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <_ZN12MainViewBaseC1Ev+0x376>
 800fafa:	4b10      	ldr	r3, [pc, #64]	; (800fb3c <_ZN12MainViewBaseC1Ev+0x3ac>)
 800fafc:	4a10      	ldr	r2, [pc, #64]	; (800fb40 <_ZN12MainViewBaseC1Ev+0x3b0>)
 800fafe:	2160      	movs	r1, #96	; 0x60
 800fb00:	4810      	ldr	r0, [pc, #64]	; (800fb44 <_ZN12MainViewBaseC1Ev+0x3b4>)
 800fb02:	f018 fea1 	bl	8028848 <__assert_func>
 800fb06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fb0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        return typedTextId < numberOfTypedTexts;
 800fb0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fb12:	889a      	ldrh	r2, [r3, #4]
 800fb14:	4b0c      	ldr	r3, [pc, #48]	; (800fb48 <_ZN12MainViewBaseC1Ev+0x3b8>)
 800fb16:	881b      	ldrh	r3, [r3, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	bf34      	ite	cc
 800fb1c:	2301      	movcc	r3, #1
 800fb1e:	2300      	movcs	r3, #0
 800fb20:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d114      	bne.n	800fb50 <_ZN12MainViewBaseC1Ev+0x3c0>
 800fb26:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <_ZN12MainViewBaseC1Ev+0x3bc>)
 800fb28:	4a05      	ldr	r2, [pc, #20]	; (800fb40 <_ZN12MainViewBaseC1Ev+0x3b0>)
 800fb2a:	2161      	movs	r1, #97	; 0x61
 800fb2c:	4805      	ldr	r0, [pc, #20]	; (800fb44 <_ZN12MainViewBaseC1Ev+0x3b4>)
 800fb2e:	f018 fe8b 	bl	8028848 <__assert_func>
 800fb32:	bf00      	nop
 800fb34:	0802c4d0 	.word	0x0802c4d0
 800fb38:	2003bd60 	.word	0x2003bd60
 800fb3c:	08029f60 	.word	0x08029f60
 800fb40:	0802a16c 	.word	0x0802a16c
 800fb44:	08029fe0 	.word	0x08029fe0
 800fb48:	2003bd64 	.word	0x2003bd64
 800fb4c:	0802a024 	.word	0x0802a024
 800fb50:	bf00      	nop
        return texts->getText(typedTextId);
 800fb52:	4bab      	ldr	r3, [pc, #684]	; (800fe00 <_ZN12MainViewBaseC1Ev+0x670>)
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb5e:	889b      	ldrh	r3, [r3, #4]
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f001 f86c 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	bf00      	nop
 800fb6c:	4aa5      	ldr	r2, [pc, #660]	; (800fe04 <_ZN12MainViewBaseC1Ev+0x674>)
 800fb6e:	2102      	movs	r1, #2
 800fb70:	4620      	mov	r0, r4
 800fb72:	f00c ffa3 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fb76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fd f98c 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 800fb80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800fb8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7ff fcf9 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 800fba4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3398      	adds	r3, #152	; 0x98
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f007 faa9 	bl	8017108 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T6XW));
 800fbb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fbba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800fbc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe fd38 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 800fbd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f007 fab6 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800fbdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fd f959 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 800fbe6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fbea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 800fbf4:	2314      	movs	r3, #20
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	2398      	movs	r3, #152	; 0x98
 800fbfa:	228c      	movs	r2, #140	; 0x8c
 800fbfc:	f240 1149 	movw	r1, #329	; 0x149
 800fc00:	f7fe fb97 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800fc04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 800fc12:	23ff      	movs	r3, #255	; 0xff
 800fc14:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 800fc18:	23ff      	movs	r3, #255	; 0xff
 800fc1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800fc1e:	23ff      	movs	r3, #255	; 0xff
 800fc20:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800fc24:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800fc28:	041b      	lsls	r3, r3, #16
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800fc30:	021b      	lsls	r3, r3, #8
 800fc32:	431a      	orrs	r2, r3
 800fc34:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fc3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe fb27 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800fc4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc4e:	4619      	mov	r1, r3
 800fc50:	4620      	mov	r0, r4
 800fc52:	f7ff f9ed 	bl	800f030 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800fc56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 800fc64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fc72:	4619      	mov	r1, r3
 800fc74:	4610      	mov	r0, r2
 800fc76:	f7ff f8c6 	bl	800ee06 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800fc7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	33e4      	adds	r3, #228	; 0xe4
 800fc86:	2200      	movs	r2, #0
 800fc88:	2100      	movs	r1, #0
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fb32 	bl	800f2f4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 800fc90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	33e4      	adds	r3, #228	; 0xe4
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2196      	movs	r1, #150	; 0x96
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fb4d 	bl	800f340 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 800fca6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	33e4      	adds	r3, #228	; 0xe4
 800fcb2:	2104      	movs	r1, #4
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7ff fb69 	bl	800f38c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800fcba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	33e4      	adds	r3, #228	; 0xe4
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f006 fe1d 	bl	8016908 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 800fcce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800fcdc:	2345      	movs	r3, #69	; 0x45
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	23d4      	movs	r3, #212	; 0xd4
 800fce2:	2247      	movs	r2, #71	; 0x47
 800fce4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800fce8:	f7fe fb23 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 800fcec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800fd00:	2366      	movs	r3, #102	; 0x66
 800fd02:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 800fd06:	23ff      	movs	r3, #255	; 0xff
 800fd08:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 800fd0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800fd10:	041b      	lsls	r3, r3, #16
 800fd12:	461a      	mov	r2, r3
 800fd14:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800fd18:	021b      	lsls	r3, r3, #8
 800fd1a:	431a      	orrs	r2, r3
 800fd1c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800fd20:	4313      	orrs	r3, r2
 800fd22:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fd26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fe fab3 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800fd32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd36:	461a      	mov	r2, r3
 800fd38:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800fd3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800fd44:	601a      	str	r2, [r3, #0]
        color = newColor;
 800fd46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd4a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800fd4e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800fd52:	6812      	ldr	r2, [r2, #0]
 800fd54:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800fd56:	bf00      	nop
    rpmArea.setLinespacing(0);
 800fd58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fd66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        linespace = space;
 800fd70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd74:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 800fd78:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800fd7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3384      	adds	r3, #132	; 0x84
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800fd88:	463a      	mov	r2, r7
 800fd8a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800fd8e:	4610      	mov	r0, r2
 800fd90:	4798      	blx	r3
 800fd92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd96:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fd9a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800fd9e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fda0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800fda4:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BKZT).getText());
 800fda6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fdaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 800fdb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fdb8:	210a      	movs	r1, #10
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fc40 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fdc0:	4b11      	ldr	r3, [pc, #68]	; (800fe08 <_ZN12MainViewBaseC1Ev+0x678>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d105      	bne.n	800fdd4 <_ZN12MainViewBaseC1Ev+0x644>
 800fdc8:	4b10      	ldr	r3, [pc, #64]	; (800fe0c <_ZN12MainViewBaseC1Ev+0x67c>)
 800fdca:	4a11      	ldr	r2, [pc, #68]	; (800fe10 <_ZN12MainViewBaseC1Ev+0x680>)
 800fdcc:	2160      	movs	r1, #96	; 0x60
 800fdce:	4811      	ldr	r0, [pc, #68]	; (800fe14 <_ZN12MainViewBaseC1Ev+0x684>)
 800fdd0:	f018 fd3a 	bl	8028848 <__assert_func>
 800fdd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fdd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        return typedTextId < numberOfTypedTexts;
 800fddc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fde0:	889a      	ldrh	r2, [r3, #4]
 800fde2:	4b0d      	ldr	r3, [pc, #52]	; (800fe18 <_ZN12MainViewBaseC1Ev+0x688>)
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	bf34      	ite	cc
 800fdea:	2301      	movcc	r3, #1
 800fdec:	2300      	movcs	r3, #0
 800fdee:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d115      	bne.n	800fe20 <_ZN12MainViewBaseC1Ev+0x690>
 800fdf4:	4b09      	ldr	r3, [pc, #36]	; (800fe1c <_ZN12MainViewBaseC1Ev+0x68c>)
 800fdf6:	4a06      	ldr	r2, [pc, #24]	; (800fe10 <_ZN12MainViewBaseC1Ev+0x680>)
 800fdf8:	2161      	movs	r1, #97	; 0x61
 800fdfa:	4806      	ldr	r0, [pc, #24]	; (800fe14 <_ZN12MainViewBaseC1Ev+0x684>)
 800fdfc:	f018 fd24 	bl	8028848 <__assert_func>
 800fe00:	2003bd6c 	.word	0x2003bd6c
 800fe04:	0802a1a4 	.word	0x0802a1a4
 800fe08:	2003bd60 	.word	0x2003bd60
 800fe0c:	08029f60 	.word	0x08029f60
 800fe10:	0802a16c 	.word	0x0802a16c
 800fe14:	08029fe0 	.word	0x08029fe0
 800fe18:	2003bd64 	.word	0x2003bd64
 800fe1c:	0802a024 	.word	0x0802a024
 800fe20:	bf00      	nop
        return texts->getText(typedTextId);
 800fe22:	4bd7      	ldr	r3, [pc, #860]	; (8010180 <_ZN12MainViewBaseC1Ev+0x9f0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f000 ff07 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 800fe32:	4603      	mov	r3, r0
 800fe34:	bf00      	nop
 800fe36:	4ad3      	ldr	r2, [pc, #844]	; (8010184 <_ZN12MainViewBaseC1Ev+0x9f4>)
 800fe38:	210a      	movs	r1, #10
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f00c fe3e 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fe40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fd f827 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 800fe4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800fe58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800fe66:	4619      	mov	r1, r3
 800fe68:	4610      	mov	r0, r2
 800fe6a:	f7ff fb94 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W8VI));
 800fe6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800fe7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe80:	2101      	movs	r1, #1
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fbdc 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 800fe88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f007 f95a 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800fe94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fc fffd 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 800fe9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 800feac:	2331      	movs	r3, #49	; 0x31
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	23f0      	movs	r3, #240	; 0xf0
 800feb2:	2252      	movs	r2, #82	; 0x52
 800feb4:	210e      	movs	r1, #14
 800feb6:	f7fe fa3c 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800feba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800febe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 800fec8:	23ff      	movs	r3, #255	; 0xff
 800feca:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 800fece:	23ff      	movs	r3, #255	; 0xff
 800fed0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 800fed4:	23ff      	movs	r3, #255	; 0xff
 800fed6:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 800feda:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800fede:	041b      	lsls	r3, r3, #16
 800fee0:	461a      	mov	r2, r3
 800fee2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800fee6:	021b      	lsls	r3, r3, #8
 800fee8:	431a      	orrs	r2, r3
 800feea:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800feee:	4313      	orrs	r3, r2
 800fef0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe f9cc 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 800ff00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff04:	461a      	mov	r2, r3
 800ff06:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 800ff0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ff12:	601a      	str	r2, [r3, #0]
        color = newColor;
 800ff14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff18:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ff1c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800ff20:	6812      	ldr	r2, [r2, #0]
 800ff22:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ff24:	bf00      	nop
    battArea.setLinespacing(0);
 800ff26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ff34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ff38:	2300      	movs	r3, #0
 800ff3a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
        linespace = space;
 800ff3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff42:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 800ff46:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800ff48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	3384      	adds	r3, #132	; 0x84
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800ff56:	463a      	mov	r2, r7
 800ff58:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	4798      	blx	r3
 800ff60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff64:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800ff68:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ff6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ff72:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YJO6).getText());
 800ff74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f603 0434 	addw	r4, r3, #2100	; 0x834
 800ff82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ff86:	2108      	movs	r1, #8
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fe fb59 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ff8e:	4b7e      	ldr	r3, [pc, #504]	; (8010188 <_ZN12MainViewBaseC1Ev+0x9f8>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d105      	bne.n	800ffa2 <_ZN12MainViewBaseC1Ev+0x812>
 800ff96:	4b7d      	ldr	r3, [pc, #500]	; (801018c <_ZN12MainViewBaseC1Ev+0x9fc>)
 800ff98:	4a7d      	ldr	r2, [pc, #500]	; (8010190 <_ZN12MainViewBaseC1Ev+0xa00>)
 800ff9a:	2160      	movs	r1, #96	; 0x60
 800ff9c:	487d      	ldr	r0, [pc, #500]	; (8010194 <_ZN12MainViewBaseC1Ev+0xa04>)
 800ff9e:	f018 fc53 	bl	8028848 <__assert_func>
 800ffa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ffa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        return typedTextId < numberOfTypedTexts;
 800ffaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ffae:	889a      	ldrh	r2, [r3, #4]
 800ffb0:	4b79      	ldr	r3, [pc, #484]	; (8010198 <_ZN12MainViewBaseC1Ev+0xa08>)
 800ffb2:	881b      	ldrh	r3, [r3, #0]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	bf34      	ite	cc
 800ffb8:	2301      	movcc	r3, #1
 800ffba:	2300      	movcs	r3, #0
 800ffbc:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d105      	bne.n	800ffce <_ZN12MainViewBaseC1Ev+0x83e>
 800ffc2:	4b76      	ldr	r3, [pc, #472]	; (801019c <_ZN12MainViewBaseC1Ev+0xa0c>)
 800ffc4:	4a72      	ldr	r2, [pc, #456]	; (8010190 <_ZN12MainViewBaseC1Ev+0xa00>)
 800ffc6:	2161      	movs	r1, #97	; 0x61
 800ffc8:	4872      	ldr	r0, [pc, #456]	; (8010194 <_ZN12MainViewBaseC1Ev+0xa04>)
 800ffca:	f018 fc3d 	bl	8028848 <__assert_func>
 800ffce:	bf00      	nop
        return texts->getText(typedTextId);
 800ffd0:	4b6b      	ldr	r3, [pc, #428]	; (8010180 <_ZN12MainViewBaseC1Ev+0x9f0>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 fe30 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	bf00      	nop
 800ffe4:	4a67      	ldr	r2, [pc, #412]	; (8010184 <_ZN12MainViewBaseC1Ev+0x9f4>)
 800ffe6:	210a      	movs	r1, #10
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f00c fd67 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ffee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fc ff50 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 800fff8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8010006:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801000a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8010014:	4619      	mov	r1, r3
 8010016:	4610      	mov	r0, r2
 8010018:	f7ff fabd 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X1RQ));
 801001c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 801002a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801002e:	2102      	movs	r1, #2
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe fb05 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 8010036:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801003a:	4619      	mov	r1, r3
 801003c:	4620      	mov	r0, r4
 801003e:	f007 f883 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010042:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010046:	4618      	mov	r0, r3
 8010048:	f7fc ff26 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 801004c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801005a:	2331      	movs	r3, #49	; 0x31
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	23f0      	movs	r3, #240	; 0xf0
 8010060:	2252      	movs	r2, #82	; 0x52
 8010062:	f44f 7108 	mov.w	r1, #544	; 0x220
 8010066:	f7fe f964 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801006a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801006e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8010078:	23ff      	movs	r3, #255	; 0xff
 801007a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 801007e:	23ff      	movs	r3, #255	; 0xff
 8010080:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8010084:	23ff      	movs	r3, #255	; 0xff
 8010086:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 801008a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801008e:	041b      	lsls	r3, r3, #16
 8010090:	461a      	mov	r2, r3
 8010092:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8010096:	021b      	lsls	r3, r3, #8
 8010098:	431a      	orrs	r2, r3
 801009a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 801009e:	4313      	orrs	r3, r2
 80100a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80100a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fe f8f4 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 80100b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80100b4:	461a      	mov	r2, r3
 80100b6:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 80100ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80100be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80100c2:	601a      	str	r2, [r3, #0]
        color = newColor;
 80100c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80100c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80100cc:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80100d0:	6812      	ldr	r2, [r2, #0]
 80100d2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80100d4:	bf00      	nop
    oilPressArea.setLinespacing(0);
 80100d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80100da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80100e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80100e8:	2300      	movs	r3, #0
 80100ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        linespace = space;
 80100ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80100f2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80100f6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80100f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3384      	adds	r3, #132	; 0x84
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8010106:	463a      	mov	r2, r7
 8010108:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801010c:	4610      	mov	r0, r2
 801010e:	4798      	blx	r3
 8010110:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010114:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010118:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801011c:	ca07      	ldmia	r2, {r0, r1, r2}
 801011e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010122:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_R4GH).getText());
 8010124:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8010132:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010136:	210d      	movs	r1, #13
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fa81 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801013e:	4b12      	ldr	r3, [pc, #72]	; (8010188 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d105      	bne.n	8010152 <_ZN12MainViewBaseC1Ev+0x9c2>
 8010146:	4b11      	ldr	r3, [pc, #68]	; (801018c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8010148:	4a11      	ldr	r2, [pc, #68]	; (8010190 <_ZN12MainViewBaseC1Ev+0xa00>)
 801014a:	2160      	movs	r1, #96	; 0x60
 801014c:	4811      	ldr	r0, [pc, #68]	; (8010194 <_ZN12MainViewBaseC1Ev+0xa04>)
 801014e:	f018 fb7b 	bl	8028848 <__assert_func>
 8010152:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        return typedTextId < numberOfTypedTexts;
 801015a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801015e:	889a      	ldrh	r2, [r3, #4]
 8010160:	4b0d      	ldr	r3, [pc, #52]	; (8010198 <_ZN12MainViewBaseC1Ev+0xa08>)
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	bf34      	ite	cc
 8010168:	2301      	movcc	r3, #1
 801016a:	2300      	movcs	r3, #0
 801016c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801016e:	2b00      	cmp	r3, #0
 8010170:	d116      	bne.n	80101a0 <_ZN12MainViewBaseC1Ev+0xa10>
 8010172:	4b0a      	ldr	r3, [pc, #40]	; (801019c <_ZN12MainViewBaseC1Ev+0xa0c>)
 8010174:	4a06      	ldr	r2, [pc, #24]	; (8010190 <_ZN12MainViewBaseC1Ev+0xa00>)
 8010176:	2161      	movs	r1, #97	; 0x61
 8010178:	4806      	ldr	r0, [pc, #24]	; (8010194 <_ZN12MainViewBaseC1Ev+0xa04>)
 801017a:	f018 fb65 	bl	8028848 <__assert_func>
 801017e:	bf00      	nop
 8010180:	2003bd6c 	.word	0x2003bd6c
 8010184:	0802a1a4 	.word	0x0802a1a4
 8010188:	2003bd60 	.word	0x2003bd60
 801018c:	08029f60 	.word	0x08029f60
 8010190:	0802a16c 	.word	0x0802a16c
 8010194:	08029fe0 	.word	0x08029fe0
 8010198:	2003bd64 	.word	0x2003bd64
 801019c:	0802a024 	.word	0x0802a024
 80101a0:	bf00      	nop
        return texts->getText(typedTextId);
 80101a2:	4b91      	ldr	r3, [pc, #580]	; (80103e8 <_ZN12MainViewBaseC1Ev+0xc58>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f000 fd47 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 80101b2:	4603      	mov	r3, r0
 80101b4:	bf00      	nop
 80101b6:	4a8d      	ldr	r2, [pc, #564]	; (80103ec <_ZN12MainViewBaseC1Ev+0xc5c>)
 80101b8:	210a      	movs	r1, #10
 80101ba:	4620      	mov	r0, r4
 80101bc:	f00c fc7e 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80101c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fc fe67 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 80101ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80101ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80101d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80101dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80101e6:	4619      	mov	r1, r3
 80101e8:	4610      	mov	r0, r2
 80101ea:	f7ff f9d4 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_52EE));
 80101ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80101f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f503 7400 	add.w	r4, r3, #512	; 0x200
 80101fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010200:	2103      	movs	r1, #3
 8010202:	4618      	mov	r0, r3
 8010204:	f7fe fa1c 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 8010208:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801020c:	4619      	mov	r1, r3
 801020e:	4620      	mov	r0, r4
 8010210:	f006 ff9a 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010214:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010218:	4618      	mov	r0, r3
 801021a:	f7fc fe3d 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 801021e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801022c:	22f8      	movs	r2, #248	; 0xf8
 801022e:	210b      	movs	r1, #11
 8010230:	4618      	mov	r0, r3
 8010232:	f7fe f89f 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8010236:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801023a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010244:	f240 1249 	movw	r2, #329	; 0x149
 8010248:	210b      	movs	r1, #11
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe f892 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8010250:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801025e:	22f8      	movs	r2, #248	; 0xf8
 8010260:	f240 213a 	movw	r1, #570	; 0x23a
 8010264:	4618      	mov	r0, r3
 8010266:	f7fe f885 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 801026a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801026e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010278:	f240 1249 	movw	r2, #329	; 0x149
 801027c:	f240 213a 	movw	r1, #570	; 0x23a
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe f877 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8010286:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801028a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010294:	2200      	movs	r2, #0
 8010296:	2100      	movs	r1, #0
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe f86b 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 801029e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80102ac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80102b0:	2100      	movs	r1, #0
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe f85e 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 80102b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f203 7084 	addw	r0, r3, #1924	; 0x784
 80102c6:	2331      	movs	r3, #49	; 0x31
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	23ee      	movs	r3, #238	; 0xee
 80102cc:	2296      	movs	r2, #150	; 0x96
 80102ce:	210e      	movs	r1, #14
 80102d0:	f7fe f82f 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80102d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f203 7484 	addw	r4, r3, #1924	; 0x784
 80102e2:	23ff      	movs	r3, #255	; 0xff
 80102e4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80102e8:	23ff      	movs	r3, #255	; 0xff
 80102ea:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80102ee:	23ff      	movs	r3, #255	; 0xff
 80102f0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80102f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80102f8:	041b      	lsls	r3, r3, #16
 80102fa:	461a      	mov	r2, r3
 80102fc:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8010300:	021b      	lsls	r3, r3, #8
 8010302:	431a      	orrs	r2, r3
 8010304:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8010308:	4313      	orrs	r3, r2
 801030a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801030e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010312:	4611      	mov	r1, r2
 8010314:	4618      	mov	r0, r3
 8010316:	f7fd ffbf 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 801031a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801031e:	461a      	mov	r2, r3
 8010320:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8010324:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010328:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801032c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801032e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010332:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010336:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 801033a:	6812      	ldr	r2, [r2, #0]
 801033c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801033e:	bf00      	nop
    cltArea.setLinespacing(0);
 8010340:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801034e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010352:	2300      	movs	r3, #0
 8010354:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
        linespace = space;
 8010358:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801035c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010360:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010362:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	3384      	adds	r3, #132	; 0x84
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8010370:	463a      	mov	r2, r7
 8010372:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010376:	4610      	mov	r0, r2
 8010378:	4798      	blx	r3
 801037a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801037e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010382:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010386:	ca07      	ldmia	r2, {r0, r1, r2}
 8010388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801038c:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A40Q).getText());
 801038e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f603 045c 	addw	r4, r3, #2140	; 0x85c
 801039c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80103a0:	2109      	movs	r1, #9
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe f94c 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103a8:	4b11      	ldr	r3, [pc, #68]	; (80103f0 <_ZN12MainViewBaseC1Ev+0xc60>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d105      	bne.n	80103bc <_ZN12MainViewBaseC1Ev+0xc2c>
 80103b0:	4b10      	ldr	r3, [pc, #64]	; (80103f4 <_ZN12MainViewBaseC1Ev+0xc64>)
 80103b2:	4a11      	ldr	r2, [pc, #68]	; (80103f8 <_ZN12MainViewBaseC1Ev+0xc68>)
 80103b4:	2160      	movs	r1, #96	; 0x60
 80103b6:	4811      	ldr	r0, [pc, #68]	; (80103fc <_ZN12MainViewBaseC1Ev+0xc6c>)
 80103b8:	f018 fa46 	bl	8028848 <__assert_func>
 80103bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80103c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        return typedTextId < numberOfTypedTexts;
 80103c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103c8:	889a      	ldrh	r2, [r3, #4]
 80103ca:	4b0d      	ldr	r3, [pc, #52]	; (8010400 <_ZN12MainViewBaseC1Ev+0xc70>)
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	bf34      	ite	cc
 80103d2:	2301      	movcc	r3, #1
 80103d4:	2300      	movcs	r3, #0
 80103d6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d115      	bne.n	8010408 <_ZN12MainViewBaseC1Ev+0xc78>
 80103dc:	4b09      	ldr	r3, [pc, #36]	; (8010404 <_ZN12MainViewBaseC1Ev+0xc74>)
 80103de:	4a06      	ldr	r2, [pc, #24]	; (80103f8 <_ZN12MainViewBaseC1Ev+0xc68>)
 80103e0:	2161      	movs	r1, #97	; 0x61
 80103e2:	4806      	ldr	r0, [pc, #24]	; (80103fc <_ZN12MainViewBaseC1Ev+0xc6c>)
 80103e4:	f018 fa30 	bl	8028848 <__assert_func>
 80103e8:	2003bd6c 	.word	0x2003bd6c
 80103ec:	0802a1a4 	.word	0x0802a1a4
 80103f0:	2003bd60 	.word	0x2003bd60
 80103f4:	08029f60 	.word	0x08029f60
 80103f8:	0802a16c 	.word	0x0802a16c
 80103fc:	08029fe0 	.word	0x08029fe0
 8010400:	2003bd64 	.word	0x2003bd64
 8010404:	0802a024 	.word	0x0802a024
 8010408:	bf00      	nop
        return texts->getText(typedTextId);
 801040a:	4b6b      	ldr	r3, [pc, #428]	; (80105b8 <_ZN12MainViewBaseC1Ev+0xe28>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f000 fc13 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 801041a:	4603      	mov	r3, r0
 801041c:	bf00      	nop
 801041e:	4a67      	ldr	r2, [pc, #412]	; (80105bc <_ZN12MainViewBaseC1Ev+0xe2c>)
 8010420:	210a      	movs	r1, #10
 8010422:	4620      	mov	r0, r4
 8010424:	f00c fb4a 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010428:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801042c:	4618      	mov	r0, r3
 801042e:	f7fc fd33 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8010432:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f203 7284 	addw	r2, r3, #1924	; 0x784
 8010440:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f603 035c 	addw	r3, r3, #2140	; 0x85c
 801044e:	4619      	mov	r1, r3
 8010450:	4610      	mov	r0, r2
 8010452:	f7ff f8a0 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8EGU));
 8010456:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801045a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f203 7484 	addw	r4, r3, #1924	; 0x784
 8010464:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010468:	2107      	movs	r1, #7
 801046a:	4618      	mov	r0, r3
 801046c:	f7fe f8e8 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 8010470:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010474:	4619      	mov	r1, r3
 8010476:	4620      	mov	r0, r4
 8010478:	f006 fe66 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801047c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010480:	4618      	mov	r0, r3
 8010482:	f7fc fd09 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8010486:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801048a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 8010494:	2331      	movs	r3, #49	; 0x31
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	23f0      	movs	r3, #240	; 0xf0
 801049a:	2296      	movs	r2, #150	; 0x96
 801049c:	f44f 7108 	mov.w	r1, #544	; 0x220
 80104a0:	f7fd ff47 	bl	800e332 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80104a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80104a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80104b2:	23ff      	movs	r3, #255	; 0xff
 80104b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80104b8:	23ff      	movs	r3, #255	; 0xff
 80104ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80104be:	23ff      	movs	r3, #255	; 0xff
 80104c0:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80104c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80104c8:	041b      	lsls	r3, r3, #16
 80104ca:	461a      	mov	r2, r3
 80104cc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80104d0:	021b      	lsls	r3, r3, #8
 80104d2:	431a      	orrs	r2, r3
 80104d4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80104d8:	4313      	orrs	r3, r2
 80104da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80104de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd fed7 	bl	800e298 <_ZN8touchgfx9colortypeC1Em>
 80104ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104ee:	461a      	mov	r2, r3
 80104f0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80104f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80104f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80104fc:	601a      	str	r2, [r3, #0]
        color = newColor;
 80104fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010502:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010506:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 801050a:	6812      	ldr	r2, [r2, #0]
 801050c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801050e:	bf00      	nop
    oilTempArea.setLinespacing(0);
 8010510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801051e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8010522:	2300      	movs	r3, #0
 8010524:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
        linespace = space;
 8010528:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801052c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8010530:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010532:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3384      	adds	r3, #132	; 0x84
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8010540:	463a      	mov	r2, r7
 8010542:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8010546:	4610      	mov	r0, r2
 8010548:	4798      	blx	r3
 801054a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801054e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010552:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010556:	ca07      	ldmia	r2, {r0, r1, r2}
 8010558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801055c:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7JNZ).getText());
 801055e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 801056c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010570:	210e      	movs	r1, #14
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe f864 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010578:	4b11      	ldr	r3, [pc, #68]	; (80105c0 <_ZN12MainViewBaseC1Ev+0xe30>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d105      	bne.n	801058c <_ZN12MainViewBaseC1Ev+0xdfc>
 8010580:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <_ZN12MainViewBaseC1Ev+0xe34>)
 8010582:	4a11      	ldr	r2, [pc, #68]	; (80105c8 <_ZN12MainViewBaseC1Ev+0xe38>)
 8010584:	2160      	movs	r1, #96	; 0x60
 8010586:	4811      	ldr	r0, [pc, #68]	; (80105cc <_ZN12MainViewBaseC1Ev+0xe3c>)
 8010588:	f018 f95e 	bl	8028848 <__assert_func>
 801058c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010590:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        return typedTextId < numberOfTypedTexts;
 8010594:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010598:	889a      	ldrh	r2, [r3, #4]
 801059a:	4b0d      	ldr	r3, [pc, #52]	; (80105d0 <_ZN12MainViewBaseC1Ev+0xe40>)
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	429a      	cmp	r2, r3
 80105a0:	bf34      	ite	cc
 80105a2:	2301      	movcc	r3, #1
 80105a4:	2300      	movcs	r3, #0
 80105a6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d115      	bne.n	80105d8 <_ZN12MainViewBaseC1Ev+0xe48>
 80105ac:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <_ZN12MainViewBaseC1Ev+0xe44>)
 80105ae:	4a06      	ldr	r2, [pc, #24]	; (80105c8 <_ZN12MainViewBaseC1Ev+0xe38>)
 80105b0:	2161      	movs	r1, #97	; 0x61
 80105b2:	4806      	ldr	r0, [pc, #24]	; (80105cc <_ZN12MainViewBaseC1Ev+0xe3c>)
 80105b4:	f018 f948 	bl	8028848 <__assert_func>
 80105b8:	2003bd6c 	.word	0x2003bd6c
 80105bc:	0802a1a4 	.word	0x0802a1a4
 80105c0:	2003bd60 	.word	0x2003bd60
 80105c4:	08029f60 	.word	0x08029f60
 80105c8:	0802a16c 	.word	0x0802a16c
 80105cc:	08029fe0 	.word	0x08029fe0
 80105d0:	2003bd64 	.word	0x2003bd64
 80105d4:	0802a024 	.word	0x0802a024
 80105d8:	bf00      	nop
        return texts->getText(typedTextId);
 80105da:	4b9a      	ldr	r3, [pc, #616]	; (8010844 <_ZN12MainViewBaseC1Ev+0x10b4>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 fb2b 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 80105ea:	4603      	mov	r3, r0
 80105ec:	bf00      	nop
 80105ee:	4a96      	ldr	r2, [pc, #600]	; (8010848 <_ZN12MainViewBaseC1Ev+0x10b8>)
 80105f0:	210a      	movs	r1, #10
 80105f2:	4620      	mov	r0, r4
 80105f4:	f00c fa62 	bl	801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80105f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fc fc4b 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 8010602:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8010610:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 801061e:	4619      	mov	r1, r3
 8010620:	4610      	mov	r0, r2
 8010622:	f7fe ffb8 	bl	800f596 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ILXZ));
 8010626:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801062a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8010634:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010638:	210c      	movs	r1, #12
 801063a:	4618      	mov	r0, r3
 801063c:	f7fe f800 	bl	800e640 <_ZN8touchgfx9TypedTextC1Et>
 8010640:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010644:	4619      	mov	r1, r3
 8010646:	4620      	mov	r0, r4
 8010648:	f006 fd7e 	bl	8017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801064c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010650:	4618      	mov	r0, r3
 8010652:	f7fc fc21 	bl	800ce98 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8010656:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801065a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	3340      	adds	r3, #64	; 0x40
 801066c:	4619      	mov	r1, r3
 801066e:	4610      	mov	r0, r2
 8010670:	f7fe ff74 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8010674:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	336c      	adds	r3, #108	; 0x6c
 801068a:	4619      	mov	r1, r3
 801068c:	4610      	mov	r0, r2
 801068e:	f7fe ff65 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8010692:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3398      	adds	r3, #152	; 0x98
 80106a8:	4619      	mov	r1, r3
 80106aa:	4610      	mov	r0, r2
 80106ac:	f7fe ff56 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 80106b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	33e4      	adds	r3, #228	; 0xe4
 80106c6:	4619      	mov	r1, r3
 80106c8:	4610      	mov	r0, r2
 80106ca:	f7fe ff47 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 80106ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80106e6:	4619      	mov	r1, r3
 80106e8:	4610      	mov	r0, r2
 80106ea:	f7fe ff37 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 80106ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010706:	4619      	mov	r1, r3
 8010708:	4610      	mov	r0, r2
 801070a:	f7fe ff27 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 801070e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801071c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f7fe ff17 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 801072e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801073c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010746:	4619      	mov	r1, r3
 8010748:	4610      	mov	r0, r2
 801074a:	f7fe ff07 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 801074e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801075c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010766:	4619      	mov	r1, r3
 8010768:	4610      	mov	r0, r2
 801076a:	f7fe fef7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 801076e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801077c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010786:	4619      	mov	r1, r3
 8010788:	4610      	mov	r0, r2
 801078a:	f7fe fee7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 801078e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801079c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80107a6:	4619      	mov	r1, r3
 80107a8:	4610      	mov	r0, r2
 80107aa:	f7fe fed7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 80107ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80107c6:	4619      	mov	r1, r3
 80107c8:	4610      	mov	r0, r2
 80107ca:	f7fe fec7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 80107ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80107e6:	4619      	mov	r1, r3
 80107e8:	4610      	mov	r0, r2
 80107ea:	f7fe feb7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 80107ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8010806:	4619      	mov	r1, r3
 8010808:	4610      	mov	r0, r2
 801080a:	f7fe fea7 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 801080e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801081c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010826:	4619      	mov	r1, r3
 8010828:	4610      	mov	r0, r2
 801082a:	f7fe fe97 	bl	800f55c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801082e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4618      	mov	r0, r3
 801083a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 801083e:	46bd      	mov	sp, r7
 8010840:	bd90      	pop	{r4, r7, pc}
 8010842:	bf00      	nop
 8010844:	2003bd6c 	.word	0x2003bd6c
 8010848:	0802a1a4 	.word	0x0802a1a4

0801084c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801085a:	4618      	mov	r0, r3
 801085c:	f000 fadc 	bl	8010e18 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010866:	4618      	mov	r0, r3
 8010868:	f000 fad6 	bl	8010e18 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fad0 	bl	8010e18 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801087e:	4618      	mov	r0, r3
 8010880:	f000 faca 	bl	8010e18 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801088a:	4618      	mov	r0, r3
 801088c:	f000 faa6 	bl	8010ddc <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010896:	4618      	mov	r0, r3
 8010898:	f000 faa0 	bl	8010ddc <_ZN8alertBar10initializeEv>
}
 801089c:	bf00      	nop
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
    if(56 == key)
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	2b38      	cmp	r3, #56	; 0x38
 80108b4:	d105      	bne.n	80108c2 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Interaction1
        //When hardware button 56 clicked call virtual function
        //Call function1
        function1();
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	332c      	adds	r3, #44	; 0x2c
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	4798      	blx	r3
    }
}
 80108c2:	bf00      	nop
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
	...

080108cc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	f00a fc66 	bl	801b1a8 <_ZN8touchgfx6ScreenC1Ev>
 80108dc:	4a05      	ldr	r2, [pc, #20]	; (80108f4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	601a      	str	r2, [r3, #0]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4618      	mov	r0, r3
 80108ec:	3708      	adds	r7, #8
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	0802c508 	.word	0x0802c508

080108f8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80108f8:	b480      	push	{r7}
 80108fa:	af00      	add	r7, sp, #0
    return bitmap_database;
 80108fc:	4b02      	ldr	r3, [pc, #8]	; (8010908 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80108fe:	4618      	mov	r0, r3
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr
 8010908:	0802c534 	.word	0x0802c534

0801090c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010910:	2301      	movs	r3, #1
}
 8010912:	4618      	mov	r0, r3
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	460b      	mov	r3, r1
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801092a:	2300      	movs	r3, #0
    }
 801092c:	4618      	mov	r0, r3
 801092e:	3714      	adds	r7, #20
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010940:	2300      	movs	r3, #0
    }
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801094e:	b480      	push	{r7}
 8010950:	b083      	sub	sp, #12
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010956:	2300      	movs	r3, #0
    }
 8010958:	4618      	mov	r0, r3
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	4613      	mov	r3, r2
 8010970:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010972:	4a07      	ldr	r2, [pc, #28]	; (8010990 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010978:	4a06      	ldr	r2, [pc, #24]	; (8010994 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801097e:	4a06      	ldr	r2, [pc, #24]	; (8010998 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010980:	88fb      	ldrh	r3, [r7, #6]
 8010982:	8013      	strh	r3, [r2, #0]
    }
 8010984:	bf00      	nop
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr
 8010990:	2003bd60 	.word	0x2003bd60
 8010994:	2003bd68 	.word	0x2003bd68
 8010998:	2003bd64 	.word	0x2003bd64

0801099c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801099c:	b40e      	push	{r1, r2, r3}
 801099e:	b580      	push	{r7, lr}
 80109a0:	b085      	sub	sp, #20
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80109a6:	f107 0320 	add.w	r3, r7, #32
 80109aa:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	69fa      	ldr	r2, [r7, #28]
 80109b0:	2100      	movs	r1, #0
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f009 ff72 	bl	801a89c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80109b8:	4603      	mov	r3, r0
 80109ba:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80109bc:	89fb      	ldrh	r3, [r7, #14]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109c8:	b003      	add	sp, #12
 80109ca:	4770      	bx	lr

080109cc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80109cc:	b40c      	push	{r2, r3}
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b084      	sub	sp, #16
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
 80109d6:	460b      	mov	r3, r1
 80109d8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80109da:	f107 031c 	add.w	r3, r7, #28
 80109de:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80109e0:	78f9      	ldrb	r1, [r7, #3]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	69ba      	ldr	r2, [r7, #24]
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f009 ff58 	bl	801a89c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80109ec:	4603      	mov	r3, r0
 80109ee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80109f0:	89fb      	ldrh	r3, [r7, #14]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109fc:	b002      	add	sp, #8
 80109fe:	4770      	bx	lr

08010a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08a      	sub	sp, #40	; 0x28
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	460b      	mov	r3, r1
 8010a0a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d016      	beq.n	8010a42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	3322      	adds	r3, #34	; 0x22
 8010a18:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	8adb      	ldrh	r3, [r3, #22]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d105      	bne.n	8010a2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010a22:	4b43      	ldr	r3, [pc, #268]	; (8010b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010a24:	4a43      	ldr	r2, [pc, #268]	; (8010b34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010a26:	21c0      	movs	r1, #192	; 0xc0
 8010a28:	4843      	ldr	r0, [pc, #268]	; (8010b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010a2a:	f017 ff0d 	bl	8028848 <__assert_func>
            return buffer[pos];
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a30:	8a9b      	ldrh	r3, [r3, #20]
 8010a32:	461a      	mov	r2, r3
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d001      	beq.n	8010a42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e000      	b.n	8010a44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010a42:	2300      	movs	r3, #0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d06a      	beq.n	8010b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f00b fa89 	bl	801bf60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3322      	adds	r3, #34	; 0x22
 8010a52:	623b      	str	r3, [r7, #32]
 8010a54:	2301      	movs	r3, #1
 8010a56:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	8adb      	ldrh	r3, [r3, #22]
 8010a5c:	8bfa      	ldrh	r2, [r7, #30]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d305      	bcc.n	8010a6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010a62:	4b36      	ldr	r3, [pc, #216]	; (8010b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010a64:	4a36      	ldr	r2, [pc, #216]	; (8010b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010a66:	21c5      	movs	r1, #197	; 0xc5
 8010a68:	4833      	ldr	r0, [pc, #204]	; (8010b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010a6a:	f017 feed 	bl	8028848 <__assert_func>
            const uint16_t index = pos + offset;
 8010a6e:	6a3b      	ldr	r3, [r7, #32]
 8010a70:	8a9a      	ldrh	r2, [r3, #20]
 8010a72:	8bfb      	ldrh	r3, [r7, #30]
 8010a74:	4413      	add	r3, r2
 8010a76:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010a78:	8bbb      	ldrh	r3, [r7, #28]
 8010a7a:	2b09      	cmp	r3, #9
 8010a7c:	d801      	bhi.n	8010a82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010a7e:	8bbb      	ldrh	r3, [r7, #28]
 8010a80:	e001      	b.n	8010a86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010a82:	8bbb      	ldrh	r3, [r7, #28]
 8010a84:	3b0a      	subs	r3, #10
 8010a86:	6a3a      	ldr	r2, [r7, #32]
 8010a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a8c:	f640 123f 	movw	r2, #2367	; 0x93f
 8010a90:	4293      	cmp	r3, r2
 8010a92:	bf0c      	ite	eq
 8010a94:	2301      	moveq	r3, #1
 8010a96:	2300      	movne	r3, #0
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d03f      	beq.n	8010b1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	3322      	adds	r3, #34	; 0x22
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	3222      	adds	r2, #34	; 0x22
 8010aa6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	8ad2      	ldrh	r2, [r2, #22]
 8010aac:	2a00      	cmp	r2, #0
 8010aae:	d105      	bne.n	8010abc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010ab0:	4b1f      	ldr	r3, [pc, #124]	; (8010b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010ab2:	4a20      	ldr	r2, [pc, #128]	; (8010b34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010ab4:	21c0      	movs	r1, #192	; 0xc0
 8010ab6:	4820      	ldr	r0, [pc, #128]	; (8010b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ab8:	f017 fec6 	bl	8028848 <__assert_func>
            return buffer[pos];
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	8a92      	ldrh	r2, [r2, #20]
 8010ac0:	4611      	mov	r1, r2
 8010ac2:	68ba      	ldr	r2, [r7, #8]
 8010ac4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010ac8:	613b      	str	r3, [r7, #16]
 8010aca:	4613      	mov	r3, r2
 8010acc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	8adb      	ldrh	r3, [r3, #22]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d806      	bhi.n	8010ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010ad6:	4b1b      	ldr	r3, [pc, #108]	; (8010b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010ad8:	4a1b      	ldr	r2, [pc, #108]	; (8010b48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010ada:	f240 110d 	movw	r1, #269	; 0x10d
 8010ade:	4816      	ldr	r0, [pc, #88]	; (8010b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ae0:	f017 feb2 	bl	8028848 <__assert_func>
            const uint16_t index = pos + 1;
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	8a9b      	ldrh	r3, [r3, #20]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010aec:	89bb      	ldrh	r3, [r7, #12]
 8010aee:	2b09      	cmp	r3, #9
 8010af0:	d801      	bhi.n	8010af6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010af2:	89bb      	ldrh	r3, [r7, #12]
 8010af4:	e000      	b.n	8010af8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010af6:	2300      	movs	r3, #0
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	89f9      	ldrh	r1, [r7, #14]
 8010afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010b00:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3322      	adds	r3, #34	; 0x22
 8010b06:	61bb      	str	r3, [r7, #24]
 8010b08:	f640 133f 	movw	r3, #2367	; 0x93f
 8010b0c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	8a9b      	ldrh	r3, [r3, #20]
 8010b12:	4619      	mov	r1, r3
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	8afa      	ldrh	r2, [r7, #22]
 8010b18:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010b1c:	bf00      	nop
        }
    }
    return getNextChar();
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f00b f920 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010b24:	4603      	mov	r3, r0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3728      	adds	r7, #40	; 0x28
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	0802a1a8 	.word	0x0802a1a8
 8010b34:	0802a1b4 	.word	0x0802a1b4
 8010b38:	0802a260 	.word	0x0802a260
 8010b3c:	0802a2a8 	.word	0x0802a2a8
 8010b40:	0802a2b8 	.word	0x0802a2b8
 8010b44:	0802a38c 	.word	0x0802a38c
 8010b48:	0802a398 	.word	0x0802a398

08010b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f00b f8ce 	bl	801bcf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b088      	sub	sp, #32
 8010b66:	af02      	add	r7, sp, #8
 8010b68:	60f8      	str	r0, [r7, #12]
 8010b6a:	1d38      	adds	r0, r7, #4
 8010b6c:	e880 0006 	stmia.w	r0, {r1, r2}
 8010b70:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8010b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b76:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8010b78:	1d39      	adds	r1, r7, #4
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f008 fb52 	bl	8019230 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8010b8c:	bf00      	nop
 8010b8e:	3718      	adds	r7, #24
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010b94:	b590      	push	{r4, r7, lr}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010ba2:	88fb      	ldrh	r3, [r7, #6]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d127      	bne.n	8010bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010ba8:	88fb      	ldrh	r3, [r7, #6]
 8010baa:	4a1e      	ldr	r2, [pc, #120]	; (8010c24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d016      	beq.n	8010be2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010bb4:	88fb      	ldrh	r3, [r7, #6]
 8010bb6:	4a1b      	ldr	r2, [pc, #108]	; (8010c24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bbc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	4a18      	ldr	r2, [pc, #96]	; (8010c28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010bc8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	68ba      	ldr	r2, [r7, #8]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	4a16      	ldr	r2, [pc, #88]	; (8010c2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010bd4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	689b      	ldr	r3, [r3, #8]
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	4413      	add	r3, r2
 8010bde:	60fb      	str	r3, [r7, #12]
 8010be0:	e00a      	b.n	8010bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010be2:	4b11      	ldr	r3, [pc, #68]	; (8010c28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010be4:	4a12      	ldr	r2, [pc, #72]	; (8010c30 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010be6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010be8:	4a12      	ldr	r2, [pc, #72]	; (8010c34 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010bea:	4b10      	ldr	r3, [pc, #64]	; (8010c2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010bec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	4a11      	ldr	r2, [pc, #68]	; (8010c38 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bf6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00d      	beq.n	8010c1a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010bfe:	4a0f      	ldr	r2, [pc, #60]	; (8010c3c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010c00:	88fb      	ldrh	r3, [r7, #6]
 8010c02:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010c04:	f000 f83e 	bl	8010c84 <_ZN17TypedTextDatabase8getFontsEv>
 8010c08:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010c0a:	f000 f833 	bl	8010c74 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	461a      	mov	r2, r3
 8010c12:	4621      	mov	r1, r4
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff fea5 	bl	8010964 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010c1a:	bf00      	nop
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd90      	pop	{r4, r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20033440 	.word	0x20033440
 8010c28:	20033448 	.word	0x20033448
 8010c2c:	2003344c 	.word	0x2003344c
 8010c30:	08160f34 	.word	0x08160f34
 8010c34:	08160da0 	.word	0x08160da0
 8010c38:	081610a8 	.word	0x081610a8
 8010c3c:	20033444 	.word	0x20033444

08010c40 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010c4c:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	4b07      	ldr	r3, [pc, #28]	; (8010c70 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8010c52:	6819      	ldr	r1, [r3, #0]
 8010c54:	887b      	ldrh	r3, [r7, #2]
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	440b      	add	r3, r1
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	005b      	lsls	r3, r3, #1
 8010c5e:	4413      	add	r3, r2
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	20033448 	.word	0x20033448
 8010c70:	2003344c 	.word	0x2003344c

08010c74 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010c74:	b480      	push	{r7}
 8010c76:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010c78:	2365      	movs	r3, #101	; 0x65
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010c84:	b480      	push	{r7}
 8010c86:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010c88:	4b02      	ldr	r3, [pc, #8]	; (8010c94 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr
 8010c94:	20033450 	.word	0x20033450

08010c98 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d12c      	bne.n	8010d02 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d127      	bne.n	8010d02 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_swisop3_300_4bpp()),
 8010cb2:	f7fc fa77 	bl	800d1a4 <_Z24getFont_swisop3_300_4bppv>
 8010cb6:	4603      	mov	r3, r0
};
 8010cb8:	4a14      	ldr	r2, [pc, #80]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cba:	6013      	str	r3, [r2, #0]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 8010cbc:	f7fc fa1c 	bl	800d0f8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 8010cc0:	4603      	mov	r3, r0
};
 8010cc2:	4a12      	ldr	r2, [pc, #72]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cc4:	6053      	str	r3, [r2, #4]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8010cc6:	f7fc f9c1 	bl	800d04c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8010cca:	4603      	mov	r3, r0
};
 8010ccc:	4a0f      	ldr	r2, [pc, #60]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cce:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_50_4bpp()),
 8010cd0:	f7fc fac0 	bl	800d254 <_Z23getFont_swisop3_50_4bppv>
 8010cd4:	4603      	mov	r3, r0
};
 8010cd6:	4a0d      	ldr	r2, [pc, #52]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cd8:	60d3      	str	r3, [r2, #12]
    &(getFont_verdana_20_4bpp()),
 8010cda:	f7fc fbbd 	bl	800d458 <_Z23getFont_verdana_20_4bppv>
 8010cde:	4603      	mov	r3, r0
};
 8010ce0:	4a0a      	ldr	r2, [pc, #40]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010ce2:	6113      	str	r3, [r2, #16]
    &(getFont_verdana_12_4bpp()),
 8010ce4:	f7fc fb62 	bl	800d3ac <_Z23getFont_verdana_12_4bppv>
 8010ce8:	4603      	mov	r3, r0
};
 8010cea:	4a08      	ldr	r2, [pc, #32]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cec:	6153      	str	r3, [r2, #20]
    &(getFont_verdana_40_4bpp()),
 8010cee:	f7fc fc09 	bl	800d504 <_Z23getFont_verdana_40_4bppv>
 8010cf2:	4603      	mov	r3, r0
};
 8010cf4:	4a05      	ldr	r2, [pc, #20]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010cf6:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_10_4bpp())
 8010cf8:	f7fc fb02 	bl	800d300 <_Z23getFont_verdana_10_4bppv>
 8010cfc:	4603      	mov	r3, r0
};
 8010cfe:	4a03      	ldr	r2, [pc, #12]	; (8010d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8010d00:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 8010d02:	bf00      	nop
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	20033450 	.word	0x20033450

08010d10 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d18:	2001      	movs	r0, #1
 8010d1a:	f7ff ffbd 	bl	8010c98 <_Z41__static_initialization_and_destruction_0ii>
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	4a05      	ldr	r2, [pc, #20]	; (8010d40 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	601a      	str	r2, [r3, #0]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7fc fe33 	bl	800d99c <_ZN23FrontendApplicationBaseD1Ev>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	0802c5a4 	.word	0x0802c5a4

08010d44 <_ZN19FrontendApplicationD0Ev>:
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7ff ffe7 	bl	8010d20 <_ZN19FrontendApplicationD1Ev>
 8010d52:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f017 fd48 	bl	80287ec <_ZdlPvj>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b082      	sub	sp, #8
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 f997 	bl	80110a8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f008 fdcf 	bl	8019920 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	68b9      	ldr	r1, [r7, #8]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fc fe4c 	bl	800da3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010da4:	4a03      	ldr	r2, [pc, #12]	; (8010db4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	601a      	str	r2, [r3, #0]
{

}
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	4618      	mov	r0, r3
 8010dae:	3710      	adds	r7, #16
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	0802c5a4 	.word	0x0802c5a4

08010db8 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>

alertBar::alertBar()
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fd fe1c 	bl	800ea00 <_ZN12alertBarBaseC1Ev>
 8010dc8:	4a03      	ldr	r2, [pc, #12]	; (8010dd8 <_ZN8alertBarC1Ev+0x20>)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	601a      	str	r2, [r3, #0]
{

}
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	0802c5f0 	.word	0x0802c5f0

08010ddc <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fd ff24 	bl	800ec34 <_ZN12alertBarBase10initializeEv>
}
 8010dec:	bf00      	nop
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>

tempBox::tempBox()
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe f94c 	bl	800f09c <_ZN11tempBoxBaseC1Ev>
 8010e04:	4a03      	ldr	r2, [pc, #12]	; (8010e14 <_ZN7tempBoxC1Ev+0x20>)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	601a      	str	r2, [r3, #0]
{

}
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0802c684 	.word	0x0802c684

08010e18 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fe fa5c 	bl	800f2e0 <_ZN11tempBoxBase10initializeEv>
}
 8010e28:	bf00      	nop
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
    {
    }
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
    {
    }
 8010e4c:	bf00      	nop
 8010e4e:	370c      	adds	r7, #12
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
    {
 8010e60:	4a04      	ldr	r2, [pc, #16]	; (8010e74 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	601a      	str	r2, [r3, #0]
    }
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr
 8010e74:	0802c728 	.word	0x0802c728

08010e78 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
    }
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff ffe9 	bl	8010e58 <_ZN8touchgfx9PresenterD1Ev>
 8010e86:	2104      	movs	r1, #4
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f017 fcaf 	bl	80287ec <_ZdlPvj>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
    {
 8010ea0:	4a04      	ldr	r2, [pc, #16]	; (8010eb4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	601a      	str	r2, [r3, #0]
    }
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	0802c728 	.word	0x0802c728

08010eb8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	4a06      	ldr	r2, [pc, #24]	; (8010edc <_ZN13ModelListenerC1Ev+0x24>)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	601a      	str	r2, [r3, #0]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	605a      	str	r2, [r3, #4]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	370c      	adds	r7, #12
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	0802c718 	.word	0x0802c718

08010ee0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	4a04      	ldr	r2, [pc, #16]	; (8010efc <_ZN13ModelListenerD1Ev+0x1c>)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	0802c718 	.word	0x0802c718

08010f00 <_ZN13ModelListenerD0Ev>:
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff ffe9 	bl	8010ee0 <_ZN13ModelListenerD1Ev>
 8010f0e:	2108      	movs	r1, #8
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f017 fc6b 	bl	80287ec <_ZdlPvj>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	4a09      	ldr	r2, [pc, #36]	; (8010f50 <_ZN13MainPresenterD1Ev+0x30>)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	601a      	str	r2, [r3, #0]
 8010f2e:	4a09      	ldr	r2, [pc, #36]	; (8010f54 <_ZN13MainPresenterD1Ev+0x34>)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	605a      	str	r2, [r3, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3304      	adds	r3, #4
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff ffd1 	bl	8010ee0 <_ZN13ModelListenerD1Ev>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ff ff89 	bl	8010e58 <_ZN8touchgfx9PresenterD1Ev>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	0802c740 	.word	0x0802c740
 8010f54:	0802c758 	.word	0x0802c758

08010f58 <_ZThn4_N13MainPresenterD1Ev>:
 8010f58:	f1a0 0004 	sub.w	r0, r0, #4
 8010f5c:	e7e0      	b.n	8010f20 <_ZN13MainPresenterD1Ev>
 8010f5e:	bf00      	nop

08010f60 <_ZN13MainPresenterD0Ev>:
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff ffd9 	bl	8010f20 <_ZN13MainPresenterD1Ev>
 8010f6e:	2110      	movs	r1, #16
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f017 fc3b 	bl	80287ec <_ZdlPvj>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <_ZThn4_N13MainPresenterD0Ev>:
 8010f80:	f1a0 0004 	sub.w	r0, r0, #4
 8010f84:	e7ec      	b.n	8010f60 <_ZN13MainPresenterD0Ev>
	...

08010f88 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
    : view(v)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff ff7f 	bl	8010e98 <_ZN8touchgfx9PresenterC1Ev>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7ff ff8a 	bl	8010eb8 <_ZN13ModelListenerC1Ev>
 8010fa4:	4a06      	ldr	r2, [pc, #24]	; (8010fc0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	601a      	str	r2, [r3, #0]
 8010faa:	4a06      	ldr	r2, [pc, #24]	; (8010fc4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	605a      	str	r2, [r3, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	60da      	str	r2, [r3, #12]
{

}
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	0802c740 	.word	0x0802c740
 8010fc4:	0802c758 	.word	0x0802c758

08010fc8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]

}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]

}
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	4a05      	ldr	r2, [pc, #20]	; (8011010 <_ZN8MainViewD1Ev+0x20>)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4618      	mov	r0, r3
 8011002:	f7fe fb3b 	bl	800f67c <_ZN12MainViewBaseD1Ev>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	4618      	mov	r0, r3
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}
 8011010:	0802c768 	.word	0x0802c768

08011014 <_ZN8MainViewD0Ev>:
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f7ff ffe7 	bl	8010ff0 <_ZN8MainViewD1Ev>
 8011022:	f243 7164 	movw	r1, #14180	; 0x3764
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f017 fbe0 	bl	80287ec <_ZdlPvj>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4618      	mov	r0, r3
 8011030:	3708      	adds	r7, #8
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
	...

08011038 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4618      	mov	r0, r3
 8011044:	f7fe fba4 	bl	800f790 <_ZN12MainViewBaseC1Ev>
 8011048:	4a03      	ldr	r2, [pc, #12]	; (8011058 <_ZN8MainViewC1Ev+0x20>)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	601a      	str	r2, [r3, #0]
{

}
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	0802c768 	.word	0x0802c768

0801105c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fbf0 	bl	801084c <_ZN12MainViewBase11setupScreenEv>
}
 801106c:	bf00      	nop
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	4618      	mov	r0, r3
 8011080:	f7fe fa4c 	bl	800f51c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011084:	bf00      	nop
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	601a      	str	r2, [r3, #0]
{

}
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]

}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
    {
 80110c4:	4a04      	ldr	r2, [pc, #16]	; (80110d8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	601a      	str	r2, [r3, #0]
    }
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4618      	mov	r0, r3
 80110ce:	370c      	adds	r7, #12
 80110d0:	46bd      	mov	sp, r7
 80110d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d6:	4770      	bx	lr
 80110d8:	0802c7b8 	.word	0x0802c7b8

080110dc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
    }
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ffe9 	bl	80110bc <_ZN8touchgfx15TouchControllerD1Ev>
 80110ea:	2104      	movs	r1, #4
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f017 fb7d 	bl	80287ec <_ZdlPvj>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011110:	b480      	push	{r7}
 8011112:	b085      	sub	sp, #20
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
	...

0801112c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	4a05      	ldr	r2, [pc, #20]	; (801114c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	601a      	str	r2, [r3, #0]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff ffbd 	bl	80110bc <_ZN8touchgfx15TouchControllerD1Ev>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	0802c7a0 	.word	0x0802c7a0

08011150 <_ZN20STM32TouchControllerD0Ev>:
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7ff ffe7 	bl	801112c <_ZN20STM32TouchControllerD1Ev>
 801115e:	2104      	movs	r1, #4
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f017 fb43 	bl	80287ec <_ZdlPvj>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	4603      	mov	r3, r0
 8011178:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801117a:	79fb      	ldrb	r3, [r7, #7]
 801117c:	2b03      	cmp	r3, #3
 801117e:	d80c      	bhi.n	801119a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011180:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011186:	bf00      	nop
 8011188:	08011199 	.word	0x08011199
 801118c:	08011199 	.word	0x08011199
 8011190:	08011199 	.word	0x08011199
 8011194:	08011199 	.word	0x08011199
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011198:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801119a:	bf00      	nop
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop

080111a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	4603      	mov	r3, r0
 80111b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80111b2:	79fb      	ldrb	r3, [r7, #7]
 80111b4:	2b03      	cmp	r3, #3
 80111b6:	d80c      	bhi.n	80111d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80111b8:	a201      	add	r2, pc, #4	; (adr r2, 80111c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80111ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111be:	bf00      	nop
 80111c0:	080111d1 	.word	0x080111d1
 80111c4:	080111d1 	.word	0x080111d1
 80111c8:	080111d1 	.word	0x080111d1
 80111cc:	080111d1 	.word	0x080111d1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80111d0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80111d2:	bf00      	nop
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop

080111e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	4603      	mov	r3, r0
 80111e8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80111ea:	79fb      	ldrb	r3, [r7, #7]
 80111ec:	2b03      	cmp	r3, #3
 80111ee:	d80c      	bhi.n	801120a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80111f0:	a201      	add	r2, pc, #4	; (adr r2, 80111f8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80111f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f6:	bf00      	nop
 80111f8:	08011209 	.word	0x08011209
 80111fc:	08011209 	.word	0x08011209
 8011200:	08011209 	.word	0x08011209
 8011204:	08011209 	.word	0x08011209
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011208:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801120a:	bf00      	nop
 801120c:	370c      	adds	r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop

08011218 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    {
 8011220:	4a04      	ldr	r2, [pc, #16]	; (8011234 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	601a      	str	r2, [r3, #0]
    }
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	0802cc98 	.word	0x0802cc98

08011238 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
    }
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ffe9 	bl	8011218 <_ZN8touchgfx3HALD1Ev>
 8011246:	217c      	movs	r1, #124	; 0x7c
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f017 facf 	bl	80287ec <_ZdlPvj>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	460b      	mov	r3, r1
 8011262:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	78fa      	ldrb	r2, [r7, #3]
 8011268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8011274:	bf00      	nop
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	807b      	strh	r3, [r7, #2]
 801128c:	4613      	mov	r3, r2
 801128e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011290:	4b0c      	ldr	r3, [pc, #48]	; (80112c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011292:	881b      	ldrh	r3, [r3, #0]
 8011294:	887a      	ldrh	r2, [r7, #2]
 8011296:	429a      	cmp	r2, r3
 8011298:	d304      	bcc.n	80112a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801129a:	4b0b      	ldr	r3, [pc, #44]	; (80112c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	883a      	ldrh	r2, [r7, #0]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d205      	bcs.n	80112b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80112a4:	4b09      	ldr	r3, [pc, #36]	; (80112cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80112a6:	4a0a      	ldr	r2, [pc, #40]	; (80112d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80112a8:	219e      	movs	r1, #158	; 0x9e
 80112aa:	480a      	ldr	r0, [pc, #40]	; (80112d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80112ac:	f017 facc 	bl	8028848 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80112b0:	4a09      	ldr	r2, [pc, #36]	; (80112d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80112b2:	887b      	ldrh	r3, [r7, #2]
 80112b4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80112b6:	4a09      	ldr	r2, [pc, #36]	; (80112dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80112b8:	883b      	ldrh	r3, [r7, #0]
 80112ba:	8013      	strh	r3, [r2, #0]
    }
 80112bc:	bf00      	nop
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	2003bcfc 	.word	0x2003bcfc
 80112c8:	2003bcfe 	.word	0x2003bcfe
 80112cc:	0802a44c 	.word	0x0802a44c
 80112d0:	0802a4b0 	.word	0x0802a4b0
 80112d4:	0802a4f4 	.word	0x0802a4f4
 80112d8:	2003bd02 	.word	0x2003bd02
 80112dc:	2003bd04 	.word	0x2003bd04

080112e0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d009      	beq.n	8011306 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	685a      	ldr	r2, [r3, #4]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4610      	mov	r0, r2
 8011300:	4798      	blx	r3
 8011302:	4603      	mov	r3, r0
 8011304:	e000      	b.n	8011308 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8011306:	2300      	movs	r3, #0
    }
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f004 fd93 	bl	8015e44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	33ac      	adds	r3, #172	; 0xac
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	4798      	blx	r3
    }
 801132a:	bf00      	nop
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
        return false;
 801133c:	2300      	movs	r3, #0
    }
 801133e:	4618      	mov	r0, r3
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr
	...

0801134c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
 8011358:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d106      	bne.n	801136e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011360:	4b0f      	ldr	r3, [pc, #60]	; (80113a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011362:	4a10      	ldr	r2, [pc, #64]	; (80113a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011364:	f240 21d2 	movw	r1, #722	; 0x2d2
 8011368:	480f      	ldr	r0, [pc, #60]	; (80113a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801136a:	f017 fa6d 	bl	8028848 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	bf14      	ite	ne
 8011380:	2301      	movne	r3, #1
 8011382:	2300      	moveq	r3, #0
 8011384:	b2da      	uxtb	r2, r3
 8011386:	4b09      	ldr	r3, [pc, #36]	; (80113ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011388:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	338c      	adds	r3, #140	; 0x8c
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6839      	ldr	r1, [r7, #0]
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	4798      	blx	r3
    }
 8011398:	bf00      	nop
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	0802a538 	.word	0x0802a538
 80113a4:	0802a570 	.word	0x0802a570
 80113a8:	0802a4f4 	.word	0x0802a4f4
 80113ac:	2003bd06 	.word	0x2003bd06

080113b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	683a      	ldr	r2, [r7, #0]
 80113be:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	bf14      	ite	ne
 80113c6:	2301      	movne	r3, #1
 80113c8:	2300      	moveq	r3, #0
 80113ca:	b2da      	uxtb	r2, r3
 80113cc:	4b03      	ldr	r3, [pc, #12]	; (80113dc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80113ce:	701a      	strb	r2, [r3, #0]
    }
 80113d0:	bf00      	nop
 80113d2:	370c      	adds	r7, #12
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	2003bd07 	.word	0x2003bd07

080113e0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
        return 0;
 80113e8:	2300      	movs	r3, #0
    }
 80113ea:	4618      	mov	r0, r3
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b082      	sub	sp, #8
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	460b      	mov	r3, r1
 8011400:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011406:	2b00      	cmp	r3, #0
 8011408:	d004      	beq.n	8011414 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801140e:	887a      	ldrh	r2, [r7, #2]
 8011410:	4610      	mov	r0, r2
 8011412:	4798      	blx	r3
    }
 8011414:	bf00      	nop
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685a      	ldr	r2, [r3, #4]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3318      	adds	r3, #24
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4610      	mov	r0, r2
 8011434:	4798      	blx	r3
 8011436:	4603      	mov	r3, r0
    }
 8011438:	4618      	mov	r0, r3
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011454:	429a      	cmp	r2, r3
 8011456:	d011      	beq.n	801147c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011458:	4b14      	ldr	r3, [pc, #80]	; (80114ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d11e      	bne.n	801149e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011460:	4b13      	ldr	r3, [pc, #76]	; (80114b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011466:	4b13      	ldr	r3, [pc, #76]	; (80114b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011468:	881a      	ldrh	r2, [r3, #0]
 801146a:	4b11      	ldr	r3, [pc, #68]	; (80114b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801146c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801146e:	4a11      	ldr	r2, [pc, #68]	; (80114b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011470:	89bb      	ldrh	r3, [r7, #12]
 8011472:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011474:	4b0d      	ldr	r3, [pc, #52]	; (80114ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011476:	2201      	movs	r2, #1
 8011478:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801147a:	e010      	b.n	801149e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801147c:	4b0b      	ldr	r3, [pc, #44]	; (80114ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00c      	beq.n	801149e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011484:	4b0a      	ldr	r3, [pc, #40]	; (80114b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801148a:	4b0a      	ldr	r3, [pc, #40]	; (80114b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801148c:	881a      	ldrh	r2, [r3, #0]
 801148e:	4b08      	ldr	r3, [pc, #32]	; (80114b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011490:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011492:	4a08      	ldr	r2, [pc, #32]	; (80114b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011494:	89fb      	ldrh	r3, [r7, #14]
 8011496:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011498:	4b04      	ldr	r3, [pc, #16]	; (80114ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801149a:	2200      	movs	r2, #0
 801149c:	701a      	strb	r2, [r3, #0]
    }
 801149e:	bf00      	nop
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	2003bd00 	.word	0x2003bd00
 80114b0:	2003bcfe 	.word	0x2003bcfe
 80114b4:	2003bcfc 	.word	0x2003bcfc

080114b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f003 ff23 	bl	801530e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80114c8:	bf00      	nop
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	4a05      	ldr	r2, [pc, #20]	; (80114f0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fe99 	bl	8011218 <_ZN8touchgfx3HALD1Ev>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	0802caf0 	.word	0x0802caf0

080114f4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff ffe7 	bl	80114d0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011502:	217c      	movs	r1, #124	; 0x7c
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f017 f971 	bl	80287ec <_ZdlPvj>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	4618      	mov	r0, r3
 8011520:	f7ff ffca 	bl	80114b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011524:	bf00      	nop
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4618      	mov	r0, r3
 8011538:	f002 fbf8 	bl	8013d2c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4618      	mov	r0, r3
 8011550:	f002 fcae 	bl	8013eb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011554:	4603      	mov	r3, r0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3708      	adds	r7, #8
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b082      	sub	sp, #8
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
 8011566:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	4618      	mov	r0, r3
 801156e:	f002 fcad 	bl	8013ecc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011572:	bf00      	nop
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}

0801157a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801157a:	b580      	push	{r7, lr}
 801157c:	b082      	sub	sp, #8
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	4618      	mov	r0, r3
 801158a:	f002 fcb5 	bl	8013ef8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801158e:	bf00      	nop
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	60f8      	str	r0, [r7, #12]
 801159e:	60b9      	str	r1, [r7, #8]
 80115a0:	607a      	str	r2, [r7, #4]
 80115a2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	68b9      	ldr	r1, [r7, #8]
 80115ac:	f002 fcc2 	bl	8013f34 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80115b0:	4603      	mov	r3, r0
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b082      	sub	sp, #8
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f002 fbef 	bl	8013da8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80115ca:	bf00      	nop
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b082      	sub	sp, #8
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	f002 fbf3 	bl	8013dc8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80115e2:	bf00      	nop
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b082      	sub	sp, #8
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f002 fbf5 	bl	8013de4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80115fa:	bf00      	nop
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b082      	sub	sp, #8
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	f002 fbf7 	bl	8013e00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011612:	bf00      	nop
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801161a:	b580      	push	{r7, lr}
 801161c:	b082      	sub	sp, #8
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	4618      	mov	r0, r3
 8011626:	f002 fc19 	bl	8013e5c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801162a:	4603      	mov	r3, r0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4618      	mov	r0, r3
 8011640:	f002 fc1a 	bl	8013e78 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011644:	bf00      	nop
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	4a05      	ldr	r2, [pc, #20]	; (801166c <_ZN11TouchGFXHALD1Ev+0x20>)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	601a      	str	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff ff37 	bl	80114d0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4618      	mov	r0, r3
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	0802c7d0 	.word	0x0802c7d0

08011670 <_ZN11TouchGFXHALD0Ev>:
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f7ff ffe7 	bl	801164c <_ZN11TouchGFXHALD1Ev>
 801167e:	217c      	movs	r1, #124	; 0x7c
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f017 f8b3 	bl	80287ec <_ZdlPvj>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4618      	mov	r0, r3
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
    {
 8011698:	4a04      	ldr	r2, [pc, #16]	; (80116ac <_ZN12MJPEGDecoderD1Ev+0x1c>)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	601a      	str	r2, [r3, #0]
    }
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr
 80116ac:	0802c8ec 	.word	0x0802c8ec

080116b0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
    }
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff ffe9 	bl	8011690 <_ZN12MJPEGDecoderD1Ev>
 80116be:	2104      	movs	r1, #4
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f017 f893 	bl	80287ec <_ZdlPvj>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	4618      	mov	r0, r3
 80116de:	370c      	adds	r7, #12
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116f6:	4618      	mov	r0, r3
 80116f8:	370c      	adds	r7, #12
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
	...

08011704 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801170a:	4b21      	ldr	r3, [pc, #132]	; (8011790 <SCB_CleanInvalidateDCache+0x8c>)
 801170c:	2200      	movs	r2, #0
 801170e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011712:	f3bf 8f4f 	dsb	sy
}
 8011716:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011718:	4b1d      	ldr	r3, [pc, #116]	; (8011790 <SCB_CleanInvalidateDCache+0x8c>)
 801171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801171e:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	0b5b      	lsrs	r3, r3, #13
 8011724:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011728:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	08db      	lsrs	r3, r3, #3
 801172e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011732:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	015a      	lsls	r2, r3, #5
 8011738:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801173c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801173e:	68ba      	ldr	r2, [r7, #8]
 8011740:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011742:	4913      	ldr	r1, [pc, #76]	; (8011790 <SCB_CleanInvalidateDCache+0x8c>)
 8011744:	4313      	orrs	r3, r2
 8011746:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	1e5a      	subs	r2, r3, #1
 801174e:	60ba      	str	r2, [r7, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	bf14      	ite	ne
 8011754:	2301      	movne	r3, #1
 8011756:	2300      	moveq	r3, #0
 8011758:	b2db      	uxtb	r3, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d000      	beq.n	8011760 <SCB_CleanInvalidateDCache+0x5c>
      do {
 801175e:	e7e9      	b.n	8011734 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	1e5a      	subs	r2, r3, #1
 8011764:	60fa      	str	r2, [r7, #12]
 8011766:	2b00      	cmp	r3, #0
 8011768:	bf14      	ite	ne
 801176a:	2301      	movne	r3, #1
 801176c:	2300      	moveq	r3, #0
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d000      	beq.n	8011776 <SCB_CleanInvalidateDCache+0x72>
    do {
 8011774:	e7d9      	b.n	801172a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8011776:	f3bf 8f4f 	dsb	sy
}
 801177a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801177c:	f3bf 8f6f 	isb	sy
}
 8011780:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8011782:	bf00      	nop
 8011784:	3714      	adds	r7, #20
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	e000ed00 	.word	0xe000ed00

08011794 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	4a04      	ldr	r2, [pc, #16]	; (80117b0 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	0802c8ec 	.word	0x0802c8ec

080117b4 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	f7ff ffe8 	bl	8011794 <_ZN12MJPEGDecoderC1Ev>
 80117c4:	4a21      	ldr	r2, [pc, #132]	; (801184c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	601a      	str	r2, [r3, #0]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	615a      	str	r2, [r3, #20]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	619a      	str	r2, [r3, #24]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	61da      	str	r2, [r3, #28]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	621a      	str	r2, [r3, #32]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	625a      	str	r2, [r3, #36]	; 0x24
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	629a      	str	r2, [r3, #40]	; 0x28
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2200      	movs	r2, #0
 80117f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	631a      	str	r2, [r3, #48]	; 0x30
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	635a      	str	r2, [r3, #52]	; 0x34
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	639a      	str	r2, [r3, #56]	; 0x38
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2200      	movs	r2, #0
 801180a:	63da      	str	r2, [r3, #60]	; 0x3c
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2200      	movs	r2, #0
 801181e:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 801182c:	f003 f904 	bl	8014a38 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8011830:	2200      	movs	r2, #0
 8011832:	2100      	movs	r1, #0
 8011834:	2001      	movs	r0, #1
 8011836:	f7f7 fd3b 	bl	80092b0 <osSemaphoreNew>
 801183a:	4603      	mov	r3, r0
 801183c:	4a04      	ldr	r2, [pc, #16]	; (8011850 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 801183e:	6013      	str	r3, [r2, #0]
}
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	0802c8a8 	.word	0x0802c8a8
 8011850:	200334a0 	.word	0x200334a0

08011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
 8011860:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011866:	2b00      	cmp	r3, #0
 8011868:	d008      	beq.n	801187c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011872:	68b9      	ldr	r1, [r7, #8]
 8011874:	1acb      	subs	r3, r1, r3
 8011876:	4413      	add	r3, r2
 8011878:	617b      	str	r3, [r7, #20]
 801187a:	e004      	b.n	8011886 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	4413      	add	r3, r2
 8011884:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	6879      	ldr	r1, [r7, #4]
 801188a:	6978      	ldr	r0, [r7, #20]
 801188c:	f017 fc92 	bl	80291b4 <strncmp>
 8011890:	4603      	mov	r3, r0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 801189a:	b480      	push	{r7}
 801189c:	b085      	sub	sp, #20
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
 80118a2:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d024      	beq.n	80118f6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118b0:	683a      	ldr	r2, [r7, #0]
 80118b2:	1ad3      	subs	r3, r2, r3
 80118b4:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	4413      	add	r3, r2
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	4619      	mov	r1, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	3301      	adds	r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	021b      	lsls	r3, r3, #8
 80118d0:	ea41 0203 	orr.w	r2, r1, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	3302      	adds	r3, #2
 80118dc:	440b      	add	r3, r1
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	041b      	lsls	r3, r3, #16
 80118e2:	431a      	orrs	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	3303      	adds	r3, #3
 80118ec:	440b      	add	r3, r1
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	061b      	lsls	r3, r3, #24
 80118f2:	4313      	orrs	r3, r2
 80118f4:	e016      	b.n	8011924 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	4413      	add	r3, r2
 80118fe:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	3301      	adds	r3, #1
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	021b      	lsls	r3, r3, #8
 801190e:	431a      	orrs	r2, r3
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	3302      	adds	r3, #2
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	041b      	lsls	r3, r3, #16
 8011918:	431a      	orrs	r2, r3
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3303      	adds	r3, #3
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	061b      	lsls	r3, r3, #24
 8011922:	4313      	orrs	r3, r2
    }
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8011930:	b480      	push	{r7}
 8011932:	b085      	sub	sp, #20
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801193e:	2b00      	cmp	r3, #0
 8011940:	d013      	beq.n	801196a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011946:	683a      	ldr	r2, [r7, #0]
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	4413      	add	r3, r2
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	4619      	mov	r1, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	3301      	adds	r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	021b      	lsls	r3, r3, #8
 8011966:	430b      	orrs	r3, r1
 8011968:	e00c      	b.n	8011984 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	4413      	add	r3, r2
 8011972:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	461a      	mov	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	3301      	adds	r3, #1
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	021b      	lsls	r3, r3, #8
 8011982:	4313      	orrs	r3, r2
    }
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d033      	beq.n	8011a0c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d909      	bls.n	80119c2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2209      	movs	r2, #9
 80119b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 80119b6:	4b19      	ldr	r3, [pc, #100]	; (8011a1c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 80119b8:	4a19      	ldr	r2, [pc, #100]	; (8011a20 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 80119ba:	21ad      	movs	r1, #173	; 0xad
 80119bc:	4819      	ldr	r0, [pc, #100]	; (8011a24 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 80119be:	f016 ff43 	bl	8028848 <__assert_func>
        }

        reader->seek(offset);
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	330c      	adds	r3, #12
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	68b9      	ldr	r1, [r7, #8]
 80119d2:	4610      	mov	r0, r2
 80119d4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3310      	adds	r3, #16
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	4798      	blx	r3
 80119ec:	4603      	mov	r3, r0
 80119ee:	f083 0301 	eor.w	r3, r3, #1
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d003      	beq.n	8011a00 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	220d      	movs	r2, #13
 80119fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a0a:	e003      	b.n	8011a14 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	4413      	add	r3, r2
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	0802a5c0 	.word	0x0802a5c0
 8011a20:	0802a5d4 	.word	0x0802a5d4
 8011a24:	0802a618 	.word	0x0802a618

08011a28 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b08e      	sub	sp, #56	; 0x38
 8011a2c:	af04      	add	r7, sp, #16
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	4611      	mov	r1, r2
 8011a34:	461a      	mov	r2, r3
 8011a36:	460b      	mov	r3, r1
 8011a38:	80fb      	strh	r3, [r7, #6]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	695b      	ldr	r3, [r3, #20]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d105      	bne.n	8011a52 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8011a46:	4b4e      	ldr	r3, [pc, #312]	; (8011b80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8011a48:	4a4e      	ldr	r2, [pc, #312]	; (8011b84 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8011a4a:	21bf      	movs	r1, #191	; 0xbf
 8011a4c:	484e      	ldr	r0, [pc, #312]	; (8011b88 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8011a4e:	f016 fefb 	bl	8028848 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	699b      	ldr	r3, [r3, #24]
 8011a56:	2208      	movs	r2, #8
 8011a58:	4619      	mov	r1, r3
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f7ff ff98 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	699b      	ldr	r3, [r3, #24]
 8011a64:	4619      	mov	r1, r3
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	f7ff ff62 	bl	8011930 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011a6c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	699b      	ldr	r3, [r3, #24]
 8011a72:	3302      	adds	r3, #2
 8011a74:	4619      	mov	r1, r3
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7ff ff5a 	bl	8011930 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011a7c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	699b      	ldr	r3, [r3, #24]
 8011a82:	3304      	adds	r3, #4
 8011a84:	4619      	mov	r1, r3
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f7ff ff07 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011a8c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8011a8e:	f243 0330 	movw	r3, #12336	; 0x3030
 8011a92:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8011a94:	f246 3364 	movw	r3, #25444	; 0x6364
 8011a98:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	699a      	ldr	r2, [r3, #24]
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f103 0208 	add.w	r2, r3, #8
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d255      	bcs.n	8011b5a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	f243 0230 	movw	r2, #12336	; 0x3030
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d126      	bne.n	8011b06 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	f246 3264 	movw	r2, #25444	; 0x6364
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d121      	bne.n	8011b06 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d01e      	beq.n	8011b06 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	f103 0208 	add.w	r2, r3, #8
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	69ba      	ldr	r2, [r7, #24]
 8011ada:	4619      	mov	r1, r3
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f7ff ff57 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8011ae2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae6:	9302      	str	r3, [sp, #8]
 8011ae8:	88bb      	ldrh	r3, [r7, #4]
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	88fb      	ldrh	r3, [r7, #6]
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	69ba      	ldr	r2, [r7, #24]
 8011af4:	6939      	ldr	r1, [r7, #16]
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f000 fa8e 	bl	8012018 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	695b      	ldr	r3, [r3, #20]
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 8011b06:	2300      	movs	r3, #0
 8011b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	699a      	ldr	r2, [r3, #24]
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	441a      	add	r2, r3
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d105      	bne.n	8011b2a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	f103 0208 	add.w	r2, r3, #8
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	f023 0201 	bic.w	r2, r3, #1
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	699a      	ldr	r2, [r3, #24]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d114      	bne.n	8011b6e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2201      	movs	r2, #1
 8011b48:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6a1a      	ldr	r2, [r3, #32]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8011b52:	2301      	movs	r3, #1
 8011b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b58:	e009      	b.n	8011b6e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6a1a      	ldr	r2, [r3, #32]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8011b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b72:	f083 0301 	eor.w	r3, r3, #1
 8011b76:	b2db      	uxtb	r3, r3
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3728      	adds	r7, #40	; 0x28
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	0802a650 	.word	0x0802a650
 8011b84:	0802a69c 	.word	0x0802a69c
 8011b88:	0802a618 	.word	0x0802a618

08011b8c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	695b      	ldr	r3, [r3, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d105      	bne.n	8011ba8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 8011b9c:	4b37      	ldr	r3, [pc, #220]	; (8011c7c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 8011b9e:	4a38      	ldr	r2, [pc, #224]	; (8011c80 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8011ba0:	21f3      	movs	r1, #243	; 0xf3
 8011ba2:	4838      	ldr	r0, [pc, #224]	; (8011c84 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8011ba4:	f016 fe50 	bl	8028848 <__assert_func>

    readData(currentMovieOffset, 8);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	699b      	ldr	r3, [r3, #24]
 8011bac:	2208      	movs	r2, #8
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff feed 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	699b      	ldr	r3, [r3, #24]
 8011bba:	3304      	adds	r3, #4
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7ff fe6b 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011bc4:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f103 0208 	add.w	r2, r3, #8
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d243      	bcs.n	8011c62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	699a      	ldr	r2, [r3, #24]
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	4413      	add	r3, r2
 8011be2:	f103 0208 	add.w	r2, r3, #8
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	699b      	ldr	r3, [r3, #24]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	f023 0201 	bic.w	r2, r3, #1
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	695b      	ldr	r3, [r3, #20]
 8011bfc:	1c5a      	adds	r2, r3, #1
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	2208      	movs	r2, #8
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7ff fec0 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	4619      	mov	r1, r3
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f7ff fe8a 	bl	8011930 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011c1c:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	3302      	adds	r3, #2
 8011c24:	4619      	mov	r1, r3
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7ff fe82 	bl	8011930 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011c2c:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	3304      	adds	r3, #4
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff fe2f 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011c3c:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8011c3e:	f243 0330 	movw	r3, #12336	; 0x3030
 8011c42:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8011c44:	f246 3364 	movw	r3, #25444	; 0x6364
 8011c48:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	f243 0230 	movw	r2, #12336	; 0x3030
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d1b8      	bne.n	8011bc6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f246 3264 	movw	r2, #25444	; 0x6364
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d1b3      	bne.n	8011bc6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e007      	b.n	8011c72 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2201      	movs	r2, #1
 8011c66:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6a1a      	ldr	r2, [r3, #32]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	619a      	str	r2, [r3, #24]
    return false;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3718      	adds	r7, #24
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	0802a650 	.word	0x0802a650
 8011c80:	0802a6f8 	.word	0x0802a6f8
 8011c84:	0802a618 	.word	0x0802a618

08011c88 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f000 f834 	bl	8011d14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8011cac:	bf00      	nop
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	683a      	ldr	r2, [r7, #0]
 8011cc2:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	3308      	adds	r3, #8
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	6838      	ldr	r0, [r7, #0]
 8011cd4:	4798      	blx	r3
 8011cd6:	4602      	mov	r2, r0
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 f819 	bl	8011d14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8011ce2:	bf00      	nop
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 8011cea:	b480      	push	{r7}
 8011cec:	b083      	sub	sp, #12
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d103      	bne.n	8011d02 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e000      	b.n	8011d08 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 8011d06:	2300      	movs	r3, #0
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b08a      	sub	sp, #40	; 0x28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 8011d2a:	2248      	movs	r2, #72	; 0x48
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7ff fe2e 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6999      	ldr	r1, [r3, #24]
 8011d38:	2304      	movs	r3, #4
 8011d3a:	4aa5      	ldr	r2, [pc, #660]	; (8011fd0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff fd89 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	bf14      	ite	ne
 8011d48:	2301      	movne	r3, #1
 8011d4a:	2300      	moveq	r3, #0
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00a      	beq.n	8011d68 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2203      	movs	r2, #3
 8011d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 8011d5a:	4b9e      	ldr	r3, [pc, #632]	; (8011fd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8011d5c:	4a9e      	ldr	r2, [pc, #632]	; (8011fd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8011d5e:	f240 113b 	movw	r1, #315	; 0x13b
 8011d62:	489e      	ldr	r0, [pc, #632]	; (8011fdc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8011d64:	f016 fd70 	bl	8028848 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	699b      	ldr	r3, [r3, #24]
 8011d6c:	f103 0208 	add.w	r2, r3, #8
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6999      	ldr	r1, [r3, #24]
 8011d78:	2304      	movs	r3, #4
 8011d7a:	4a99      	ldr	r2, [pc, #612]	; (8011fe0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f7ff fd69 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	bf14      	ite	ne
 8011d88:	2301      	movne	r3, #1
 8011d8a:	2300      	moveq	r3, #0
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00a      	beq.n	8011da8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2204      	movs	r2, #4
 8011d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 8011d9a:	4b92      	ldr	r3, [pc, #584]	; (8011fe4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 8011d9c:	4a8e      	ldr	r2, [pc, #568]	; (8011fd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8011d9e:	f240 1143 	movw	r1, #323	; 0x143
 8011da2:	488e      	ldr	r0, [pc, #568]	; (8011fdc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8011da4:	f016 fd50 	bl	8028848 <__assert_func>
    }

    currentMovieOffset += 4;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	699b      	ldr	r3, [r3, #24]
 8011dac:	1d1a      	adds	r2, r3, #4
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6999      	ldr	r1, [r3, #24]
 8011db6:	2304      	movs	r3, #4
 8011db8:	4a8b      	ldr	r2, [pc, #556]	; (8011fe8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7ff fd4a 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2301      	movne	r3, #1
 8011dc8:	2300      	moveq	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2205      	movs	r2, #5
 8011dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8011dd8:	4b84      	ldr	r3, [pc, #528]	; (8011fec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8011dda:	4a7f      	ldr	r2, [pc, #508]	; (8011fd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8011ddc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011de0:	487e      	ldr	r0, [pc, #504]	; (8011fdc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8011de2:	f016 fd31 	bl	8028848 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	699b      	ldr	r3, [r3, #24]
 8011dea:	3304      	adds	r3, #4
 8011dec:	4619      	mov	r1, r3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7ff fd53 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011df4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	699b      	ldr	r3, [r3, #24]
 8011dfa:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d106      	bne.n	8011e10 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8011e02:	4b7b      	ldr	r3, [pc, #492]	; (8011ff0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8011e04:	4a74      	ldr	r2, [pc, #464]	; (8011fd8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8011e06:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8011e0a:	4874      	ldr	r0, [pc, #464]	; (8011fdc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8011e0c:	f016 fd1c 	bl	8028848 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8011e10:	2301      	movs	r3, #1
 8011e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	699b      	ldr	r3, [r3, #24]
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8011e1e:	2304      	movs	r3, #4
 8011e20:	4a74      	ldr	r2, [pc, #464]	; (8011ff4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8011e22:	6979      	ldr	r1, [r7, #20]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f7ff fd15 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	bf14      	ite	ne
 8011e30:	2301      	movne	r3, #1
 8011e32:	2300      	moveq	r3, #0
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d006      	beq.n	8011e48 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2206      	movs	r2, #6
 8011e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8011e42:	2300      	movs	r3, #0
 8011e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 8011e4e:	2304      	movs	r3, #4
 8011e50:	4a69      	ldr	r2, [pc, #420]	; (8011ff8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8011e52:	6979      	ldr	r1, [r7, #20]
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f7ff fcfd 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	bf14      	ite	ne
 8011e60:	2301      	movne	r3, #1
 8011e62:	2300      	moveq	r3, #0
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d006      	beq.n	8011e78 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2207      	movs	r2, #7
 8011e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8011e72:	2300      	movs	r3, #0
 8011e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8011e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d028      	beq.n	8011ed2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	3308      	adds	r3, #8
 8011e84:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8011e86:	6979      	ldr	r1, [r7, #20]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff fd06 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	4a5a      	ldr	r2, [pc, #360]	; (8011ffc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8011e92:	fba2 2303 	umull	r2, r3, r2, r3
 8011e96:	099a      	lsrs	r2, r3, #6
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	3310      	adds	r3, #16
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7ff fcf9 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	3320      	adds	r3, #32
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff fcf0 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	3324      	adds	r3, #36	; 0x24
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fce7 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8011ed2:	69ba      	ldr	r2, [r7, #24]
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	3308      	adds	r3, #8
 8011eda:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 8011edc:	220c      	movs	r2, #12
 8011ede:	6a39      	ldr	r1, [r7, #32]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ff fd55 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	f103 0108 	add.w	r1, r3, #8
 8011eec:	2304      	movs	r3, #4
 8011eee:	4a44      	ldr	r2, [pc, #272]	; (8012000 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7ff fcaf 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d00b      	beq.n	8011f14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0a:	6a3a      	ldr	r2, [r7, #32]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d201      	bcs.n	8011f14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8011f10:	2301      	movs	r3, #1
 8011f12:	e000      	b.n	8011f16 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8011f14:	2300      	movs	r3, #0
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d012      	beq.n	8011f40 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	4619      	mov	r1, r3
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff fcba 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011f26:	4603      	mov	r3, r0
 8011f28:	3308      	adds	r3, #8
 8011f2a:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 8011f2c:	6a3a      	ldr	r2, [r7, #32]
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	4413      	add	r3, r2
 8011f32:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8011f34:	220c      	movs	r2, #12
 8011f36:	6a39      	ldr	r1, [r7, #32]
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff fd29 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8011f3e:	e7d2      	b.n	8011ee6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d004      	beq.n	8011f54 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	220a      	movs	r2, #10
 8011f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8011f52:	e05e      	b.n	8012012 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8011f54:	6a3b      	ldr	r3, [r7, #32]
 8011f56:	f103 020c 	add.w	r2, r3, #12
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8011f5e:	6a3b      	ldr	r3, [r7, #32]
 8011f60:	3304      	adds	r3, #4
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff fc98 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	6a3b      	ldr	r3, [r7, #32]
 8011f6e:	4413      	add	r3, r2
 8011f70:	f103 0208 	add.w	r2, r3, #8
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8011f78:	6a3b      	ldr	r3, [r7, #32]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7ff fc8b 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011f84:	4603      	mov	r3, r0
 8011f86:	3308      	adds	r3, #8
 8011f88:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 8011f8a:	6a3a      	ldr	r2, [r7, #32]
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	4413      	add	r3, r2
 8011f90:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8011f92:	2204      	movs	r2, #4
 8011f94:	6a39      	ldr	r1, [r7, #32]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7ff fcfa 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8011f9c:	2304      	movs	r3, #4
 8011f9e:	4a19      	ldr	r2, [pc, #100]	; (8012004 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8011fa0:	6a39      	ldr	r1, [r7, #32]
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff fc56 	bl	8011854 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	bf0c      	ite	eq
 8011fae:	2301      	moveq	r3, #1
 8011fb0:	2300      	movne	r3, #0
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d027      	beq.n	8012008 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6a3a      	ldr	r2, [r7, #32]
 8011fbc:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	699a      	ldr	r2, [r3, #24]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	621a      	str	r2, [r3, #32]
 8011fcc:	e021      	b.n	8012012 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 8011fce:	bf00      	nop
 8011fd0:	0802a72c 	.word	0x0802a72c
 8011fd4:	0802a734 	.word	0x0802a734
 8011fd8:	0802a750 	.word	0x0802a750
 8011fdc:	0802a618 	.word	0x0802a618
 8011fe0:	0802a780 	.word	0x0802a780
 8011fe4:	0802a788 	.word	0x0802a788
 8011fe8:	0802a7a0 	.word	0x0802a7a0
 8011fec:	0802a7a8 	.word	0x0802a7a8
 8011ff0:	0802a7c0 	.word	0x0802a7c0
 8011ff4:	0802a7cc 	.word	0x0802a7cc
 8011ff8:	0802a7d4 	.word	0x0802a7d4
 8011ffc:	10624dd3 	.word	0x10624dd3
 8012000:	0802a7dc 	.word	0x0802a7dc
 8012004:	0802a7e4 	.word	0x0802a7e4
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	220b      	movs	r2, #11
 801200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8012010:	bf00      	nop
}
 8012012:	3728      	adds	r7, #40	; 0x28
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
 8012024:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d04c      	beq.n	80120c6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xae>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d04a      	beq.n	80120c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 4;
 8012032:	4b27      	ldr	r3, [pc, #156]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012034:	2204      	movs	r2, #4
 8012036:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	4a24      	ldr	r2, [pc, #144]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801203e:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8012040:	4b23      	ldr	r3, [pc, #140]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f003 030f 	and.w	r3, r3, #15
 8012048:	2b00      	cmp	r3, #0
 801204a:	d006      	beq.n	801205a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 801204c:	4b20      	ldr	r3, [pc, #128]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f023 030f 	bic.w	r3, r3, #15
 8012054:	3310      	adds	r3, #16
 8012056:	4a1e      	ldr	r2, [pc, #120]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012058:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 0 * JPEG_ConvertorParams.bytes_pr_pixel;
 801205a:	4b1d      	ldr	r3, [pc, #116]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801205c:	2200      	movs	r2, #0
 801205e:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8012060:	4b1b      	ldr	r3, [pc, #108]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	091b      	lsrs	r3, r3, #4
 8012066:	4a1a      	ldr	r2, [pc, #104]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012068:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	f003 030f 	and.w	r3, r3, #15
 8012072:	f1c3 0310 	rsb	r3, r3, #16
 8012076:	4a16      	ldr	r2, [pc, #88]	; (80120d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012078:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	68b9      	ldr	r1, [r7, #8]
 8012080:	4814      	ldr	r0, [pc, #80]	; (80120d4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012082:	f000 f8ed 	bl	8012260 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8012086:	4813      	ldr	r0, [pc, #76]	; (80120d4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012088:	f000 fa08 	bl	801249c <JPEG_OutputHandler>
 801208c:	4603      	mov	r3, r0
 801208e:	4a12      	ldr	r2, [pc, #72]	; (80120d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012090:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8012092:	4b11      	ldr	r3, [pc, #68]	; (80120d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b02      	cmp	r3, #2
 8012098:	bf0c      	ite	eq
 801209a:	2301      	moveq	r3, #1
 801209c:	2300      	movne	r3, #0
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x9a>
        {
          SEM_WAIT(semDecodingDone);
 80120a4:	4b0d      	ldr	r3, [pc, #52]	; (80120dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f04f 31ff 	mov.w	r1, #4294967295
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7f7 f99b 	bl	80093e8 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 80120b2:	4b09      	ldr	r3, [pc, #36]	; (80120d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	bf14      	ite	ne
 80120ba:	2301      	movne	r3, #1
 80120bc:	2300      	moveq	r3, #0
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d001      	beq.n	80120c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
      do
 80120c4:	e7df      	b.n	8012086 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6e>
        return;
 80120c6:	bf00      	nop
    }
}
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	200334a4 	.word	0x200334a4
 80120d4:	200002a0 	.word	0x200002a0
 80120d8:	20033490 	.word	0x20033490
 80120dc:	200334a0 	.word	0x200334a0

080120e0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b086      	sub	sp, #24
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	699b      	ldr	r3, [r3, #24]
 80120f2:	2208      	movs	r2, #8
 80120f4:	4619      	mov	r1, r3
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ff fc4a 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	699b      	ldr	r3, [r3, #24]
 8012100:	3304      	adds	r3, #4
 8012102:	4619      	mov	r1, r3
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f7ff fbc8 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801210a:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	699b      	ldr	r3, [r3, #24]
 8012110:	3308      	adds	r3, #8
 8012112:	697a      	ldr	r2, [r7, #20]
 8012114:	4619      	mov	r1, r3
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f7ff fc3a 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 801211c:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d015      	beq.n	8012150 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	697a      	ldr	r2, [r7, #20]
 8012128:	6939      	ldr	r1, [r7, #16]
 801212a:	480c      	ldr	r0, [pc, #48]	; (801215c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 801212c:	f000 f898 	bl	8012260 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8012130:	480a      	ldr	r0, [pc, #40]	; (801215c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8012132:	f000 f9b3 	bl	801249c <JPEG_OutputHandler>
 8012136:	4603      	mov	r3, r0
 8012138:	4a09      	ldr	r2, [pc, #36]	; (8012160 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 801213a:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 801213c:	4b08      	ldr	r3, [pc, #32]	; (8012160 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	bf0c      	ite	eq
 8012144:	2301      	moveq	r3, #1
 8012146:	2300      	movne	r3, #0
 8012148:	b2db      	uxtb	r3, r3
 801214a:	2b00      	cmp	r3, #0
 801214c:	d000      	beq.n	8012150 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 801214e:	e7ef      	b.n	8012130 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8012150:	2301      	movs	r3, #1
}
 8012152:	4618      	mov	r0, r3
 8012154:	3718      	adds	r7, #24
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	200002a0 	.word	0x200002a0
 8012160:	20033490 	.word	0x20033490

08012164 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	60f8      	str	r0, [r7, #12]
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
 8012170:	807b      	strh	r3, [r7, #2]
    assert(0);
 8012172:	4b03      	ldr	r3, [pc, #12]	; (8012180 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8012174:	4a03      	ldr	r2, [pc, #12]	; (8012184 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8012176:	f240 11d1 	movw	r1, #465	; 0x1d1
 801217a:	4803      	ldr	r0, [pc, #12]	; (8012188 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 801217c:	f016 fb64 	bl	8028848 <__assert_func>
 8012180:	0802a7ec 	.word	0x0802a7ec
 8012184:	0802a7f0 	.word	0x0802a7f0
 8012188:	0802a618 	.word	0x0802a618

0801218c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d101      	bne.n	80121a0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 801219c:	2301      	movs	r3, #1
 801219e:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	332c      	adds	r3, #44	; 0x2c
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4798      	blx	r3
 80121ac:	4602      	mov	r2, r0
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	4293      	cmp	r3, r2
 80121b2:	bf8c      	ite	hi
 80121b4:	2301      	movhi	r3, #1
 80121b6:	2300      	movls	r3, #0
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d006      	beq.n	80121cc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	332c      	adds	r3, #44	; 0x2c
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	4798      	blx	r3
 80121ca:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	69da      	ldr	r2, [r3, #28]
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	3b01      	subs	r3, #1
 80121d4:	011b      	lsls	r3, r3, #4
 80121d6:	4413      	add	r3, r2
 80121d8:	3308      	adds	r3, #8
 80121da:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 80121dc:	2210      	movs	r2, #16
 80121de:	68f9      	ldr	r1, [r7, #12]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7ff fbd5 	bl	8011990 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	3308      	adds	r3, #8
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff fb54 	bl	801189a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80121f2:	4602      	mov	r2, r0
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6a1b      	ldr	r3, [r3, #32]
 80121f8:	4413      	add	r3, r2
 80121fa:	1f1a      	subs	r2, r3, #4
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	683a      	ldr	r2, [r7, #0]
 8012204:	615a      	str	r2, [r3, #20]
}
 8012206:	bf00      	nop
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 801220e:	b480      	push	{r7}
 8012210:	b083      	sub	sp, #12
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	689b      	ldr	r3, [r3, #8]
}
 801221a:	4618      	mov	r0, r3
 801221c:	370c      	adds	r7, #12
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr

08012226 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8012226:	b480      	push	{r7}
 8012228:	b083      	sub	sp, #12
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
 801222e:	460b      	mov	r3, r1
 8012230:	70fb      	strb	r3, [r7, #3]

}
 8012232:	bf00      	nop
 8012234:	370c      	adds	r7, #12
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr

0801223e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 801223e:	b490      	push	{r4, r7}
 8012240:	b082      	sub	sp, #8
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
 8012246:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4614      	mov	r4, r2
 801224e:	3304      	adds	r3, #4
 8012250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012256:	bf00      	nop
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bc90      	pop	{r4, r7}
 801225e:	4770      	bx	lr

08012260 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b088      	sub	sp, #32
 8012264:	af02      	add	r7, sp, #8
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
 801226c:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 801226e:	4a28      	ldr	r2, [pc, #160]	; (8012310 <JPEG_Decode_DMA+0xb0>)
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8012274:	4b27      	ldr	r3, [pc, #156]	; (8012314 <JPEG_Decode_DMA+0xb4>)
 8012276:	2200      	movs	r2, #0
 8012278:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 801227a:	4b27      	ldr	r3, [pc, #156]	; (8012318 <JPEG_Decode_DMA+0xb8>)
 801227c:	2200      	movs	r2, #0
 801227e:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8012280:	4b26      	ldr	r3, [pc, #152]	; (801231c <JPEG_Decode_DMA+0xbc>)
 8012282:	2200      	movs	r2, #0
 8012284:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8012286:	4b26      	ldr	r3, [pc, #152]	; (8012320 <JPEG_Decode_DMA+0xc0>)
 8012288:	2200      	movs	r2, #0
 801228a:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	4a25      	ldr	r2, [pc, #148]	; (8012324 <JPEG_Decode_DMA+0xc4>)
 8012290:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8012292:	4a25      	ldr	r2, [pc, #148]	; (8012328 <JPEG_Decode_DMA+0xc8>)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8012298:	4b24      	ldr	r3, [pc, #144]	; (801232c <JPEG_Decode_DMA+0xcc>)
 801229a:	2200      	movs	r2, #0
 801229c:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 801229e:	2300      	movs	r3, #0
 80122a0:	617b      	str	r3, [r7, #20]
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d816      	bhi.n	80122d6 <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80122a8:	4921      	ldr	r1, [pc, #132]	; (8012330 <JPEG_Decode_DMA+0xd0>)
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	4613      	mov	r3, r2
 80122ae:	005b      	lsls	r3, r3, #1
 80122b0:	4413      	add	r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	440b      	add	r3, r1
 80122b6:	2200      	movs	r2, #0
 80122b8:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80122ba:	491d      	ldr	r1, [pc, #116]	; (8012330 <JPEG_Decode_DMA+0xd0>)
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	4613      	mov	r3, r2
 80122c0:	005b      	lsls	r3, r3, #1
 80122c2:	4413      	add	r3, r2
 80122c4:	009b      	lsls	r3, r3, #2
 80122c6:	440b      	add	r3, r1
 80122c8:	3308      	adds	r3, #8
 80122ca:	2200      	movs	r2, #0
 80122cc:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	3301      	adds	r3, #1
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	e7e5      	b.n	80122a2 <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80122d6:	4b11      	ldr	r3, [pc, #68]	; (801231c <JPEG_Decode_DMA+0xbc>)
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	4915      	ldr	r1, [pc, #84]	; (8012330 <JPEG_Decode_DMA+0xd0>)
 80122dc:	4613      	mov	r3, r2
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	440b      	add	r3, r1
 80122e6:	3304      	adds	r3, #4
 80122e8:	6819      	ldr	r1, [r3, #0]
 80122ea:	4b12      	ldr	r3, [pc, #72]	; (8012334 <JPEG_Decode_DMA+0xd4>)
 80122ec:	68da      	ldr	r2, [r3, #12]
 80122ee:	4613      	mov	r3, r2
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	4413      	add	r3, r2
 80122f4:	01db      	lsls	r3, r3, #7
 80122f6:	9300      	str	r3, [sp, #0]
 80122f8:	460b      	mov	r3, r1
 80122fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80122fe:	68b9      	ldr	r1, [r7, #8]
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f7f1 fdd9 	bl	8003eb8 <HAL_JPEG_Decode_DMA>

    return 0;
 8012306:	2300      	movs	r3, #0
}
 8012308:	4618      	mov	r0, r3
 801230a:	3718      	adds	r7, #24
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20033470 	.word	0x20033470
 8012314:	2003348c 	.word	0x2003348c
 8012318:	20033484 	.word	0x20033484
 801231c:	20033488 	.word	0x20033488
 8012320:	20033474 	.word	0x20033474
 8012324:	2003347c 	.word	0x2003347c
 8012328:	20033478 	.word	0x20033478
 801232c:	2003349c 	.word	0x2003349c
 8012330:	20000014 	.word	0x20000014
 8012334:	200334a4 	.word	0x200334a4

08012338 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8012342:	4b14      	ldr	r3, [pc, #80]	; (8012394 <HAL_JPEG_GetDataCallback+0x5c>)
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	4413      	add	r3, r2
 801234a:	4a12      	ldr	r2, [pc, #72]	; (8012394 <HAL_JPEG_GetDataCallback+0x5c>)
 801234c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 801234e:	4b11      	ldr	r3, [pc, #68]	; (8012394 <HAL_JPEG_GetDataCallback+0x5c>)
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	4b11      	ldr	r3, [pc, #68]	; (8012398 <HAL_JPEG_GetDataCallback+0x60>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	429a      	cmp	r2, r3
 8012358:	d218      	bcs.n	801238c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 801235a:	4b10      	ldr	r3, [pc, #64]	; (801239c <HAL_JPEG_GetDataCallback+0x64>)
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	4413      	add	r3, r2
 8012362:	4a0e      	ldr	r2, [pc, #56]	; (801239c <HAL_JPEG_GetDataCallback+0x64>)
 8012364:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8012366:	4b0c      	ldr	r3, [pc, #48]	; (8012398 <HAL_JPEG_GetDataCallback+0x60>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	4b0a      	ldr	r3, [pc, #40]	; (8012394 <HAL_JPEG_GetDataCallback+0x5c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	1ad3      	subs	r3, r2, r3
 8012370:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8012372:	4b0a      	ldr	r3, [pc, #40]	; (801239c <HAL_JPEG_GetDataCallback+0x64>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4619      	mov	r1, r3
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801237e:	bf28      	it	cs
 8012380:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8012384:	461a      	mov	r2, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7f1 ff21 	bl	80041ce <HAL_JPEG_ConfigInputBuffer>
  }
}
 801238c:	bf00      	nop
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	20033474 	.word	0x20033474
 8012398:	20033478 	.word	0x20033478
 801239c:	2003347c 	.word	0x2003347c

080123a0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80123ac:	4b27      	ldr	r3, [pc, #156]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	4927      	ldr	r1, [pc, #156]	; (8012450 <HAL_JPEG_DataReadyCallback+0xb0>)
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	440b      	add	r3, r1
 80123bc:	2201      	movs	r2, #1
 80123be:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80123c0:	4b22      	ldr	r3, [pc, #136]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	4922      	ldr	r1, [pc, #136]	; (8012450 <HAL_JPEG_DataReadyCallback+0xb0>)
 80123c6:	4613      	mov	r3, r2
 80123c8:	005b      	lsls	r3, r3, #1
 80123ca:	4413      	add	r3, r2
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	440b      	add	r3, r1
 80123d0:	3308      	adds	r3, #8
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 80123d6:	4b1d      	ldr	r3, [pc, #116]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	3301      	adds	r3, #1
 80123dc:	4a1b      	ldr	r2, [pc, #108]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123de:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80123e0:	4b1a      	ldr	r3, [pc, #104]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	d902      	bls.n	80123ee <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80123e8:	4b18      	ldr	r3, [pc, #96]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80123ee:	4b17      	ldr	r3, [pc, #92]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	4917      	ldr	r1, [pc, #92]	; (8012450 <HAL_JPEG_DataReadyCallback+0xb0>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	440b      	add	r3, r1
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d006      	beq.n	8012412 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8012404:	2102      	movs	r1, #2
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	f7f1 fdb9 	bl	8003f7e <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 801240c:	4b11      	ldr	r3, [pc, #68]	; (8012454 <HAL_JPEG_DataReadyCallback+0xb4>)
 801240e:	2201      	movs	r2, #1
 8012410:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8012412:	4b0e      	ldr	r3, [pc, #56]	; (801244c <HAL_JPEG_DataReadyCallback+0xac>)
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	490e      	ldr	r1, [pc, #56]	; (8012450 <HAL_JPEG_DataReadyCallback+0xb0>)
 8012418:	4613      	mov	r3, r2
 801241a:	005b      	lsls	r3, r3, #1
 801241c:	4413      	add	r3, r2
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	440b      	add	r3, r1
 8012422:	3304      	adds	r3, #4
 8012424:	6819      	ldr	r1, [r3, #0]
 8012426:	4b0c      	ldr	r3, [pc, #48]	; (8012458 <HAL_JPEG_DataReadyCallback+0xb8>)
 8012428:	68da      	ldr	r2, [r3, #12]
 801242a:	4613      	mov	r3, r2
 801242c:	005b      	lsls	r3, r3, #1
 801242e:	4413      	add	r3, r2
 8012430:	01db      	lsls	r3, r3, #7
 8012432:	461a      	mov	r2, r3
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f7f1 fedc 	bl	80041f2 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 801243a:	4b08      	ldr	r3, [pc, #32]	; (801245c <HAL_JPEG_DataReadyCallback+0xbc>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4618      	mov	r0, r3
 8012440:	f7f7 f838 	bl	80094b4 <osSemaphoreRelease>
}
 8012444:	bf00      	nop
 8012446:	3710      	adds	r7, #16
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	20033488 	.word	0x20033488
 8012450:	20000014 	.word	0x20000014
 8012454:	2003348c 	.word	0x2003348c
 8012458:	200334a4 	.word	0x200334a4
 801245c:	200334a0 	.word	0x200334a0

08012460 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7f1 fede 	bl	800422a <HAL_JPEG_GetState>
 801246e:	4603      	mov	r3, r0
 8012470:	73fb      	strb	r3, [r7, #15]
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7f1 fee7 	bl	8004246 <HAL_JPEG_GetError>
 8012478:	60b8      	str	r0, [r7, #8]
  while(1){}
 801247a:	e7fe      	b.n	801247a <HAL_JPEG_ErrorCallback+0x1a>

0801247c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8012484:	4b04      	ldr	r3, [pc, #16]	; (8012498 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8012486:	2201      	movs	r2, #1
 8012488:	601a      	str	r2, [r3, #0]
}
 801248a:	bf00      	nop
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr
 8012496:	bf00      	nop
 8012498:	20033480 	.word	0x20033480

0801249c <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 801249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801249e:	b087      	sub	sp, #28
 80124a0:	af02      	add	r7, sp, #8
 80124a2:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 80124a4:	4b55      	ldr	r3, [pc, #340]	; (80125fc <JPEG_OutputHandler+0x160>)
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	4955      	ldr	r1, [pc, #340]	; (8012600 <JPEG_OutputHandler+0x164>)
 80124aa:	4613      	mov	r3, r2
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	4413      	add	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	440b      	add	r3, r1
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d160      	bne.n	801257c <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80124ba:	4b52      	ldr	r3, [pc, #328]	; (8012604 <JPEG_OutputHandler+0x168>)
 80124bc:	695b      	ldr	r3, [r3, #20]
 80124be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	bf14      	ite	ne
 80124c6:	2301      	movne	r3, #1
 80124c8:	2300      	moveq	r3, #0
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d001      	beq.n	80124d4 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 80124d0:	f7ff f918 	bl	8011704 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80124d4:	4b4c      	ldr	r3, [pc, #304]	; (8012608 <JPEG_OutputHandler+0x16c>)
 80124d6:	681c      	ldr	r4, [r3, #0]
 80124d8:	4b48      	ldr	r3, [pc, #288]	; (80125fc <JPEG_OutputHandler+0x160>)
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	4948      	ldr	r1, [pc, #288]	; (8012600 <JPEG_OutputHandler+0x164>)
 80124de:	4613      	mov	r3, r2
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	4413      	add	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	440b      	add	r3, r1
 80124e8:	3304      	adds	r3, #4
 80124ea:	6818      	ldr	r0, [r3, #0]
 80124ec:	4b47      	ldr	r3, [pc, #284]	; (801260c <JPEG_OutputHandler+0x170>)
 80124ee:	6819      	ldr	r1, [r3, #0]
 80124f0:	4b47      	ldr	r3, [pc, #284]	; (8012610 <JPEG_OutputHandler+0x174>)
 80124f2:	681d      	ldr	r5, [r3, #0]
 80124f4:	4b41      	ldr	r3, [pc, #260]	; (80125fc <JPEG_OutputHandler+0x160>)
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	4e41      	ldr	r6, [pc, #260]	; (8012600 <JPEG_OutputHandler+0x164>)
 80124fa:	4613      	mov	r3, r2
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	4413      	add	r3, r2
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	4433      	add	r3, r6
 8012504:	3308      	adds	r3, #8
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	f107 030c 	add.w	r3, r7, #12
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	4613      	mov	r3, r2
 8012510:	462a      	mov	r2, r5
 8012512:	47a0      	blx	r4
 8012514:	4602      	mov	r2, r0
 8012516:	4b3e      	ldr	r3, [pc, #248]	; (8012610 <JPEG_OutputHandler+0x174>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4413      	add	r3, r2
 801251c:	4a3c      	ldr	r2, [pc, #240]	; (8012610 <JPEG_OutputHandler+0x174>)
 801251e:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8012520:	4b36      	ldr	r3, [pc, #216]	; (80125fc <JPEG_OutputHandler+0x160>)
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	4936      	ldr	r1, [pc, #216]	; (8012600 <JPEG_OutputHandler+0x164>)
 8012526:	4613      	mov	r3, r2
 8012528:	005b      	lsls	r3, r3, #1
 801252a:	4413      	add	r3, r2
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	440b      	add	r3, r1
 8012530:	2200      	movs	r2, #0
 8012532:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8012534:	4b31      	ldr	r3, [pc, #196]	; (80125fc <JPEG_OutputHandler+0x160>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	4931      	ldr	r1, [pc, #196]	; (8012600 <JPEG_OutputHandler+0x164>)
 801253a:	4613      	mov	r3, r2
 801253c:	005b      	lsls	r3, r3, #1
 801253e:	4413      	add	r3, r2
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	440b      	add	r3, r1
 8012544:	3308      	adds	r3, #8
 8012546:	2200      	movs	r2, #0
 8012548:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 801254a:	4b2c      	ldr	r3, [pc, #176]	; (80125fc <JPEG_OutputHandler+0x160>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	3301      	adds	r3, #1
 8012550:	4a2a      	ldr	r2, [pc, #168]	; (80125fc <JPEG_OutputHandler+0x160>)
 8012552:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8012554:	4b29      	ldr	r3, [pc, #164]	; (80125fc <JPEG_OutputHandler+0x160>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b01      	cmp	r3, #1
 801255a:	d902      	bls.n	8012562 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 801255c:	4b27      	ldr	r3, [pc, #156]	; (80125fc <JPEG_OutputHandler+0x160>)
 801255e:	2200      	movs	r2, #0
 8012560:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8012562:	4b2b      	ldr	r3, [pc, #172]	; (8012610 <JPEG_OutputHandler+0x174>)
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	4b2b      	ldr	r3, [pc, #172]	; (8012614 <JPEG_OutputHandler+0x178>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	429a      	cmp	r2, r3
 801256c:	bf0c      	ite	eq
 801256e:	2301      	moveq	r3, #1
 8012570:	2300      	movne	r3, #0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b00      	cmp	r3, #0
 8012576:	d02a      	beq.n	80125ce <JPEG_OutputHandler+0x132>
    {
      return 1;
 8012578:	2301      	movs	r3, #1
 801257a:	e03a      	b.n	80125f2 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 801257c:	4b26      	ldr	r3, [pc, #152]	; (8012618 <JPEG_OutputHandler+0x17c>)
 801257e:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8012580:	2b01      	cmp	r3, #1
 8012582:	d117      	bne.n	80125b4 <JPEG_OutputHandler+0x118>
 8012584:	4b25      	ldr	r3, [pc, #148]	; (801261c <JPEG_OutputHandler+0x180>)
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	491d      	ldr	r1, [pc, #116]	; (8012600 <JPEG_OutputHandler+0x164>)
 801258a:	4613      	mov	r3, r2
 801258c:	005b      	lsls	r3, r3, #1
 801258e:	4413      	add	r3, r2
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	440b      	add	r3, r1
 8012594:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 8012596:	2b00      	cmp	r3, #0
 8012598:	d10c      	bne.n	80125b4 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 801259a:	4b18      	ldr	r3, [pc, #96]	; (80125fc <JPEG_OutputHandler+0x160>)
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	4918      	ldr	r1, [pc, #96]	; (8012600 <JPEG_OutputHandler+0x164>)
 80125a0:	4613      	mov	r3, r2
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	4413      	add	r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	440b      	add	r3, r1
 80125aa:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d101      	bne.n	80125b4 <JPEG_OutputHandler+0x118>
 80125b0:	2301      	movs	r3, #1
 80125b2:	e000      	b.n	80125b6 <JPEG_OutputHandler+0x11a>
 80125b4:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d007      	beq.n	80125ca <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 80125ba:	4b17      	ldr	r3, [pc, #92]	; (8012618 <JPEG_OutputHandler+0x17c>)
 80125bc:	2200      	movs	r2, #0
 80125be:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80125c0:	2102      	movs	r1, #2
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7f1 fd46 	bl	8004054 <HAL_JPEG_Resume>
 80125c8:	e001      	b.n	80125ce <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 80125ca:	2302      	movs	r3, #2
 80125cc:	e011      	b.n	80125f2 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80125ce:	4b10      	ldr	r3, [pc, #64]	; (8012610 <JPEG_OutputHandler+0x174>)
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	4b10      	ldr	r3, [pc, #64]	; (8012614 <JPEG_OutputHandler+0x178>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d105      	bne.n	80125e6 <JPEG_OutputHandler+0x14a>
 80125da:	4b11      	ldr	r3, [pc, #68]	; (8012620 <JPEG_OutputHandler+0x184>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d001      	beq.n	80125e6 <JPEG_OutputHandler+0x14a>
 80125e2:	2301      	movs	r3, #1
 80125e4:	e000      	b.n	80125e8 <JPEG_OutputHandler+0x14c>
 80125e6:	2300      	movs	r3, #0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <JPEG_OutputHandler+0x154>
  {
    return 1;
 80125ec:	2301      	movs	r3, #1
 80125ee:	e000      	b.n	80125f2 <JPEG_OutputHandler+0x156>
  }

  return 0;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125fa:	bf00      	nop
 80125fc:	20033484 	.word	0x20033484
 8012600:	20000014 	.word	0x20000014
 8012604:	e000ed00 	.word	0xe000ed00
 8012608:	20033498 	.word	0x20033498
 801260c:	20033470 	.word	0x20033470
 8012610:	2003349c 	.word	0x2003349c
 8012614:	20033494 	.word	0x20033494
 8012618:	2003348c 	.word	0x2003348c
 801261c:	20033488 	.word	0x20033488
 8012620:	20033480 	.word	0x20033480

08012624 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	4a05      	ldr	r2, [pc, #20]	; (8012644 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff f82b 	bl	8011690 <_ZN12MJPEGDecoderD1Ev>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4618      	mov	r0, r3
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	0802c8a8 	.word	0x0802c8a8

08012648 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff ffe7 	bl	8012624 <_ZN20HardwareMJPEGDecoderD1Ev>
 8012656:	2144      	movs	r1, #68	; 0x44
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f016 f8c7 	bl	80287ec <_ZdlPvj>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012668:	b580      	push	{r7, lr}
 801266a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 801266c:	2200      	movs	r2, #0
 801266e:	2101      	movs	r1, #1
 8012670:	2001      	movs	r0, #1
 8012672:	f7f6 fe1d 	bl	80092b0 <osSemaphoreNew>
 8012676:	4603      	mov	r3, r0
 8012678:	4a0f      	ldr	r2, [pc, #60]	; (80126b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801267a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801267c:	4b0e      	ldr	r3, [pc, #56]	; (80126b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d105      	bne.n	8012690 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8012684:	4b0d      	ldr	r3, [pc, #52]	; (80126bc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012686:	4a0e      	ldr	r2, [pc, #56]	; (80126c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012688:	2128      	movs	r1, #40	; 0x28
 801268a:	480e      	ldr	r0, [pc, #56]	; (80126c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801268c:	f016 f8dc 	bl	8028848 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8012690:	2200      	movs	r2, #0
 8012692:	2104      	movs	r1, #4
 8012694:	2001      	movs	r0, #1
 8012696:	f7f6 ff65 	bl	8009564 <osMessageQueueNew>
 801269a:	4603      	mov	r3, r0
 801269c:	4a0a      	ldr	r2, [pc, #40]	; (80126c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801269e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80126a0:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d105      	bne.n	80126b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80126a8:	4b08      	ldr	r3, [pc, #32]	; (80126cc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80126aa:	4a05      	ldr	r2, [pc, #20]	; (80126c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80126ac:	212c      	movs	r1, #44	; 0x2c
 80126ae:	4805      	ldr	r0, [pc, #20]	; (80126c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80126b0:	f016 f8ca 	bl	8028848 <__assert_func>
}
 80126b4:	bf00      	nop
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	200334b8 	.word	0x200334b8
 80126bc:	0802a8a8 	.word	0x0802a8a8
 80126c0:	0802a8f4 	.word	0x0802a8f4
 80126c4:	0802a924 	.word	0x0802a924
 80126c8:	200334bc 	.word	0x200334bc
 80126cc:	0802a950 	.word	0x0802a950

080126d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80126d4:	4b04      	ldr	r3, [pc, #16]	; (80126e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f04f 31ff 	mov.w	r1, #4294967295
 80126dc:	4618      	mov	r0, r3
 80126de:	f7f6 fe83 	bl	80093e8 <osSemaphoreAcquire>
}
 80126e2:	bf00      	nop
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	bf00      	nop
 80126e8:	200334b8 	.word	0x200334b8

080126ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80126f0:	4b03      	ldr	r3, [pc, #12]	; (8012700 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7f6 fedd 	bl	80094b4 <osSemaphoreRelease>
}
 80126fa:	bf00      	nop
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	200334b8 	.word	0x200334b8

08012704 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012704:	b580      	push	{r7, lr}
 8012706:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8012708:	4b03      	ldr	r3, [pc, #12]	; (8012718 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2100      	movs	r1, #0
 801270e:	4618      	mov	r0, r3
 8012710:	f7f6 fe6a 	bl	80093e8 <osSemaphoreAcquire>
}
 8012714:	bf00      	nop
 8012716:	bd80      	pop	{r7, pc}
 8012718:	200334b8 	.word	0x200334b8

0801271c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801271c:	b580      	push	{r7, lr}
 801271e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012720:	4b03      	ldr	r3, [pc, #12]	; (8012730 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4618      	mov	r0, r3
 8012726:	f7f6 fec5 	bl	80094b4 <osSemaphoreRelease>
}
 801272a:	bf00      	nop
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	200334b8 	.word	0x200334b8

08012734 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012734:	b580      	push	{r7, lr}
 8012736:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8012738:	4b04      	ldr	r3, [pc, #16]	; (801274c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801273a:	6818      	ldr	r0, [r3, #0]
 801273c:	2300      	movs	r3, #0
 801273e:	2200      	movs	r2, #0
 8012740:	4903      	ldr	r1, [pc, #12]	; (8012750 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8012742:	f7f6 ff95 	bl	8009670 <osMessageQueuePut>
}
 8012746:	bf00      	nop
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	200334bc 	.word	0x200334bc
 8012750:	2000002c 	.word	0x2000002c

08012754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801275a:	4b09      	ldr	r3, [pc, #36]	; (8012780 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801275c:	6818      	ldr	r0, [r3, #0]
 801275e:	1d39      	adds	r1, r7, #4
 8012760:	2300      	movs	r3, #0
 8012762:	2200      	movs	r2, #0
 8012764:	f7f6 fff8 	bl	8009758 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8012768:	4b05      	ldr	r3, [pc, #20]	; (8012780 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801276a:	6818      	ldr	r0, [r3, #0]
 801276c:	1d39      	adds	r1, r7, #4
 801276e:	f04f 33ff 	mov.w	r3, #4294967295
 8012772:	2200      	movs	r2, #0
 8012774:	f7f6 fff0 	bl	8009758 <osMessageQueueGet>
}
 8012778:	bf00      	nop
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	200334bc 	.word	0x200334bc

08012784 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801278e:	88fb      	ldrh	r3, [r7, #6]
 8012790:	4618      	mov	r0, r3
 8012792:	f7f6 fc17 	bl	8008fc4 <osDelay>
}
 8012796:	bf00      	nop
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
	...

080127a0 <__NVIC_DisableIRQ>:
{
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	4603      	mov	r3, r0
 80127a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80127aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	db12      	blt.n	80127d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127b2:	79fb      	ldrb	r3, [r7, #7]
 80127b4:	f003 021f 	and.w	r2, r3, #31
 80127b8:	490a      	ldr	r1, [pc, #40]	; (80127e4 <__NVIC_DisableIRQ+0x44>)
 80127ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127be:	095b      	lsrs	r3, r3, #5
 80127c0:	2001      	movs	r0, #1
 80127c2:	fa00 f202 	lsl.w	r2, r0, r2
 80127c6:	3320      	adds	r3, #32
 80127c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80127cc:	f3bf 8f4f 	dsb	sy
}
 80127d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80127d2:	f3bf 8f6f 	isb	sy
}
 80127d6:	bf00      	nop
}
 80127d8:	bf00      	nop
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr
 80127e4:	e000e100 	.word	0xe000e100

080127e8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
    {
 80127f0:	4a04      	ldr	r2, [pc, #16]	; (8012804 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	601a      	str	r2, [r3, #0]
    }
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr
 8012804:	0802c97c 	.word	0x0802c97c

08012808 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
    }
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff ffe9 	bl	80127e8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012816:	2104      	movs	r1, #4
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f015 ffe7 	bl	80287ec <_ZdlPvj>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	3344      	adds	r3, #68	; 0x44
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	4798      	blx	r3
    }
 801283c:	bf00      	nop
 801283e:	3708      	adds	r7, #8
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
    {
 801284c:	4a04      	ldr	r2, [pc, #16]	; (8012860 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	601a      	str	r2, [r3, #0]
    }
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	0802cd70 	.word	0x0802cd70

08012864 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
    }
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7ff ffe9 	bl	8012844 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012872:	210c      	movs	r1, #12
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f015 ffb9 	bl	80287ec <_ZdlPvj>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801288e:	4a09      	ldr	r2, [pc, #36]	; (80128b4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	683a      	ldr	r2, [r7, #0]
 8012898:	605a      	str	r2, [r3, #4]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	721a      	strb	r2, [r3, #8]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	725a      	strb	r2, [r3, #9]
    {
    }
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	0802cd70 	.word	0x0802cd70

080128b8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80128c0:	2301      	movs	r3, #1
    }
 80128c2:	4618      	mov	r0, r3
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b082      	sub	sp, #8
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	3328      	adds	r3, #40	; 0x28
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	4610      	mov	r0, r2
 80128e2:	4798      	blx	r3
    }
 80128e4:	bf00      	nop
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	3314      	adds	r3, #20
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4610      	mov	r0, r2
 8012904:	4798      	blx	r3
    }
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
	...

08012910 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8012910:	b580      	push	{r7, lr}
 8012912:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8012914:	4b13      	ldr	r3, [pc, #76]	; (8012964 <DMA2D_IRQHandler+0x54>)
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	f003 0302 	and.w	r3, r3, #2
 801291c:	2b00      	cmp	r3, #0
 801291e:	bf14      	ite	ne
 8012920:	2301      	movne	r3, #1
 8012922:	2300      	moveq	r3, #0
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	d019      	beq.n	801295e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 801292a:	4b0e      	ldr	r3, [pc, #56]	; (8012964 <DMA2D_IRQHandler+0x54>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012932:	2b00      	cmp	r3, #0
 8012934:	bf14      	ite	ne
 8012936:	2301      	movne	r3, #1
 8012938:	2300      	moveq	r3, #0
 801293a:	b2db      	uxtb	r3, r3
 801293c:	2b00      	cmp	r3, #0
 801293e:	d00e      	beq.n	801295e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8012940:	4b08      	ldr	r3, [pc, #32]	; (8012964 <DMA2D_IRQHandler+0x54>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4a07      	ldr	r2, [pc, #28]	; (8012964 <DMA2D_IRQHandler+0x54>)
 8012946:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801294a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 801294c:	4b05      	ldr	r3, [pc, #20]	; (8012964 <DMA2D_IRQHandler+0x54>)
 801294e:	2202      	movs	r2, #2
 8012950:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012952:	f7fa fedb 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 8012956:	4603      	mov	r3, r0
 8012958:	4618      	mov	r0, r3
 801295a:	f7ff ffc7 	bl	80128ec <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801295e:	bf00      	nop
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	4002b000 	.word	0x4002b000

08012968 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	330c      	adds	r3, #12
 8012974:	4618      	mov	r0, r3
 8012976:	f7fc f9ab 	bl	800ecd0 <_ZN8touchgfx9colortypeC1Ev>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4618      	mov	r0, r3
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8012984:	b5b0      	push	{r4, r5, r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	330c      	adds	r3, #12
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7ff ff75 	bl	8012884 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801299a:	4a0e      	ldr	r2, [pc, #56]	; (80129d4 <_ZN8STM32DMAC1Ev+0x50>)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	601a      	str	r2, [r3, #0]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f103 000c 	add.w	r0, r3, #12
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3320      	adds	r3, #32
 80129aa:	2260      	movs	r2, #96	; 0x60
 80129ac:	4619      	mov	r1, r3
 80129ae:	f003 fb9b 	bl	80160e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3320      	adds	r3, #32
 80129b6:	245f      	movs	r4, #95	; 0x5f
 80129b8:	461d      	mov	r5, r3
 80129ba:	2c00      	cmp	r4, #0
 80129bc:	db05      	blt.n	80129ca <_ZN8STM32DMAC1Ev+0x46>
 80129be:	4628      	mov	r0, r5
 80129c0:	f7ff ffd2 	bl	8012968 <_ZN8touchgfx6BlitOpC1Ev>
 80129c4:	3524      	adds	r5, #36	; 0x24
 80129c6:	3c01      	subs	r4, #1
 80129c8:	e7f7      	b.n	80129ba <_ZN8STM32DMAC1Ev+0x36>
{
}
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bdb0      	pop	{r4, r5, r7, pc}
 80129d4:	0802c92c 	.word	0x0802c92c

080129d8 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	4a09      	ldr	r2, [pc, #36]	; (8012a08 <_ZN8STM32DMAD1Ev+0x30>)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80129e6:	205a      	movs	r0, #90	; 0x5a
 80129e8:	f7ff feda 	bl	80127a0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	330c      	adds	r3, #12
 80129f0:	4618      	mov	r0, r3
 80129f2:	f000 fb3b 	bl	801306c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff ff23 	bl	8012844 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4618      	mov	r0, r3
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	0802c92c 	.word	0x0802c92c

08012a0c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
}
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7ff ffdf 	bl	80129d8 <_ZN8STM32DMAD1Ev>
 8012a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f015 fee4 	bl	80287ec <_ZdlPvj>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
	...

08012a30 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012a38:	4b11      	ldr	r3, [pc, #68]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a3c:	4a10      	ldr	r2, [pc, #64]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012a42:	6313      	str	r3, [r2, #48]	; 0x30
 8012a44:	4b0e      	ldr	r3, [pc, #56]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a4c:	60fb      	str	r3, [r7, #12]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012a50:	4b0b      	ldr	r3, [pc, #44]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	4a0a      	ldr	r2, [pc, #40]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012a5a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8012a5c:	4b08      	ldr	r3, [pc, #32]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a5e:	691b      	ldr	r3, [r3, #16]
 8012a60:	4a07      	ldr	r2, [pc, #28]	; (8012a80 <_ZN8STM32DMA10initializeEv+0x50>)
 8012a62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012a66:	6113      	str	r3, [r2, #16]

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8012a68:	2200      	movs	r2, #0
 8012a6a:	2105      	movs	r1, #5
 8012a6c:	205a      	movs	r0, #90	; 0x5a
 8012a6e:	f7f0 f92f 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8012a72:	205a      	movs	r0, #90	; 0x5a
 8012a74:	f7f0 f948 	bl	8002d08 <HAL_NVIC_EnableIRQ>
}
 8012a78:	bf00      	nop
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	40023800 	.word	0x40023800

08012a84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012a90:	2300      	movs	r3, #0
 8012a92:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	2b0b      	cmp	r3, #11
 8012a98:	d826      	bhi.n	8012ae8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8012a9a:	a201      	add	r2, pc, #4	; (adr r2, 8012aa0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa0:	08012add 	.word	0x08012add
 8012aa4:	08012ad7 	.word	0x08012ad7
 8012aa8:	08012ad1 	.word	0x08012ad1
 8012aac:	08012ae9 	.word	0x08012ae9
 8012ab0:	08012ae9 	.word	0x08012ae9
 8012ab4:	08012ae9 	.word	0x08012ae9
 8012ab8:	08012ae9 	.word	0x08012ae9
 8012abc:	08012ae3 	.word	0x08012ae3
 8012ac0:	08012ae3 	.word	0x08012ae3
 8012ac4:	08012ae3 	.word	0x08012ae3
 8012ac8:	08012ae3 	.word	0x08012ae3
 8012acc:	08012ae3 	.word	0x08012ae3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	60fb      	str	r3, [r7, #12]
        break;
 8012ad4:	e00e      	b.n	8012af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	60fb      	str	r3, [r7, #12]
        break;
 8012ada:	e00b      	b.n	8012af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012adc:	2302      	movs	r3, #2
 8012ade:	60fb      	str	r3, [r7, #12]
        break;
 8012ae0:	e008      	b.n	8012af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012ae2:	2305      	movs	r3, #5
 8012ae4:	60fb      	str	r3, [r7, #12]
        break;
 8012ae6:	e005      	b.n	8012af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012ae8:	4b05      	ldr	r3, [pc, #20]	; (8012b00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012aea:	4a06      	ldr	r2, [pc, #24]	; (8012b04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012aec:	216e      	movs	r1, #110	; 0x6e
 8012aee:	4806      	ldr	r0, [pc, #24]	; (8012b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012af0:	f015 feaa 	bl	8028848 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012af4:	68fb      	ldr	r3, [r7, #12]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	0802a994 	.word	0x0802a994
 8012b04:	0802a9b0 	.word	0x0802a9b0
 8012b08:	0802a9fc 	.word	0x0802a9fc

08012b0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	460b      	mov	r3, r1
 8012b16:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012b1c:	78fb      	ldrb	r3, [r7, #3]
 8012b1e:	2b0a      	cmp	r3, #10
 8012b20:	d821      	bhi.n	8012b66 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012b22:	a201      	add	r2, pc, #4	; (adr r2, 8012b28 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b28:	08012b61 	.word	0x08012b61
 8012b2c:	08012b5b 	.word	0x08012b5b
 8012b30:	08012b55 	.word	0x08012b55
 8012b34:	08012b67 	.word	0x08012b67
 8012b38:	08012b67 	.word	0x08012b67
 8012b3c:	08012b67 	.word	0x08012b67
 8012b40:	08012b67 	.word	0x08012b67
 8012b44:	08012b5b 	.word	0x08012b5b
 8012b48:	08012b5b 	.word	0x08012b5b
 8012b4c:	08012b5b 	.word	0x08012b5b
 8012b50:	08012b5b 	.word	0x08012b5b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012b54:	2300      	movs	r3, #0
 8012b56:	60fb      	str	r3, [r7, #12]
        break;
 8012b58:	e00b      	b.n	8012b72 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	60fb      	str	r3, [r7, #12]
        break;
 8012b5e:	e008      	b.n	8012b72 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012b60:	2302      	movs	r3, #2
 8012b62:	60fb      	str	r3, [r7, #12]
        break;
 8012b64:	e005      	b.n	8012b72 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012b66:	4b05      	ldr	r3, [pc, #20]	; (8012b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012b68:	4a05      	ldr	r2, [pc, #20]	; (8012b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8012b6a:	218f      	movs	r1, #143	; 0x8f
 8012b6c:	4805      	ldr	r0, [pc, #20]	; (8012b84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012b6e:	f015 fe6b 	bl	8028848 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012b72:	68fb      	ldr	r3, [r7, #12]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3710      	adds	r7, #16
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	0802a994 	.word	0x0802a994
 8012b80:	0802aa28 	.word	0x0802aa28
 8012b84:	0802a9fc 	.word	0x0802a9fc

08012b88 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012b90:	f640 73ef 	movw	r3, #4079	; 0xfef
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr

08012ba0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b088      	sub	sp, #32
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	7f5b      	ldrb	r3, [r3, #29]
 8012bae:	4619      	mov	r1, r3
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff ff67 	bl	8012a84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012bb6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	7f9b      	ldrb	r3, [r3, #30]
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff ff60 	bl	8012a84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012bc4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	7f9b      	ldrb	r3, [r3, #30]
 8012bca:	4619      	mov	r1, r3
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ff9d 	bl	8012b0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012bd2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	8b5b      	ldrh	r3, [r3, #26]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	8a9b      	ldrh	r3, [r3, #20]
 8012bde:	1ad2      	subs	r2, r2, r3
 8012be0:	4b91      	ldr	r3, [pc, #580]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	8b5b      	ldrh	r3, [r3, #26]
 8012be8:	461a      	mov	r2, r3
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	8a9b      	ldrh	r3, [r3, #20]
 8012bee:	1ad2      	subs	r2, r2, r3
 8012bf0:	4b8d      	ldr	r3, [pc, #564]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012bf2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	8b1b      	ldrh	r3, [r3, #24]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	8a9b      	ldrh	r3, [r3, #20]
 8012bfe:	1ad2      	subs	r2, r2, r3
 8012c00:	4b89      	ldr	r3, [pc, #548]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c02:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012c04:	4a88      	ldr	r2, [pc, #544]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	8adb      	ldrh	r3, [r3, #22]
 8012c0e:	461a      	mov	r2, r3
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	8a9b      	ldrh	r3, [r3, #20]
 8012c14:	041b      	lsls	r3, r3, #16
 8012c16:	431a      	orrs	r2, r3
 8012c18:	4b83      	ldr	r3, [pc, #524]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	691a      	ldr	r2, [r3, #16]
 8012c20:	4b81      	ldr	r3, [pc, #516]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	685a      	ldr	r2, [r3, #4]
 8012c28:	4b7f      	ldr	r3, [pc, #508]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c2a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c34:	d042      	beq.n	8012cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8012c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c3a:	f200 8152 	bhi.w	8012ee2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8012c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c42:	d014      	beq.n	8012c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c48:	f200 814b 	bhi.w	8012ee2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8012c4c:	2b80      	cmp	r3, #128	; 0x80
 8012c4e:	d07b      	beq.n	8012d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8012c50:	2b80      	cmp	r3, #128	; 0x80
 8012c52:	f200 8146 	bhi.w	8012ee2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8012c56:	2b40      	cmp	r3, #64	; 0x40
 8012c58:	f000 8124 	beq.w	8012ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>
 8012c5c:	2b40      	cmp	r3, #64	; 0x40
 8012c5e:	f200 8140 	bhi.w	8012ee2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8012c62:	2b04      	cmp	r3, #4
 8012c64:	d051      	beq.n	8012d0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
 8012c66:	2b20      	cmp	r3, #32
 8012c68:	f000 80f4 	beq.w	8012e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>
 8012c6c:	e139      	b.n	8012ee2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	7f1b      	ldrb	r3, [r3, #28]
 8012c72:	061b      	lsls	r3, r3, #24
 8012c74:	4619      	mov	r1, r3
 8012c76:	4a6c      	ldr	r2, [pc, #432]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c78:	4b6c      	ldr	r3, [pc, #432]	; (8012e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8012c7a:	430b      	orrs	r3, r1
 8012c7c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	330c      	adds	r3, #12
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fc f832 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	4a67      	ldr	r2, [pc, #412]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c90:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	7fdb      	ldrb	r3, [r3, #31]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d005      	beq.n	8012ca6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012c9a:	4963      	ldr	r1, [pc, #396]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012c9c:	697a      	ldr	r2, [r7, #20]
 8012c9e:	4b64      	ldr	r3, [pc, #400]	; (8012e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012ca0:	4313      	orrs	r3, r2
 8012ca2:	624b      	str	r3, [r1, #36]	; 0x24
 8012ca4:	e002      	b.n	8012cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012ca6:	4a60      	ldr	r2, [pc, #384]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	691a      	ldr	r2, [r3, #16]
 8012cb0:	4b5d      	ldr	r3, [pc, #372]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cb2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012cb4:	4b5c      	ldr	r3, [pc, #368]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cb6:	4a5f      	ldr	r2, [pc, #380]	; (8012e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012cb8:	601a      	str	r2, [r3, #0]
        break;
 8012cba:	e133      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	7f1b      	ldrb	r3, [r3, #28]
 8012cc0:	061b      	lsls	r3, r3, #24
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	4a58      	ldr	r2, [pc, #352]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cc6:	4b5c      	ldr	r3, [pc, #368]	; (8012e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cc8:	430b      	orrs	r3, r1
 8012cca:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	330c      	adds	r3, #12
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fc f80b 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	4a53      	ldr	r2, [pc, #332]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012cde:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	7fdb      	ldrb	r3, [r3, #31]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d005      	beq.n	8012cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012ce8:	494f      	ldr	r1, [pc, #316]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cea:	697a      	ldr	r2, [r7, #20]
 8012cec:	4b50      	ldr	r3, [pc, #320]	; (8012e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	624b      	str	r3, [r1, #36]	; 0x24
 8012cf2:	e002      	b.n	8012cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012cf4:	4a4c      	ldr	r2, [pc, #304]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	691a      	ldr	r2, [r3, #16]
 8012cfe:	4b4a      	ldr	r3, [pc, #296]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d00:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012d02:	4b49      	ldr	r3, [pc, #292]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d04:	4a4b      	ldr	r2, [pc, #300]	; (8012e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012d06:	601a      	str	r2, [r3, #0]
        break;
 8012d08:	e10c      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	7f1b      	ldrb	r3, [r3, #28]
 8012d0e:	061b      	lsls	r3, r3, #24
 8012d10:	461a      	mov	r2, r3
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	4a44      	ldr	r2, [pc, #272]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d1c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	7fdb      	ldrb	r3, [r3, #31]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d005      	beq.n	8012d32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012d26:	4940      	ldr	r1, [pc, #256]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d28:	697a      	ldr	r2, [r7, #20]
 8012d2a:	4b41      	ldr	r3, [pc, #260]	; (8012e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	624b      	str	r3, [r1, #36]	; 0x24
 8012d30:	e002      	b.n	8012d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012d32:	4a3d      	ldr	r2, [pc, #244]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	691a      	ldr	r2, [r3, #16]
 8012d3c:	4b3a      	ldr	r3, [pc, #232]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d3e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012d40:	4b39      	ldr	r3, [pc, #228]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d42:	4a3c      	ldr	r2, [pc, #240]	; (8012e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012d44:	601a      	str	r2, [r3, #0]
        break;
 8012d46:	e0ed      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	1d1a      	adds	r2, r3, #4
 8012d56:	4b34      	ldr	r3, [pc, #208]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d58:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	7f1b      	ldrb	r3, [r3, #28]
 8012d5e:	061b      	lsls	r3, r3, #24
 8012d60:	461a      	mov	r2, r3
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	4313      	orrs	r3, r2
 8012d66:	4a30      	ldr	r2, [pc, #192]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d6c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	7fdb      	ldrb	r3, [r3, #31]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d005      	beq.n	8012d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012d76:	492c      	ldr	r1, [pc, #176]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d78:	697a      	ldr	r2, [r7, #20]
 8012d7a:	4b2d      	ldr	r3, [pc, #180]	; (8012e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012d7c:	4313      	orrs	r3, r2
 8012d7e:	624b      	str	r3, [r1, #36]	; 0x24
 8012d80:	e002      	b.n	8012d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e8>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012d82:	4a29      	ldr	r2, [pc, #164]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	6253      	str	r3, [r2, #36]	; 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	691a      	ldr	r2, [r3, #16]
 8012d8c:	4b26      	ldr	r3, [pc, #152]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012d8e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	881b      	ldrh	r3, [r3, #0]
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d002      	beq.n	8012da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d00d      	beq.n	8012dba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
 8012d9e:	e020      	b.n	8012de2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
            {
                case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                    /* Write foreground CLUT size and CLUT color mode */
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012da0:	4b21      	ldr	r3, [pc, #132]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012da2:	69da      	ldr	r2, [r3, #28]
 8012da4:	4b25      	ldr	r3, [pc, #148]	; (8012e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012da6:	4013      	ands	r3, r2
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	8852      	ldrh	r2, [r2, #2]
 8012dac:	3a01      	subs	r2, #1
 8012dae:	0212      	lsls	r2, r2, #8
 8012db0:	4611      	mov	r1, r2
 8012db2:	4a1d      	ldr	r2, [pc, #116]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012db4:	430b      	orrs	r3, r1
 8012db6:	61d3      	str	r3, [r2, #28]
                    break;
 8012db8:	e01a      	b.n	8012df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB888:
                    if(blitOp.alpha == 255)
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	7f1b      	ldrb	r3, [r3, #28]
 8012dbe:	2bff      	cmp	r3, #255	; 0xff
 8012dc0:	d101      	bne.n	8012dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
                    {
                        blend = false;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	77fb      	strb	r3, [r7, #31]
                    }
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012dc6:	4b18      	ldr	r3, [pc, #96]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dc8:	69da      	ldr	r2, [r3, #28]
 8012dca:	4b1c      	ldr	r3, [pc, #112]	; (8012e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012dcc:	4013      	ands	r3, r2
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	8852      	ldrh	r2, [r2, #2]
 8012dd2:	3a01      	subs	r2, #1
 8012dd4:	0212      	lsls	r2, r2, #8
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	4a13      	ldr	r2, [pc, #76]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dda:	f043 0310 	orr.w	r3, r3, #16
 8012dde:	61d3      	str	r3, [r2, #28]
                    break;
 8012de0:	e006      	b.n	8012df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB565:
                default:
                    assert(0 && "Unsupported format");
 8012de2:	4b17      	ldr	r3, [pc, #92]	; (8012e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012de4:	4a17      	ldr	r2, [pc, #92]	; (8012e44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012de6:	f240 1137 	movw	r1, #311	; 0x137
 8012dea:	4817      	ldr	r0, [pc, #92]	; (8012e48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012dec:	f015 fd2c 	bl	8028848 <__assert_func>
                    break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8012df0:	4b0d      	ldr	r3, [pc, #52]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012df2:	69db      	ldr	r3, [r3, #28]
 8012df4:	4a0c      	ldr	r2, [pc, #48]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012df6:	f043 0320 	orr.w	r3, r3, #32
 8012dfa:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012dfc:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012dfe:	69db      	ldr	r3, [r3, #28]
 8012e00:	f003 0320 	and.w	r3, r3, #32
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	bf14      	ite	ne
 8012e08:	2301      	movne	r3, #1
 8012e0a:	2300      	moveq	r3, #0
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d000      	beq.n	8012e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>
 8012e12:	e7f3      	b.n	8012dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012e14:	4b04      	ldr	r3, [pc, #16]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012e16:	2210      	movs	r2, #16
 8012e18:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8012e1a:	7ffb      	ldrb	r3, [r7, #31]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d015      	beq.n	8012e4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012e20:	4b01      	ldr	r3, [pc, #4]	; (8012e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8012e22:	4a04      	ldr	r2, [pc, #16]	; (8012e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012e24:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8012e26:	e07d      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
 8012e28:	4002b000 	.word	0x4002b000
 8012e2c:	0002000a 	.word	0x0002000a
 8012e30:	ff010000 	.word	0xff010000
 8012e34:	00020201 	.word	0x00020201
 8012e38:	00020009 	.word	0x00020009
 8012e3c:	ffff00ef 	.word	0xffff00ef
 8012e40:	0802aa74 	.word	0x0802aa74
 8012e44:	0802aa90 	.word	0x0802aa90
 8012e48:	0802a9fc 	.word	0x0802a9fc
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012e4c:	4b37      	ldr	r3, [pc, #220]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e4e:	4a38      	ldr	r2, [pc, #224]	; (8012f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8012e50:	601a      	str	r2, [r3, #0]
        break;
 8012e52:	e067      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00a      	beq.n	8012e74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	7f1b      	ldrb	r3, [r3, #28]
 8012e62:	061b      	lsls	r3, r3, #24
 8012e64:	461a      	mov	r2, r3
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	4313      	orrs	r3, r2
 8012e6a:	4a30      	ldr	r2, [pc, #192]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e70:	61d3      	str	r3, [r2, #28]
 8012e72:	e002      	b.n	8012e7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2da>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012e74:	4a2d      	ldr	r2, [pc, #180]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	7fdb      	ldrb	r3, [r3, #31]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d005      	beq.n	8012e8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012e82:	492a      	ldr	r1, [pc, #168]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e84:	697a      	ldr	r2, [r7, #20]
 8012e86:	4b2b      	ldr	r3, [pc, #172]	; (8012f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	624b      	str	r3, [r1, #36]	; 0x24
 8012e8c:	e002      	b.n	8012e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2f4>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012e8e:	4a27      	ldr	r2, [pc, #156]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	691a      	ldr	r2, [r3, #16]
 8012e98:	4b24      	ldr	r3, [pc, #144]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e9a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012e9c:	4b23      	ldr	r3, [pc, #140]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012e9e:	4a26      	ldr	r2, [pc, #152]	; (8012f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 8012ea0:	601a      	str	r2, [r3, #0]
        break;
 8012ea2:	e03f      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	7f1b      	ldrb	r3, [r3, #28]
 8012ea8:	061b      	lsls	r3, r3, #24
 8012eaa:	461a      	mov	r2, r3
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	4a1e      	ldr	r2, [pc, #120]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012eb6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	7fdb      	ldrb	r3, [r3, #31]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d005      	beq.n	8012ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012ec0:	491a      	ldr	r1, [pc, #104]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012ec2:	697a      	ldr	r2, [r7, #20]
 8012ec4:	4b1b      	ldr	r3, [pc, #108]	; (8012f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	624b      	str	r3, [r1, #36]	; 0x24
 8012eca:	e002      	b.n	8012ed2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x332>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012ecc:	4a17      	ldr	r2, [pc, #92]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	691a      	ldr	r2, [r3, #16]
 8012ed6:	4b15      	ldr	r3, [pc, #84]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012ed8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012eda:	4b14      	ldr	r3, [pc, #80]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012edc:	4a16      	ldr	r2, [pc, #88]	; (8012f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 8012ede:	601a      	str	r2, [r3, #0]
        break;
 8012ee0:	e020      	b.n	8012f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d005      	beq.n	8012ef8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x358>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012eec:	490f      	ldr	r1, [pc, #60]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012eee:	69ba      	ldr	r2, [r7, #24]
 8012ef0:	4b10      	ldr	r3, [pc, #64]	; (8012f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	61cb      	str	r3, [r1, #28]
 8012ef6:	e002      	b.n	8012efe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x35e>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012ef8:	4a0c      	ldr	r2, [pc, #48]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	7f5a      	ldrb	r2, [r3, #29]
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	7f9b      	ldrb	r3, [r3, #30]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d007      	beq.n	8012f1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	691a      	ldr	r2, [r3, #16]
 8012f0e:	4b07      	ldr	r3, [pc, #28]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012f10:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012f12:	4b06      	ldr	r3, [pc, #24]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012f14:	4a06      	ldr	r2, [pc, #24]	; (8012f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8012f16:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8012f18:	e003      	b.n	8012f22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x382>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8012f1a:	4b04      	ldr	r3, [pc, #16]	; (8012f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8012f1c:	f240 2201 	movw	r2, #513	; 0x201
 8012f20:	601a      	str	r2, [r3, #0]
        break;
 8012f22:	bf00      	nop
    }
}
 8012f24:	bf00      	nop
 8012f26:	3720      	adds	r7, #32
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	4002b000 	.word	0x4002b000
 8012f30:	00010201 	.word	0x00010201
 8012f34:	ff010000 	.word	0xff010000
 8012f38:	00020201 	.word	0x00020201

08012f3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012f3c:	b590      	push	{r4, r7, lr}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	7f9b      	ldrb	r3, [r3, #30]
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f7ff fddd 	bl	8012b0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012f52:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012f54:	4a40      	ldr	r2, [pc, #256]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	8adb      	ldrh	r3, [r3, #22]
 8012f5e:	461a      	mov	r2, r3
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	8a9b      	ldrh	r3, [r3, #20]
 8012f64:	041b      	lsls	r3, r3, #16
 8012f66:	431a      	orrs	r2, r3
 8012f68:	4b3b      	ldr	r3, [pc, #236]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	691a      	ldr	r2, [r3, #16]
 8012f70:	4b39      	ldr	r3, [pc, #228]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	8b5b      	ldrh	r3, [r3, #26]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	8a9b      	ldrh	r3, [r3, #20]
 8012f7e:	1ad2      	subs	r2, r2, r3
 8012f80:	4b35      	ldr	r3, [pc, #212]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f82:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b08      	cmp	r3, #8
 8012f8a:	d13a      	bne.n	8013002 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc6>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	8b5b      	ldrh	r3, [r3, #26]
 8012f90:	461a      	mov	r2, r3
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	8a9b      	ldrh	r3, [r3, #20]
 8012f96:	1ad2      	subs	r2, r2, r3
 8012f98:	4b2f      	ldr	r3, [pc, #188]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012f9a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	8b5b      	ldrh	r3, [r3, #26]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	8a9b      	ldrh	r3, [r3, #20]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	4b2b      	ldr	r3, [pc, #172]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012faa:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	7fdb      	ldrb	r3, [r3, #31]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d005      	beq.n	8012fc0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8012fb4:	4928      	ldr	r1, [pc, #160]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	4b28      	ldr	r3, [pc, #160]	; (801305c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	624b      	str	r3, [r1, #36]	; 0x24
 8012fbe:	e002      	b.n	8012fc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012fc0:	4a25      	ldr	r2, [pc, #148]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	7f1b      	ldrb	r3, [r3, #28]
 8012fca:	061b      	lsls	r3, r3, #24
 8012fcc:	4619      	mov	r1, r3
 8012fce:	4a22      	ldr	r2, [pc, #136]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012fd0:	4b23      	ldr	r3, [pc, #140]	; (8013060 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 8012fd2:	430b      	orrs	r3, r1
 8012fd4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	330c      	adds	r3, #12
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fb fe86 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	4a1d      	ldr	r2, [pc, #116]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012fe8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	691a      	ldr	r2, [r3, #16]
 8012fee:	4b1a      	ldr	r3, [pc, #104]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012ff0:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	691a      	ldr	r2, [r3, #16]
 8012ff6:	4b18      	ldr	r3, [pc, #96]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012ff8:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012ffa:	4b17      	ldr	r3, [pc, #92]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8012ffc:	4a19      	ldr	r2, [pc, #100]	; (8013064 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 8012ffe:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8013000:	e025      	b.n	801304e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013002:	4a15      	ldr	r2, [pc, #84]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8013008:	4b13      	ldr	r3, [pc, #76]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801300a:	2200      	movs	r2, #0
 801300c:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	7f9b      	ldrb	r3, [r3, #30]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d109      	bne.n	801302a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xee>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	330c      	adds	r3, #12
 801301a:	4618      	mov	r0, r3
 801301c:	f7fb fe66 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 8013020:	4603      	mov	r3, r0
 8013022:	4a0d      	ldr	r2, [pc, #52]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013024:	b29b      	uxth	r3, r3
 8013026:	6393      	str	r3, [r2, #56]	; 0x38
 8013028:	e00e      	b.n	8013048 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	7f1b      	ldrb	r3, [r3, #28]
 801302e:	061b      	lsls	r3, r3, #24
 8013030:	461c      	mov	r4, r3
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	330c      	adds	r3, #12
 8013036:	4618      	mov	r0, r3
 8013038:	f7fb fe58 	bl	800ecec <_ZNK8touchgfx9colortypecvmEv>
 801303c:	4603      	mov	r3, r0
 801303e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013042:	4a05      	ldr	r2, [pc, #20]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013044:	4323      	orrs	r3, r4
 8013046:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8013048:	4b03      	ldr	r3, [pc, #12]	; (8013058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801304a:	4a07      	ldr	r2, [pc, #28]	; (8013068 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>)
 801304c:	601a      	str	r2, [r3, #0]
}
 801304e:	bf00      	nop
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	bd90      	pop	{r4, r7, pc}
 8013056:	bf00      	nop
 8013058:	4002b000 	.word	0x4002b000
 801305c:	ff010000 	.word	0xff010000
 8013060:	00010009 	.word	0x00010009
 8013064:	00020201 	.word	0x00020201
 8013068:	00030201 	.word	0x00030201

0801306c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	4a05      	ldr	r2, [pc, #20]	; (801308c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	601a      	str	r2, [r3, #0]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	f7ff fbb3 	bl	80127e8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	0802cdc0 	.word	0x0802cdc0

08013090 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ff ffe7 	bl	801306c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801309e:	2114      	movs	r1, #20
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f015 fba3 	bl	80287ec <_ZdlPvj>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80130b8:	4a04      	ldr	r2, [pc, #16]	; (80130cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6013      	str	r3, [r2, #0]
    }
 80130be:	bf00      	nop
 80130c0:	370c      	adds	r7, #12
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	2003bd6c 	.word	0x2003bd6c

080130d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80130d0:	b480      	push	{r7}
 80130d2:	b085      	sub	sp, #20
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80130de:	4a0b      	ldr	r2, [pc, #44]	; (801310c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	601a      	str	r2, [r3, #0]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	605a      	str	r2, [r3, #4]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	609a      	str	r2, [r3, #8]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	683a      	ldr	r2, [r7, #0]
 80130f4:	60da      	str	r2, [r3, #12]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	69ba      	ldr	r2, [r7, #24]
 80130fa:	611a      	str	r2, [r3, #16]
    {
    }
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	4618      	mov	r0, r3
 8013100:	3714      	adds	r7, #20
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	0802ca64 	.word	0x0802ca64

08013110 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
    {
 8013118:	4a04      	ldr	r2, [pc, #16]	; (801312c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	601a      	str	r2, [r3, #0]
    }
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	0802ca64 	.word	0x0802ca64

08013130 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
    }
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff ffe9 	bl	8013110 <_ZN8touchgfx7MVPHeapD1Ev>
 801313e:	2114      	movs	r1, #20
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f015 fb53 	bl	80287ec <_ZdlPvj>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    {
 8013158:	4a04      	ldr	r2, [pc, #16]	; (801316c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	601a      	str	r2, [r3, #0]
    }
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4618      	mov	r0, r3
 8013162:	370c      	adds	r7, #12
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr
 801316c:	0802d230 	.word	0x0802d230

08013170 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
    }
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ff ffe9 	bl	8013150 <_ZN8touchgfx3LCDD1Ev>
 801317e:	2108      	movs	r1, #8
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f015 fb33 	bl	80287ec <_ZdlPvj>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	4618      	mov	r0, r3
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013190:	b480      	push	{r7}
 8013192:	b083      	sub	sp, #12
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	801a      	strh	r2, [r3, #0]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2200      	movs	r2, #0
 80131a2:	805a      	strh	r2, [r3, #2]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	809a      	strh	r2, [r3, #4]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2200      	movs	r2, #0
 80131ae:	80da      	strh	r2, [r3, #6]
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	811a      	strh	r2, [r3, #8]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	815a      	strh	r2, [r3, #10]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	819a      	strh	r2, [r3, #12]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	739a      	strb	r2, [r3, #14]
        {
        }
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4618      	mov	r0, r3
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr

080131d6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b082      	sub	sp, #8
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7ff ffd5 	bl	8013190 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2200      	movs	r2, #0
 80131ea:	611a      	str	r2, [r3, #16]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2200      	movs	r2, #0
 80131f0:	829a      	strh	r2, [r3, #20]
    {
    }
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4618      	mov	r0, r3
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801320a:	4a55      	ldr	r2, [pc, #340]	; (8013360 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	601a      	str	r2, [r3, #0]
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	605a      	str	r2, [r3, #4]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	609a      	str	r2, [r3, #8]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	683a      	ldr	r2, [r7, #0]
 8013220:	60da      	str	r2, [r3, #12]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2200      	movs	r2, #0
 8013226:	611a      	str	r2, [r3, #16]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2200      	movs	r2, #0
 801322c:	615a      	str	r2, [r3, #20]
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2200      	movs	r2, #0
 8013232:	619a      	str	r2, [r3, #24]
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	331c      	adds	r3, #28
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff ffcc 	bl	80131d6 <_ZN8touchgfx8GesturesC1Ev>
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2200      	movs	r2, #0
 801324a:	639a      	str	r2, [r3, #56]	; 0x38
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2200      	movs	r2, #0
 8013250:	63da      	str	r2, [r3, #60]	; 0x3c
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	641a      	str	r2, [r3, #64]	; 0x40
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2200      	movs	r2, #0
 801325c:	645a      	str	r2, [r3, #68]	; 0x44
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2200      	movs	r2, #0
 8013262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2201      	movs	r2, #1
 801326a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2200      	movs	r2, #0
 8013272:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2200      	movs	r2, #0
 801327a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2200      	movs	r2, #0
 8013282:	64da      	str	r2, [r3, #76]	; 0x4c
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	3350      	adds	r3, #80	; 0x50
 8013288:	4618      	mov	r0, r3
 801328a:	f7fa fec5 	bl	800e018 <_ZN8touchgfx4RectC1Ev>
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2200      	movs	r2, #0
 8013292:	659a      	str	r2, [r3, #88]	; 0x58
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	65da      	str	r2, [r3, #92]	; 0x5c
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	2200      	movs	r2, #0
 801329e:	661a      	str	r2, [r3, #96]	; 0x60
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2201      	movs	r2, #1
 80132a4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2200      	movs	r2, #0
 80132ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2200      	movs	r2, #0
 80132b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2201      	movs	r2, #1
 80132bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2200      	movs	r2, #0
 80132c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2200      	movs	r2, #0
 80132d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2200      	movs	r2, #0
 80132dc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2200      	movs	r2, #0
 80132e4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	671a      	str	r2, [r3, #112]	; 0x70
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2200      	movs	r2, #0
 80132f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2201      	movs	r2, #1
 801330a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	2201      	movs	r2, #1
 8013312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8013316:	4a13      	ldr	r2, [pc, #76]	; (8013364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801331c:	4a12      	ldr	r2, [pc, #72]	; (8013368 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801331e:	8b3b      	ldrh	r3, [r7, #24]
 8013320:	8013      	strh	r3, [r2, #0]
 8013322:	4b11      	ldr	r3, [pc, #68]	; (8013368 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013324:	881a      	ldrh	r2, [r3, #0]
 8013326:	4b11      	ldr	r3, [pc, #68]	; (801336c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8013328:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801332a:	4a11      	ldr	r2, [pc, #68]	; (8013370 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801332c:	8bbb      	ldrh	r3, [r7, #28]
 801332e:	8013      	strh	r3, [r2, #0]
 8013330:	4b0f      	ldr	r3, [pc, #60]	; (8013370 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013332:	881a      	ldrh	r2, [r3, #0]
 8013334:	4b0f      	ldr	r3, [pc, #60]	; (8013374 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8013336:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8013338:	4b0f      	ldr	r3, [pc, #60]	; (8013378 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801333a:	2200      	movs	r2, #0
 801333c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801333e:	8b3a      	ldrh	r2, [r7, #24]
 8013340:	8bbb      	ldrh	r3, [r7, #28]
 8013342:	429a      	cmp	r2, r3
 8013344:	bf34      	ite	cc
 8013346:	2301      	movcc	r3, #1
 8013348:	2300      	movcs	r3, #0
 801334a:	b2db      	uxtb	r3, r3
 801334c:	461a      	mov	r2, r3
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	0802cc98 	.word	0x0802cc98
 8013364:	2003bd08 	.word	0x2003bd08
 8013368:	2003bcfc 	.word	0x2003bcfc
 801336c:	2003bd02 	.word	0x2003bd02
 8013370:	2003bcfe 	.word	0x2003bcfe
 8013374:	2003bd04 	.word	0x2003bd04
 8013378:	2003bd00 	.word	0x2003bd00

0801337c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	4618      	mov	r0, r3
 801338a:	f7fa fbb3 	bl	800daf4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801338e:	bf00      	nop
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
	...

08013398 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af02      	add	r7, sp, #8
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
 80133a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80133a6:	68f8      	ldr	r0, [r7, #12]
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	68b9      	ldr	r1, [r7, #8]
 80133b2:	f7ff fe8d 	bl	80130d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80133b6:	4a04      	ldr	r2, [pc, #16]	; (80133c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	601a      	str	r2, [r3, #0]
    {

    }
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	0802ca50 	.word	0x0802ca50

080133cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80133cc:	b580      	push	{r7, lr}
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	4801      	ldr	r0, [pc, #4]	; (80133d8 <__tcf_0+0xc>)
 80133d2:	f000 f95d 	bl	8013690 <_ZN12FrontendHeapD1Ev>
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	200334c0 	.word	0x200334c0

080133dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80133dc:	b580      	push	{r7, lr}
 80133de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80133e0:	4b12      	ldr	r3, [pc, #72]	; (801342c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f3bf 8f5b 	dmb	ish
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	f003 0301 	and.w	r3, r3, #1
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	bf0c      	ite	eq
 80133f2:	2301      	moveq	r3, #1
 80133f4:	2300      	movne	r3, #0
 80133f6:	b2db      	uxtb	r3, r3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d013      	beq.n	8013424 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80133fc:	480b      	ldr	r0, [pc, #44]	; (801342c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80133fe:	f015 f9f7 	bl	80287f0 <__cxa_guard_acquire>
 8013402:	4603      	mov	r3, r0
 8013404:	2b00      	cmp	r3, #0
 8013406:	bf14      	ite	ne
 8013408:	2301      	movne	r3, #1
 801340a:	2300      	moveq	r3, #0
 801340c:	b2db      	uxtb	r3, r3
 801340e:	2b00      	cmp	r3, #0
 8013410:	d008      	beq.n	8013424 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8013412:	4807      	ldr	r0, [pc, #28]	; (8013430 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013414:	f000 f868 	bl	80134e8 <_ZN12FrontendHeapC1Ev>
 8013418:	4806      	ldr	r0, [pc, #24]	; (8013434 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801341a:	f015 fa33 	bl	8028884 <atexit>
 801341e:	4803      	ldr	r0, [pc, #12]	; (801342c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013420:	f015 f9f2 	bl	8028808 <__cxa_guard_release>
        return instance;
 8013424:	4b02      	ldr	r3, [pc, #8]	; (8013430 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8013426:	4618      	mov	r0, r3
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	20036dc8 	.word	0x20036dc8
 8013430:	200334c0 	.word	0x200334c0
 8013434:	080133cd 	.word	0x080133cd

08013438 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	4a05      	ldr	r2, [pc, #20]	; (8013458 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	601a      	str	r2, [r3, #0]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fe61 	bl	8013110 <_ZN8touchgfx7MVPHeapD1Ev>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	0802ca50 	.word	0x0802ca50

0801345c <_ZN16FrontendHeapBaseD0Ev>:
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff ffe7 	bl	8013438 <_ZN16FrontendHeapBaseD1Ev>
 801346a:	2114      	movs	r1, #20
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f015 f9bd 	bl	80287ec <_ZdlPvj>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4618      	mov	r0, r3
 8013488:	f001 fc94 	bl	8014db4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801348c:	4a03      	ldr	r2, [pc, #12]	; (801349c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	0802ca1c 	.word	0x0802ca1c

080134a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f001 fc82 	bl	8014db4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80134b0:	4a03      	ldr	r2, [pc, #12]	; (80134c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	0802c9e8 	.word	0x0802c9e8

080134c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f001 fc70 	bl	8014db4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80134d4:	4a03      	ldr	r2, [pc, #12]	; (80134e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	601a      	str	r2, [r3, #0]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	4618      	mov	r0, r3
 80134de:	3708      	adds	r7, #8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	0802c9b4 	.word	0x0802c9b4

080134e8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80134e8:	b5b0      	push	{r4, r5, r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af02      	add	r7, sp, #8
 80134ee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f103 0414 	add.w	r4, r3, #20
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f243 7298 	movw	r2, #14232	; 0x3798
 8013504:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013506:	6879      	ldr	r1, [r7, #4]
 8013508:	f243 73b0 	movw	r3, #14256	; 0x37b0
 801350c:	440b      	add	r3, r1
                     app(model, *this)
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	4613      	mov	r3, r2
 8013512:	462a      	mov	r2, r5
 8013514:	4621      	mov	r1, r4
 8013516:	f7ff ff3f 	bl	8013398 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801351a:	4a1a      	ldr	r2, [pc, #104]	; (8013584 <_ZN12FrontendHeapC1Ev+0x9c>)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	601a      	str	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	3314      	adds	r3, #20
 8013524:	4618      	mov	r0, r3
 8013526:	f7ff ffa9 	bl	801347c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	332c      	adds	r3, #44	; 0x2c
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff ffb6 	bl	80134a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	f243 7398 	movw	r3, #14232	; 0x3798
 801353a:	4413      	add	r3, r2
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff ffc1 	bl	80134c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	f243 73ac 	movw	r3, #14252	; 0x37ac
 8013548:	4413      	add	r3, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f7fd fd9e 	bl	801108c <_ZN5ModelC1Ev>
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8013556:	4413      	add	r3, r2
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	f243 71ac 	movw	r1, #14252	; 0x37ac
 801355e:	4411      	add	r1, r2
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	4618      	mov	r0, r3
 8013564:	f7fd fc12 	bl	8010d8c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8013570:	4413      	add	r3, r2
 8013572:	4619      	mov	r1, r3
 8013574:	f7ff ff02 	bl	801337c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4618      	mov	r0, r3
 801357c:	3708      	adds	r7, #8
 801357e:	46bd      	mov	sp, r7
 8013580:	bdb0      	pop	{r4, r5, r7, pc}
 8013582:	bf00      	nop
 8013584:	0802c9a0 	.word	0x0802c9a0

08013588 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013588:	b580      	push	{r7, lr}
 801358a:	b086      	sub	sp, #24
 801358c:	af02      	add	r7, sp, #8
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	8bbb      	ldrh	r3, [r7, #28]
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	8b3b      	ldrh	r3, [r7, #24]
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	68b9      	ldr	r1, [r7, #8]
 80135a6:	f7ff fe29 	bl	80131fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80135aa:	4a04      	ldr	r2, [pc, #16]	; (80135bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	601a      	str	r2, [r3, #0]
    }
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	0802caf0 	.word	0x0802caf0

080135c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	8bbb      	ldrh	r3, [r7, #28]
 80135d2:	9301      	str	r3, [sp, #4]
 80135d4:	8b3b      	ldrh	r3, [r7, #24]
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	68b9      	ldr	r1, [r7, #8]
 80135de:	f7ff ffd3 	bl	8013588 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80135e2:	4a04      	ldr	r2, [pc, #16]	; (80135f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	601a      	str	r2, [r3, #0]
    }
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4618      	mov	r0, r3
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	0802c7d0 	.word	0x0802c7d0

080135f8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	4a04      	ldr	r2, [pc, #16]	; (8013614 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	601a      	str	r2, [r3, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr
 8013614:	0802c7b8 	.word	0x0802c7b8

08013618 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff ffe8 	bl	80135f8 <_ZN8touchgfx15TouchControllerC1Ev>
 8013628:	4a03      	ldr	r2, [pc, #12]	; (8013638 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	0802c7a0 	.word	0x0802c7a0

0801363c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 801363c:	b590      	push	{r4, r7, lr}
 801363e:	b085      	sub	sp, #20
 8013640:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013642:	f7fd f959 	bl	80108f8 <_ZN14BitmapDatabase11getInstanceEv>
 8013646:	4604      	mov	r4, r0
 8013648:	f7fd f960 	bl	801090c <_ZN14BitmapDatabase15getInstanceSizeEv>
 801364c:	4603      	mov	r3, r0
 801364e:	4619      	mov	r1, r3
 8013650:	2300      	movs	r3, #0
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	2300      	movs	r3, #0
 8013656:	2200      	movs	r2, #0
 8013658:	4620      	mov	r0, r4
 801365a:	f009 fb85 	bl	801cd68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801365e:	4809      	ldr	r0, [pc, #36]	; (8013684 <touchgfx_init+0x48>)
 8013660:	f7ff fd26 	bl	80130b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013664:	2000      	movs	r0, #0
 8013666:	f7fd fa95 	bl	8010b94 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801366a:	4807      	ldr	r0, [pc, #28]	; (8013688 <touchgfx_init+0x4c>)
 801366c:	f009 fa34 	bl	801cad8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013670:	f7ff feb4 	bl	80133dc <_ZN12FrontendHeap11getInstanceEv>
 8013674:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013676:	4805      	ldr	r0, [pc, #20]	; (801368c <touchgfx_init+0x50>)
 8013678:	f7fd ff58 	bl	801152c <_ZN11TouchGFXHAL10initializeEv>
}
 801367c:	bf00      	nop
 801367e:	370c      	adds	r7, #12
 8013680:	46bd      	mov	sp, r7
 8013682:	bd90      	pop	{r4, r7, pc}
 8013684:	20037be8 	.word	0x20037be8
 8013688:	20000030 	.word	0x20000030
 801368c:	20037bec 	.word	0x20037bec

08013690 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	4a11      	ldr	r2, [pc, #68]	; (80136e0 <_ZN12FrontendHeapD1Ev+0x50>)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	601a      	str	r2, [r3, #0]
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	f243 73b0 	movw	r3, #14256	; 0x37b0
 80136a4:	4413      	add	r3, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fd fb3a 	bl	8010d20 <_ZN19FrontendApplicationD1Ev>
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	f243 7398 	movw	r3, #14232	; 0x3798
 80136b2:	4413      	add	r3, r2
 80136b4:	4618      	mov	r0, r3
 80136b6:	f000 f827 	bl	8013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	332c      	adds	r3, #44	; 0x2c
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 f844 	bl	801374c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	3314      	adds	r3, #20
 80136c8:	4618      	mov	r0, r3
 80136ca:	f000 f863 	bl	8013794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7ff feb1 	bl	8013438 <_ZN16FrontendHeapBaseD1Ev>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	0802c9a0 	.word	0x0802c9a0

080136e4 <_ZN12FrontendHeapD0Ev>:
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff ffcf 	bl	8013690 <_ZN12FrontendHeapD1Ev>
 80136f2:	f643 1108 	movw	r1, #14600	; 0x3908
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f015 f878 	bl	80287ec <_ZdlPvj>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	3708      	adds	r7, #8
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
	...

08013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	4a05      	ldr	r2, [pc, #20]	; (8013728 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4618      	mov	r0, r3
 801371a:	f001 fb4a 	bl	8014db2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	0802c9b4 	.word	0x0802c9b4

0801372c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff ffe7 	bl	8013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801373a:	2114      	movs	r1, #20
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f015 f855 	bl	80287ec <_ZdlPvj>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4618      	mov	r0, r3
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	4a05      	ldr	r2, [pc, #20]	; (801376c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	f001 fb28 	bl	8014db2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	0802c9e8 	.word	0x0802c9e8

08013770 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff ffe7 	bl	801374c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801377e:	f243 716c 	movw	r1, #14188	; 0x376c
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f015 f832 	bl	80287ec <_ZdlPvj>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	4618      	mov	r0, r3
 801378c:	3708      	adds	r7, #8
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
	...

08013794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	4a05      	ldr	r2, [pc, #20]	; (80137b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	601a      	str	r2, [r3, #0]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4618      	mov	r0, r3
 80137a6:	f001 fb04 	bl	8014db2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	0802ca1c 	.word	0x0802ca1c

080137b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f7ff ffe7 	bl	8013794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80137c6:	2118      	movs	r1, #24
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f015 f80f 	bl	80287ec <_ZdlPvj>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	3708      	adds	r7, #8
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	4a05      	ldr	r2, [pc, #20]	; (80137f8 <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7ff fcb1 	bl	8013150 <_ZN8touchgfx3LCDD1Ev>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4618      	mov	r0, r3
 80137f2:	3708      	adds	r7, #8
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	0802d634 	.word	0x0802d634

080137fc <_ZN8touchgfx8LCD32bppD0Ev>:
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ffe7 	bl	80137d8 <_ZN8touchgfx8LCD32bppD1Ev>
 801380a:	2178      	movs	r1, #120	; 0x78
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f014 ffed 	bl	80287ec <_ZdlPvj>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af02      	add	r7, sp, #8
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	6039      	str	r1, [r7, #0]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b01      	cmp	r3, #1
 801382a:	d119      	bne.n	8013860 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013832:	4293      	cmp	r3, r2
 8013834:	d114      	bne.n	8013860 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013836:	4818      	ldr	r0, [pc, #96]	; (8013898 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013838:	f7ff feee 	bl	8013618 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 801383c:	4817      	ldr	r0, [pc, #92]	; (801389c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801383e:	f7ff f8a1 	bl	8012984 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 8013842:	4817      	ldr	r0, [pc, #92]	; (80138a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013844:	f00c fb56 	bl	801fef4 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8013848:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	4b10      	ldr	r3, [pc, #64]	; (8013898 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013856:	4a12      	ldr	r2, [pc, #72]	; (80138a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013858:	4910      	ldr	r1, [pc, #64]	; (801389c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801385a:	4812      	ldr	r0, [pc, #72]	; (80138a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801385c:	f7ff feb0 	bl	80135c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d113      	bne.n	801388e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801386c:	4293      	cmp	r3, r2
 801386e:	d10e      	bne.n	801388e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013870:	480c      	ldr	r0, [pc, #48]	; (80138a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013872:	f7fd feeb 	bl	801164c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013876:	480c      	ldr	r0, [pc, #48]	; (80138a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013878:	f7f9 fa14 	bl	800cca4 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 801387c:	4808      	ldr	r0, [pc, #32]	; (80138a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801387e:	f7ff ffab 	bl	80137d8 <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8013882:	4806      	ldr	r0, [pc, #24]	; (801389c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013884:	f7ff f8a8 	bl	80129d8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013888:	4803      	ldr	r0, [pc, #12]	; (8013898 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801388a:	f7fd fc4f 	bl	801112c <_ZN20STM32TouchControllerD1Ev>
}
 801388e:	bf00      	nop
 8013890:	3708      	adds	r7, #8
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	20036dcc 	.word	0x20036dcc
 801389c:	20036dd0 	.word	0x20036dd0
 80138a0:	20037b70 	.word	0x20037b70
 80138a4:	20037bec 	.word	0x20037bec
 80138a8:	20000030 	.word	0x20000030

080138ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80138b4:	2301      	movs	r3, #1
    }
 80138b6:	4618      	mov	r0, r3
 80138b8:	370c      	adds	r7, #12
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80138c2:	b480      	push	{r7}
 80138c4:	b083      	sub	sp, #12
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80138ca:	230c      	movs	r3, #12
    }
 80138cc:	4618      	mov	r0, r3
 80138ce:	370c      	adds	r7, #12
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80138d8:	b480      	push	{r7}
 80138da:	b083      	sub	sp, #12
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	460b      	mov	r3, r1
 80138e2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80138e4:	887a      	ldrh	r2, [r7, #2]
 80138e6:	4613      	mov	r3, r2
 80138e8:	005b      	lsls	r3, r3, #1
 80138ea:	4413      	add	r3, r2
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	3308      	adds	r3, #8
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	4413      	add	r3, r2
    }
 80138f4:	4618      	mov	r0, r3
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	460b      	mov	r3, r1
 801390a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801390c:	887a      	ldrh	r2, [r7, #2]
 801390e:	4613      	mov	r3, r2
 8013910:	005b      	lsls	r3, r3, #1
 8013912:	4413      	add	r3, r2
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	3308      	adds	r3, #8
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	4413      	add	r3, r2
    }
 801391c:	4618      	mov	r0, r3
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013930:	2301      	movs	r3, #1
    }
 8013932:	4618      	mov	r0, r3
 8013934:	370c      	adds	r7, #12
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr

0801393e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801393e:	b480      	push	{r7}
 8013940:	b083      	sub	sp, #12
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013946:	f243 7364 	movw	r3, #14180	; 0x3764
    }
 801394a:	4618      	mov	r0, r3
 801394c:	370c      	adds	r7, #12
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr

08013956 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013956:	b480      	push	{r7}
 8013958:	b083      	sub	sp, #12
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	460b      	mov	r3, r1
 8013960:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013962:	887b      	ldrh	r3, [r7, #2]
 8013964:	f243 7264 	movw	r2, #14180	; 0x3764
 8013968:	fb02 f303 	mul.w	r3, r2, r3
 801396c:	3308      	adds	r3, #8
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	4413      	add	r3, r2
    }
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr

0801397e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801397e:	b480      	push	{r7}
 8013980:	b083      	sub	sp, #12
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
 8013986:	460b      	mov	r3, r1
 8013988:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801398a:	887b      	ldrh	r3, [r7, #2]
 801398c:	f243 7264 	movw	r2, #14180	; 0x3764
 8013990:	fb02 f303 	mul.w	r3, r2, r3
 8013994:	3308      	adds	r3, #8
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	4413      	add	r3, r2
    }
 801399a:	4618      	mov	r0, r3
 801399c:	370c      	adds	r7, #12
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr

080139a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80139a6:	b480      	push	{r7}
 80139a8:	b083      	sub	sp, #12
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80139ae:	2301      	movs	r3, #1
    }
 80139b0:	4618      	mov	r0, r3
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80139c4:	2310      	movs	r3, #16
    }
 80139c6:	4618      	mov	r0, r3
 80139c8:	370c      	adds	r7, #12
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80139d2:	b480      	push	{r7}
 80139d4:	b083      	sub	sp, #12
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
 80139da:	460b      	mov	r3, r1
 80139dc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80139de:	887b      	ldrh	r3, [r7, #2]
 80139e0:	011b      	lsls	r3, r3, #4
 80139e2:	3308      	adds	r3, #8
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	4413      	add	r3, r2
    }
 80139e8:	4618      	mov	r0, r3
 80139ea:	370c      	adds	r7, #12
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	460b      	mov	r3, r1
 80139fe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013a00:	887b      	ldrh	r3, [r7, #2]
 8013a02:	011b      	lsls	r3, r3, #4
 8013a04:	3308      	adds	r3, #8
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	4413      	add	r3, r2
    }
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr

08013a16 <_GLOBAL__sub_I_touchgfx_init>:
 8013a16:	b580      	push	{r7, lr}
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a1e:	2001      	movs	r0, #1
 8013a20:	f7ff fefc 	bl	801381c <_Z41__static_initialization_and_destruction_0ii>
 8013a24:	bd80      	pop	{r7, pc}

08013a26 <_GLOBAL__sub_D_touchgfx_init>:
 8013a26:	b580      	push	{r7, lr}
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a2e:	2000      	movs	r0, #0
 8013a30:	f7ff fef4 	bl	801381c <_Z41__static_initialization_and_destruction_0ii>
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b082      	sub	sp, #8
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	3320      	adds	r3, #32
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	4798      	blx	r3
    }
 8013a4a:	bf00      	nop
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}

08013a52 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8013a52:	b480      	push	{r7}
 8013a54:	b083      	sub	sp, #12
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8013a60:	4618      	mov	r0, r3
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	b2da      	uxtb	r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8013a84:	bf00      	nop
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	460b      	mov	r3, r1
 8013a9a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013a9c:	78fb      	ldrb	r3, [r7, #3]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d002      	beq.n	8013aa8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013aa2:	78fb      	ldrb	r3, [r7, #3]
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d105      	bne.n	8013ab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	78fa      	ldrb	r2, [r7, #3]
 8013aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e027      	b.n	8013b04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013ab4:	78fb      	ldrb	r3, [r7, #3]
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d123      	bne.n	8013b02 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d014      	beq.n	8013aec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	339c      	adds	r3, #156	; 0x9c
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	4798      	blx	r3
 8013ace:	4603      	mov	r3, r0
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d008      	beq.n	8013aec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013ada:	4b0c      	ldr	r3, [pc, #48]	; (8013b0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	f083 0301 	eor.w	r3, r3, #1
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d001      	beq.n	8013aec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e000      	b.n	8013aee <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013aec:	2300      	movs	r3, #0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d005      	beq.n	8013afe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	78fa      	ldrb	r2, [r7, #3]
 8013af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8013afa:	2301      	movs	r3, #1
 8013afc:	e002      	b.n	8013b04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013afe:	2300      	movs	r3, #0
 8013b00:	e000      	b.n	8013b04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013b02:	2300      	movs	r3, #0
    }
 8013b04:	4618      	mov	r0, r3
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	2003bd06 	.word	0x2003bd06

08013b10 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	683a      	ldr	r2, [r7, #0]
 8013b1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8013b20:	bf00      	nop
 8013b22:	370c      	adds	r7, #12
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
    {
 8013b34:	4a04      	ldr	r2, [pc, #16]	; (8013b48 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	601a      	str	r2, [r3, #0]
    }
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr
 8013b48:	0802cab4 	.word	0x0802cab4

08013b4c <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
    }
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7ff ffe9 	bl	8013b2c <_ZN8touchgfx15VideoControllerD1Ev>
 8013b5a:	2104      	movs	r1, #4
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f014 fe45 	bl	80287ec <_ZdlPvj>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013b7c:	bf00      	nop
 8013b7e:	370c      	adds	r7, #12
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr

08013b88 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	4608      	mov	r0, r1
 8013b92:	4611      	mov	r1, r2
 8013b94:	461a      	mov	r2, r3
 8013b96:	4603      	mov	r3, r0
 8013b98:	72fb      	strb	r3, [r7, #11]
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	813b      	strh	r3, [r7, #8]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	7afa      	ldrb	r2, [r7, #11]
 8013ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	893a      	ldrh	r2, [r7, #8]
 8013bae:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	88fa      	ldrh	r2, [r7, #6]
 8013bb4:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8013bb6:	bf00      	nop
 8013bb8:	3714      	adds	r7, #20
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr
	...

08013bc4 <__NVIC_EnableIRQ>:
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	4603      	mov	r3, r0
 8013bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	db0b      	blt.n	8013bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bd6:	79fb      	ldrb	r3, [r7, #7]
 8013bd8:	f003 021f 	and.w	r2, r3, #31
 8013bdc:	4907      	ldr	r1, [pc, #28]	; (8013bfc <__NVIC_EnableIRQ+0x38>)
 8013bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013be2:	095b      	lsrs	r3, r3, #5
 8013be4:	2001      	movs	r0, #1
 8013be6:	fa00 f202 	lsl.w	r2, r0, r2
 8013bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013bee:	bf00      	nop
 8013bf0:	370c      	adds	r7, #12
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop
 8013bfc:	e000e100 	.word	0xe000e100

08013c00 <__NVIC_DisableIRQ>:
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	db12      	blt.n	8013c38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	f003 021f 	and.w	r2, r3, #31
 8013c18:	490a      	ldr	r1, [pc, #40]	; (8013c44 <__NVIC_DisableIRQ+0x44>)
 8013c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c1e:	095b      	lsrs	r3, r3, #5
 8013c20:	2001      	movs	r0, #1
 8013c22:	fa00 f202 	lsl.w	r2, r0, r2
 8013c26:	3320      	adds	r3, #32
 8013c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013c2c:	f3bf 8f4f 	dsb	sy
}
 8013c30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013c32:	f3bf 8f6f 	isb	sy
}
 8013c36:	bf00      	nop
}
 8013c38:	bf00      	nop
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr
 8013c44:	e000e100 	.word	0xe000e100

08013c48 <__NVIC_SetPriority>:
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	4603      	mov	r3, r0
 8013c50:	6039      	str	r1, [r7, #0]
 8013c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	db0a      	blt.n	8013c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	490c      	ldr	r1, [pc, #48]	; (8013c94 <__NVIC_SetPriority+0x4c>)
 8013c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c66:	0112      	lsls	r2, r2, #4
 8013c68:	b2d2      	uxtb	r2, r2
 8013c6a:	440b      	add	r3, r1
 8013c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013c70:	e00a      	b.n	8013c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	b2da      	uxtb	r2, r3
 8013c76:	4908      	ldr	r1, [pc, #32]	; (8013c98 <__NVIC_SetPriority+0x50>)
 8013c78:	79fb      	ldrb	r3, [r7, #7]
 8013c7a:	f003 030f 	and.w	r3, r3, #15
 8013c7e:	3b04      	subs	r3, #4
 8013c80:	0112      	lsls	r2, r2, #4
 8013c82:	b2d2      	uxtb	r2, r2
 8013c84:	440b      	add	r3, r1
 8013c86:	761a      	strb	r2, [r3, #24]
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	e000e100 	.word	0xe000e100
 8013c98:	e000ed00 	.word	0xe000ed00

08013c9c <SCB_CleanInvalidateDCache>:
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013ca2:	4b21      	ldr	r3, [pc, #132]	; (8013d28 <SCB_CleanInvalidateDCache+0x8c>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013caa:	f3bf 8f4f 	dsb	sy
}
 8013cae:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8013cb0:	4b1d      	ldr	r3, [pc, #116]	; (8013d28 <SCB_CleanInvalidateDCache+0x8c>)
 8013cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cb6:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	0b5b      	lsrs	r3, r3, #13
 8013cbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013cc0:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	08db      	lsrs	r3, r3, #3
 8013cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013cca:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	015a      	lsls	r2, r3, #5
 8013cd0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013cd4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013cda:	4913      	ldr	r1, [pc, #76]	; (8013d28 <SCB_CleanInvalidateDCache+0x8c>)
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	1e5a      	subs	r2, r3, #1
 8013ce6:	60ba      	str	r2, [r7, #8]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	bf14      	ite	ne
 8013cec:	2301      	movne	r3, #1
 8013cee:	2300      	moveq	r3, #0
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d000      	beq.n	8013cf8 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8013cf6:	e7e9      	b.n	8013ccc <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	1e5a      	subs	r2, r3, #1
 8013cfc:	60fa      	str	r2, [r7, #12]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	bf14      	ite	ne
 8013d02:	2301      	movne	r3, #1
 8013d04:	2300      	moveq	r3, #0
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d000      	beq.n	8013d0e <SCB_CleanInvalidateDCache+0x72>
    do {
 8013d0c:	e7d9      	b.n	8013cc2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013d0e:	f3bf 8f4f 	dsb	sy
}
 8013d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013d14:	f3bf 8f6f 	isb	sy
}
 8013d18:	bf00      	nop
}
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	e000ed00 	.word	0xe000ed00

08013d2c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013d2c:	b5b0      	push	{r4, r5, r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	4618      	mov	r0, r3
 8013d38:	f001 fb3f 	bl	80153ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013d3c:	687d      	ldr	r5, [r7, #4]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	3364      	adds	r3, #100	; 0x64
 8013d44:	681c      	ldr	r4, [r3, #0]
 8013d46:	f005 ff33 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	4628      	mov	r0, r5
 8013d50:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4910      	ldr	r1, [pc, #64]	; (8013d98 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff feda 	bl	8013b10 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2101      	movs	r1, #1
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7ff fe95 	bl	8013a90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3388      	adds	r3, #136	; 0x88
 8013d6e:	681c      	ldr	r4, [r3, #0]
 8013d70:	2300      	movs	r3, #0
 8013d72:	2200      	movs	r2, #0
 8013d74:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8013d78:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	4907      	ldr	r1, [pc, #28]	; (8013d9c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 8013d7e:	4808      	ldr	r0, [pc, #32]	; (8013da0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8013d80:	f000 f9ee 	bl	8014160 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8013d84:	2200      	movs	r2, #0
 8013d86:	4907      	ldr	r1, [pc, #28]	; (8013da4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8013d88:	4805      	ldr	r0, [pc, #20]	; (8013da0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8013d8a:	f000 fa09 	bl	80141a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>
}
 8013d8e:	bf00      	nop
 8013d90:	3708      	adds	r7, #8
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bdb0      	pop	{r4, r5, r7, pc}
 8013d96:	bf00      	nop
 8013d98:	08012785 	.word	0x08012785
 8013d9c:	20037c68 	.word	0x20037c68
 8013da0:	20037cac 	.word	0x20037cac
 8013da4:	20000114 	.word	0x20000114

08013da8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013db0:	2109      	movs	r1, #9
 8013db2:	205a      	movs	r0, #90	; 0x5a
 8013db4:	f7ff ff48 	bl	8013c48 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013db8:	2109      	movs	r1, #9
 8013dba:	2058      	movs	r0, #88	; 0x58
 8013dbc:	f7ff ff44 	bl	8013c48 <__NVIC_SetPriority>
}
 8013dc0:	bf00      	nop
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013dd0:	205a      	movs	r0, #90	; 0x5a
 8013dd2:	f7ff fef7 	bl	8013bc4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013dd6:	2058      	movs	r0, #88	; 0x58
 8013dd8:	f7ff fef4 	bl	8013bc4 <__NVIC_EnableIRQ>
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013dec:	205a      	movs	r0, #90	; 0x5a
 8013dee:	f7ff ff07 	bl	8013c00 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013df2:	2058      	movs	r0, #88	; 0x58
 8013df4:	f7ff ff04 	bl	8013c00 <__NVIC_DisableIRQ>
}
 8013df8:	bf00      	nop
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013e08:	4b11      	ldr	r3, [pc, #68]	; (8013e50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	3b01      	subs	r3, #1
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	4b0e      	ldr	r3, [pc, #56]	; (8013e54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013e1a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013e1c:	4b0c      	ldr	r3, [pc, #48]	; (8013e50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	3b01      	subs	r3, #1
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	4b0a      	ldr	r3, [pc, #40]	; (8013e58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013e2e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013e30:	4b08      	ldr	r3, [pc, #32]	; (8013e54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013e32:	881a      	ldrh	r2, [r3, #0]
 8013e34:	4b06      	ldr	r3, [pc, #24]	; (8013e50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013e38:	4b05      	ldr	r3, [pc, #20]	; (8013e50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e3c:	4a04      	ldr	r2, [pc, #16]	; (8013e50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013e3e:	f043 0301 	orr.w	r3, r3, #1
 8013e42:	6353      	str	r3, [r2, #52]	; 0x34
}
 8013e44:	bf00      	nop
 8013e46:	370c      	adds	r7, #12
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4e:	4770      	bx	lr
 8013e50:	40016800 	.word	0x40016800
 8013e54:	20037cf6 	.word	0x20037cf6
 8013e58:	20037cf8 	.word	0x20037cf8

08013e5c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f001 fa8e 	bl	8015388 <_ZN8touchgfx3HAL10beginFrameEv>
 8013e6c:	4603      	mov	r3, r0
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
	...

08013e78 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d002      	beq.n	8013e90 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8013e8a:	4b07      	ldr	r3, [pc, #28]	; (8013ea8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	4618      	mov	r0, r3
 8013e94:	f001 fa84 	bl	80153a0 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8013e98:	4804      	ldr	r0, [pc, #16]	; (8013eac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 8013e9a:	f000 f997 	bl	80141cc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>
}
 8013e9e:	bf00      	nop
 8013ea0:	3708      	adds	r7, #8
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	20037cf4 	.word	0x20037cf4
 8013eac:	20037cac 	.word	0x20037cac

08013eb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013eb8:	4b03      	ldr	r3, [pc, #12]	; (8013ec8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	370c      	adds	r7, #12
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr
 8013ec8:	40016884 	.word	0x40016884

08013ecc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013ed6:	4a06      	ldr	r2, [pc, #24]	; (8013ef0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013edc:	4b05      	ldr	r3, [pc, #20]	; (8013ef4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013ede:	2201      	movs	r2, #1
 8013ee0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013ee2:	bf00      	nop
 8013ee4:	370c      	adds	r7, #12
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr
 8013eee:	bf00      	nop
 8013ef0:	40016884 	.word	0x40016884
 8013ef4:	40016800 	.word	0x40016800

08013ef8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6839      	ldr	r1, [r7, #0]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f001 fa07 	bl	801531a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013f0c:	4b08      	ldr	r3, [pc, #32]	; (8013f30 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8013f0e:	695b      	ldr	r3, [r3, #20]
 8013f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	bf14      	ite	ne
 8013f18:	2301      	movne	r3, #1
 8013f1a:	2300      	moveq	r3, #0
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d001      	beq.n	8013f26 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8013f22:	f7ff febb 	bl	8013c9c <SCB_CleanInvalidateDCache>
    }
}
 8013f26:	bf00      	nop
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	e000ed00 	.word	0xe000ed00

08013f34 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	687a      	ldr	r2, [r7, #4]
 8013f48:	68b9      	ldr	r1, [r7, #8]
 8013f4a:	f001 fb50 	bl	80155ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013f4e:	4603      	mov	r3, r0
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3710      	adds	r7, #16
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b085      	sub	sp, #20
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013f60:	4b0d      	ldr	r3, [pc, #52]	; (8013f98 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f64:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013f66:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	3301      	adds	r3, #1
 8013f74:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8013f76:	89fa      	ldrh	r2, [r7, #14]
 8013f78:	89bb      	ldrh	r3, [r7, #12]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d304      	bcc.n	8013f88 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8013f7e:	89fa      	ldrh	r2, [r7, #14]
 8013f80:	89bb      	ldrh	r3, [r7, #12]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	e000      	b.n	8013f8a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8013f88:	2300      	movs	r3, #0
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3714      	adds	r7, #20
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	40016800 	.word	0x40016800

08013f9c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013fa4:	4b08      	ldr	r3, [pc, #32]	; (8013fc8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8013fa6:	695b      	ldr	r3, [r3, #20]
 8013fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	bf14      	ite	ne
 8013fb0:	2301      	movne	r3, #1
 8013fb2:	2300      	moveq	r3, #0
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8013fba:	f7ff fe6f 	bl	8013c9c <SCB_CleanInvalidateDCache>
    }
}
 8013fbe:	bf00      	nop
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	e000ed00 	.word	0xe000ed00

08013fcc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013fd4:	4b08      	ldr	r3, [pc, #32]	; (8013ff8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8013fd6:	695b      	ldr	r3, [r3, #20]
 8013fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	bf14      	ite	ne
 8013fe0:	2301      	movne	r3, #1
 8013fe2:	2300      	moveq	r3, #0
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8013fea:	f7ff fe57 	bl	8013c9c <SCB_CleanInvalidateDCache>
    }
}
 8013fee:	bf00      	nop
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	e000ed00 	.word	0xe000ed00

08013ffc <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8014004:	f7f9 fb82 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	bf0c      	ite	eq
 801400e:	2301      	moveq	r3, #1
 8014010:	2300      	movne	r3, #0
 8014012:	b2db      	uxtb	r3, r3
 8014014:	2b00      	cmp	r3, #0
 8014016:	d132      	bne.n	801407e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8014018:	4b1b      	ldr	r3, [pc, #108]	; (8014088 <HAL_LTDC_LineEventCallback+0x8c>)
 801401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801401c:	4a1b      	ldr	r2, [pc, #108]	; (801408c <HAL_LTDC_LineEventCallback+0x90>)
 801401e:	8812      	ldrh	r2, [r2, #0]
 8014020:	4293      	cmp	r3, r2
 8014022:	bf0c      	ite	eq
 8014024:	2301      	moveq	r3, #1
 8014026:	2300      	movne	r3, #0
 8014028:	b2db      	uxtb	r3, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	d017      	beq.n	801405e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801402e:	4b18      	ldr	r3, [pc, #96]	; (8014090 <HAL_LTDC_LineEventCallback+0x94>)
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	4619      	mov	r1, r3
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7f1 fbb3 	bl	80057a0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801403a:	f7f9 fb67 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 801403e:	4603      	mov	r3, r0
 8014040:	4618      	mov	r0, r3
 8014042:	f7ff fd13 	bl	8013a6c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014046:	f7fe fb75 	bl	8012734 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801404a:	f7f9 fb5f 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 801404e:	4603      	mov	r3, r0
 8014050:	4618      	mov	r0, r3
 8014052:	f001 fef7 	bl	8015e44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014056:	2000      	movs	r0, #0
 8014058:	f7fd f88a 	bl	8011170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801405c:	e010      	b.n	8014080 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801405e:	4b0b      	ldr	r3, [pc, #44]	; (801408c <HAL_LTDC_LineEventCallback+0x90>)
 8014060:	881b      	ldrh	r3, [r3, #0]
 8014062:	4619      	mov	r1, r3
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f7f1 fb9b 	bl	80057a0 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801406a:	f7f9 fb4f 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 801406e:	4603      	mov	r3, r0
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff fce0 	bl	8013a36 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014076:	2000      	movs	r0, #0
 8014078:	f7fd f896 	bl	80111a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801407c:	e000      	b.n	8014080 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801407e:	bf00      	nop
        }
    }
 8014080:	3708      	adds	r7, #8
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	40016800 	.word	0x40016800
 801408c:	20037cf6 	.word	0x20037cf6
 8014090:	20037cf8 	.word	0x20037cf8

08014094 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	4a04      	ldr	r2, [pc, #16]	; (80140b0 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	601a      	str	r2, [r3, #0]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	4618      	mov	r0, r3
 80140a6:	370c      	adds	r7, #12
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr
 80140b0:	0802cab4 	.word	0x0802cab4

080140b4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80140b4:	b5b0      	push	{r4, r5, r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	f7ff ffe8 	bl	8014094 <_ZN8touchgfx15VideoControllerC1Ev>
 80140c4:	4a25      	ldr	r2, [pc, #148]	; (801415c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0xa8>)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	601a      	str	r2, [r3, #0]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	330c      	adds	r3, #12
 80140ce:	2400      	movs	r4, #0
 80140d0:	461d      	mov	r5, r3
 80140d2:	2c00      	cmp	r4, #0
 80140d4:	db05      	blt.n	80140e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x2e>
 80140d6:	4628      	mov	r0, r5
 80140d8:	f000 f8bd 	bl	8014256 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 80140dc:	3524      	adds	r5, #36	; 0x24
 80140de:	3c01      	subs	r4, #1
 80140e0:	e7f7      	b.n	80140d2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x1e>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2200      	movs	r2, #0
 80140e6:	631a      	str	r2, [r3, #48]	; 0x30
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	635a      	str	r2, [r3, #52]	; 0x34
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	639a      	str	r2, [r3, #56]	; 0x38
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2201      	movs	r2, #1
 8014100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2200      	movs	r2, #0
 8014108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	641a      	str	r2, [r3, #64]	; 0x40
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2200      	movs	r2, #0
 8014116:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3308      	adds	r3, #8
 801411c:	2204      	movs	r2, #4
 801411e:	2100      	movs	r1, #0
 8014120:	4618      	mov	r0, r3
 8014122:	f014 fc1d 	bl	8028960 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	3304      	adds	r3, #4
 801412a:	2204      	movs	r2, #4
 801412c:	2100      	movs	r1, #0
 801412e:	4618      	mov	r0, r3
 8014130:	f014 fc16 	bl	8028960 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8014134:	2200      	movs	r2, #0
 8014136:	2100      	movs	r1, #0
 8014138:	2001      	movs	r0, #1
 801413a:	f7f5 f8b9 	bl	80092b0 <osSemaphoreNew>
 801413e:	4602      	mov	r2, r0
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8014144:	2000      	movs	r0, #0
 8014146:	f7f4 ff6b 	bl	8009020 <osMutexNew>
 801414a:	4602      	mov	r2, r0
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4618      	mov	r0, r3
 8014154:	3708      	adds	r7, #8
 8014156:	46bd      	mov	sp, r7
 8014158:	bdb0      	pop	{r4, r5, r7, pc}
 801415a:	bf00      	nop
 801415c:	0802ca74 	.word	0x0802ca74

08014160 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d006      	beq.n	8014180 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x20>
 8014172:	4b08      	ldr	r3, [pc, #32]	; (8014194 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x34>)
 8014174:	4a08      	ldr	r2, [pc, #32]	; (8014198 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x38>)
 8014176:	f240 1103 	movw	r1, #259	; 0x103
 801417a:	4808      	ldr	r0, [pc, #32]	; (801419c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801417c:	f014 fb64 	bl	8028848 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	4413      	add	r3, r2
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	605a      	str	r2, [r3, #4]
    }
 801418c:	bf00      	nop
 801418e:	3710      	adds	r7, #16
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	0802ac44 	.word	0x0802ac44
 8014198:	0802ac58 	.word	0x0802ac58
 801419c:	0802adb8 	.word	0x0802adb8

080141a0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 80141a0:	b480      	push	{r7}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	68ba      	ldr	r2, [r7, #8]
 80141b0:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80141c0:	bf00      	nop
 80141c2:	3714      	adds	r7, #20
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>:

    void endFrame()
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80141d4:	2300      	movs	r3, #0
 80141d6:	60fb      	str	r3, [r7, #12]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d120      	bne.n	8014220 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	4613      	mov	r3, r2
 80141e2:	00db      	lsls	r3, r3, #3
 80141e4:	4413      	add	r3, r2
 80141e6:	009b      	lsls	r3, r3, #2
 80141e8:	3308      	adds	r3, #8
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	4413      	add	r3, r2
 80141ee:	3304      	adds	r3, #4
 80141f0:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	7f5b      	ldrb	r3, [r3, #29]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d103      	bne.n	8014202 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x36>
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	7f9b      	ldrb	r3, [r3, #30]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00a      	beq.n	8014218 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8014202:	68b9      	ldr	r1, [r7, #8]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 f85e 	bl	80142c6 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d003      	beq.n	8014218 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	2201      	movs	r2, #1
 8014214:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	3301      	adds	r3, #1
 801421c:	60fb      	str	r3, [r7, #12]
 801421e:	e7db      	b.n	80141d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2201      	movs	r2, #1
 8014224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801422c:	4618      	mov	r0, r3
 801422e:	f7f5 f941 	bl	80094b4 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014238:	2b00      	cmp	r3, #0
 801423a:	d008      	beq.n	801424e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014240:	4618      	mov	r0, r3
 8014242:	f7f4 ffe5 	bl	8009210 <osMutexRelease>
            uiHasMutex = false;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 801424e:	bf00      	nop
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}

08014256 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8014256:	b480      	push	{r7}
 8014258:	b083      	sub	sp, #12
 801425a:	af00      	add	r7, sp, #0
 801425c:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	601a      	str	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	605a      	str	r2, [r3, #4]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	609a      	str	r2, [r3, #8]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	60da      	str	r2, [r3, #12]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	611a      	str	r2, [r3, #16]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2200      	movs	r2, #0
 8014280:	615a      	str	r2, [r3, #20]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2200      	movs	r2, #0
 8014286:	619a      	str	r2, [r3, #24]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	771a      	strb	r2, [r3, #28]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	775a      	strb	r2, [r3, #29]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	779a      	strb	r2, [r3, #30]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2200      	movs	r2, #0
 801429e:	77da      	strb	r2, [r3, #31]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2200      	movs	r2, #0
 80142a4:	f883 2020 	strb.w	r2, [r3, #32]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2201      	movs	r2, #1
 80142ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	4618      	mov	r0, r3
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 80142c6:	b480      	push	{r7}
 80142c8:	b083      	sub	sp, #12
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	683a      	ldr	r2, [r7, #0]
 80142d6:	68d2      	ldr	r2, [r2, #12]
 80142d8:	fb03 f202 	mul.w	r2, r3, r2
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	691b      	ldr	r3, [r3, #16]
 80142e0:	6839      	ldr	r1, [r7, #0]
 80142e2:	6849      	ldr	r1, [r1, #4]
 80142e4:	fb01 f303 	mul.w	r3, r1, r3
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d322      	bcc.n	8014332 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d01b      	beq.n	801432e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	689b      	ldr	r3, [r3, #8]
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	68d2      	ldr	r2, [r2, #12]
 80142fe:	fb03 f202 	mul.w	r2, r3, r2
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	691b      	ldr	r3, [r3, #16]
 8014306:	6839      	ldr	r1, [r7, #0]
 8014308:	6849      	ldr	r1, [r1, #4]
 801430a:	fb01 f303 	mul.w	r3, r1, r3
 801430e:	1ad2      	subs	r2, r2, r3
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	fbb2 f2f3 	udiv	r2, r2, r3
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	699b      	ldr	r3, [r3, #24]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d004      	beq.n	801432e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	699b      	ldr	r3, [r3, #24]
 8014328:	1e5a      	subs	r2, r3, #1
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 801432e:	2301      	movs	r3, #1
 8014330:	e000      	b.n	8014334 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8014332:	2300      	movs	r3, #0
    }
 8014334:	4618      	mov	r0, r3
 8014336:	370c      	adds	r7, #12
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr

08014340 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	4a05      	ldr	r2, [pc, #20]	; (8014360 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev+0x20>)
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	601a      	str	r2, [r3, #0]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4618      	mov	r0, r3
 8014352:	f7ff fbeb 	bl	8013b2c <_ZN8touchgfx15VideoControllerD1Ev>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	4618      	mov	r0, r3
 801435a:	3708      	adds	r7, #8
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	0802ca74 	.word	0x0802ca74

08014364 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED0Ev>:
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7ff ffe7 	bl	8014340 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
 8014372:	2148      	movs	r1, #72	; 0x48
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f014 fa39 	bl	80287ec <_ZdlPvj>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4618      	mov	r0, r3
 801437e:	3708      	adds	r7, #8
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <_Z41__static_initialization_and_destruction_0ii>:
}
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d10a      	bne.n	80143aa <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801439a:	4293      	cmp	r3, r2
 801439c:	d105      	bne.n	80143aa <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 801439e:	480c      	ldr	r0, [pc, #48]	; (80143d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80143a0:	f7fd fa08 	bl	80117b4 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 0, 0, 0*4U, Bitmap::ARGB8888> videoController;
 80143a4:	480b      	ldr	r0, [pc, #44]	; (80143d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80143a6:	f7ff fe85 	bl	80140b4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10a      	bne.n	80143c6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b6:	4293      	cmp	r3, r2
 80143b8:	d105      	bne.n	80143c6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80143ba:	4806      	ldr	r0, [pc, #24]	; (80143d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80143bc:	f7ff ffc0 	bl	8014340 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 80143c0:	4803      	ldr	r0, [pc, #12]	; (80143d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80143c2:	f7fe f92f 	bl	8012624 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 80143c6:	bf00      	nop
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	20037c68 	.word	0x20037c68
 80143d4:	20037cac 	.word	0x20037cac

080143d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80143e2:	2300      	movs	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 fa7a 	bl	80148e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>
 80143ec:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80143ee:	6879      	ldr	r1, [r7, #4]
 80143f0:	68ba      	ldr	r2, [r7, #8]
 80143f2:	4613      	mov	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	4413      	add	r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	440b      	add	r3, r1
 80143fc:	3328      	adds	r3, #40	; 0x28
 80143fe:	2201      	movs	r2, #1
 8014400:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801440e:	440b      	add	r3, r1
 8014410:	429a      	cmp	r2, r3
 8014412:	d905      	bls.n	8014420 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8014414:	4b0f      	ldr	r3, [pc, #60]	; (8014454 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8014416:	4a10      	ldr	r2, [pc, #64]	; (8014458 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
 8014418:	2152      	movs	r1, #82	; 0x52
 801441a:	4810      	ldr	r0, [pc, #64]	; (801445c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 801441c:	f014 fa14 	bl	8028848 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	68ba      	ldr	r2, [r7, #8]
 8014428:	3202      	adds	r2, #2
 801442a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	639a      	str	r2, [r3, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8014436:	2300      	movs	r3, #0
 8014438:	2200      	movs	r2, #0
 801443a:	2102      	movs	r1, #2
 801443c:	6838      	ldr	r0, [r7, #0]
 801443e:	f7ff fba3 	bl	8013b88 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8014442:	2100      	movs	r1, #0
 8014444:	6838      	ldr	r0, [r7, #0]
 8014446:	f7ff fb91 	bl	8013b6c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 801444a:	68bb      	ldr	r3, [r7, #8]
    }
 801444c:	4618      	mov	r0, r3
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	0802adf8 	.word	0x0802adf8
 8014458:	0802ae34 	.word	0x0802ae34
 801445c:	0802adb8 	.word	0x0802adb8

08014460 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801446e:	f04f 31ff 	mov.w	r1, #4294967295
 8014472:	4618      	mov	r0, r3
 8014474:	f7f4 fe6e 	bl	8009154 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801447c:	4618      	mov	r0, r3
 801447e:	f7f4 fec7 	bl	8009210 <osMutexRelease>
        streams[handle].isActive = false;
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	683a      	ldr	r2, [r7, #0]
 8014486:	4613      	mov	r3, r2
 8014488:	00db      	lsls	r3, r3, #3
 801448a:	4413      	add	r3, r2
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	440b      	add	r3, r1
 8014490:	3328      	adds	r3, #40	; 0x28
 8014492:	2200      	movs	r2, #0
 8014494:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8014496:	2300      	movs	r3, #0
 8014498:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 801449a:	2300      	movs	r3, #0
 801449c:	60bb      	str	r3, [r7, #8]
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d114      	bne.n	80144ce <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 80144a4:	6879      	ldr	r1, [r7, #4]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	4613      	mov	r3, r2
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	4413      	add	r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	440b      	add	r3, r1
 80144b2:	3328      	adds	r3, #40	; 0x28
 80144b4:	781a      	ldrb	r2, [r3, #0]
 80144b6:	7bfb      	ldrb	r3, [r7, #15]
 80144b8:	4313      	orrs	r3, r2
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bf14      	ite	ne
 80144c0:	2301      	movne	r3, #1
 80144c2:	2300      	moveq	r3, #0
 80144c4:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	3301      	adds	r3, #1
 80144ca:	60bb      	str	r3, [r7, #8]
 80144cc:	e7e7      	b.n	801449e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 80144ce:	7bfb      	ldrb	r3, [r7, #15]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d103      	bne.n	80144dc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80144dc:	bf00      	nop
 80144de:	3710      	adds	r7, #16
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b086      	sub	sp, #24
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	60b9      	str	r1, [r7, #8]
 80144ee:	607a      	str	r2, [r7, #4]
 80144f0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d005      	beq.n	8014504 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x20>
 80144f8:	4b0f      	ldr	r3, [pc, #60]	; (8014538 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x54>)
 80144fa:	4a10      	ldr	r2, [pc, #64]	; (801453c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x58>)
 80144fc:	2182      	movs	r1, #130	; 0x82
 80144fe:	4810      	ldr	r0, [pc, #64]	; (8014540 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x5c>)
 8014500:	f014 f9a2 	bl	8028848 <__assert_func>
        Stream& stream = streams[handle];
 8014504:	68ba      	ldr	r2, [r7, #8]
 8014506:	4613      	mov	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	4413      	add	r3, r2
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	3308      	adds	r3, #8
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	4413      	add	r3, r2
 8014514:	3304      	adds	r3, #4
 8014516:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	2200      	movs	r2, #0
 801451c:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	2200      	movs	r2, #0
 8014522:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	683a      	ldr	r2, [r7, #0]
 801452e:	60da      	str	r2, [r3, #12]
    }
 8014530:	bf00      	nop
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	0802afd4 	.word	0x0802afd4
 801453c:	0802afe8 	.word	0x0802afe8
 8014540:	0802adb8 	.word	0x0802adb8

08014544 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d005      	beq.n	8014562 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8014556:	4b29      	ldr	r3, [pc, #164]	; (80145fc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8014558:	4a29      	ldr	r2, [pc, #164]	; (8014600 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 801455a:	21d0      	movs	r1, #208	; 0xd0
 801455c:	4829      	ldr	r0, [pc, #164]	; (8014604 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 801455e:	f014 f973 	bl	8028848 <__assert_func>
        Stream& stream = streams[handle];
 8014562:	68ba      	ldr	r2, [r7, #8]
 8014564:	4613      	mov	r3, r2
 8014566:	00db      	lsls	r3, r3, #3
 8014568:	4413      	add	r3, r2
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	3308      	adds	r3, #8
 801456e:	68fa      	ldr	r2, [r7, #12]
 8014570:	4413      	add	r3, r2
 8014572:	3304      	adds	r3, #4
 8014574:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	7f5b      	ldrb	r3, [r3, #29]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00b      	beq.n	8014596 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 801457e:	f7f9 f8c5 	bl	800d70c <_ZN8touchgfx3HAL11getInstanceEv>
 8014582:	4603      	mov	r3, r0
 8014584:	4618      	mov	r0, r3
 8014586:	f7ff fa64 	bl	8013a52 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 801458a:	4602      	mov	r2, r0
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	689b      	ldr	r3, [r3, #8]
 8014590:	441a      	add	r2, r3
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	7fdb      	ldrb	r3, [r3, #31]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d029      	beq.n	80145f2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	3202      	adds	r2, #2
 80145a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145a8:	4619      	mov	r1, r3
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f7ff fade 	bl	8013b6c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 80145b0:	687a      	ldr	r2, [r7, #4]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	3314      	adds	r3, #20
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4610      	mov	r0, r2
 80145bc:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2200      	movs	r2, #0
 80145c2:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145ca:	f083 0301 	eor.w	r3, r3, #1
 80145ce:	b2db      	uxtb	r3, r3
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d00a      	beq.n	80145ea <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80145da:	f083 0301 	eor.w	r3, r3, #1
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d002      	beq.n	80145ea <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	2200      	movs	r2, #0
 80145e8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145f0:	e000      	b.n	80145f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 80145f2:	2301      	movs	r3, #1
    }
 80145f4:	4618      	mov	r0, r3
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	0802afd4 	.word	0x0802afd4
 8014600:	0802b1a0 	.word	0x0802b1a0
 8014604:	0802adb8 	.word	0x0802adb8

08014608 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
 8014614:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801461c:	2b00      	cmp	r3, #0
 801461e:	d00e      	beq.n	801463e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014624:	f04f 31ff 	mov.w	r1, #4294967295
 8014628:	4618      	mov	r0, r3
 801462a:	f7f4 fd93 	bl	8009154 <osMutexAcquire>
            firstDrawThisFrame = false;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	2200      	movs	r2, #0
 8014632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2201      	movs	r2, #1
 801463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 801463e:	bf00      	nop
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
	...

08014648 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8014648:	b580      	push	{r7, lr}
 801464a:	b086      	sub	sp, #24
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d005      	beq.n	8014668 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x20>
 801465c:	4b13      	ldr	r3, [pc, #76]	; (80146ac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x64>)
 801465e:	4a14      	ldr	r2, [pc, #80]	; (80146b0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x68>)
 8014660:	2190      	movs	r1, #144	; 0x90
 8014662:	4814      	ldr	r0, [pc, #80]	; (80146b4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x6c>)
 8014664:	f014 f8f0 	bl	8028848 <__assert_func>
        Stream& stream = streams[handle];
 8014668:	68ba      	ldr	r2, [r7, #8]
 801466a:	4613      	mov	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	4413      	add	r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	3308      	adds	r3, #8
 8014674:	68fa      	ldr	r2, [r7, #12]
 8014676:	4413      	add	r3, r2
 8014678:	3304      	adds	r3, #4
 801467a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	2200      	movs	r2, #0
 8014680:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	6858      	ldr	r0, [r3, #4]
 801468c:	68fa      	ldr	r2, [r7, #12]
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4413      	add	r3, r2
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	3308      	adds	r3, #8
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	683a      	ldr	r2, [r7, #0]
 801469e:	6879      	ldr	r1, [r7, #4]
 80146a0:	4798      	blx	r3
    }
 80146a2:	bf00      	nop
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	0802afd4 	.word	0x0802afd4
 80146b0:	0802b33c 	.word	0x0802b33c
 80146b4:	0802adb8 	.word	0x0802adb8

080146b8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	6858      	ldr	r0, [r3, #4]
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	4413      	add	r3, r2
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	330c      	adds	r3, #12
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6879      	ldr	r1, [r7, #4]
 80146e0:	4798      	blx	r3
    }
 80146e2:	bf00      	nop
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
	...

080146ec <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b086      	sub	sp, #24
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	603b      	str	r3, [r7, #0]
 80146f8:	4613      	mov	r3, r2
 80146fa:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d005      	beq.n	801470e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8014702:	4b3a      	ldr	r3, [pc, #232]	; (80147ec <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8014704:	4a3a      	ldr	r2, [pc, #232]	; (80147f0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8014706:	21a2      	movs	r1, #162	; 0xa2
 8014708:	483a      	ldr	r0, [pc, #232]	; (80147f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 801470a:	f014 f89d 	bl	8028848 <__assert_func>
        Stream& stream = streams[handle];
 801470e:	68ba      	ldr	r2, [r7, #8]
 8014710:	4613      	mov	r3, r2
 8014712:	00db      	lsls	r3, r3, #3
 8014714:	4413      	add	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	3308      	adds	r3, #8
 801471a:	68fa      	ldr	r2, [r7, #12]
 801471c:	4413      	add	r3, r2
 801471e:	3304      	adds	r3, #4
 8014720:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8014722:	79fb      	ldrb	r3, [r7, #7]
 8014724:	2b05      	cmp	r3, #5
 8014726:	d85c      	bhi.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8014728:	a201      	add	r2, pc, #4	; (adr r2, 8014730 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 801472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801472e:	bf00      	nop
 8014730:	08014749 	.word	0x08014749
 8014734:	08014789 	.word	0x08014789
 8014738:	08014791 	.word	0x08014791
 801473c:	080147a5 	.word	0x080147a5
 8014740:	080147bf 	.word	0x080147bf
 8014744:	080147cd 	.word	0x080147cd
            if (mjpegDecoders[handle]->hasVideo())
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	4413      	add	r3, r2
 8014750:	6859      	ldr	r1, [r3, #4]
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	3310      	adds	r3, #16
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	4608      	mov	r0, r1
 8014764:	4798      	blx	r3
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d039      	beq.n	80147e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	2201      	movs	r2, #1
 8014770:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	2201      	movs	r2, #1
 8014776:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	2200      	movs	r2, #0
 801477e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	2200      	movs	r2, #0
 8014784:	609a      	str	r2, [r3, #8]
            break;
 8014786:	e02b      	b.n	80147e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	2200      	movs	r2, #0
 801478c:	775a      	strb	r2, [r3, #29]
            break;
 801478e:	e028      	b.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2200      	movs	r2, #0
 801479a:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	2200      	movs	r2, #0
 80147a0:	609a      	str	r2, [r3, #8]
            break;
 80147a2:	e01e      	b.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	683a      	ldr	r2, [r7, #0]
 80147a8:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2201      	movs	r2, #1
 80147ae:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	2200      	movs	r2, #0
 80147b4:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	2200      	movs	r2, #0
 80147ba:	609a      	str	r2, [r3, #8]
            break;
 80147bc:	e011      	b.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2200      	movs	r2, #0
 80147c2:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	2201      	movs	r2, #1
 80147c8:	615a      	str	r2, [r3, #20]
            break;
 80147ca:	e00a      	b.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	bf14      	ite	ne
 80147d2:	2301      	movne	r3, #1
 80147d4:	2300      	moveq	r3, #0
 80147d6:	b2da      	uxtb	r2, r3
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 80147de:	e000      	b.n	80147e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 80147e0:	bf00      	nop
    }
 80147e2:	bf00      	nop
 80147e4:	3718      	adds	r7, #24
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	0802afd4 	.word	0x0802afd4
 80147f0:	0802b514 	.word	0x0802b514
 80147f4:	0802adb8 	.word	0x0802adb8

080147f8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d005      	beq.n	8014814 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x1c>
 8014808:	4b0a      	ldr	r3, [pc, #40]	; (8014834 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x3c>)
 801480a:	4a0b      	ldr	r2, [pc, #44]	; (8014838 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x40>)
 801480c:	2179      	movs	r1, #121	; 0x79
 801480e:	480b      	ldr	r0, [pc, #44]	; (801483c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x44>)
 8014810:	f014 f81a 	bl	8028848 <__assert_func>
        const Stream& stream = streams[handle];
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	4613      	mov	r3, r2
 8014818:	00db      	lsls	r3, r3, #3
 801481a:	4413      	add	r3, r2
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	3308      	adds	r3, #8
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	4413      	add	r3, r2
 8014824:	3304      	adds	r3, #4
 8014826:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
    }
 801482c:	4618      	mov	r0, r3
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}
 8014834:	0802afd4 	.word	0x0802afd4
 8014838:	0802b6e4 	.word	0x0802b6e4
 801483c:	0802adb8 	.word	0x0802adb8

08014840 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d006      	beq.n	8014860 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8014852:	4b0d      	ldr	r3, [pc, #52]	; (8014888 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8014854:	4a0d      	ldr	r2, [pc, #52]	; (801488c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8014856:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801485a:	480d      	ldr	r0, [pc, #52]	; (8014890 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 801485c:	f013 fff4 	bl	8028848 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	4413      	add	r3, r2
 8014868:	6858      	ldr	r0, [r3, #4]
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	4413      	add	r3, r2
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	3330      	adds	r3, #48	; 0x30
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	6879      	ldr	r1, [r7, #4]
 801487c:	4798      	blx	r3
    }
 801487e:	bf00      	nop
 8014880:	3710      	adds	r7, #16
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	0802afd4 	.word	0x0802afd4
 801488c:	0802b894 	.word	0x0802b894
 8014890:	0802adb8 	.word	0x0802adb8

08014894 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d006      	beq.n	80148b2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x1e>
 80148a4:	4b0b      	ldr	r3, [pc, #44]	; (80148d4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x40>)
 80148a6:	4a0c      	ldr	r2, [pc, #48]	; (80148d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x44>)
 80148a8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80148ac:	480b      	ldr	r0, [pc, #44]	; (80148dc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x48>)
 80148ae:	f013 ffcb 	bl	8028848 <__assert_func>
        Stream& stream = streams[handle];
 80148b2:	683a      	ldr	r2, [r7, #0]
 80148b4:	4613      	mov	r3, r2
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	4413      	add	r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	3308      	adds	r3, #8
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	4413      	add	r3, r2
 80148c2:	3304      	adds	r3, #4
 80148c4:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	7f5b      	ldrb	r3, [r3, #29]
    }
 80148ca:	4618      	mov	r0, r3
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	0802afd4 	.word	0x0802afd4
 80148d8:	0802ba40 	.word	0x0802ba40
 80148dc:	0802adb8 	.word	0x0802adb8

080148e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80148e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148e2:	b08d      	sub	sp, #52	; 0x34
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80148e8:	2300      	movs	r3, #0
 80148ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d135      	bne.n	801495e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80148f2:	6879      	ldr	r1, [r7, #4]
 80148f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148f6:	4613      	mov	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	4413      	add	r3, r2
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	440b      	add	r3, r1
 8014900:	3328      	adds	r3, #40	; 0x28
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d126      	bne.n	8014956 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8014908:	f107 0308 	add.w	r3, r7, #8
 801490c:	4618      	mov	r0, r3
 801490e:	f7ff fca2 	bl	8014256 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 8014912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014914:	4613      	mov	r3, r2
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	4413      	add	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	3308      	adds	r3, #8
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	4413      	add	r3, r2
 8014922:	3304      	adds	r3, #4
 8014924:	f107 0408 	add.w	r4, r7, #8
 8014928:	469c      	mov	ip, r3
 801492a:	f104 0e20 	add.w	lr, r4, #32
 801492e:	4665      	mov	r5, ip
 8014930:	4626      	mov	r6, r4
 8014932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014934:	6028      	str	r0, [r5, #0]
 8014936:	6069      	str	r1, [r5, #4]
 8014938:	60aa      	str	r2, [r5, #8]
 801493a:	60eb      	str	r3, [r5, #12]
 801493c:	3410      	adds	r4, #16
 801493e:	f10c 0c10 	add.w	ip, ip, #16
 8014942:	4574      	cmp	r4, lr
 8014944:	d1f3      	bne.n	801492e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x4e>
 8014946:	4663      	mov	r3, ip
 8014948:	4622      	mov	r2, r4
 801494a:	8811      	ldrh	r1, [r2, #0]
 801494c:	7892      	ldrb	r2, [r2, #2]
 801494e:	8019      	strh	r1, [r3, #0]
 8014950:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8014952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014954:	e00a      	b.n	801496c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8014956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014958:	3301      	adds	r3, #1
 801495a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801495c:	e7c6      	b.n	80148ec <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 801495e:	4b05      	ldr	r3, [pc, #20]	; (8014974 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x94>)
 8014960:	4a05      	ldr	r2, [pc, #20]	; (8014978 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x98>)
 8014962:	f240 11c5 	movw	r1, #453	; 0x1c5
 8014966:	4805      	ldr	r0, [pc, #20]	; (801497c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x9c>)
 8014968:	f013 ff6e 	bl	8028848 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 801496c:	4618      	mov	r0, r3
 801496e:	3734      	adds	r7, #52	; 0x34
 8014970:	46bd      	mov	sp, r7
 8014972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014974:	0802bbc8 	.word	0x0802bbc8
 8014978:	0802bbf8 	.word	0x0802bbf8
 801497c:	0802adb8 	.word	0x0802adb8

08014980 <_GLOBAL__sub_I_mjpegdecoder1>:
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
 8014984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014988:	2001      	movs	r0, #1
 801498a:	f7ff fcfb 	bl	8014384 <_Z41__static_initialization_and_destruction_0ii>
 801498e:	bd80      	pop	{r7, pc}

08014990 <_GLOBAL__sub_D_mjpegdecoder1>:
 8014990:	b580      	push	{r7, lr}
 8014992:	af00      	add	r7, sp, #0
 8014994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014998:	2000      	movs	r0, #0
 801499a:	f7ff fcf3 	bl	8014384 <_Z41__static_initialization_and_destruction_0ii>
 801499e:	bd80      	pop	{r7, pc}

080149a0 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 80149a6:	2300      	movs	r3, #0
 80149a8:	607b      	str	r3, [r7, #4]
 80149aa:	e02e      	b.n	8014a0a <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	3b80      	subs	r3, #128	; 0x80
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	f24b 3274 	movw	r2, #45940	; 0xb374
 80149ba:	fb02 f303 	mul.w	r3, r2, r3
 80149be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80149c2:	141a      	asrs	r2, r3, #16
 80149c4:	4916      	ldr	r1, [pc, #88]	; (8014a20 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 80149d2:	fb02 f303 	mul.w	r3, r2, r3
 80149d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80149da:	141a      	asrs	r2, r3, #16
 80149dc:	4911      	ldr	r1, [pc, #68]	; (8014a24 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	4a10      	ldr	r2, [pc, #64]	; (8014a28 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 80149e8:	fb03 f202 	mul.w	r2, r3, r2
 80149ec:	490f      	ldr	r1, [pc, #60]	; (8014a2c <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	4a0e      	ldr	r2, [pc, #56]	; (8014a30 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 80149f8:	fb03 f202 	mul.w	r2, r3, r2
 80149fc:	490d      	ldr	r1, [pc, #52]	; (8014a34 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	3301      	adds	r3, #1
 8014a08:	607b      	str	r3, [r7, #4]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2bff      	cmp	r3, #255	; 0xff
 8014a0e:	ddcd      	ble.n	80149ac <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8014a10:	bf00      	nop
 8014a12:	bf00      	nop
 8014a14:	370c      	adds	r7, #12
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	20037cfc 	.word	0x20037cfc
 8014a24:	200380fc 	.word	0x200380fc
 8014a28:	ffffa498 	.word	0xffffa498
 8014a2c:	200384fc 	.word	0x200384fc
 8014a30:	ffffd3f4 	.word	0xffffd3f4
 8014a34:	200388fc 	.word	0x200388fc

08014a38 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8014a3c:	f000 f806 	bl	8014a4c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8014a40:	f000 f888 	bl	8014b54 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8014a44:	f7ff ffac 	bl	80149a0 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8014a48:	bf00      	nop
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8014a52:	2300      	movs	r3, #0
 8014a54:	607b      	str	r3, [r7, #4]
 8014a56:	e05a      	b.n	8014b0e <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8014a5e:	fb02 f303 	mul.w	r3, r2, r3
 8014a62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014a66:	141a      	asrs	r2, r3, #16
 8014a68:	492e      	ldr	r1, [pc, #184]	; (8014b24 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f249 6245 	movw	r2, #38469	; 0x9645
 8014a76:	fb02 f303 	mul.w	r3, r2, r3
 8014a7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014a7e:	141a      	asrs	r2, r3, #16
 8014a80:	4929      	ldr	r1, [pc, #164]	; (8014b28 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8014a8e:	fb02 f303 	mul.w	r3, r2, r3
 8014a92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014a96:	141a      	asrs	r2, r3, #16
 8014a98:	4924      	ldr	r1, [pc, #144]	; (8014b2c <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4a23      	ldr	r2, [pc, #140]	; (8014b30 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8014aa4:	fb02 f303 	mul.w	r3, r2, r3
 8014aa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014aac:	141a      	asrs	r2, r3, #16
 8014aae:	4921      	ldr	r1, [pc, #132]	; (8014b34 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4a1f      	ldr	r2, [pc, #124]	; (8014b38 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8014aba:	fb02 f303 	mul.w	r3, r2, r3
 8014abe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014ac2:	141a      	asrs	r2, r3, #16
 8014ac4:	491d      	ldr	r1, [pc, #116]	; (8014b3c <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	03db      	lsls	r3, r3, #15
 8014ad2:	141a      	asrs	r2, r3, #16
 8014ad4:	491a      	ldr	r1, [pc, #104]	; (8014b40 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	4a19      	ldr	r2, [pc, #100]	; (8014b44 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8014ae0:	fb02 f303 	mul.w	r3, r2, r3
 8014ae4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014ae8:	141a      	asrs	r2, r3, #16
 8014aea:	4917      	ldr	r1, [pc, #92]	; (8014b48 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4a15      	ldr	r2, [pc, #84]	; (8014b4c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8014af6:	fb02 f303 	mul.w	r3, r2, r3
 8014afa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014afe:	141a      	asrs	r2, r3, #16
 8014b00:	4913      	ldr	r1, [pc, #76]	; (8014b50 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	607b      	str	r3, [r7, #4]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2bff      	cmp	r3, #255	; 0xff
 8014b12:	dda1      	ble.n	8014a58 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8014b14:	bf00      	nop
 8014b16:	bf00      	nop
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	20038cfc 	.word	0x20038cfc
 8014b28:	200398fc 	.word	0x200398fc
 8014b2c:	2003a4fc 	.word	0x2003a4fc
 8014b30:	ffffd4d1 	.word	0xffffd4d1
 8014b34:	200390fc 	.word	0x200390fc
 8014b38:	ffffab30 	.word	0xffffab30
 8014b3c:	2003a0fc 	.word	0x2003a0fc
 8014b40:	200394fc 	.word	0x200394fc
 8014b44:	ffff94d1 	.word	0xffff94d1
 8014b48:	20039cfc 	.word	0x20039cfc
 8014b4c:	ffffeb30 	.word	0xffffeb30
 8014b50:	2003a8fc 	.word	0x2003a8fc

08014b54 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8014b54:	b480      	push	{r7}
 8014b56:	b085      	sub	sp, #20
 8014b58:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	60fb      	str	r3, [r7, #12]
 8014b5e:	e036      	b.n	8014bce <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8014b60:	2300      	movs	r3, #0
 8014b62:	60bb      	str	r3, [r7, #8]
 8014b64:	e02d      	b.n	8014bc2 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	00db      	lsls	r3, r3, #3
 8014b6a:	68ba      	ldr	r2, [r7, #8]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	2b07      	cmp	r3, #7
 8014b74:	d906      	bls.n	8014b84 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2b07      	cmp	r3, #7
 8014b7a:	d903      	bls.n	8014b84 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	3378      	adds	r3, #120	; 0x78
 8014b80:	607b      	str	r3, [r7, #4]
 8014b82:	e012      	b.n	8014baa <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	2b07      	cmp	r3, #7
 8014b88:	d906      	bls.n	8014b98 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b07      	cmp	r3, #7
 8014b8e:	d803      	bhi.n	8014b98 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	3338      	adds	r3, #56	; 0x38
 8014b94:	607b      	str	r3, [r7, #4]
 8014b96:	e008      	b.n	8014baa <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	2b07      	cmp	r3, #7
 8014b9c:	d805      	bhi.n	8014baa <TGFX_JPEG_Init_MCU_LUT+0x56>
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2b07      	cmp	r3, #7
 8014ba2:	d902      	bls.n	8014baa <TGFX_JPEG_Init_MCU_LUT+0x56>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	3340      	adds	r3, #64	; 0x40
 8014ba8:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	011a      	lsls	r2, r3, #4
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	b291      	uxth	r1, r2
 8014bb6:	4a62      	ldr	r2, [pc, #392]	; (8014d40 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8014bb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	60bb      	str	r3, [r7, #8]
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2b0f      	cmp	r3, #15
 8014bc6:	d9ce      	bls.n	8014b66 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	60fb      	str	r3, [r7, #12]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b0f      	cmp	r3, #15
 8014bd2:	d9c5      	bls.n	8014b60 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	e072      	b.n	8014cc0 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8014bda:	2300      	movs	r3, #0
 8014bdc:	60bb      	str	r3, [r7, #8]
 8014bde:	e069      	b.n	8014cb4 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	011b      	lsls	r3, r3, #4
 8014be4:	68ba      	ldr	r2, [r7, #8]
 8014be6:	4413      	add	r3, r2
 8014be8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	085b      	lsrs	r3, r3, #1
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	085b      	lsrs	r3, r3, #1
 8014bf4:	b29b      	uxth	r3, r3
 8014bf6:	00db      	lsls	r3, r3, #3
 8014bf8:	b29b      	uxth	r3, r3
 8014bfa:	4413      	add	r3, r2
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014c02:	b299      	uxth	r1, r3
 8014c04:	4a4f      	ldr	r2, [pc, #316]	; (8014d44 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	085b      	lsrs	r3, r3, #1
 8014c10:	b29a      	uxth	r2, r3
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	4413      	add	r3, r2
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	3380      	adds	r3, #128	; 0x80
 8014c20:	b299      	uxth	r1, r3
 8014c22:	4a49      	ldr	r2, [pc, #292]	; (8014d48 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	085b      	lsrs	r3, r3, #1
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	085b      	lsrs	r3, r3, #1
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	4413      	add	r3, r2
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014c42:	b299      	uxth	r1, r3
 8014c44:	4a41      	ldr	r2, [pc, #260]	; (8014d4c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	085b      	lsrs	r3, r3, #1
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	4413      	add	r3, r2
 8014c5c:	b29b      	uxth	r3, r3
 8014c5e:	33c0      	adds	r3, #192	; 0xc0
 8014c60:	b299      	uxth	r1, r3
 8014c62:	4a3b      	ldr	r2, [pc, #236]	; (8014d50 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	085b      	lsrs	r3, r3, #1
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	085b      	lsrs	r3, r3, #1
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	00db      	lsls	r3, r3, #3
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	4413      	add	r3, r2
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014c82:	b299      	uxth	r1, r3
 8014c84:	4a33      	ldr	r2, [pc, #204]	; (8014d54 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	085b      	lsrs	r3, r3, #1
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	085b      	lsrs	r3, r3, #1
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	00db      	lsls	r3, r3, #3
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	4413      	add	r3, r2
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014ca4:	b299      	uxth	r1, r3
 8014ca6:	4a2c      	ldr	r2, [pc, #176]	; (8014d58 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	60bb      	str	r3, [r7, #8]
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2b0f      	cmp	r3, #15
 8014cb8:	d992      	bls.n	8014be0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	60fb      	str	r3, [r7, #12]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b0f      	cmp	r3, #15
 8014cc4:	d989      	bls.n	8014bda <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	60fb      	str	r3, [r7, #12]
 8014cca:	e02e      	b.n	8014d2a <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8014ccc:	2300      	movs	r3, #0
 8014cce:	60bb      	str	r3, [r7, #8]
 8014cd0:	e025      	b.n	8014d1e <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	00db      	lsls	r3, r3, #3
 8014cd6:	68ba      	ldr	r2, [r7, #8]
 8014cd8:	4413      	add	r3, r2
 8014cda:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	b299      	uxth	r1, r3
 8014ce0:	4a1e      	ldr	r2, [pc, #120]	; (8014d5c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	3340      	adds	r3, #64	; 0x40
 8014cee:	b299      	uxth	r1, r3
 8014cf0:	4a1b      	ldr	r2, [pc, #108]	; (8014d60 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	3380      	adds	r3, #128	; 0x80
 8014cfe:	b299      	uxth	r1, r3
 8014d00:	4a18      	ldr	r2, [pc, #96]	; (8014d64 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	33c0      	adds	r3, #192	; 0xc0
 8014d0e:	b299      	uxth	r1, r3
 8014d10:	4a15      	ldr	r2, [pc, #84]	; (8014d68 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	60bb      	str	r3, [r7, #8]
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	2b07      	cmp	r3, #7
 8014d22:	d9d6      	bls.n	8014cd2 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	3301      	adds	r3, #1
 8014d28:	60fb      	str	r3, [r7, #12]
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2b07      	cmp	r3, #7
 8014d2e:	d9cd      	bls.n	8014ccc <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8014d30:	bf00      	nop
 8014d32:	bf00      	nop
 8014d34:	3714      	adds	r7, #20
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop
 8014d40:	2003acfc 	.word	0x2003acfc
 8014d44:	2003af7c 	.word	0x2003af7c
 8014d48:	2003b17c 	.word	0x2003b17c
 8014d4c:	2003b3fc 	.word	0x2003b3fc
 8014d50:	2003b5fc 	.word	0x2003b5fc
 8014d54:	2003b87c 	.word	0x2003b87c
 8014d58:	2003ba7c 	.word	0x2003ba7c
 8014d5c:	2003aefc 	.word	0x2003aefc
 8014d60:	2003b37c 	.word	0x2003b37c
 8014d64:	2003b7fc 	.word	0x2003b7fc
 8014d68:	2003bc7c 	.word	0x2003bc7c

08014d6c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014d6c:	8880      	ldrh	r0, [r0, #4]
 8014d6e:	4770      	bx	lr

08014d70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	6803      	ldr	r3, [r0, #0]
 8014d74:	460c      	mov	r4, r1
 8014d76:	2100      	movs	r1, #0
 8014d78:	4605      	mov	r5, r0
 8014d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7c:	4798      	blx	r3
 8014d7e:	4606      	mov	r6, r0
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	4628      	mov	r0, r5
 8014d84:	1ba4      	subs	r4, r4, r6
 8014d86:	6a1b      	ldr	r3, [r3, #32]
 8014d88:	b2a4      	uxth	r4, r4
 8014d8a:	4798      	blx	r3
 8014d8c:	fbb4 f0f0 	udiv	r0, r4, r0
 8014d90:	bd70      	pop	{r4, r5, r6, pc}

08014d92 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014d92:	2300      	movs	r3, #0
 8014d94:	8083      	strh	r3, [r0, #4]
 8014d96:	4770      	bx	lr

08014d98 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014d98:	b510      	push	{r4, lr}
 8014d9a:	6803      	ldr	r3, [r0, #0]
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	8881      	ldrh	r1, [r0, #4]
 8014da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da2:	4798      	blx	r3
 8014da4:	88a3      	ldrh	r3, [r4, #4]
 8014da6:	3301      	adds	r3, #1
 8014da8:	80a3      	strh	r3, [r4, #4]
 8014daa:	bd10      	pop	{r4, pc}

08014dac <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014dac:	6803      	ldr	r3, [r0, #0]
 8014dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db0:	4718      	bx	r3

08014db2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014db2:	4770      	bx	lr

08014db4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014db4:	4a02      	ldr	r2, [pc, #8]	; (8014dc0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014db6:	6002      	str	r2, [r0, #0]
 8014db8:	2200      	movs	r2, #0
 8014dba:	8082      	strh	r2, [r0, #4]
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop
 8014dc0:	0802cbc8 	.word	0x0802cbc8

08014dc4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014dc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	b12b      	cbz	r3, 8014dd6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014dca:	b920      	cbnz	r0, 8014dd6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014dcc:	1a5a      	subs	r2, r3, r1
 8014dce:	699b      	ldr	r3, [r3, #24]
 8014dd0:	4250      	negs	r0, r2
 8014dd2:	4150      	adcs	r0, r2
 8014dd4:	e7f8      	b.n	8014dc8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014dd6:	4770      	bx	lr

08014dd8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014dd8:	2300      	movs	r3, #0
 8014dda:	6148      	str	r0, [r1, #20]
 8014ddc:	618b      	str	r3, [r1, #24]
 8014dde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014de0:	b913      	cbnz	r3, 8014de8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8014de2:	6281      	str	r1, [r0, #40]	; 0x28
 8014de4:	4770      	bx	lr
 8014de6:	4613      	mov	r3, r2
 8014de8:	699a      	ldr	r2, [r3, #24]
 8014dea:	2a00      	cmp	r2, #0
 8014dec:	d1fb      	bne.n	8014de6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8014dee:	6199      	str	r1, [r3, #24]
 8014df0:	4770      	bx	lr

08014df2 <_ZN8touchgfx9Container9removeAllEv>:
 8014df2:	2200      	movs	r2, #0
 8014df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014df6:	b123      	cbz	r3, 8014e02 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014df8:	6999      	ldr	r1, [r3, #24]
 8014dfa:	6281      	str	r1, [r0, #40]	; 0x28
 8014dfc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014e00:	e7f8      	b.n	8014df4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014e02:	4770      	bx	lr

08014e04 <_ZN8touchgfx9Container6unlinkEv>:
 8014e04:	2300      	movs	r3, #0
 8014e06:	6283      	str	r3, [r0, #40]	; 0x28
 8014e08:	4770      	bx	lr

08014e0a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	8002      	strh	r2, [r0, #0]
 8014e0e:	8042      	strh	r2, [r0, #2]
 8014e10:	8082      	strh	r2, [r0, #4]
 8014e12:	80c2      	strh	r2, [r0, #6]
 8014e14:	4770      	bx	lr

08014e16 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014e16:	b570      	push	{r4, r5, r6, lr}
 8014e18:	460d      	mov	r5, r1
 8014e1a:	4616      	mov	r6, r2
 8014e1c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e1e:	b13c      	cbz	r4, 8014e30 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	4620      	mov	r0, r4
 8014e24:	4632      	mov	r2, r6
 8014e26:	4629      	mov	r1, r5
 8014e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e2a:	4798      	blx	r3
 8014e2c:	69a4      	ldr	r4, [r4, #24]
 8014e2e:	e7f6      	b.n	8014e1e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014e30:	bd70      	pop	{r4, r5, r6, pc}

08014e32 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014e32:	b538      	push	{r3, r4, r5, lr}
 8014e34:	460d      	mov	r5, r1
 8014e36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e38:	b134      	cbz	r4, 8014e48 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014e3a:	682b      	ldr	r3, [r5, #0]
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	4628      	mov	r0, r5
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	4798      	blx	r3
 8014e44:	69a4      	ldr	r4, [r4, #24]
 8014e46:	e7f7      	b.n	8014e38 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014e48:	bd38      	pop	{r3, r4, r5, pc}

08014e4a <_ZNK8touchgfx9Container17invalidateContentEv>:
 8014e4a:	b510      	push	{r4, lr}
 8014e4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e4e:	b12c      	cbz	r4, 8014e5c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8014e50:	6823      	ldr	r3, [r4, #0]
 8014e52:	4620      	mov	r0, r4
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	4798      	blx	r3
 8014e58:	69a4      	ldr	r4, [r4, #24]
 8014e5a:	e7f8      	b.n	8014e4e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8014e5c:	bd10      	pop	{r4, pc}

08014e5e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014e5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014e60:	b19b      	cbz	r3, 8014e8a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014e62:	428b      	cmp	r3, r1
 8014e64:	d109      	bne.n	8014e7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014e66:	699a      	ldr	r2, [r3, #24]
 8014e68:	2100      	movs	r1, #0
 8014e6a:	6159      	str	r1, [r3, #20]
 8014e6c:	6282      	str	r2, [r0, #40]	; 0x28
 8014e6e:	b902      	cbnz	r2, 8014e72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014e70:	4770      	bx	lr
 8014e72:	6199      	str	r1, [r3, #24]
 8014e74:	4770      	bx	lr
 8014e76:	4613      	mov	r3, r2
 8014e78:	b13a      	cbz	r2, 8014e8a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014e7a:	699a      	ldr	r2, [r3, #24]
 8014e7c:	428a      	cmp	r2, r1
 8014e7e:	d1fa      	bne.n	8014e76 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014e80:	698a      	ldr	r2, [r1, #24]
 8014e82:	619a      	str	r2, [r3, #24]
 8014e84:	2300      	movs	r3, #0
 8014e86:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014e8a:	4770      	bx	lr

08014e8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014e8c:	b410      	push	{r4}
 8014e8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014e90:	4604      	mov	r4, r0
 8014e92:	b92b      	cbnz	r3, 8014ea0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014e94:	6803      	ldr	r3, [r0, #0]
 8014e96:	4611      	mov	r1, r2
 8014e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e9e:	4718      	bx	r3
 8014ea0:	b941      	cbnz	r1, 8014eb4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014ea2:	6193      	str	r3, [r2, #24]
 8014ea4:	6282      	str	r2, [r0, #40]	; 0x28
 8014ea6:	6154      	str	r4, [r2, #20]
 8014ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eac:	4770      	bx	lr
 8014eae:	4603      	mov	r3, r0
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d0f9      	beq.n	8014ea8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014eb4:	4299      	cmp	r1, r3
 8014eb6:	6998      	ldr	r0, [r3, #24]
 8014eb8:	d1f9      	bne.n	8014eae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014eba:	6190      	str	r0, [r2, #24]
 8014ebc:	618a      	str	r2, [r1, #24]
 8014ebe:	e7f2      	b.n	8014ea6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08014ec0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec4:	461f      	mov	r7, r3
 8014ec6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014eca:	460d      	mov	r5, r1
 8014ecc:	4616      	mov	r6, r2
 8014ece:	b103      	cbz	r3, 8014ed2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014ed0:	6038      	str	r0, [r7, #0]
 8014ed2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014ed4:	b314      	cbz	r4, 8014f1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014ed6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014eda:	b1eb      	cbz	r3, 8014f18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014edc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014ee0:	428d      	cmp	r5, r1
 8014ee2:	db19      	blt.n	8014f18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ee4:	b289      	uxth	r1, r1
 8014ee6:	8923      	ldrh	r3, [r4, #8]
 8014ee8:	440b      	add	r3, r1
 8014eea:	b21b      	sxth	r3, r3
 8014eec:	429d      	cmp	r5, r3
 8014eee:	da13      	bge.n	8014f18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ef0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014ef4:	4296      	cmp	r6, r2
 8014ef6:	db0f      	blt.n	8014f18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ef8:	b292      	uxth	r2, r2
 8014efa:	8963      	ldrh	r3, [r4, #10]
 8014efc:	4413      	add	r3, r2
 8014efe:	b21b      	sxth	r3, r3
 8014f00:	429e      	cmp	r6, r3
 8014f02:	da09      	bge.n	8014f18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014f04:	6823      	ldr	r3, [r4, #0]
 8014f06:	1ab2      	subs	r2, r6, r2
 8014f08:	1a69      	subs	r1, r5, r1
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8014f10:	b212      	sxth	r2, r2
 8014f12:	463b      	mov	r3, r7
 8014f14:	b209      	sxth	r1, r1
 8014f16:	47c0      	blx	r8
 8014f18:	69a4      	ldr	r4, [r4, #24]
 8014f1a:	e7db      	b.n	8014ed4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f20 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	4c6d      	ldr	r4, [pc, #436]	; (80150dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8014f26:	b0a1      	sub	sp, #132	; 0x84
 8014f28:	4606      	mov	r6, r0
 8014f2a:	6824      	ldr	r4, [r4, #0]
 8014f2c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8014f2e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8014f32:	2400      	movs	r4, #0
 8014f34:	9303      	str	r3, [sp, #12]
 8014f36:	802c      	strh	r4, [r5, #0]
 8014f38:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8014f3a:	802c      	strh	r4, [r5, #0]
 8014f3c:	601c      	str	r4, [r3, #0]
 8014f3e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014f42:	f7ff ffbd 	bl	8014ec0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014f46:	f1b9 0f03 	cmp.w	r9, #3
 8014f4a:	f340 80c1 	ble.w	80150d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014f4e:	4631      	mov	r1, r6
 8014f50:	a80c      	add	r0, sp, #48	; 0x30
 8014f52:	f005 fe61 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f56:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8014f5a:	9306      	str	r3, [sp, #24]
 8014f5c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8014f60:	9307      	str	r3, [sp, #28]
 8014f62:	9b03      	ldr	r3, [sp, #12]
 8014f64:	f8d3 a000 	ldr.w	sl, [r3]
 8014f68:	f1ba 0f00 	cmp.w	sl, #0
 8014f6c:	f000 80b3 	beq.w	80150d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014f70:	4651      	mov	r1, sl
 8014f72:	a810      	add	r0, sp, #64	; 0x40
 8014f74:	f005 fe50 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f78:	2002      	movs	r0, #2
 8014f7a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8014f7e:	9b01      	ldr	r3, [sp, #4]
 8014f80:	9a06      	ldr	r2, [sp, #24]
 8014f82:	fb91 f1f0 	sdiv	r1, r1, r0
 8014f86:	189d      	adds	r5, r3, r2
 8014f88:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8014f8c:	9a07      	ldr	r2, [sp, #28]
 8014f8e:	4419      	add	r1, r3
 8014f90:	9b02      	ldr	r3, [sp, #8]
 8014f92:	4413      	add	r3, r2
 8014f94:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8014f98:	1a6d      	subs	r5, r5, r1
 8014f9a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014f9e:	fb92 f2f0 	sdiv	r2, r2, r0
 8014fa2:	440a      	add	r2, r1
 8014fa4:	1a9b      	subs	r3, r3, r2
 8014fa6:	435b      	muls	r3, r3
 8014fa8:	fb05 3505 	mla	r5, r5, r5, r3
 8014fac:	4f4c      	ldr	r7, [pc, #304]	; (80150e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8014fae:	ac10      	add	r4, sp, #64	; 0x40
 8014fb0:	f1b9 0f0c 	cmp.w	r9, #12
 8014fb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fc0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014fc8:	f04f 0303 	mov.w	r3, #3
 8014fcc:	bfd8      	it	le
 8014fce:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014fd2:	f04f 0400 	mov.w	r4, #0
 8014fd6:	f8cd 9000 	str.w	r9, [sp]
 8014fda:	bfcc      	ite	gt
 8014fdc:	4698      	movgt	r8, r3
 8014fde:	fb92 f8f3 	sdivle	r8, r2, r3
 8014fe2:	1c63      	adds	r3, r4, #1
 8014fe4:	aa10      	add	r2, sp, #64	; 0x40
 8014fe6:	f004 0401 	and.w	r4, r4, #1
 8014fea:	f04f 0b00 	mov.w	fp, #0
 8014fee:	9308      	str	r3, [sp, #32]
 8014ff0:	9b00      	ldr	r3, [sp, #0]
 8014ff2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014ff6:	fb93 f3f8 	sdiv	r3, r3, r8
 8014ffa:	3404      	adds	r4, #4
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	9304      	str	r3, [sp, #16]
 8015000:	9a04      	ldr	r2, [sp, #16]
 8015002:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015006:	fb13 f302 	smulbb	r3, r3, r2
 801500a:	9a01      	ldr	r2, [sp, #4]
 801500c:	b29b      	uxth	r3, r3
 801500e:	1899      	adds	r1, r3, r2
 8015010:	9305      	str	r3, [sp, #20]
 8015012:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015016:	b209      	sxth	r1, r1
 8015018:	4299      	cmp	r1, r3
 801501a:	db4d      	blt.n	80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801501c:	8932      	ldrh	r2, [r6, #8]
 801501e:	4413      	add	r3, r2
 8015020:	b21b      	sxth	r3, r3
 8015022:	4299      	cmp	r1, r3
 8015024:	da48      	bge.n	80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015026:	9b04      	ldr	r3, [sp, #16]
 8015028:	6827      	ldr	r7, [r4, #0]
 801502a:	fb17 f703 	smulbb	r7, r7, r3
 801502e:	9b02      	ldr	r3, [sp, #8]
 8015030:	b2bf      	uxth	r7, r7
 8015032:	18fa      	adds	r2, r7, r3
 8015034:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015038:	b212      	sxth	r2, r2
 801503a:	429a      	cmp	r2, r3
 801503c:	db3c      	blt.n	80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801503e:	8970      	ldrh	r0, [r6, #10]
 8015040:	4403      	add	r3, r0
 8015042:	b21b      	sxth	r3, r3
 8015044:	429a      	cmp	r2, r3
 8015046:	da37      	bge.n	80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015048:	2300      	movs	r3, #0
 801504a:	4630      	mov	r0, r6
 801504c:	930b      	str	r3, [sp, #44]	; 0x2c
 801504e:	ab0b      	add	r3, sp, #44	; 0x2c
 8015050:	f7ff ff36 	bl	8014ec0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015056:	b37a      	cbz	r2, 80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015058:	4552      	cmp	r2, sl
 801505a:	d02d      	beq.n	80150b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801505c:	4611      	mov	r1, r2
 801505e:	a80e      	add	r0, sp, #56	; 0x38
 8015060:	9209      	str	r2, [sp, #36]	; 0x24
 8015062:	f005 fdd9 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015066:	f04f 0e02 	mov.w	lr, #2
 801506a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801506e:	9a06      	ldr	r2, [sp, #24]
 8015070:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8015074:	9b01      	ldr	r3, [sp, #4]
 8015076:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801507a:	4413      	add	r3, r2
 801507c:	9a07      	ldr	r2, [sp, #28]
 801507e:	fb91 f1fe 	sdiv	r1, r1, lr
 8015082:	fb9c fcfe 	sdiv	ip, ip, lr
 8015086:	4401      	add	r1, r0
 8015088:	1a58      	subs	r0, r3, r1
 801508a:	9b02      	ldr	r3, [sp, #8]
 801508c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8015090:	4413      	add	r3, r2
 8015092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015094:	448c      	add	ip, r1
 8015096:	eba3 030c 	sub.w	r3, r3, ip
 801509a:	435b      	muls	r3, r3
 801509c:	fb00 3300 	mla	r3, r0, r0, r3
 80150a0:	42ab      	cmp	r3, r5
 80150a2:	d208      	bcs.n	80150b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80150a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150a6:	461d      	mov	r5, r3
 80150a8:	9803      	ldr	r0, [sp, #12]
 80150aa:	6001      	str	r1, [r0, #0]
 80150ac:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80150ae:	9805      	ldr	r0, [sp, #20]
 80150b0:	8008      	strh	r0, [r1, #0]
 80150b2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80150b4:	800f      	strh	r7, [r1, #0]
 80150b6:	4692      	mov	sl, r2
 80150b8:	f10b 0b01 	add.w	fp, fp, #1
 80150bc:	3408      	adds	r4, #8
 80150be:	f1bb 0f04 	cmp.w	fp, #4
 80150c2:	d19d      	bne.n	8015000 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80150c4:	9b00      	ldr	r3, [sp, #0]
 80150c6:	9c08      	ldr	r4, [sp, #32]
 80150c8:	444b      	add	r3, r9
 80150ca:	4544      	cmp	r4, r8
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	d188      	bne.n	8014fe2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80150d0:	b021      	add	sp, #132	; 0x84
 80150d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d6:	f04f 35ff 	mov.w	r5, #4294967295
 80150da:	e767      	b.n	8014fac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80150dc:	2003bd08 	.word	0x2003bd08
 80150e0:	0802bd7c 	.word	0x0802bd7c

080150e4 <_ZN8touchgfx4RectaNERKS0_>:
 80150e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150e8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80150ec:	888c      	ldrh	r4, [r1, #4]
 80150ee:	f9b0 9000 	ldrsh.w	r9, [r0]
 80150f2:	443c      	add	r4, r7
 80150f4:	b2a4      	uxth	r4, r4
 80150f6:	fa0f f884 	sxth.w	r8, r4
 80150fa:	45c1      	cmp	r9, r8
 80150fc:	da2f      	bge.n	801515e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80150fe:	8882      	ldrh	r2, [r0, #4]
 8015100:	444a      	add	r2, r9
 8015102:	b292      	uxth	r2, r2
 8015104:	fa0f fe82 	sxth.w	lr, r2
 8015108:	4577      	cmp	r7, lr
 801510a:	da28      	bge.n	801515e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801510c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015110:	88cb      	ldrh	r3, [r1, #6]
 8015112:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015116:	442b      	add	r3, r5
 8015118:	b21b      	sxth	r3, r3
 801511a:	429e      	cmp	r6, r3
 801511c:	da1f      	bge.n	801515e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801511e:	88c3      	ldrh	r3, [r0, #6]
 8015120:	4433      	add	r3, r6
 8015122:	b29b      	uxth	r3, r3
 8015124:	fa0f fc83 	sxth.w	ip, r3
 8015128:	4565      	cmp	r5, ip
 801512a:	da18      	bge.n	801515e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801512c:	454f      	cmp	r7, r9
 801512e:	bfb8      	it	lt
 8015130:	464f      	movlt	r7, r9
 8015132:	42b5      	cmp	r5, r6
 8015134:	bfb8      	it	lt
 8015136:	4635      	movlt	r5, r6
 8015138:	45f0      	cmp	r8, lr
 801513a:	bfd8      	it	le
 801513c:	4622      	movle	r2, r4
 801513e:	1bd2      	subs	r2, r2, r7
 8015140:	8082      	strh	r2, [r0, #4]
 8015142:	884a      	ldrh	r2, [r1, #2]
 8015144:	88c9      	ldrh	r1, [r1, #6]
 8015146:	8007      	strh	r7, [r0, #0]
 8015148:	440a      	add	r2, r1
 801514a:	8045      	strh	r5, [r0, #2]
 801514c:	b292      	uxth	r2, r2
 801514e:	b211      	sxth	r1, r2
 8015150:	458c      	cmp	ip, r1
 8015152:	bfa8      	it	ge
 8015154:	4613      	movge	r3, r2
 8015156:	1b5b      	subs	r3, r3, r5
 8015158:	80c3      	strh	r3, [r0, #6]
 801515a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801515e:	2300      	movs	r3, #0
 8015160:	8003      	strh	r3, [r0, #0]
 8015162:	8043      	strh	r3, [r0, #2]
 8015164:	8083      	strh	r3, [r0, #4]
 8015166:	80c3      	strh	r3, [r0, #6]
 8015168:	e7f7      	b.n	801515a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801516a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801516a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	dd06      	ble.n	8015180 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015172:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015176:	2800      	cmp	r0, #0
 8015178:	bfcc      	ite	gt
 801517a:	2000      	movgt	r0, #0
 801517c:	2001      	movle	r0, #1
 801517e:	4770      	bx	lr
 8015180:	2001      	movs	r0, #1
 8015182:	4770      	bx	lr

08015184 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	2300      	movs	r3, #0
 801518a:	4604      	mov	r4, r0
 801518c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801518e:	8003      	strh	r3, [r0, #0]
 8015190:	8043      	strh	r3, [r0, #2]
 8015192:	8083      	strh	r3, [r0, #4]
 8015194:	80c3      	strh	r3, [r0, #6]
 8015196:	2d00      	cmp	r5, #0
 8015198:	d040      	beq.n	801521c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801519a:	1d28      	adds	r0, r5, #4
 801519c:	f7ff ffe5 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 80151a0:	b988      	cbnz	r0, 80151c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80151a2:	4620      	mov	r0, r4
 80151a4:	f7ff ffe1 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 80151a8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80151ac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80151b0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80151b4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80151b8:	b138      	cbz	r0, 80151ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80151ba:	8022      	strh	r2, [r4, #0]
 80151bc:	8063      	strh	r3, [r4, #2]
 80151be:	f8a4 e004 	strh.w	lr, [r4, #4]
 80151c2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80151c6:	69ad      	ldr	r5, [r5, #24]
 80151c8:	e7e5      	b.n	8015196 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80151ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 80151ce:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80151d2:	4290      	cmp	r0, r2
 80151d4:	4607      	mov	r7, r0
 80151d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80151da:	460e      	mov	r6, r1
 80151dc:	bfa8      	it	ge
 80151de:	4617      	movge	r7, r2
 80151e0:	4299      	cmp	r1, r3
 80151e2:	4472      	add	r2, lr
 80151e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80151e8:	bfa8      	it	ge
 80151ea:	461e      	movge	r6, r3
 80151ec:	4440      	add	r0, r8
 80151ee:	4471      	add	r1, lr
 80151f0:	4463      	add	r3, ip
 80151f2:	b200      	sxth	r0, r0
 80151f4:	8027      	strh	r7, [r4, #0]
 80151f6:	b212      	sxth	r2, r2
 80151f8:	8066      	strh	r6, [r4, #2]
 80151fa:	b209      	sxth	r1, r1
 80151fc:	b21b      	sxth	r3, r3
 80151fe:	4290      	cmp	r0, r2
 8015200:	bfac      	ite	ge
 8015202:	ebc7 0200 	rsbge	r2, r7, r0
 8015206:	ebc7 0202 	rsblt	r2, r7, r2
 801520a:	4299      	cmp	r1, r3
 801520c:	bfac      	ite	ge
 801520e:	ebc6 0301 	rsbge	r3, r6, r1
 8015212:	ebc6 0303 	rsblt	r3, r6, r3
 8015216:	80a2      	strh	r2, [r4, #4]
 8015218:	80e3      	strh	r3, [r4, #6]
 801521a:	e7d4      	b.n	80151c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801521c:	4620      	mov	r0, r4
 801521e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015222 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015222:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015226:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801522a:	b383      	cbz	r3, 801528e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801522c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801522e:	b374      	cbz	r4, 801528e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015230:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015234:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015238:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801523c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015240:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015244:	b303      	cbz	r3, 8015288 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015246:	4668      	mov	r0, sp
 8015248:	1d21      	adds	r1, r4, #4
 801524a:	f8ad 5000 	strh.w	r5, [sp]
 801524e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015252:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015256:	f8ad 8006 	strh.w	r8, [sp, #6]
 801525a:	f7ff ff43 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801525e:	4668      	mov	r0, sp
 8015260:	f7ff ff83 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015264:	b980      	cbnz	r0, 8015288 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015266:	f8bd 3000 	ldrh.w	r3, [sp]
 801526a:	4669      	mov	r1, sp
 801526c:	88a2      	ldrh	r2, [r4, #4]
 801526e:	4620      	mov	r0, r4
 8015270:	1a9b      	subs	r3, r3, r2
 8015272:	88e2      	ldrh	r2, [r4, #6]
 8015274:	f8ad 3000 	strh.w	r3, [sp]
 8015278:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801527c:	1a9b      	subs	r3, r3, r2
 801527e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015282:	6823      	ldr	r3, [r4, #0]
 8015284:	689b      	ldr	r3, [r3, #8]
 8015286:	4798      	blx	r3
 8015288:	69a4      	ldr	r4, [r4, #24]
 801528a:	2c00      	cmp	r4, #0
 801528c:	d1d8      	bne.n	8015240 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801528e:	b002      	add	sp, #8
 8015290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015294 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015296:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801529a:	460d      	mov	r5, r1
 801529c:	4616      	mov	r6, r2
 801529e:	b323      	cbz	r3, 80152ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80152a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80152a2:	b314      	cbz	r4, 80152ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80152a4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80152a8:	b1eb      	cbz	r3, 80152e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80152aa:	6828      	ldr	r0, [r5, #0]
 80152ac:	466b      	mov	r3, sp
 80152ae:	6869      	ldr	r1, [r5, #4]
 80152b0:	c303      	stmia	r3!, {r0, r1}
 80152b2:	4668      	mov	r0, sp
 80152b4:	1d21      	adds	r1, r4, #4
 80152b6:	f7ff ff15 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 80152ba:	4668      	mov	r0, sp
 80152bc:	f7ff ff55 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 80152c0:	b988      	cbnz	r0, 80152e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80152c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80152c6:	4669      	mov	r1, sp
 80152c8:	88a2      	ldrh	r2, [r4, #4]
 80152ca:	4620      	mov	r0, r4
 80152cc:	1a9b      	subs	r3, r3, r2
 80152ce:	88e2      	ldrh	r2, [r4, #6]
 80152d0:	f8ad 3000 	strh.w	r3, [sp]
 80152d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80152d8:	1a9b      	subs	r3, r3, r2
 80152da:	4632      	mov	r2, r6
 80152dc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80152e0:	6823      	ldr	r3, [r4, #0]
 80152e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152e4:	4798      	blx	r3
 80152e6:	69a4      	ldr	r4, [r4, #24]
 80152e8:	e7db      	b.n	80152a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80152ea:	b002      	add	sp, #8
 80152ec:	bd70      	pop	{r4, r5, r6, pc}

080152ee <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80152ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80152f2:	4770      	bx	lr

080152f4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80152f4:	4770      	bx	lr

080152f6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80152f6:	4770      	bx	lr

080152f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80152f8:	6803      	ldr	r3, [r0, #0]
 80152fa:	b513      	push	{r0, r1, r4, lr}
 80152fc:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015300:	2300      	movs	r3, #0
 8015302:	e9cd 3300 	strd	r3, r3, [sp]
 8015306:	466b      	mov	r3, sp
 8015308:	47a0      	blx	r4
 801530a:	b002      	add	sp, #8
 801530c:	bd10      	pop	{r4, pc}

0801530e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801530e:	2301      	movs	r3, #1
 8015310:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015314:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015318:	4770      	bx	lr

0801531a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801531a:	2301      	movs	r3, #1
 801531c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015320:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015324:	4770      	bx	lr

08015326 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015326:	6843      	ldr	r3, [r0, #4]
 8015328:	2201      	movs	r2, #1
 801532a:	725a      	strb	r2, [r3, #9]
 801532c:	6840      	ldr	r0, [r0, #4]
 801532e:	6803      	ldr	r3, [r0, #0]
 8015330:	691b      	ldr	r3, [r3, #16]
 8015332:	4718      	bx	r3

08015334 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015334:	6840      	ldr	r0, [r0, #4]
 8015336:	6803      	ldr	r3, [r0, #0]
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	4718      	bx	r3

0801533c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801533c:	b530      	push	{r4, r5, lr}
 801533e:	b08b      	sub	sp, #44	; 0x2c
 8015340:	6804      	ldr	r4, [r0, #0]
 8015342:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015346:	9509      	str	r5, [sp, #36]	; 0x24
 8015348:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801534c:	9508      	str	r5, [sp, #32]
 801534e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015352:	9507      	str	r5, [sp, #28]
 8015354:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015358:	9506      	str	r5, [sp, #24]
 801535a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801535e:	9505      	str	r5, [sp, #20]
 8015360:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015364:	9504      	str	r5, [sp, #16]
 8015366:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801536a:	9503      	str	r5, [sp, #12]
 801536c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015370:	9502      	str	r5, [sp, #8]
 8015372:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015376:	e9cd 3500 	strd	r3, r5, [sp]
 801537a:	4613      	mov	r3, r2
 801537c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801537e:	2200      	movs	r2, #0
 8015380:	47a0      	blx	r4
 8015382:	b00b      	add	sp, #44	; 0x2c
 8015384:	bd30      	pop	{r4, r5, pc}
	...

08015388 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015388:	4b04      	ldr	r3, [pc, #16]	; (801539c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	b123      	cbz	r3, 8015398 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801538e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015392:	f080 0001 	eor.w	r0, r0, #1
 8015396:	4770      	bx	lr
 8015398:	2001      	movs	r0, #1
 801539a:	4770      	bx	lr
 801539c:	2003bd06 	.word	0x2003bd06

080153a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80153a0:	b510      	push	{r4, lr}
 80153a2:	4604      	mov	r4, r0
 80153a4:	6840      	ldr	r0, [r0, #4]
 80153a6:	6803      	ldr	r3, [r0, #0]
 80153a8:	689b      	ldr	r3, [r3, #8]
 80153aa:	4798      	blx	r3
 80153ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80153b0:	b113      	cbz	r3, 80153b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80153b2:	2301      	movs	r3, #1
 80153b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80153b8:	bd10      	pop	{r4, pc}

080153ba <_ZN8touchgfx3HAL10initializeEv>:
 80153ba:	b510      	push	{r4, lr}
 80153bc:	4604      	mov	r4, r0
 80153be:	f7fd f953 	bl	8012668 <_ZN8touchgfx10OSWrappers10initializeEv>
 80153c2:	6860      	ldr	r0, [r4, #4]
 80153c4:	6803      	ldr	r3, [r0, #0]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	4798      	blx	r3
 80153ca:	68e0      	ldr	r0, [r4, #12]
 80153cc:	6803      	ldr	r3, [r0, #0]
 80153ce:	689b      	ldr	r3, [r3, #8]
 80153d0:	4798      	blx	r3
 80153d2:	6823      	ldr	r3, [r4, #0]
 80153d4:	4620      	mov	r0, r4
 80153d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153dc:	4718      	bx	r3

080153de <_ZN8touchgfx3HAL9taskEntryEv>:
 80153de:	b508      	push	{r3, lr}
 80153e0:	6803      	ldr	r3, [r0, #0]
 80153e2:	4604      	mov	r4, r0
 80153e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153e8:	4798      	blx	r3
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153ee:	4620      	mov	r0, r4
 80153f0:	4798      	blx	r3
 80153f2:	f7fd f9af 	bl	8012754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80153f6:	6823      	ldr	r3, [r4, #0]
 80153f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153fa:	e7f8      	b.n	80153ee <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080153fc <_ZN8touchgfx3HAL4tickEv>:
 80153fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80153fe:	6803      	ldr	r3, [r0, #0]
 8015400:	4604      	mov	r4, r0
 8015402:	4d5b      	ldr	r5, [pc, #364]	; (8015570 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015408:	4798      	blx	r3
 801540a:	2800      	cmp	r0, #0
 801540c:	f000 8095 	beq.w	801553a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015410:	2001      	movs	r0, #1
 8015412:	2600      	movs	r6, #0
 8015414:	f7fb feac 	bl	8011170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015418:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801541c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015420:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015424:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015428:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801542c:	b133      	cbz	r3, 801543c <_ZN8touchgfx3HAL4tickEv+0x40>
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	4620      	mov	r0, r4
 8015432:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015436:	4798      	blx	r3
 8015438:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801543c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015440:	2601      	movs	r6, #1
 8015442:	6862      	ldr	r2, [r4, #4]
 8015444:	f083 0301 	eor.w	r3, r3, #1
 8015448:	702e      	strb	r6, [r5, #0]
 801544a:	7253      	strb	r3, [r2, #9]
 801544c:	f004 fbb0 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 8015450:	6803      	ldr	r3, [r0, #0]
 8015452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015454:	4798      	blx	r3
 8015456:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801545a:	b90b      	cbnz	r3, 8015460 <_ZN8touchgfx3HAL4tickEv+0x64>
 801545c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015460:	f004 fba6 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 8015464:	6803      	ldr	r3, [r0, #0]
 8015466:	695b      	ldr	r3, [r3, #20]
 8015468:	4798      	blx	r3
 801546a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	691b      	ldr	r3, [r3, #16]
 8015470:	4798      	blx	r3
 8015472:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015476:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801547a:	3b01      	subs	r3, #1
 801547c:	b2db      	uxtb	r3, r3
 801547e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015482:	b10a      	cbz	r2, 8015488 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015484:	2b00      	cmp	r3, #0
 8015486:	d1eb      	bne.n	8015460 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015488:	4a3a      	ldr	r2, [pc, #232]	; (8015574 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801548a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801548e:	7813      	ldrb	r3, [r2, #0]
 8015490:	3301      	adds	r3, #1
 8015492:	b25b      	sxtb	r3, r3
 8015494:	4299      	cmp	r1, r3
 8015496:	7013      	strb	r3, [r2, #0]
 8015498:	dc10      	bgt.n	80154bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801549a:	2300      	movs	r3, #0
 801549c:	68e0      	ldr	r0, [r4, #12]
 801549e:	a902      	add	r1, sp, #8
 80154a0:	7013      	strb	r3, [r2, #0]
 80154a2:	aa03      	add	r2, sp, #12
 80154a4:	6803      	ldr	r3, [r0, #0]
 80154a6:	68db      	ldr	r3, [r3, #12]
 80154a8:	4798      	blx	r3
 80154aa:	6823      	ldr	r3, [r4, #0]
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d050      	beq.n	8015552 <_ZN8touchgfx3HAL4tickEv+0x156>
 80154b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80154b4:	4620      	mov	r0, r4
 80154b6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80154ba:	4798      	blx	r3
 80154bc:	2300      	movs	r3, #0
 80154be:	6960      	ldr	r0, [r4, #20]
 80154c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80154c4:	b158      	cbz	r0, 80154de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80154c6:	6803      	ldr	r3, [r0, #0]
 80154c8:	f10d 0107 	add.w	r1, sp, #7
 80154cc:	68db      	ldr	r3, [r3, #12]
 80154ce:	4798      	blx	r3
 80154d0:	b128      	cbz	r0, 80154de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80154d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80154d8:	6803      	ldr	r3, [r0, #0]
 80154da:	68db      	ldr	r3, [r3, #12]
 80154dc:	4798      	blx	r3
 80154de:	f104 001c 	add.w	r0, r4, #28
 80154e2:	f012 fdbf 	bl	8028064 <_ZN8touchgfx8Gestures4tickEv>
 80154e6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80154ea:	b30b      	cbz	r3, 8015530 <_ZN8touchgfx3HAL4tickEv+0x134>
 80154ec:	6920      	ldr	r0, [r4, #16]
 80154ee:	6803      	ldr	r3, [r0, #0]
 80154f0:	691b      	ldr	r3, [r3, #16]
 80154f2:	4798      	blx	r3
 80154f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80154f6:	4606      	mov	r6, r0
 80154f8:	b903      	cbnz	r3, 80154fc <_ZN8touchgfx3HAL4tickEv+0x100>
 80154fa:	6720      	str	r0, [r4, #112]	; 0x70
 80154fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80154fe:	4a1e      	ldr	r2, [pc, #120]	; (8015578 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015500:	1af3      	subs	r3, r6, r3
 8015502:	4293      	cmp	r3, r2
 8015504:	d914      	bls.n	8015530 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015506:	6920      	ldr	r0, [r4, #16]
 8015508:	6803      	ldr	r3, [r0, #0]
 801550a:	699b      	ldr	r3, [r3, #24]
 801550c:	4798      	blx	r3
 801550e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015510:	2264      	movs	r2, #100	; 0x64
 8015512:	1af3      	subs	r3, r6, r3
 8015514:	fbb3 f3f2 	udiv	r3, r3, r2
 8015518:	fbb0 f0f3 	udiv	r0, r0, r3
 801551c:	2800      	cmp	r0, #0
 801551e:	dc1d      	bgt.n	801555c <_ZN8touchgfx3HAL4tickEv+0x160>
 8015520:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015524:	6920      	ldr	r0, [r4, #16]
 8015526:	2100      	movs	r1, #0
 8015528:	6803      	ldr	r3, [r0, #0]
 801552a:	69db      	ldr	r3, [r3, #28]
 801552c:	4798      	blx	r3
 801552e:	6726      	str	r6, [r4, #112]	; 0x70
 8015530:	f004 fb3e 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 8015534:	6803      	ldr	r3, [r0, #0]
 8015536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015538:	4798      	blx	r3
 801553a:	6823      	ldr	r3, [r4, #0]
 801553c:	4620      	mov	r0, r4
 801553e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015542:	4798      	blx	r3
 8015544:	2001      	movs	r0, #1
 8015546:	f7fb fe2f 	bl	80111a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801554a:	2300      	movs	r3, #0
 801554c:	702b      	strb	r3, [r5, #0]
 801554e:	b004      	add	sp, #16
 8015550:	bd70      	pop	{r4, r5, r6, pc}
 8015552:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015556:	4620      	mov	r0, r4
 8015558:	4798      	blx	r3
 801555a:	e7af      	b.n	80154bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801555c:	2863      	cmp	r0, #99	; 0x63
 801555e:	bfcb      	itete	gt
 8015560:	2300      	movgt	r3, #0
 8015562:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015566:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801556a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801556e:	e7d9      	b.n	8015524 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015570:	2003bd0c 	.word	0x2003bd0c
 8015574:	2003bd0d 	.word	0x2003bd0d
 8015578:	05f5e100 	.word	0x05f5e100

0801557c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801557c:	f7fd b8b6 	b.w	80126ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015580 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015580:	6581      	str	r1, [r0, #88]	; 0x58
 8015582:	301c      	adds	r0, #28
 8015584:	f012 bd6c 	b.w	8028060 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015588 <_ZN8touchgfx3HAL5touchEll>:
 8015588:	b530      	push	{r4, r5, lr}
 801558a:	b087      	sub	sp, #28
 801558c:	4604      	mov	r4, r0
 801558e:	a804      	add	r0, sp, #16
 8015590:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015594:	f004 f892 	bl	80196bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015598:	9b04      	ldr	r3, [sp, #16]
 801559a:	a906      	add	r1, sp, #24
 801559c:	a803      	add	r0, sp, #12
 801559e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80155a2:	9b05      	ldr	r3, [sp, #20]
 80155a4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80155a8:	f004 f8da 	bl	8019760 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80155ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80155b0:	f104 001c 	add.w	r0, r4, #28
 80155b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80155b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80155bc:	b189      	cbz	r1, 80155e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80155be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	4613      	mov	r3, r2
 80155c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80155ca:	462a      	mov	r2, r5
 80155cc:	f012 fd58 	bl	8028080 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80155d0:	b128      	cbz	r0, 80155de <_ZN8touchgfx3HAL5touchEll+0x56>
 80155d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80155d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80155d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80155dc:	6623      	str	r3, [r4, #96]	; 0x60
 80155de:	b007      	add	sp, #28
 80155e0:	bd30      	pop	{r4, r5, pc}
 80155e2:	f012 fd8d 	bl	8028100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80155e6:	2301      	movs	r3, #1
 80155e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80155ec:	e7f1      	b.n	80155d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080155ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80155ee:	b510      	push	{r4, lr}
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d046      	beq.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80155f4:	ea81 0002 	eor.w	r0, r1, r2
 80155f8:	07c4      	lsls	r4, r0, #31
 80155fa:	d508      	bpl.n	801560e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80155fc:	440b      	add	r3, r1
 80155fe:	3a01      	subs	r2, #1
 8015600:	428b      	cmp	r3, r1
 8015602:	d93e      	bls.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015604:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015608:	f801 0b01 	strb.w	r0, [r1], #1
 801560c:	e7f8      	b.n	8015600 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801560e:	07d0      	lsls	r0, r2, #31
 8015610:	bf42      	ittt	mi
 8015612:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015616:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801561a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801561e:	2b01      	cmp	r3, #1
 8015620:	d911      	bls.n	8015646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015622:	ea81 0402 	eor.w	r4, r1, r2
 8015626:	4610      	mov	r0, r2
 8015628:	07a4      	lsls	r4, r4, #30
 801562a:	d022      	beq.n	8015672 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801562c:	f023 0401 	bic.w	r4, r3, #1
 8015630:	440c      	add	r4, r1
 8015632:	428c      	cmp	r4, r1
 8015634:	4602      	mov	r2, r0
 8015636:	d904      	bls.n	8015642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015638:	8812      	ldrh	r2, [r2, #0]
 801563a:	3002      	adds	r0, #2
 801563c:	f821 2b02 	strh.w	r2, [r1], #2
 8015640:	e7f7      	b.n	8015632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015642:	f003 0301 	and.w	r3, r3, #1
 8015646:	f023 0003 	bic.w	r0, r3, #3
 801564a:	4408      	add	r0, r1
 801564c:	4288      	cmp	r0, r1
 801564e:	4614      	mov	r4, r2
 8015650:	d904      	bls.n	801565c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015652:	6824      	ldr	r4, [r4, #0]
 8015654:	3204      	adds	r2, #4
 8015656:	f841 4b04 	str.w	r4, [r1], #4
 801565a:	e7f7      	b.n	801564c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801565c:	f003 0303 	and.w	r3, r3, #3
 8015660:	3a01      	subs	r2, #1
 8015662:	440b      	add	r3, r1
 8015664:	428b      	cmp	r3, r1
 8015666:	d90c      	bls.n	8015682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015668:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801566c:	f801 0b01 	strb.w	r0, [r1], #1
 8015670:	e7f8      	b.n	8015664 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015672:	0790      	lsls	r0, r2, #30
 8015674:	d0e7      	beq.n	8015646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015676:	f832 0b02 	ldrh.w	r0, [r2], #2
 801567a:	3b02      	subs	r3, #2
 801567c:	f821 0b02 	strh.w	r0, [r1], #2
 8015680:	e7e1      	b.n	8015646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015682:	2001      	movs	r0, #1
 8015684:	bd10      	pop	{r4, pc}

08015686 <_ZN8touchgfx3HAL7noTouchEv>:
 8015686:	b510      	push	{r4, lr}
 8015688:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801568c:	4604      	mov	r4, r0
 801568e:	b153      	cbz	r3, 80156a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015690:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015694:	2101      	movs	r1, #1
 8015696:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801569a:	301c      	adds	r0, #28
 801569c:	f012 fd30 	bl	8028100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80156a0:	2300      	movs	r3, #0
 80156a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80156a6:	bd10      	pop	{r4, pc}

080156a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80156a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156ac:	b085      	sub	sp, #20
 80156ae:	4604      	mov	r4, r0
 80156b0:	2000      	movs	r0, #0
 80156b2:	4699      	mov	r9, r3
 80156b4:	ad04      	add	r5, sp, #16
 80156b6:	460f      	mov	r7, r1
 80156b8:	4690      	mov	r8, r2
 80156ba:	f845 0d04 	str.w	r0, [r5, #-4]!
 80156be:	69a0      	ldr	r0, [r4, #24]
 80156c0:	6806      	ldr	r6, [r0, #0]
 80156c2:	9501      	str	r5, [sp, #4]
 80156c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80156c8:	9500      	str	r5, [sp, #0]
 80156ca:	6835      	ldr	r5, [r6, #0]
 80156cc:	47a8      	blx	r5
 80156ce:	4d10      	ldr	r5, [pc, #64]	; (8015710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80156d0:	4606      	mov	r6, r0
 80156d2:	f8a5 9000 	strh.w	r9, [r5]
 80156d6:	f7f8 f825 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 80156da:	6803      	ldr	r3, [r0, #0]
 80156dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156de:	4798      	blx	r3
 80156e0:	b128      	cbz	r0, 80156ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80156e2:	2801      	cmp	r0, #1
 80156e4:	d00b      	beq.n	80156fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80156e6:	4630      	mov	r0, r6
 80156e8:	b005      	add	sp, #20
 80156ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ee:	882b      	ldrh	r3, [r5, #0]
 80156f0:	fb08 7203 	mla	r2, r8, r3, r7
 80156f4:	9b03      	ldr	r3, [sp, #12]
 80156f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80156fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80156fc:	e7f3      	b.n	80156e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80156fe:	882a      	ldrh	r2, [r5, #0]
 8015700:	9b03      	ldr	r3, [sp, #12]
 8015702:	fb08 7202 	mla	r2, r8, r2, r7
 8015706:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801570a:	1a9a      	subs	r2, r3, r2
 801570c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801570e:	e7ea      	b.n	80156e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015710:	2003bd02 	.word	0x2003bd02

08015714 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015716:	b08b      	sub	sp, #44	; 0x2c
 8015718:	4617      	mov	r7, r2
 801571a:	4604      	mov	r4, r0
 801571c:	460e      	mov	r6, r1
 801571e:	461d      	mov	r5, r3
 8015720:	f7f8 f800 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8015724:	6803      	ldr	r3, [r0, #0]
 8015726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015728:	4798      	blx	r3
 801572a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801572e:	9007      	str	r0, [sp, #28]
 8015730:	4631      	mov	r1, r6
 8015732:	6822      	ldr	r2, [r4, #0]
 8015734:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015738:	4b0c      	ldr	r3, [pc, #48]	; (801576c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801573a:	4620      	mov	r0, r4
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	9306      	str	r3, [sp, #24]
 8015740:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015744:	9305      	str	r3, [sp, #20]
 8015746:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801574a:	9304      	str	r3, [sp, #16]
 801574c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015750:	9303      	str	r3, [sp, #12]
 8015752:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015756:	9302      	str	r3, [sp, #8]
 8015758:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801575c:	e9cd 5300 	strd	r5, r3, [sp]
 8015760:	463b      	mov	r3, r7
 8015762:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015764:	2200      	movs	r2, #0
 8015766:	47a8      	blx	r5
 8015768:	b00b      	add	sp, #44	; 0x2c
 801576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801576c:	2003bd02 	.word	0x2003bd02

08015770 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015774:	4698      	mov	r8, r3
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	b08b      	sub	sp, #44	; 0x2c
 801577a:	4617      	mov	r7, r2
 801577c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801577e:	460e      	mov	r6, r1
 8015780:	4b13      	ldr	r3, [pc, #76]	; (80157d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015782:	4604      	mov	r4, r0
 8015784:	f8b3 9000 	ldrh.w	r9, [r3]
 8015788:	f7f7 ffcc 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 801578c:	6803      	ldr	r3, [r0, #0]
 801578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015790:	4798      	blx	r3
 8015792:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015796:	2200      	movs	r2, #0
 8015798:	4631      	mov	r1, r6
 801579a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801579e:	2302      	movs	r3, #2
 80157a0:	4620      	mov	r0, r4
 80157a2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80157a6:	2301      	movs	r3, #1
 80157a8:	9305      	str	r3, [sp, #20]
 80157aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80157ae:	9304      	str	r3, [sp, #16]
 80157b0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80157b4:	9303      	str	r3, [sp, #12]
 80157b6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80157ba:	9302      	str	r3, [sp, #8]
 80157bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80157c0:	e9cd 8300 	strd	r8, r3, [sp]
 80157c4:	463b      	mov	r3, r7
 80157c6:	47a8      	blx	r5
 80157c8:	b00b      	add	sp, #44	; 0x2c
 80157ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157ce:	bf00      	nop
 80157d0:	2003bd02 	.word	0x2003bd02

080157d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80157d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157d8:	4698      	mov	r8, r3
 80157da:	6803      	ldr	r3, [r0, #0]
 80157dc:	b087      	sub	sp, #28
 80157de:	460e      	mov	r6, r1
 80157e0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80157e2:	4617      	mov	r7, r2
 80157e4:	4b0f      	ldr	r3, [pc, #60]	; (8015824 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80157e6:	4604      	mov	r4, r0
 80157e8:	f8b3 9000 	ldrh.w	r9, [r3]
 80157ec:	f7f7 ff9a 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 80157f0:	6803      	ldr	r3, [r0, #0]
 80157f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157f4:	4798      	blx	r3
 80157f6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80157fa:	463a      	mov	r2, r7
 80157fc:	4631      	mov	r1, r6
 80157fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8015802:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015806:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801580a:	4620      	mov	r0, r4
 801580c:	9302      	str	r3, [sp, #8]
 801580e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015812:	9301      	str	r3, [sp, #4]
 8015814:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	4643      	mov	r3, r8
 801581c:	47a8      	blx	r5
 801581e:	b007      	add	sp, #28
 8015820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015824:	2003bd02 	.word	0x2003bd02

08015828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801582c:	4604      	mov	r4, r0
 801582e:	b08f      	sub	sp, #60	; 0x3c
 8015830:	4610      	mov	r0, r2
 8015832:	460d      	mov	r5, r1
 8015834:	4691      	mov	r9, r2
 8015836:	461e      	mov	r6, r3
 8015838:	f007 f966 	bl	801cb08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801583c:	2800      	cmp	r0, #0
 801583e:	f000 809d 	beq.w	801597c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8015842:	6823      	ldr	r3, [r4, #0]
 8015844:	4620      	mov	r0, r4
 8015846:	f8df b198 	ldr.w	fp, [pc, #408]	; 80159e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801584a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015850:	4798      	blx	r3
 8015852:	6823      	ldr	r3, [r4, #0]
 8015854:	4620      	mov	r0, r4
 8015856:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80159e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801585c:	4798      	blx	r3
 801585e:	f8bb 3000 	ldrh.w	r3, [fp]
 8015862:	4f5c      	ldr	r7, [pc, #368]	; (80159d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015864:	9301      	str	r3, [sp, #4]
 8015866:	f8ba 3000 	ldrh.w	r3, [sl]
 801586a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801586e:	4640      	mov	r0, r8
 8015870:	9302      	str	r3, [sp, #8]
 8015872:	883b      	ldrh	r3, [r7, #0]
 8015874:	9303      	str	r3, [sp, #12]
 8015876:	4b58      	ldr	r3, [pc, #352]	; (80159d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015878:	881a      	ldrh	r2, [r3, #0]
 801587a:	9305      	str	r3, [sp, #20]
 801587c:	9204      	str	r2, [sp, #16]
 801587e:	f007 fa87 	bl	801cd90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015882:	8038      	strh	r0, [r7, #0]
 8015884:	4640      	mov	r0, r8
 8015886:	f007 fab7 	bl	801cdf8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801588a:	9b05      	ldr	r3, [sp, #20]
 801588c:	b280      	uxth	r0, r0
 801588e:	8018      	strh	r0, [r3, #0]
 8015890:	4b52      	ldr	r3, [pc, #328]	; (80159dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d174      	bne.n	8015982 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015898:	883b      	ldrh	r3, [r7, #0]
 801589a:	f8aa 0000 	strh.w	r0, [sl]
 801589e:	f8ab 3000 	strh.w	r3, [fp]
 80158a2:	4648      	mov	r0, r9
 80158a4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80158a8:	f007 f92e 	bl	801cb08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80158ac:	2200      	movs	r2, #0
 80158ae:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80158b2:	4611      	mov	r1, r2
 80158b4:	4628      	mov	r0, r5
 80158b6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80158ba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80158be:	f7f8 fd59 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>
 80158c2:	2301      	movs	r3, #1
 80158c4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80158c8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80158cc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dd5c      	ble.n	801598e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80158d4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dd58      	ble.n	801598e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80158dc:	462a      	mov	r2, r5
 80158de:	ab0a      	add	r3, sp, #40	; 0x28
 80158e0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80158e4:	6851      	ldr	r1, [r2, #4]
 80158e6:	c303      	stmia	r3!, {r0, r1}
 80158e8:	4631      	mov	r1, r6
 80158ea:	a80a      	add	r0, sp, #40	; 0x28
 80158ec:	f7ff fbfa 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 80158f0:	4b38      	ldr	r3, [pc, #224]	; (80159d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80158f2:	2100      	movs	r1, #0
 80158f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158f8:	4b37      	ldr	r3, [pc, #220]	; (80159d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80158fa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80158fe:	aa0a      	add	r2, sp, #40	; 0x28
 8015900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015904:	910c      	str	r1, [sp, #48]	; 0x30
 8015906:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801590a:	ab08      	add	r3, sp, #32
 801590c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015910:	e883 0003 	stmia.w	r3, {r0, r1}
 8015914:	4618      	mov	r0, r3
 8015916:	a90c      	add	r1, sp, #48	; 0x30
 8015918:	f7ff fbe4 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801591c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801591e:	2b00      	cmp	r3, #0
 8015920:	d13c      	bne.n	801599c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015922:	2000      	movs	r0, #0
 8015924:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015928:	2600      	movs	r6, #0
 801592a:	696b      	ldr	r3, [r5, #20]
 801592c:	a908      	add	r1, sp, #32
 801592e:	682a      	ldr	r2, [r5, #0]
 8015930:	4628      	mov	r0, r5
 8015932:	9305      	str	r3, [sp, #20]
 8015934:	616e      	str	r6, [r5, #20]
 8015936:	6892      	ldr	r2, [r2, #8]
 8015938:	4790      	blx	r2
 801593a:	9b05      	ldr	r3, [sp, #20]
 801593c:	4652      	mov	r2, sl
 801593e:	4649      	mov	r1, r9
 8015940:	616b      	str	r3, [r5, #20]
 8015942:	4628      	mov	r0, r5
 8015944:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015948:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801594c:	f7f8 fd12 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>
 8015950:	9a01      	ldr	r2, [sp, #4]
 8015952:	4b23      	ldr	r3, [pc, #140]	; (80159e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015954:	4620      	mov	r0, r4
 8015956:	801a      	strh	r2, [r3, #0]
 8015958:	9a02      	ldr	r2, [sp, #8]
 801595a:	4b22      	ldr	r3, [pc, #136]	; (80159e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801595c:	801a      	strh	r2, [r3, #0]
 801595e:	9a03      	ldr	r2, [sp, #12]
 8015960:	4b1c      	ldr	r3, [pc, #112]	; (80159d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015962:	801a      	strh	r2, [r3, #0]
 8015964:	4b1c      	ldr	r3, [pc, #112]	; (80159d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015966:	9a04      	ldr	r2, [sp, #16]
 8015968:	801a      	strh	r2, [r3, #0]
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8015970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015972:	4798      	blx	r3
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	4620      	mov	r0, r4
 8015978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801597a:	4798      	blx	r3
 801597c:	b00f      	add	sp, #60	; 0x3c
 801597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015982:	883b      	ldrh	r3, [r7, #0]
 8015984:	f8ab 0000 	strh.w	r0, [fp]
 8015988:	f8aa 3000 	strh.w	r3, [sl]
 801598c:	e789      	b.n	80158a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801598e:	462a      	mov	r2, r5
 8015990:	ab0a      	add	r3, sp, #40	; 0x28
 8015992:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015996:	6851      	ldr	r1, [r2, #4]
 8015998:	c303      	stmia	r3!, {r0, r1}
 801599a:	e7a9      	b.n	80158f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801599c:	a807      	add	r0, sp, #28
 801599e:	f007 fb1b 	bl	801cfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80159a2:	4606      	mov	r6, r0
 80159a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159aa:	4798      	blx	r3
 80159ac:	4286      	cmp	r6, r0
 80159ae:	d1b8      	bne.n	8015922 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80159b0:	f7f7 feb8 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 80159b4:	6803      	ldr	r3, [r0, #0]
 80159b6:	4606      	mov	r6, r0
 80159b8:	a807      	add	r0, sp, #28
 80159ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159bc:	9305      	str	r3, [sp, #20]
 80159be:	f007 fb0b 	bl	801cfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80159c2:	9b05      	ldr	r3, [sp, #20]
 80159c4:	4601      	mov	r1, r0
 80159c6:	4630      	mov	r0, r6
 80159c8:	4798      	blx	r3
 80159ca:	f080 0001 	eor.w	r0, r0, #1
 80159ce:	b2c0      	uxtb	r0, r0
 80159d0:	e7a8      	b.n	8015924 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80159d2:	bf00      	nop
 80159d4:	2003bcfc 	.word	0x2003bcfc
 80159d8:	2003bcfe 	.word	0x2003bcfe
 80159dc:	2003bd00 	.word	0x2003bd00
 80159e0:	2003bd02 	.word	0x2003bd02
 80159e4:	2003bd04 	.word	0x2003bd04

080159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80159e8:	4b07      	ldr	r3, [pc, #28]	; (8015a08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80159ea:	b510      	push	{r4, lr}
 80159ec:	781b      	ldrb	r3, [r3, #0]
 80159ee:	4604      	mov	r4, r0
 80159f0:	b13b      	cbz	r3, 8015a02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80159f2:	6803      	ldr	r3, [r0, #0]
 80159f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159f6:	4798      	blx	r3
 80159f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80159fa:	4283      	cmp	r3, r0
 80159fc:	d101      	bne.n	8015a02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80159fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015a00:	bd10      	pop	{r4, pc}
 8015a02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015a04:	e7fc      	b.n	8015a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015a06:	bf00      	nop
 8015a08:	2003bd06 	.word	0x2003bd06

08015a0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a10:	461d      	mov	r5, r3
 8015a12:	b08a      	sub	sp, #40	; 0x28
 8015a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a18:	4690      	mov	r8, r2
 8015a1a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015a1e:	2400      	movs	r4, #0
 8015a20:	4607      	mov	r7, r0
 8015a22:	fb06 8505 	mla	r5, r6, r5, r8
 8015a26:	9404      	str	r4, [sp, #16]
 8015a28:	f88d 4020 	strb.w	r4, [sp, #32]
 8015a2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015a30:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015a34:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015a38:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015a3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015a40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015a44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015a48:	f7ff ffce 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a4c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015a56:	a901      	add	r1, sp, #4
 8015a58:	9505      	str	r5, [sp, #20]
 8015a5a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015a5e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8015a62:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015a66:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015a6a:	6803      	ldr	r3, [r0, #0]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	4798      	blx	r3
 8015a70:	b00a      	add	sp, #40	; 0x28
 8015a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a76 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a7a:	b08b      	sub	sp, #44	; 0x2c
 8015a7c:	2400      	movs	r4, #0
 8015a7e:	4691      	mov	r9, r2
 8015a80:	461d      	mov	r5, r3
 8015a82:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a8a:	4688      	mov	r8, r1
 8015a8c:	4607      	mov	r7, r0
 8015a8e:	9404      	str	r4, [sp, #16]
 8015a90:	fb06 9505 	mla	r5, r6, r5, r9
 8015a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a98:	f7ff ffa6 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015aa0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015aaa:	a901      	add	r1, sp, #4
 8015aac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015ab0:	9505      	str	r5, [sp, #20]
 8015ab2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015ab6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015aba:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015abe:	f8cd 8010 	str.w	r8, [sp, #16]
 8015ac2:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015ac6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015aca:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015ace:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	4798      	blx	r3
 8015ad8:	b00b      	add	sp, #44	; 0x2c
 8015ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015ae0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae4:	b08a      	sub	sp, #40	; 0x28
 8015ae6:	4698      	mov	r8, r3
 8015ae8:	2300      	movs	r3, #0
 8015aea:	4606      	mov	r6, r0
 8015aec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015af0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015af4:	2d0b      	cmp	r5, #11
 8015af6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8015afa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8015afe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8015b02:	9304      	str	r3, [sp, #16]
 8015b04:	d137      	bne.n	8015b76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015b06:	2380      	movs	r3, #128	; 0x80
 8015b08:	f88d 0020 	strb.w	r0, [sp, #32]
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	9203      	str	r2, [sp, #12]
 8015b10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015b14:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015b18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015b20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b24:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015b28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b2c:	f7ff ff5c 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b30:	2c0b      	cmp	r4, #11
 8015b32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015b36:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015b3a:	bf94      	ite	ls
 8015b3c:	4b19      	ldrls	r3, [pc, #100]	; (8015ba4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015b3e:	2100      	movhi	r1, #0
 8015b40:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8015b44:	bf98      	it	ls
 8015b46:	5d19      	ldrbls	r1, [r3, r4]
 8015b48:	fb02 8307 	mla	r3, r2, r7, r8
 8015b4c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015b50:	10c9      	asrs	r1, r1, #3
 8015b52:	fb01 0003 	mla	r0, r1, r3, r0
 8015b56:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015b5a:	a901      	add	r1, sp, #4
 8015b5c:	9005      	str	r0, [sp, #20]
 8015b5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015b62:	2300      	movs	r3, #0
 8015b64:	6870      	ldr	r0, [r6, #4]
 8015b66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015b6a:	6803      	ldr	r3, [r0, #0]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	4798      	blx	r3
 8015b70:	b00a      	add	sp, #40	; 0x28
 8015b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b76:	2d02      	cmp	r5, #2
 8015b78:	d109      	bne.n	8015b8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8015b7a:	28ff      	cmp	r0, #255	; 0xff
 8015b7c:	d105      	bne.n	8015b8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8015b7e:	f1bc 0f00 	cmp.w	ip, #0
 8015b82:	bf14      	ite	ne
 8015b84:	2340      	movne	r3, #64	; 0x40
 8015b86:	2320      	moveq	r3, #32
 8015b88:	e7be      	b.n	8015b08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015b8a:	2340      	movs	r3, #64	; 0x40
 8015b8c:	e7bc      	b.n	8015b08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015b8e:	28ff      	cmp	r0, #255	; 0xff
 8015b90:	d105      	bne.n	8015b9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015b92:	f1bc 0f00 	cmp.w	ip, #0
 8015b96:	bf14      	ite	ne
 8015b98:	2304      	movne	r3, #4
 8015b9a:	2301      	moveq	r3, #1
 8015b9c:	e7b4      	b.n	8015b08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015b9e:	2304      	movs	r3, #4
 8015ba0:	e7b2      	b.n	8015b08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015ba2:	bf00      	nop
 8015ba4:	0802cc84 	.word	0x0802cc84

08015ba8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	b08b      	sub	sp, #44	; 0x2c
 8015bae:	461d      	mov	r5, r3
 8015bb0:	2400      	movs	r4, #0
 8015bb2:	4688      	mov	r8, r1
 8015bb4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8015bb8:	4693      	mov	fp, r2
 8015bba:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8015bbe:	4607      	mov	r7, r0
 8015bc0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015bc4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8015bc8:	9404      	str	r4, [sp, #16]
 8015bca:	bf14      	ite	ne
 8015bcc:	2308      	movne	r3, #8
 8015bce:	2302      	moveq	r3, #2
 8015bd0:	fb05 b50a 	mla	r5, r5, sl, fp
 8015bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bd8:	f7ff ff06 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015bdc:	2e0b      	cmp	r6, #11
 8015bde:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015be2:	a901      	add	r1, sp, #4
 8015be4:	bf98      	it	ls
 8015be6:	4b13      	ldrls	r3, [pc, #76]	; (8015c34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015be8:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015bec:	bf98      	it	ls
 8015bee:	5d9c      	ldrbls	r4, [r3, r6]
 8015bf0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015bf4:	10e4      	asrs	r4, r4, #3
 8015bf6:	f8cd 8010 	str.w	r8, [sp, #16]
 8015bfa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015bfe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015c02:	fb04 0405 	mla	r4, r4, r5, r0
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	9405      	str	r4, [sp, #20]
 8015c10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c14:	f88d 9020 	strb.w	r9, [sp, #32]
 8015c18:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8015c1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015c20:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8015c24:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8015c28:	6803      	ldr	r3, [r0, #0]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	4798      	blx	r3
 8015c2e:	b00b      	add	sp, #44	; 0x2c
 8015c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c34:	0802cc84 	.word	0x0802cc84

08015c38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c3c:	461e      	mov	r6, r3
 8015c3e:	4b0a      	ldr	r3, [pc, #40]	; (8015c68 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015c40:	460f      	mov	r7, r1
 8015c42:	4690      	mov	r8, r2
 8015c44:	881d      	ldrh	r5, [r3, #0]
 8015c46:	f7f7 fd6d 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8015c4a:	6803      	ldr	r3, [r0, #0]
 8015c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c4e:	4798      	blx	r3
 8015c50:	280b      	cmp	r0, #11
 8015c52:	bf96      	itet	ls
 8015c54:	4b05      	ldrls	r3, [pc, #20]	; (8015c6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015c56:	2400      	movhi	r4, #0
 8015c58:	5c1c      	ldrbls	r4, [r3, r0]
 8015c5a:	fb08 7005 	mla	r0, r8, r5, r7
 8015c5e:	10e4      	asrs	r4, r4, #3
 8015c60:	fb04 6000 	mla	r0, r4, r0, r6
 8015c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c68:	2003bd02 	.word	0x2003bd02
 8015c6c:	0802cc84 	.word	0x0802cc84

08015c70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c72:	b08b      	sub	sp, #44	; 0x2c
 8015c74:	461f      	mov	r7, r3
 8015c76:	4604      	mov	r4, r0
 8015c78:	4616      	mov	r6, r2
 8015c7a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015c7e:	2500      	movs	r5, #0
 8015c80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015c84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015c88:	9504      	str	r5, [sp, #16]
 8015c8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015c8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015c92:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015c96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c9e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015ca2:	f88d 3020 	strb.w	r3, [sp, #32]
 8015ca6:	f7ff fe9f 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015caa:	463a      	mov	r2, r7
 8015cac:	4631      	mov	r1, r6
 8015cae:	4603      	mov	r3, r0
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	f7ff ffc1 	bl	8015c38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015cb6:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015cb8:	9005      	str	r0, [sp, #20]
 8015cba:	881b      	ldrh	r3, [r3, #0]
 8015cbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015cc0:	f7f7 fd30 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8015cc4:	6803      	ldr	r3, [r0, #0]
 8015cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cc8:	4798      	blx	r3
 8015cca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ccc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8015cd0:	a901      	add	r1, sp, #4
 8015cd2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015cd6:	9304      	str	r3, [sp, #16]
 8015cd8:	6860      	ldr	r0, [r4, #4]
 8015cda:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015cde:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8015ce2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8015ce6:	6803      	ldr	r3, [r0, #0]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	4798      	blx	r3
 8015cec:	b00b      	add	sp, #44	; 0x2c
 8015cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf0:	2003bd02 	.word	0x2003bd02

08015cf4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cf6:	b08d      	sub	sp, #52	; 0x34
 8015cf8:	2501      	movs	r5, #1
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	466b      	mov	r3, sp
 8015cfe:	9503      	str	r5, [sp, #12]
 8015d00:	e883 0006 	stmia.w	r3, {r1, r2}
 8015d04:	2300      	movs	r3, #0
 8015d06:	f8bd 6000 	ldrh.w	r6, [sp]
 8015d0a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015d0e:	9306      	str	r3, [sp, #24]
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d14:	4798      	blx	r3
 8015d16:	463a      	mov	r2, r7
 8015d18:	4631      	mov	r1, r6
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	f7ff ff8b 	bl	8015c38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015d22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015d24:	9004      	str	r0, [sp, #16]
 8015d26:	9307      	str	r3, [sp, #28]
 8015d28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015d2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015d30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015d34:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015d38:	4b0e      	ldr	r3, [pc, #56]	; (8015d74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015d3a:	881b      	ldrh	r3, [r3, #0]
 8015d3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015d40:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015d44:	f7f7 fcee 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8015d48:	6803      	ldr	r3, [r0, #0]
 8015d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d4c:	4798      	blx	r3
 8015d4e:	23ff      	movs	r3, #255	; 0xff
 8015d50:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015d54:	a903      	add	r1, sp, #12
 8015d56:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015d5a:	6860      	ldr	r0, [r4, #4]
 8015d5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015d60:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015d64:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015d68:	6803      	ldr	r3, [r0, #0]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	4798      	blx	r3
 8015d6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015d70:	b00d      	add	sp, #52	; 0x34
 8015d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d74:	2003bd02 	.word	0x2003bd02

08015d78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7c:	b08c      	sub	sp, #48	; 0x30
 8015d7e:	461e      	mov	r6, r3
 8015d80:	2300      	movs	r3, #0
 8015d82:	4604      	mov	r4, r0
 8015d84:	466d      	mov	r5, sp
 8015d86:	9306      	str	r3, [sp, #24]
 8015d88:	6803      	ldr	r3, [r0, #0]
 8015d8a:	e885 0006 	stmia.w	r5, {r1, r2}
 8015d8e:	2501      	movs	r5, #1
 8015d90:	f8bd 7000 	ldrh.w	r7, [sp]
 8015d94:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015d98:	9503      	str	r5, [sp, #12]
 8015d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d9c:	4798      	blx	r3
 8015d9e:	4642      	mov	r2, r8
 8015da0:	4639      	mov	r1, r7
 8015da2:	4603      	mov	r3, r0
 8015da4:	4620      	mov	r0, r4
 8015da6:	f7ff ff47 	bl	8015c38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015daa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015dae:	9004      	str	r0, [sp, #16]
 8015db0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015db8:	9607      	str	r6, [sp, #28]
 8015dba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015dbe:	4b10      	ldr	r3, [pc, #64]	; (8015e00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015dc0:	881b      	ldrh	r3, [r3, #0]
 8015dc2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015dc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015dc8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015dcc:	f7f7 fcaa 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8015dd0:	6803      	ldr	r3, [r0, #0]
 8015dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd4:	4798      	blx	r3
 8015dd6:	23ff      	movs	r3, #255	; 0xff
 8015dd8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015ddc:	a903      	add	r1, sp, #12
 8015dde:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015de2:	6860      	ldr	r0, [r4, #4]
 8015de4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015de8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015dec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015df0:	6803      	ldr	r3, [r0, #0]
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	4798      	blx	r3
 8015df6:	4630      	mov	r0, r6
 8015df8:	b00c      	add	sp, #48	; 0x30
 8015dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dfe:	bf00      	nop
 8015e00:	2003bd02 	.word	0x2003bd02

08015e04 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e06:	b085      	sub	sp, #20
 8015e08:	4605      	mov	r5, r0
 8015e0a:	ac02      	add	r4, sp, #8
 8015e0c:	e884 0006 	stmia.w	r4, {r1, r2}
 8015e10:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015e14:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015e18:	f7ff fde6 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e1c:	4631      	mov	r1, r6
 8015e1e:	4603      	mov	r3, r0
 8015e20:	463a      	mov	r2, r7
 8015e22:	4628      	mov	r0, r5
 8015e24:	f7ff ff08 	bl	8015c38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e28:	4a05      	ldr	r2, [pc, #20]	; (8015e40 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015e2a:	682b      	ldr	r3, [r5, #0]
 8015e2c:	8812      	ldrh	r2, [r2, #0]
 8015e2e:	9200      	str	r2, [sp, #0]
 8015e30:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8015e32:	4603      	mov	r3, r0
 8015e34:	4628      	mov	r0, r5
 8015e36:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015e3a:	47b0      	blx	r6
 8015e3c:	b005      	add	sp, #20
 8015e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e40:	2003bd02 	.word	0x2003bd02

08015e44 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015e44:	b570      	push	{r4, r5, r6, lr}
 8015e46:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	b19b      	cbz	r3, 8015e76 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015e4e:	2002      	movs	r0, #2
 8015e50:	f7fb f9c6 	bl	80111e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015e54:	2300      	movs	r3, #0
 8015e56:	4620      	mov	r0, r4
 8015e58:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015e5c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015e60:	6823      	ldr	r3, [r4, #0]
 8015e62:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8015e66:	f7ff fdbf 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e6a:	4601      	mov	r1, r0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	462b      	mov	r3, r5
 8015e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e74:	4718      	bx	r3
 8015e76:	bd70      	pop	{r4, r5, r6, pc}

08015e78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015e78:	b538      	push	{r3, r4, r5, lr}
 8015e7a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8015e7e:	4604      	mov	r4, r0
 8015e80:	460d      	mov	r5, r1
 8015e82:	428b      	cmp	r3, r1
 8015e84:	d006      	beq.n	8015e94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015e86:	6803      	ldr	r3, [r0, #0]
 8015e88:	b929      	cbnz	r1, 8015e96 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015e8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015e8e:	4798      	blx	r3
 8015e90:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8015e94:	bd38      	pop	{r3, r4, r5, pc}
 8015e96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015e9a:	e7f8      	b.n	8015e8e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015e9c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015e9c:	4b0d      	ldr	r3, [pc, #52]	; (8015ed4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015e9e:	b510      	push	{r4, lr}
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	b95b      	cbnz	r3, 8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ea6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d007      	beq.n	8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eae:	6840      	ldr	r0, [r0, #4]
 8015eb0:	f000 f926 	bl	8016100 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015eb4:	b118      	cbz	r0, 8015ebe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eb6:	6862      	ldr	r2, [r4, #4]
 8015eb8:	7a53      	ldrb	r3, [r2, #9]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d0fc      	beq.n	8015eb8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015ebe:	f7fc fc07 	bl	80126d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	f7ff ffd7 	bl	8015e78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f7ff fd8c 	bl	80159e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ed0:	bd10      	pop	{r4, pc}
 8015ed2:	bf00      	nop
 8015ed4:	2003bd06 	.word	0x2003bd06

08015ed8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8015ed8:	b570      	push	{r4, r5, r6, lr}
 8015eda:	4604      	mov	r4, r0
 8015edc:	6803      	ldr	r3, [r0, #0]
 8015ede:	b919      	cbnz	r1, 8015ee8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ee6:	4718      	bx	r3
 8015ee8:	2200      	movs	r2, #0
 8015eea:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8015eee:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8015ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ef4:	4798      	blx	r3
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8015efc:	4620      	mov	r0, r4
 8015efe:	2101      	movs	r1, #1
 8015f00:	f7ff ffba 	bl	8015e78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015f04:	4628      	mov	r0, r5
 8015f06:	bd70      	pop	{r4, r5, r6, pc}

08015f08 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015f08:	4770      	bx	lr

08015f0a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015f0a:	2000      	movs	r0, #0
 8015f0c:	4770      	bx	lr

08015f0e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015f0e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015f12:	1a13      	subs	r3, r2, r0
 8015f14:	4258      	negs	r0, r3
 8015f16:	4158      	adcs	r0, r3
 8015f18:	4770      	bx	lr

08015f1a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015f1a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015f1e:	1a9b      	subs	r3, r3, r2
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	bfdc      	itt	le
 8015f24:	6882      	ldrle	r2, [r0, #8]
 8015f26:	189b      	addle	r3, r3, r2
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	bfcc      	ite	gt
 8015f2c:	2000      	movgt	r0, #0
 8015f2e:	2001      	movle	r0, #1
 8015f30:	4770      	bx	lr

08015f32 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015f32:	6902      	ldr	r2, [r0, #16]
 8015f34:	6843      	ldr	r3, [r0, #4]
 8015f36:	2024      	movs	r0, #36	; 0x24
 8015f38:	fb00 3002 	mla	r0, r0, r2, r3
 8015f3c:	4770      	bx	lr

08015f3e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015f3e:	6803      	ldr	r3, [r0, #0]
 8015f40:	691b      	ldr	r3, [r3, #16]
 8015f42:	4718      	bx	r3

08015f44 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015f44:	2301      	movs	r3, #1
 8015f46:	b570      	push	{r4, r5, r6, lr}
 8015f48:	7203      	strb	r3, [r0, #8]
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	6840      	ldr	r0, [r0, #4]
 8015f4e:	6803      	ldr	r3, [r0, #0]
 8015f50:	699b      	ldr	r3, [r3, #24]
 8015f52:	4798      	blx	r3
 8015f54:	6803      	ldr	r3, [r0, #0]
 8015f56:	4605      	mov	r5, r0
 8015f58:	2b40      	cmp	r3, #64	; 0x40
 8015f5a:	d00c      	beq.n	8015f76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f5c:	d810      	bhi.n	8015f80 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015f5e:	2b04      	cmp	r3, #4
 8015f60:	d01d      	beq.n	8015f9e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015f62:	d804      	bhi.n	8015f6e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d006      	beq.n	8015f76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f68:	2b02      	cmp	r3, #2
 8015f6a:	d02c      	beq.n	8015fc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	2b08      	cmp	r3, #8
 8015f70:	d01d      	beq.n	8015fae <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015f72:	2b20      	cmp	r3, #32
 8015f74:	d1fa      	bne.n	8015f6c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015f76:	6823      	ldr	r3, [r4, #0]
 8015f78:	4620      	mov	r0, r4
 8015f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f7c:	4798      	blx	r3
 8015f7e:	e013      	b.n	8015fa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f84:	d0f7      	beq.n	8015f76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f86:	d804      	bhi.n	8015f92 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015f88:	2b80      	cmp	r3, #128	; 0x80
 8015f8a:	d0f4      	beq.n	8015f76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f90:	e7f0      	b.n	8015f74 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015f96:	d0ee      	beq.n	8015f76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015f9c:	e7e5      	b.n	8015f6a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015f9e:	6823      	ldr	r3, [r4, #0]
 8015fa0:	7f01      	ldrb	r1, [r0, #28]
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fa6:	4798      	blx	r3
 8015fa8:	6823      	ldr	r3, [r4, #0]
 8015faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fac:	e006      	b.n	8015fbc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015fae:	6823      	ldr	r3, [r4, #0]
 8015fb0:	7f01      	ldrb	r1, [r0, #28]
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fb6:	4798      	blx	r3
 8015fb8:	6823      	ldr	r3, [r4, #0]
 8015fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fbc:	4629      	mov	r1, r5
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fc4:	4718      	bx	r3
 8015fc6:	6823      	ldr	r3, [r4, #0]
 8015fc8:	4620      	mov	r0, r4
 8015fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fcc:	4798      	blx	r3
 8015fce:	e7f3      	b.n	8015fb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015fd0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015fd0:	4770      	bx	lr

08015fd2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015fd2:	4770      	bx	lr

08015fd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015fd4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015fd8:	b510      	push	{r4, lr}
 8015fda:	1ad2      	subs	r2, r2, r3
 8015fdc:	2a00      	cmp	r2, #0
 8015fde:	bfdc      	itt	le
 8015fe0:	6884      	ldrle	r4, [r0, #8]
 8015fe2:	1912      	addle	r2, r2, r4
 8015fe4:	2a01      	cmp	r2, #1
 8015fe6:	dd16      	ble.n	8016016 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015fe8:	6842      	ldr	r2, [r0, #4]
 8015fea:	2424      	movs	r4, #36	; 0x24
 8015fec:	fb04 2303 	mla	r3, r4, r3, r2
 8015ff0:	f101 0220 	add.w	r2, r1, #32
 8015ff4:	f851 4b04 	ldr.w	r4, [r1], #4
 8015ff8:	4291      	cmp	r1, r2
 8015ffa:	f843 4b04 	str.w	r4, [r3], #4
 8015ffe:	d1f9      	bne.n	8015ff4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8016000:	780a      	ldrb	r2, [r1, #0]
 8016002:	701a      	strb	r2, [r3, #0]
 8016004:	68c3      	ldr	r3, [r0, #12]
 8016006:	6882      	ldr	r2, [r0, #8]
 8016008:	f3bf 8f5b 	dmb	ish
 801600c:	3301      	adds	r3, #1
 801600e:	429a      	cmp	r2, r3
 8016010:	bfd8      	it	le
 8016012:	1a9b      	suble	r3, r3, r2
 8016014:	60c3      	str	r3, [r0, #12]
 8016016:	bd10      	pop	{r4, pc}

08016018 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016018:	6903      	ldr	r3, [r0, #16]
 801601a:	6882      	ldr	r2, [r0, #8]
 801601c:	f3bf 8f5b 	dmb	ish
 8016020:	3301      	adds	r3, #1
 8016022:	429a      	cmp	r2, r3
 8016024:	bfd8      	it	le
 8016026:	1a9b      	suble	r3, r3, r2
 8016028:	6103      	str	r3, [r0, #16]
 801602a:	4770      	bx	lr

0801602c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801602c:	b570      	push	{r4, r5, r6, lr}
 801602e:	4604      	mov	r4, r0
 8016030:	460e      	mov	r6, r1
 8016032:	6860      	ldr	r0, [r4, #4]
 8016034:	6803      	ldr	r3, [r0, #0]
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	4798      	blx	r3
 801603a:	2800      	cmp	r0, #0
 801603c:	d1f9      	bne.n	8016032 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801603e:	4d0d      	ldr	r5, [pc, #52]	; (8016074 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016040:	6828      	ldr	r0, [r5, #0]
 8016042:	6803      	ldr	r3, [r0, #0]
 8016044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016046:	4798      	blx	r3
 8016048:	f7fc fb5c 	bl	8012704 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801604c:	6828      	ldr	r0, [r5, #0]
 801604e:	2101      	movs	r1, #1
 8016050:	f7ff ff12 	bl	8015e78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016054:	6860      	ldr	r0, [r4, #4]
 8016056:	4631      	mov	r1, r6
 8016058:	6803      	ldr	r3, [r0, #0]
 801605a:	689b      	ldr	r3, [r3, #8]
 801605c:	4798      	blx	r3
 801605e:	6823      	ldr	r3, [r4, #0]
 8016060:	4620      	mov	r0, r4
 8016062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016064:	4798      	blx	r3
 8016066:	6828      	ldr	r0, [r5, #0]
 8016068:	6803      	ldr	r3, [r0, #0]
 801606a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801606e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016070:	4718      	bx	r3
 8016072:	bf00      	nop
 8016074:	2003bd08 	.word	0x2003bd08

08016078 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016078:	b508      	push	{r3, lr}
 801607a:	f7fc fb29 	bl	80126d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801607e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016082:	f7fc bb33 	b.w	80126ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016086 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016086:	b510      	push	{r4, lr}
 8016088:	4604      	mov	r4, r0
 801608a:	6840      	ldr	r0, [r0, #4]
 801608c:	6803      	ldr	r3, [r0, #0]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	4798      	blx	r3
 8016092:	b948      	cbnz	r0, 80160a8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016094:	7a63      	ldrb	r3, [r4, #9]
 8016096:	b13b      	cbz	r3, 80160a8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016098:	7a23      	ldrb	r3, [r4, #8]
 801609a:	b92b      	cbnz	r3, 80160a8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801609c:	6823      	ldr	r3, [r4, #0]
 801609e:	4620      	mov	r0, r4
 80160a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160a6:	4718      	bx	r3
 80160a8:	bd10      	pop	{r4, pc}

080160aa <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80160aa:	b570      	push	{r4, r5, r6, lr}
 80160ac:	4604      	mov	r4, r0
 80160ae:	6840      	ldr	r0, [r0, #4]
 80160b0:	6803      	ldr	r3, [r0, #0]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4798      	blx	r3
 80160b6:	4605      	mov	r5, r0
 80160b8:	b930      	cbnz	r0, 80160c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80160ba:	7a23      	ldrb	r3, [r4, #8]
 80160bc:	b123      	cbz	r3, 80160c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80160be:	6860      	ldr	r0, [r4, #4]
 80160c0:	6803      	ldr	r3, [r0, #0]
 80160c2:	695b      	ldr	r3, [r3, #20]
 80160c4:	4798      	blx	r3
 80160c6:	7225      	strb	r5, [r4, #8]
 80160c8:	6860      	ldr	r0, [r4, #4]
 80160ca:	6803      	ldr	r3, [r0, #0]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4798      	blx	r3
 80160d0:	b928      	cbnz	r0, 80160de <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80160d2:	6823      	ldr	r3, [r4, #0]
 80160d4:	4620      	mov	r0, r4
 80160d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160dc:	4718      	bx	r3
 80160de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160e2:	f7fc bb1b 	b.w	801271c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080160e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80160e8:	b510      	push	{r4, lr}
 80160ea:	6082      	str	r2, [r0, #8]
 80160ec:	2200      	movs	r2, #0
 80160ee:	4c03      	ldr	r4, [pc, #12]	; (80160fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80160f0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80160f4:	e9c0 4100 	strd	r4, r1, [r0]
 80160f8:	bd10      	pop	{r4, pc}
 80160fa:	bf00      	nop
 80160fc:	0802cdc0 	.word	0x0802cdc0

08016100 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016100:	6840      	ldr	r0, [r0, #4]
 8016102:	6803      	ldr	r3, [r0, #0]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	4718      	bx	r3

08016108 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 8016108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801610c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016110:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8016114:	68c1      	ldr	r1, [r0, #12]
 8016116:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801611a:	2fff      	cmp	r7, #255	; 0xff
 801611c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8016120:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8016124:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8016128:	d105      	bne.n	8016136 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 801612a:	f842 1b04 	str.w	r1, [r2], #4
 801612e:	4594      	cmp	ip, r2
 8016130:	d8fb      	bhi.n	801612a <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 8016132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016136:	6816      	ldr	r6, [r2, #0]
 8016138:	ea5f 6916 	movs.w	r9, r6, lsr #24
 801613c:	d104      	bne.n	8016148 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 801613e:	6011      	str	r1, [r2, #0]
 8016140:	3204      	adds	r2, #4
 8016142:	4594      	cmp	ip, r2
 8016144:	d8f7      	bhi.n	8016136 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8016146:	e7f4      	b.n	8016132 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 8016148:	2f00      	cmp	r7, #0
 801614a:	d0f9      	beq.n	8016140 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 801614c:	fb07 f809 	mul.w	r8, r7, r9
 8016150:	b2f5      	uxtb	r5, r6
 8016152:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8016156:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801615a:	f108 0301 	add.w	r3, r8, #1
 801615e:	fb09 fa05 	mul.w	sl, r9, r5
 8016162:	eb03 2328 	add.w	r3, r3, r8, asr #8
 8016166:	ea4f 2823 	mov.w	r8, r3, asr #8
 801616a:	eb07 0309 	add.w	r3, r7, r9
 801616e:	eba3 0308 	sub.w	r3, r3, r8
 8016172:	fa5f fe83 	uxtb.w	lr, r3
 8016176:	7c83      	ldrb	r3, [r0, #18]
 8016178:	fb03 a307 	mla	r3, r3, r7, sl
 801617c:	fb04 fa09 	mul.w	sl, r4, r9
 8016180:	fb08 3515 	mls	r5, r8, r5, r3
 8016184:	7c43      	ldrb	r3, [r0, #17]
 8016186:	fb03 a307 	mla	r3, r3, r7, sl
 801618a:	fb95 f5fe 	sdiv	r5, r5, lr
 801618e:	fb08 3414 	mls	r4, r8, r4, r3
 8016192:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 8016196:	fb06 f309 	mul.w	r3, r6, r9
 801619a:	fb94 f4fe 	sdiv	r4, r4, lr
 801619e:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 80161a2:	7c05      	ldrb	r5, [r0, #16]
 80161a4:	fb05 3307 	mla	r3, r5, r7, r3
 80161a8:	fb08 3316 	mls	r3, r8, r6, r3
 80161ac:	fb93 f3fe 	sdiv	r3, r3, lr
 80161b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80161b4:	6013      	str	r3, [r2, #0]
 80161b6:	e7c3      	b.n	8016140 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

080161b8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80161b8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80161bc:	4770      	bx	lr

080161be <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80161be:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80161c2:	4770      	bx	lr

080161c4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80161c4:	b510      	push	{r4, lr}
 80161c6:	2200      	movs	r2, #0
 80161c8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80161cc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80161d0:	8002      	strh	r2, [r0, #0]
 80161d2:	8042      	strh	r2, [r0, #2]
 80161d4:	8084      	strh	r4, [r0, #4]
 80161d6:	80c1      	strh	r1, [r0, #6]
 80161d8:	bd10      	pop	{r4, pc}

080161da <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80161da:	2200      	movs	r2, #0
 80161dc:	8002      	strh	r2, [r0, #0]
 80161de:	8042      	strh	r2, [r0, #2]
 80161e0:	8082      	strh	r2, [r0, #4]
 80161e2:	80c2      	strh	r2, [r0, #6]
 80161e4:	4770      	bx	lr
	...

080161e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80161e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80161ea:	6803      	ldr	r3, [r0, #0]
 80161ec:	460d      	mov	r5, r1
 80161ee:	4604      	mov	r4, r0
 80161f0:	4601      	mov	r1, r0
 80161f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161f4:	a802      	add	r0, sp, #8
 80161f6:	4798      	blx	r3
 80161f8:	6828      	ldr	r0, [r5, #0]
 80161fa:	6869      	ldr	r1, [r5, #4]
 80161fc:	466b      	mov	r3, sp
 80161fe:	c303      	stmia	r3!, {r0, r1}
 8016200:	4668      	mov	r0, sp
 8016202:	4619      	mov	r1, r3
 8016204:	f7fe ff6e 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 8016208:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801620a:	b1a8      	cbz	r0, 8016238 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801620c:	6803      	ldr	r3, [r0, #0]
 801620e:	1d21      	adds	r1, r4, #4
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	4798      	blx	r3
 8016214:	b180      	cbz	r0, 8016238 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8016216:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	dd0c      	ble.n	8016238 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801621e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8016222:	2d00      	cmp	r5, #0
 8016224:	dd08      	ble.n	8016238 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8016226:	4a2d      	ldr	r2, [pc, #180]	; (80162dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8016228:	7812      	ldrb	r2, [r2, #0]
 801622a:	b13a      	cbz	r2, 801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801622c:	2a01      	cmp	r2, #1
 801622e:	d02d      	beq.n	801628c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8016230:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016232:	6803      	ldr	r3, [r0, #0]
 8016234:	691b      	ldr	r3, [r3, #16]
 8016236:	4798      	blx	r3
 8016238:	b004      	add	sp, #16
 801623a:	bd70      	pop	{r4, r5, r6, pc}
 801623c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016240:	441d      	add	r5, r3
 8016242:	b2ad      	uxth	r5, r5
 8016244:	b22e      	sxth	r6, r5
 8016246:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801624a:	42b3      	cmp	r3, r6
 801624c:	daf0      	bge.n	8016230 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	4669      	mov	r1, sp
 8016252:	4620      	mov	r0, r4
 8016254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016256:	4798      	blx	r3
 8016258:	b940      	cbnz	r0, 801626c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801625a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801625e:	2b01      	cmp	r3, #1
 8016260:	d004      	beq.n	801626c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8016262:	3301      	adds	r3, #1
 8016264:	105b      	asrs	r3, r3, #1
 8016266:	f8ad 3006 	strh.w	r3, [sp, #6]
 801626a:	e7f0      	b.n	801624e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801626c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016270:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016274:	4413      	add	r3, r2
 8016276:	b29b      	uxth	r3, r3
 8016278:	441a      	add	r2, r3
 801627a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801627e:	b212      	sxth	r2, r2
 8016280:	4296      	cmp	r6, r2
 8016282:	dae0      	bge.n	8016246 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016284:	1aeb      	subs	r3, r5, r3
 8016286:	f8ad 3006 	strh.w	r3, [sp, #6]
 801628a:	e7dc      	b.n	8016246 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801628c:	f8bd 5000 	ldrh.w	r5, [sp]
 8016290:	441d      	add	r5, r3
 8016292:	b2ad      	uxth	r5, r5
 8016294:	b22e      	sxth	r6, r5
 8016296:	f9bd 3000 	ldrsh.w	r3, [sp]
 801629a:	42b3      	cmp	r3, r6
 801629c:	dac8      	bge.n	8016230 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	4669      	mov	r1, sp
 80162a2:	4620      	mov	r0, r4
 80162a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162a6:	4798      	blx	r3
 80162a8:	b940      	cbnz	r0, 80162bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80162aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d004      	beq.n	80162bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80162b2:	3301      	adds	r3, #1
 80162b4:	105b      	asrs	r3, r3, #1
 80162b6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80162ba:	e7f0      	b.n	801629e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80162bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80162c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80162c4:	4413      	add	r3, r2
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	441a      	add	r2, r3
 80162ca:	f8ad 3000 	strh.w	r3, [sp]
 80162ce:	b212      	sxth	r2, r2
 80162d0:	4296      	cmp	r6, r2
 80162d2:	dae0      	bge.n	8016296 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80162d4:	1aeb      	subs	r3, r5, r3
 80162d6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80162da:	e7dc      	b.n	8016296 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80162dc:	2003bd00 	.word	0x2003bd00

080162e0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80162e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162e2:	6803      	ldr	r3, [r0, #0]
 80162e4:	4604      	mov	r4, r0
 80162e6:	4601      	mov	r1, r0
 80162e8:	4668      	mov	r0, sp
 80162ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162ec:	4798      	blx	r3
 80162ee:	2100      	movs	r1, #0
 80162f0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80162f4:	4668      	mov	r0, sp
 80162f6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80162fa:	9102      	str	r1, [sp, #8]
 80162fc:	a902      	add	r1, sp, #8
 80162fe:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016302:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016306:	f7fe feed 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	4669      	mov	r1, sp
 801630e:	4620      	mov	r0, r4
 8016310:	691b      	ldr	r3, [r3, #16]
 8016312:	4798      	blx	r3
 8016314:	b004      	add	sp, #16
 8016316:	bd10      	pop	{r4, pc}

08016318 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016318:	2101      	movs	r1, #1
 801631a:	2200      	movs	r2, #0
 801631c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016320:	490a      	ldr	r1, [pc, #40]	; (801634c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8016322:	8082      	strh	r2, [r0, #4]
 8016324:	6001      	str	r1, [r0, #0]
 8016326:	21ff      	movs	r1, #255	; 0xff
 8016328:	80c2      	strh	r2, [r0, #6]
 801632a:	8102      	strh	r2, [r0, #8]
 801632c:	8142      	strh	r2, [r0, #10]
 801632e:	8182      	strh	r2, [r0, #12]
 8016330:	81c2      	strh	r2, [r0, #14]
 8016332:	8202      	strh	r2, [r0, #16]
 8016334:	8242      	strh	r2, [r0, #18]
 8016336:	61c2      	str	r2, [r0, #28]
 8016338:	8402      	strh	r2, [r0, #32]
 801633a:	8442      	strh	r2, [r0, #34]	; 0x22
 801633c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016340:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8016344:	6282      	str	r2, [r0, #40]	; 0x28
 8016346:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801634a:	4770      	bx	lr
 801634c:	0802ce1c 	.word	0x0802ce1c

08016350 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016350:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8016354:	4602      	mov	r2, r0
 8016356:	cb03      	ldmia	r3!, {r0, r1}
 8016358:	6010      	str	r0, [r2, #0]
 801635a:	4610      	mov	r0, r2
 801635c:	6051      	str	r1, [r2, #4]
 801635e:	4770      	bx	lr

08016360 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016360:	b507      	push	{r0, r1, r2, lr}
 8016362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016366:	ab01      	add	r3, sp, #4
 8016368:	6809      	ldr	r1, [r1, #0]
 801636a:	6800      	ldr	r0, [r0, #0]
 801636c:	f004 fd5b 	bl	801ae26 <_ZN8touchgfx6muldivElllRl>
 8016370:	b003      	add	sp, #12
 8016372:	f85d fb04 	ldr.w	pc, [sp], #4

08016376 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016376:	6800      	ldr	r0, [r0, #0]
 8016378:	2800      	cmp	r0, #0
 801637a:	bfb9      	ittee	lt
 801637c:	2320      	movlt	r3, #32
 801637e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016382:	301f      	addge	r0, #31
 8016384:	1140      	asrge	r0, r0, #5
 8016386:	4770      	bx	lr

08016388 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8016388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8016390:	b089      	sub	sp, #36	; 0x24
 8016392:	4604      	mov	r4, r0
 8016394:	b353      	cbz	r3, 80163ec <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8016396:	6803      	ldr	r3, [r0, #0]
 8016398:	4601      	mov	r1, r0
 801639a:	a802      	add	r0, sp, #8
 801639c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801639e:	4798      	blx	r3
 80163a0:	2220      	movs	r2, #32
 80163a2:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80163a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80163aa:	f8d4 b000 	ldr.w	fp, [r4]
 80163ae:	fb9a f0f2 	sdiv	r0, sl, r2
 80163b2:	fb91 f5f2 	sdiv	r5, r1, r2
 80163b6:	fb93 f6f2 	sdiv	r6, r3, r2
 80163ba:	1b40      	subs	r0, r0, r5
 80163bc:	0076      	lsls	r6, r6, #1
 80163be:	2800      	cmp	r0, #0
 80163c0:	bfb8      	it	lt
 80163c2:	4240      	neglt	r0, r0
 80163c4:	4286      	cmp	r6, r0
 80163c6:	dc0c      	bgt.n	80163e2 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 80163c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80163ca:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80163ce:	fb95 f0f2 	sdiv	r0, r5, r2
 80163d2:	fb98 f7f2 	sdiv	r7, r8, r2
 80163d6:	1bc0      	subs	r0, r0, r7
 80163d8:	2800      	cmp	r0, #0
 80163da:	bfb8      	it	lt
 80163dc:	4240      	neglt	r0, r0
 80163de:	4286      	cmp	r6, r0
 80163e0:	dd07      	ble.n	80163f2 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 80163e2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80163e6:	a902      	add	r1, sp, #8
 80163e8:	4620      	mov	r0, r4
 80163ea:	4798      	blx	r3
 80163ec:	b009      	add	sp, #36	; 0x24
 80163ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f2:	eb01 060a 	add.w	r6, r1, sl
 80163f6:	2002      	movs	r0, #2
 80163f8:	eb08 0705 	add.w	r7, r8, r5
 80163fc:	3301      	adds	r3, #1
 80163fe:	f10d 0920 	add.w	r9, sp, #32
 8016402:	9101      	str	r1, [sp, #4]
 8016404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016408:	fb96 f6f0 	sdiv	r6, r6, r0
 801640c:	fb97 f7f0 	sdiv	r7, r7, r0
 8016410:	4103      	asrs	r3, r0
 8016412:	b236      	sxth	r6, r6
 8016414:	b23f      	sxth	r7, r7
 8016416:	f849 3d08 	str.w	r3, [r9, #-8]!
 801641a:	4648      	mov	r0, r9
 801641c:	fb96 f6f2 	sdiv	r6, r6, r2
 8016420:	fb97 f7f2 	sdiv	r7, r7, r2
 8016424:	f7ff ffa7 	bl	8016376 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016428:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801642c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8016430:	fa1f fe87 	uxth.w	lr, r7
 8016434:	9901      	ldr	r1, [sp, #4]
 8016436:	fa1f fc86 	uxth.w	ip, r6
 801643a:	4293      	cmp	r3, r2
 801643c:	b280      	uxth	r0, r0
 801643e:	eba1 0a0a 	sub.w	sl, r1, sl
 8016442:	da54      	bge.n	80164ee <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8016444:	ebac 0100 	sub.w	r1, ip, r0
 8016448:	f1ba 0f00 	cmp.w	sl, #0
 801644c:	4460      	add	r0, ip
 801644e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8016452:	b289      	uxth	r1, r1
 8016454:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8016458:	b280      	uxth	r0, r0
 801645a:	b20e      	sxth	r6, r1
 801645c:	da29      	bge.n	80164b2 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801645e:	eba8 0505 	sub.w	r5, r8, r5
 8016462:	2d00      	cmp	r5, #0
 8016464:	da2a      	bge.n	80164bc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8016466:	fa1f f88a 	uxth.w	r8, sl
 801646a:	f8ad a010 	strh.w	sl, [sp, #16]
 801646e:	fa1f f58c 	uxth.w	r5, ip
 8016472:	f8ad c012 	strh.w	ip, [sp, #18]
 8016476:	eba0 0008 	sub.w	r0, r0, r8
 801647a:	4443      	add	r3, r8
 801647c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016480:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016484:	1a59      	subs	r1, r3, r1
 8016486:	ebae 0005 	sub.w	r0, lr, r5
 801648a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801648e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016492:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016496:	442a      	add	r2, r5
 8016498:	eba2 0e0e 	sub.w	lr, r2, lr
 801649c:	f8ad e01e 	strh.w	lr, [sp, #30]
 80164a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80164a4:	a904      	add	r1, sp, #16
 80164a6:	4620      	mov	r0, r4
 80164a8:	4798      	blx	r3
 80164aa:	6823      	ldr	r3, [r4, #0]
 80164ac:	4649      	mov	r1, r9
 80164ae:	691b      	ldr	r3, [r3, #16]
 80164b0:	e79a      	b.n	80163e8 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 80164b2:	d003      	beq.n	80164bc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80164b4:	eba8 0505 	sub.w	r5, r8, r5
 80164b8:	2d00      	cmp	r5, #0
 80164ba:	dcd4      	bgt.n	8016466 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 80164bc:	fa1f f88a 	uxth.w	r8, sl
 80164c0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80164c4:	fa1f f58c 	uxth.w	r5, ip
 80164c8:	f8ad c012 	strh.w	ip, [sp, #18]
 80164cc:	4443      	add	r3, r8
 80164ce:	eba0 0008 	sub.w	r0, r0, r8
 80164d2:	f8ad a018 	strh.w	sl, [sp, #24]
 80164d6:	1a59      	subs	r1, r3, r1
 80164d8:	ebae 0305 	sub.w	r3, lr, r5
 80164dc:	f8ad 701a 	strh.w	r7, [sp, #26]
 80164e0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80164e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164e8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80164ec:	e7d3      	b.n	8016496 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 80164ee:	ebae 0100 	sub.w	r1, lr, r0
 80164f2:	f1ba 0f00 	cmp.w	sl, #0
 80164f6:	4470      	add	r0, lr
 80164f8:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80164fc:	b289      	uxth	r1, r1
 80164fe:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8016502:	b280      	uxth	r0, r0
 8016504:	b20f      	sxth	r7, r1
 8016506:	da20      	bge.n	801654a <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8016508:	eba8 0505 	sub.w	r5, r8, r5
 801650c:	2d00      	cmp	r5, #0
 801650e:	da21      	bge.n	8016554 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8016510:	fa1f f88e 	uxth.w	r8, lr
 8016514:	f8ad e010 	strh.w	lr, [sp, #16]
 8016518:	fa1f f58a 	uxth.w	r5, sl
 801651c:	f8ad a012 	strh.w	sl, [sp, #18]
 8016520:	4443      	add	r3, r8
 8016522:	ebac 0e08 	sub.w	lr, ip, r8
 8016526:	442a      	add	r2, r5
 8016528:	1b40      	subs	r0, r0, r5
 801652a:	eba3 0c0c 	sub.w	ip, r3, ip
 801652e:	f8ad e014 	strh.w	lr, [sp, #20]
 8016532:	1a51      	subs	r1, r2, r1
 8016534:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016538:	f8ad 6018 	strh.w	r6, [sp, #24]
 801653c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8016540:	f8ad c01c 	strh.w	ip, [sp, #28]
 8016544:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016548:	e7aa      	b.n	80164a0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801654a:	d003      	beq.n	8016554 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801654c:	eba8 0505 	sub.w	r5, r8, r5
 8016550:	2d00      	cmp	r5, #0
 8016552:	dcdd      	bgt.n	8016510 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8016554:	fa1f f58e 	uxth.w	r5, lr
 8016558:	f8ad 7012 	strh.w	r7, [sp, #18]
 801655c:	fa1f f88a 	uxth.w	r8, sl
 8016560:	f8ad e010 	strh.w	lr, [sp, #16]
 8016564:	442b      	add	r3, r5
 8016566:	ebac 0705 	sub.w	r7, ip, r5
 801656a:	4442      	add	r2, r8
 801656c:	eba0 0008 	sub.w	r0, r0, r8
 8016570:	eba3 0c0c 	sub.w	ip, r3, ip
 8016574:	f8ad 7014 	strh.w	r7, [sp, #20]
 8016578:	1a51      	subs	r1, r2, r1
 801657a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801657e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8016582:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016586:	f8ad c01c 	strh.w	ip, [sp, #28]
 801658a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801658e:	e787      	b.n	80164a0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08016590 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016590:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016594:	fb90 f2f3 	sdiv	r2, r0, r3
 8016598:	fb02 0013 	mls	r0, r2, r3, r0
 801659c:	2800      	cmp	r0, #0
 801659e:	bfb8      	it	lt
 80165a0:	18c0      	addlt	r0, r0, r3
 80165a2:	4b0a      	ldr	r3, [pc, #40]	; (80165cc <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 80165a4:	285a      	cmp	r0, #90	; 0x5a
 80165a6:	dc02      	bgt.n	80165ae <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 80165a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80165ac:	4770      	bx	lr
 80165ae:	28b4      	cmp	r0, #180	; 0xb4
 80165b0:	dc02      	bgt.n	80165b8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 80165b2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80165b6:	e7f7      	b.n	80165a8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 80165b8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80165bc:	bfd4      	ite	le
 80165be:	38b4      	suble	r0, #180	; 0xb4
 80165c0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80165c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80165c8:	4240      	negs	r0, r0
 80165ca:	4770      	bx	lr
 80165cc:	0802cef8 	.word	0x0802cef8

080165d0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80165d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80165d4:	f04f 0300 	mov.w	r3, #0
 80165d8:	bf2c      	ite	cs
 80165da:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80165de:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80165e2:	1899      	adds	r1, r3, r2
 80165e4:	4288      	cmp	r0, r1
 80165e6:	bf24      	itt	cs
 80165e8:	1853      	addcs	r3, r2, r1
 80165ea:	1a40      	subcs	r0, r0, r1
 80165ec:	0892      	lsrs	r2, r2, #2
 80165ee:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80165f2:	d1f6      	bne.n	80165e2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80165f4:	4618      	mov	r0, r3
 80165f6:	4770      	bx	lr

080165f8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80165f8:	b510      	push	{r4, lr}
 80165fa:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80165fe:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016602:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016606:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801660a:	139b      	asrs	r3, r3, #14
 801660c:	13a4      	asrs	r4, r4, #14
 801660e:	429c      	cmp	r4, r3
 8016610:	bfb8      	it	lt
 8016612:	461c      	movlt	r4, r3
 8016614:	2c01      	cmp	r4, #1
 8016616:	dd07      	ble.n	8016628 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016618:	fb91 f1f4 	sdiv	r1, r1, r4
 801661c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016620:	f7ff ffea 	bl	80165f8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016624:	4360      	muls	r0, r4
 8016626:	bd10      	pop	{r4, pc}
 8016628:	4340      	muls	r0, r0
 801662a:	fb01 0001 	mla	r0, r1, r1, r0
 801662e:	f7ff ffcf 	bl	80165d0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016632:	e7f8      	b.n	8016626 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016634 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016634:	2800      	cmp	r0, #0
 8016636:	b508      	push	{r3, lr}
 8016638:	da05      	bge.n	8016646 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801663a:	4240      	negs	r0, r0
 801663c:	f7ff fffa 	bl	8016634 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016640:	4240      	negs	r0, r0
 8016642:	b240      	sxtb	r0, r0
 8016644:	bd08      	pop	{r3, pc}
 8016646:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801664a:	dc11      	bgt.n	8016670 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801664c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016650:	dd09      	ble.n	8016666 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016652:	4340      	muls	r0, r0
 8016654:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016658:	f7ff ffba 	bl	80165d0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801665c:	f7ff ffea 	bl	8016634 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016660:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016664:	e7ed      	b.n	8016642 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016666:	3003      	adds	r0, #3
 8016668:	4b02      	ldr	r3, [pc, #8]	; (8016674 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801666a:	10c0      	asrs	r0, r0, #3
 801666c:	5618      	ldrsb	r0, [r3, r0]
 801666e:	e7e9      	b.n	8016644 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016670:	2000      	movs	r0, #0
 8016672:	e7e7      	b.n	8016644 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016674:	0802ce9c 	.word	0x0802ce9c

08016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016678:	4281      	cmp	r1, r0
 801667a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801667c:	460c      	mov	r4, r1
 801667e:	4615      	mov	r5, r2
 8016680:	dd07      	ble.n	8016692 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8016682:	4601      	mov	r1, r0
 8016684:	4620      	mov	r0, r4
 8016686:	f7ff fff7 	bl	8016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801668a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801668e:	b003      	add	sp, #12
 8016690:	bd30      	pop	{r4, r5, pc}
 8016692:	f7ff ffb1 	bl	80165f8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016696:	6028      	str	r0, [r5, #0]
 8016698:	2800      	cmp	r0, #0
 801669a:	d0f8      	beq.n	801668e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 801669c:	4602      	mov	r2, r0
 801669e:	ab01      	add	r3, sp, #4
 80166a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80166a4:	4620      	mov	r0, r4
 80166a6:	f004 fbbe 	bl	801ae26 <_ZN8touchgfx6muldivElllRl>
 80166aa:	f7ff ffc3 	bl	8016634 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80166ae:	e7ee      	b.n	801668e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

080166b0 <_ZN8touchgfx4LineC1Ev>:
 80166b0:	b510      	push	{r4, lr}
 80166b2:	4604      	mov	r4, r0
 80166b4:	f7ff fe30 	bl	8016318 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80166b8:	4b0c      	ldr	r3, [pc, #48]	; (80166ec <_ZN8touchgfx4LineC1Ev+0x3c>)
 80166ba:	2220      	movs	r2, #32
 80166bc:	4620      	mov	r0, r4
 80166be:	6023      	str	r3, [r4, #0]
 80166c0:	2300      	movs	r3, #0
 80166c2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80166c4:	2212      	movs	r2, #18
 80166c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80166ca:	66e2      	str	r2, [r4, #108]	; 0x6c
 80166cc:	60a3      	str	r3, [r4, #8]
 80166ce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80166d2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80166d6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 80166da:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80166de:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80166e2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80166e6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80166ea:	bd10      	pop	{r4, pc}
 80166ec:	0802cfb8 	.word	0x0802cfb8

080166f0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80166f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80166f4:	6b47      	ldr	r7, [r0, #52]	; 0x34
 80166f6:	4604      	mov	r4, r0
 80166f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80166fa:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80166fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80166fe:	1aff      	subs	r7, r7, r3
 8016700:	eba5 0502 	sub.w	r5, r5, r2
 8016704:	d142      	bne.n	801678c <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8016706:	b955      	cbnz	r5, 801671e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8016708:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 801670c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8016710:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8016714:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8016718:	b002      	add	sp, #8
 801671a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671e:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8016722:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8016726:	4629      	mov	r1, r5
 8016728:	2502      	movs	r5, #2
 801672a:	4642      	mov	r2, r8
 801672c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801672e:	f004 fb99 	bl	801ae64 <_ZN8touchgfx6muldivElll>
 8016732:	4642      	mov	r2, r8
 8016734:	4639      	mov	r1, r7
 8016736:	fb90 f6f5 	sdiv	r6, r0, r5
 801673a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801673c:	f004 fb92 	bl	801ae64 <_ZN8touchgfx6muldivElll>
 8016740:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8016744:	fb90 f5f5 	sdiv	r5, r0, r5
 8016748:	f1b9 0f00 	cmp.w	r9, #0
 801674c:	d067      	beq.n	801681e <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 801674e:	f1b9 0f02 	cmp.w	r9, #2
 8016752:	d878      	bhi.n	8016846 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8016754:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016756:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016758:	1b93      	subs	r3, r2, r6
 801675a:	4432      	add	r2, r6
 801675c:	1b5b      	subs	r3, r3, r5
 801675e:	1b52      	subs	r2, r2, r5
 8016760:	6463      	str	r3, [r4, #68]	; 0x44
 8016762:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016764:	6522      	str	r2, [r4, #80]	; 0x50
 8016766:	18e9      	adds	r1, r5, r3
 8016768:	1b5b      	subs	r3, r3, r5
 801676a:	1b89      	subs	r1, r1, r6
 801676c:	1b9b      	subs	r3, r3, r6
 801676e:	6561      	str	r1, [r4, #84]	; 0x54
 8016770:	1b81      	subs	r1, r0, r6
 8016772:	4430      	add	r0, r6
 8016774:	4429      	add	r1, r5
 8016776:	4428      	add	r0, r5
 8016778:	64a1      	str	r1, [r4, #72]	; 0x48
 801677a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801677c:	64e0      	str	r0, [r4, #76]	; 0x4c
 801677e:	186f      	adds	r7, r5, r1
 8016780:	1b49      	subs	r1, r1, r5
 8016782:	4437      	add	r7, r6
 8016784:	4431      	add	r1, r6
 8016786:	65a7      	str	r7, [r4, #88]	; 0x58
 8016788:	65e1      	str	r1, [r4, #92]	; 0x5c
 801678a:	e05b      	b.n	8016844 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 801678c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8016790:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8016794:	2d00      	cmp	r5, #0
 8016796:	d0c6      	beq.n	8016726 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8016798:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801679c:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80167a0:	fb93 f2f8 	sdiv	r2, r3, r8
 80167a4:	fb08 3312 	mls	r3, r8, r2, r3
 80167a8:	b353      	cbz	r3, 8016800 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 80167aa:	fb98 f2f3 	sdiv	r2, r8, r3
 80167ae:	fb03 8812 	mls	r8, r3, r2, r8
 80167b2:	f1b8 0f00 	cmp.w	r8, #0
 80167b6:	d1f3      	bne.n	80167a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 80167b8:	2b01      	cmp	r3, #1
 80167ba:	f24b 5104 	movw	r1, #46340	; 0xb504
 80167be:	bf1c      	itt	ne
 80167c0:	fb97 f7f3 	sdivne	r7, r7, r3
 80167c4:	fb95 f5f3 	sdivne	r5, r5, r3
 80167c8:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 80167cc:	4608      	mov	r0, r1
 80167ce:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80167d2:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 80167d6:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80167da:	428b      	cmp	r3, r1
 80167dc:	dd01      	ble.n	80167e2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 80167de:	428a      	cmp	r2, r1
 80167e0:	dc10      	bgt.n	8016804 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 80167e2:	fb90 f3f3 	sdiv	r3, r0, r3
 80167e6:	fb90 f2f2 	sdiv	r2, r0, r2
 80167ea:	4293      	cmp	r3, r2
 80167ec:	bfa8      	it	ge
 80167ee:	4613      	movge	r3, r2
 80167f0:	435f      	muls	r7, r3
 80167f2:	435d      	muls	r5, r3
 80167f4:	4629      	mov	r1, r5
 80167f6:	4638      	mov	r0, r7
 80167f8:	f7ff fefe 	bl	80165f8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80167fc:	4680      	mov	r8, r0
 80167fe:	e792      	b.n	8016726 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8016800:	4643      	mov	r3, r8
 8016802:	e7d9      	b.n	80167b8 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8016804:	fb93 f3f1 	sdiv	r3, r3, r1
 8016808:	fb92 f2f1 	sdiv	r2, r2, r1
 801680c:	4293      	cmp	r3, r2
 801680e:	bfcc      	ite	gt
 8016810:	3301      	addgt	r3, #1
 8016812:	1c53      	addle	r3, r2, #1
 8016814:	fb97 f7f3 	sdiv	r7, r7, r3
 8016818:	fb95 f5f3 	sdiv	r5, r5, r3
 801681c:	e7ea      	b.n	80167f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 801681e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016820:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016822:	1b93      	subs	r3, r2, r6
 8016824:	4432      	add	r2, r6
 8016826:	6463      	str	r3, [r4, #68]	; 0x44
 8016828:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801682a:	6522      	str	r2, [r4, #80]	; 0x50
 801682c:	18e9      	adds	r1, r5, r3
 801682e:	1b5b      	subs	r3, r3, r5
 8016830:	6561      	str	r1, [r4, #84]	; 0x54
 8016832:	1b81      	subs	r1, r0, r6
 8016834:	4430      	add	r0, r6
 8016836:	64a1      	str	r1, [r4, #72]	; 0x48
 8016838:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801683a:	64e0      	str	r0, [r4, #76]	; 0x4c
 801683c:	186f      	adds	r7, r5, r1
 801683e:	1b49      	subs	r1, r1, r5
 8016840:	65a7      	str	r7, [r4, #88]	; 0x58
 8016842:	65e1      	str	r1, [r4, #92]	; 0x5c
 8016844:	6623      	str	r3, [r4, #96]	; 0x60
 8016846:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8016848:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801684c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801684e:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8016852:	9200      	str	r2, [sp, #0]
 8016854:	9301      	str	r3, [sp, #4]
 8016856:	680f      	ldr	r7, [r1, #0]
 8016858:	3104      	adds	r1, #4
 801685a:	9800      	ldr	r0, [sp, #0]
 801685c:	42ba      	cmp	r2, r7
 801685e:	bfa8      	it	ge
 8016860:	463a      	movge	r2, r7
 8016862:	4287      	cmp	r7, r0
 8016864:	9801      	ldr	r0, [sp, #4]
 8016866:	bfc8      	it	gt
 8016868:	9700      	strgt	r7, [sp, #0]
 801686a:	68cf      	ldr	r7, [r1, #12]
 801686c:	42bb      	cmp	r3, r7
 801686e:	bfa8      	it	ge
 8016870:	463b      	movge	r3, r7
 8016872:	4287      	cmp	r7, r0
 8016874:	bfc8      	it	gt
 8016876:	9701      	strgt	r7, [sp, #4]
 8016878:	458c      	cmp	ip, r1
 801687a:	d1ec      	bne.n	8016856 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801687c:	2720      	movs	r7, #32
 801687e:	4668      	mov	r0, sp
 8016880:	fb92 f8f7 	sdiv	r8, r2, r7
 8016884:	fb93 f7f7 	sdiv	r7, r3, r7
 8016888:	f7ff fd75 	bl	8016376 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801688c:	4682      	mov	sl, r0
 801688e:	a801      	add	r0, sp, #4
 8016890:	f7ff fd71 	bl	8016376 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016894:	ebaa 0208 	sub.w	r2, sl, r8
 8016898:	1bc0      	subs	r0, r0, r7
 801689a:	f1b9 0f01 	cmp.w	r9, #1
 801689e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 80168a2:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 80168a6:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 80168aa:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 80168ae:	f47f af33 	bne.w	8016718 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 80168b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168b6:	1b83      	subs	r3, r0, r6
 80168b8:	6463      	str	r3, [r4, #68]	; 0x44
 80168ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168bc:	18ea      	adds	r2, r5, r3
 80168be:	6562      	str	r2, [r4, #84]	; 0x54
 80168c0:	1b8a      	subs	r2, r1, r6
 80168c2:	4431      	add	r1, r6
 80168c4:	4406      	add	r6, r0
 80168c6:	64a2      	str	r2, [r4, #72]	; 0x48
 80168c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80168ca:	64e1      	str	r1, [r4, #76]	; 0x4c
 80168cc:	18af      	adds	r7, r5, r2
 80168ce:	1b52      	subs	r2, r2, r5
 80168d0:	1b5d      	subs	r5, r3, r5
 80168d2:	6526      	str	r6, [r4, #80]	; 0x50
 80168d4:	65a7      	str	r7, [r4, #88]	; 0x58
 80168d6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80168d8:	6625      	str	r5, [r4, #96]	; 0x60
 80168da:	e71d      	b.n	8016718 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

080168dc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80168dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80168de:	428b      	cmp	r3, r1
 80168e0:	d102      	bne.n	80168e8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80168e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168e4:	4293      	cmp	r3, r2
 80168e6:	d003      	beq.n	80168f0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80168e8:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 80168ec:	f7ff bf00 	b.w	80166f0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80168f0:	4770      	bx	lr

080168f2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80168f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80168f4:	428b      	cmp	r3, r1
 80168f6:	d102      	bne.n	80168fe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 80168f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80168fa:	4293      	cmp	r3, r2
 80168fc:	d003      	beq.n	8016906 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 80168fe:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8016902:	f7ff bef5 	b.w	80166f0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016906:	4770      	bx	lr

08016908 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016908:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 801690c:	f7ff bef0 	b.w	80166f0 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016910 <_ZN8touchgfx6CanvasD1Ev>:
 8016910:	4b04      	ldr	r3, [pc, #16]	; (8016924 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8016912:	b510      	push	{r4, lr}
 8016914:	4604      	mov	r4, r0
 8016916:	f840 3b20 	str.w	r3, [r0], #32
 801691a:	f000 fdd0 	bl	80174be <_ZN8touchgfx7OutlineD1Ev>
 801691e:	4620      	mov	r0, r4
 8016920:	bd10      	pop	{r4, pc}
 8016922:	bf00      	nop
 8016924:	0802ce94 	.word	0x0802ce94

08016928 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801692c:	b0a0      	sub	sp, #128	; 0x80
 801692e:	4604      	mov	r4, r0
 8016930:	460a      	mov	r2, r1
 8016932:	4601      	mov	r1, r0
 8016934:	a804      	add	r0, sp, #16
 8016936:	f011 fd31 	bl	802839c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801693a:	2300      	movs	r3, #0
 801693c:	9301      	str	r3, [sp, #4]
 801693e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016942:	2b01      	cmp	r3, #1
 8016944:	d17c      	bne.n	8016a40 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8016946:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801694a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801694c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801694e:	1ac0      	subs	r0, r0, r3
 8016950:	eba1 0102 	sub.w	r1, r1, r2
 8016954:	d437      	bmi.n	80169c6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8016956:	2900      	cmp	r1, #0
 8016958:	aa01      	add	r2, sp, #4
 801695a:	db2e      	blt.n	80169ba <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 801695c:	f7ff fe8c 	bl	8016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016960:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8016964:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8016966:	a804      	add	r0, sp, #16
 8016968:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801696a:	f011 feed 	bl	8028748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801696e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016972:	a804      	add	r0, sp, #16
 8016974:	f011 fdc0 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016978:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801697a:	2db3      	cmp	r5, #179	; 0xb3
 801697c:	dc33      	bgt.n	80169e6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801697e:	eba6 0805 	sub.w	r8, r6, r5
 8016982:	4640      	mov	r0, r8
 8016984:	f7ff fe04 	bl	8016590 <_ZN8touchgfx7CWRUtil4sineEi>
 8016988:	a902      	add	r1, sp, #8
 801698a:	9002      	str	r0, [sp, #8]
 801698c:	a801      	add	r0, sp, #4
 801698e:	f7ff fce7 	bl	8016360 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016994:	1847      	adds	r7, r0, r1
 8016996:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801699a:	f7ff fdf9 	bl	8016590 <_ZN8touchgfx7CWRUtil4sineEi>
 801699e:	a903      	add	r1, sp, #12
 80169a0:	9003      	str	r0, [sp, #12]
 80169a2:	a801      	add	r0, sp, #4
 80169a4:	f7ff fcdc 	bl	8016360 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80169a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80169aa:	4639      	mov	r1, r7
 80169ac:	1a12      	subs	r2, r2, r0
 80169ae:	a804      	add	r0, sp, #16
 80169b0:	f011 fda2 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80169b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80169b6:	441d      	add	r5, r3
 80169b8:	e7df      	b.n	801697a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 80169ba:	4249      	negs	r1, r1
 80169bc:	f7ff fe5c 	bl	8016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80169c0:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 80169c4:	e7ce      	b.n	8016964 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80169c6:	2900      	cmp	r1, #0
 80169c8:	f1c0 0000 	rsb	r0, r0, #0
 80169cc:	aa01      	add	r2, sp, #4
 80169ce:	db04      	blt.n	80169da <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 80169d0:	f7ff fe52 	bl	8016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80169d4:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 80169d8:	e7c4      	b.n	8016964 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80169da:	4249      	negs	r1, r1
 80169dc:	f7ff fe4c 	bl	8016678 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80169e0:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 80169e4:	e7be      	b.n	8016964 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80169e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80169e8:	a804      	add	r0, sp, #16
 80169ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80169ec:	f011 fd84 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80169f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80169f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80169f4:	a804      	add	r0, sp, #16
 80169f6:	f011 fd7f 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80169fa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80169fc:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8016a00:	2d00      	cmp	r5, #0
 8016a02:	dd31      	ble.n	8016a68 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8016a04:	eb05 0806 	add.w	r8, r5, r6
 8016a08:	4640      	mov	r0, r8
 8016a0a:	f7ff fdc1 	bl	8016590 <_ZN8touchgfx7CWRUtil4sineEi>
 8016a0e:	a902      	add	r1, sp, #8
 8016a10:	9002      	str	r0, [sp, #8]
 8016a12:	a801      	add	r0, sp, #4
 8016a14:	f7ff fca4 	bl	8016360 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016a1a:	1847      	adds	r7, r0, r1
 8016a1c:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8016a20:	f7ff fdb6 	bl	8016590 <_ZN8touchgfx7CWRUtil4sineEi>
 8016a24:	a903      	add	r1, sp, #12
 8016a26:	9003      	str	r0, [sp, #12]
 8016a28:	a801      	add	r0, sp, #4
 8016a2a:	f7ff fc99 	bl	8016360 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016a30:	4639      	mov	r1, r7
 8016a32:	1a12      	subs	r2, r2, r0
 8016a34:	a804      	add	r0, sp, #16
 8016a36:	f011 fd5f 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016a3c:	1aed      	subs	r5, r5, r3
 8016a3e:	e7df      	b.n	8016a00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8016a40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8016a42:	a804      	add	r0, sp, #16
 8016a44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016a46:	f011 fe7f 	bl	8028748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016a4a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016a4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016a4e:	a804      	add	r0, sp, #16
 8016a50:	f011 fd52 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a54:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016a56:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016a58:	a804      	add	r0, sp, #16
 8016a5a:	f011 fd4d 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016a60:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016a62:	a804      	add	r0, sp, #16
 8016a64:	f011 fd48 	bl	80284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a68:	21ff      	movs	r1, #255	; 0xff
 8016a6a:	a804      	add	r0, sp, #16
 8016a6c:	f011 fdc0 	bl	80285f0 <_ZN8touchgfx6Canvas6renderEh>
 8016a70:	4604      	mov	r4, r0
 8016a72:	a804      	add	r0, sp, #16
 8016a74:	f7ff ff4c 	bl	8016910 <_ZN8touchgfx6CanvasD1Ev>
 8016a78:	4620      	mov	r0, r4
 8016a7a:	b020      	add	sp, #128	; 0x80
 8016a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a80 <_ZN8touchgfx6CanvasD0Ev>:
 8016a80:	b510      	push	{r4, lr}
 8016a82:	4604      	mov	r4, r0
 8016a84:	f7ff ff44 	bl	8016910 <_ZN8touchgfx6CanvasD1Ev>
 8016a88:	2170      	movs	r1, #112	; 0x70
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	f011 feae 	bl	80287ec <_ZdlPvj>
 8016a90:	4620      	mov	r0, r4
 8016a92:	bd10      	pop	{r4, pc}

08016a94 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8016a94:	2000      	movs	r0, #0
 8016a96:	4770      	bx	lr

08016a98 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8016a98:	4b07      	ldr	r3, [pc, #28]	; (8016ab8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8016a9a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016a9c:	881b      	ldrh	r3, [r3, #0]
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	bf81      	itttt	hi
 8016aa2:	4b06      	ldrhi	r3, [pc, #24]	; (8016abc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8016aa4:	681b      	ldrhi	r3, [r3, #0]
 8016aa6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8016aaa:	7858      	ldrbhi	r0, [r3, #1]
 8016aac:	bf8c      	ite	hi
 8016aae:	f000 0003 	andhi.w	r0, r0, #3
 8016ab2:	2000      	movls	r0, #0
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop
 8016ab8:	2003bd64 	.word	0x2003bd64
 8016abc:	2003bd60 	.word	0x2003bd60

08016ac0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8016ac0:	4b11      	ldr	r3, [pc, #68]	; (8016b08 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8016ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016ac8:	4604      	mov	r4, r0
 8016aca:	881b      	ldrh	r3, [r3, #0]
 8016acc:	428b      	cmp	r3, r1
 8016ace:	d918      	bls.n	8016b02 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016ad0:	6803      	ldr	r3, [r0, #0]
 8016ad2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8016ad4:	4b0d      	ldr	r3, [pc, #52]	; (8016b0c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8016ad6:	6818      	ldr	r0, [r3, #0]
 8016ad8:	f7fa f8b2 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8016adc:	6823      	ldr	r3, [r4, #0]
 8016ade:	4606      	mov	r6, r0
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016ae4:	4798      	blx	r3
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	4607      	mov	r7, r0
 8016aea:	4620      	mov	r0, r4
 8016aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016af0:	4798      	blx	r3
 8016af2:	463a      	mov	r2, r7
 8016af4:	4603      	mov	r3, r0
 8016af6:	4631      	mov	r1, r6
 8016af8:	4620      	mov	r0, r4
 8016afa:	46ac      	mov	ip, r5
 8016afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b00:	4760      	bx	ip
 8016b02:	2000      	movs	r0, #0
 8016b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b08:	2003bd64 	.word	0x2003bd64
 8016b0c:	2003bd6c 	.word	0x2003bd6c

08016b10 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016b10:	4b18      	ldr	r3, [pc, #96]	; (8016b74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016b12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b16:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016b18:	4604      	mov	r4, r0
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	428b      	cmp	r3, r1
 8016b1e:	d926      	bls.n	8016b6e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8016b20:	4b15      	ldr	r3, [pc, #84]	; (8016b78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016b28:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016b2c:	4b13      	ldr	r3, [pc, #76]	; (8016b7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016b2e:	7855      	ldrb	r5, [r2, #1]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8016b36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8016b3a:	6833      	ldr	r3, [r6, #0]
 8016b3c:	69df      	ldr	r7, [r3, #28]
 8016b3e:	4b10      	ldr	r3, [pc, #64]	; (8016b80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016b40:	6818      	ldr	r0, [r3, #0]
 8016b42:	f7fa f87d 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8016b46:	6823      	ldr	r3, [r4, #0]
 8016b48:	4680      	mov	r8, r0
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016b4e:	4798      	blx	r3
 8016b50:	6823      	ldr	r3, [r4, #0]
 8016b52:	4681      	mov	r9, r0
 8016b54:	4620      	mov	r0, r4
 8016b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016b5a:	4798      	blx	r3
 8016b5c:	464b      	mov	r3, r9
 8016b5e:	9000      	str	r0, [sp, #0]
 8016b60:	4642      	mov	r2, r8
 8016b62:	4629      	mov	r1, r5
 8016b64:	4630      	mov	r0, r6
 8016b66:	47b8      	blx	r7
 8016b68:	b003      	add	sp, #12
 8016b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b6e:	2000      	movs	r0, #0
 8016b70:	e7fa      	b.n	8016b68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8016b72:	bf00      	nop
 8016b74:	2003bd64 	.word	0x2003bd64
 8016b78:	2003bd60 	.word	0x2003bd60
 8016b7c:	2003bd68 	.word	0x2003bd68
 8016b80:	2003bd6c 	.word	0x2003bd6c

08016b84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016b84:	b40e      	push	{r1, r2, r3}
 8016b86:	4b30      	ldr	r3, [pc, #192]	; (8016c48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8016b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b8c:	881a      	ldrh	r2, [r3, #0]
 8016b8e:	b09d      	sub	sp, #116	; 0x74
 8016b90:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016b92:	4604      	mov	r4, r0
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d954      	bls.n	8016c42 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8016b98:	aa26      	add	r2, sp, #152	; 0x98
 8016b9a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8016c4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8016b9e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8016c50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8016ba2:	9202      	str	r2, [sp, #8]
 8016ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8016ba8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016bac:	f8d8 3000 	ldr.w	r3, [r8]
 8016bb0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016bb4:	682b      	ldr	r3, [r5, #0]
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bba:	4798      	blx	r3
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	b207      	sxth	r7, r0
 8016bc0:	a803      	add	r0, sp, #12
 8016bc2:	f004 fca3 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 8016bc6:	682b      	ldr	r3, [r5, #0]
 8016bc8:	4628      	mov	r0, r5
 8016bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bcc:	4798      	blx	r3
 8016bce:	682b      	ldr	r3, [r5, #0]
 8016bd0:	4682      	mov	sl, r0
 8016bd2:	4628      	mov	r0, r5
 8016bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016bd6:	4798      	blx	r3
 8016bd8:	4653      	mov	r3, sl
 8016bda:	9000      	str	r0, [sp, #0]
 8016bdc:	a803      	add	r0, sp, #12
 8016bde:	9a02      	ldr	r2, [sp, #8]
 8016be0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8016be2:	f004 fcee 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016be6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016be8:	f8d9 3000 	ldr.w	r3, [r9]
 8016bec:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8016bf0:	8925      	ldrh	r5, [r4, #8]
 8016bf2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8016bf6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016bfa:	eba5 050c 	sub.w	r5, r5, ip
 8016bfe:	784a      	ldrb	r2, [r1, #1]
 8016c00:	f8d8 3000 	ldr.w	r3, [r8]
 8016c04:	b22d      	sxth	r5, r5
 8016c06:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8016c0a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016c0e:	9500      	str	r5, [sp, #0]
 8016c10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016c14:	a803      	add	r0, sp, #12
 8016c16:	f002 fae6 	bl	80191e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016c1a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8016c1e:	b203      	sxth	r3, r0
 8016c20:	18b9      	adds	r1, r7, r2
 8016c22:	2900      	cmp	r1, #0
 8016c24:	dd0b      	ble.n	8016c3e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8016c26:	3b01      	subs	r3, #1
 8016c28:	fb13 f302 	smulbb	r3, r3, r2
 8016c2c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016c30:	b21f      	sxth	r7, r3
 8016c32:	4638      	mov	r0, r7
 8016c34:	b01d      	add	sp, #116	; 0x74
 8016c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c3a:	b003      	add	sp, #12
 8016c3c:	4770      	bx	lr
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	dcf7      	bgt.n	8016c32 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016c42:	2700      	movs	r7, #0
 8016c44:	e7f5      	b.n	8016c32 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016c46:	bf00      	nop
 8016c48:	2003bd64 	.word	0x2003bd64
 8016c4c:	2003bd60 	.word	0x2003bd60
 8016c50:	2003bd68 	.word	0x2003bd68

08016c54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8016c54:	4bbc      	ldr	r3, [pc, #752]	; (8016f48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8016c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	881b      	ldrh	r3, [r3, #0]
 8016c5e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8016c60:	b0a9      	sub	sp, #164	; 0xa4
 8016c62:	4681      	mov	r9, r0
 8016c64:	428b      	cmp	r3, r1
 8016c66:	d809      	bhi.n	8016c7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c6e:	6083      	str	r3, [r0, #8]
 8016c70:	e9c0 3200 	strd	r3, r2, [r0]
 8016c74:	4648      	mov	r0, r9
 8016c76:	b029      	add	sp, #164	; 0xa4
 8016c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8016f50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8016c80:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8016c84:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8016f54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8016c88:	f8db 3000 	ldr.w	r3, [fp]
 8016c8c:	f8d8 0000 	ldr.w	r0, [r8]
 8016c90:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8016c94:	4bad      	ldr	r3, [pc, #692]	; (8016f4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016c9c:	f7f9 ffd0 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8016ca0:	4607      	mov	r7, r0
 8016ca2:	682b      	ldr	r3, [r5, #0]
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ca8:	4798      	blx	r3
 8016caa:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8016cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8016cb0:	4430      	add	r0, r6
 8016cb2:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8016cb6:	b283      	uxth	r3, r0
 8016cb8:	4650      	mov	r0, sl
 8016cba:	9302      	str	r3, [sp, #8]
 8016cbc:	2e00      	cmp	r6, #0
 8016cbe:	f040 8090 	bne.w	8016de2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8016cc2:	f004 fc23 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 8016cc6:	682b      	ldr	r3, [r5, #0]
 8016cc8:	4628      	mov	r0, r5
 8016cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ccc:	4798      	blx	r3
 8016cce:	682b      	ldr	r3, [r5, #0]
 8016cd0:	9005      	str	r0, [sp, #20]
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016cd6:	4798      	blx	r3
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	4680      	mov	r8, r0
 8016cdc:	4620      	mov	r0, r4
 8016cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016ce0:	4798      	blx	r3
 8016ce2:	6822      	ldr	r2, [r4, #0]
 8016ce4:	9004      	str	r0, [sp, #16]
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8016cec:	4790      	blx	r2
 8016cee:	9905      	ldr	r1, [sp, #20]
 8016cf0:	9b04      	ldr	r3, [sp, #16]
 8016cf2:	460a      	mov	r2, r1
 8016cf4:	4639      	mov	r1, r7
 8016cf6:	4637      	mov	r7, r6
 8016cf8:	9001      	str	r0, [sp, #4]
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	4650      	mov	r0, sl
 8016cfe:	4643      	mov	r3, r8
 8016d00:	f004 fc74 	bl	801b5ec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016d04:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016d06:	4629      	mov	r1, r5
 8016d08:	f8db 3000 	ldr.w	r3, [fp]
 8016d0c:	4650      	mov	r0, sl
 8016d0e:	3601      	adds	r6, #1
 8016d10:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016d18:	b2b6      	uxth	r6, r6
 8016d1a:	785b      	ldrb	r3, [r3, #1]
 8016d1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016d20:	f001 ffb2 	bl	8018c88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016d24:	4287      	cmp	r7, r0
 8016d26:	bfb8      	it	lt
 8016d28:	b207      	sxthlt	r7, r0
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	f004 fc15 	bl	801b55a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	d0e7      	beq.n	8016d04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8016d34:	9b02      	ldr	r3, [sp, #8]
 8016d36:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8016d3a:	fb13 f606 	smulbb	r6, r3, r6
 8016d3e:	eba6 0608 	sub.w	r6, r6, r8
 8016d42:	b2b6      	uxth	r6, r6
 8016d44:	fa0f f886 	sxth.w	r8, r6
 8016d48:	f1b8 0f00 	cmp.w	r8, #0
 8016d4c:	dd06      	ble.n	8016d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8016d4e:	682b      	ldr	r3, [r5, #0]
 8016d50:	4628      	mov	r0, r5
 8016d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d54:	4798      	blx	r3
 8016d56:	4430      	add	r0, r6
 8016d58:	fa0f f880 	sxth.w	r8, r0
 8016d5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016d60:	4620      	mov	r0, r4
 8016d62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016d66:	6823      	ldr	r3, [r4, #0]
 8016d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d6a:	bf0c      	ite	eq
 8016d6c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8016d70:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8016d74:	4798      	blx	r3
 8016d76:	2801      	cmp	r0, #1
 8016d78:	b2ba      	uxth	r2, r7
 8016d7a:	f000 80d2 	beq.w	8016f22 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8016d7e:	2802      	cmp	r0, #2
 8016d80:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8016d84:	f000 80d3 	beq.w	8016f2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8016d88:	b21e      	sxth	r6, r3
 8016d8a:	7a29      	ldrb	r1, [r5, #8]
 8016d8c:	7a6d      	ldrb	r5, [r5, #9]
 8016d8e:	1a76      	subs	r6, r6, r1
 8016d90:	4429      	add	r1, r5
 8016d92:	b2b3      	uxth	r3, r6
 8016d94:	440a      	add	r2, r1
 8016d96:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8016d9a:	b21f      	sxth	r7, r3
 8016d9c:	b292      	uxth	r2, r2
 8016d9e:	2902      	cmp	r1, #2
 8016da0:	b216      	sxth	r6, r2
 8016da2:	f000 80c7 	beq.w	8016f34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8016da6:	2903      	cmp	r1, #3
 8016da8:	f000 80d6 	beq.w	8016f58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8016dac:	2901      	cmp	r1, #1
 8016dae:	f040 80dc 	bne.w	8016f6a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8016db2:	8923      	ldrh	r3, [r4, #8]
 8016db4:	4632      	mov	r2, r6
 8016db6:	463d      	mov	r5, r7
 8016db8:	4646      	mov	r6, r8
 8016dba:	eba3 0308 	sub.w	r3, r3, r8
 8016dbe:	4690      	mov	r8, r2
 8016dc0:	b21f      	sxth	r7, r3
 8016dc2:	9b03      	ldr	r3, [sp, #12]
 8016dc4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016dc6:	6818      	ldr	r0, [r3, #0]
 8016dc8:	f7f9 ff3a 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8016dcc:	f8a9 7000 	strh.w	r7, [r9]
 8016dd0:	f8a9 5002 	strh.w	r5, [r9, #2]
 8016dd4:	f8a9 6004 	strh.w	r6, [r9, #4]
 8016dd8:	f8a9 8006 	strh.w	r8, [r9, #6]
 8016ddc:	f8c9 0008 	str.w	r0, [r9, #8]
 8016de0:	e748      	b.n	8016c74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8016de2:	f004 fb93 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 8016de6:	682b      	ldr	r3, [r5, #0]
 8016de8:	4628      	mov	r0, r5
 8016dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dec:	4798      	blx	r3
 8016dee:	682b      	ldr	r3, [r5, #0]
 8016df0:	4606      	mov	r6, r0
 8016df2:	4628      	mov	r0, r5
 8016df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016df6:	4798      	blx	r3
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	4680      	mov	r8, r0
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e00:	4798      	blx	r3
 8016e02:	6822      	ldr	r2, [r4, #0]
 8016e04:	9004      	str	r0, [sp, #16]
 8016e06:	4620      	mov	r0, r4
 8016e08:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8016e0c:	4790      	blx	r2
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	4632      	mov	r2, r6
 8016e12:	9001      	str	r0, [sp, #4]
 8016e14:	9300      	str	r3, [sp, #0]
 8016e16:	4639      	mov	r1, r7
 8016e18:	4643      	mov	r3, r8
 8016e1a:	4650      	mov	r0, sl
 8016e1c:	f004 fbe6 	bl	801b5ec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016e20:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016e24:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8016e28:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016e2c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016e30:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016e32:	bf0a      	itet	eq
 8016e34:	4642      	moveq	r2, r8
 8016e36:	461a      	movne	r2, r3
 8016e38:	4698      	moveq	r8, r3
 8016e3a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8016e3e:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8016e42:	1ad2      	subs	r2, r2, r3
 8016e44:	f8db 3000 	ldr.w	r3, [fp]
 8016e48:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8016e4c:	7859      	ldrb	r1, [r3, #1]
 8016e4e:	2300      	movs	r3, #0
 8016e50:	f8cd a020 	str.w	sl, [sp, #32]
 8016e54:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8016e58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e5c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016e60:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016e64:	950a      	str	r5, [sp, #40]	; 0x28
 8016e66:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016e6a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016e6e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8016e72:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016e76:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8016e7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016e7e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8016e82:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8016e86:	b350      	cbz	r0, 8016ede <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8016e88:	682b      	ldr	r3, [r5, #0]
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	695b      	ldr	r3, [r3, #20]
 8016e8e:	4798      	blx	r3
 8016e90:	4607      	mov	r7, r0
 8016e92:	b320      	cbz	r0, 8016ede <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8016e94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e96:	4639      	mov	r1, r7
 8016e98:	6803      	ldr	r3, [r0, #0]
 8016e9a:	68db      	ldr	r3, [r3, #12]
 8016e9c:	4798      	blx	r3
 8016e9e:	4606      	mov	r6, r0
 8016ea0:	b1e8      	cbz	r0, 8016ede <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8016ea2:	7b43      	ldrb	r3, [r0, #13]
 8016ea4:	7a82      	ldrb	r2, [r0, #10]
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016eac:	4313      	orrs	r3, r2
 8016eae:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8016eb2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8016eb6:	2b04      	cmp	r3, #4
 8016eb8:	d111      	bne.n	8016ede <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8016eba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ebc:	4632      	mov	r2, r6
 8016ebe:	4639      	mov	r1, r7
 8016ec0:	6803      	ldr	r3, [r0, #0]
 8016ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ec4:	4798      	blx	r3
 8016ec6:	7b73      	ldrb	r3, [r6, #13]
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016ece:	7ab3      	ldrb	r3, [r6, #10]
 8016ed0:	4313      	orrs	r3, r2
 8016ed2:	4418      	add	r0, r3
 8016ed4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016ed8:	4418      	add	r0, r3
 8016eda:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8016ede:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8016ee2:	2600      	movs	r6, #0
 8016ee4:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8016ee8:	4637      	mov	r7, r6
 8016eea:	45c3      	cmp	fp, r8
 8016eec:	a807      	add	r0, sp, #28
 8016eee:	f106 0601 	add.w	r6, r6, #1
 8016ef2:	bfd4      	ite	le
 8016ef4:	2100      	movle	r1, #0
 8016ef6:	2101      	movgt	r1, #1
 8016ef8:	f002 f8a6 	bl	8019048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016efc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016f00:	b2b6      	uxth	r6, r6
 8016f02:	429f      	cmp	r7, r3
 8016f04:	bfb8      	it	lt
 8016f06:	b21f      	sxthlt	r7, r3
 8016f08:	9b02      	ldr	r3, [sp, #8]
 8016f0a:	eba8 0803 	sub.w	r8, r8, r3
 8016f0e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016f12:	fa0f f888 	sxth.w	r8, r8
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	f43f af0c 	beq.w	8016d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8016f1c:	45c2      	cmp	sl, r8
 8016f1e:	dbe4      	blt.n	8016eea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8016f20:	e708      	b.n	8016d34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8016f22:	1bf6      	subs	r6, r6, r7
 8016f24:	2702      	movs	r7, #2
 8016f26:	fb96 f6f7 	sdiv	r6, r6, r7
 8016f2a:	b236      	sxth	r6, r6
 8016f2c:	e72d      	b.n	8016d8a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 8016f2e:	4413      	add	r3, r2
 8016f30:	1af6      	subs	r6, r6, r3
 8016f32:	e7fa      	b.n	8016f2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8016f34:	8925      	ldrh	r5, [r4, #8]
 8016f36:	1aad      	subs	r5, r5, r2
 8016f38:	1aed      	subs	r5, r5, r3
 8016f3a:	b22f      	sxth	r7, r5
 8016f3c:	8965      	ldrh	r5, [r4, #10]
 8016f3e:	eba5 0508 	sub.w	r5, r5, r8
 8016f42:	b22d      	sxth	r5, r5
 8016f44:	e73d      	b.n	8016dc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8016f46:	bf00      	nop
 8016f48:	2003bd64 	.word	0x2003bd64
 8016f4c:	2003bd68 	.word	0x2003bd68
 8016f50:	2003bd60 	.word	0x2003bd60
 8016f54:	2003bd6c 	.word	0x2003bd6c
 8016f58:	8965      	ldrh	r5, [r4, #10]
 8016f5a:	2700      	movs	r7, #0
 8016f5c:	1aad      	subs	r5, r5, r2
 8016f5e:	1aed      	subs	r5, r5, r3
 8016f60:	4633      	mov	r3, r6
 8016f62:	4646      	mov	r6, r8
 8016f64:	b22d      	sxth	r5, r5
 8016f66:	4698      	mov	r8, r3
 8016f68:	e72b      	b.n	8016dc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8016f6a:	2500      	movs	r5, #0
 8016f6c:	e729      	b.n	8016dc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8016f6e:	bf00      	nop

08016f70 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8016f70:	b513      	push	{r0, r1, r4, lr}
 8016f72:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8016f76:	4604      	mov	r4, r0
 8016f78:	b1fb      	cbz	r3, 8016fba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016f7a:	4b16      	ldr	r3, [pc, #88]	; (8016fd4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8016f7c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	428b      	cmp	r3, r1
 8016f82:	d91a      	bls.n	8016fba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016f84:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	dd16      	ble.n	8016fba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016f8c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	dd12      	ble.n	8016fba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016f94:	4b10      	ldr	r3, [pc, #64]	; (8016fd8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8016f96:	6818      	ldr	r0, [r3, #0]
 8016f98:	f7f9 fe52 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8016f9c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8016fa0:	6822      	ldr	r2, [r4, #0]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	db06      	blt.n	8016fb4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016fa6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	db02      	blt.n	8016fb4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fb0:	4298      	cmp	r0, r3
 8016fb2:	d004      	beq.n	8016fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8016fb4:	6953      	ldr	r3, [r2, #20]
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	4798      	blx	r3
 8016fba:	b002      	add	sp, #8
 8016fbc:	bd10      	pop	{r4, pc}
 8016fbe:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8016fc2:	466b      	mov	r3, sp
 8016fc4:	6912      	ldr	r2, [r2, #16]
 8016fc6:	c903      	ldmia	r1, {r0, r1}
 8016fc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fcc:	4619      	mov	r1, r3
 8016fce:	4620      	mov	r0, r4
 8016fd0:	4790      	blx	r2
 8016fd2:	e7f2      	b.n	8016fba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016fd4:	2003bd64 	.word	0x2003bd64
 8016fd8:	2003bd6c 	.word	0x2003bd6c

08016fdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016fdc:	4b45      	ldr	r3, [pc, #276]	; (80170f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8016fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016fe4:	b08e      	sub	sp, #56	; 0x38
 8016fe6:	881b      	ldrh	r3, [r3, #0]
 8016fe8:	4604      	mov	r4, r0
 8016fea:	4293      	cmp	r3, r2
 8016fec:	d97e      	bls.n	80170ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016fee:	6808      	ldr	r0, [r1, #0]
 8016ff0:	ab05      	add	r3, sp, #20
 8016ff2:	6849      	ldr	r1, [r1, #4]
 8016ff4:	4d40      	ldr	r5, [pc, #256]	; (80170f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8016ff6:	c303      	stmia	r3!, {r0, r1}
 8016ff8:	4611      	mov	r1, r2
 8016ffa:	6828      	ldr	r0, [r5, #0]
 8016ffc:	f7f9 fe20 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8017000:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8017004:	2b00      	cmp	r3, #0
 8017006:	db11      	blt.n	801702c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017008:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801700c:	2b00      	cmp	r3, #0
 801700e:	db0d      	blt.n	801702c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017010:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017012:	4298      	cmp	r0, r3
 8017014:	d10a      	bne.n	801702c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017016:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801701a:	ab09      	add	r3, sp, #36	; 0x24
 801701c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017020:	e883 0003 	stmia.w	r3, {r0, r1}
 8017024:	4619      	mov	r1, r3
 8017026:	a805      	add	r0, sp, #20
 8017028:	f7fe f85c 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801702c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017030:	2b00      	cmp	r3, #0
 8017032:	dd5b      	ble.n	80170ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017034:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017038:	2b00      	cmp	r3, #0
 801703a:	dd57      	ble.n	80170ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801703c:	4f2f      	ldr	r7, [pc, #188]	; (80170fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801703e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017046:	4b2e      	ldr	r3, [pc, #184]	; (8017100 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801704e:	2e00      	cmp	r6, #0
 8017050:	d04c      	beq.n	80170ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	4620      	mov	r0, r4
 8017056:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801705a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801705c:	4798      	blx	r3
 801705e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017060:	683b      	ldr	r3, [r7, #0]
 8017062:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8017066:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801706a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801706e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8017072:	785b      	ldrb	r3, [r3, #1]
 8017074:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8017078:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801707c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801707e:	9609      	str	r6, [sp, #36]	; 0x24
 8017080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017084:	4b1f      	ldr	r3, [pc, #124]	; (8017104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017086:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8017090:	910b      	str	r1, [sp, #44]	; 0x2c
 8017092:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8017096:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801709a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801709e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80170a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80170a6:	b10a      	cbz	r2, 80170ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80170a8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80170aa:	b906      	cbnz	r6, 80170ae <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80170ac:	689e      	ldr	r6, [r3, #8]
 80170ae:	af07      	add	r7, sp, #28
 80170b0:	4621      	mov	r1, r4
 80170b2:	4638      	mov	r0, r7
 80170b4:	f003 fdb0 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80170ba:	6828      	ldr	r0, [r5, #0]
 80170bc:	f7f9 fdc0 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	4605      	mov	r5, r0
 80170c4:	4620      	mov	r0, r4
 80170c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80170c8:	4798      	blx	r3
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	4680      	mov	r8, r0
 80170ce:	4620      	mov	r0, r4
 80170d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80170d4:	4798      	blx	r3
 80170d6:	ab09      	add	r3, sp, #36	; 0x24
 80170d8:	9501      	str	r5, [sp, #4]
 80170da:	9300      	str	r3, [sp, #0]
 80170dc:	ab05      	add	r3, sp, #20
 80170de:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80170e2:	4630      	mov	r0, r6
 80170e4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80170e8:	f7f9 fd3b 	bl	8010b62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80170ec:	b00e      	add	sp, #56	; 0x38
 80170ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f2:	bf00      	nop
 80170f4:	2003bd64 	.word	0x2003bd64
 80170f8:	2003bd6c 	.word	0x2003bd6c
 80170fc:	2003bd60 	.word	0x2003bd60
 8017100:	2003bd68 	.word	0x2003bd68
 8017104:	2003bd08 	.word	0x2003bd08

08017108 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4b0e      	ldr	r3, [pc, #56]	; (8017144 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801710c:	4604      	mov	r4, r0
 801710e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017110:	881b      	ldrh	r3, [r3, #0]
 8017112:	429a      	cmp	r2, r3
 8017114:	d214      	bcs.n	8017140 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017116:	6803      	ldr	r3, [r0, #0]
 8017118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801711a:	4798      	blx	r3
 801711c:	6823      	ldr	r3, [r4, #0]
 801711e:	4605      	mov	r5, r0
 8017120:	4620      	mov	r0, r4
 8017122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017124:	4798      	blx	r3
 8017126:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801712a:	b22d      	sxth	r5, r5
 801712c:	4601      	mov	r1, r0
 801712e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017132:	bf06      	itte	eq
 8017134:	4602      	moveq	r2, r0
 8017136:	4629      	moveq	r1, r5
 8017138:	462a      	movne	r2, r5
 801713a:	4620      	mov	r0, r4
 801713c:	f7f7 f938 	bl	800e3b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017140:	bd38      	pop	{r3, r4, r5, pc}
 8017142:	bf00      	nop
 8017144:	2003bd64 	.word	0x2003bd64

08017148 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017148:	b530      	push	{r4, r5, lr}
 801714a:	888b      	ldrh	r3, [r1, #4]
 801714c:	b085      	sub	sp, #20
 801714e:	4604      	mov	r4, r0
 8017150:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017152:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017156:	b923      	cbnz	r3, 8017162 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017158:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801715c:	b90b      	cbnz	r3, 8017162 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801715e:	f7ff ffd3 	bl	8017108 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017162:	6823      	ldr	r3, [r4, #0]
 8017164:	466d      	mov	r5, sp
 8017166:	4621      	mov	r1, r4
 8017168:	343c      	adds	r4, #60	; 0x3c
 801716a:	4628      	mov	r0, r5
 801716c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017170:	4798      	blx	r3
 8017172:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801717a:	b005      	add	sp, #20
 801717c:	bd30      	pop	{r4, r5, pc}

0801717e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801717e:	2300      	movs	r3, #0
 8017180:	8083      	strh	r3, [r0, #4]
 8017182:	80c3      	strh	r3, [r0, #6]
 8017184:	8003      	strh	r3, [r0, #0]
 8017186:	8043      	strh	r3, [r0, #2]
 8017188:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801718c:	2bff      	cmp	r3, #255	; 0xff
 801718e:	bf01      	itttt	eq
 8017190:	890b      	ldrheq	r3, [r1, #8]
 8017192:	8083      	strheq	r3, [r0, #4]
 8017194:	894b      	ldrheq	r3, [r1, #10]
 8017196:	80c3      	strheq	r3, [r0, #6]
 8017198:	4770      	bx	lr
	...

0801719c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801719e:	4604      	mov	r4, r0
 80171a0:	466b      	mov	r3, sp
 80171a2:	6808      	ldr	r0, [r1, #0]
 80171a4:	6849      	ldr	r1, [r1, #4]
 80171a6:	c303      	stmia	r3!, {r0, r1}
 80171a8:	6823      	ldr	r3, [r4, #0]
 80171aa:	4669      	mov	r1, sp
 80171ac:	4620      	mov	r0, r4
 80171ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b0:	4798      	blx	r3
 80171b2:	4b08      	ldr	r3, [pc, #32]	; (80171d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80171ba:	b10a      	cbz	r2, 80171c0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80171bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80171be:	b900      	cbnz	r0, 80171c2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80171c0:	6898      	ldr	r0, [r3, #8]
 80171c2:	6803      	ldr	r3, [r0, #0]
 80171c4:	4669      	mov	r1, sp
 80171c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80171c8:	6a1d      	ldr	r5, [r3, #32]
 80171ca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80171ce:	47a8      	blx	r5
 80171d0:	b003      	add	sp, #12
 80171d2:	bd30      	pop	{r4, r5, pc}
 80171d4:	2003bd08 	.word	0x2003bd08

080171d8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80171d8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80171dc:	b12a      	cbz	r2, 80171ea <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80171de:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80171e2:	b112      	cbz	r2, 80171ea <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80171e4:	6803      	ldr	r3, [r0, #0]
 80171e6:	695b      	ldr	r3, [r3, #20]
 80171e8:	4718      	bx	r3
 80171ea:	4770      	bx	lr

080171ec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80171ec:	4b30      	ldr	r3, [pc, #192]	; (80172b0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80171ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80171f4:	b08d      	sub	sp, #52	; 0x34
 80171f6:	881b      	ldrh	r3, [r3, #0]
 80171f8:	4604      	mov	r4, r0
 80171fa:	460f      	mov	r7, r1
 80171fc:	4293      	cmp	r3, r2
 80171fe:	d954      	bls.n	80172aa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017200:	4b2c      	ldr	r3, [pc, #176]	; (80172b4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8017202:	6819      	ldr	r1, [r3, #0]
 8017204:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8017208:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801720c:	4a2a      	ldr	r2, [pc, #168]	; (80172b8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801720e:	6812      	ldr	r2, [r2, #0]
 8017210:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8017214:	2900      	cmp	r1, #0
 8017216:	d048      	beq.n	80172aa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017218:	785a      	ldrb	r2, [r3, #1]
 801721a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801721e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8017222:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017226:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801722a:	4b24      	ldr	r3, [pc, #144]	; (80172bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801722c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8017236:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801723a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801723e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8017240:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8017244:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8017248:	9107      	str	r1, [sp, #28]
 801724a:	f88d 8020 	strb.w	r8, [sp, #32]
 801724e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017252:	9609      	str	r6, [sp, #36]	; 0x24
 8017254:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017258:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801725c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8017260:	b10b      	cbz	r3, 8017266 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8017262:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8017264:	b905      	cbnz	r5, 8017268 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8017266:	6895      	ldr	r5, [r2, #8]
 8017268:	ae05      	add	r6, sp, #20
 801726a:	4621      	mov	r1, r4
 801726c:	4630      	mov	r0, r6
 801726e:	f003 fcd3 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017272:	4b13      	ldr	r3, [pc, #76]	; (80172c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8017274:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017276:	6818      	ldr	r0, [r3, #0]
 8017278:	f7f9 fce2 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 801727c:	6823      	ldr	r3, [r4, #0]
 801727e:	4680      	mov	r8, r0
 8017280:	4620      	mov	r0, r4
 8017282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017284:	4798      	blx	r3
 8017286:	6823      	ldr	r3, [r4, #0]
 8017288:	4681      	mov	r9, r0
 801728a:	4620      	mov	r0, r4
 801728c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017290:	4798      	blx	r3
 8017292:	ab07      	add	r3, sp, #28
 8017294:	f8cd 8004 	str.w	r8, [sp, #4]
 8017298:	9300      	str	r3, [sp, #0]
 801729a:	463b      	mov	r3, r7
 801729c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80172a0:	4628      	mov	r0, r5
 80172a2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80172a6:	f7f9 fc5c 	bl	8010b62 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80172aa:	b00d      	add	sp, #52	; 0x34
 80172ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172b0:	2003bd64 	.word	0x2003bd64
 80172b4:	2003bd60 	.word	0x2003bd60
 80172b8:	2003bd68 	.word	0x2003bd68
 80172bc:	2003bd08 	.word	0x2003bd08
 80172c0:	2003bd6c 	.word	0x2003bd6c

080172c4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80172cc:	b0a0      	sub	sp, #128	; 0x80
 80172ce:	4604      	mov	r4, r0
 80172d0:	b193      	cbz	r3, 80172f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80172d2:	4b30      	ldr	r3, [pc, #192]	; (8017394 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 80172d4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80172d6:	881b      	ldrh	r3, [r3, #0]
 80172d8:	428b      	cmp	r3, r1
 80172da:	d90d      	bls.n	80172f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80172dc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	dd09      	ble.n	80172f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80172e4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	dd05      	ble.n	80172f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80172ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80172f0:	b12b      	cbz	r3, 80172fe <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80172f2:	6803      	ldr	r3, [r0, #0]
 80172f4:	695b      	ldr	r3, [r3, #20]
 80172f6:	4798      	blx	r3
 80172f8:	b020      	add	sp, #128	; 0x80
 80172fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fe:	4b26      	ldr	r3, [pc, #152]	; (8017398 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017306:	4b25      	ldr	r3, [pc, #148]	; (801739c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801730e:	4b24      	ldr	r3, [pc, #144]	; (80173a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8017310:	6818      	ldr	r0, [r3, #0]
 8017312:	f7f9 fc95 	bl	8010c40 <_ZNK8touchgfx5Texts7getTextEt>
 8017316:	4606      	mov	r6, r0
 8017318:	a807      	add	r0, sp, #28
 801731a:	f004 f8f7 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 801731e:	682b      	ldr	r3, [r5, #0]
 8017320:	4628      	mov	r0, r5
 8017322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017324:	4798      	blx	r3
 8017326:	682b      	ldr	r3, [r5, #0]
 8017328:	4607      	mov	r7, r0
 801732a:	4628      	mov	r0, r5
 801732c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801732e:	4798      	blx	r3
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	4605      	mov	r5, r0
 8017334:	4620      	mov	r0, r4
 8017336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017338:	4798      	blx	r3
 801733a:	6823      	ldr	r3, [r4, #0]
 801733c:	4680      	mov	r8, r0
 801733e:	4620      	mov	r0, r4
 8017340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017344:	4798      	blx	r3
 8017346:	462b      	mov	r3, r5
 8017348:	463a      	mov	r2, r7
 801734a:	4631      	mov	r1, r6
 801734c:	e9cd 8000 	strd	r8, r0, [sp]
 8017350:	a807      	add	r0, sp, #28
 8017352:	f004 f94b 	bl	801b5ec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017356:	a807      	add	r0, sp, #28
 8017358:	f004 fd04 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801735c:	280a      	cmp	r0, #10
 801735e:	d103      	bne.n	8017368 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8017360:	6823      	ldr	r3, [r4, #0]
 8017362:	4620      	mov	r0, r4
 8017364:	695b      	ldr	r3, [r3, #20]
 8017366:	e7c6      	b.n	80172f6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8017368:	a807      	add	r0, sp, #28
 801736a:	f004 fcfb 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801736e:	2800      	cmp	r0, #0
 8017370:	d1f4      	bne.n	801735c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8017372:	ad04      	add	r5, sp, #16
 8017374:	4621      	mov	r1, r4
 8017376:	4628      	mov	r0, r5
 8017378:	f7ff fc6c 	bl	8016c54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801737c:	ab02      	add	r3, sp, #8
 801737e:	6822      	ldr	r2, [r4, #0]
 8017380:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017384:	6912      	ldr	r2, [r2, #16]
 8017386:	e883 0003 	stmia.w	r3, {r0, r1}
 801738a:	4619      	mov	r1, r3
 801738c:	4620      	mov	r0, r4
 801738e:	4790      	blx	r2
 8017390:	e7b2      	b.n	80172f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8017392:	bf00      	nop
 8017394:	2003bd64 	.word	0x2003bd64
 8017398:	2003bd60 	.word	0x2003bd60
 801739c:	2003bd68 	.word	0x2003bd68
 80173a0:	2003bd6c 	.word	0x2003bd6c

080173a4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80173a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80173aa:	4604      	mov	r4, r0
 80173ac:	460e      	mov	r6, r1
 80173ae:	b08e      	sub	sp, #56	; 0x38
 80173b0:	b218      	sxth	r0, r3
 80173b2:	8921      	ldrh	r1, [r4, #8]
 80173b4:	005b      	lsls	r3, r3, #1
 80173b6:	8962      	ldrh	r2, [r4, #10]
 80173b8:	f8ad 0000 	strh.w	r0, [sp]
 80173bc:	b29b      	uxth	r3, r3
 80173be:	f8ad 0002 	strh.w	r0, [sp, #2]
 80173c2:	1ac9      	subs	r1, r1, r3
 80173c4:	1ad3      	subs	r3, r2, r3
 80173c6:	b209      	sxth	r1, r1
 80173c8:	b21b      	sxth	r3, r3
 80173ca:	2900      	cmp	r1, #0
 80173cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80173d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80173d4:	dd5e      	ble.n	8017494 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	dd5c      	ble.n	8017494 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80173da:	6830      	ldr	r0, [r6, #0]
 80173dc:	ab02      	add	r3, sp, #8
 80173de:	6871      	ldr	r1, [r6, #4]
 80173e0:	c303      	stmia	r3!, {r0, r1}
 80173e2:	4669      	mov	r1, sp
 80173e4:	a802      	add	r0, sp, #8
 80173e6:	f7fd fe7d 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 80173ea:	4620      	mov	r0, r4
 80173ec:	a902      	add	r1, sp, #8
 80173ee:	f7ff fed5 	bl	801719c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80173f2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80173f4:	2800      	cmp	r0, #0
 80173f6:	d05f      	beq.n	80174b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80173f8:	8963      	ldrh	r3, [r4, #10]
 80173fa:	b202      	sxth	r2, r0
 80173fc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017400:	2500      	movs	r5, #0
 8017402:	1a1f      	subs	r7, r3, r0
 8017404:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8017408:	f8ad 101c 	strh.w	r1, [sp, #28]
 801740c:	b21b      	sxth	r3, r3
 801740e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017412:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8017416:	af04      	add	r7, sp, #16
 8017418:	1a09      	subs	r1, r1, r0
 801741a:	9506      	str	r5, [sp, #24]
 801741c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017420:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017424:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017428:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801742c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017430:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017434:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017438:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801743c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017440:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017444:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017448:	ab06      	add	r3, sp, #24
 801744a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801744e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017452:	e887 0003 	stmia.w	r7, {r0, r1}
 8017456:	4631      	mov	r1, r6
 8017458:	4638      	mov	r0, r7
 801745a:	f7fd fe43 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801745e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017462:	2b00      	cmp	r3, #0
 8017464:	dd12      	ble.n	801748c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017466:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801746a:	2b00      	cmp	r3, #0
 801746c:	dd0e      	ble.n	801748c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	4639      	mov	r1, r7
 8017472:	4620      	mov	r0, r4
 8017474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017476:	4798      	blx	r3
 8017478:	f7f6 f954 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 801747c:	6803      	ldr	r3, [r0, #0]
 801747e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017480:	4639      	mov	r1, r7
 8017482:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017486:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801748a:	47c0      	blx	r8
 801748c:	3501      	adds	r5, #1
 801748e:	2d04      	cmp	r5, #4
 8017490:	d1da      	bne.n	8017448 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017492:	e011      	b.n	80174b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017494:	6830      	ldr	r0, [r6, #0]
 8017496:	ab06      	add	r3, sp, #24
 8017498:	6871      	ldr	r1, [r6, #4]
 801749a:	c303      	stmia	r3!, {r0, r1}
 801749c:	6823      	ldr	r3, [r4, #0]
 801749e:	a906      	add	r1, sp, #24
 80174a0:	4620      	mov	r0, r4
 80174a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174a4:	4798      	blx	r3
 80174a6:	f7f6 f93d 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 80174aa:	6803      	ldr	r3, [r0, #0]
 80174ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80174ae:	a906      	add	r1, sp, #24
 80174b0:	6a1d      	ldr	r5, [r3, #32]
 80174b2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80174b6:	47a8      	blx	r5
 80174b8:	b00e      	add	sp, #56	; 0x38
 80174ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174be <_ZN8touchgfx7OutlineD1Ev>:
 80174be:	4770      	bx	lr

080174c0 <_ZN8touchgfx7OutlineD0Ev>:
 80174c0:	b510      	push	{r4, lr}
 80174c2:	4604      	mov	r4, r0
 80174c4:	2130      	movs	r1, #48	; 0x30
 80174c6:	f011 f991 	bl	80287ec <_ZdlPvj>
 80174ca:	4620      	mov	r0, r4
 80174cc:	bd10      	pop	{r4, pc}

080174ce <_ZN8touchgfx7Outline5resetEv>:
 80174ce:	b510      	push	{r4, lr}
 80174d0:	4604      	mov	r4, r0
 80174d2:	f000 fe7b 	bl	80181cc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80174d6:	60e0      	str	r0, [r4, #12]
 80174d8:	f000 fe7e 	bl	80181d8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80174dc:	68e3      	ldr	r3, [r4, #12]
 80174de:	08c0      	lsrs	r0, r0, #3
 80174e0:	2200      	movs	r2, #0
 80174e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80174e6:	6123      	str	r3, [r4, #16]
 80174e8:	3801      	subs	r0, #1
 80174ea:	60a2      	str	r2, [r4, #8]
 80174ec:	6060      	str	r0, [r4, #4]
 80174ee:	8019      	strh	r1, [r3, #0]
 80174f0:	8059      	strh	r1, [r3, #2]
 80174f2:	809a      	strh	r2, [r3, #4]
 80174f4:	80da      	strh	r2, [r3, #6]
 80174f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174f8:	f023 0301 	bic.w	r3, r3, #1
 80174fc:	f043 0302 	orr.w	r3, r3, #2
 8017500:	6263      	str	r3, [r4, #36]	; 0x24
 8017502:	bd10      	pop	{r4, pc}

08017504 <_ZN8touchgfx7OutlineC1Ev>:
 8017504:	4b0a      	ldr	r3, [pc, #40]	; (8017530 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8017506:	b510      	push	{r4, lr}
 8017508:	6003      	str	r3, [r0, #0]
 801750a:	2300      	movs	r3, #0
 801750c:	4604      	mov	r4, r0
 801750e:	6243      	str	r3, [r0, #36]	; 0x24
 8017510:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017518:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801751c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017520:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017524:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8017528:	f7ff ffd1 	bl	80174ce <_ZN8touchgfx7Outline5resetEv>
 801752c:	4620      	mov	r0, r4
 801752e:	bd10      	pop	{r4, pc}
 8017530:	0802d220 	.word	0x0802d220

08017534 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	b093      	sub	sp, #76	; 0x4c
 801753a:	1156      	asrs	r6, r2, #5
 801753c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801753e:	9305      	str	r3, [sp, #20]
 8017540:	1153      	asrs	r3, r2, #5
 8017542:	f004 051f 	and.w	r5, r4, #31
 8017546:	9303      	str	r3, [sp, #12]
 8017548:	1163      	asrs	r3, r4, #5
 801754a:	9504      	str	r5, [sp, #16]
 801754c:	1165      	asrs	r5, r4, #5
 801754e:	9306      	str	r3, [sp, #24]
 8017550:	f002 031f 	and.w	r3, r2, #31
 8017554:	42ae      	cmp	r6, r5
 8017556:	f040 80f4 	bne.w	8017742 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801755a:	9c04      	ldr	r4, [sp, #16]
 801755c:	9a05      	ldr	r2, [sp, #20]
 801755e:	42a3      	cmp	r3, r4
 8017560:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8017564:	6902      	ldr	r2, [r0, #16]
 8017566:	d125      	bne.n	80175b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8017568:	f9b2 3000 	ldrsh.w	r3, [r2]
 801756c:	459e      	cmp	lr, r3
 801756e:	d103      	bne.n	8017578 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8017570:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017574:	429e      	cmp	r6, r3
 8017576:	d035      	beq.n	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017578:	88d1      	ldrh	r1, [r2, #6]
 801757a:	8893      	ldrh	r3, [r2, #4]
 801757c:	430b      	orrs	r3, r1
 801757e:	d010      	beq.n	80175a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017580:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017584:	2b00      	cmp	r3, #0
 8017586:	db0c      	blt.n	80175a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017588:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801758a:	428b      	cmp	r3, r1
 801758c:	da09      	bge.n	80175a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801758e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017592:	428b      	cmp	r3, r1
 8017594:	f103 0301 	add.w	r3, r3, #1
 8017598:	bf38      	it	cc
 801759a:	3208      	addcc	r2, #8
 801759c:	6083      	str	r3, [r0, #8]
 801759e:	bf38      	it	cc
 80175a0:	6102      	strcc	r2, [r0, #16]
 80175a2:	6903      	ldr	r3, [r0, #16]
 80175a4:	9a03      	ldr	r2, [sp, #12]
 80175a6:	f8a3 e000 	strh.w	lr, [r3]
 80175aa:	805a      	strh	r2, [r3, #2]
 80175ac:	2200      	movs	r2, #0
 80175ae:	809a      	strh	r2, [r3, #4]
 80175b0:	80da      	strh	r2, [r3, #6]
 80175b2:	e017      	b.n	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80175b4:	9c05      	ldr	r4, [sp, #20]
 80175b6:	114e      	asrs	r6, r1, #5
 80175b8:	f001 0c1f 	and.w	ip, r1, #31
 80175bc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80175c0:	f004 041f 	and.w	r4, r4, #31
 80175c4:	4576      	cmp	r6, lr
 80175c6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80175ca:	9402      	str	r4, [sp, #8]
 80175cc:	9c04      	ldr	r4, [sp, #16]
 80175ce:	eba4 0403 	sub.w	r4, r4, r3
 80175d2:	d10a      	bne.n	80175ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80175d4:	9b02      	ldr	r3, [sp, #8]
 80175d6:	44a0      	add	r8, r4
 80175d8:	449c      	add	ip, r3
 80175da:	f8a2 8004 	strh.w	r8, [r2, #4]
 80175de:	fb04 a40c 	mla	r4, r4, ip, sl
 80175e2:	80d4      	strh	r4, [r2, #6]
 80175e4:	b013      	add	sp, #76	; 0x4c
 80175e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ea:	9d05      	ldr	r5, [sp, #20]
 80175ec:	1a69      	subs	r1, r5, r1
 80175ee:	bf51      	iteee	pl
 80175f0:	f1cc 0520 	rsbpl	r5, ip, #32
 80175f4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80175f8:	4249      	negmi	r1, r1
 80175fa:	2500      	movmi	r5, #0
 80175fc:	bf5d      	ittte	pl
 80175fe:	436c      	mulpl	r4, r5
 8017600:	2520      	movpl	r5, #32
 8017602:	f04f 0901 	movpl.w	r9, #1
 8017606:	f04f 39ff 	movmi.w	r9, #4294967295
 801760a:	9501      	str	r5, [sp, #4]
 801760c:	9f01      	ldr	r7, [sp, #4]
 801760e:	444e      	add	r6, r9
 8017610:	fb94 f5f1 	sdiv	r5, r4, r1
 8017614:	fb01 4415 	mls	r4, r1, r5, r4
 8017618:	44bc      	add	ip, r7
 801761a:	2c00      	cmp	r4, #0
 801761c:	bfbc      	itt	lt
 801761e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017622:	1864      	addlt	r4, r4, r1
 8017624:	44a8      	add	r8, r5
 8017626:	fb05 ac0c 	mla	ip, r5, ip, sl
 801762a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801762e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017632:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017636:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801763a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801763e:	ea58 0202 	orrs.w	r2, r8, r2
 8017642:	d011      	beq.n	8017668 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017644:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017648:	f1b8 0f00 	cmp.w	r8, #0
 801764c:	db0c      	blt.n	8017668 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801764e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017650:	4590      	cmp	r8, r2
 8017652:	da09      	bge.n	8017668 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017654:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017658:	4590      	cmp	r8, r2
 801765a:	bf3c      	itt	cc
 801765c:	f10c 0208 	addcc.w	r2, ip, #8
 8017660:	6102      	strcc	r2, [r0, #16]
 8017662:	f108 0201 	add.w	r2, r8, #1
 8017666:	6082      	str	r2, [r0, #8]
 8017668:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801766c:	2700      	movs	r7, #0
 801766e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017672:	45b6      	cmp	lr, r6
 8017674:	f8ac 6000 	strh.w	r6, [ip]
 8017678:	442b      	add	r3, r5
 801767a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801767e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017682:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017686:	d04b      	beq.n	8017720 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8017688:	9f04      	ldr	r7, [sp, #16]
 801768a:	1a64      	subs	r4, r4, r1
 801768c:	f04f 0a00 	mov.w	sl, #0
 8017690:	1aff      	subs	r7, r7, r3
 8017692:	443d      	add	r5, r7
 8017694:	016d      	lsls	r5, r5, #5
 8017696:	fb95 f8f1 	sdiv	r8, r5, r1
 801769a:	fb01 5518 	mls	r5, r1, r8, r5
 801769e:	2d00      	cmp	r5, #0
 80176a0:	bfbc      	itt	lt
 80176a2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80176a6:	186d      	addlt	r5, r5, r1
 80176a8:	f108 0701 	add.w	r7, r8, #1
 80176ac:	9703      	str	r7, [sp, #12]
 80176ae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80176b2:	1964      	adds	r4, r4, r5
 80176b4:	444e      	add	r6, r9
 80176b6:	bf54      	ite	pl
 80176b8:	9f03      	ldrpl	r7, [sp, #12]
 80176ba:	4647      	movmi	r7, r8
 80176bc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80176c0:	bf58      	it	pl
 80176c2:	1a64      	subpl	r4, r4, r1
 80176c4:	443b      	add	r3, r7
 80176c6:	44bb      	add	fp, r7
 80176c8:	f8ac b004 	strh.w	fp, [ip, #4]
 80176cc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80176d0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80176d4:	f8ac b006 	strh.w	fp, [ip, #6]
 80176d8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80176dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80176e0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80176e4:	ea5b 0707 	orrs.w	r7, fp, r7
 80176e8:	d011      	beq.n	801770e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80176ea:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80176ee:	f1bb 0f00 	cmp.w	fp, #0
 80176f2:	db0c      	blt.n	801770e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80176f4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80176f6:	45bb      	cmp	fp, r7
 80176f8:	da09      	bge.n	801770e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80176fa:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80176fe:	45bb      	cmp	fp, r7
 8017700:	bf3c      	itt	cc
 8017702:	f10c 0708 	addcc.w	r7, ip, #8
 8017706:	6107      	strcc	r7, [r0, #16]
 8017708:	f10b 0701 	add.w	r7, fp, #1
 801770c:	6087      	str	r7, [r0, #8]
 801770e:	6907      	ldr	r7, [r0, #16]
 8017710:	45b6      	cmp	lr, r6
 8017712:	803e      	strh	r6, [r7, #0]
 8017714:	807a      	strh	r2, [r7, #2]
 8017716:	f8a7 a004 	strh.w	sl, [r7, #4]
 801771a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801771e:	d1c6      	bne.n	80176ae <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8017720:	9a04      	ldr	r2, [sp, #16]
 8017722:	1ad3      	subs	r3, r2, r3
 8017724:	6902      	ldr	r2, [r0, #16]
 8017726:	8891      	ldrh	r1, [r2, #4]
 8017728:	88d6      	ldrh	r6, [r2, #6]
 801772a:	4419      	add	r1, r3
 801772c:	8091      	strh	r1, [r2, #4]
 801772e:	9902      	ldr	r1, [sp, #8]
 8017730:	f101 0c20 	add.w	ip, r1, #32
 8017734:	9901      	ldr	r1, [sp, #4]
 8017736:	ebac 0c01 	sub.w	ip, ip, r1
 801773a:	fb03 630c 	mla	r3, r3, ip, r6
 801773e:	80d3      	strh	r3, [r2, #6]
 8017740:	e750      	b.n	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017742:	9d05      	ldr	r5, [sp, #20]
 8017744:	1aa2      	subs	r2, r4, r2
 8017746:	eba5 0501 	sub.w	r5, r5, r1
 801774a:	9202      	str	r2, [sp, #8]
 801774c:	9508      	str	r5, [sp, #32]
 801774e:	f140 8128 	bpl.w	80179a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8017752:	9a03      	ldr	r2, [sp, #12]
 8017754:	2a00      	cmp	r2, #0
 8017756:	f6ff af45 	blt.w	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801775a:	9a02      	ldr	r2, [sp, #8]
 801775c:	f04f 34ff 	mov.w	r4, #4294967295
 8017760:	4252      	negs	r2, r2
 8017762:	940b      	str	r4, [sp, #44]	; 0x2c
 8017764:	2400      	movs	r4, #0
 8017766:	9202      	str	r2, [sp, #8]
 8017768:	9a06      	ldr	r2, [sp, #24]
 801776a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801776e:	9206      	str	r2, [sp, #24]
 8017770:	462a      	mov	r2, r5
 8017772:	435a      	muls	r2, r3
 8017774:	9401      	str	r4, [sp, #4]
 8017776:	9c02      	ldr	r4, [sp, #8]
 8017778:	9d02      	ldr	r5, [sp, #8]
 801777a:	fb92 f4f4 	sdiv	r4, r2, r4
 801777e:	fb05 2214 	mls	r2, r5, r4, r2
 8017782:	2a00      	cmp	r2, #0
 8017784:	9207      	str	r2, [sp, #28]
 8017786:	bfbc      	itt	lt
 8017788:	1952      	addlt	r2, r2, r5
 801778a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801778e:	6905      	ldr	r5, [r0, #16]
 8017790:	bfb8      	it	lt
 8017792:	9207      	strlt	r2, [sp, #28]
 8017794:	eb04 0901 	add.w	r9, r4, r1
 8017798:	9a01      	ldr	r2, [sp, #4]
 801779a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801779e:	429a      	cmp	r2, r3
 80177a0:	f040 8111 	bne.w	80179c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80177a4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80177a8:	429e      	cmp	r6, r3
 80177aa:	d104      	bne.n	80177b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80177ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80177b0:	9a03      	ldr	r2, [sp, #12]
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d01b      	beq.n	80177ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80177b6:	88ea      	ldrh	r2, [r5, #6]
 80177b8:	88ab      	ldrh	r3, [r5, #4]
 80177ba:	4313      	orrs	r3, r2
 80177bc:	d010      	beq.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80177be:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80177c2:	2a00      	cmp	r2, #0
 80177c4:	db0c      	blt.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80177c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80177c8:	429a      	cmp	r2, r3
 80177ca:	da09      	bge.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80177cc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80177d0:	429a      	cmp	r2, r3
 80177d2:	f102 0201 	add.w	r2, r2, #1
 80177d6:	bf38      	it	cc
 80177d8:	3508      	addcc	r5, #8
 80177da:	6082      	str	r2, [r0, #8]
 80177dc:	bf38      	it	cc
 80177de:	6105      	strcc	r5, [r0, #16]
 80177e0:	6903      	ldr	r3, [r0, #16]
 80177e2:	9a03      	ldr	r2, [sp, #12]
 80177e4:	801e      	strh	r6, [r3, #0]
 80177e6:	805a      	strh	r2, [r3, #2]
 80177e8:	2200      	movs	r2, #0
 80177ea:	809a      	strh	r2, [r3, #4]
 80177ec:	80da      	strh	r2, [r3, #6]
 80177ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177f0:	9a03      	ldr	r2, [sp, #12]
 80177f2:	6901      	ldr	r1, [r0, #16]
 80177f4:	441a      	add	r2, r3
 80177f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80177fa:	42b3      	cmp	r3, r6
 80177fc:	d103      	bne.n	8017806 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80177fe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017802:	429a      	cmp	r2, r3
 8017804:	d01a      	beq.n	801783c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8017806:	88cc      	ldrh	r4, [r1, #6]
 8017808:	888b      	ldrh	r3, [r1, #4]
 801780a:	4323      	orrs	r3, r4
 801780c:	d010      	beq.n	8017830 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801780e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017812:	2c00      	cmp	r4, #0
 8017814:	db0c      	blt.n	8017830 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017818:	429c      	cmp	r4, r3
 801781a:	da09      	bge.n	8017830 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801781c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017820:	429c      	cmp	r4, r3
 8017822:	f104 0401 	add.w	r4, r4, #1
 8017826:	bf38      	it	cc
 8017828:	3108      	addcc	r1, #8
 801782a:	6084      	str	r4, [r0, #8]
 801782c:	bf38      	it	cc
 801782e:	6101      	strcc	r1, [r0, #16]
 8017830:	6903      	ldr	r3, [r0, #16]
 8017832:	2100      	movs	r1, #0
 8017834:	801e      	strh	r6, [r3, #0]
 8017836:	805a      	strh	r2, [r3, #2]
 8017838:	8099      	strh	r1, [r3, #4]
 801783a:	80d9      	strh	r1, [r3, #6]
 801783c:	9b06      	ldr	r3, [sp, #24]
 801783e:	4293      	cmp	r3, r2
 8017840:	f000 8082 	beq.w	8017948 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8017844:	9b08      	ldr	r3, [sp, #32]
 8017846:	9902      	ldr	r1, [sp, #8]
 8017848:	015b      	lsls	r3, r3, #5
 801784a:	9c02      	ldr	r4, [sp, #8]
 801784c:	fb93 f1f1 	sdiv	r1, r3, r1
 8017850:	fb04 3311 	mls	r3, r4, r1, r3
 8017854:	9103      	str	r1, [sp, #12]
 8017856:	2b00      	cmp	r3, #0
 8017858:	9308      	str	r3, [sp, #32]
 801785a:	da04      	bge.n	8017866 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801785c:	1e4b      	subs	r3, r1, #1
 801785e:	9303      	str	r3, [sp, #12]
 8017860:	9b08      	ldr	r3, [sp, #32]
 8017862:	4423      	add	r3, r4
 8017864:	9308      	str	r3, [sp, #32]
 8017866:	9b07      	ldr	r3, [sp, #28]
 8017868:	464f      	mov	r7, r9
 801786a:	9902      	ldr	r1, [sp, #8]
 801786c:	2600      	movs	r6, #0
 801786e:	1a5b      	subs	r3, r3, r1
 8017870:	9307      	str	r3, [sp, #28]
 8017872:	9b01      	ldr	r3, [sp, #4]
 8017874:	f1c3 0320 	rsb	r3, r3, #32
 8017878:	930e      	str	r3, [sp, #56]	; 0x38
 801787a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801787c:	9b01      	ldr	r3, [sp, #4]
 801787e:	1a5b      	subs	r3, r3, r1
 8017880:	930a      	str	r3, [sp, #40]	; 0x28
 8017882:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017886:	185b      	adds	r3, r3, r1
 8017888:	bf58      	it	pl
 801788a:	9902      	ldrpl	r1, [sp, #8]
 801788c:	9307      	str	r3, [sp, #28]
 801788e:	bf57      	itett	pl
 8017890:	1a5b      	subpl	r3, r3, r1
 8017892:	9903      	ldrmi	r1, [sp, #12]
 8017894:	9307      	strpl	r3, [sp, #28]
 8017896:	9b03      	ldrpl	r3, [sp, #12]
 8017898:	bf58      	it	pl
 801789a:	1c59      	addpl	r1, r3, #1
 801789c:	2a00      	cmp	r2, #0
 801789e:	4489      	add	r9, r1
 80178a0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80178a4:	db2e      	blt.n	8017904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80178a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80178a8:	4293      	cmp	r3, r2
 80178aa:	dd2b      	ble.n	8017904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80178ac:	9c01      	ldr	r4, [sp, #4]
 80178ae:	6905      	ldr	r5, [r0, #16]
 80178b0:	46a0      	mov	r8, r4
 80178b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80178b4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80178b8:	45a0      	cmp	r8, r4
 80178ba:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80178be:	f040 814c 	bne.w	8017b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80178c2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80178c6:	4551      	cmp	r1, sl
 80178c8:	d103      	bne.n	80178d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80178ca:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80178ce:	4291      	cmp	r1, r2
 80178d0:	d018      	beq.n	8017904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80178d2:	ea5c 010e 	orrs.w	r1, ip, lr
 80178d6:	d00f      	beq.n	80178f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80178d8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80178dc:	2900      	cmp	r1, #0
 80178de:	db0b      	blt.n	80178f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80178e0:	428b      	cmp	r3, r1
 80178e2:	dd09      	ble.n	80178f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80178e4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80178e8:	4299      	cmp	r1, r3
 80178ea:	f101 0101 	add.w	r1, r1, #1
 80178ee:	bf38      	it	cc
 80178f0:	3508      	addcc	r5, #8
 80178f2:	6081      	str	r1, [r0, #8]
 80178f4:	bf38      	it	cc
 80178f6:	6105      	strcc	r5, [r0, #16]
 80178f8:	6903      	ldr	r3, [r0, #16]
 80178fa:	f8a3 a000 	strh.w	sl, [r3]
 80178fe:	805a      	strh	r2, [r3, #2]
 8017900:	809e      	strh	r6, [r3, #4]
 8017902:	80de      	strh	r6, [r3, #6]
 8017904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017906:	6901      	ldr	r1, [r0, #16]
 8017908:	441a      	add	r2, r3
 801790a:	88cc      	ldrh	r4, [r1, #6]
 801790c:	888b      	ldrh	r3, [r1, #4]
 801790e:	4323      	orrs	r3, r4
 8017910:	d010      	beq.n	8017934 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017912:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017916:	2c00      	cmp	r4, #0
 8017918:	db0c      	blt.n	8017934 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801791a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801791c:	429c      	cmp	r4, r3
 801791e:	da09      	bge.n	8017934 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017920:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017924:	429c      	cmp	r4, r3
 8017926:	f104 0401 	add.w	r4, r4, #1
 801792a:	bf38      	it	cc
 801792c:	3108      	addcc	r1, #8
 801792e:	6084      	str	r4, [r0, #8]
 8017930:	bf38      	it	cc
 8017932:	6101      	strcc	r1, [r0, #16]
 8017934:	6903      	ldr	r3, [r0, #16]
 8017936:	464f      	mov	r7, r9
 8017938:	f8a3 a000 	strh.w	sl, [r3]
 801793c:	805a      	strh	r2, [r3, #2]
 801793e:	809e      	strh	r6, [r3, #4]
 8017940:	80de      	strh	r6, [r3, #6]
 8017942:	9b06      	ldr	r3, [sp, #24]
 8017944:	4293      	cmp	r3, r2
 8017946:	d19c      	bne.n	8017882 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8017948:	9b01      	ldr	r3, [sp, #4]
 801794a:	6907      	ldr	r7, [r0, #16]
 801794c:	f1c3 0620 	rsb	r6, r3, #32
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017956:	9b04      	ldr	r3, [sp, #16]
 8017958:	429e      	cmp	r6, r3
 801795a:	f040 81c7 	bne.w	8017cec <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801795e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017962:	459e      	cmp	lr, r3
 8017964:	d104      	bne.n	8017970 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8017966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801796a:	429a      	cmp	r2, r3
 801796c:	f43f ae3a 	beq.w	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017970:	88f9      	ldrh	r1, [r7, #6]
 8017972:	88bb      	ldrh	r3, [r7, #4]
 8017974:	430b      	orrs	r3, r1
 8017976:	d010      	beq.n	801799a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801797c:	2b00      	cmp	r3, #0
 801797e:	db0c      	blt.n	801799a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017980:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017982:	428b      	cmp	r3, r1
 8017984:	da09      	bge.n	801799a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017986:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801798a:	428b      	cmp	r3, r1
 801798c:	f103 0301 	add.w	r3, r3, #1
 8017990:	bf38      	it	cc
 8017992:	3708      	addcc	r7, #8
 8017994:	6083      	str	r3, [r0, #8]
 8017996:	bf38      	it	cc
 8017998:	6107      	strcc	r7, [r0, #16]
 801799a:	6903      	ldr	r3, [r0, #16]
 801799c:	f8a3 e000 	strh.w	lr, [r3]
 80179a0:	e603      	b.n	80175aa <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80179a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80179a4:	9c03      	ldr	r4, [sp, #12]
 80179a6:	42a2      	cmp	r2, r4
 80179a8:	f6ff ae1c 	blt.w	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80179ac:	9c06      	ldr	r4, [sp, #24]
 80179ae:	42a2      	cmp	r2, r4
 80179b0:	9c08      	ldr	r4, [sp, #32]
 80179b2:	bfbc      	itt	lt
 80179b4:	3201      	addlt	r2, #1
 80179b6:	9206      	strlt	r2, [sp, #24]
 80179b8:	f1c3 0220 	rsb	r2, r3, #32
 80179bc:	4362      	muls	r2, r4
 80179be:	2401      	movs	r4, #1
 80179c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80179c2:	2420      	movs	r4, #32
 80179c4:	e6d6      	b.n	8017774 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80179c6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80179ca:	f009 021f 	and.w	r2, r9, #31
 80179ce:	f001 011f 	and.w	r1, r1, #31
 80179d2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80179d6:	920c      	str	r2, [sp, #48]	; 0x30
 80179d8:	45b0      	cmp	r8, r6
 80179da:	9a01      	ldr	r2, [sp, #4]
 80179dc:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80179e0:	eba2 0203 	sub.w	r2, r2, r3
 80179e4:	d108      	bne.n	80179f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80179e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179e8:	4496      	add	lr, r2
 80179ea:	4419      	add	r1, r3
 80179ec:	f8a5 e004 	strh.w	lr, [r5, #4]
 80179f0:	fb02 a101 	mla	r1, r2, r1, sl
 80179f4:	80e9      	strh	r1, [r5, #6]
 80179f6:	e6fa      	b.n	80177ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80179f8:	2c00      	cmp	r4, #0
 80179fa:	f2c0 80a7 	blt.w	8017b4c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80179fe:	2701      	movs	r7, #1
 8017a00:	f1c1 0c20 	rsb	ip, r1, #32
 8017a04:	970a      	str	r7, [sp, #40]	; 0x28
 8017a06:	2720      	movs	r7, #32
 8017a08:	fb02 f20c 	mul.w	r2, r2, ip
 8017a0c:	9709      	str	r7, [sp, #36]	; 0x24
 8017a0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017a10:	fb92 fcf4 	sdiv	ip, r2, r4
 8017a14:	fb04 221c 	mls	r2, r4, ip, r2
 8017a18:	4439      	add	r1, r7
 8017a1a:	2a00      	cmp	r2, #0
 8017a1c:	bfbc      	itt	lt
 8017a1e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017a22:	1912      	addlt	r2, r2, r4
 8017a24:	fb0c a101 	mla	r1, ip, r1, sl
 8017a28:	44e6      	add	lr, ip
 8017a2a:	80e9      	strh	r1, [r5, #6]
 8017a2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017a2e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017a32:	eb08 0501 	add.w	r5, r8, r1
 8017a36:	6901      	ldr	r1, [r0, #16]
 8017a38:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017a3c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017a40:	ea58 070e 	orrs.w	r7, r8, lr
 8017a44:	d010      	beq.n	8017a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017a46:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017a4a:	f1be 0f00 	cmp.w	lr, #0
 8017a4e:	db0b      	blt.n	8017a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017a50:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017a52:	45be      	cmp	lr, r7
 8017a54:	da08      	bge.n	8017a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017a56:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017a5a:	45be      	cmp	lr, r7
 8017a5c:	bf3c      	itt	cc
 8017a5e:	3108      	addcc	r1, #8
 8017a60:	6101      	strcc	r1, [r0, #16]
 8017a62:	f10e 0101 	add.w	r1, lr, #1
 8017a66:	6081      	str	r1, [r0, #8]
 8017a68:	6901      	ldr	r1, [r0, #16]
 8017a6a:	f04f 0e00 	mov.w	lr, #0
 8017a6e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017a72:	42ae      	cmp	r6, r5
 8017a74:	800d      	strh	r5, [r1, #0]
 8017a76:	4463      	add	r3, ip
 8017a78:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017a7c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017a80:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017a84:	d053      	beq.n	8017b2e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8017a86:	9901      	ldr	r1, [sp, #4]
 8017a88:	1b12      	subs	r2, r2, r4
 8017a8a:	1ac9      	subs	r1, r1, r3
 8017a8c:	4461      	add	r1, ip
 8017a8e:	0149      	lsls	r1, r1, #5
 8017a90:	fb91 fef4 	sdiv	lr, r1, r4
 8017a94:	fb04 111e 	mls	r1, r4, lr, r1
 8017a98:	2900      	cmp	r1, #0
 8017a9a:	bfbc      	itt	lt
 8017a9c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017aa0:	1909      	addlt	r1, r1, r4
 8017aa2:	f10e 0701 	add.w	r7, lr, #1
 8017aa6:	970d      	str	r7, [sp, #52]	; 0x34
 8017aa8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017aac:	1852      	adds	r2, r2, r1
 8017aae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017ab0:	bf54      	ite	pl
 8017ab2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8017ab6:	46f4      	movmi	ip, lr
 8017ab8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017abc:	bf58      	it	pl
 8017abe:	1b12      	subpl	r2, r2, r4
 8017ac0:	4463      	add	r3, ip
 8017ac2:	443d      	add	r5, r7
 8017ac4:	44e3      	add	fp, ip
 8017ac6:	f8aa b004 	strh.w	fp, [sl, #4]
 8017aca:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8017ace:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8017ad2:	f8aa b006 	strh.w	fp, [sl, #6]
 8017ad6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ada:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017ade:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8017ae2:	ea5b 070a 	orrs.w	r7, fp, sl
 8017ae6:	d014      	beq.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017ae8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8017aec:	f1ba 0f00 	cmp.w	sl, #0
 8017af0:	db0f      	blt.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017af2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017af4:	45ba      	cmp	sl, r7
 8017af6:	da0c      	bge.n	8017b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017af8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017afc:	45ba      	cmp	sl, r7
 8017afe:	f10a 0a01 	add.w	sl, sl, #1
 8017b02:	bf38      	it	cc
 8017b04:	f10c 0c08 	addcc.w	ip, ip, #8
 8017b08:	f8c0 a008 	str.w	sl, [r0, #8]
 8017b0c:	bf38      	it	cc
 8017b0e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017b12:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b16:	f04f 0700 	mov.w	r7, #0
 8017b1a:	42ae      	cmp	r6, r5
 8017b1c:	f8ac 5000 	strh.w	r5, [ip]
 8017b20:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017b24:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017b28:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017b2c:	d1bc      	bne.n	8017aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8017b2e:	6904      	ldr	r4, [r0, #16]
 8017b30:	9a01      	ldr	r2, [sp, #4]
 8017b32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b34:	1ad3      	subs	r3, r2, r3
 8017b36:	88a2      	ldrh	r2, [r4, #4]
 8017b38:	3120      	adds	r1, #32
 8017b3a:	441a      	add	r2, r3
 8017b3c:	80a2      	strh	r2, [r4, #4]
 8017b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b40:	1a89      	subs	r1, r1, r2
 8017b42:	88e2      	ldrh	r2, [r4, #6]
 8017b44:	fb03 2301 	mla	r3, r3, r1, r2
 8017b48:	80e3      	strh	r3, [r4, #6]
 8017b4a:	e650      	b.n	80177ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8017b50:	434a      	muls	r2, r1
 8017b52:	4264      	negs	r4, r4
 8017b54:	970a      	str	r7, [sp, #40]	; 0x28
 8017b56:	2700      	movs	r7, #0
 8017b58:	e758      	b.n	8017a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8017b5a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017b5e:	f009 031f 	and.w	r3, r9, #31
 8017b62:	f007 071f 	and.w	r7, r7, #31
 8017b66:	fa1f fc8c 	uxth.w	ip, ip
 8017b6a:	45d0      	cmp	r8, sl
 8017b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b6e:	fa1f fe8e 	uxth.w	lr, lr
 8017b72:	d10a      	bne.n	8017b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8017b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b76:	449c      	add	ip, r3
 8017b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b7a:	441f      	add	r7, r3
 8017b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b7e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017b82:	fb03 e707 	mla	r7, r3, r7, lr
 8017b86:	80ef      	strh	r7, [r5, #6]
 8017b88:	e6bc      	b.n	8017904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017b8a:	2900      	cmp	r1, #0
 8017b8c:	f2c0 80a6 	blt.w	8017cdc <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8017b90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017b92:	f1c7 0320 	rsb	r3, r7, #32
 8017b96:	4363      	muls	r3, r4
 8017b98:	2401      	movs	r4, #1
 8017b9a:	940d      	str	r4, [sp, #52]	; 0x34
 8017b9c:	2420      	movs	r4, #32
 8017b9e:	940c      	str	r4, [sp, #48]	; 0x30
 8017ba0:	fb93 f4f1 	sdiv	r4, r3, r1
 8017ba4:	fb01 3b14 	mls	fp, r1, r4, r3
 8017ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017baa:	f1bb 0f00 	cmp.w	fp, #0
 8017bae:	441f      	add	r7, r3
 8017bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bb2:	bfbc      	itt	lt
 8017bb4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017bb8:	448b      	addlt	fp, r1
 8017bba:	fb04 e707 	mla	r7, r4, r7, lr
 8017bbe:	44a4      	add	ip, r4
 8017bc0:	80ef      	strh	r7, [r5, #6]
 8017bc2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017bc6:	eb08 0503 	add.w	r5, r8, r3
 8017bca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017bce:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8017bd2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017bd6:	ea5e 0307 	orrs.w	r3, lr, r7
 8017bda:	d011      	beq.n	8017c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8017bdc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8017be0:	f1be 0f00 	cmp.w	lr, #0
 8017be4:	db0c      	blt.n	8017c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8017be6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017be8:	45be      	cmp	lr, r7
 8017bea:	da09      	bge.n	8017c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8017bec:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017bf0:	45be      	cmp	lr, r7
 8017bf2:	bf3c      	itt	cc
 8017bf4:	f10c 0708 	addcc.w	r7, ip, #8
 8017bf8:	6107      	strcc	r7, [r0, #16]
 8017bfa:	f10e 0701 	add.w	r7, lr, #1
 8017bfe:	6087      	str	r7, [r0, #8]
 8017c00:	6907      	ldr	r7, [r0, #16]
 8017c02:	b213      	sxth	r3, r2
 8017c04:	4555      	cmp	r5, sl
 8017c06:	9310      	str	r3, [sp, #64]	; 0x40
 8017c08:	807b      	strh	r3, [r7, #2]
 8017c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c0c:	803d      	strh	r5, [r7, #0]
 8017c0e:	80be      	strh	r6, [r7, #4]
 8017c10:	eb04 0c03 	add.w	ip, r4, r3
 8017c14:	80fe      	strh	r6, [r7, #6]
 8017c16:	d050      	beq.n	8017cba <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8017c18:	9b01      	ldr	r3, [sp, #4]
 8017c1a:	eba3 070c 	sub.w	r7, r3, ip
 8017c1e:	ebab 0301 	sub.w	r3, fp, r1
 8017c22:	443c      	add	r4, r7
 8017c24:	9309      	str	r3, [sp, #36]	; 0x24
 8017c26:	0164      	lsls	r4, r4, #5
 8017c28:	fb94 f8f1 	sdiv	r8, r4, r1
 8017c2c:	fb01 4418 	mls	r4, r1, r8, r4
 8017c30:	2c00      	cmp	r4, #0
 8017c32:	bfbc      	itt	lt
 8017c34:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017c38:	1864      	addlt	r4, r4, r1
 8017c3a:	f108 0701 	add.w	r7, r8, #1
 8017c3e:	9711      	str	r7, [sp, #68]	; 0x44
 8017c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c42:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017c46:	191b      	adds	r3, r3, r4
 8017c48:	f8be b004 	ldrh.w	fp, [lr, #4]
 8017c4c:	bf54      	ite	pl
 8017c4e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8017c50:	4647      	movmi	r7, r8
 8017c52:	9309      	str	r3, [sp, #36]	; 0x24
 8017c54:	bf58      	it	pl
 8017c56:	1a5b      	subpl	r3, r3, r1
 8017c58:	44bb      	add	fp, r7
 8017c5a:	44bc      	add	ip, r7
 8017c5c:	bf58      	it	pl
 8017c5e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8017c60:	f8ae b004 	strh.w	fp, [lr, #4]
 8017c64:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017c68:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017c6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017c6e:	f8ae b006 	strh.w	fp, [lr, #6]
 8017c72:	443d      	add	r5, r7
 8017c74:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017c78:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017c7c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8017c80:	ea5b 0307 	orrs.w	r3, fp, r7
 8017c84:	d011      	beq.n	8017caa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017c86:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8017c8a:	f1bb 0f00 	cmp.w	fp, #0
 8017c8e:	db0c      	blt.n	8017caa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017c90:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017c92:	45bb      	cmp	fp, r7
 8017c94:	da09      	bge.n	8017caa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017c96:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017c9a:	45bb      	cmp	fp, r7
 8017c9c:	bf3c      	itt	cc
 8017c9e:	f10e 0708 	addcc.w	r7, lr, #8
 8017ca2:	6107      	strcc	r7, [r0, #16]
 8017ca4:	f10b 0701 	add.w	r7, fp, #1
 8017ca8:	6087      	str	r7, [r0, #8]
 8017caa:	6907      	ldr	r7, [r0, #16]
 8017cac:	4555      	cmp	r5, sl
 8017cae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cb0:	803d      	strh	r5, [r7, #0]
 8017cb2:	807b      	strh	r3, [r7, #2]
 8017cb4:	80be      	strh	r6, [r7, #4]
 8017cb6:	80fe      	strh	r6, [r7, #6]
 8017cb8:	d1c2      	bne.n	8017c40 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8017cba:	9b01      	ldr	r3, [sp, #4]
 8017cbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017cbe:	eba3 0c0c 	sub.w	ip, r3, ip
 8017cc2:	6903      	ldr	r3, [r0, #16]
 8017cc4:	3720      	adds	r7, #32
 8017cc6:	8899      	ldrh	r1, [r3, #4]
 8017cc8:	4461      	add	r1, ip
 8017cca:	8099      	strh	r1, [r3, #4]
 8017ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017cce:	1a7f      	subs	r7, r7, r1
 8017cd0:	88d9      	ldrh	r1, [r3, #6]
 8017cd2:	fb0c 1c07 	mla	ip, ip, r7, r1
 8017cd6:	f8a3 c006 	strh.w	ip, [r3, #6]
 8017cda:	e613      	b.n	8017904 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017cdc:	f04f 34ff 	mov.w	r4, #4294967295
 8017ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ce2:	4249      	negs	r1, r1
 8017ce4:	940d      	str	r4, [sp, #52]	; 0x34
 8017ce6:	2400      	movs	r4, #0
 8017ce8:	437b      	muls	r3, r7
 8017cea:	e758      	b.n	8017b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8017cec:	9905      	ldr	r1, [sp, #20]
 8017cee:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8017cf2:	f009 0c1f 	and.w	ip, r9, #31
 8017cf6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8017cfa:	f001 011f 	and.w	r1, r1, #31
 8017cfe:	45f3      	cmp	fp, lr
 8017d00:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8017d04:	9102      	str	r1, [sp, #8]
 8017d06:	9904      	ldr	r1, [sp, #16]
 8017d08:	eba1 0406 	sub.w	r4, r1, r6
 8017d0c:	d108      	bne.n	8017d20 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8017d0e:	9b02      	ldr	r3, [sp, #8]
 8017d10:	44a0      	add	r8, r4
 8017d12:	449c      	add	ip, r3
 8017d14:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017d18:	fb04 a40c 	mla	r4, r4, ip, sl
 8017d1c:	80fc      	strh	r4, [r7, #6]
 8017d1e:	e461      	b.n	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017d20:	9905      	ldr	r1, [sp, #20]
 8017d22:	ebb1 0109 	subs.w	r1, r1, r9
 8017d26:	bf51      	iteee	pl
 8017d28:	f1cc 0520 	rsbpl	r5, ip, #32
 8017d2c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017d30:	4249      	negmi	r1, r1
 8017d32:	2500      	movmi	r5, #0
 8017d34:	bf5d      	ittte	pl
 8017d36:	436c      	mulpl	r4, r5
 8017d38:	2520      	movpl	r5, #32
 8017d3a:	f04f 0901 	movpl.w	r9, #1
 8017d3e:	f04f 39ff 	movmi.w	r9, #4294967295
 8017d42:	9501      	str	r5, [sp, #4]
 8017d44:	9b01      	ldr	r3, [sp, #4]
 8017d46:	fb94 f5f1 	sdiv	r5, r4, r1
 8017d4a:	fb01 4415 	mls	r4, r1, r5, r4
 8017d4e:	449c      	add	ip, r3
 8017d50:	eb0b 0309 	add.w	r3, fp, r9
 8017d54:	2c00      	cmp	r4, #0
 8017d56:	bfbc      	itt	lt
 8017d58:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017d5c:	1864      	addlt	r4, r4, r1
 8017d5e:	44a8      	add	r8, r5
 8017d60:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017d64:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017d68:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017d6c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017d70:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017d74:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017d78:	ea58 0707 	orrs.w	r7, r8, r7
 8017d7c:	d011      	beq.n	8017da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017d7e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017d82:	f1b8 0f00 	cmp.w	r8, #0
 8017d86:	db0c      	blt.n	8017da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017d88:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017d8a:	45b8      	cmp	r8, r7
 8017d8c:	da09      	bge.n	8017da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017d8e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8017d92:	45b8      	cmp	r8, r7
 8017d94:	bf3c      	itt	cc
 8017d96:	f10c 0708 	addcc.w	r7, ip, #8
 8017d9a:	6107      	strcc	r7, [r0, #16]
 8017d9c:	f108 0701 	add.w	r7, r8, #1
 8017da0:	6087      	str	r7, [r0, #8]
 8017da2:	6907      	ldr	r7, [r0, #16]
 8017da4:	f04f 0c00 	mov.w	ip, #0
 8017da8:	b212      	sxth	r2, r2
 8017daa:	459e      	cmp	lr, r3
 8017dac:	803b      	strh	r3, [r7, #0]
 8017dae:	442e      	add	r6, r5
 8017db0:	807a      	strh	r2, [r7, #2]
 8017db2:	f8a7 c004 	strh.w	ip, [r7, #4]
 8017db6:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017dba:	d04b      	beq.n	8017e54 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8017dbc:	9f04      	ldr	r7, [sp, #16]
 8017dbe:	1a64      	subs	r4, r4, r1
 8017dc0:	f04f 0a00 	mov.w	sl, #0
 8017dc4:	1bbf      	subs	r7, r7, r6
 8017dc6:	443d      	add	r5, r7
 8017dc8:	016d      	lsls	r5, r5, #5
 8017dca:	fb95 f8f1 	sdiv	r8, r5, r1
 8017dce:	fb01 5518 	mls	r5, r1, r8, r5
 8017dd2:	4565      	cmp	r5, ip
 8017dd4:	bfbc      	itt	lt
 8017dd6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017dda:	186d      	addlt	r5, r5, r1
 8017ddc:	f108 0701 	add.w	r7, r8, #1
 8017de0:	9703      	str	r7, [sp, #12]
 8017de2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017de6:	1964      	adds	r4, r4, r5
 8017de8:	444b      	add	r3, r9
 8017dea:	bf54      	ite	pl
 8017dec:	9f03      	ldrpl	r7, [sp, #12]
 8017dee:	4647      	movmi	r7, r8
 8017df0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017df4:	bf58      	it	pl
 8017df6:	1a64      	subpl	r4, r4, r1
 8017df8:	443e      	add	r6, r7
 8017dfa:	44bb      	add	fp, r7
 8017dfc:	f8ac b004 	strh.w	fp, [ip, #4]
 8017e00:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017e04:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017e08:	f8ac b006 	strh.w	fp, [ip, #6]
 8017e0c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017e10:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017e14:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017e18:	ea5b 0707 	orrs.w	r7, fp, r7
 8017e1c:	d011      	beq.n	8017e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017e1e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017e22:	f1bb 0f00 	cmp.w	fp, #0
 8017e26:	db0c      	blt.n	8017e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017e28:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017e2a:	45bb      	cmp	fp, r7
 8017e2c:	da09      	bge.n	8017e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017e2e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017e32:	45bb      	cmp	fp, r7
 8017e34:	bf3c      	itt	cc
 8017e36:	f10c 0708 	addcc.w	r7, ip, #8
 8017e3a:	6107      	strcc	r7, [r0, #16]
 8017e3c:	f10b 0701 	add.w	r7, fp, #1
 8017e40:	6087      	str	r7, [r0, #8]
 8017e42:	6907      	ldr	r7, [r0, #16]
 8017e44:	459e      	cmp	lr, r3
 8017e46:	803b      	strh	r3, [r7, #0]
 8017e48:	807a      	strh	r2, [r7, #2]
 8017e4a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017e4e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017e52:	d1c6      	bne.n	8017de2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8017e54:	9b04      	ldr	r3, [sp, #16]
 8017e56:	1b9e      	subs	r6, r3, r6
 8017e58:	6903      	ldr	r3, [r0, #16]
 8017e5a:	889a      	ldrh	r2, [r3, #4]
 8017e5c:	4432      	add	r2, r6
 8017e5e:	809a      	strh	r2, [r3, #4]
 8017e60:	9a02      	ldr	r2, [sp, #8]
 8017e62:	f102 0c20 	add.w	ip, r2, #32
 8017e66:	9a01      	ldr	r2, [sp, #4]
 8017e68:	ebac 0c02 	sub.w	ip, ip, r2
 8017e6c:	88da      	ldrh	r2, [r3, #6]
 8017e6e:	fb06 260c 	mla	r6, r6, ip, r2
 8017e72:	80de      	strh	r6, [r3, #6]
 8017e74:	f7ff bbb6 	b.w	80175e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08017e78 <_ZN8touchgfx7Outline6lineToEii>:
 8017e78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017e7a:	079b      	lsls	r3, r3, #30
 8017e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e7e:	460e      	mov	r6, r1
 8017e80:	4615      	mov	r5, r2
 8017e82:	d511      	bpl.n	8017ea8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017e84:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8017e88:	ea86 0701 	eor.w	r7, r6, r1
 8017e8c:	ea85 0302 	eor.w	r3, r5, r2
 8017e90:	433b      	orrs	r3, r7
 8017e92:	d009      	beq.n	8017ea8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017e94:	4633      	mov	r3, r6
 8017e96:	9500      	str	r5, [sp, #0]
 8017e98:	f7ff fb4c 	bl	8017534 <_ZN8touchgfx7Outline10renderLineEiiii>
 8017e9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017e9e:	f043 0301 	orr.w	r3, r3, #1
 8017ea2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8017ea6:	6243      	str	r3, [r0, #36]	; 0x24
 8017ea8:	b003      	add	sp, #12
 8017eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017eac <_ZN8touchgfx7Outline6moveToEii>:
 8017eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017eb0:	4615      	mov	r5, r2
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	460e      	mov	r6, r1
 8017eb6:	079a      	lsls	r2, r3, #30
 8017eb8:	d401      	bmi.n	8017ebe <_ZN8touchgfx7Outline6moveToEii+0x12>
 8017eba:	f7ff fb08 	bl	80174ce <_ZN8touchgfx7Outline5resetEv>
 8017ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec0:	07db      	lsls	r3, r3, #31
 8017ec2:	d504      	bpl.n	8017ece <_ZN8touchgfx7Outline6moveToEii+0x22>
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8017eca:	f7ff ffd5 	bl	8017e78 <_ZN8touchgfx7Outline6lineToEii>
 8017ece:	6923      	ldr	r3, [r4, #16]
 8017ed0:	1170      	asrs	r0, r6, #5
 8017ed2:	1169      	asrs	r1, r5, #5
 8017ed4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ed8:	4290      	cmp	r0, r2
 8017eda:	d103      	bne.n	8017ee4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8017edc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ee0:	4291      	cmp	r1, r2
 8017ee2:	d01a      	beq.n	8017f1a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8017ee4:	88df      	ldrh	r7, [r3, #6]
 8017ee6:	889a      	ldrh	r2, [r3, #4]
 8017ee8:	433a      	orrs	r2, r7
 8017eea:	d010      	beq.n	8017f0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017eec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ef0:	2a00      	cmp	r2, #0
 8017ef2:	db0c      	blt.n	8017f0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017ef4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017ef6:	42ba      	cmp	r2, r7
 8017ef8:	da09      	bge.n	8017f0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017efa:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8017efe:	42ba      	cmp	r2, r7
 8017f00:	f102 0201 	add.w	r2, r2, #1
 8017f04:	bf38      	it	cc
 8017f06:	3308      	addcc	r3, #8
 8017f08:	60a2      	str	r2, [r4, #8]
 8017f0a:	bf38      	it	cc
 8017f0c:	6123      	strcc	r3, [r4, #16]
 8017f0e:	6923      	ldr	r3, [r4, #16]
 8017f10:	2200      	movs	r2, #0
 8017f12:	8018      	strh	r0, [r3, #0]
 8017f14:	8059      	strh	r1, [r3, #2]
 8017f16:	809a      	strh	r2, [r3, #4]
 8017f18:	80da      	strh	r2, [r3, #6]
 8017f1a:	6166      	str	r6, [r4, #20]
 8017f1c:	6225      	str	r5, [r4, #32]
 8017f1e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017f24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8017f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f28:	b0d0      	sub	sp, #320	; 0x140
 8017f2a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017f2e:	466c      	mov	r4, sp
 8017f30:	4627      	mov	r7, r4
 8017f32:	1a0d      	subs	r5, r1, r0
 8017f34:	f100 0308 	add.w	r3, r0, #8
 8017f38:	2d48      	cmp	r5, #72	; 0x48
 8017f3a:	f340 80d5 	ble.w	80180e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017f3e:	112d      	asrs	r5, r5, #4
 8017f40:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017f44:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017f48:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8017f4c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8017f50:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017f54:	6816      	ldr	r6, [r2, #0]
 8017f56:	6006      	str	r6, [r0, #0]
 8017f58:	6856      	ldr	r6, [r2, #4]
 8017f5a:	6046      	str	r6, [r0, #4]
 8017f5c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017f60:	f8a2 8002 	strh.w	r8, [r2, #2]
 8017f64:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017f68:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017f6c:	f1a1 0208 	sub.w	r2, r1, #8
 8017f70:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017f74:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8017f78:	4565      	cmp	r5, ip
 8017f7a:	db06      	blt.n	8017f8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8017f7c:	d119      	bne.n	8017fb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017f7e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017f82:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8017f86:	42ae      	cmp	r6, r5
 8017f88:	dd13      	ble.n	8017fb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017f8a:	460e      	mov	r6, r1
 8017f8c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8017f90:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8017f94:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017f98:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8017f9c:	601d      	str	r5, [r3, #0]
 8017f9e:	6875      	ldr	r5, [r6, #4]
 8017fa0:	605d      	str	r5, [r3, #4]
 8017fa2:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017fa6:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017faa:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017fae:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017fb2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017fb6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8017fba:	42ae      	cmp	r6, r5
 8017fbc:	db06      	blt.n	8017fcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8017fbe:	d116      	bne.n	8017fee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017fc0:	f9b0 c000 	ldrsh.w	ip, [r0]
 8017fc4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8017fc8:	45ac      	cmp	ip, r5
 8017fca:	da10      	bge.n	8017fee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017fcc:	681d      	ldr	r5, [r3, #0]
 8017fce:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017fd2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017fd6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017fda:	6005      	str	r5, [r0, #0]
 8017fdc:	685d      	ldr	r5, [r3, #4]
 8017fde:	f8a0 8008 	strh.w	r8, [r0, #8]
 8017fe2:	6045      	str	r5, [r0, #4]
 8017fe4:	8146      	strh	r6, [r0, #10]
 8017fe6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8017fea:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017fee:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017ff2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8017ff6:	4565      	cmp	r5, ip
 8017ff8:	db06      	blt.n	8018008 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8017ffa:	d119      	bne.n	8018030 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017ffc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018000:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018004:	42ae      	cmp	r6, r5
 8018006:	da13      	bge.n	8018030 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018008:	460e      	mov	r6, r1
 801800a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801800e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018012:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018016:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801801a:	6005      	str	r5, [r0, #0]
 801801c:	6875      	ldr	r5, [r6, #4]
 801801e:	6045      	str	r5, [r0, #4]
 8018020:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018024:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018028:	f821 8c04 	strh.w	r8, [r1, #-4]
 801802c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018030:	3308      	adds	r3, #8
 8018032:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018036:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801803a:	45e6      	cmp	lr, ip
 801803c:	dbf8      	blt.n	8018030 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801803e:	d105      	bne.n	801804c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018040:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018044:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018048:	42ae      	cmp	r6, r5
 801804a:	dbf1      	blt.n	8018030 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801804c:	4615      	mov	r5, r2
 801804e:	3a08      	subs	r2, #8
 8018050:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018054:	45b4      	cmp	ip, r6
 8018056:	dbf9      	blt.n	801804c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018058:	d105      	bne.n	8018066 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801805a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801805e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018062:	45b0      	cmp	r8, r6
 8018064:	dbf2      	blt.n	801804c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018066:	4293      	cmp	r3, r2
 8018068:	f1a5 0608 	sub.w	r6, r5, #8
 801806c:	d816      	bhi.n	801809c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801806e:	f8d6 c000 	ldr.w	ip, [r6]
 8018072:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018076:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801807a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801807e:	f8c3 c000 	str.w	ip, [r3]
 8018082:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018086:	f8c3 c004 	str.w	ip, [r3, #4]
 801808a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801808e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018092:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018096:	f825 8c02 	strh.w	r8, [r5, #-2]
 801809a:	e7c9      	b.n	8018030 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801809c:	f8d6 e000 	ldr.w	lr, [r6]
 80180a0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80180a4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80180a8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80180ac:	f8c0 e000 	str.w	lr, [r0]
 80180b0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80180b4:	1a16      	subs	r6, r2, r0
 80180b6:	f8c0 e004 	str.w	lr, [r0, #4]
 80180ba:	f825 ac08 	strh.w	sl, [r5, #-8]
 80180be:	f825 cc06 	strh.w	ip, [r5, #-6]
 80180c2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80180c6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80180ca:	1acd      	subs	r5, r1, r3
 80180cc:	10ed      	asrs	r5, r5, #3
 80180ce:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80180d2:	bfb5      	itete	lt
 80180d4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80180d8:	e9c4 3100 	strdge	r3, r1, [r4]
 80180dc:	460a      	movlt	r2, r1
 80180de:	4603      	movge	r3, r0
 80180e0:	3408      	adds	r4, #8
 80180e2:	4618      	mov	r0, r3
 80180e4:	4611      	mov	r1, r2
 80180e6:	e724      	b.n	8017f32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80180e8:	4299      	cmp	r1, r3
 80180ea:	d927      	bls.n	801813c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80180ec:	f1a3 0210 	sub.w	r2, r3, #16
 80180f0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80180f4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80180f8:	45ac      	cmp	ip, r5
 80180fa:	db06      	blt.n	801810a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80180fc:	d11c      	bne.n	8018138 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80180fe:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018102:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018106:	42ae      	cmp	r6, r5
 8018108:	da16      	bge.n	8018138 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801810a:	4615      	mov	r5, r2
 801810c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018110:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018114:	3a08      	subs	r2, #8
 8018116:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801811a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801811e:	6196      	str	r6, [r2, #24]
 8018120:	42a8      	cmp	r0, r5
 8018122:	686e      	ldr	r6, [r5, #4]
 8018124:	f8a2 9010 	strh.w	r9, [r2, #16]
 8018128:	61d6      	str	r6, [r2, #28]
 801812a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801812e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8018132:	f8a2 e016 	strh.w	lr, [r2, #22]
 8018136:	d1db      	bne.n	80180f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018138:	3308      	adds	r3, #8
 801813a:	e7d5      	b.n	80180e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801813c:	42bc      	cmp	r4, r7
 801813e:	d903      	bls.n	8018148 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8018140:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018144:	3c08      	subs	r4, #8
 8018146:	e6f4      	b.n	8017f32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018148:	b050      	add	sp, #320	; 0x140
 801814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801814e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801814e:	b510      	push	{r4, lr}
 8018150:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018152:	4604      	mov	r4, r0
 8018154:	07da      	lsls	r2, r3, #31
 8018156:	d507      	bpl.n	8018168 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8018158:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801815c:	f7ff fe8c 	bl	8017e78 <_ZN8touchgfx7Outline6lineToEii>
 8018160:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018162:	f023 0301 	bic.w	r3, r3, #1
 8018166:	6243      	str	r3, [r0, #36]	; 0x24
 8018168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801816a:	079b      	lsls	r3, r3, #30
 801816c:	d521      	bpl.n	80181b2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801816e:	6923      	ldr	r3, [r4, #16]
 8018170:	88d9      	ldrh	r1, [r3, #6]
 8018172:	889a      	ldrh	r2, [r3, #4]
 8018174:	430a      	orrs	r2, r1
 8018176:	d010      	beq.n	801819a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018178:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801817c:	2a00      	cmp	r2, #0
 801817e:	db0c      	blt.n	801819a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018182:	428a      	cmp	r2, r1
 8018184:	da09      	bge.n	801819a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018186:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801818a:	4291      	cmp	r1, r2
 801818c:	f102 0201 	add.w	r2, r2, #1
 8018190:	bf88      	it	hi
 8018192:	3308      	addhi	r3, #8
 8018194:	60a2      	str	r2, [r4, #8]
 8018196:	bf88      	it	hi
 8018198:	6123      	strhi	r3, [r4, #16]
 801819a:	68a1      	ldr	r1, [r4, #8]
 801819c:	b129      	cbz	r1, 80181aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801819e:	6863      	ldr	r3, [r4, #4]
 80181a0:	4299      	cmp	r1, r3
 80181a2:	d802      	bhi.n	80181aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80181a4:	68e0      	ldr	r0, [r4, #12]
 80181a6:	f7ff febd 	bl	8017f24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80181aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181ac:	f023 0302 	bic.w	r3, r3, #2
 80181b0:	6263      	str	r3, [r4, #36]	; 0x24
 80181b2:	68e0      	ldr	r0, [r4, #12]
 80181b4:	bd10      	pop	{r4, pc}
	...

080181b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80181b8:	4b02      	ldr	r3, [pc, #8]	; (80181c4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80181ba:	6018      	str	r0, [r3, #0]
 80181bc:	4b02      	ldr	r3, [pc, #8]	; (80181c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80181be:	6019      	str	r1, [r3, #0]
 80181c0:	4770      	bx	lr
 80181c2:	bf00      	nop
 80181c4:	2003bd10 	.word	0x2003bd10
 80181c8:	2003bd14 	.word	0x2003bd14

080181cc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80181cc:	4b01      	ldr	r3, [pc, #4]	; (80181d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80181ce:	6818      	ldr	r0, [r3, #0]
 80181d0:	4770      	bx	lr
 80181d2:	bf00      	nop
 80181d4:	2003bd10 	.word	0x2003bd10

080181d8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80181d8:	4b01      	ldr	r3, [pc, #4]	; (80181e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80181da:	6818      	ldr	r0, [r3, #0]
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop
 80181e0:	2003bd14 	.word	0x2003bd14

080181e4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80181e4:	b510      	push	{r4, lr}
 80181e6:	6803      	ldr	r3, [r0, #0]
 80181e8:	460c      	mov	r4, r1
 80181ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181ec:	4798      	blx	r3
 80181ee:	1b03      	subs	r3, r0, r4
 80181f0:	4258      	negs	r0, r3
 80181f2:	4158      	adcs	r0, r3
 80181f4:	bd10      	pop	{r4, pc}
	...

080181f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80181f8:	4b01      	ldr	r3, [pc, #4]	; (8018200 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80181fa:	6019      	str	r1, [r3, #0]
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop
 8018200:	2003bd18 	.word	0x2003bd18

08018204 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018208:	4696      	mov	lr, r2
 801820a:	b097      	sub	sp, #92	; 0x5c
 801820c:	4605      	mov	r5, r0
 801820e:	4614      	mov	r4, r2
 8018210:	460e      	mov	r6, r1
 8018212:	461f      	mov	r7, r3
 8018214:	f10d 0c1c 	add.w	ip, sp, #28
 8018218:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801821c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018220:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018224:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018228:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801822c:	f8de 3000 	ldr.w	r3, [lr]
 8018230:	f104 0e14 	add.w	lr, r4, #20
 8018234:	f8cc 3000 	str.w	r3, [ip]
 8018238:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801823c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018244:	f8de 3000 	ldr.w	r3, [lr]
 8018248:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801824c:	f8cc 3000 	str.w	r3, [ip]
 8018250:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801825c:	f8de 3000 	ldr.w	r3, [lr]
 8018260:	4631      	mov	r1, r6
 8018262:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018264:	4628      	mov	r0, r5
 8018266:	f8cc 3000 	str.w	r3, [ip]
 801826a:	682b      	ldr	r3, [r5, #0]
 801826c:	9201      	str	r2, [sp, #4]
 801826e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018270:	f8cd 8008 	str.w	r8, [sp, #8]
 8018274:	9200      	str	r2, [sp, #0]
 8018276:	aa07      	add	r2, sp, #28
 8018278:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801827c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8018280:	463b      	mov	r3, r7
 8018282:	47d8      	blx	fp
 8018284:	46a6      	mov	lr, r4
 8018286:	f10d 0c1c 	add.w	ip, sp, #28
 801828a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801828e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018292:	f8de 3000 	ldr.w	r3, [lr]
 8018296:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801829a:	343c      	adds	r4, #60	; 0x3c
 801829c:	f8cc 3000 	str.w	r3, [ip]
 80182a0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80182a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80182a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80182ac:	f8de 3000 	ldr.w	r3, [lr]
 80182b0:	f8cc 3000 	str.w	r3, [ip]
 80182b4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80182b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80182ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80182be:	6823      	ldr	r3, [r4, #0]
 80182c0:	4631      	mov	r1, r6
 80182c2:	4628      	mov	r0, r5
 80182c4:	f8cc 3000 	str.w	r3, [ip]
 80182c8:	682b      	ldr	r3, [r5, #0]
 80182ca:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80182ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80182d0:	f8cd 8008 	str.w	r8, [sp, #8]
 80182d4:	9201      	str	r2, [sp, #4]
 80182d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80182d8:	9200      	str	r2, [sp, #0]
 80182da:	aa07      	add	r2, sp, #28
 80182dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80182de:	463b      	mov	r3, r7
 80182e0:	47a0      	blx	r4
 80182e2:	b017      	add	sp, #92	; 0x5c
 80182e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182e8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80182e8:	2000      	movs	r0, #0
 80182ea:	4770      	bx	lr

080182ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80182ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f0:	b08d      	sub	sp, #52	; 0x34
 80182f2:	4688      	mov	r8, r1
 80182f4:	f8d3 c000 	ldr.w	ip, [r3]
 80182f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80182fa:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80182fe:	680f      	ldr	r7, [r1, #0]
 8018300:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018304:	eba7 070c 	sub.w	r7, r7, ip
 8018308:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801830c:	edd3 6a07 	vldr	s13, [r3, #28]
 8018310:	42bc      	cmp	r4, r7
 8018312:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018314:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018318:	bfa8      	it	ge
 801831a:	463c      	movge	r4, r7
 801831c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018320:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018324:	ee07 4a90 	vmov	s15, r4
 8018328:	eb09 0e0c 	add.w	lr, r9, ip
 801832c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018330:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018334:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018338:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801833c:	4571      	cmp	r1, lr
 801833e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018342:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018346:	ee25 5a27 	vmul.f32	s10, s10, s15
 801834a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801834e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018352:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018356:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801835a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801835e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018362:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018366:	f340 808c 	ble.w	8018482 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801836a:	eba1 060e 	sub.w	r6, r1, lr
 801836e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018372:	ee07 5a10 	vmov	s14, r5
 8018376:	2d00      	cmp	r5, #0
 8018378:	fb04 6615 	mls	r6, r4, r5, r6
 801837c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018380:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018384:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018388:	eea7 1a05 	vfma.f32	s2, s14, s10
 801838c:	dd12      	ble.n	80183b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801838e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018392:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018396:	ee31 2a45 	vsub.f32	s4, s2, s10
 801839a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a2:	bf14      	ite	ne
 80183a4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80183a8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80183ac:	ee61 1a87 	vmul.f32	s3, s3, s14
 80183b0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80183b4:	fb05 f204 	mul.w	r2, r5, r4
 80183b8:	1abf      	subs	r7, r7, r2
 80183ba:	4494      	add	ip, r2
 80183bc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80183c0:	4411      	add	r1, r2
 80183c2:	eb09 020c 	add.w	r2, r9, ip
 80183c6:	b209      	sxth	r1, r1
 80183c8:	443a      	add	r2, r7
 80183ca:	428a      	cmp	r2, r1
 80183cc:	bfc4      	itt	gt
 80183ce:	eba1 0209 	subgt.w	r2, r1, r9
 80183d2:	eba2 070c 	subgt.w	r7, r2, ip
 80183d6:	2f00      	cmp	r7, #0
 80183d8:	dd50      	ble.n	801847c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80183da:	fb97 f1f4 	sdiv	r1, r7, r4
 80183de:	fb04 7211 	mls	r2, r4, r1, r7
 80183e2:	b90a      	cbnz	r2, 80183e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80183e4:	3901      	subs	r1, #1
 80183e6:	4622      	mov	r2, r4
 80183e8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80183ec:	6840      	ldr	r0, [r0, #4]
 80183ee:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80183f2:	44b6      	add	lr, r6
 80183f4:	f8d0 a000 	ldr.w	sl, [r0]
 80183f8:	2900      	cmp	r1, #0
 80183fa:	bfcc      	ite	gt
 80183fc:	46a1      	movgt	r9, r4
 80183fe:	4691      	movle	r9, r2
 8018400:	900b      	str	r0, [sp, #44]	; 0x2c
 8018402:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018404:	fb04 e505 	mla	r5, r4, r5, lr
 8018408:	eef0 6a42 	vmov.f32	s13, s4
 801840c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018410:	9008      	str	r0, [sp, #32]
 8018412:	eeb0 7a61 	vmov.f32	s14, s3
 8018416:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018418:	695b      	ldr	r3, [r3, #20]
 801841a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801841e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018422:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018426:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018428:	445b      	add	r3, fp
 801842a:	9307      	str	r3, [sp, #28]
 801842c:	ee16 3a90 	vmov	r3, s13
 8018430:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018434:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018438:	ee21 3a23 	vmul.f32	s6, s2, s7
 801843c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018440:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018444:	ee17 7a90 	vmov	r7, s15
 8018448:	ee73 7a42 	vsub.f32	s15, s6, s4
 801844c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018450:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018454:	ee17 ca90 	vmov	ip, s15
 8018458:	fb9c fcf4 	sdiv	ip, ip, r4
 801845c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018460:	9302      	str	r3, [sp, #8]
 8018462:	ee17 3a10 	vmov	r3, s14
 8018466:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801846a:	fb07 3706 	mla	r7, r7, r6, r3
 801846e:	eba9 0306 	sub.w	r3, r9, r6
 8018472:	e9cd 4700 	strd	r4, r7, [sp]
 8018476:	f8da 4008 	ldr.w	r4, [sl, #8]
 801847a:	47a0      	blx	r4
 801847c:	b00d      	add	sp, #52	; 0x34
 801847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018482:	2500      	movs	r5, #0
 8018484:	462e      	mov	r6, r5
 8018486:	e799      	b.n	80183bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801848c:	b0db      	sub	sp, #364	; 0x16c
 801848e:	461d      	mov	r5, r3
 8018490:	4614      	mov	r4, r2
 8018492:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018496:	910f      	str	r1, [sp, #60]	; 0x3c
 8018498:	4629      	mov	r1, r5
 801849a:	930a      	str	r3, [sp, #40]	; 0x28
 801849c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80184a0:	9009      	str	r0, [sp, #36]	; 0x24
 80184a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80184a4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80184a8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80184ac:	9310      	str	r3, [sp, #64]	; 0x40
 80184ae:	6803      	ldr	r3, [r0, #0]
 80184b0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80184b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80184b6:	47b8      	blx	r7
 80184b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ba:	6058      	str	r0, [r3, #4]
 80184bc:	2800      	cmp	r0, #0
 80184be:	f000 83a1 	beq.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80184c2:	682b      	ldr	r3, [r5, #0]
 80184c4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80184c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80184cc:	9314      	str	r3, [sp, #80]	; 0x50
 80184ce:	686b      	ldr	r3, [r5, #4]
 80184d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184d4:	9315      	str	r3, [sp, #84]	; 0x54
 80184d6:	4bc1      	ldr	r3, [pc, #772]	; (80187dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80184d8:	7819      	ldrb	r1, [r3, #0]
 80184da:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80184de:	2900      	cmp	r1, #0
 80184e0:	bf16      	itet	ne
 80184e2:	4619      	movne	r1, r3
 80184e4:	4611      	moveq	r1, r2
 80184e6:	4613      	movne	r3, r2
 80184e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ec:	9116      	str	r1, [sp, #88]	; 0x58
 80184ee:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80184f2:	f240 8387 	bls.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80184f6:	ed94 7a07 	vldr	s14, [r4, #28]
 80184fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018502:	f240 837f 	bls.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018506:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801850a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018512:	f240 8377 	bls.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018516:	6822      	ldr	r2, [r4, #0]
 8018518:	4bb1      	ldr	r3, [pc, #708]	; (80187e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801851a:	429a      	cmp	r2, r3
 801851c:	f2c0 8372 	blt.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018520:	49b0      	ldr	r1, [pc, #704]	; (80187e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018522:	6963      	ldr	r3, [r4, #20]
 8018524:	428a      	cmp	r2, r1
 8018526:	f300 836d 	bgt.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801852a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801852e:	48ae      	ldr	r0, [pc, #696]	; (80187e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018530:	33ff      	adds	r3, #255	; 0xff
 8018532:	4283      	cmp	r3, r0
 8018534:	f200 8366 	bhi.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801853a:	4dac      	ldr	r5, [pc, #688]	; (80187ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801853c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018540:	33ff      	adds	r3, #255	; 0xff
 8018542:	42ab      	cmp	r3, r5
 8018544:	f200 835e 	bhi.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018548:	6862      	ldr	r2, [r4, #4]
 801854a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801854e:	33ff      	adds	r3, #255	; 0xff
 8018550:	4283      	cmp	r3, r0
 8018552:	f200 8357 	bhi.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018556:	69a1      	ldr	r1, [r4, #24]
 8018558:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801855c:	33ff      	adds	r3, #255	; 0xff
 801855e:	4283      	cmp	r3, r0
 8018560:	f200 8350 	bhi.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018566:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801856a:	30ff      	adds	r0, #255	; 0xff
 801856c:	42a8      	cmp	r0, r5
 801856e:	f200 8349 	bhi.w	8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018572:	428a      	cmp	r2, r1
 8018574:	f280 8110 	bge.w	8018798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018578:	429a      	cmp	r2, r3
 801857a:	f300 8119 	bgt.w	80187b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801857e:	4299      	cmp	r1, r3
 8018580:	f280 811d 	bge.w	80187be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018584:	2502      	movs	r5, #2
 8018586:	2701      	movs	r7, #1
 8018588:	46a9      	mov	r9, r5
 801858a:	46b8      	mov	r8, r7
 801858c:	f04f 0a00 	mov.w	sl, #0
 8018590:	4621      	mov	r1, r4
 8018592:	a849      	add	r0, sp, #292	; 0x124
 8018594:	f003 fd04 	bl	801bfa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018598:	4622      	mov	r2, r4
 801859a:	4653      	mov	r3, sl
 801859c:	a949      	add	r1, sp, #292	; 0x124
 801859e:	f8cd 9000 	str.w	r9, [sp]
 80185a2:	a819      	add	r0, sp, #100	; 0x64
 80185a4:	f003 fe2c 	bl	801c200 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80185a8:	4622      	mov	r2, r4
 80185aa:	4653      	mov	r3, sl
 80185ac:	a949      	add	r1, sp, #292	; 0x124
 80185ae:	f8cd 8000 	str.w	r8, [sp]
 80185b2:	a829      	add	r0, sp, #164	; 0xa4
 80185b4:	f003 fe24 	bl	801c200 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80185b8:	4643      	mov	r3, r8
 80185ba:	4622      	mov	r2, r4
 80185bc:	a949      	add	r1, sp, #292	; 0x124
 80185be:	f8cd 9000 	str.w	r9, [sp]
 80185c2:	a839      	add	r0, sp, #228	; 0xe4
 80185c4:	f003 fe1c 	bl	801c200 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80185c8:	42af      	cmp	r7, r5
 80185ca:	af12      	add	r7, sp, #72	; 0x48
 80185cc:	bfb7      	itett	lt
 80185ce:	2300      	movlt	r3, #0
 80185d0:	2301      	movge	r3, #1
 80185d2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80185d4:	ac19      	addlt	r4, sp, #100	; 0x64
 80185d6:	bfb1      	iteee	lt
 80185d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80185da:	ad19      	addge	r5, sp, #100	; 0x64
 80185dc:	930e      	strge	r3, [sp, #56]	; 0x38
 80185de:	ac29      	addge	r4, sp, #164	; 0xa4
 80185e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80185e6:	e887 0003 	stmia.w	r7, {r0, r1}
 80185ea:	b928      	cbnz	r0, 80185f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80185ec:	4b80      	ldr	r3, [pc, #512]	; (80187f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80185ee:	6818      	ldr	r0, [r3, #0]
 80185f0:	6803      	ldr	r3, [r0, #0]
 80185f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185f4:	4798      	blx	r3
 80185f6:	6038      	str	r0, [r7, #0]
 80185f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80185fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80185fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018602:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018604:	930c      	str	r3, [sp, #48]	; 0x30
 8018606:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018608:	6963      	ldr	r3, [r4, #20]
 801860a:	440b      	add	r3, r1
 801860c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018610:	4408      	add	r0, r1
 8018612:	b200      	sxth	r0, r0
 8018614:	4283      	cmp	r3, r0
 8018616:	900d      	str	r0, [sp, #52]	; 0x34
 8018618:	f280 80dd 	bge.w	80187d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801861c:	428b      	cmp	r3, r1
 801861e:	da08      	bge.n	8018632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018620:	2a00      	cmp	r2, #0
 8018622:	dd06      	ble.n	8018632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018624:	1acb      	subs	r3, r1, r3
 8018626:	429a      	cmp	r2, r3
 8018628:	f2c0 80e4 	blt.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801862c:	2b00      	cmp	r3, #0
 801862e:	f300 80e2 	bgt.w	80187f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018632:	6967      	ldr	r7, [r4, #20]
 8018634:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801863a:	443b      	add	r3, r7
 801863c:	461f      	mov	r7, r3
 801863e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018640:	1bdf      	subs	r7, r3, r7
 8018642:	4297      	cmp	r7, r2
 8018644:	bfa8      	it	ge
 8018646:	4617      	movge	r7, r2
 8018648:	2f00      	cmp	r7, #0
 801864a:	f340 8166 	ble.w	801891a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801864e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018650:	6829      	ldr	r1, [r5, #0]
 8018652:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018656:	f9bb 3000 	ldrsh.w	r3, [fp]
 801865a:	4411      	add	r1, r2
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	4299      	cmp	r1, r3
 8018660:	dd1a      	ble.n	8018698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018662:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018666:	4402      	add	r2, r0
 8018668:	440b      	add	r3, r1
 801866a:	b21b      	sxth	r3, r3
 801866c:	429a      	cmp	r2, r3
 801866e:	dc13      	bgt.n	8018698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018672:	a912      	add	r1, sp, #72	; 0x48
 8018674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	9206      	str	r2, [sp, #24]
 801867c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801867e:	9500      	str	r5, [sp, #0]
 8018680:	9205      	str	r2, [sp, #20]
 8018682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018684:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018688:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801868a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801868e:	aa49      	add	r2, sp, #292	; 0x124
 8018690:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018694:	4623      	mov	r3, r4
 8018696:	47c8      	blx	r9
 8018698:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801869c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80186a0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80186a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80186a8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80186ac:	68a1      	ldr	r1, [r4, #8]
 80186ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80186b2:	ed94 6a08 	vldr	s12, [r4, #32]
 80186b6:	edd4 6a07 	vldr	s13, [r4, #28]
 80186ba:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80186be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80186c2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80186c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80186ca:	edc4 6a07 	vstr	s13, [r4, #28]
 80186ce:	441a      	add	r2, r3
 80186d0:	6963      	ldr	r3, [r4, #20]
 80186d2:	3301      	adds	r3, #1
 80186d4:	6022      	str	r2, [r4, #0]
 80186d6:	6163      	str	r3, [r4, #20]
 80186d8:	69a3      	ldr	r3, [r4, #24]
 80186da:	3b01      	subs	r3, #1
 80186dc:	61a3      	str	r3, [r4, #24]
 80186de:	6923      	ldr	r3, [r4, #16]
 80186e0:	440b      	add	r3, r1
 80186e2:	68e1      	ldr	r1, [r4, #12]
 80186e4:	428b      	cmp	r3, r1
 80186e6:	6123      	str	r3, [r4, #16]
 80186e8:	db15      	blt.n	8018716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80186ea:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80186ee:	3201      	adds	r2, #1
 80186f0:	1a5b      	subs	r3, r3, r1
 80186f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80186f6:	6022      	str	r2, [r4, #0]
 80186f8:	6123      	str	r3, [r4, #16]
 80186fa:	edc4 6a07 	vstr	s13, [r4, #28]
 80186fe:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018702:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018706:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801870a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801870e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018712:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018716:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801871a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801871e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018726:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801872a:	68a9      	ldr	r1, [r5, #8]
 801872c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018730:	ed95 6a08 	vldr	s12, [r5, #32]
 8018734:	edd5 6a07 	vldr	s13, [r5, #28]
 8018738:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801873c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018740:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018744:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018748:	edc5 6a07 	vstr	s13, [r5, #28]
 801874c:	441a      	add	r2, r3
 801874e:	696b      	ldr	r3, [r5, #20]
 8018750:	3301      	adds	r3, #1
 8018752:	602a      	str	r2, [r5, #0]
 8018754:	616b      	str	r3, [r5, #20]
 8018756:	69ab      	ldr	r3, [r5, #24]
 8018758:	3b01      	subs	r3, #1
 801875a:	61ab      	str	r3, [r5, #24]
 801875c:	692b      	ldr	r3, [r5, #16]
 801875e:	440b      	add	r3, r1
 8018760:	68e9      	ldr	r1, [r5, #12]
 8018762:	428b      	cmp	r3, r1
 8018764:	612b      	str	r3, [r5, #16]
 8018766:	db15      	blt.n	8018794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018768:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801876c:	3201      	adds	r2, #1
 801876e:	1a5b      	subs	r3, r3, r1
 8018770:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018774:	602a      	str	r2, [r5, #0]
 8018776:	612b      	str	r3, [r5, #16]
 8018778:	edc5 6a07 	vstr	s13, [r5, #28]
 801877c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018780:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018784:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018788:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801878c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018790:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018794:	3f01      	subs	r7, #1
 8018796:	e757      	b.n	8018648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018798:	4299      	cmp	r1, r3
 801879a:	dc13      	bgt.n	80187c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801879c:	429a      	cmp	r2, r3
 801879e:	da14      	bge.n	80187ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80187a0:	2502      	movs	r5, #2
 80187a2:	2703      	movs	r7, #3
 80187a4:	f04f 0800 	mov.w	r8, #0
 80187a8:	46a9      	mov	r9, r5
 80187aa:	f04f 0a01 	mov.w	sl, #1
 80187ae:	e6ef      	b.n	8018590 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80187b0:	2501      	movs	r5, #1
 80187b2:	2700      	movs	r7, #0
 80187b4:	46a9      	mov	r9, r5
 80187b6:	46b8      	mov	r8, r7
 80187b8:	f04f 0a02 	mov.w	sl, #2
 80187bc:	e6e8      	b.n	8018590 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80187be:	2501      	movs	r5, #1
 80187c0:	2702      	movs	r7, #2
 80187c2:	e6e1      	b.n	8018588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80187c4:	2500      	movs	r5, #0
 80187c6:	2701      	movs	r7, #1
 80187c8:	e7f4      	b.n	80187b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80187ca:	2702      	movs	r7, #2
 80187cc:	2503      	movs	r5, #3
 80187ce:	f04f 0900 	mov.w	r9, #0
 80187d2:	46b8      	mov	r8, r7
 80187d4:	e7e9      	b.n	80187aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80187d6:	4613      	mov	r3, r2
 80187d8:	e728      	b.n	801862c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80187da:	bf00      	nop
 80187dc:	2003bd00 	.word	0x2003bd00
 80187e0:	fffd8f01 	.word	0xfffd8f01
 80187e4:	00027100 	.word	0x00027100
 80187e8:	0004e1ff 	.word	0x0004e1ff
 80187ec:	0004e1fe 	.word	0x0004e1fe
 80187f0:	2003bd08 	.word	0x2003bd08
 80187f4:	4613      	mov	r3, r2
 80187f6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80187f8:	469e      	mov	lr, r3
 80187fa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80187fc:	469c      	mov	ip, r3
 80187fe:	9111      	str	r1, [sp, #68]	; 0x44
 8018800:	f04f 0900 	mov.w	r9, #0
 8018804:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018808:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801880c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018810:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018814:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018818:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801881c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018820:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018824:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018828:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801882c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018830:	f1bc 0f00 	cmp.w	ip, #0
 8018834:	d147      	bne.n	80188c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018836:	eb03 0c07 	add.w	ip, r3, r7
 801883a:	1ad7      	subs	r7, r2, r3
 801883c:	f1b9 0f00 	cmp.w	r9, #0
 8018840:	d009      	beq.n	8018856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018842:	9029      	str	r0, [sp, #164]	; 0xa4
 8018844:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018848:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801884c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018850:	912d      	str	r1, [sp, #180]	; 0xb4
 8018852:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018856:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018858:	f04f 0800 	mov.w	r8, #0
 801885c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018860:	9111      	str	r1, [sp, #68]	; 0x44
 8018862:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018866:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801886a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801886e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018872:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018876:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801887a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801887e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018882:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018886:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801888a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801888e:	f1be 0f00 	cmp.w	lr, #0
 8018892:	d031      	beq.n	80188f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018894:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018896:	4450      	add	r0, sl
 8018898:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801889c:	4431      	add	r1, r6
 801889e:	ee37 7a04 	vadd.f32	s14, s14, s8
 80188a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80188a6:	4549      	cmp	r1, r9
 80188a8:	db08      	blt.n	80188bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80188aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80188ae:	3001      	adds	r0, #1
 80188b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80188b4:	eba1 0109 	sub.w	r1, r1, r9
 80188b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80188bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188c0:	f04f 0801 	mov.w	r8, #1
 80188c4:	e7e3      	b.n	801888e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80188c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80188c8:	4450      	add	r0, sl
 80188ca:	ee37 7a24 	vadd.f32	s14, s14, s9
 80188ce:	4431      	add	r1, r6
 80188d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80188d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80188d8:	4541      	cmp	r1, r8
 80188da:	db08      	blt.n	80188ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80188dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80188e0:	3001      	adds	r0, #1
 80188e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80188e6:	eba1 0108 	sub.w	r1, r1, r8
 80188ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80188ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80188f2:	f04f 0901 	mov.w	r9, #1
 80188f6:	e79b      	b.n	8018830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80188f8:	449c      	add	ip, r3
 80188fa:	1aff      	subs	r7, r7, r3
 80188fc:	f1b8 0f00 	cmp.w	r8, #0
 8018900:	d009      	beq.n	8018916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018902:	9019      	str	r0, [sp, #100]	; 0x64
 8018904:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018908:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801890c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018910:	911d      	str	r1, [sp, #116]	; 0x74
 8018912:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018916:	1ad2      	subs	r2, r2, r3
 8018918:	e68b      	b.n	8018632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801891a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801891c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801891e:	2b00      	cmp	r3, #0
 8018920:	f000 80d1 	beq.w	8018ac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018924:	ad19      	add	r5, sp, #100	; 0x64
 8018926:	ac39      	add	r4, sp, #228	; 0xe4
 8018928:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801892a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801892e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018932:	930c      	str	r3, [sp, #48]	; 0x30
 8018934:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018936:	6963      	ldr	r3, [r4, #20]
 8018938:	440b      	add	r3, r1
 801893a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801893e:	4408      	add	r0, r1
 8018940:	b200      	sxth	r0, r0
 8018942:	4283      	cmp	r3, r0
 8018944:	900d      	str	r0, [sp, #52]	; 0x34
 8018946:	f280 80c1 	bge.w	8018acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801894a:	428b      	cmp	r3, r1
 801894c:	da08      	bge.n	8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801894e:	2a00      	cmp	r2, #0
 8018950:	dd06      	ble.n	8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018952:	1acb      	subs	r3, r1, r3
 8018954:	429a      	cmp	r2, r3
 8018956:	f2c0 80bb 	blt.w	8018ad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801895a:	2b00      	cmp	r3, #0
 801895c:	f300 80b9 	bgt.w	8018ad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018960:	6967      	ldr	r7, [r4, #20]
 8018962:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018968:	443b      	add	r3, r7
 801896a:	461f      	mov	r7, r3
 801896c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801896e:	1bdf      	subs	r7, r3, r7
 8018970:	4297      	cmp	r7, r2
 8018972:	bfa8      	it	ge
 8018974:	4617      	movge	r7, r2
 8018976:	2f00      	cmp	r7, #0
 8018978:	f340 813c 	ble.w	8018bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801897c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801897e:	6829      	ldr	r1, [r5, #0]
 8018980:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018984:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018988:	4411      	add	r1, r2
 801898a:	6820      	ldr	r0, [r4, #0]
 801898c:	4299      	cmp	r1, r3
 801898e:	dd1a      	ble.n	80189c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018990:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018994:	4402      	add	r2, r0
 8018996:	440b      	add	r3, r1
 8018998:	b21b      	sxth	r3, r3
 801899a:	429a      	cmp	r2, r3
 801899c:	dc13      	bgt.n	80189c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801899e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189a0:	a912      	add	r1, sp, #72	; 0x48
 80189a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	9206      	str	r2, [sp, #24]
 80189aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189ac:	9500      	str	r5, [sp, #0]
 80189ae:	9205      	str	r2, [sp, #20]
 80189b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189b2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80189b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80189b8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80189bc:	aa49      	add	r2, sp, #292	; 0x124
 80189be:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80189c2:	4623      	mov	r3, r4
 80189c4:	47c8      	blx	r9
 80189c6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80189ca:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80189ce:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80189d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80189d6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80189da:	68a1      	ldr	r1, [r4, #8]
 80189dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80189e0:	ed94 6a08 	vldr	s12, [r4, #32]
 80189e4:	edd4 6a07 	vldr	s13, [r4, #28]
 80189e8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80189ec:	ee76 6a86 	vadd.f32	s13, s13, s12
 80189f0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80189f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80189f8:	edc4 6a07 	vstr	s13, [r4, #28]
 80189fc:	441a      	add	r2, r3
 80189fe:	6963      	ldr	r3, [r4, #20]
 8018a00:	3301      	adds	r3, #1
 8018a02:	6022      	str	r2, [r4, #0]
 8018a04:	6163      	str	r3, [r4, #20]
 8018a06:	69a3      	ldr	r3, [r4, #24]
 8018a08:	3b01      	subs	r3, #1
 8018a0a:	61a3      	str	r3, [r4, #24]
 8018a0c:	6923      	ldr	r3, [r4, #16]
 8018a0e:	440b      	add	r3, r1
 8018a10:	68e1      	ldr	r1, [r4, #12]
 8018a12:	428b      	cmp	r3, r1
 8018a14:	6123      	str	r3, [r4, #16]
 8018a16:	db15      	blt.n	8018a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018a18:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018a1c:	3201      	adds	r2, #1
 8018a1e:	1a5b      	subs	r3, r3, r1
 8018a20:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018a24:	6022      	str	r2, [r4, #0]
 8018a26:	6123      	str	r3, [r4, #16]
 8018a28:	edc4 6a07 	vstr	s13, [r4, #28]
 8018a2c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018a30:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018a34:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018a38:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a40:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018a44:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018a48:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018a4c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a54:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018a58:	68a9      	ldr	r1, [r5, #8]
 8018a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a5e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018a62:	edd5 6a07 	vldr	s13, [r5, #28]
 8018a66:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018a6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018a6e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018a72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018a76:	edc5 6a07 	vstr	s13, [r5, #28]
 8018a7a:	441a      	add	r2, r3
 8018a7c:	696b      	ldr	r3, [r5, #20]
 8018a7e:	3301      	adds	r3, #1
 8018a80:	602a      	str	r2, [r5, #0]
 8018a82:	616b      	str	r3, [r5, #20]
 8018a84:	69ab      	ldr	r3, [r5, #24]
 8018a86:	3b01      	subs	r3, #1
 8018a88:	61ab      	str	r3, [r5, #24]
 8018a8a:	692b      	ldr	r3, [r5, #16]
 8018a8c:	440b      	add	r3, r1
 8018a8e:	68e9      	ldr	r1, [r5, #12]
 8018a90:	428b      	cmp	r3, r1
 8018a92:	612b      	str	r3, [r5, #16]
 8018a94:	db15      	blt.n	8018ac2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018a96:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018a9a:	3201      	adds	r2, #1
 8018a9c:	1a5b      	subs	r3, r3, r1
 8018a9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018aa2:	602a      	str	r2, [r5, #0]
 8018aa4:	612b      	str	r3, [r5, #16]
 8018aa6:	edc5 6a07 	vstr	s13, [r5, #28]
 8018aaa:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018aae:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ab2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018ab6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018abe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018ac2:	3f01      	subs	r7, #1
 8018ac4:	e757      	b.n	8018976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018ac6:	ad39      	add	r5, sp, #228	; 0xe4
 8018ac8:	ac19      	add	r4, sp, #100	; 0x64
 8018aca:	e72d      	b.n	8018928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018acc:	4613      	mov	r3, r2
 8018ace:	e744      	b.n	801895a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018ad0:	4613      	mov	r3, r2
 8018ad2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018ad4:	469e      	mov	lr, r3
 8018ad6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018ada:	461f      	mov	r7, r3
 8018adc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018ae0:	f04f 0900 	mov.w	r9, #0
 8018ae4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018ae8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018aec:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018af0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018af4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018af8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018afa:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018afe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018b02:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018b06:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018b0a:	960e      	str	r6, [sp, #56]	; 0x38
 8018b0c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018b10:	2f00      	cmp	r7, #0
 8018b12:	d146      	bne.n	8018ba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018b14:	449c      	add	ip, r3
 8018b16:	1ad7      	subs	r7, r2, r3
 8018b18:	f1b9 0f00 	cmp.w	r9, #0
 8018b1c:	d009      	beq.n	8018b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018b1e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018b20:	913d      	str	r1, [sp, #244]	; 0xf4
 8018b22:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018b26:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018b2a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018b2e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018b32:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018b34:	f04f 0800 	mov.w	r8, #0
 8018b38:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018b3c:	910e      	str	r1, [sp, #56]	; 0x38
 8018b3e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018b42:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018b46:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018b4a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018b4e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018b52:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018b56:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018b5a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018b5e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018b62:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018b66:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018b6a:	f1be 0f00 	cmp.w	lr, #0
 8018b6e:	d030      	beq.n	8018bd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018b70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018b72:	4450      	add	r0, sl
 8018b74:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018b78:	4431      	add	r1, r6
 8018b7a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018b7e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018b82:	4549      	cmp	r1, r9
 8018b84:	db08      	blt.n	8018b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018b86:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018b8a:	3001      	adds	r0, #1
 8018b8c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018b90:	eba1 0109 	sub.w	r1, r1, r9
 8018b94:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018b98:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018b9c:	f04f 0801 	mov.w	r8, #1
 8018ba0:	e7e3      	b.n	8018b6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018ba2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018ba4:	4450      	add	r0, sl
 8018ba6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018baa:	4431      	add	r1, r6
 8018bac:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018bb0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018bb4:	4541      	cmp	r1, r8
 8018bb6:	db08      	blt.n	8018bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018bb8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018bbc:	3001      	adds	r0, #1
 8018bbe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018bc2:	eba1 0108 	sub.w	r1, r1, r8
 8018bc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018bca:	3f01      	subs	r7, #1
 8018bcc:	f04f 0901 	mov.w	r9, #1
 8018bd0:	e79e      	b.n	8018b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018bd2:	449c      	add	ip, r3
 8018bd4:	1aff      	subs	r7, r7, r3
 8018bd6:	f1b8 0f00 	cmp.w	r8, #0
 8018bda:	d009      	beq.n	8018bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018bdc:	9019      	str	r0, [sp, #100]	; 0x64
 8018bde:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018be2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018be6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018bea:	911d      	str	r1, [sp, #116]	; 0x74
 8018bec:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018bf0:	1ad2      	subs	r2, r2, r3
 8018bf2:	e6b5      	b.n	8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	b923      	cbnz	r3, 8018c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018bfa:	4b04      	ldr	r3, [pc, #16]	; (8018c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018bfc:	6818      	ldr	r0, [r3, #0]
 8018bfe:	6803      	ldr	r3, [r0, #0]
 8018c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c02:	4798      	blx	r3
 8018c04:	b05b      	add	sp, #364	; 0x16c
 8018c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0a:	bf00      	nop
 8018c0c:	2003bd08 	.word	0x2003bd08

08018c10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018c10:	b570      	push	{r4, r5, r6, lr}
 8018c12:	4604      	mov	r4, r0
 8018c14:	2500      	movs	r5, #0
 8018c16:	9804      	ldr	r0, [sp, #16]
 8018c18:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018c1c:	8025      	strh	r5, [r4, #0]
 8018c1e:	6061      	str	r1, [r4, #4]
 8018c20:	7223      	strb	r3, [r4, #8]
 8018c22:	7266      	strb	r6, [r4, #9]
 8018c24:	60e0      	str	r0, [r4, #12]
 8018c26:	8222      	strh	r2, [r4, #16]
 8018c28:	8265      	strh	r5, [r4, #18]
 8018c2a:	82a5      	strh	r5, [r4, #20]
 8018c2c:	82e5      	strh	r5, [r4, #22]
 8018c2e:	8325      	strh	r5, [r4, #24]
 8018c30:	8365      	strh	r5, [r4, #26]
 8018c32:	83a5      	strh	r5, [r4, #28]
 8018c34:	77a5      	strb	r5, [r4, #30]
 8018c36:	b32e      	cbz	r6, 8018c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8018c38:	6803      	ldr	r3, [r0, #0]
 8018c3a:	695b      	ldr	r3, [r3, #20]
 8018c3c:	4798      	blx	r3
 8018c3e:	4606      	mov	r6, r0
 8018c40:	b300      	cbz	r0, 8018c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8018c42:	68e0      	ldr	r0, [r4, #12]
 8018c44:	4631      	mov	r1, r6
 8018c46:	6803      	ldr	r3, [r0, #0]
 8018c48:	68db      	ldr	r3, [r3, #12]
 8018c4a:	4798      	blx	r3
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	b1c8      	cbz	r0, 8018c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8018c50:	7b43      	ldrb	r3, [r0, #13]
 8018c52:	7a82      	ldrb	r2, [r0, #10]
 8018c54:	005b      	lsls	r3, r3, #1
 8018c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c5a:	4313      	orrs	r3, r2
 8018c5c:	83a3      	strh	r3, [r4, #28]
 8018c5e:	7a63      	ldrb	r3, [r4, #9]
 8018c60:	2b04      	cmp	r3, #4
 8018c62:	d10f      	bne.n	8018c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8018c64:	68e0      	ldr	r0, [r4, #12]
 8018c66:	462a      	mov	r2, r5
 8018c68:	4631      	mov	r1, r6
 8018c6a:	6803      	ldr	r3, [r0, #0]
 8018c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c6e:	4798      	blx	r3
 8018c70:	7b6b      	ldrb	r3, [r5, #13]
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c78:	7aab      	ldrb	r3, [r5, #10]
 8018c7a:	4313      	orrs	r3, r2
 8018c7c:	4418      	add	r0, r3
 8018c7e:	8ba3      	ldrh	r3, [r4, #28]
 8018c80:	4418      	add	r0, r3
 8018c82:	83a0      	strh	r0, [r4, #28]
 8018c84:	4620      	mov	r0, r4
 8018c86:	bd70      	pop	{r4, r5, r6, pc}

08018c88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8c:	2400      	movs	r4, #0
 8018c8e:	b085      	sub	sp, #20
 8018c90:	4681      	mov	r9, r0
 8018c92:	4688      	mov	r8, r1
 8018c94:	4692      	mov	sl, r2
 8018c96:	469b      	mov	fp, r3
 8018c98:	4627      	mov	r7, r4
 8018c9a:	4625      	mov	r5, r4
 8018c9c:	4626      	mov	r6, r4
 8018c9e:	4554      	cmp	r4, sl
 8018ca0:	da2a      	bge.n	8018cf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	9303      	str	r3, [sp, #12]
 8018ca6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018caa:	429d      	cmp	r5, r3
 8018cac:	d004      	beq.n	8018cb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018cae:	f242 030b 	movw	r3, #8203	; 0x200b
 8018cb2:	429d      	cmp	r5, r3
 8018cb4:	bf18      	it	ne
 8018cb6:	462f      	movne	r7, r5
 8018cb8:	ab03      	add	r3, sp, #12
 8018cba:	4642      	mov	r2, r8
 8018cbc:	4659      	mov	r1, fp
 8018cbe:	4648      	mov	r0, r9
 8018cc0:	f002 ff84 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018cc4:	4605      	mov	r5, r0
 8018cc6:	b1b8      	cbz	r0, 8018cf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018cc8:	280a      	cmp	r0, #10
 8018cca:	d015      	beq.n	8018cf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018ccc:	9a03      	ldr	r2, [sp, #12]
 8018cce:	b18a      	cbz	r2, 8018cf4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8018cd0:	7b50      	ldrb	r0, [r2, #13]
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	7a93      	ldrb	r3, [r2, #10]
 8018cd6:	0040      	lsls	r0, r0, #1
 8018cd8:	8895      	ldrh	r5, [r2, #4]
 8018cda:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018cde:	4303      	orrs	r3, r0
 8018ce0:	4640      	mov	r0, r8
 8018ce2:	9301      	str	r3, [sp, #4]
 8018ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8018ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cea:	4798      	blx	r3
 8018cec:	9b01      	ldr	r3, [sp, #4]
 8018cee:	4418      	add	r0, r3
 8018cf0:	4406      	add	r6, r0
 8018cf2:	b2b6      	uxth	r6, r6
 8018cf4:	3401      	adds	r4, #1
 8018cf6:	e7d2      	b.n	8018c9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018cf8:	4630      	mov	r0, r6
 8018cfa:	b005      	add	sp, #20
 8018cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018d00:	2a02      	cmp	r2, #2
 8018d02:	b530      	push	{r4, r5, lr}
 8018d04:	d011      	beq.n	8018d2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018d06:	2a03      	cmp	r2, #3
 8018d08:	d01c      	beq.n	8018d44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018d0a:	2a01      	cmp	r2, #1
 8018d0c:	d10c      	bne.n	8018d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018d0e:	888b      	ldrh	r3, [r1, #4]
 8018d10:	8801      	ldrh	r1, [r0, #0]
 8018d12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018d16:	1a5b      	subs	r3, r3, r1
 8018d18:	8844      	ldrh	r4, [r0, #2]
 8018d1a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018d1e:	1a9b      	subs	r3, r3, r2
 8018d20:	8004      	strh	r4, [r0, #0]
 8018d22:	8081      	strh	r1, [r0, #4]
 8018d24:	8043      	strh	r3, [r0, #2]
 8018d26:	80c2      	strh	r2, [r0, #6]
 8018d28:	bd30      	pop	{r4, r5, pc}
 8018d2a:	88cb      	ldrh	r3, [r1, #6]
 8018d2c:	8842      	ldrh	r2, [r0, #2]
 8018d2e:	1a9b      	subs	r3, r3, r2
 8018d30:	88c2      	ldrh	r2, [r0, #6]
 8018d32:	1a9b      	subs	r3, r3, r2
 8018d34:	888a      	ldrh	r2, [r1, #4]
 8018d36:	8801      	ldrh	r1, [r0, #0]
 8018d38:	8043      	strh	r3, [r0, #2]
 8018d3a:	1a52      	subs	r2, r2, r1
 8018d3c:	8881      	ldrh	r1, [r0, #4]
 8018d3e:	1a52      	subs	r2, r2, r1
 8018d40:	8002      	strh	r2, [r0, #0]
 8018d42:	e7f1      	b.n	8018d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018d44:	88cb      	ldrh	r3, [r1, #6]
 8018d46:	8841      	ldrh	r1, [r0, #2]
 8018d48:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018d4c:	1a5b      	subs	r3, r3, r1
 8018d4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018d52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018d56:	1a9b      	subs	r3, r3, r2
 8018d58:	8045      	strh	r5, [r0, #2]
 8018d5a:	8082      	strh	r2, [r0, #4]
 8018d5c:	8003      	strh	r3, [r0, #0]
 8018d5e:	80c4      	strh	r4, [r0, #6]
 8018d60:	e7e2      	b.n	8018d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d66:	b09f      	sub	sp, #124	; 0x7c
 8018d68:	9116      	str	r1, [sp, #88]	; 0x58
 8018d6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8018d6c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018d6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018d70:	8809      	ldrh	r1, [r1, #0]
 8018d72:	889b      	ldrh	r3, [r3, #4]
 8018d74:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018d78:	440b      	add	r3, r1
 8018d7a:	9212      	str	r2, [sp, #72]	; 0x48
 8018d7c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018d80:	b21b      	sxth	r3, r3
 8018d82:	9011      	str	r0, [sp, #68]	; 0x44
 8018d84:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018d88:	9310      	str	r3, [sp, #64]	; 0x40
 8018d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8018d8e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8018d92:	7a59      	ldrb	r1, [r3, #9]
 8018d94:	7a1b      	ldrb	r3, [r3, #8]
 8018d96:	9114      	str	r1, [sp, #80]	; 0x50
 8018d98:	9315      	str	r3, [sp, #84]	; 0x54
 8018d9a:	2a00      	cmp	r2, #0
 8018d9c:	d06a      	beq.n	8018e74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018d9e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018da2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018da4:	2b04      	cmp	r3, #4
 8018da6:	bf14      	ite	ne
 8018da8:	2301      	movne	r3, #1
 8018daa:	2302      	moveq	r3, #2
 8018dac:	4413      	add	r3, r2
 8018dae:	f04f 0900 	mov.w	r9, #0
 8018db2:	930f      	str	r3, [sp, #60]	; 0x3c
 8018db4:	464c      	mov	r4, r9
 8018db6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018dba:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018dbe:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018dc2:	4293      	cmp	r3, r2
 8018dc4:	f280 808f 	bge.w	8018ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8018dc8:	2300      	movs	r3, #0
 8018dca:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8018dce:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8018dd2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018dd6:	429c      	cmp	r4, r3
 8018dd8:	d006      	beq.n	8018de8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ddc:	f242 020b 	movw	r2, #8203	; 0x200b
 8018de0:	4294      	cmp	r4, r2
 8018de2:	bf18      	it	ne
 8018de4:	4623      	movne	r3, r4
 8018de6:	930d      	str	r3, [sp, #52]	; 0x34
 8018de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dea:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018dec:	f8d8 2000 	ldr.w	r2, [r8]
 8018df0:	428b      	cmp	r3, r1
 8018df2:	db41      	blt.n	8018e78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8018df4:	6813      	ldr	r3, [r2, #0]
 8018df6:	4610      	mov	r0, r2
 8018df8:	695b      	ldr	r3, [r3, #20]
 8018dfa:	4798      	blx	r3
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	f8d8 0000 	ldr.w	r0, [r8]
 8018e02:	aa1d      	add	r2, sp, #116	; 0x74
 8018e04:	4621      	mov	r1, r4
 8018e06:	6803      	ldr	r3, [r0, #0]
 8018e08:	689e      	ldr	r6, [r3, #8]
 8018e0a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018e0e:	47b0      	blx	r6
 8018e10:	901c      	str	r0, [sp, #112]	; 0x70
 8018e12:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018e16:	429c      	cmp	r4, r3
 8018e18:	f000 80ea 	beq.w	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018e1c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018e20:	429c      	cmp	r4, r3
 8018e22:	f000 80e5 	beq.w	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018e26:	2c00      	cmp	r4, #0
 8018e28:	f000 80f7 	beq.w	801901a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018e2c:	2c0a      	cmp	r4, #10
 8018e2e:	d060      	beq.n	8018ef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8018e30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018e32:	b36a      	cbz	r2, 8018e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018e34:	8894      	ldrh	r4, [r2, #4]
 8018e36:	f1bb 0f00 	cmp.w	fp, #0
 8018e3a:	d03b      	beq.n	8018eb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8018e3c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018e40:	f1bb 0f01 	cmp.w	fp, #1
 8018e44:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018e48:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018e4c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018e50:	ea49 0903 	orr.w	r9, r9, r3
 8018e54:	d134      	bne.n	8018ec0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8018e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e58:	eba5 0509 	sub.w	r5, r5, r9
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d14f      	bne.n	8018f00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8018e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e62:	eb09 0305 	add.w	r3, r9, r5
 8018e66:	4413      	add	r3, r2
 8018e68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018e6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	da51      	bge.n	8018f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8018e72:	e038      	b.n	8018ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8018e74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018e76:	e79a      	b.n	8018dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8018e78:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018e7c:	4659      	mov	r1, fp
 8018e7e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018e80:	9301      	str	r3, [sp, #4]
 8018e82:	ab1d      	add	r3, sp, #116	; 0x74
 8018e84:	9300      	str	r3, [sp, #0]
 8018e86:	ab1c      	add	r3, sp, #112	; 0x70
 8018e88:	f002 fee9 	bl	801bc5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018e8c:	4604      	mov	r4, r0
 8018e8e:	e7c0      	b.n	8018e12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8018e90:	f8d8 0000 	ldr.w	r0, [r8]
 8018e94:	6803      	ldr	r3, [r0, #0]
 8018e96:	691b      	ldr	r3, [r3, #16]
 8018e98:	4798      	blx	r3
 8018e9a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018e9e:	4298      	cmp	r0, r3
 8018ea0:	f000 80a6 	beq.w	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018ea4:	f242 030b 	movw	r3, #8203	; 0x200b
 8018ea8:	4298      	cmp	r0, r3
 8018eaa:	f000 80a1 	beq.w	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018eae:	f1bb 0f00 	cmp.w	fp, #0
 8018eb2:	d100      	bne.n	8018eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018eb4:	444d      	add	r5, r9
 8018eb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018eb8:	2a00      	cmp	r2, #0
 8018eba:	d1bf      	bne.n	8018e3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018ebc:	4691      	mov	r9, r2
 8018ebe:	e097      	b.n	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f000 80ab 	beq.w	801901e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8018ec8:	f1bb 0f00 	cmp.w	fp, #0
 8018ecc:	d118      	bne.n	8018f00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8018ece:	f8d8 0000 	ldr.w	r0, [r8]
 8018ed2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018ed4:	6803      	ldr	r3, [r0, #0]
 8018ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ed8:	4798      	blx	r3
 8018eda:	4405      	add	r5, r0
 8018edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ee0:	1aeb      	subs	r3, r5, r3
 8018ee2:	4293      	cmp	r3, r2
 8018ee4:	dd17      	ble.n	8018f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8018ee6:	2c00      	cmp	r4, #0
 8018ee8:	f000 8097 	beq.w	801901a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018eec:	2c0a      	cmp	r4, #10
 8018eee:	f040 8085 	bne.w	8018ffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8018ef2:	240a      	movs	r4, #10
 8018ef4:	fab4 f084 	clz	r0, r4
 8018ef8:	0940      	lsrs	r0, r0, #5
 8018efa:	b01f      	add	sp, #124	; 0x7c
 8018efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f00:	f8d8 0000 	ldr.w	r0, [r8]
 8018f04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f0a:	4798      	blx	r3
 8018f0c:	f1bb 0f01 	cmp.w	fp, #1
 8018f10:	eba5 0500 	sub.w	r5, r5, r0
 8018f14:	d0a4      	beq.n	8018e60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8018f16:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018f18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018f1a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018f1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018f22:	7b43      	ldrb	r3, [r0, #13]
 8018f24:	4429      	add	r1, r5
 8018f26:	015b      	lsls	r3, r3, #5
 8018f28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018f2c:	7983      	ldrb	r3, [r0, #6]
 8018f2e:	4313      	orrs	r3, r2
 8018f30:	440b      	add	r3, r1
 8018f32:	42b3      	cmp	r3, r6
 8018f34:	db5c      	blt.n	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f38:	4299      	cmp	r1, r3
 8018f3a:	da59      	bge.n	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018f3c:	f8d8 0000 	ldr.w	r0, [r8]
 8018f40:	42ae      	cmp	r6, r5
 8018f42:	6803      	ldr	r3, [r0, #0]
 8018f44:	bfcc      	ite	gt
 8018f46:	1b76      	subgt	r6, r6, r5
 8018f48:	2600      	movle	r6, #0
 8018f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f4c:	bfc8      	it	gt
 8018f4e:	b2b6      	uxthgt	r6, r6
 8018f50:	4798      	blx	r3
 8018f52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018f54:	7b5a      	ldrb	r2, [r3, #13]
 8018f56:	00d1      	lsls	r1, r2, #3
 8018f58:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018f5c:	7a19      	ldrb	r1, [r3, #8]
 8018f5e:	4339      	orrs	r1, r7
 8018f60:	0657      	lsls	r7, r2, #25
 8018f62:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018f64:	bf48      	it	mi
 8018f66:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018f6a:	4407      	add	r7, r0
 8018f6c:	bf48      	it	mi
 8018f6e:	b209      	sxthmi	r1, r1
 8018f70:	1a7f      	subs	r7, r7, r1
 8018f72:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018f74:	b2bf      	uxth	r7, r7
 8018f76:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018f7a:	fa0f fa87 	sxth.w	sl, r7
 8018f7e:	4551      	cmp	r1, sl
 8018f80:	dd3a      	ble.n	8018ff8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018f82:	0112      	lsls	r2, r2, #4
 8018f84:	79d8      	ldrb	r0, [r3, #7]
 8018f86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018f8a:	4302      	orrs	r2, r0
 8018f8c:	4492      	add	sl, r2
 8018f8e:	4551      	cmp	r1, sl
 8018f90:	dc2e      	bgt.n	8018ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018f92:	1bcf      	subs	r7, r1, r7
 8018f94:	468a      	mov	sl, r1
 8018f96:	b2bf      	uxth	r7, r7
 8018f98:	9319      	str	r3, [sp, #100]	; 0x64
 8018f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018f9c:	f8d8 0000 	ldr.w	r0, [r8]
 8018fa0:	681a      	ldr	r2, [r3, #0]
 8018fa2:	6801      	ldr	r1, [r0, #0]
 8018fa4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8018fa6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018fa8:	9313      	str	r3, [sp, #76]	; 0x4c
 8018faa:	9218      	str	r2, [sp, #96]	; 0x60
 8018fac:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018fae:	4788      	blx	r1
 8018fb0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018fb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8018fb8:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018fbc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018fbe:	910a      	str	r1, [sp, #40]	; 0x28
 8018fc0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018fc4:	9109      	str	r1, [sp, #36]	; 0x24
 8018fc6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018fca:	9305      	str	r3, [sp, #20]
 8018fcc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018fce:	9206      	str	r2, [sp, #24]
 8018fd0:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018fd4:	442e      	add	r6, r5
 8018fd6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018fda:	b236      	sxth	r6, r6
 8018fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018fde:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018fe2:	9600      	str	r6, [sp, #0]
 8018fe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018fe6:	681a      	ldr	r2, [r3, #0]
 8018fe8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018fee:	47b0      	blx	r6
 8018ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8018ff6:	e6e2      	b.n	8018dbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8018ff8:	2700      	movs	r7, #0
 8018ffa:	e7cd      	b.n	8018f98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8018ffc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018ffe:	3501      	adds	r5, #1
 8019000:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019002:	429d      	cmp	r5, r3
 8019004:	f6bf af76 	bge.w	8018ef4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019008:	4659      	mov	r1, fp
 801900a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801900c:	f7f7 fcf8 	bl	8010a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019010:	4604      	mov	r4, r0
 8019012:	b110      	cbz	r0, 801901a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019014:	280a      	cmp	r0, #10
 8019016:	d1f2      	bne.n	8018ffe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8019018:	e76b      	b.n	8018ef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801901a:	2400      	movs	r4, #0
 801901c:	e76a      	b.n	8018ef4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801901e:	f1bb 0f00 	cmp.w	fp, #0
 8019022:	f43f af5b 	beq.w	8018edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8019026:	e776      	b.n	8018f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08019028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019028:	b530      	push	{r4, r5, lr}
 801902a:	8a44      	ldrh	r4, [r0, #18]
 801902c:	8ac5      	ldrh	r5, [r0, #22]
 801902e:	82c3      	strh	r3, [r0, #22]
 8019030:	442c      	add	r4, r5
 8019032:	1ae4      	subs	r4, r4, r3
 8019034:	8b03      	ldrh	r3, [r0, #24]
 8019036:	8244      	strh	r4, [r0, #18]
 8019038:	8a84      	ldrh	r4, [r0, #20]
 801903a:	4422      	add	r2, r4
 801903c:	440c      	add	r4, r1
 801903e:	1a59      	subs	r1, r3, r1
 8019040:	8342      	strh	r2, [r0, #26]
 8019042:	8284      	strh	r4, [r0, #20]
 8019044:	8301      	strh	r1, [r0, #24]
 8019046:	bd30      	pop	{r4, r5, pc}

08019048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904c:	7a43      	ldrb	r3, [r0, #9]
 801904e:	b087      	sub	sp, #28
 8019050:	4604      	mov	r4, r0
 8019052:	460f      	mov	r7, r1
 8019054:	1eda      	subs	r2, r3, #3
 8019056:	b2d2      	uxtb	r2, r2
 8019058:	2900      	cmp	r1, #0
 801905a:	d036      	beq.n	80190ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801905c:	2a01      	cmp	r2, #1
 801905e:	d932      	bls.n	80190c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019060:	1e58      	subs	r0, r3, #1
 8019062:	f1d0 0b00 	rsbs	fp, r0, #0
 8019066:	eb4b 0b00 	adc.w	fp, fp, r0
 801906a:	1e99      	subs	r1, r3, #2
 801906c:	424b      	negs	r3, r1
 801906e:	414b      	adcs	r3, r1
 8019070:	9303      	str	r3, [sp, #12]
 8019072:	2300      	movs	r3, #0
 8019074:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019078:	2500      	movs	r5, #0
 801907a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801907e:	46a9      	mov	r9, r5
 8019080:	8265      	strh	r5, [r4, #18]
 8019082:	82a5      	strh	r5, [r4, #20]
 8019084:	2300      	movs	r3, #0
 8019086:	9305      	str	r3, [sp, #20]
 8019088:	8823      	ldrh	r3, [r4, #0]
 801908a:	2b20      	cmp	r3, #32
 801908c:	d02b      	beq.n	80190e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801908e:	eba3 020a 	sub.w	r2, r3, sl
 8019092:	4256      	negs	r6, r2
 8019094:	4156      	adcs	r6, r2
 8019096:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801909a:	4293      	cmp	r3, r2
 801909c:	d004      	beq.n	80190a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801909e:	4553      	cmp	r3, sl
 80190a0:	bf16      	itet	ne
 80190a2:	4699      	movne	r9, r3
 80190a4:	2601      	moveq	r6, #1
 80190a6:	2600      	movne	r6, #0
 80190a8:	ab05      	add	r3, sp, #20
 80190aa:	68e2      	ldr	r2, [r4, #12]
 80190ac:	7a21      	ldrb	r1, [r4, #8]
 80190ae:	6860      	ldr	r0, [r4, #4]
 80190b0:	f002 fd8c 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80190b4:	8020      	strh	r0, [r4, #0]
 80190b6:	b9c8      	cbnz	r0, 80190ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80190b8:	8b22      	ldrh	r2, [r4, #24]
 80190ba:	2300      	movs	r3, #0
 80190bc:	4611      	mov	r1, r2
 80190be:	4620      	mov	r0, r4
 80190c0:	f7ff ffb2 	bl	8019028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80190c4:	e066      	b.n	8019194 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80190c6:	468b      	mov	fp, r1
 80190c8:	e7cf      	b.n	801906a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80190ca:	3b01      	subs	r3, #1
 80190cc:	2a01      	cmp	r2, #1
 80190ce:	9103      	str	r1, [sp, #12]
 80190d0:	468b      	mov	fp, r1
 80190d2:	bf8c      	ite	hi
 80190d4:	2200      	movhi	r2, #0
 80190d6:	2201      	movls	r2, #1
 80190d8:	2b01      	cmp	r3, #1
 80190da:	9202      	str	r2, [sp, #8]
 80190dc:	bf8c      	ite	hi
 80190de:	2300      	movhi	r3, #0
 80190e0:	2301      	movls	r3, #1
 80190e2:	9301      	str	r3, [sp, #4]
 80190e4:	e7c8      	b.n	8019078 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80190e6:	4699      	mov	r9, r3
 80190e8:	2601      	movs	r6, #1
 80190ea:	e7dd      	b.n	80190a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80190ec:	8ae3      	ldrh	r3, [r4, #22]
 80190ee:	280a      	cmp	r0, #10
 80190f0:	f103 0301 	add.w	r3, r3, #1
 80190f4:	82e3      	strh	r3, [r4, #22]
 80190f6:	d0df      	beq.n	80190b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80190f8:	9a05      	ldr	r2, [sp, #20]
 80190fa:	bb42      	cbnz	r2, 801914e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80190fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019100:	4298      	cmp	r0, r3
 8019102:	d001      	beq.n	8019108 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019104:	4550      	cmp	r0, sl
 8019106:	d1bd      	bne.n	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019108:	8823      	ldrh	r3, [r4, #0]
 801910a:	8b21      	ldrh	r1, [r4, #24]
 801910c:	2b20      	cmp	r3, #32
 801910e:	d001      	beq.n	8019114 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019110:	4553      	cmp	r3, sl
 8019112:	d131      	bne.n	8019178 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019114:	2e00      	cmp	r6, #0
 8019116:	bf0a      	itet	eq
 8019118:	460d      	moveq	r5, r1
 801911a:	4630      	movne	r0, r6
 801911c:	2001      	moveq	r0, #1
 801911e:	440a      	add	r2, r1
 8019120:	8aa3      	ldrh	r3, [r4, #20]
 8019122:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019126:	b292      	uxth	r2, r2
 8019128:	8322      	strh	r2, [r4, #24]
 801912a:	4413      	add	r3, r2
 801912c:	2f00      	cmp	r7, #0
 801912e:	d03a      	beq.n	80191a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019130:	f1bb 0f00 	cmp.w	fp, #0
 8019134:	d102      	bne.n	801913c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019136:	9903      	ldr	r1, [sp, #12]
 8019138:	b301      	cbz	r1, 801917c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801913a:	b1f8      	cbz	r0, 801917c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801913c:	8ba1      	ldrh	r1, [r4, #28]
 801913e:	4419      	add	r1, r3
 8019140:	458c      	cmp	ip, r1
 8019142:	da2a      	bge.n	801919a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019144:	8a61      	ldrh	r1, [r4, #18]
 8019146:	b341      	cbz	r1, 801919a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019148:	4563      	cmp	r3, ip
 801914a:	dd9b      	ble.n	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801914c:	e01c      	b.n	8019188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801914e:	8893      	ldrh	r3, [r2, #4]
 8019150:	4649      	mov	r1, r9
 8019152:	8023      	strh	r3, [r4, #0]
 8019154:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019158:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801915c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019160:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019164:	ea48 0800 	orr.w	r8, r8, r0
 8019168:	68e0      	ldr	r0, [r4, #12]
 801916a:	6803      	ldr	r3, [r0, #0]
 801916c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801916e:	4798      	blx	r3
 8019170:	eb08 0200 	add.w	r2, r8, r0
 8019174:	b292      	uxth	r2, r2
 8019176:	e7c7      	b.n	8019108 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019178:	2000      	movs	r0, #0
 801917a:	e7d0      	b.n	801911e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801917c:	4563      	cmp	r3, ip
 801917e:	dd81      	ble.n	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019180:	8a63      	ldrh	r3, [r4, #18]
 8019182:	2b00      	cmp	r3, #0
 8019184:	f43f af7e 	beq.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019188:	2301      	movs	r3, #1
 801918a:	8ba2      	ldrh	r2, [r4, #28]
 801918c:	77a3      	strb	r3, [r4, #30]
 801918e:	8b63      	ldrh	r3, [r4, #26]
 8019190:	4413      	add	r3, r2
 8019192:	8363      	strh	r3, [r4, #26]
 8019194:	b007      	add	sp, #28
 8019196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801919a:	2300      	movs	r3, #0
 801919c:	4611      	mov	r1, r2
 801919e:	4620      	mov	r0, r4
 80191a0:	f7ff ff42 	bl	8019028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80191a4:	e76e      	b.n	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191a6:	4563      	cmp	r3, ip
 80191a8:	dd14      	ble.n	80191d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80191aa:	9b02      	ldr	r3, [sp, #8]
 80191ac:	b113      	cbz	r3, 80191b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80191ae:	2301      	movs	r3, #1
 80191b0:	460a      	mov	r2, r1
 80191b2:	e783      	b.n	80190bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80191b4:	9b01      	ldr	r3, [sp, #4]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	f43f af64 	beq.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191bc:	2800      	cmp	r0, #0
 80191be:	f47f af61 	bne.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191c2:	b116      	cbz	r6, 80191ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80191c4:	2301      	movs	r3, #1
 80191c6:	462a      	mov	r2, r5
 80191c8:	e779      	b.n	80190be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80191ca:	8a63      	ldrh	r3, [r4, #18]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	f43f af59 	beq.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191d2:	e7df      	b.n	8019194 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80191d4:	2800      	cmp	r0, #0
 80191d6:	f47f af55 	bne.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191da:	2e00      	cmp	r6, #0
 80191dc:	f43f af52 	beq.w	8019084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80191e0:	2301      	movs	r3, #1
 80191e2:	462a      	mov	r2, r5
 80191e4:	e7db      	b.n	801919e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080191e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80191e6:	b530      	push	{r4, r5, lr}
 80191e8:	4605      	mov	r5, r0
 80191ea:	b08b      	sub	sp, #44	; 0x2c
 80191ec:	b191      	cbz	r1, 8019214 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80191ee:	2401      	movs	r4, #1
 80191f0:	e9cd 3100 	strd	r3, r1, [sp]
 80191f4:	4613      	mov	r3, r2
 80191f6:	4601      	mov	r1, r0
 80191f8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80191fc:	a802      	add	r0, sp, #8
 80191fe:	f7ff fd07 	bl	8018c10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019202:	2100      	movs	r1, #0
 8019204:	a802      	add	r0, sp, #8
 8019206:	f7ff ff1f 	bl	8019048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801920a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801920e:	b163      	cbz	r3, 801922a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019210:	3401      	adds	r4, #1
 8019212:	e7f6      	b.n	8019202 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019214:	2401      	movs	r4, #1
 8019216:	f002 fda5 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801921a:	280a      	cmp	r0, #10
 801921c:	4628      	mov	r0, r5
 801921e:	bf08      	it	eq
 8019220:	3401      	addeq	r4, #1
 8019222:	f002 fd9f 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019226:	2800      	cmp	r0, #0
 8019228:	d1f7      	bne.n	801921a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801922a:	b2a0      	uxth	r0, r4
 801922c:	b00b      	add	sp, #44	; 0x2c
 801922e:	bd30      	pop	{r4, r5, pc}

08019230 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019234:	b0e5      	sub	sp, #404	; 0x194
 8019236:	4689      	mov	r9, r1
 8019238:	461c      	mov	r4, r3
 801923a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801923e:	900a      	str	r0, [sp, #40]	; 0x28
 8019240:	f1ba 0f00 	cmp.w	sl, #0
 8019244:	f000 80b4 	beq.w	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	2b00      	cmp	r3, #0
 801924c:	f000 80b0 	beq.w	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019250:	7ba3      	ldrb	r3, [r4, #14]
 8019252:	2b00      	cmp	r3, #0
 8019254:	f000 80ac 	beq.w	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019258:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801925c:	6810      	ldr	r0, [r2, #0]
 801925e:	6851      	ldr	r1, [r2, #4]
 8019260:	2500      	movs	r5, #0
 8019262:	4643      	mov	r3, r8
 8019264:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019268:	950f      	str	r5, [sp, #60]	; 0x3c
 801926a:	af19      	add	r7, sp, #100	; 0x64
 801926c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019270:	79a2      	ldrb	r2, [r4, #6]
 8019272:	c303      	stmia	r3!, {r0, r1}
 8019274:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019278:	a90f      	add	r1, sp, #60	; 0x3c
 801927a:	4640      	mov	r0, r8
 801927c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019280:	f7ff fd3e 	bl	8018d00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019284:	a90f      	add	r1, sp, #60	; 0x3c
 8019286:	79a2      	ldrb	r2, [r4, #6]
 8019288:	4608      	mov	r0, r1
 801928a:	f7ff fd39 	bl	8018d00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801928e:	4638      	mov	r0, r7
 8019290:	f002 f93c 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 8019294:	6820      	ldr	r0, [r4, #0]
 8019296:	6803      	ldr	r3, [r0, #0]
 8019298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801929a:	4798      	blx	r3
 801929c:	4606      	mov	r6, r0
 801929e:	6820      	ldr	r0, [r4, #0]
 80192a0:	6803      	ldr	r3, [r0, #0]
 80192a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192a4:	4798      	blx	r3
 80192a6:	4633      	mov	r3, r6
 80192a8:	9000      	str	r0, [sp, #0]
 80192aa:	4651      	mov	r1, sl
 80192ac:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80192ae:	4638      	mov	r0, r7
 80192b0:	f002 f987 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80192b4:	7923      	ldrb	r3, [r4, #4]
 80192b6:	6820      	ldr	r0, [r4, #0]
 80192b8:	9308      	str	r3, [sp, #32]
 80192ba:	6803      	ldr	r3, [r0, #0]
 80192bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192be:	4798      	blx	r3
 80192c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192c4:	181e      	adds	r6, r3, r0
 80192c6:	42ae      	cmp	r6, r5
 80192c8:	dd06      	ble.n	80192d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80192ca:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80192ce:	4282      	cmp	r2, r0
 80192d0:	bfa4      	itt	ge
 80192d2:	189d      	addge	r5, r3, r2
 80192d4:	fb95 f5f6 	sdivge	r5, r5, r6
 80192d8:	a832      	add	r0, sp, #200	; 0xc8
 80192da:	f002 f917 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 80192de:	7c23      	ldrb	r3, [r4, #16]
 80192e0:	b17b      	cbz	r3, 8019302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80192e2:	6820      	ldr	r0, [r4, #0]
 80192e4:	6803      	ldr	r3, [r0, #0]
 80192e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192e8:	4798      	blx	r3
 80192ea:	4683      	mov	fp, r0
 80192ec:	6820      	ldr	r0, [r4, #0]
 80192ee:	6803      	ldr	r3, [r0, #0]
 80192f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192f2:	4798      	blx	r3
 80192f4:	465b      	mov	r3, fp
 80192f6:	9000      	str	r0, [sp, #0]
 80192f8:	4651      	mov	r1, sl
 80192fa:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80192fc:	a832      	add	r0, sp, #200	; 0xc8
 80192fe:	f002 f960 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019302:	7be1      	ldrb	r1, [r4, #15]
 8019304:	a811      	add	r0, sp, #68	; 0x44
 8019306:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801930a:	7963      	ldrb	r3, [r4, #5]
 801930c:	1a52      	subs	r2, r2, r1
 801930e:	7c21      	ldrb	r1, [r4, #16]
 8019310:	9101      	str	r1, [sp, #4]
 8019312:	b292      	uxth	r2, r2
 8019314:	6821      	ldr	r1, [r4, #0]
 8019316:	9100      	str	r1, [sp, #0]
 8019318:	a932      	add	r1, sp, #200	; 0xc8
 801931a:	f7ff fc79 	bl	8018c10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801931e:	7c23      	ldrb	r3, [r4, #16]
 8019320:	b9bb      	cbnz	r3, 8019352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8019322:	fa1f fa86 	uxth.w	sl, r6
 8019326:	2d00      	cmp	r5, #0
 8019328:	dd45      	ble.n	80193b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801932a:	4638      	mov	r0, r7
 801932c:	f002 fd1a 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019330:	2800      	cmp	r0, #0
 8019332:	d03d      	beq.n	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019334:	280a      	cmp	r0, #10
 8019336:	d1f6      	bne.n	8019326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019338:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801933c:	3d01      	subs	r5, #1
 801933e:	4453      	add	r3, sl
 8019340:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019344:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019348:	eba3 030a 	sub.w	r3, r3, sl
 801934c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019350:	e7e9      	b.n	8019326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019352:	0073      	lsls	r3, r6, #1
 8019354:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019358:	fa1f fa86 	uxth.w	sl, r6
 801935c:	9309      	str	r3, [sp, #36]	; 0x24
 801935e:	2d00      	cmp	r5, #0
 8019360:	dd29      	ble.n	80193b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019362:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019366:	a811      	add	r0, sp, #68	; 0x44
 8019368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801936a:	428b      	cmp	r3, r1
 801936c:	bfd4      	ite	le
 801936e:	2100      	movle	r1, #0
 8019370:	2101      	movgt	r1, #1
 8019372:	f7ff fe69 	bl	8019048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019376:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801937a:	3b01      	subs	r3, #1
 801937c:	b29b      	uxth	r3, r3
 801937e:	455b      	cmp	r3, fp
 8019380:	930b      	str	r3, [sp, #44]	; 0x2c
 8019382:	d005      	beq.n	8019390 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8019384:	7961      	ldrb	r1, [r4, #5]
 8019386:	4638      	mov	r0, r7
 8019388:	f7f7 fb3a 	bl	8010a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801938e:	e7f4      	b.n	801937a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8019390:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019394:	3d01      	subs	r5, #1
 8019396:	4453      	add	r3, sl
 8019398:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801939c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80193a0:	eba3 030a 	sub.w	r3, r3, sl
 80193a4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80193a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d1d6      	bne.n	801935e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80193b0:	b065      	add	sp, #404	; 0x194
 80193b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b6:	0075      	lsls	r5, r6, #1
 80193b8:	f04f 0a00 	mov.w	sl, #0
 80193bc:	7c23      	ldrb	r3, [r4, #16]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d066      	beq.n	8019490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80193c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80193c6:	a811      	add	r0, sp, #68	; 0x44
 80193c8:	428d      	cmp	r5, r1
 80193ca:	bfd4      	ite	le
 80193cc:	2100      	movle	r1, #0
 80193ce:	2101      	movgt	r1, #1
 80193d0:	f7ff fe3a 	bl	8019048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80193d4:	9b08      	ldr	r3, [sp, #32]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d055      	beq.n	8019486 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80193da:	f894 b010 	ldrb.w	fp, [r4, #16]
 80193de:	2264      	movs	r2, #100	; 0x64
 80193e0:	4639      	mov	r1, r7
 80193e2:	a84b      	add	r0, sp, #300	; 0x12c
 80193e4:	f00f faae 	bl	8028944 <memcpy>
 80193e8:	f1bb 0f00 	cmp.w	fp, #0
 80193ec:	d058      	beq.n	80194a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80193ee:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80193f2:	7922      	ldrb	r2, [r4, #4]
 80193f4:	2a01      	cmp	r2, #1
 80193f6:	d13c      	bne.n	8019472 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80193f8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80193fc:	1ac0      	subs	r0, r0, r3
 80193fe:	2302      	movs	r3, #2
 8019400:	fb90 f0f3 	sdiv	r0, r0, r3
 8019404:	b200      	sxth	r0, r0
 8019406:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801940a:	4418      	add	r0, r3
 801940c:	7c23      	ldrb	r3, [r4, #16]
 801940e:	b200      	sxth	r0, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d03a      	beq.n	801948a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8019414:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8019418:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801941c:	9000      	str	r0, [sp, #0]
 801941e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8019422:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019424:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019428:	e9cd a703 	strd	sl, r7, [sp, #12]
 801942c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019430:	464a      	mov	r2, r9
 8019432:	2100      	movs	r1, #0
 8019434:	f7ff fc95 	bl	8018d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019438:	2800      	cmp	r0, #0
 801943a:	d1b9      	bne.n	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801943c:	b2b2      	uxth	r2, r6
 801943e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019442:	4611      	mov	r1, r2
 8019444:	4413      	add	r3, r2
 8019446:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801944a:	b21b      	sxth	r3, r3
 801944c:	1a52      	subs	r2, r2, r1
 801944e:	7c21      	ldrb	r1, [r4, #16]
 8019450:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019454:	b212      	sxth	r2, r2
 8019456:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801945a:	b109      	cbz	r1, 8019460 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801945c:	42b2      	cmp	r2, r6
 801945e:	dba7      	blt.n	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019460:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019464:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019468:	440a      	add	r2, r1
 801946a:	b212      	sxth	r2, r2
 801946c:	4293      	cmp	r3, r2
 801946e:	dda5      	ble.n	80193bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8019470:	e79e      	b.n	80193b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019472:	2a02      	cmp	r2, #2
 8019474:	d105      	bne.n	8019482 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019476:	7be2      	ldrb	r2, [r4, #15]
 8019478:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801947c:	1a80      	subs	r0, r0, r2
 801947e:	1ac0      	subs	r0, r0, r3
 8019480:	e7c0      	b.n	8019404 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8019482:	2000      	movs	r0, #0
 8019484:	e7bf      	b.n	8019406 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8019486:	7be0      	ldrb	r0, [r4, #15]
 8019488:	e7bd      	b.n	8019406 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801948a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801948e:	e7c3      	b.n	8019418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8019490:	9b08      	ldr	r3, [sp, #32]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d0f7      	beq.n	8019486 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019496:	2264      	movs	r2, #100	; 0x64
 8019498:	4639      	mov	r1, r7
 801949a:	a84b      	add	r0, sp, #300	; 0x12c
 801949c:	f00f fa52 	bl	8028944 <memcpy>
 80194a0:	2300      	movs	r3, #0
 80194a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80194a6:	6821      	ldr	r1, [r4, #0]
 80194a8:	a84b      	add	r0, sp, #300	; 0x12c
 80194aa:	f7ff fbed 	bl	8018c88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80194ae:	b203      	sxth	r3, r0
 80194b0:	e79f      	b.n	80193f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080194b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80194b2:	2b03      	cmp	r3, #3
 80194b4:	d818      	bhi.n	80194e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80194b6:	e8df f003 	tbb	[pc, r3]
 80194ba:	0602      	.short	0x0602
 80194bc:	130d      	.short	0x130d
 80194be:	f9b0 2000 	ldrsh.w	r2, [r0]
 80194c2:	1850      	adds	r0, r2, r1
 80194c4:	4770      	bx	lr
 80194c6:	8803      	ldrh	r3, [r0, #0]
 80194c8:	8880      	ldrh	r0, [r0, #4]
 80194ca:	4418      	add	r0, r3
 80194cc:	b200      	sxth	r0, r0
 80194ce:	1a80      	subs	r0, r0, r2
 80194d0:	3801      	subs	r0, #1
 80194d2:	4770      	bx	lr
 80194d4:	8803      	ldrh	r3, [r0, #0]
 80194d6:	8880      	ldrh	r0, [r0, #4]
 80194d8:	4418      	add	r0, r3
 80194da:	b200      	sxth	r0, r0
 80194dc:	1a40      	subs	r0, r0, r1
 80194de:	e7f7      	b.n	80194d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80194e0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80194e4:	4410      	add	r0, r2
 80194e6:	4770      	bx	lr
 80194e8:	2000      	movs	r0, #0
 80194ea:	4770      	bx	lr

080194ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80194ec:	2b03      	cmp	r3, #3
 80194ee:	d817      	bhi.n	8019520 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80194f0:	e8df f003 	tbb	[pc, r3]
 80194f4:	10090602 	.word	0x10090602
 80194f8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80194fc:	1850      	adds	r0, r2, r1
 80194fe:	4770      	bx	lr
 8019500:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019504:	e7fa      	b.n	80194fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8019506:	8843      	ldrh	r3, [r0, #2]
 8019508:	88c0      	ldrh	r0, [r0, #6]
 801950a:	4418      	add	r0, r3
 801950c:	b200      	sxth	r0, r0
 801950e:	1a80      	subs	r0, r0, r2
 8019510:	3801      	subs	r0, #1
 8019512:	4770      	bx	lr
 8019514:	8843      	ldrh	r3, [r0, #2]
 8019516:	88c0      	ldrh	r0, [r0, #6]
 8019518:	4418      	add	r0, r3
 801951a:	b200      	sxth	r0, r0
 801951c:	1a40      	subs	r0, r0, r1
 801951e:	e7f7      	b.n	8019510 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019520:	2000      	movs	r0, #0
 8019522:	4770      	bx	lr

08019524 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019524:	4b01      	ldr	r3, [pc, #4]	; (801952c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019526:	2200      	movs	r2, #0
 8019528:	601a      	str	r2, [r3, #0]
 801952a:	4770      	bx	lr
 801952c:	2003bd18 	.word	0x2003bd18

08019530 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019530:	4603      	mov	r3, r0
 8019532:	b1c8      	cbz	r0, 8019568 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019534:	0c02      	lsrs	r2, r0, #16
 8019536:	0412      	lsls	r2, r2, #16
 8019538:	b9a2      	cbnz	r2, 8019564 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801953a:	0403      	lsls	r3, r0, #16
 801953c:	2010      	movs	r0, #16
 801953e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019542:	bf04      	itt	eq
 8019544:	021b      	lsleq	r3, r3, #8
 8019546:	3008      	addeq	r0, #8
 8019548:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801954c:	bf04      	itt	eq
 801954e:	011b      	lsleq	r3, r3, #4
 8019550:	3004      	addeq	r0, #4
 8019552:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019556:	bf04      	itt	eq
 8019558:	009b      	lsleq	r3, r3, #2
 801955a:	3002      	addeq	r0, #2
 801955c:	2b00      	cmp	r3, #0
 801955e:	db04      	blt.n	801956a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019560:	3001      	adds	r0, #1
 8019562:	4770      	bx	lr
 8019564:	2000      	movs	r0, #0
 8019566:	e7ea      	b.n	801953e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019568:	2020      	movs	r0, #32
 801956a:	4770      	bx	lr

0801956c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019570:	b087      	sub	sp, #28
 8019572:	4681      	mov	r9, r0
 8019574:	4698      	mov	r8, r3
 8019576:	4610      	mov	r0, r2
 8019578:	460d      	mov	r5, r1
 801957a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801957e:	b981      	cbnz	r1, 80195a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019580:	b14b      	cbz	r3, 8019596 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019582:	460b      	mov	r3, r1
 8019584:	464a      	mov	r2, r9
 8019586:	4641      	mov	r1, r8
 8019588:	e9cd 4700 	strd	r4, r7, [sp]
 801958c:	f7ff ffee 	bl	801956c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019590:	b007      	add	sp, #28
 8019592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019596:	f04f 33ff 	mov.w	r3, #4294967295
 801959a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801959e:	603b      	str	r3, [r7, #0]
 80195a0:	e7f6      	b.n	8019590 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80195a2:	fa32 fa01 	lsrs.w	sl, r2, r1
 80195a6:	d107      	bne.n	80195b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80195a8:	fb09 f602 	mul.w	r6, r9, r2
 80195ac:	fbb6 f0f4 	udiv	r0, r6, r4
 80195b0:	fb04 6610 	mls	r6, r4, r0, r6
 80195b4:	603e      	str	r6, [r7, #0]
 80195b6:	e7eb      	b.n	8019590 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80195b8:	2601      	movs	r6, #1
 80195ba:	fa09 fb01 	lsl.w	fp, r9, r1
 80195be:	408e      	lsls	r6, r1
 80195c0:	fbbb f3f4 	udiv	r3, fp, r4
 80195c4:	3e01      	subs	r6, #1
 80195c6:	9302      	str	r3, [sp, #8]
 80195c8:	fb0a f303 	mul.w	r3, sl, r3
 80195cc:	4016      	ands	r6, r2
 80195ce:	9303      	str	r3, [sp, #12]
 80195d0:	4630      	mov	r0, r6
 80195d2:	f7ff ffad 	bl	8019530 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80195d6:	464a      	mov	r2, r9
 80195d8:	460b      	mov	r3, r1
 80195da:	4601      	mov	r1, r0
 80195dc:	4630      	mov	r0, r6
 80195de:	e9cd 4700 	strd	r4, r7, [sp]
 80195e2:	f7ff ffc3 	bl	801956c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80195e6:	9b02      	ldr	r3, [sp, #8]
 80195e8:	4606      	mov	r6, r0
 80195ea:	eb05 0108 	add.w	r1, r5, r8
 80195ee:	fb04 bb13 	mls	fp, r4, r3, fp
 80195f2:	4658      	mov	r0, fp
 80195f4:	f7ff ff9c 	bl	8019530 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80195f8:	ab05      	add	r3, sp, #20
 80195fa:	465a      	mov	r2, fp
 80195fc:	e9cd 4300 	strd	r4, r3, [sp]
 8019600:	4603      	mov	r3, r0
 8019602:	4650      	mov	r0, sl
 8019604:	f7ff ffb2 	bl	801956c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019608:	6839      	ldr	r1, [r7, #0]
 801960a:	9a05      	ldr	r2, [sp, #20]
 801960c:	9b03      	ldr	r3, [sp, #12]
 801960e:	4411      	add	r1, r2
 8019610:	fbb1 f2f4 	udiv	r2, r1, r4
 8019614:	18d3      	adds	r3, r2, r3
 8019616:	fb04 1412 	mls	r4, r4, r2, r1
 801961a:	441e      	add	r6, r3
 801961c:	603c      	str	r4, [r7, #0]
 801961e:	4430      	add	r0, r6
 8019620:	e7b6      	b.n	8019590 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019622 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019626:	b085      	sub	sp, #20
 8019628:	f1b0 0900 	subs.w	r9, r0, #0
 801962c:	461d      	mov	r5, r3
 801962e:	4617      	mov	r7, r2
 8019630:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019632:	bfbb      	ittet	lt
 8019634:	f1c9 0900 	rsblt	r9, r9, #0
 8019638:	f04f 36ff 	movlt.w	r6, #4294967295
 801963c:	2601      	movge	r6, #1
 801963e:	6823      	ldrlt	r3, [r4, #0]
 8019640:	bfbc      	itt	lt
 8019642:	425b      	neglt	r3, r3
 8019644:	6023      	strlt	r3, [r4, #0]
 8019646:	2a00      	cmp	r2, #0
 8019648:	da04      	bge.n	8019654 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	4257      	negs	r7, r2
 801964e:	4276      	negs	r6, r6
 8019650:	425b      	negs	r3, r3
 8019652:	6023      	str	r3, [r4, #0]
 8019654:	2d00      	cmp	r5, #0
 8019656:	4638      	mov	r0, r7
 8019658:	bfba      	itte	lt
 801965a:	426d      	neglt	r5, r5
 801965c:	f04f 38ff 	movlt.w	r8, #4294967295
 8019660:	f04f 0801 	movge.w	r8, #1
 8019664:	f7ff ff64 	bl	8019530 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019668:	ab03      	add	r3, sp, #12
 801966a:	463a      	mov	r2, r7
 801966c:	e9cd 5300 	strd	r5, r3, [sp]
 8019670:	4603      	mov	r3, r0
 8019672:	4648      	mov	r0, r9
 8019674:	f7ff ff7a 	bl	801956c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	9a03      	ldr	r2, [sp, #12]
 801967c:	4546      	cmp	r6, r8
 801967e:	441a      	add	r2, r3
 8019680:	fb92 f3f5 	sdiv	r3, r2, r5
 8019684:	4418      	add	r0, r3
 8019686:	fb05 2313 	mls	r3, r5, r3, r2
 801968a:	bf18      	it	ne
 801968c:	4240      	negne	r0, r0
 801968e:	1c72      	adds	r2, r6, #1
 8019690:	6023      	str	r3, [r4, #0]
 8019692:	d105      	bne.n	80196a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019694:	2b00      	cmp	r3, #0
 8019696:	f1c3 0200 	rsb	r2, r3, #0
 801969a:	db0b      	blt.n	80196b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801969c:	6022      	str	r2, [r4, #0]
 801969e:	e006      	b.n	80196ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196a0:	2e01      	cmp	r6, #1
 80196a2:	d104      	bne.n	80196ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	da02      	bge.n	80196ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80196a8:	442b      	add	r3, r5
 80196aa:	3801      	subs	r0, #1
 80196ac:	6023      	str	r3, [r4, #0]
 80196ae:	b005      	add	sp, #20
 80196b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196b4:	3801      	subs	r0, #1
 80196b6:	1b52      	subs	r2, r2, r5
 80196b8:	e7f0      	b.n	801969c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080196bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80196bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80196c0:	4c1c      	ldr	r4, [pc, #112]	; (8019734 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80196c2:	4605      	mov	r5, r0
 80196c4:	6807      	ldr	r7, [r0, #0]
 80196c6:	69a3      	ldr	r3, [r4, #24]
 80196c8:	b92b      	cbnz	r3, 80196d6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80196ca:	6840      	ldr	r0, [r0, #4]
 80196cc:	e9c5 7000 	strd	r7, r0, [r5]
 80196d0:	b004      	add	sp, #16
 80196d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196d6:	f04f 0802 	mov.w	r8, #2
 80196da:	68a2      	ldr	r2, [r4, #8]
 80196dc:	ae04      	add	r6, sp, #16
 80196de:	6820      	ldr	r0, [r4, #0]
 80196e0:	fb93 f1f8 	sdiv	r1, r3, r8
 80196e4:	440a      	add	r2, r1
 80196e6:	69e1      	ldr	r1, [r4, #28]
 80196e8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80196ec:	463a      	mov	r2, r7
 80196ee:	9600      	str	r6, [sp, #0]
 80196f0:	f7ff ff97 	bl	8019622 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80196f4:	69a3      	ldr	r3, [r4, #24]
 80196f6:	4607      	mov	r7, r0
 80196f8:	686a      	ldr	r2, [r5, #4]
 80196fa:	6a21      	ldr	r1, [r4, #32]
 80196fc:	9600      	str	r6, [sp, #0]
 80196fe:	6860      	ldr	r0, [r4, #4]
 8019700:	f7ff ff8f 	bl	8019622 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019704:	69a3      	ldr	r3, [r4, #24]
 8019706:	6962      	ldr	r2, [r4, #20]
 8019708:	4407      	add	r7, r0
 801970a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801970c:	9600      	str	r6, [sp, #0]
 801970e:	68e0      	ldr	r0, [r4, #12]
 8019710:	fb93 f8f8 	sdiv	r8, r3, r8
 8019714:	4442      	add	r2, r8
 8019716:	9203      	str	r2, [sp, #12]
 8019718:	682a      	ldr	r2, [r5, #0]
 801971a:	f7ff ff82 	bl	8019622 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801971e:	4680      	mov	r8, r0
 8019720:	9600      	str	r6, [sp, #0]
 8019722:	69a3      	ldr	r3, [r4, #24]
 8019724:	686a      	ldr	r2, [r5, #4]
 8019726:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019728:	6920      	ldr	r0, [r4, #16]
 801972a:	f7ff ff7a 	bl	8019622 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801972e:	4440      	add	r0, r8
 8019730:	e7cc      	b.n	80196cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019732:	bf00      	nop
 8019734:	2003bd1c 	.word	0x2003bd1c

08019738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019738:	4b07      	ldr	r3, [pc, #28]	; (8019758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	2b01      	cmp	r3, #1
 801973e:	d109      	bne.n	8019754 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019740:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019744:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019748:	8003      	strh	r3, [r0, #0]
 801974a:	4b04      	ldr	r3, [pc, #16]	; (801975c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801974c:	881b      	ldrh	r3, [r3, #0]
 801974e:	3b01      	subs	r3, #1
 8019750:	1a9b      	subs	r3, r3, r2
 8019752:	800b      	strh	r3, [r1, #0]
 8019754:	4770      	bx	lr
 8019756:	bf00      	nop
 8019758:	2003bd00 	.word	0x2003bd00
 801975c:	2003bcfc 	.word	0x2003bcfc

08019760 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019760:	4b07      	ldr	r3, [pc, #28]	; (8019780 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019762:	b510      	push	{r4, lr}
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	2b01      	cmp	r3, #1
 8019768:	d108      	bne.n	801977c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801976a:	4b06      	ldr	r3, [pc, #24]	; (8019784 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801976c:	880c      	ldrh	r4, [r1, #0]
 801976e:	881b      	ldrh	r3, [r3, #0]
 8019770:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019774:	3b01      	subs	r3, #1
 8019776:	1b1b      	subs	r3, r3, r4
 8019778:	8003      	strh	r3, [r0, #0]
 801977a:	800a      	strh	r2, [r1, #0]
 801977c:	bd10      	pop	{r4, pc}
 801977e:	bf00      	nop
 8019780:	2003bd00 	.word	0x2003bd00
 8019784:	2003bcfc 	.word	0x2003bcfc

08019788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019788:	4b0a      	ldr	r3, [pc, #40]	; (80197b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801978a:	b510      	push	{r4, lr}
 801978c:	781b      	ldrb	r3, [r3, #0]
 801978e:	2b01      	cmp	r3, #1
 8019790:	d10e      	bne.n	80197b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019792:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019796:	8843      	ldrh	r3, [r0, #2]
 8019798:	f9b0 4000 	ldrsh.w	r4, [r0]
 801979c:	18ca      	adds	r2, r1, r3
 801979e:	4b06      	ldr	r3, [pc, #24]	; (80197b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80197a0:	8044      	strh	r4, [r0, #2]
 80197a2:	881b      	ldrh	r3, [r3, #0]
 80197a4:	1a9b      	subs	r3, r3, r2
 80197a6:	8003      	strh	r3, [r0, #0]
 80197a8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80197ac:	8081      	strh	r1, [r0, #4]
 80197ae:	80c3      	strh	r3, [r0, #6]
 80197b0:	bd10      	pop	{r4, pc}
 80197b2:	bf00      	nop
 80197b4:	2003bd00 	.word	0x2003bd00
 80197b8:	2003bcfc 	.word	0x2003bcfc

080197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80197bc:	4b08      	ldr	r3, [pc, #32]	; (80197e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80197be:	781b      	ldrb	r3, [r3, #0]
 80197c0:	2b01      	cmp	r3, #1
 80197c2:	d10c      	bne.n	80197de <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80197c4:	8803      	ldrh	r3, [r0, #0]
 80197c6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80197ca:	8842      	ldrh	r2, [r0, #2]
 80197cc:	8002      	strh	r2, [r0, #0]
 80197ce:	185a      	adds	r2, r3, r1
 80197d0:	4b04      	ldr	r3, [pc, #16]	; (80197e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80197d2:	881b      	ldrh	r3, [r3, #0]
 80197d4:	1a9b      	subs	r3, r3, r2
 80197d6:	8043      	strh	r3, [r0, #2]
 80197d8:	88c3      	ldrh	r3, [r0, #6]
 80197da:	80c1      	strh	r1, [r0, #6]
 80197dc:	8083      	strh	r3, [r0, #4]
 80197de:	4770      	bx	lr
 80197e0:	2003bd00 	.word	0x2003bd00
 80197e4:	2003bcfc 	.word	0x2003bcfc

080197e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80197e8:	4b07      	ldr	r3, [pc, #28]	; (8019808 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80197ea:	b510      	push	{r4, lr}
 80197ec:	781b      	ldrb	r3, [r3, #0]
 80197ee:	2b01      	cmp	r3, #1
 80197f0:	d108      	bne.n	8019804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80197f2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80197f6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80197fa:	8003      	strh	r3, [r0, #0]
 80197fc:	8893      	ldrh	r3, [r2, #4]
 80197fe:	3b01      	subs	r3, #1
 8019800:	1b1b      	subs	r3, r3, r4
 8019802:	800b      	strh	r3, [r1, #0]
 8019804:	bd10      	pop	{r4, pc}
 8019806:	bf00      	nop
 8019808:	2003bd00 	.word	0x2003bd00

0801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801980c:	4b0a      	ldr	r3, [pc, #40]	; (8019838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801980e:	460a      	mov	r2, r1
 8019810:	b510      	push	{r4, lr}
 8019812:	781b      	ldrb	r3, [r3, #0]
 8019814:	2b01      	cmp	r3, #1
 8019816:	d10d      	bne.n	8019834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019818:	8881      	ldrh	r1, [r0, #4]
 801981a:	8803      	ldrh	r3, [r0, #0]
 801981c:	440b      	add	r3, r1
 801981e:	4601      	mov	r1, r0
 8019820:	3b01      	subs	r3, #1
 8019822:	f821 3b02 	strh.w	r3, [r1], #2
 8019826:	f7ff ffdf 	bl	80197e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801982a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801982e:	88c2      	ldrh	r2, [r0, #6]
 8019830:	80c3      	strh	r3, [r0, #6]
 8019832:	8082      	strh	r2, [r0, #4]
 8019834:	bd10      	pop	{r4, pc}
 8019836:	bf00      	nop
 8019838:	2003bd00 	.word	0x2003bd00

0801983c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801983c:	b570      	push	{r4, r5, r6, lr}
 801983e:	2300      	movs	r3, #0
 8019840:	4c0a      	ldr	r4, [pc, #40]	; (801986c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019842:	4605      	mov	r5, r0
 8019844:	460e      	mov	r6, r1
 8019846:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801984a:	6820      	ldr	r0, [r4, #0]
 801984c:	b110      	cbz	r0, 8019854 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801984e:	6803      	ldr	r3, [r0, #0]
 8019850:	695b      	ldr	r3, [r3, #20]
 8019852:	4798      	blx	r3
 8019854:	6026      	str	r6, [r4, #0]
 8019856:	4630      	mov	r0, r6
 8019858:	6833      	ldr	r3, [r6, #0]
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	4798      	blx	r3
 801985e:	682b      	ldr	r3, [r5, #0]
 8019860:	4628      	mov	r0, r5
 8019862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019868:	4718      	bx	r3
 801986a:	bf00      	nop
 801986c:	2003bd4c 	.word	0x2003bd4c

08019870 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019870:	4b06      	ldr	r3, [pc, #24]	; (801988c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019872:	2100      	movs	r1, #0
 8019874:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019878:	4b05      	ldr	r3, [pc, #20]	; (8019890 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801987a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801987e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019882:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019886:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801988a:	4770      	bx	lr
 801988c:	2003bcfc 	.word	0x2003bcfc
 8019890:	2003bcfe 	.word	0x2003bcfe

08019894 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019894:	4b03      	ldr	r3, [pc, #12]	; (80198a4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019896:	6818      	ldr	r0, [r3, #0]
 8019898:	b110      	cbz	r0, 80198a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801989a:	6803      	ldr	r3, [r0, #0]
 801989c:	699b      	ldr	r3, [r3, #24]
 801989e:	4718      	bx	r3
 80198a0:	4770      	bx	lr
 80198a2:	bf00      	nop
 80198a4:	2003bd4c 	.word	0x2003bd4c

080198a8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80198a8:	4770      	bx	lr
	...

080198ac <_ZN8touchgfx11Application4drawEv>:
 80198ac:	4b09      	ldr	r3, [pc, #36]	; (80198d4 <_ZN8touchgfx11Application4drawEv+0x28>)
 80198ae:	b507      	push	{r0, r1, r2, lr}
 80198b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80198b4:	2100      	movs	r1, #0
 80198b6:	4b08      	ldr	r3, [pc, #32]	; (80198d8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80198b8:	9100      	str	r1, [sp, #0]
 80198ba:	4669      	mov	r1, sp
 80198bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198c0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80198c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80198c8:	6803      	ldr	r3, [r0, #0]
 80198ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198cc:	4798      	blx	r3
 80198ce:	b003      	add	sp, #12
 80198d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80198d4:	2003bcfc 	.word	0x2003bcfc
 80198d8:	2003bcfe 	.word	0x2003bcfe

080198dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80198dc:	4b03      	ldr	r3, [pc, #12]	; (80198ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80198de:	6818      	ldr	r0, [r3, #0]
 80198e0:	b110      	cbz	r0, 80198e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80198e2:	6803      	ldr	r3, [r0, #0]
 80198e4:	69db      	ldr	r3, [r3, #28]
 80198e6:	4718      	bx	r3
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	2003bd4c 	.word	0x2003bd4c

080198f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80198f0:	4b03      	ldr	r3, [pc, #12]	; (8019900 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80198f2:	6818      	ldr	r0, [r3, #0]
 80198f4:	b110      	cbz	r0, 80198fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80198f6:	6803      	ldr	r3, [r0, #0]
 80198f8:	6a1b      	ldr	r3, [r3, #32]
 80198fa:	4718      	bx	r3
 80198fc:	4770      	bx	lr
 80198fe:	bf00      	nop
 8019900:	2003bd4c 	.word	0x2003bd4c

08019904 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019904:	2300      	movs	r3, #0
 8019906:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801990a:	4770      	bx	lr

0801990c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801990c:	4b03      	ldr	r3, [pc, #12]	; (801991c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801990e:	6818      	ldr	r0, [r3, #0]
 8019910:	b110      	cbz	r0, 8019918 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019912:	6803      	ldr	r3, [r0, #0]
 8019914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019916:	4718      	bx	r3
 8019918:	4770      	bx	lr
 801991a:	bf00      	nop
 801991c:	2003bd4c 	.word	0x2003bd4c

08019920 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019920:	b570      	push	{r4, r5, r6, lr}
 8019922:	4d32      	ldr	r5, [pc, #200]	; (80199ec <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8019924:	4604      	mov	r4, r0
 8019926:	6828      	ldr	r0, [r5, #0]
 8019928:	b140      	cbz	r0, 801993c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801992a:	7a03      	ldrb	r3, [r0, #8]
 801992c:	b933      	cbnz	r3, 801993c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801992e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019932:	6803      	ldr	r3, [r0, #0]
 8019934:	689b      	ldr	r3, [r3, #8]
 8019936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801993a:	4718      	bx	r3
 801993c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8019940:	b97b      	cbnz	r3, 8019962 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019942:	b170      	cbz	r0, 8019962 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019944:	7a03      	ldrb	r3, [r0, #8]
 8019946:	b163      	cbz	r3, 8019962 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019948:	4b29      	ldr	r3, [pc, #164]	; (80199f0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801994a:	6818      	ldr	r0, [r3, #0]
 801994c:	b110      	cbz	r0, 8019954 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801994e:	6803      	ldr	r3, [r0, #0]
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	4798      	blx	r3
 8019954:	6828      	ldr	r0, [r5, #0]
 8019956:	6803      	ldr	r3, [r0, #0]
 8019958:	68db      	ldr	r3, [r3, #12]
 801995a:	4798      	blx	r3
 801995c:	2301      	movs	r3, #1
 801995e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019962:	2500      	movs	r5, #0
 8019964:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019968:	42a8      	cmp	r0, r5
 801996a:	dd0c      	ble.n	8019986 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801996c:	1963      	adds	r3, r4, r5
 801996e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019972:	b132      	cbz	r2, 8019982 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019974:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019978:	4413      	add	r3, r2
 801997a:	6858      	ldr	r0, [r3, #4]
 801997c:	6803      	ldr	r3, [r0, #0]
 801997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019980:	4798      	blx	r3
 8019982:	3501      	adds	r5, #1
 8019984:	e7ee      	b.n	8019964 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019986:	2300      	movs	r3, #0
 8019988:	461a      	mov	r2, r3
 801998a:	4298      	cmp	r0, r3
 801998c:	d015      	beq.n	80199ba <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801998e:	18e1      	adds	r1, r4, r3
 8019990:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019994:	b16d      	cbz	r5, 80199b2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8019996:	429a      	cmp	r2, r3
 8019998:	d00a      	beq.n	80199b0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801999a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801999e:	4431      	add	r1, r6
 80199a0:	684e      	ldr	r6, [r1, #4]
 80199a2:	b291      	uxth	r1, r2
 80199a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80199a8:	604e      	str	r6, [r1, #4]
 80199aa:	18a1      	adds	r1, r4, r2
 80199ac:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80199b0:	3201      	adds	r2, #1
 80199b2:	3301      	adds	r3, #1
 80199b4:	e7e9      	b.n	801998a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80199b6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80199ba:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 80199be:	4295      	cmp	r5, r2
 80199c0:	dd0d      	ble.n	80199de <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80199c2:	1e6b      	subs	r3, r5, #1
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80199ca:	4618      	mov	r0, r3
 80199cc:	3104      	adds	r1, #4
 80199ce:	4285      	cmp	r5, r0
 80199d0:	ddf1      	ble.n	80199b6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80199d2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80199d6:	3001      	adds	r0, #1
 80199d8:	f841 6c04 	str.w	r6, [r1, #-4]
 80199dc:	e7f7      	b.n	80199ce <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80199de:	4b04      	ldr	r3, [pc, #16]	; (80199f0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80199e0:	6818      	ldr	r0, [r3, #0]
 80199e2:	b110      	cbz	r0, 80199ea <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80199e4:	6803      	ldr	r3, [r0, #0]
 80199e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e8:	e7a5      	b.n	8019936 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80199ea:	bd70      	pop	{r4, r5, r6, pc}
 80199ec:	2003bd50 	.word	0x2003bd50
 80199f0:	2003bd4c 	.word	0x2003bd4c

080199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80199f4:	b510      	push	{r4, lr}
 80199f6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80199fa:	888a      	ldrh	r2, [r1, #4]
 80199fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019a00:	4422      	add	r2, r4
 8019a02:	b212      	sxth	r2, r2
 8019a04:	4293      	cmp	r3, r2
 8019a06:	da15      	bge.n	8019a34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019a08:	8882      	ldrh	r2, [r0, #4]
 8019a0a:	4413      	add	r3, r2
 8019a0c:	b21b      	sxth	r3, r3
 8019a0e:	429c      	cmp	r4, r3
 8019a10:	da10      	bge.n	8019a34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019a12:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019a16:	88c9      	ldrh	r1, [r1, #6]
 8019a18:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019a1c:	4419      	add	r1, r3
 8019a1e:	b209      	sxth	r1, r1
 8019a20:	428a      	cmp	r2, r1
 8019a22:	da07      	bge.n	8019a34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019a24:	88c0      	ldrh	r0, [r0, #6]
 8019a26:	4410      	add	r0, r2
 8019a28:	b200      	sxth	r0, r0
 8019a2a:	4283      	cmp	r3, r0
 8019a2c:	bfac      	ite	ge
 8019a2e:	2000      	movge	r0, #0
 8019a30:	2001      	movlt	r0, #1
 8019a32:	bd10      	pop	{r4, pc}
 8019a34:	2000      	movs	r0, #0
 8019a36:	e7fc      	b.n	8019a32 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019a38 <_ZN8touchgfx4Rect10restrictToEss>:
 8019a38:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	b510      	push	{r4, lr}
 8019a40:	da04      	bge.n	8019a4c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019a42:	8884      	ldrh	r4, [r0, #4]
 8019a44:	4423      	add	r3, r4
 8019a46:	8083      	strh	r3, [r0, #4]
 8019a48:	2300      	movs	r3, #0
 8019a4a:	8003      	strh	r3, [r0, #0]
 8019a4c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019a50:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019a54:	1b09      	subs	r1, r1, r4
 8019a56:	428b      	cmp	r3, r1
 8019a58:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019a5c:	bfc8      	it	gt
 8019a5e:	8081      	strhgt	r1, [r0, #4]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	da04      	bge.n	8019a6e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019a64:	88c1      	ldrh	r1, [r0, #6]
 8019a66:	440b      	add	r3, r1
 8019a68:	80c3      	strh	r3, [r0, #6]
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	8043      	strh	r3, [r0, #2]
 8019a6e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019a72:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019a76:	1a52      	subs	r2, r2, r1
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	bfc8      	it	gt
 8019a7c:	80c2      	strhgt	r2, [r0, #6]
 8019a7e:	bd10      	pop	{r4, pc}

08019a80 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019a80:	4b10      	ldr	r3, [pc, #64]	; (8019ac4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019a82:	b510      	push	{r4, lr}
 8019a84:	460c      	mov	r4, r1
 8019a86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a8a:	4b0f      	ldr	r3, [pc, #60]	; (8019ac8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019a92:	f7ff ffd1 	bl	8019a38 <_ZN8touchgfx4Rect10restrictToEss>
 8019a96:	4b0d      	ldr	r3, [pc, #52]	; (8019acc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019a98:	6818      	ldr	r0, [r3, #0]
 8019a9a:	b190      	cbz	r0, 8019ac2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019a9c:	6803      	ldr	r3, [r0, #0]
 8019a9e:	4621      	mov	r1, r4
 8019aa0:	689b      	ldr	r3, [r3, #8]
 8019aa2:	4798      	blx	r3
 8019aa4:	4b0a      	ldr	r3, [pc, #40]	; (8019ad0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019aa6:	6818      	ldr	r0, [r3, #0]
 8019aa8:	b118      	cbz	r0, 8019ab2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	4621      	mov	r1, r4
 8019aae:	689b      	ldr	r3, [r3, #8]
 8019ab0:	4798      	blx	r3
 8019ab2:	4b08      	ldr	r3, [pc, #32]	; (8019ad4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019ab4:	4621      	mov	r1, r4
 8019ab6:	6818      	ldr	r0, [r3, #0]
 8019ab8:	6803      	ldr	r3, [r0, #0]
 8019aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019abe:	69db      	ldr	r3, [r3, #28]
 8019ac0:	4718      	bx	r3
 8019ac2:	bd10      	pop	{r4, pc}
 8019ac4:	2003bcfe 	.word	0x2003bcfe
 8019ac8:	2003bcfc 	.word	0x2003bcfc
 8019acc:	2003bd4c 	.word	0x2003bd4c
 8019ad0:	2003bd48 	.word	0x2003bd48
 8019ad4:	2003bd08 	.word	0x2003bd08

08019ad8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ada:	4606      	mov	r6, r0
 8019adc:	4608      	mov	r0, r1
 8019ade:	460f      	mov	r7, r1
 8019ae0:	f7fb fb43 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ae4:	b9e8      	cbnz	r0, 8019b22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019ae6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019aea:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019aee:	42a5      	cmp	r5, r4
 8019af0:	db17      	blt.n	8019b22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019af2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019af6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	db11      	blt.n	8019b22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019afe:	88b9      	ldrh	r1, [r7, #4]
 8019b00:	440d      	add	r5, r1
 8019b02:	88b1      	ldrh	r1, [r6, #4]
 8019b04:	440c      	add	r4, r1
 8019b06:	b22d      	sxth	r5, r5
 8019b08:	b224      	sxth	r4, r4
 8019b0a:	42a5      	cmp	r5, r4
 8019b0c:	dc09      	bgt.n	8019b22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019b0e:	88f8      	ldrh	r0, [r7, #6]
 8019b10:	4410      	add	r0, r2
 8019b12:	88f2      	ldrh	r2, [r6, #6]
 8019b14:	4413      	add	r3, r2
 8019b16:	b200      	sxth	r0, r0
 8019b18:	b21b      	sxth	r3, r3
 8019b1a:	4298      	cmp	r0, r3
 8019b1c:	bfcc      	ite	gt
 8019b1e:	2000      	movgt	r0, #0
 8019b20:	2001      	movle	r0, #1
 8019b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b26:	4604      	mov	r4, r0
 8019b28:	4608      	mov	r0, r1
 8019b2a:	460d      	mov	r5, r1
 8019b2c:	f7fb fb1d 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b30:	b978      	cbnz	r0, 8019b52 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019b32:	4620      	mov	r0, r4
 8019b34:	f7fb fb19 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b38:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019b3c:	b150      	cbz	r0, 8019b54 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019b3e:	8026      	strh	r6, [r4, #0]
 8019b40:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019b44:	8063      	strh	r3, [r4, #2]
 8019b46:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019b4a:	80a3      	strh	r3, [r4, #4]
 8019b4c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019b50:	80e3      	strh	r3, [r4, #6]
 8019b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b54:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019b58:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019b5c:	42b1      	cmp	r1, r6
 8019b5e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019b62:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019b66:	460f      	mov	r7, r1
 8019b68:	88ed      	ldrh	r5, [r5, #6]
 8019b6a:	bfa8      	it	ge
 8019b6c:	4637      	movge	r7, r6
 8019b6e:	4293      	cmp	r3, r2
 8019b70:	4618      	mov	r0, r3
 8019b72:	4466      	add	r6, ip
 8019b74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019b78:	bfa8      	it	ge
 8019b7a:	4610      	movge	r0, r2
 8019b7c:	442a      	add	r2, r5
 8019b7e:	88e5      	ldrh	r5, [r4, #6]
 8019b80:	4461      	add	r1, ip
 8019b82:	b236      	sxth	r6, r6
 8019b84:	8027      	strh	r7, [r4, #0]
 8019b86:	442b      	add	r3, r5
 8019b88:	b209      	sxth	r1, r1
 8019b8a:	b212      	sxth	r2, r2
 8019b8c:	8060      	strh	r0, [r4, #2]
 8019b8e:	b21b      	sxth	r3, r3
 8019b90:	428e      	cmp	r6, r1
 8019b92:	bfac      	ite	ge
 8019b94:	ebc7 0106 	rsbge	r1, r7, r6
 8019b98:	ebc7 0101 	rsblt	r1, r7, r1
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	bfac      	ite	ge
 8019ba0:	ebc0 0202 	rsbge	r2, r0, r2
 8019ba4:	ebc0 0203 	rsblt	r2, r0, r3
 8019ba8:	80a1      	strh	r1, [r4, #4]
 8019baa:	80e2      	strh	r2, [r4, #6]
 8019bac:	e7d1      	b.n	8019b52 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019bb0 <_ZN8touchgfx11Application11getInstanceEv>:
 8019bb0:	4b01      	ldr	r3, [pc, #4]	; (8019bb8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019bb2:	6818      	ldr	r0, [r3, #0]
 8019bb4:	4770      	bx	lr
 8019bb6:	bf00      	nop
 8019bb8:	2003bd5c 	.word	0x2003bd5c

08019bbc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8019bc2:	30a8      	adds	r0, #168	; 0xa8
 8019bc4:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019bc8:	f802 3b01 	strb.w	r3, [r2], #1
 8019bcc:	4282      	cmp	r2, r0
 8019bce:	d1fb      	bne.n	8019bc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019bd0:	4770      	bx	lr

08019bd2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019bd8:	2200      	movs	r2, #0
 8019bda:	801a      	strh	r2, [r3, #0]
 8019bdc:	3308      	adds	r3, #8
 8019bde:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019be2:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019be6:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019bea:	428b      	cmp	r3, r1
 8019bec:	d1f5      	bne.n	8019bda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019bee:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8019bf2:	4770      	bx	lr

08019bf4 <_ZN8touchgfx11ApplicationC1Ev>:
 8019bf4:	b570      	push	{r4, r5, r6, lr}
 8019bf6:	4b19      	ldr	r3, [pc, #100]	; (8019c5c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8019bf8:	2500      	movs	r5, #0
 8019bfa:	4604      	mov	r4, r0
 8019bfc:	30a8      	adds	r0, #168	; 0xa8
 8019bfe:	f840 3ca8 	str.w	r3, [r0, #-168]
 8019c02:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019c06:	f7ff ffe4 	bl	8019bd2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019c0a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019c0e:	f7ff ffe0 	bl	8019bd2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019c12:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019c16:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019c1a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019c1e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019c22:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8019c26:	490e      	ldr	r1, [pc, #56]	; (8019c60 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019c28:	480e      	ldr	r0, [pc, #56]	; (8019c64 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019c2a:	f00e f9c7 	bl	8027fbc <CRC_Lock>
 8019c2e:	4e0e      	ldr	r6, [pc, #56]	; (8019c68 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019c30:	4b0e      	ldr	r3, [pc, #56]	; (8019c6c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019c32:	b158      	cbz	r0, 8019c4c <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8019c34:	801d      	strh	r5, [r3, #0]
 8019c36:	2300      	movs	r3, #0
 8019c38:	4a0d      	ldr	r2, [pc, #52]	; (8019c70 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	6013      	str	r3, [r2, #0]
 8019c3e:	4a0d      	ldr	r2, [pc, #52]	; (8019c74 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019c40:	6033      	str	r3, [r6, #0]
 8019c42:	6013      	str	r3, [r2, #0]
 8019c44:	f7ff ffba 	bl	8019bbc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019c48:	4620      	mov	r0, r4
 8019c4a:	bd70      	pop	{r4, r5, r6, pc}
 8019c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019c50:	2002      	movs	r0, #2
 8019c52:	801a      	strh	r2, [r3, #0]
 8019c54:	6030      	str	r0, [r6, #0]
 8019c56:	f001 fadf 	bl	801b218 <_ZN8touchgfx6Screen4drawEv>
 8019c5a:	e7ec      	b.n	8019c36 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8019c5c:	0802d288 	.word	0x0802d288
 8019c60:	b5e8b5cd 	.word	0xb5e8b5cd
 8019c64:	f407a5c2 	.word	0xf407a5c2
 8019c68:	2003bd4c 	.word	0x2003bd4c
 8019c6c:	20000034 	.word	0x20000034
 8019c70:	2003bd5c 	.word	0x2003bd5c
 8019c74:	2003bd50 	.word	0x2003bd50

08019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019c78:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8019c7c:	3b01      	subs	r3, #1
 8019c7e:	b29b      	uxth	r3, r3
 8019c80:	428b      	cmp	r3, r1
 8019c82:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8019c86:	b510      	push	{r4, lr}
 8019c88:	d908      	bls.n	8019c9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019c8a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019c8e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019c92:	681a      	ldr	r2, [r3, #0]
 8019c94:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019c98:	685a      	ldr	r2, [r3, #4]
 8019c9a:	6062      	str	r2, [r4, #4]
 8019c9c:	bd10      	pop	{r4, pc}
	...

08019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	b08f      	sub	sp, #60	; 0x3c
 8019ca6:	4b94      	ldr	r3, [pc, #592]	; (8019ef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8019ca8:	4683      	mov	fp, r0
 8019caa:	ac0a      	add	r4, sp, #40	; 0x28
 8019cac:	e884 0006 	stmia.w	r4, {r1, r2}
 8019cb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	4b91      	ldr	r3, [pc, #580]	; (8019efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8019cb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019cbc:	f7ff febc 	bl	8019a38 <_ZN8touchgfx4Rect10restrictToEss>
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f7fb fa52 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019cc6:	2800      	cmp	r0, #0
 8019cc8:	d16a      	bne.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019cca:	9403      	str	r4, [sp, #12]
 8019ccc:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019cd0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019cd4:	2400      	movs	r4, #0
 8019cd6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8019cda:	9301      	str	r3, [sp, #4]
 8019cdc:	36a0      	adds	r6, #160	; 0xa0
 8019cde:	42a5      	cmp	r5, r4
 8019ce0:	d00d      	beq.n	8019cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8019ce2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8019ce6:	9803      	ldr	r0, [sp, #12]
 8019ce8:	f7ff fef6 	bl	8019ad8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019cec:	b128      	cbz	r0, 8019cfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019cee:	1e69      	subs	r1, r5, #1
 8019cf0:	9801      	ldr	r0, [sp, #4]
 8019cf2:	1b09      	subs	r1, r1, r4
 8019cf4:	b289      	uxth	r1, r1
 8019cf6:	f7ff ffbf 	bl	8019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019cfa:	3401      	adds	r4, #1
 8019cfc:	e7ef      	b.n	8019cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8019cfe:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019d02:	1e7b      	subs	r3, r7, #1
 8019d04:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8019d08:	9704      	str	r7, [sp, #16]
 8019d0a:	9302      	str	r3, [sp, #8]
 8019d0c:	2400      	movs	r4, #0
 8019d0e:	4655      	mov	r5, sl
 8019d10:	9705      	str	r7, [sp, #20]
 8019d12:	4626      	mov	r6, r4
 8019d14:	9b05      	ldr	r3, [sp, #20]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d078      	beq.n	8019e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8019d1a:	9903      	ldr	r1, [sp, #12]
 8019d1c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019d20:	f7ff fe68 	bl	80199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019d24:	b360      	cbz	r0, 8019d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019d26:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8019d2a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8019d2e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8019d32:	45e6      	cmp	lr, ip
 8019d34:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8019d38:	db35      	blt.n	8019da6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019d3a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8019d3e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019d42:	4472      	add	r2, lr
 8019d44:	4463      	add	r3, ip
 8019d46:	b212      	sxth	r2, r2
 8019d48:	b21b      	sxth	r3, r3
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	dc2b      	bgt.n	8019da6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019d4e:	fa1f f288 	uxth.w	r2, r8
 8019d52:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019d56:	45c1      	cmp	r9, r8
 8019d58:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8019d5c:	4413      	add	r3, r2
 8019d5e:	fa1f fc89 	uxth.w	ip, r9
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	fa0f fe83 	sxth.w	lr, r3
 8019d68:	db0f      	blt.n	8019d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019d6a:	eba3 030c 	sub.w	r3, r3, ip
 8019d6e:	1ac9      	subs	r1, r1, r3
 8019d70:	b209      	sxth	r1, r1
 8019d72:	2900      	cmp	r1, #0
 8019d74:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019d78:	dd12      	ble.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019d7a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8019d7e:	4604      	mov	r4, r0
 8019d80:	9b05      	ldr	r3, [sp, #20]
 8019d82:	3d08      	subs	r5, #8
 8019d84:	3b01      	subs	r3, #1
 8019d86:	9305      	str	r3, [sp, #20]
 8019d88:	e7c4      	b.n	8019d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8019d8a:	4461      	add	r1, ip
 8019d8c:	b209      	sxth	r1, r1
 8019d8e:	4571      	cmp	r1, lr
 8019d90:	dc3a      	bgt.n	8019e08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019d92:	eba2 020c 	sub.w	r2, r2, ip
 8019d96:	b212      	sxth	r2, r2
 8019d98:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8019d9c:	2a00      	cmp	r2, #0
 8019d9e:	dcee      	bgt.n	8019d7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019da0:	b00f      	add	sp, #60	; 0x3c
 8019da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da6:	45c1      	cmp	r9, r8
 8019da8:	db2e      	blt.n	8019e08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019daa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8019dae:	4499      	add	r9, r3
 8019db0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019db4:	4498      	add	r8, r3
 8019db6:	fa0f f989 	sxth.w	r9, r9
 8019dba:	fa0f f888 	sxth.w	r8, r8
 8019dbe:	45c1      	cmp	r9, r8
 8019dc0:	dc22      	bgt.n	8019e08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019dc2:	fa1f f28c 	uxth.w	r2, ip
 8019dc6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019dca:	45e6      	cmp	lr, ip
 8019dcc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019dd0:	4413      	add	r3, r2
 8019dd2:	fa1f f88e 	uxth.w	r8, lr
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	fa0f f983 	sxth.w	r9, r3
 8019ddc:	db0a      	blt.n	8019df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8019dde:	eba3 0308 	sub.w	r3, r3, r8
 8019de2:	1ac9      	subs	r1, r1, r3
 8019de4:	b209      	sxth	r1, r1
 8019de6:	2900      	cmp	r1, #0
 8019de8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8019dec:	ddd8      	ble.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019dee:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8019df2:	e7c4      	b.n	8019d7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019df4:	4441      	add	r1, r8
 8019df6:	b209      	sxth	r1, r1
 8019df8:	4549      	cmp	r1, r9
 8019dfa:	dc05      	bgt.n	8019e08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019dfc:	eba2 0208 	sub.w	r2, r2, r8
 8019e00:	b212      	sxth	r2, r2
 8019e02:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019e06:	e7c9      	b.n	8019d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019e08:	4606      	mov	r6, r0
 8019e0a:	e7b9      	b.n	8019d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019e0c:	2c00      	cmp	r4, #0
 8019e0e:	f47f af7d 	bne.w	8019d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8019e12:	2e00      	cmp	r6, #0
 8019e14:	f000 81e1 	beq.w	801a1da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8019e18:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8019e1c:	4655      	mov	r5, sl
 8019e1e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8019e22:	b2b9      	uxth	r1, r7
 8019e24:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8019e28:	b2b3      	uxth	r3, r6
 8019e2a:	9105      	str	r1, [sp, #20]
 8019e2c:	9805      	ldr	r0, [sp, #20]
 8019e2e:	441a      	add	r2, r3
 8019e30:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8019e34:	b292      	uxth	r2, r2
 8019e36:	4401      	add	r1, r0
 8019e38:	fa0f f882 	sxth.w	r8, r2
 8019e3c:	b289      	uxth	r1, r1
 8019e3e:	9106      	str	r1, [sp, #24]
 8019e40:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8019e44:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019e48:	9b04      	ldr	r3, [sp, #16]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d058      	beq.n	8019f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8019e4e:	9903      	ldr	r1, [sp, #12]
 8019e50:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019e54:	f7ff fdce 	bl	80199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019e58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019e5c:	b1d8      	cbz	r0, 8019e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8019e5e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8019e62:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8019e66:	4576      	cmp	r6, lr
 8019e68:	dc26      	bgt.n	8019eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8019e6a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8019e6e:	44f4      	add	ip, lr
 8019e70:	fa0f fc8c 	sxth.w	ip, ip
 8019e74:	45e0      	cmp	r8, ip
 8019e76:	db1f      	blt.n	8019eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8019e78:	428f      	cmp	r7, r1
 8019e7a:	fa1f fc81 	uxth.w	ip, r1
 8019e7e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8019e82:	dc0f      	bgt.n	8019ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8019e84:	9806      	ldr	r0, [sp, #24]
 8019e86:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8019e8a:	eba0 0c0c 	sub.w	ip, r0, ip
 8019e8e:	eba1 010c 	sub.w	r1, r1, ip
 8019e92:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8019e96:	4620      	mov	r0, r4
 8019e98:	9904      	ldr	r1, [sp, #16]
 8019e9a:	3d08      	subs	r5, #8
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	3901      	subs	r1, #1
 8019ea0:	9104      	str	r1, [sp, #16]
 8019ea2:	e7cf      	b.n	8019e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8019ea4:	4461      	add	r1, ip
 8019ea6:	b209      	sxth	r1, r1
 8019ea8:	4549      	cmp	r1, r9
 8019eaa:	dcf5      	bgt.n	8019e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8019eac:	9905      	ldr	r1, [sp, #20]
 8019eae:	eba1 0c0c 	sub.w	ip, r1, ip
 8019eb2:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8019eb6:	e7ee      	b.n	8019e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8019eb8:	428f      	cmp	r7, r1
 8019eba:	dced      	bgt.n	8019e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8019ebc:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019ec0:	4461      	add	r1, ip
 8019ec2:	b209      	sxth	r1, r1
 8019ec4:	4589      	cmp	r9, r1
 8019ec6:	dbe7      	blt.n	8019e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8019ec8:	4576      	cmp	r6, lr
 8019eca:	fa1f fc8e 	uxth.w	ip, lr
 8019ece:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019ed2:	dc08      	bgt.n	8019ee6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8019ed4:	eba2 0c0c 	sub.w	ip, r2, ip
 8019ed8:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8019edc:	eba1 010c 	sub.w	r1, r1, ip
 8019ee0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019ee4:	e7d7      	b.n	8019e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8019ee6:	4461      	add	r1, ip
 8019ee8:	b209      	sxth	r1, r1
 8019eea:	4588      	cmp	r8, r1
 8019eec:	dbd4      	blt.n	8019e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8019eee:	eba3 0c0c 	sub.w	ip, r3, ip
 8019ef2:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019ef6:	e7ce      	b.n	8019e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8019ef8:	2003bcfe 	.word	0x2003bcfe
 8019efc:	2003bcfc 	.word	0x2003bcfc
 8019f00:	2c00      	cmp	r4, #0
 8019f02:	f000 816a 	beq.w	801a1da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8019f06:	9b02      	ldr	r3, [sp, #8]
 8019f08:	3301      	adds	r3, #1
 8019f0a:	f000 8166 	beq.w	801a1da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8019f0e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8019f12:	9803      	ldr	r0, [sp, #12]
 8019f14:	4621      	mov	r1, r4
 8019f16:	f7ff fddf 	bl	8019ad8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019f1a:	b120      	cbz	r0, 8019f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8019f1c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019f20:	9801      	ldr	r0, [sp, #4]
 8019f22:	f7ff fea9 	bl	8019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019f26:	9903      	ldr	r1, [sp, #12]
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f7ff fd63 	bl	80199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	f000 809b 	beq.w	801a06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8019f34:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8019f38:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8019f3c:	b281      	uxth	r1, r0
 8019f3e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019f42:	9309      	str	r3, [sp, #36]	; 0x24
 8019f44:	eb01 0c03 	add.w	ip, r1, r3
 8019f48:	b2ab      	uxth	r3, r5
 8019f4a:	4285      	cmp	r5, r0
 8019f4c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8019f50:	fa1f f98c 	uxth.w	r9, ip
 8019f54:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8019f58:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8019f5c:	eb03 040c 	add.w	r4, r3, ip
 8019f60:	b2a4      	uxth	r4, r4
 8019f62:	9405      	str	r4, [sp, #20]
 8019f64:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8019f68:	9404      	str	r4, [sp, #16]
 8019f6a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8019f6e:	f340 809a 	ble.w	801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8019f72:	1a5b      	subs	r3, r3, r1
 8019f74:	4596      	cmp	lr, r2
 8019f76:	fa0f f589 	sxth.w	r5, r9
 8019f7a:	b29b      	uxth	r3, r3
 8019f7c:	b21e      	sxth	r6, r3
 8019f7e:	dd2e      	ble.n	8019fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8019f80:	9f02      	ldr	r7, [sp, #8]
 8019f82:	fa1f fe8e 	uxth.w	lr, lr
 8019f86:	b292      	uxth	r2, r2
 8019f88:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8019f8c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019f90:	9f04      	ldr	r7, [sp, #16]
 8019f92:	ebae 0102 	sub.w	r1, lr, r2
 8019f96:	4486      	add	lr, r0
 8019f98:	1b7f      	subs	r7, r7, r5
 8019f9a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8019f9e:	b289      	uxth	r1, r1
 8019fa0:	442a      	add	r2, r5
 8019fa2:	fa0f fe8e 	sxth.w	lr, lr
 8019fa6:	b20c      	sxth	r4, r1
 8019fa8:	b212      	sxth	r2, r2
 8019faa:	4367      	muls	r7, r4
 8019fac:	ebae 0202 	sub.w	r2, lr, r2
 8019fb0:	4372      	muls	r2, r6
 8019fb2:	4297      	cmp	r7, r2
 8019fb4:	db09      	blt.n	8019fca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8019fb6:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8019fba:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8019fbe:	449c      	add	ip, r3
 8019fc0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019fc4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8019fc8:	e680      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019fca:	4401      	add	r1, r0
 8019fcc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019fd0:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8019fd4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019fd8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019fdc:	e676      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019fde:	9f04      	ldr	r7, [sp, #16]
 8019fe0:	42bd      	cmp	r5, r7
 8019fe2:	da27      	bge.n	801a034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8019fe4:	9902      	ldr	r1, [sp, #8]
 8019fe6:	1b7f      	subs	r7, r7, r5
 8019fe8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8019fec:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8019ff0:	eb04 010e 	add.w	r1, r4, lr
 8019ff4:	fa1f f881 	uxth.w	r8, r1
 8019ff8:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8019ffc:	4411      	add	r1, r2
 8019ffe:	fa0f f988 	sxth.w	r9, r8
 801a002:	eba2 020e 	sub.w	r2, r2, lr
 801a006:	eba1 0108 	sub.w	r1, r1, r8
 801a00a:	4372      	muls	r2, r6
 801a00c:	b289      	uxth	r1, r1
 801a00e:	fa0f f881 	sxth.w	r8, r1
 801a012:	fb08 f707 	mul.w	r7, r8, r7
 801a016:	42ba      	cmp	r2, r7
 801a018:	dc06      	bgt.n	801a028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a01a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801a01e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801a022:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801a026:	e7ca      	b.n	8019fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a028:	4421      	add	r1, r4
 801a02a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801a02e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a032:	e64b      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a034:	9d05      	ldr	r5, [sp, #20]
 801a036:	2c06      	cmp	r4, #6
 801a038:	eba9 0505 	sub.w	r5, r9, r5
 801a03c:	b2ad      	uxth	r5, r5
 801a03e:	fa0f fe85 	sxth.w	lr, r5
 801a042:	d818      	bhi.n	801a076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801a044:	9b04      	ldr	r3, [sp, #16]
 801a046:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801a04a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a04e:	1c63      	adds	r3, r4, #1
 801a050:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801a054:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a058:	9b01      	ldr	r3, [sp, #4]
 801a05a:	9d01      	ldr	r5, [sp, #4]
 801a05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a060:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801a064:	805a      	strh	r2, [r3, #2]
 801a066:	809e      	strh	r6, [r3, #4]
 801a068:	80d9      	strh	r1, [r3, #6]
 801a06a:	9b02      	ldr	r3, [sp, #8]
 801a06c:	f1aa 0a08 	sub.w	sl, sl, #8
 801a070:	3b01      	subs	r3, #1
 801a072:	9302      	str	r3, [sp, #8]
 801a074:	e747      	b.n	8019f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801a076:	9a02      	ldr	r2, [sp, #8]
 801a078:	45b6      	cmp	lr, r6
 801a07a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a07e:	db0d      	blt.n	801a09c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801a080:	449c      	add	ip, r3
 801a082:	445a      	add	r2, fp
 801a084:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801a088:	fa1f fc8c 	uxth.w	ip, ip
 801a08c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801a090:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a094:	448c      	add	ip, r1
 801a096:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801a09a:	e617      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a09c:	445a      	add	r2, fp
 801a09e:	44ac      	add	ip, r5
 801a0a0:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801a0a4:	e78e      	b.n	8019fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a0a6:	fa1f f18e 	uxth.w	r1, lr
 801a0aa:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801a0ae:	b293      	uxth	r3, r2
 801a0b0:	4596      	cmp	lr, r2
 801a0b2:	eb01 0806 	add.w	r8, r1, r6
 801a0b6:	9306      	str	r3, [sp, #24]
 801a0b8:	fa1f f888 	uxth.w	r8, r8
 801a0bc:	9f06      	ldr	r7, [sp, #24]
 801a0be:	fa0f f388 	sxth.w	r3, r8
 801a0c2:	9307      	str	r3, [sp, #28]
 801a0c4:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801a0c8:	443b      	add	r3, r7
 801a0ca:	b29b      	uxth	r3, r3
 801a0cc:	9308      	str	r3, [sp, #32]
 801a0ce:	da25      	bge.n	801a11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801a0d0:	9905      	ldr	r1, [sp, #20]
 801a0d2:	eba3 0308 	sub.w	r3, r3, r8
 801a0d6:	eba2 020e 	sub.w	r2, r2, lr
 801a0da:	1b40      	subs	r0, r0, r5
 801a0dc:	eba9 0401 	sub.w	r4, r9, r1
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	b2a4      	uxth	r4, r4
 801a0e4:	b219      	sxth	r1, r3
 801a0e6:	fa0f f984 	sxth.w	r9, r4
 801a0ea:	4348      	muls	r0, r1
 801a0ec:	fb09 f202 	mul.w	r2, r9, r2
 801a0f0:	4282      	cmp	r2, r0
 801a0f2:	9a02      	ldr	r2, [sp, #8]
 801a0f4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a0f8:	445a      	add	r2, fp
 801a0fa:	dc06      	bgt.n	801a10a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801a0fc:	9b07      	ldr	r3, [sp, #28]
 801a0fe:	44a4      	add	ip, r4
 801a100:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801a104:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801a108:	e75c      	b.n	8019fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a10a:	9904      	ldr	r1, [sp, #16]
 801a10c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801a110:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801a114:	4433      	add	r3, r6
 801a116:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a11a:	e5d7      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a11c:	9f06      	ldr	r7, [sp, #24]
 801a11e:	9b04      	ldr	r3, [sp, #16]
 801a120:	1bc9      	subs	r1, r1, r7
 801a122:	fa0f f789 	sxth.w	r7, r9
 801a126:	b289      	uxth	r1, r1
 801a128:	429f      	cmp	r7, r3
 801a12a:	fa0f fe81 	sxth.w	lr, r1
 801a12e:	dd22      	ble.n	801a176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801a130:	9a05      	ldr	r2, [sp, #20]
 801a132:	1b40      	subs	r0, r0, r5
 801a134:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a138:	eba9 0202 	sub.w	r2, r9, r2
 801a13c:	9d07      	ldr	r5, [sp, #28]
 801a13e:	fb0e f000 	mul.w	r0, lr, r0
 801a142:	b292      	uxth	r2, r2
 801a144:	eba5 0a03 	sub.w	sl, r5, r3
 801a148:	9b02      	ldr	r3, [sp, #8]
 801a14a:	b214      	sxth	r4, r2
 801a14c:	00db      	lsls	r3, r3, #3
 801a14e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a152:	445b      	add	r3, fp
 801a154:	4550      	cmp	r0, sl
 801a156:	db03      	blt.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801a158:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801a15c:	4494      	add	ip, r2
 801a15e:	e731      	b.n	8019fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a160:	9a04      	ldr	r2, [sp, #16]
 801a162:	4431      	add	r1, r6
 801a164:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801a168:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a16c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a170:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a174:	e75b      	b.n	801a02e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801a176:	9b08      	ldr	r3, [sp, #32]
 801a178:	2c06      	cmp	r4, #6
 801a17a:	eba3 0308 	sub.w	r3, r3, r8
 801a17e:	b29b      	uxth	r3, r3
 801a180:	b21d      	sxth	r5, r3
 801a182:	d813      	bhi.n	801a1ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801a184:	9b07      	ldr	r3, [sp, #28]
 801a186:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801a18a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a18e:	1c63      	adds	r3, r4, #1
 801a190:	9901      	ldr	r1, [sp, #4]
 801a192:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a196:	9b01      	ldr	r3, [sp, #4]
 801a198:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801a19c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a1a0:	805a      	strh	r2, [r3, #2]
 801a1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1a4:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a1a8:	809a      	strh	r2, [r3, #4]
 801a1aa:	e75e      	b.n	801a06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a1ac:	9802      	ldr	r0, [sp, #8]
 801a1ae:	4575      	cmp	r5, lr
 801a1b0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a1b4:	db0d      	blt.n	801a1d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801a1b6:	4431      	add	r1, r6
 801a1b8:	9b06      	ldr	r3, [sp, #24]
 801a1ba:	4458      	add	r0, fp
 801a1bc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a1c0:	b289      	uxth	r1, r1
 801a1c2:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801a1c6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a1ca:	4419      	add	r1, r3
 801a1cc:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801a1d0:	e57c      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a1d2:	4458      	add	r0, fp
 801a1d4:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801a1d8:	e79c      	b.n	801a114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801a1da:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801a1de:	2e07      	cmp	r6, #7
 801a1e0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a1e4:	d812      	bhi.n	801a20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801a1e6:	1c75      	adds	r5, r6, #1
 801a1e8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801a1ec:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801a1f0:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801a1f4:	9d01      	ldr	r5, [sp, #4]
 801a1f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a1fa:	442c      	add	r4, r5
 801a1fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801a200:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a204:	8061      	strh	r1, [r4, #2]
 801a206:	80a2      	strh	r2, [r4, #4]
 801a208:	80e3      	strh	r3, [r4, #6]
 801a20a:	e5c9      	b.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a20c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a210:	3e01      	subs	r6, #1
 801a212:	445c      	add	r4, fp
 801a214:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a218:	f04f 37ff 	mov.w	r7, #4294967295
 801a21c:	2500      	movs	r5, #0
 801a21e:	9305      	str	r3, [sp, #20]
 801a220:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801a224:	1e72      	subs	r2, r6, #1
 801a226:	9302      	str	r3, [sp, #8]
 801a228:	4691      	mov	r9, r2
 801a22a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801a22e:	9304      	str	r3, [sp, #16]
 801a230:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801a234:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a238:	6818      	ldr	r0, [r3, #0]
 801a23a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a23e:	9207      	str	r2, [sp, #28]
 801a240:	bf16      	itet	ne
 801a242:	9905      	ldrne	r1, [sp, #20]
 801a244:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a248:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a24c:	9306      	str	r3, [sp, #24]
 801a24e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a252:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a256:	fb18 f801 	smulbb	r8, r8, r1
 801a25a:	6859      	ldr	r1, [r3, #4]
 801a25c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a260:	4671      	mov	r1, lr
 801a262:	a80c      	add	r0, sp, #48	; 0x30
 801a264:	f7ff fc5e 	bl	8019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a268:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a26c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a270:	f04f 0c08 	mov.w	ip, #8
 801a274:	9b04      	ldr	r3, [sp, #16]
 801a276:	9a02      	ldr	r2, [sp, #8]
 801a278:	fb10 f001 	smulbb	r0, r0, r1
 801a27c:	fb02 8803 	mla	r8, r2, r3, r8
 801a280:	eba0 0108 	sub.w	r1, r0, r8
 801a284:	fb90 f0fc 	sdiv	r0, r0, ip
 801a288:	4288      	cmp	r0, r1
 801a28a:	dc20      	bgt.n	801a2ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a28c:	4551      	cmp	r1, sl
 801a28e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a292:	da03      	bge.n	801a29c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801a294:	b1d9      	cbz	r1, 801a2ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a296:	468a      	mov	sl, r1
 801a298:	464f      	mov	r7, r9
 801a29a:	4635      	mov	r5, r6
 801a29c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a2a0:	f119 0f02 	cmn.w	r9, #2
 801a2a4:	d1c6      	bne.n	801a234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a2a6:	4616      	mov	r6, r2
 801a2a8:	3201      	adds	r2, #1
 801a2aa:	f1a4 0408 	sub.w	r4, r4, #8
 801a2ae:	d1b7      	bne.n	801a220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801a2b0:	9b01      	ldr	r3, [sp, #4]
 801a2b2:	b2ac      	uxth	r4, r5
 801a2b4:	00ed      	lsls	r5, r5, #3
 801a2b6:	1958      	adds	r0, r3, r5
 801a2b8:	1c7b      	adds	r3, r7, #1
 801a2ba:	d10b      	bne.n	801a2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801a2bc:	4601      	mov	r1, r0
 801a2be:	9803      	ldr	r0, [sp, #12]
 801a2c0:	f7ff fc30 	bl	8019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a2c4:	4621      	mov	r1, r4
 801a2c6:	9801      	ldr	r0, [sp, #4]
 801a2c8:	f7ff fcd6 	bl	8019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a2cc:	e4fe      	b.n	8019ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a2ce:	464f      	mov	r7, r9
 801a2d0:	4635      	mov	r5, r6
 801a2d2:	e7ed      	b.n	801a2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a2d4:	9b01      	ldr	r3, [sp, #4]
 801a2d6:	00ff      	lsls	r7, r7, #3
 801a2d8:	445d      	add	r5, fp
 801a2da:	19d9      	adds	r1, r3, r7
 801a2dc:	445f      	add	r7, fp
 801a2de:	f7ff fc21 	bl	8019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a2e2:	9b03      	ldr	r3, [sp, #12]
 801a2e4:	cb03      	ldmia	r3!, {r0, r1}
 801a2e6:	9b03      	ldr	r3, [sp, #12]
 801a2e8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801a2ec:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801a2f0:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801a2f4:	6869      	ldr	r1, [r5, #4]
 801a2f6:	c303      	stmia	r3!, {r0, r1}
 801a2f8:	e7e4      	b.n	801a2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a2fa:	bf00      	nop

0801a2fc <_ZN8touchgfx11Application10invalidateEv>:
 801a2fc:	4b09      	ldr	r3, [pc, #36]	; (801a324 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a2fe:	b082      	sub	sp, #8
 801a300:	2100      	movs	r1, #0
 801a302:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a306:	4b08      	ldr	r3, [pc, #32]	; (801a328 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a308:	9100      	str	r1, [sp, #0]
 801a30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a30e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a312:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a316:	ab02      	add	r3, sp, #8
 801a318:	e913 0006 	ldmdb	r3, {r1, r2}
 801a31c:	b002      	add	sp, #8
 801a31e:	f7ff bcbf 	b.w	8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a322:	bf00      	nop
 801a324:	2003bcfc 	.word	0x2003bcfc
 801a328:	2003bcfe 	.word	0x2003bcfe

0801a32c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a330:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a334:	b09b      	sub	sp, #108	; 0x6c
 801a336:	4604      	mov	r4, r0
 801a338:	4630      	mov	r0, r6
 801a33a:	f7fa ff16 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a33e:	4605      	mov	r5, r0
 801a340:	b940      	cbnz	r0, 801a354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801a342:	4620      	mov	r0, r4
 801a344:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a348:	f7ff fcaa 	bl	8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a34c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a350:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a354:	4bc8      	ldr	r3, [pc, #800]	; (801a678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d03e      	beq.n	801a3da <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a35c:	4dc7      	ldr	r5, [pc, #796]	; (801a67c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a35e:	4628      	mov	r0, r5
 801a360:	f7fa ff03 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a364:	4606      	mov	r6, r0
 801a366:	2800      	cmp	r0, #0
 801a368:	d137      	bne.n	801a3da <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a36a:	4628      	mov	r0, r5
 801a36c:	f7ff fa0c 	bl	8019788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a370:	6829      	ldr	r1, [r5, #0]
 801a372:	686a      	ldr	r2, [r5, #4]
 801a374:	4620      	mov	r0, r4
 801a376:	f7ff fc93 	bl	8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a37a:	802e      	strh	r6, [r5, #0]
 801a37c:	806e      	strh	r6, [r5, #2]
 801a37e:	80ae      	strh	r6, [r5, #4]
 801a380:	80ee      	strh	r6, [r5, #6]
 801a382:	ae09      	add	r6, sp, #36	; 0x24
 801a384:	4630      	mov	r0, r6
 801a386:	f7ff fc24 	bl	8019bd2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a38a:	4abd      	ldr	r2, [pc, #756]	; (801a680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a38c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a390:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801a394:	8815      	ldrh	r5, [r2, #0]
 801a396:	9202      	str	r2, [sp, #8]
 801a398:	462b      	mov	r3, r5
 801a39a:	429f      	cmp	r7, r3
 801a39c:	d924      	bls.n	801a3e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801a39e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801a3a2:	2907      	cmp	r1, #7
 801a3a4:	d816      	bhi.n	801a3d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801a3a6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a3aa:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a3ae:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801a3b2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a3b6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a3ba:	1c4a      	adds	r2, r1, #1
 801a3bc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801a3c0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801a3c4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801a3c8:	f8a2 9002 	strh.w	r9, [r2, #2]
 801a3cc:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a3d0:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a3d4:	3301      	adds	r3, #1
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	e7df      	b.n	801a39a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801a3da:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d1cf      	bne.n	801a382 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801a3e2:	b01b      	add	sp, #108	; 0x6c
 801a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3e8:	462f      	mov	r7, r5
 801a3ea:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a3ee:	42bb      	cmp	r3, r7
 801a3f0:	d90b      	bls.n	801a40a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801a3f2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801a3f6:	3701      	adds	r7, #1
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a3fe:	b2bf      	uxth	r7, r7
 801a400:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a404:	f7ff fc4c 	bl	8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a408:	e7ef      	b.n	801a3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801a40a:	4a9e      	ldr	r2, [pc, #632]	; (801a684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a40c:	6813      	ldr	r3, [r2, #0]
 801a40e:	4690      	mov	r8, r2
 801a410:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a414:	2b01      	cmp	r3, #1
 801a416:	f040 80e4 	bne.w	801a5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801a41a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a41e:	4629      	mov	r1, r5
 801a420:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a424:	2500      	movs	r5, #0
 801a426:	33aa      	adds	r3, #170	; 0xaa
 801a428:	428f      	cmp	r7, r1
 801a42a:	f103 0308 	add.w	r3, r3, #8
 801a42e:	dd0a      	ble.n	801a446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801a430:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a434:	3101      	adds	r1, #1
 801a436:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801a43a:	4402      	add	r2, r0
 801a43c:	b212      	sxth	r2, r2
 801a43e:	4295      	cmp	r5, r2
 801a440:	bfb8      	it	lt
 801a442:	4615      	movlt	r5, r2
 801a444:	e7f0      	b.n	801a428 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801a446:	4b90      	ldr	r3, [pc, #576]	; (801a688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a448:	f8df b238 	ldr.w	fp, [pc, #568]	; 801a684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	46d8      	mov	r8, fp
 801a450:	2b0f      	cmp	r3, #15
 801a452:	bf8c      	ite	hi
 801a454:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801a458:	f04f 0a01 	movls.w	sl, #1
 801a45c:	2300      	movs	r3, #0
 801a45e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a462:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801a466:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801a46a:	4438      	add	r0, r7
 801a46c:	b207      	sxth	r7, r0
 801a46e:	f8db 0000 	ldr.w	r0, [fp]
 801a472:	42bd      	cmp	r5, r7
 801a474:	6803      	ldr	r3, [r0, #0]
 801a476:	f340 8084 	ble.w	801a582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a47a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a47e:	4798      	blx	r3
 801a480:	eb07 030a 	add.w	r3, r7, sl
 801a484:	4298      	cmp	r0, r3
 801a486:	da07      	bge.n	801a498 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a488:	4285      	cmp	r5, r0
 801a48a:	dd05      	ble.n	801a498 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a48c:	4287      	cmp	r7, r0
 801a48e:	dd6d      	ble.n	801a56c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a490:	2f00      	cmp	r7, #0
 801a492:	dd6b      	ble.n	801a56c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a494:	4628      	mov	r0, r5
 801a496:	e004      	b.n	801a4a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801a498:	4287      	cmp	r7, r0
 801a49a:	dcfb      	bgt.n	801a494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801a49c:	42a8      	cmp	r0, r5
 801a49e:	bfa8      	it	ge
 801a4a0:	4628      	movge	r0, r5
 801a4a2:	4b7a      	ldr	r3, [pc, #488]	; (801a68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801a4a4:	1bc0      	subs	r0, r0, r7
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a4ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a4b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a4b8:	9b02      	ldr	r3, [sp, #8]
 801a4ba:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a4be:	881f      	ldrh	r7, [r3, #0]
 801a4c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a4c4:	42bb      	cmp	r3, r7
 801a4c6:	d9cc      	bls.n	801a462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801a4c8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a4cc:	ab07      	add	r3, sp, #28
 801a4ce:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a4d2:	6851      	ldr	r1, [r2, #4]
 801a4d4:	c303      	stmia	r3!, {r0, r1}
 801a4d6:	a905      	add	r1, sp, #20
 801a4d8:	a807      	add	r0, sp, #28
 801a4da:	f7ff fa8b 	bl	80199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a4de:	2800      	cmp	r0, #0
 801a4e0:	d04c      	beq.n	801a57c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a4e2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a4e6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a4ea:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801a4ee:	4686      	mov	lr, r0
 801a4f0:	4290      	cmp	r0, r2
 801a4f2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a4f6:	4448      	add	r0, r9
 801a4f8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801a4fc:	bfb8      	it	lt
 801a4fe:	4696      	movlt	lr, r2
 801a500:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a504:	444a      	add	r2, r9
 801a506:	b280      	uxth	r0, r0
 801a508:	4299      	cmp	r1, r3
 801a50a:	468c      	mov	ip, r1
 801a50c:	b292      	uxth	r2, r2
 801a50e:	9303      	str	r3, [sp, #12]
 801a510:	bfb8      	it	lt
 801a512:	469c      	movlt	ip, r3
 801a514:	b203      	sxth	r3, r0
 801a516:	fa0f f982 	sxth.w	r9, r2
 801a51a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a51e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a522:	454b      	cmp	r3, r9
 801a524:	bfb8      	it	lt
 801a526:	4602      	movlt	r2, r0
 801a528:	9b03      	ldr	r3, [sp, #12]
 801a52a:	eba2 020e 	sub.w	r2, r2, lr
 801a52e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a532:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a536:	4411      	add	r1, r2
 801a538:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a53c:	4413      	add	r3, r2
 801a53e:	b289      	uxth	r1, r1
 801a540:	b29b      	uxth	r3, r3
 801a542:	b208      	sxth	r0, r1
 801a544:	b21a      	sxth	r2, r3
 801a546:	4290      	cmp	r0, r2
 801a548:	bfb8      	it	lt
 801a54a:	460b      	movlt	r3, r1
 801a54c:	eba3 030c 	sub.w	r3, r3, ip
 801a550:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a554:	a807      	add	r0, sp, #28
 801a556:	f7fa fe08 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a55a:	b920      	cbnz	r0, 801a566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801a55c:	6823      	ldr	r3, [r4, #0]
 801a55e:	a907      	add	r1, sp, #28
 801a560:	4620      	mov	r0, r4
 801a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a564:	4798      	blx	r3
 801a566:	3701      	adds	r7, #1
 801a568:	b2bf      	uxth	r7, r7
 801a56a:	e7a9      	b.n	801a4c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801a56c:	f8d8 0000 	ldr.w	r0, [r8]
 801a570:	2101      	movs	r1, #1
 801a572:	6803      	ldr	r3, [r0, #0]
 801a574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a578:	4798      	blx	r3
 801a57a:	e772      	b.n	801a462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801a57c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801a580:	e7e8      	b.n	801a554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a584:	4798      	blx	r3
 801a586:	4b42      	ldr	r3, [pc, #264]	; (801a690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f43f af29 	beq.w	801a3e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801a590:	2300      	movs	r3, #0
 801a592:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801a596:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a59a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801a59e:	9b02      	ldr	r3, [sp, #8]
 801a5a0:	881b      	ldrh	r3, [r3, #0]
 801a5a2:	429d      	cmp	r5, r3
 801a5a4:	f67f af1d 	bls.w	801a3e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801a5a8:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801a5ac:	2907      	cmp	r1, #7
 801a5ae:	d815      	bhi.n	801a5dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801a5b0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801a5b4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801a5b8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801a5bc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801a5c0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801a5c4:	1c4a      	adds	r2, r1, #1
 801a5c6:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801a5ca:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801a5ce:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801a5d2:	f8a2 e002 	strh.w	lr, [r2, #2]
 801a5d6:	f8a2 c004 	strh.w	ip, [r2, #4]
 801a5da:	80d7      	strh	r7, [r2, #6]
 801a5dc:	3301      	adds	r3, #1
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	e7df      	b.n	801a5a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801a5e2:	2b02      	cmp	r3, #2
 801a5e4:	f040 8135 	bne.w	801a852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801a5e8:	4b2a      	ldr	r3, [pc, #168]	; (801a694 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801a5ea:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801a5ee:	781b      	ldrb	r3, [r3, #0]
 801a5f0:	2b01      	cmp	r3, #1
 801a5f2:	f000 809c 	beq.w	801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801a5f6:	9b02      	ldr	r3, [sp, #8]
 801a5f8:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801a5fc:	f8b3 b000 	ldrh.w	fp, [r3]
 801a600:	f10b 0b01 	add.w	fp, fp, #1
 801a604:	fa1f fb8b 	uxth.w	fp, fp
 801a608:	2a00      	cmp	r2, #0
 801a60a:	d0bc      	beq.n	801a586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a60c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801a610:	4659      	mov	r1, fp
 801a612:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801a616:	f04f 0800 	mov.w	r8, #0
 801a61a:	441d      	add	r5, r3
 801a61c:	b22d      	sxth	r5, r5
 801a61e:	b28b      	uxth	r3, r1
 801a620:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801a624:	429a      	cmp	r2, r3
 801a626:	f240 80c0 	bls.w	801a7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801a62a:	4427      	add	r7, r4
 801a62c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801a630:	4608      	mov	r0, r1
 801a632:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801a636:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801a63a:	4563      	cmp	r3, ip
 801a63c:	f340 80a2 	ble.w	801a784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801a640:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801a644:	4465      	add	r5, ip
 801a646:	b22d      	sxth	r5, r5
 801a648:	429d      	cmp	r5, r3
 801a64a:	bfa8      	it	ge
 801a64c:	461d      	movge	r5, r3
 801a64e:	3101      	adds	r1, #1
 801a650:	4680      	mov	r8, r0
 801a652:	e7e4      	b.n	801a61e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801a654:	d10b      	bne.n	801a66e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801a656:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801a65a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801a65e:	458c      	cmp	ip, r1
 801a660:	bfb4      	ite	lt
 801a662:	469c      	movlt	ip, r3
 801a664:	46bc      	movge	ip, r7
 801a666:	4572      	cmp	r2, lr
 801a668:	bfb8      	it	lt
 801a66a:	4672      	movlt	r2, lr
 801a66c:	e087      	b.n	801a77e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801a66e:	428a      	cmp	r2, r1
 801a670:	46bc      	mov	ip, r7
 801a672:	bfb8      	it	lt
 801a674:	460a      	movlt	r2, r1
 801a676:	e082      	b.n	801a77e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801a678:	2003bd48 	.word	0x2003bd48
 801a67c:	2003bd54 	.word	0x2003bd54
 801a680:	20000034 	.word	0x20000034
 801a684:	2003bd08 	.word	0x2003bd08
 801a688:	2003bcfe 	.word	0x2003bcfe
 801a68c:	2003bcfc 	.word	0x2003bcfc
 801a690:	2003bd06 	.word	0x2003bd06
 801a694:	2003bd00 	.word	0x2003bd00
 801a698:	1961      	adds	r1, r4, r5
 801a69a:	ab07      	add	r3, sp, #28
 801a69c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801a6a0:	6849      	ldr	r1, [r1, #4]
 801a6a2:	c303      	stmia	r3!, {r0, r1}
 801a6a4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a6a8:	a807      	add	r0, sp, #28
 801a6aa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a6ae:	2b13      	cmp	r3, #19
 801a6b0:	440b      	add	r3, r1
 801a6b2:	bfd8      	it	le
 801a6b4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a6b8:	1a9b      	subs	r3, r3, r2
 801a6ba:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a6be:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a6c2:	f7ff f87b 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6c6:	a807      	add	r0, sp, #28
 801a6c8:	f7fa fd4f 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a6cc:	bb78      	cbnz	r0, 801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801a6ce:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a6d2:	4425      	add	r5, r4
 801a6d4:	f8d8 0000 	ldr.w	r0, [r8]
 801a6d8:	f1bc 0f14 	cmp.w	ip, #20
 801a6dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a6e0:	f8d0 e000 	ldr.w	lr, [r0]
 801a6e4:	bfa8      	it	ge
 801a6e6:	f04f 0c14 	movge.w	ip, #20
 801a6ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a6ee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a6f2:	fa1f fc8c 	uxth.w	ip, ip
 801a6f6:	f8cd c000 	str.w	ip, [sp]
 801a6fa:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801a6fe:	47d0      	blx	sl
 801a700:	4682      	mov	sl, r0
 801a702:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a706:	a807      	add	r0, sp, #28
 801a708:	f7ff f83e 	bl	8019788 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a70c:	6823      	ldr	r3, [r4, #0]
 801a70e:	4620      	mov	r0, r4
 801a710:	a907      	add	r1, sp, #28
 801a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a714:	4798      	blx	r3
 801a716:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801a71a:	eba0 000a 	sub.w	r0, r0, sl
 801a71e:	b200      	sxth	r0, r0
 801a720:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801a724:	b918      	cbnz	r0, 801a72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801a726:	b2b9      	uxth	r1, r7
 801a728:	4648      	mov	r0, r9
 801a72a:	f7ff faa5 	bl	8019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a72e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801a732:	f1bb 0f00 	cmp.w	fp, #0
 801a736:	f43f af26 	beq.w	801a586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a73a:	9b02      	ldr	r3, [sp, #8]
 801a73c:	2700      	movs	r7, #0
 801a73e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801a742:	881b      	ldrh	r3, [r3, #0]
 801a744:	3301      	adds	r3, #1
 801a746:	b29b      	uxth	r3, r3
 801a748:	b299      	uxth	r1, r3
 801a74a:	00fd      	lsls	r5, r7, #3
 801a74c:	458b      	cmp	fp, r1
 801a74e:	d9a3      	bls.n	801a698 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801a750:	4425      	add	r5, r4
 801a752:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801a756:	469c      	mov	ip, r3
 801a758:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801a75c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801a760:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801a764:	4408      	add	r0, r1
 801a766:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801a76a:	4471      	add	r1, lr
 801a76c:	b200      	sxth	r0, r0
 801a76e:	b209      	sxth	r1, r1
 801a770:	4288      	cmp	r0, r1
 801a772:	f6bf af6f 	bge.w	801a654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801a776:	4586      	cmp	lr, r0
 801a778:	4672      	mov	r2, lr
 801a77a:	bfb8      	it	lt
 801a77c:	4602      	movlt	r2, r0
 801a77e:	3301      	adds	r3, #1
 801a780:	4667      	mov	r7, ip
 801a782:	e7e1      	b.n	801a748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801a784:	d10c      	bne.n	801a7a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801a786:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801a78a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801a78e:	4287      	cmp	r7, r0
 801a790:	bfb4      	ite	lt
 801a792:	4608      	movlt	r0, r1
 801a794:	4640      	movge	r0, r8
 801a796:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801a79a:	443b      	add	r3, r7
 801a79c:	b21b      	sxth	r3, r3
 801a79e:	e753      	b.n	801a648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801a7a0:	4565      	cmp	r5, ip
 801a7a2:	4640      	mov	r0, r8
 801a7a4:	bfa8      	it	ge
 801a7a6:	4665      	movge	r5, ip
 801a7a8:	e751      	b.n	801a64e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801a7aa:	eb09 0007 	add.w	r0, r9, r7
 801a7ae:	4427      	add	r7, r4
 801a7b0:	9203      	str	r2, [sp, #12]
 801a7b2:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801a7b6:	f1ba 0f13 	cmp.w	sl, #19
 801a7ba:	bfde      	ittt	le
 801a7bc:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801a7c0:	4455      	addle	r5, sl
 801a7c2:	b22d      	sxthle	r5, r5
 801a7c4:	f7fa fcd1 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7c8:	9a03      	ldr	r2, [sp, #12]
 801a7ca:	2800      	cmp	r0, #0
 801a7cc:	f47f af1c 	bne.w	801a608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801a7d0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801a7d4:	fa1f fa8a 	uxth.w	sl, sl
 801a7d8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a7dc:	1aad      	subs	r5, r5, r2
 801a7de:	4829      	ldr	r0, [pc, #164]	; (801a884 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801a7e0:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801a7e4:	2d14      	cmp	r5, #20
 801a7e6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801a7ea:	6800      	ldr	r0, [r0, #0]
 801a7ec:	bfa8      	it	ge
 801a7ee:	2514      	movge	r5, #20
 801a7f0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a7f4:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a7f8:	b289      	uxth	r1, r1
 801a7fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a7fe:	b2ad      	uxth	r5, r5
 801a800:	f8d0 c000 	ldr.w	ip, [r0]
 801a804:	b292      	uxth	r2, r2
 801a806:	4555      	cmp	r5, sl
 801a808:	bf94      	ite	ls
 801a80a:	9500      	strls	r5, [sp, #0]
 801a80c:	f8cd a000 	strhi.w	sl, [sp]
 801a810:	b29b      	uxth	r3, r3
 801a812:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801a816:	47a8      	blx	r5
 801a818:	6823      	ldr	r3, [r4, #0]
 801a81a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a81e:	a907      	add	r1, sp, #28
 801a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a822:	4620      	mov	r0, r4
 801a824:	4798      	blx	r3
 801a826:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801a82a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801a82e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801a832:	1a5b      	subs	r3, r3, r1
 801a834:	440a      	add	r2, r1
 801a836:	b21b      	sxth	r3, r3
 801a838:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801a83c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801a840:	2b00      	cmp	r3, #0
 801a842:	f47f aed8 	bne.w	801a5f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801a846:	fa1f f188 	uxth.w	r1, r8
 801a84a:	4648      	mov	r0, r9
 801a84c:	f7ff fa14 	bl	8019c78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a850:	e6d1      	b.n	801a5f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801a852:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a856:	42ab      	cmp	r3, r5
 801a858:	f67f ae95 	bls.w	801a586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a85c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a860:	ab07      	add	r3, sp, #28
 801a862:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a866:	6851      	ldr	r1, [r2, #4]
 801a868:	c303      	stmia	r3!, {r0, r1}
 801a86a:	a807      	add	r0, sp, #28
 801a86c:	f7fa fc7d 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a870:	b920      	cbnz	r0, 801a87c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801a872:	6823      	ldr	r3, [r4, #0]
 801a874:	a907      	add	r1, sp, #28
 801a876:	4620      	mov	r0, r4
 801a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a87a:	4798      	blx	r3
 801a87c:	3501      	adds	r5, #1
 801a87e:	b2ad      	uxth	r5, r5
 801a880:	e7e7      	b.n	801a852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801a882:	bf00      	nop
 801a884:	2003bd08 	.word	0x2003bd08

0801a888 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a888:	4b03      	ldr	r3, [pc, #12]	; (801a898 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a88a:	2200      	movs	r2, #0
 801a88c:	801a      	strh	r2, [r3, #0]
 801a88e:	805a      	strh	r2, [r3, #2]
 801a890:	809a      	strh	r2, [r3, #4]
 801a892:	80da      	strh	r2, [r3, #6]
 801a894:	4770      	bx	lr
 801a896:	bf00      	nop
 801a898:	2003bd54 	.word	0x2003bd54

0801a89c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a0:	b09d      	sub	sp, #116	; 0x74
 801a8a2:	4606      	mov	r6, r0
 801a8a4:	4614      	mov	r4, r2
 801a8a6:	468a      	mov	sl, r1
 801a8a8:	a803      	add	r0, sp, #12
 801a8aa:	461d      	mov	r5, r3
 801a8ac:	f000 fe2e 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 801a8b0:	6833      	ldr	r3, [r6, #0]
 801a8b2:	4630      	mov	r0, r6
 801a8b4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8ba:	4798      	blx	r3
 801a8bc:	6833      	ldr	r3, [r6, #0]
 801a8be:	4607      	mov	r7, r0
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8c4:	4798      	blx	r3
 801a8c6:	462a      	mov	r2, r5
 801a8c8:	2500      	movs	r5, #0
 801a8ca:	4621      	mov	r1, r4
 801a8cc:	9000      	str	r0, [sp, #0]
 801a8ce:	463b      	mov	r3, r7
 801a8d0:	462c      	mov	r4, r5
 801a8d2:	46a9      	mov	r9, r5
 801a8d4:	46a8      	mov	r8, r5
 801a8d6:	a803      	add	r0, sp, #12
 801a8d8:	f000 fe73 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	9302      	str	r3, [sp, #8]
 801a8e0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a8e4:	429c      	cmp	r4, r3
 801a8e6:	d002      	beq.n	801a8ee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a8e8:	455c      	cmp	r4, fp
 801a8ea:	bf18      	it	ne
 801a8ec:	4625      	movne	r5, r4
 801a8ee:	ab02      	add	r3, sp, #8
 801a8f0:	4632      	mov	r2, r6
 801a8f2:	4651      	mov	r1, sl
 801a8f4:	a803      	add	r0, sp, #12
 801a8f6:	f001 f969 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	b108      	cbz	r0, 801a902 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a8fe:	280a      	cmp	r0, #10
 801a900:	d10a      	bne.n	801a918 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a902:	45c1      	cmp	r9, r8
 801a904:	bf38      	it	cc
 801a906:	46c1      	movcc	r9, r8
 801a908:	f04f 0800 	mov.w	r8, #0
 801a90c:	2c00      	cmp	r4, #0
 801a90e:	d1e5      	bne.n	801a8dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a910:	4648      	mov	r0, r9
 801a912:	b01d      	add	sp, #116	; 0x74
 801a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a918:	9a02      	ldr	r2, [sp, #8]
 801a91a:	2a00      	cmp	r2, #0
 801a91c:	d0de      	beq.n	801a8dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a91e:	7b57      	ldrb	r7, [r2, #13]
 801a920:	4629      	mov	r1, r5
 801a922:	6833      	ldr	r3, [r6, #0]
 801a924:	007f      	lsls	r7, r7, #1
 801a926:	8894      	ldrh	r4, [r2, #4]
 801a928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a92a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a92e:	7a97      	ldrb	r7, [r2, #10]
 801a930:	4307      	orrs	r7, r0
 801a932:	4630      	mov	r0, r6
 801a934:	4798      	blx	r3
 801a936:	4438      	add	r0, r7
 801a938:	4480      	add	r8, r0
 801a93a:	fa1f f888 	uxth.w	r8, r8
 801a93e:	e7e5      	b.n	801a90c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a940 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a940:	b508      	push	{r3, lr}
 801a942:	6803      	ldr	r3, [r0, #0]
 801a944:	68db      	ldr	r3, [r3, #12]
 801a946:	4798      	blx	r3
 801a948:	b128      	cbz	r0, 801a956 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a94a:	7b43      	ldrb	r3, [r0, #13]
 801a94c:	7a80      	ldrb	r0, [r0, #10]
 801a94e:	005b      	lsls	r3, r3, #1
 801a950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a954:	4318      	orrs	r0, r3
 801a956:	bd08      	pop	{r3, pc}

0801a958 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a958:	b40e      	push	{r1, r2, r3}
 801a95a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a95c:	b09e      	sub	sp, #120	; 0x78
 801a95e:	4605      	mov	r5, r0
 801a960:	ab23      	add	r3, sp, #140	; 0x8c
 801a962:	a805      	add	r0, sp, #20
 801a964:	f853 4b04 	ldr.w	r4, [r3], #4
 801a968:	9303      	str	r3, [sp, #12]
 801a96a:	f000 fdcf 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 801a96e:	682b      	ldr	r3, [r5, #0]
 801a970:	4628      	mov	r0, r5
 801a972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a974:	4798      	blx	r3
 801a976:	682b      	ldr	r3, [r5, #0]
 801a978:	4606      	mov	r6, r0
 801a97a:	4628      	mov	r0, r5
 801a97c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a97e:	4798      	blx	r3
 801a980:	4633      	mov	r3, r6
 801a982:	4621      	mov	r1, r4
 801a984:	ae1e      	add	r6, sp, #120	; 0x78
 801a986:	2400      	movs	r4, #0
 801a988:	9000      	str	r0, [sp, #0]
 801a98a:	9a03      	ldr	r2, [sp, #12]
 801a98c:	a805      	add	r0, sp, #20
 801a98e:	f000 fe18 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a992:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a996:	462a      	mov	r2, r5
 801a998:	4633      	mov	r3, r6
 801a99a:	4621      	mov	r1, r4
 801a99c:	a805      	add	r0, sp, #20
 801a99e:	f001 f915 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a9a2:	b300      	cbz	r0, 801a9e6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a9a4:	280a      	cmp	r0, #10
 801a9a6:	d01a      	beq.n	801a9de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a9a8:	9f04      	ldr	r7, [sp, #16]
 801a9aa:	b1c7      	cbz	r7, 801a9de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a9ac:	7b78      	ldrb	r0, [r7, #13]
 801a9ae:	7a3b      	ldrb	r3, [r7, #8]
 801a9b0:	00c1      	lsls	r1, r0, #3
 801a9b2:	88aa      	ldrh	r2, [r5, #4]
 801a9b4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a9b8:	4319      	orrs	r1, r3
 801a9ba:	0643      	lsls	r3, r0, #25
 801a9bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a9c0:	bf48      	it	mi
 801a9c2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a9c6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a9ca:	bf48      	it	mi
 801a9cc:	b219      	sxthmi	r1, r3
 801a9ce:	79fb      	ldrb	r3, [r7, #7]
 801a9d0:	4303      	orrs	r3, r0
 801a9d2:	4413      	add	r3, r2
 801a9d4:	1a5b      	subs	r3, r3, r1
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	42a3      	cmp	r3, r4
 801a9da:	bfc8      	it	gt
 801a9dc:	b21c      	sxthgt	r4, r3
 801a9de:	4633      	mov	r3, r6
 801a9e0:	462a      	mov	r2, r5
 801a9e2:	2100      	movs	r1, #0
 801a9e4:	e7da      	b.n	801a99c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a9e6:	b2a0      	uxth	r0, r4
 801a9e8:	b01e      	add	sp, #120	; 0x78
 801a9ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a9ee:	b003      	add	sp, #12
 801a9f0:	4770      	bx	lr

0801a9f2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a9f2:	b40e      	push	{r1, r2, r3}
 801a9f4:	b570      	push	{r4, r5, r6, lr}
 801a9f6:	b09d      	sub	sp, #116	; 0x74
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	ab21      	add	r3, sp, #132	; 0x84
 801a9fc:	a803      	add	r0, sp, #12
 801a9fe:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa02:	9302      	str	r3, [sp, #8]
 801aa04:	f000 fd82 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 801aa08:	6823      	ldr	r3, [r4, #0]
 801aa0a:	4620      	mov	r0, r4
 801aa0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa0e:	4798      	blx	r3
 801aa10:	6823      	ldr	r3, [r4, #0]
 801aa12:	4606      	mov	r6, r0
 801aa14:	4620      	mov	r0, r4
 801aa16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa18:	2401      	movs	r4, #1
 801aa1a:	4798      	blx	r3
 801aa1c:	4633      	mov	r3, r6
 801aa1e:	9000      	str	r0, [sp, #0]
 801aa20:	4629      	mov	r1, r5
 801aa22:	9a02      	ldr	r2, [sp, #8]
 801aa24:	a803      	add	r0, sp, #12
 801aa26:	f000 fdcc 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa2a:	a803      	add	r0, sp, #12
 801aa2c:	f001 f99a 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa30:	b2a3      	uxth	r3, r4
 801aa32:	b138      	cbz	r0, 801aa44 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801aa34:	280a      	cmp	r0, #10
 801aa36:	a803      	add	r0, sp, #12
 801aa38:	bf04      	itt	eq
 801aa3a:	3301      	addeq	r3, #1
 801aa3c:	b21c      	sxtheq	r4, r3
 801aa3e:	f001 f991 	bl	801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa42:	e7f5      	b.n	801aa30 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801aa44:	4618      	mov	r0, r3
 801aa46:	b01d      	add	sp, #116	; 0x74
 801aa48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa4c:	b003      	add	sp, #12
 801aa4e:	4770      	bx	lr

0801aa50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801aa50:	b40e      	push	{r1, r2, r3}
 801aa52:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa54:	b09e      	sub	sp, #120	; 0x78
 801aa56:	4604      	mov	r4, r0
 801aa58:	ab23      	add	r3, sp, #140	; 0x8c
 801aa5a:	a805      	add	r0, sp, #20
 801aa5c:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa60:	9303      	str	r3, [sp, #12]
 801aa62:	f000 fd53 	bl	801b50c <_ZN8touchgfx12TextProviderC1Ev>
 801aa66:	6823      	ldr	r3, [r4, #0]
 801aa68:	4620      	mov	r0, r4
 801aa6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa6c:	4798      	blx	r3
 801aa6e:	6823      	ldr	r3, [r4, #0]
 801aa70:	4606      	mov	r6, r0
 801aa72:	4620      	mov	r0, r4
 801aa74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa76:	4798      	blx	r3
 801aa78:	4633      	mov	r3, r6
 801aa7a:	4629      	mov	r1, r5
 801aa7c:	9000      	str	r0, [sp, #0]
 801aa7e:	9a03      	ldr	r2, [sp, #12]
 801aa80:	a805      	add	r0, sp, #20
 801aa82:	f000 fd9e 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aa86:	ad1e      	add	r5, sp, #120	; 0x78
 801aa88:	2100      	movs	r1, #0
 801aa8a:	26ff      	movs	r6, #255	; 0xff
 801aa8c:	4622      	mov	r2, r4
 801aa8e:	a805      	add	r0, sp, #20
 801aa90:	f845 1d68 	str.w	r1, [r5, #-104]!
 801aa94:	462b      	mov	r3, r5
 801aa96:	f001 f899 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aa9a:	b1d8      	cbz	r0, 801aad4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801aa9c:	280a      	cmp	r0, #10
 801aa9e:	d012      	beq.n	801aac6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801aaa0:	9804      	ldr	r0, [sp, #16]
 801aaa2:	b180      	cbz	r0, 801aac6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801aaa4:	7b47      	ldrb	r7, [r0, #13]
 801aaa6:	7922      	ldrb	r2, [r4, #4]
 801aaa8:	00fb      	lsls	r3, r7, #3
 801aaaa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801aaae:	7a03      	ldrb	r3, [r0, #8]
 801aab0:	430b      	orrs	r3, r1
 801aab2:	0679      	lsls	r1, r7, #25
 801aab4:	bf44      	itt	mi
 801aab6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aaba:	b21b      	sxthmi	r3, r3
 801aabc:	1ad3      	subs	r3, r2, r3
 801aabe:	b2db      	uxtb	r3, r3
 801aac0:	429e      	cmp	r6, r3
 801aac2:	bf28      	it	cs
 801aac4:	461e      	movcs	r6, r3
 801aac6:	462b      	mov	r3, r5
 801aac8:	4622      	mov	r2, r4
 801aaca:	2100      	movs	r1, #0
 801aacc:	a805      	add	r0, sp, #20
 801aace:	f001 f87d 	bl	801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aad2:	e7e2      	b.n	801aa9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801aad4:	4630      	mov	r0, r6
 801aad6:	b01e      	add	sp, #120	; 0x78
 801aad8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aadc:	b003      	add	sp, #12
 801aade:	4770      	bx	lr

0801aae0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801aae0:	b513      	push	{r0, r1, r4, lr}
 801aae2:	6803      	ldr	r3, [r0, #0]
 801aae4:	2400      	movs	r4, #0
 801aae6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801aaea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801aaee:	f8ad 1004 	strh.w	r1, [sp, #4]
 801aaf2:	4669      	mov	r1, sp
 801aaf4:	691b      	ldr	r3, [r3, #16]
 801aaf6:	9400      	str	r4, [sp, #0]
 801aaf8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801aafc:	4798      	blx	r3
 801aafe:	b002      	add	sp, #8
 801ab00:	bd10      	pop	{r4, pc}

0801ab02 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ab02:	b538      	push	{r3, r4, r5, lr}
 801ab04:	680b      	ldr	r3, [r1, #0]
 801ab06:	460c      	mov	r4, r1
 801ab08:	4605      	mov	r5, r0
 801ab0a:	68db      	ldr	r3, [r3, #12]
 801ab0c:	4798      	blx	r3
 801ab0e:	6823      	ldr	r3, [r4, #0]
 801ab10:	4620      	mov	r0, r4
 801ab12:	4629      	mov	r1, r5
 801ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab16:	4798      	blx	r3
 801ab18:	4628      	mov	r0, r5
 801ab1a:	bd38      	pop	{r3, r4, r5, pc}

0801ab1c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ab1c:	b410      	push	{r4}
 801ab1e:	880a      	ldrh	r2, [r1, #0]
 801ab20:	8884      	ldrh	r4, [r0, #4]
 801ab22:	4422      	add	r2, r4
 801ab24:	800a      	strh	r2, [r1, #0]
 801ab26:	884a      	ldrh	r2, [r1, #2]
 801ab28:	88c4      	ldrh	r4, [r0, #6]
 801ab2a:	4422      	add	r2, r4
 801ab2c:	804a      	strh	r2, [r1, #2]
 801ab2e:	6940      	ldr	r0, [r0, #20]
 801ab30:	b120      	cbz	r0, 801ab3c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ab32:	6803      	ldr	r3, [r0, #0]
 801ab34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab3a:	4718      	bx	r3
 801ab3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab40:	4770      	bx	lr

0801ab42 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ab42:	b570      	push	{r4, r5, r6, lr}
 801ab44:	8882      	ldrh	r2, [r0, #4]
 801ab46:	460c      	mov	r4, r1
 801ab48:	880b      	ldrh	r3, [r1, #0]
 801ab4a:	4605      	mov	r5, r0
 801ab4c:	4413      	add	r3, r2
 801ab4e:	800b      	strh	r3, [r1, #0]
 801ab50:	884b      	ldrh	r3, [r1, #2]
 801ab52:	88c2      	ldrh	r2, [r0, #6]
 801ab54:	4413      	add	r3, r2
 801ab56:	804b      	strh	r3, [r1, #2]
 801ab58:	1d01      	adds	r1, r0, #4
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	f7fa fac2 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801ab60:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	dd0b      	ble.n	801ab80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	dd07      	ble.n	801ab80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab70:	6968      	ldr	r0, [r5, #20]
 801ab72:	b128      	cbz	r0, 801ab80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab74:	6803      	ldr	r3, [r0, #0]
 801ab76:	4621      	mov	r1, r4
 801ab78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab7e:	4718      	bx	r3
 801ab80:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ab84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ab84:	b570      	push	{r4, r5, r6, lr}
 801ab86:	8882      	ldrh	r2, [r0, #4]
 801ab88:	460c      	mov	r4, r1
 801ab8a:	880b      	ldrh	r3, [r1, #0]
 801ab8c:	4605      	mov	r5, r0
 801ab8e:	4413      	add	r3, r2
 801ab90:	800b      	strh	r3, [r1, #0]
 801ab92:	884b      	ldrh	r3, [r1, #2]
 801ab94:	88c2      	ldrh	r2, [r0, #6]
 801ab96:	4413      	add	r3, r2
 801ab98:	804b      	strh	r3, [r1, #2]
 801ab9a:	1d01      	adds	r1, r0, #4
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	f7fa faa1 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801aba2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	dd18      	ble.n	801abdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801abaa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	dd14      	ble.n	801abdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801abb2:	6968      	ldr	r0, [r5, #20]
 801abb4:	b128      	cbz	r0, 801abc2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801abb6:	6803      	ldr	r3, [r0, #0]
 801abb8:	4621      	mov	r1, r4
 801abba:	691b      	ldr	r3, [r3, #16]
 801abbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abc0:	4718      	bx	r3
 801abc2:	4b07      	ldr	r3, [pc, #28]	; (801abe0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	3304      	adds	r3, #4
 801abc8:	429d      	cmp	r5, r3
 801abca:	d107      	bne.n	801abdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801abcc:	f7fe fff0 	bl	8019bb0 <_ZN8touchgfx11Application11getInstanceEv>
 801abd0:	6821      	ldr	r1, [r4, #0]
 801abd2:	6862      	ldr	r2, [r4, #4]
 801abd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abd8:	f7ff b862 	b.w	8019ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801abdc:	bd70      	pop	{r4, r5, r6, pc}
 801abde:	bf00      	nop
 801abe0:	2003bd4c 	.word	0x2003bd4c

0801abe4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801abe4:	b570      	push	{r4, r5, r6, lr}
 801abe6:	4604      	mov	r4, r0
 801abe8:	4616      	mov	r6, r2
 801abea:	460d      	mov	r5, r1
 801abec:	b901      	cbnz	r1, 801abf0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801abee:	b192      	cbz	r2, 801ac16 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801abf0:	6823      	ldr	r3, [r4, #0]
 801abf2:	4620      	mov	r0, r4
 801abf4:	699b      	ldr	r3, [r3, #24]
 801abf6:	4798      	blx	r3
 801abf8:	88e2      	ldrh	r2, [r4, #6]
 801abfa:	88a1      	ldrh	r1, [r4, #4]
 801abfc:	4620      	mov	r0, r4
 801abfe:	4432      	add	r2, r6
 801ac00:	4429      	add	r1, r5
 801ac02:	b212      	sxth	r2, r2
 801ac04:	b209      	sxth	r1, r1
 801ac06:	f7f3 fbb5 	bl	800e374 <_ZN8touchgfx8Drawable5setXYEss>
 801ac0a:	6823      	ldr	r3, [r4, #0]
 801ac0c:	4620      	mov	r0, r4
 801ac0e:	699b      	ldr	r3, [r3, #24]
 801ac10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac14:	4718      	bx	r3
 801ac16:	bd70      	pop	{r4, r5, r6, pc}

0801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ac18:	b510      	push	{r4, lr}
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	4604      	mov	r4, r0
 801ac1e:	4608      	mov	r0, r1
 801ac20:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ac24:	8023      	strh	r3, [r4, #0]
 801ac26:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ac2a:	8063      	strh	r3, [r4, #2]
 801ac2c:	6803      	ldr	r3, [r0, #0]
 801ac2e:	80a1      	strh	r1, [r4, #4]
 801ac30:	4621      	mov	r1, r4
 801ac32:	80e2      	strh	r2, [r4, #6]
 801ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac36:	4798      	blx	r3
 801ac38:	4620      	mov	r0, r4
 801ac3a:	bd10      	pop	{r4, pc}

0801ac3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801ac3c:	b530      	push	{r4, r5, lr}
 801ac3e:	8083      	strh	r3, [r0, #4]
 801ac40:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ac44:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801ac48:	7183      	strb	r3, [r0, #6]
 801ac4a:	79c3      	ldrb	r3, [r0, #7]
 801ac4c:	6101      	str	r1, [r0, #16]
 801ac4e:	f365 0306 	bfi	r3, r5, #0, #7
 801ac52:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ac56:	8282      	strh	r2, [r0, #20]
 801ac58:	f365 13c7 	bfi	r3, r5, #7, #1
 801ac5c:	71c3      	strb	r3, [r0, #7]
 801ac5e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801ac62:	7203      	strb	r3, [r0, #8]
 801ac64:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801ac68:	7243      	strb	r3, [r0, #9]
 801ac6a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ac6e:	8143      	strh	r3, [r0, #10]
 801ac70:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801ac74:	8183      	strh	r3, [r0, #12]
 801ac76:	4b01      	ldr	r3, [pc, #4]	; (801ac7c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801ac78:	6003      	str	r3, [r0, #0]
 801ac7a:	bd30      	pop	{r4, r5, pc}
 801ac7c:	0802d33c 	.word	0x0802d33c

0801ac80 <_ZNK8touchgfx9ConstFont4findEt>:
 801ac80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac82:	6904      	ldr	r4, [r0, #16]
 801ac84:	b3bc      	cbz	r4, 801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ac86:	88a3      	ldrh	r3, [r4, #4]
 801ac88:	8a82      	ldrh	r2, [r0, #20]
 801ac8a:	1acb      	subs	r3, r1, r3
 801ac8c:	f102 32ff 	add.w	r2, r2, #4294967295
 801ac90:	d431      	bmi.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ac92:	4293      	cmp	r3, r2
 801ac94:	dd0c      	ble.n	801acb0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801ac96:	230e      	movs	r3, #14
 801ac98:	fb03 4302 	mla	r3, r3, r2, r4
 801ac9c:	889b      	ldrh	r3, [r3, #4]
 801ac9e:	1a5b      	subs	r3, r3, r1
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	429a      	cmp	r2, r3
 801aca4:	db27      	blt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	bfbc      	itt	lt
 801acaa:	2302      	movlt	r3, #2
 801acac:	fb92 f3f3 	sdivlt	r3, r2, r3
 801acb0:	2500      	movs	r5, #0
 801acb2:	260e      	movs	r6, #14
 801acb4:	4295      	cmp	r5, r2
 801acb6:	dc1e      	bgt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801acb8:	fb06 4003 	mla	r0, r6, r3, r4
 801acbc:	8887      	ldrh	r7, [r0, #4]
 801acbe:	42b9      	cmp	r1, r7
 801acc0:	d01a      	beq.n	801acf8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801acc2:	d20d      	bcs.n	801ace0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801acc4:	1e5a      	subs	r2, r3, #1
 801acc6:	4295      	cmp	r5, r2
 801acc8:	dc15      	bgt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801acca:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801acce:	1a5b      	subs	r3, r3, r1
 801acd0:	1ad3      	subs	r3, r2, r3
 801acd2:	429a      	cmp	r2, r3
 801acd4:	db0f      	blt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801acd6:	429d      	cmp	r5, r3
 801acd8:	ddec      	ble.n	801acb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801acda:	1953      	adds	r3, r2, r5
 801acdc:	105b      	asrs	r3, r3, #1
 801acde:	e7e9      	b.n	801acb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ace0:	1c5d      	adds	r5, r3, #1
 801ace2:	42aa      	cmp	r2, r5
 801ace4:	db07      	blt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ace6:	8a43      	ldrh	r3, [r0, #18]
 801ace8:	1acb      	subs	r3, r1, r3
 801acea:	442b      	add	r3, r5
 801acec:	429d      	cmp	r5, r3
 801acee:	dc02      	bgt.n	801acf6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801acf0:	429a      	cmp	r2, r3
 801acf2:	dadf      	bge.n	801acb4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801acf4:	e7f1      	b.n	801acda <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801acf6:	2000      	movs	r0, #0
 801acf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801acfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801acfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acfc:	4604      	mov	r4, r0
 801acfe:	4617      	mov	r7, r2
 801ad00:	461e      	mov	r6, r3
 801ad02:	b911      	cbnz	r1, 801ad0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ad04:	2500      	movs	r5, #0
 801ad06:	4628      	mov	r0, r5
 801ad08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad0a:	290a      	cmp	r1, #10
 801ad0c:	d0fa      	beq.n	801ad04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ad0e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ad12:	4291      	cmp	r1, r2
 801ad14:	d0f6      	beq.n	801ad04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ad16:	f242 020b 	movw	r2, #8203	; 0x200b
 801ad1a:	4291      	cmp	r1, r2
 801ad1c:	d0f2      	beq.n	801ad04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ad1e:	f7ff ffaf 	bl	801ac80 <_ZNK8touchgfx9ConstFont4findEt>
 801ad22:	4605      	mov	r5, r0
 801ad24:	b950      	cbnz	r0, 801ad3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801ad26:	6823      	ldr	r3, [r4, #0]
 801ad28:	4620      	mov	r0, r4
 801ad2a:	691b      	ldr	r3, [r3, #16]
 801ad2c:	4798      	blx	r3
 801ad2e:	4601      	mov	r1, r0
 801ad30:	4620      	mov	r0, r4
 801ad32:	f7ff ffa5 	bl	801ac80 <_ZNK8touchgfx9ConstFont4findEt>
 801ad36:	4605      	mov	r5, r0
 801ad38:	2800      	cmp	r0, #0
 801ad3a:	d0e3      	beq.n	801ad04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ad3c:	6823      	ldr	r3, [r4, #0]
 801ad3e:	4629      	mov	r1, r5
 801ad40:	4620      	mov	r0, r4
 801ad42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad44:	4798      	blx	r3
 801ad46:	6038      	str	r0, [r7, #0]
 801ad48:	6823      	ldr	r3, [r4, #0]
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad4e:	4798      	blx	r3
 801ad50:	7030      	strb	r0, [r6, #0]
 801ad52:	e7d8      	b.n	801ad06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801ad54 <_ZN8touchgfx4clzuEm>:
 801ad54:	4603      	mov	r3, r0
 801ad56:	b1c8      	cbz	r0, 801ad8c <_ZN8touchgfx4clzuEm+0x38>
 801ad58:	0c02      	lsrs	r2, r0, #16
 801ad5a:	0412      	lsls	r2, r2, #16
 801ad5c:	b9a2      	cbnz	r2, 801ad88 <_ZN8touchgfx4clzuEm+0x34>
 801ad5e:	0403      	lsls	r3, r0, #16
 801ad60:	2010      	movs	r0, #16
 801ad62:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ad66:	bf04      	itt	eq
 801ad68:	021b      	lsleq	r3, r3, #8
 801ad6a:	3008      	addeq	r0, #8
 801ad6c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ad70:	bf04      	itt	eq
 801ad72:	011b      	lsleq	r3, r3, #4
 801ad74:	3004      	addeq	r0, #4
 801ad76:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ad7a:	bf04      	itt	eq
 801ad7c:	009b      	lsleq	r3, r3, #2
 801ad7e:	3002      	addeq	r0, #2
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	db04      	blt.n	801ad8e <_ZN8touchgfx4clzuEm+0x3a>
 801ad84:	3001      	adds	r0, #1
 801ad86:	4770      	bx	lr
 801ad88:	2000      	movs	r0, #0
 801ad8a:	e7ea      	b.n	801ad62 <_ZN8touchgfx4clzuEm+0xe>
 801ad8c:	2020      	movs	r0, #32
 801ad8e:	4770      	bx	lr

0801ad90 <_ZN8touchgfx7muldivuEmmmRm>:
 801ad90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad94:	4680      	mov	r8, r0
 801ad96:	460f      	mov	r7, r1
 801ad98:	4615      	mov	r5, r2
 801ad9a:	461e      	mov	r6, r3
 801ad9c:	f7ff ffda 	bl	801ad54 <_ZN8touchgfx4clzuEm>
 801ada0:	b998      	cbnz	r0, 801adca <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801ada2:	4608      	mov	r0, r1
 801ada4:	f7ff ffd6 	bl	801ad54 <_ZN8touchgfx4clzuEm>
 801ada8:	2800      	cmp	r0, #0
 801adaa:	dd08      	ble.n	801adbe <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801adac:	4633      	mov	r3, r6
 801adae:	462a      	mov	r2, r5
 801adb0:	4641      	mov	r1, r8
 801adb2:	4638      	mov	r0, r7
 801adb4:	f7ff ffec 	bl	801ad90 <_ZN8touchgfx7muldivuEmmmRm>
 801adb8:	b003      	add	sp, #12
 801adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adbe:	f04f 33ff 	mov.w	r3, #4294967295
 801adc2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801adc6:	6033      	str	r3, [r6, #0]
 801adc8:	e7f6      	b.n	801adb8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801adca:	fa31 f900 	lsrs.w	r9, r1, r0
 801adce:	fb01 f308 	mul.w	r3, r1, r8
 801add2:	d105      	bne.n	801ade0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801add4:	fbb3 f0f5 	udiv	r0, r3, r5
 801add8:	fb05 3510 	mls	r5, r5, r0, r3
 801addc:	6035      	str	r5, [r6, #0]
 801adde:	e7eb      	b.n	801adb8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801ade0:	2301      	movs	r3, #1
 801ade2:	fa08 fb00 	lsl.w	fp, r8, r0
 801ade6:	462a      	mov	r2, r5
 801ade8:	4641      	mov	r1, r8
 801adea:	fa03 f000 	lsl.w	r0, r3, r0
 801adee:	4633      	mov	r3, r6
 801adf0:	fbbb faf5 	udiv	sl, fp, r5
 801adf4:	3801      	subs	r0, #1
 801adf6:	fb09 f40a 	mul.w	r4, r9, sl
 801adfa:	4038      	ands	r0, r7
 801adfc:	f7ff ffc8 	bl	801ad90 <_ZN8touchgfx7muldivuEmmmRm>
 801ae00:	462a      	mov	r2, r5
 801ae02:	4607      	mov	r7, r0
 801ae04:	ab01      	add	r3, sp, #4
 801ae06:	fb05 b11a 	mls	r1, r5, sl, fp
 801ae0a:	4648      	mov	r0, r9
 801ae0c:	f7ff ffc0 	bl	801ad90 <_ZN8touchgfx7muldivuEmmmRm>
 801ae10:	9b01      	ldr	r3, [sp, #4]
 801ae12:	6832      	ldr	r2, [r6, #0]
 801ae14:	441a      	add	r2, r3
 801ae16:	fbb2 f3f5 	udiv	r3, r2, r5
 801ae1a:	441c      	add	r4, r3
 801ae1c:	fb05 2513 	mls	r5, r5, r3, r2
 801ae20:	443c      	add	r4, r7
 801ae22:	4420      	add	r0, r4
 801ae24:	e7da      	b.n	801addc <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801ae26 <_ZN8touchgfx6muldivElllRl>:
 801ae26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	461e      	mov	r6, r3
 801ae2c:	bfba      	itte	lt
 801ae2e:	4240      	neglt	r0, r0
 801ae30:	f04f 34ff 	movlt.w	r4, #4294967295
 801ae34:	2401      	movge	r4, #1
 801ae36:	2900      	cmp	r1, #0
 801ae38:	bfbc      	itt	lt
 801ae3a:	4249      	neglt	r1, r1
 801ae3c:	4264      	neglt	r4, r4
 801ae3e:	2a00      	cmp	r2, #0
 801ae40:	bfb6      	itet	lt
 801ae42:	4265      	neglt	r5, r4
 801ae44:	4625      	movge	r5, r4
 801ae46:	4252      	neglt	r2, r2
 801ae48:	4288      	cmp	r0, r1
 801ae4a:	bfc2      	ittt	gt
 801ae4c:	4603      	movgt	r3, r0
 801ae4e:	4608      	movgt	r0, r1
 801ae50:	4619      	movgt	r1, r3
 801ae52:	ab01      	add	r3, sp, #4
 801ae54:	f7ff ff9c 	bl	801ad90 <_ZN8touchgfx7muldivuEmmmRm>
 801ae58:	9b01      	ldr	r3, [sp, #4]
 801ae5a:	4368      	muls	r0, r5
 801ae5c:	435c      	muls	r4, r3
 801ae5e:	6034      	str	r4, [r6, #0]
 801ae60:	b002      	add	sp, #8
 801ae62:	bd70      	pop	{r4, r5, r6, pc}

0801ae64 <_ZN8touchgfx6muldivElll>:
 801ae64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ae66:	4606      	mov	r6, r0
 801ae68:	ab01      	add	r3, sp, #4
 801ae6a:	460d      	mov	r5, r1
 801ae6c:	4614      	mov	r4, r2
 801ae6e:	f7ff ffda 	bl	801ae26 <_ZN8touchgfx6muldivElllRl>
 801ae72:	2e00      	cmp	r6, #0
 801ae74:	db20      	blt.n	801aeb8 <_ZN8touchgfx6muldivElll+0x54>
 801ae76:	bf14      	ite	ne
 801ae78:	2301      	movne	r3, #1
 801ae7a:	2300      	moveq	r3, #0
 801ae7c:	2d00      	cmp	r5, #0
 801ae7e:	db1e      	blt.n	801aebe <_ZN8touchgfx6muldivElll+0x5a>
 801ae80:	bf14      	ite	ne
 801ae82:	2201      	movne	r2, #1
 801ae84:	2200      	moveq	r2, #0
 801ae86:	2c00      	cmp	r4, #0
 801ae88:	fb03 f202 	mul.w	r2, r3, r2
 801ae8c:	db1a      	blt.n	801aec4 <_ZN8touchgfx6muldivElll+0x60>
 801ae8e:	bf14      	ite	ne
 801ae90:	2301      	movne	r3, #1
 801ae92:	2300      	moveq	r3, #0
 801ae94:	4353      	muls	r3, r2
 801ae96:	2b01      	cmp	r3, #1
 801ae98:	d117      	bne.n	801aeca <_ZN8touchgfx6muldivElll+0x66>
 801ae9a:	2c00      	cmp	r4, #0
 801ae9c:	9b01      	ldr	r3, [sp, #4]
 801ae9e:	bfb8      	it	lt
 801aea0:	4264      	neglt	r4, r4
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	f104 0401 	add.w	r4, r4, #1
 801aea8:	bfb8      	it	lt
 801aeaa:	425b      	neglt	r3, r3
 801aeac:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801aeb0:	db00      	blt.n	801aeb4 <_ZN8touchgfx6muldivElll+0x50>
 801aeb2:	3001      	adds	r0, #1
 801aeb4:	b002      	add	sp, #8
 801aeb6:	bd70      	pop	{r4, r5, r6, pc}
 801aeb8:	f04f 33ff 	mov.w	r3, #4294967295
 801aebc:	e7de      	b.n	801ae7c <_ZN8touchgfx6muldivElll+0x18>
 801aebe:	f04f 32ff 	mov.w	r2, #4294967295
 801aec2:	e7e0      	b.n	801ae86 <_ZN8touchgfx6muldivElll+0x22>
 801aec4:	f04f 33ff 	mov.w	r3, #4294967295
 801aec8:	e7e4      	b.n	801ae94 <_ZN8touchgfx6muldivElll+0x30>
 801aeca:	3301      	adds	r3, #1
 801aecc:	d1f2      	bne.n	801aeb4 <_ZN8touchgfx6muldivElll+0x50>
 801aece:	9b01      	ldr	r3, [sp, #4]
 801aed0:	2c00      	cmp	r4, #0
 801aed2:	bfb8      	it	lt
 801aed4:	4264      	neglt	r4, r4
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	bfb8      	it	lt
 801aeda:	425b      	neglt	r3, r3
 801aedc:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801aee0:	bfc8      	it	gt
 801aee2:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801aee6:	e7e5      	b.n	801aeb4 <_ZN8touchgfx6muldivElll+0x50>

0801aee8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801aee8:	2000      	movs	r0, #0
 801aeea:	4770      	bx	lr

0801aeec <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801aeec:	2001      	movs	r0, #1
 801aeee:	4770      	bx	lr

0801aef0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801aef0:	2002      	movs	r0, #2
 801aef2:	4770      	bx	lr

0801aef4 <_ZN8touchgfx12GestureEventD1Ev>:
 801aef4:	4770      	bx	lr

0801aef6 <_ZN8touchgfx9DragEventD1Ev>:
 801aef6:	4770      	bx	lr

0801aef8 <_ZN8touchgfx10ClickEventD1Ev>:
 801aef8:	4770      	bx	lr

0801aefa <_ZN8touchgfx10ClickEventD0Ev>:
 801aefa:	b510      	push	{r4, lr}
 801aefc:	4604      	mov	r4, r0
 801aefe:	210c      	movs	r1, #12
 801af00:	f00d fc74 	bl	80287ec <_ZdlPvj>
 801af04:	4620      	mov	r0, r4
 801af06:	bd10      	pop	{r4, pc}

0801af08 <_ZN8touchgfx9DragEventD0Ev>:
 801af08:	b510      	push	{r4, lr}
 801af0a:	4604      	mov	r4, r0
 801af0c:	2110      	movs	r1, #16
 801af0e:	f00d fc6d 	bl	80287ec <_ZdlPvj>
 801af12:	4620      	mov	r0, r4
 801af14:	bd10      	pop	{r4, pc}

0801af16 <_ZN8touchgfx12GestureEventD0Ev>:
 801af16:	b510      	push	{r4, lr}
 801af18:	4604      	mov	r4, r0
 801af1a:	210c      	movs	r1, #12
 801af1c:	f00d fc66 	bl	80287ec <_ZdlPvj>
 801af20:	4620      	mov	r0, r4
 801af22:	bd10      	pop	{r4, pc}

0801af24 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801af24:	b530      	push	{r4, r5, lr}
 801af26:	460d      	mov	r5, r1
 801af28:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801af2a:	b087      	sub	sp, #28
 801af2c:	4604      	mov	r4, r0
 801af2e:	b301      	cbz	r1, 801af72 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801af30:	a801      	add	r0, sp, #4
 801af32:	f7ff fe71 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801af36:	892a      	ldrh	r2, [r5, #8]
 801af38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801af3c:	7928      	ldrb	r0, [r5, #4]
 801af3e:	1ad2      	subs	r2, r2, r3
 801af40:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801af42:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801af46:	441a      	add	r2, r3
 801af48:	896b      	ldrh	r3, [r5, #10]
 801af4a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801af4e:	f88d 0010 	strb.w	r0, [sp, #16]
 801af52:	1b5b      	subs	r3, r3, r5
 801af54:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801af56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801af58:	442b      	add	r3, r5
 801af5a:	4d07      	ldr	r5, [pc, #28]	; (801af78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801af5c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801af60:	a903      	add	r1, sp, #12
 801af62:	9503      	str	r5, [sp, #12]
 801af64:	f8ad 2014 	strh.w	r2, [sp, #20]
 801af68:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af6c:	6803      	ldr	r3, [r0, #0]
 801af6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801af70:	4798      	blx	r3
 801af72:	b007      	add	sp, #28
 801af74:	bd30      	pop	{r4, r5, pc}
 801af76:	bf00      	nop
 801af78:	0802d3bc 	.word	0x0802d3bc

0801af7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801af82:	b08a      	sub	sp, #40	; 0x28
 801af84:	4604      	mov	r4, r0
 801af86:	460d      	mov	r5, r1
 801af88:	b113      	cbz	r3, 801af90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801af8a:	790b      	ldrb	r3, [r1, #4]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d044      	beq.n	801b01a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801af90:	f104 0804 	add.w	r8, r4, #4
 801af94:	a803      	add	r0, sp, #12
 801af96:	4641      	mov	r1, r8
 801af98:	f7ff fe3e 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801af9c:	792b      	ldrb	r3, [r5, #4]
 801af9e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801afa2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801afa6:	b983      	cbnz	r3, 801afca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801afa8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801afac:	892a      	ldrh	r2, [r5, #8]
 801afae:	88e9      	ldrh	r1, [r5, #6]
 801afb0:	4640      	mov	r0, r8
 801afb2:	1b92      	subs	r2, r2, r6
 801afb4:	9301      	str	r3, [sp, #4]
 801afb6:	1bc9      	subs	r1, r1, r7
 801afb8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801afbc:	b212      	sxth	r2, r2
 801afbe:	9300      	str	r3, [sp, #0]
 801afc0:	b209      	sxth	r1, r1
 801afc2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801afc6:	f7f9 ffab 	bl	8014f20 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801afca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801afcc:	b329      	cbz	r1, 801b01a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801afce:	a805      	add	r0, sp, #20
 801afd0:	f7ff fe22 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801afd4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801afd8:	792b      	ldrb	r3, [r5, #4]
 801afda:	a907      	add	r1, sp, #28
 801afdc:	1abf      	subs	r7, r7, r2
 801afde:	88ea      	ldrh	r2, [r5, #6]
 801afe0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801afe2:	4417      	add	r7, r2
 801afe4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801afe6:	f88d 3020 	strb.w	r3, [sp, #32]
 801afea:	4417      	add	r7, r2
 801afec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801aff0:	1ab6      	subs	r6, r6, r2
 801aff2:	892a      	ldrh	r2, [r5, #8]
 801aff4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801aff8:	4416      	add	r6, r2
 801affa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801affc:	4416      	add	r6, r2
 801affe:	4a08      	ldr	r2, [pc, #32]	; (801b020 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b000:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b004:	2600      	movs	r6, #0
 801b006:	9207      	str	r2, [sp, #28]
 801b008:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801b00c:	6803      	ldr	r3, [r0, #0]
 801b00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b010:	4798      	blx	r3
 801b012:	792b      	ldrb	r3, [r5, #4]
 801b014:	b10b      	cbz	r3, 801b01a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b016:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b01a:	b00a      	add	sp, #40	; 0x28
 801b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b020:	0802d394 	.word	0x0802d394

0801b024 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b028:	460c      	mov	r4, r1
 801b02a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b02c:	b088      	sub	sp, #32
 801b02e:	4605      	mov	r5, r0
 801b030:	2900      	cmp	r1, #0
 801b032:	d06d      	beq.n	801b110 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b034:	4668      	mov	r0, sp
 801b036:	f7ff fdef 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b03a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801b03c:	88e3      	ldrh	r3, [r4, #6]
 801b03e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b042:	440b      	add	r3, r1
 801b044:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b048:	b21b      	sxth	r3, r3
 801b04a:	4543      	cmp	r3, r8
 801b04c:	db31      	blt.n	801b0b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b04e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b052:	44c4      	add	ip, r8
 801b054:	fa0f fc8c 	sxth.w	ip, ip
 801b058:	4563      	cmp	r3, ip
 801b05a:	da2a      	bge.n	801b0b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b05c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801b05e:	8926      	ldrh	r6, [r4, #8]
 801b060:	4416      	add	r6, r2
 801b062:	b236      	sxth	r6, r6
 801b064:	42be      	cmp	r6, r7
 801b066:	db24      	blt.n	801b0b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b068:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b06c:	4438      	add	r0, r7
 801b06e:	b200      	sxth	r0, r0
 801b070:	4286      	cmp	r6, r0
 801b072:	da1e      	bge.n	801b0b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b074:	8963      	ldrh	r3, [r4, #10]
 801b076:	4419      	add	r1, r3
 801b078:	b209      	sxth	r1, r1
 801b07a:	4541      	cmp	r1, r8
 801b07c:	db08      	blt.n	801b090 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b07e:	4561      	cmp	r1, ip
 801b080:	da06      	bge.n	801b090 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b082:	89a3      	ldrh	r3, [r4, #12]
 801b084:	441a      	add	r2, r3
 801b086:	b212      	sxth	r2, r2
 801b088:	42ba      	cmp	r2, r7
 801b08a:	db01      	blt.n	801b090 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b08c:	4282      	cmp	r2, r0
 801b08e:	db10      	blt.n	801b0b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b090:	4b21      	ldr	r3, [pc, #132]	; (801b118 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b092:	a904      	add	r1, sp, #16
 801b094:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b096:	9304      	str	r3, [sp, #16]
 801b098:	2302      	movs	r3, #2
 801b09a:	f88d 3014 	strb.w	r3, [sp, #20]
 801b09e:	2300      	movs	r3, #0
 801b0a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b0a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b0ac:	6803      	ldr	r3, [r0, #0]
 801b0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0b0:	4798      	blx	r3
 801b0b2:	1d29      	adds	r1, r5, #4
 801b0b4:	a802      	add	r0, sp, #8
 801b0b6:	f7ff fdaf 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b0ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b0be:	88e0      	ldrh	r0, [r4, #6]
 801b0c0:	eba3 0808 	sub.w	r8, r3, r8
 801b0c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b0c8:	7921      	ldrb	r1, [r4, #4]
 801b0ca:	fa1f f888 	uxth.w	r8, r8
 801b0ce:	1bdf      	subs	r7, r3, r7
 801b0d0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b0d4:	b2bb      	uxth	r3, r7
 801b0d6:	4440      	add	r0, r8
 801b0d8:	8922      	ldrh	r2, [r4, #8]
 801b0da:	8967      	ldrh	r7, [r4, #10]
 801b0dc:	4460      	add	r0, ip
 801b0de:	89a4      	ldrh	r4, [r4, #12]
 801b0e0:	441a      	add	r2, r3
 801b0e2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b0e4:	44b8      	add	r8, r7
 801b0e6:	4423      	add	r3, r4
 801b0e8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b0ec:	4432      	add	r2, r6
 801b0ee:	44e0      	add	r8, ip
 801b0f0:	4433      	add	r3, r6
 801b0f2:	4c0a      	ldr	r4, [pc, #40]	; (801b11c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b0f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b0f6:	f88d 1014 	strb.w	r1, [sp, #20]
 801b0fa:	a904      	add	r1, sp, #16
 801b0fc:	9404      	str	r4, [sp, #16]
 801b0fe:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b102:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b106:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b10e:	4798      	blx	r3
 801b110:	b008      	add	sp, #32
 801b112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b116:	bf00      	nop
 801b118:	0802d394 	.word	0x0802d394
 801b11c:	0802d3a8 	.word	0x0802d3a8

0801b120 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b122:	4604      	mov	r4, r0
 801b124:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b128:	3201      	adds	r2, #1
 801b12a:	d112      	bne.n	801b152 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b12c:	2500      	movs	r5, #0
 801b12e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b132:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b136:	6803      	ldr	r3, [r0, #0]
 801b138:	9500      	str	r5, [sp, #0]
 801b13a:	466d      	mov	r5, sp
 801b13c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b140:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b144:	4629      	mov	r1, r5
 801b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b148:	4798      	blx	r3
 801b14a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b14e:	e884 0003 	stmia.w	r4, {r0, r1}
 801b152:	4620      	mov	r0, r4
 801b154:	b003      	add	sp, #12
 801b156:	bd30      	pop	{r4, r5, pc}

0801b158 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b158:	b513      	push	{r0, r1, r4, lr}
 801b15a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b15e:	4604      	mov	r4, r0
 801b160:	3301      	adds	r3, #1
 801b162:	d109      	bne.n	801b178 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b164:	4601      	mov	r1, r0
 801b166:	4668      	mov	r0, sp
 801b168:	f7ff fd56 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b16c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b170:	8423      	strh	r3, [r4, #32]
 801b172:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b176:	8463      	strh	r3, [r4, #34]	; 0x22
 801b178:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b17c:	b002      	add	sp, #8
 801b17e:	bd10      	pop	{r4, pc}

0801b180 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b180:	b513      	push	{r0, r1, r4, lr}
 801b182:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b186:	4604      	mov	r4, r0
 801b188:	3301      	adds	r3, #1
 801b18a:	d109      	bne.n	801b1a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b18c:	4601      	mov	r1, r0
 801b18e:	4668      	mov	r0, sp
 801b190:	f7ff fd42 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b194:	f8bd 3000 	ldrh.w	r3, [sp]
 801b198:	8423      	strh	r3, [r4, #32]
 801b19a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b19e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b1a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b1a4:	b002      	add	sp, #8
 801b1a6:	bd10      	pop	{r4, pc}

0801b1a8 <_ZN8touchgfx6ScreenC1Ev>:
 801b1a8:	b570      	push	{r4, r5, r6, lr}
 801b1aa:	4b17      	ldr	r3, [pc, #92]	; (801b208 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b1ac:	4605      	mov	r5, r0
 801b1ae:	4a17      	ldr	r2, [pc, #92]	; (801b20c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b1b0:	2101      	movs	r1, #1
 801b1b2:	f845 3b04 	str.w	r3, [r5], #4
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	6042      	str	r2, [r0, #4]
 801b1ba:	4604      	mov	r4, r0
 801b1bc:	8103      	strh	r3, [r0, #8]
 801b1be:	8143      	strh	r3, [r0, #10]
 801b1c0:	8183      	strh	r3, [r0, #12]
 801b1c2:	81c3      	strh	r3, [r0, #14]
 801b1c4:	8203      	strh	r3, [r0, #16]
 801b1c6:	8243      	strh	r3, [r0, #18]
 801b1c8:	8283      	strh	r3, [r0, #20]
 801b1ca:	82c3      	strh	r3, [r0, #22]
 801b1cc:	6203      	str	r3, [r0, #32]
 801b1ce:	8483      	strh	r3, [r0, #36]	; 0x24
 801b1d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b1d2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b1d6:	6343      	str	r3, [r0, #52]	; 0x34
 801b1d8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b1dc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b1e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b1e4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b1e8:	4b09      	ldr	r3, [pc, #36]	; (801b210 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b1ea:	4628      	mov	r0, r5
 801b1ec:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b1f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801b1f2:	4a08      	ldr	r2, [pc, #32]	; (801b214 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b1f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b1f8:	4798      	blx	r3
 801b1fa:	6863      	ldr	r3, [r4, #4]
 801b1fc:	4628      	mov	r0, r5
 801b1fe:	4631      	mov	r1, r6
 801b200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b202:	4798      	blx	r3
 801b204:	4620      	mov	r0, r4
 801b206:	bd70      	pop	{r4, r5, r6, pc}
 801b208:	0802d3d0 	.word	0x0802d3d0
 801b20c:	0802cbfc 	.word	0x0802cbfc
 801b210:	2003bcfe 	.word	0x2003bcfe
 801b214:	2003bcfc 	.word	0x2003bcfc

0801b218 <_ZN8touchgfx6Screen4drawEv>:
 801b218:	4b09      	ldr	r3, [pc, #36]	; (801b240 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b21a:	b507      	push	{r0, r1, r2, lr}
 801b21c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b220:	2100      	movs	r1, #0
 801b222:	4b08      	ldr	r3, [pc, #32]	; (801b244 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b224:	9100      	str	r1, [sp, #0]
 801b226:	4669      	mov	r1, sp
 801b228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b22c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b230:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b234:	6803      	ldr	r3, [r0, #0]
 801b236:	689b      	ldr	r3, [r3, #8]
 801b238:	4798      	blx	r3
 801b23a:	b003      	add	sp, #12
 801b23c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b240:	2003bcfc 	.word	0x2003bcfc
 801b244:	2003bcfe 	.word	0x2003bcfe

0801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b24c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b250:	b089      	sub	sp, #36	; 0x24
 801b252:	4680      	mov	r8, r0
 801b254:	460c      	mov	r4, r1
 801b256:	2b00      	cmp	r3, #0
 801b258:	4615      	mov	r5, r2
 801b25a:	dd0e      	ble.n	801b27a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b25c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b260:	2b00      	cmp	r3, #0
 801b262:	dd0a      	ble.n	801b27a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b264:	4628      	mov	r0, r5
 801b266:	f7ff ff5b 	bl	801b120 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b26a:	4621      	mov	r1, r4
 801b26c:	f7fe fbc2 	bl	80199f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b270:	69eb      	ldr	r3, [r5, #28]
 801b272:	b928      	cbnz	r0, 801b280 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b274:	461d      	mov	r5, r3
 801b276:	2b00      	cmp	r3, #0
 801b278:	d1f4      	bne.n	801b264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b27a:	b009      	add	sp, #36	; 0x24
 801b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b280:	ae04      	add	r6, sp, #16
 801b282:	2b00      	cmp	r3, #0
 801b284:	f000 80b5 	beq.w	801b3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b288:	682b      	ldr	r3, [r5, #0]
 801b28a:	4629      	mov	r1, r5
 801b28c:	a802      	add	r0, sp, #8
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	4798      	blx	r3
 801b292:	4628      	mov	r0, r5
 801b294:	f7ff ff60 	bl	801b158 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b298:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b29c:	4407      	add	r7, r0
 801b29e:	4628      	mov	r0, r5
 801b2a0:	f7ff ff6e 	bl	801b180 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b2a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b2a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b2ac:	b23f      	sxth	r7, r7
 801b2ae:	4418      	add	r0, r3
 801b2b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b2b4:	4621      	mov	r1, r4
 801b2b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b2ba:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b2be:	4630      	mov	r0, r6
 801b2c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b2c8:	f7f9 ff0c 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801b2cc:	4628      	mov	r0, r5
 801b2ce:	f7ff ff27 	bl	801b120 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b2d2:	ab06      	add	r3, sp, #24
 801b2d4:	4602      	mov	r2, r0
 801b2d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b2da:	e883 0003 	stmia.w	r3, {r0, r1}
 801b2de:	4611      	mov	r1, r2
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	f7f9 feff 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801b2e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b2ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b2ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b2f2:	4299      	cmp	r1, r3
 801b2f4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b2f8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b2fc:	d10b      	bne.n	801b316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b2fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b302:	4552      	cmp	r2, sl
 801b304:	d107      	bne.n	801b316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b306:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b30a:	455a      	cmp	r2, fp
 801b30c:	d103      	bne.n	801b316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b30e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b312:	454a      	cmp	r2, r9
 801b314:	d06d      	beq.n	801b3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b316:	f1bb 0f00 	cmp.w	fp, #0
 801b31a:	dd65      	ble.n	801b3e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b31c:	f1b9 0f00 	cmp.w	r9, #0
 801b320:	dd62      	ble.n	801b3e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b322:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b326:	fa1f f08a 	uxth.w	r0, sl
 801b32a:	4552      	cmp	r2, sl
 801b32c:	9000      	str	r0, [sp, #0]
 801b32e:	da12      	bge.n	801b356 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b330:	9301      	str	r3, [sp, #4]
 801b332:	9b00      	ldr	r3, [sp, #0]
 801b334:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b338:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b33c:	1a9a      	subs	r2, r3, r2
 801b33e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b342:	4631      	mov	r1, r6
 801b344:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b348:	4640      	mov	r0, r8
 801b34a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b34e:	69ea      	ldr	r2, [r5, #28]
 801b350:	f7ff ff7a 	bl	801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b354:	9b01      	ldr	r3, [sp, #4]
 801b356:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b35a:	b29f      	uxth	r7, r3
 801b35c:	429a      	cmp	r2, r3
 801b35e:	da0d      	bge.n	801b37c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b360:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b364:	1aba      	subs	r2, r7, r2
 801b366:	f8ad a012 	strh.w	sl, [sp, #18]
 801b36a:	4631      	mov	r1, r6
 801b36c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b370:	4640      	mov	r0, r8
 801b372:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b376:	69ea      	ldr	r2, [r5, #28]
 801b378:	f7ff ff66 	bl	801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b37c:	8822      	ldrh	r2, [r4, #0]
 801b37e:	445f      	add	r7, fp
 801b380:	88a3      	ldrh	r3, [r4, #4]
 801b382:	b2bf      	uxth	r7, r7
 801b384:	4413      	add	r3, r2
 801b386:	b23a      	sxth	r2, r7
 801b388:	b29b      	uxth	r3, r3
 801b38a:	b219      	sxth	r1, r3
 801b38c:	4291      	cmp	r1, r2
 801b38e:	dd0d      	ble.n	801b3ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b390:	1bdb      	subs	r3, r3, r7
 801b392:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b396:	f8ad a012 	strh.w	sl, [sp, #18]
 801b39a:	4631      	mov	r1, r6
 801b39c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b3a0:	4640      	mov	r0, r8
 801b3a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b3a6:	69ea      	ldr	r2, [r5, #28]
 801b3a8:	f7ff ff4e 	bl	801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b3ac:	88e2      	ldrh	r2, [r4, #6]
 801b3ae:	8863      	ldrh	r3, [r4, #2]
 801b3b0:	4413      	add	r3, r2
 801b3b2:	9a00      	ldr	r2, [sp, #0]
 801b3b4:	444a      	add	r2, r9
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	fa1f f982 	uxth.w	r9, r2
 801b3bc:	b219      	sxth	r1, r3
 801b3be:	fa0f f289 	sxth.w	r2, r9
 801b3c2:	428a      	cmp	r2, r1
 801b3c4:	da15      	bge.n	801b3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b3c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b3ca:	eba3 0309 	sub.w	r3, r3, r9
 801b3ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b3d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b3d6:	4631      	mov	r1, r6
 801b3d8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b3dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b3e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3e4:	69ea      	ldr	r2, [r5, #28]
 801b3e6:	e001      	b.n	801b3ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b3e8:	69ea      	ldr	r2, [r5, #28]
 801b3ea:	4621      	mov	r1, r4
 801b3ec:	4640      	mov	r0, r8
 801b3ee:	f7ff ff2b 	bl	801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f7ff fe94 	bl	801b120 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b3f8:	6861      	ldr	r1, [r4, #4]
 801b3fa:	4602      	mov	r2, r0
 801b3fc:	4633      	mov	r3, r6
 801b3fe:	6820      	ldr	r0, [r4, #0]
 801b400:	c303      	stmia	r3!, {r0, r1}
 801b402:	4611      	mov	r1, r2
 801b404:	4630      	mov	r0, r6
 801b406:	f7f9 fe6d 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801b40a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	f77f af33 	ble.w	801b27a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b414:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	f77f af2e 	ble.w	801b27a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b41e:	4628      	mov	r0, r5
 801b420:	f7ff fe9a 	bl	801b158 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b424:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b428:	1a18      	subs	r0, r3, r0
 801b42a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b42e:	4628      	mov	r0, r5
 801b430:	f7ff fea6 	bl	801b180 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b434:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b438:	4631      	mov	r1, r6
 801b43a:	1a18      	subs	r0, r3, r0
 801b43c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b440:	4628      	mov	r0, r5
 801b442:	682b      	ldr	r3, [r5, #0]
 801b444:	689b      	ldr	r3, [r3, #8]
 801b446:	4798      	blx	r3
 801b448:	e717      	b.n	801b27a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b44a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b44a:	b570      	push	{r4, r5, r6, lr}
 801b44c:	1d06      	adds	r6, r0, #4
 801b44e:	b086      	sub	sp, #24
 801b450:	460c      	mov	r4, r1
 801b452:	2300      	movs	r3, #0
 801b454:	4631      	mov	r1, r6
 801b456:	4605      	mov	r5, r0
 801b458:	a802      	add	r0, sp, #8
 801b45a:	9301      	str	r3, [sp, #4]
 801b45c:	f7ff fbdc 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b460:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b464:	8822      	ldrh	r2, [r4, #0]
 801b466:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b46a:	1ad2      	subs	r2, r2, r3
 801b46c:	8863      	ldrh	r3, [r4, #2]
 801b46e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b472:	1a5b      	subs	r3, r3, r1
 801b474:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b478:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b47c:	aa01      	add	r2, sp, #4
 801b47e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b482:	4630      	mov	r0, r6
 801b484:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b488:	a904      	add	r1, sp, #16
 801b48a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b48e:	f7f9 ff01 	bl	8015294 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b492:	9a01      	ldr	r2, [sp, #4]
 801b494:	b11a      	cbz	r2, 801b49e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b496:	4621      	mov	r1, r4
 801b498:	4628      	mov	r0, r5
 801b49a:	f7ff fed5 	bl	801b248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b49e:	b006      	add	sp, #24
 801b4a0:	bd70      	pop	{r4, r5, r6, pc}

0801b4a2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	b530      	push	{r4, r5, lr}
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	b085      	sub	sp, #20
 801b4aa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b4ae:	460d      	mov	r5, r1
 801b4b0:	466b      	mov	r3, sp
 801b4b2:	6851      	ldr	r1, [r2, #4]
 801b4b4:	c303      	stmia	r3!, {r0, r1}
 801b4b6:	4629      	mov	r1, r5
 801b4b8:	4668      	mov	r0, sp
 801b4ba:	f7f9 fe13 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801b4be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b4c2:	b12b      	cbz	r3, 801b4d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b4c4:	4669      	mov	r1, sp
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7ff ffbf 	bl	801b44a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b4cc:	b005      	add	sp, #20
 801b4ce:	bd30      	pop	{r4, r5, pc}
 801b4d0:	3404      	adds	r4, #4
 801b4d2:	a802      	add	r0, sp, #8
 801b4d4:	4621      	mov	r1, r4
 801b4d6:	f7ff fb9f 	bl	801ac18 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4da:	f8bd 3000 	ldrh.w	r3, [sp]
 801b4de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b4e2:	4669      	mov	r1, sp
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	1a9b      	subs	r3, r3, r2
 801b4e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b4ec:	f8ad 3000 	strh.w	r3, [sp]
 801b4f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b4f4:	1a9b      	subs	r3, r3, r2
 801b4f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b4fa:	f7f9 fe92 	bl	8015222 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b4fe:	e7e5      	b.n	801b4cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b500 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b500:	460b      	mov	r3, r1
 801b502:	680a      	ldr	r2, [r1, #0]
 801b504:	1d01      	adds	r1, r0, #4
 801b506:	6992      	ldr	r2, [r2, #24]
 801b508:	4618      	mov	r0, r3
 801b50a:	4710      	bx	r2

0801b50c <_ZN8touchgfx12TextProviderC1Ev>:
 801b50c:	b538      	push	{r3, r4, r5, lr}
 801b50e:	2500      	movs	r5, #0
 801b510:	2302      	movs	r3, #2
 801b512:	4604      	mov	r4, r0
 801b514:	220e      	movs	r2, #14
 801b516:	7403      	strb	r3, [r0, #16]
 801b518:	4629      	mov	r1, r5
 801b51a:	6145      	str	r5, [r0, #20]
 801b51c:	7605      	strb	r5, [r0, #24]
 801b51e:	83c5      	strh	r5, [r0, #30]
 801b520:	8405      	strh	r5, [r0, #32]
 801b522:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b524:	8705      	strh	r5, [r0, #56]	; 0x38
 801b526:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801b528:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801b52c:	e9c0 5500 	strd	r5, r5, [r0]
 801b530:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801b534:	304c      	adds	r0, #76	; 0x4c
 801b536:	f00d fa13 	bl	8028960 <memset>
 801b53a:	2301      	movs	r3, #1
 801b53c:	4620      	mov	r0, r4
 801b53e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801b542:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b546:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801b54a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801b54e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801b552:	f7f5 fafb 	bl	8010b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b556:	4620      	mov	r0, r4
 801b558:	bd38      	pop	{r3, r4, r5, pc}

0801b55a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801b55a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b55c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b560:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801b562:	fab0 f080 	clz	r0, r0
 801b566:	0940      	lsrs	r0, r0, #5
 801b568:	4770      	bx	lr

0801b56a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b56a:	b530      	push	{r4, r5, lr}
 801b56c:	2500      	movs	r5, #0
 801b56e:	2401      	movs	r4, #1
 801b570:	6843      	ldr	r3, [r0, #4]
 801b572:	b913      	cbnz	r3, 801b57a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b574:	6803      	ldr	r3, [r0, #0]
 801b576:	b313      	cbz	r3, 801b5be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b578:	6043      	str	r3, [r0, #4]
 801b57a:	7e03      	ldrb	r3, [r0, #24]
 801b57c:	b143      	cbz	r3, 801b590 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b57e:	6943      	ldr	r3, [r0, #20]
 801b580:	b12b      	cbz	r3, 801b58e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b582:	881a      	ldrh	r2, [r3, #0]
 801b584:	b11a      	cbz	r2, 801b58e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b586:	1c9a      	adds	r2, r3, #2
 801b588:	6142      	str	r2, [r0, #20]
 801b58a:	8818      	ldrh	r0, [r3, #0]
 801b58c:	bd30      	pop	{r4, r5, pc}
 801b58e:	7605      	strb	r5, [r0, #24]
 801b590:	6843      	ldr	r3, [r0, #4]
 801b592:	8819      	ldrh	r1, [r3, #0]
 801b594:	b199      	cbz	r1, 801b5be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b596:	1c9a      	adds	r2, r3, #2
 801b598:	2902      	cmp	r1, #2
 801b59a:	6042      	str	r2, [r0, #4]
 801b59c:	d1f5      	bne.n	801b58a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b59e:	7c03      	ldrb	r3, [r0, #16]
 801b5a0:	2b01      	cmp	r3, #1
 801b5a2:	d8e5      	bhi.n	801b570 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b5a4:	1c5a      	adds	r2, r3, #1
 801b5a6:	3302      	adds	r3, #2
 801b5a8:	7402      	strb	r2, [r0, #16]
 801b5aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b5ae:	6143      	str	r3, [r0, #20]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d0dd      	beq.n	801b570 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b5b4:	881b      	ldrh	r3, [r3, #0]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d0da      	beq.n	801b570 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b5ba:	7604      	strb	r4, [r0, #24]
 801b5bc:	e7d8      	b.n	801b570 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b5be:	2000      	movs	r0, #0
 801b5c0:	e7e4      	b.n	801b58c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b5c2:	6001      	str	r1, [r0, #0]
 801b5c4:	2100      	movs	r1, #0
 801b5c6:	b430      	push	{r4, r5}
 801b5c8:	6041      	str	r1, [r0, #4]
 801b5ca:	6815      	ldr	r5, [r2, #0]
 801b5cc:	6085      	str	r5, [r0, #8]
 801b5ce:	6852      	ldr	r2, [r2, #4]
 801b5d0:	6443      	str	r3, [r0, #68]	; 0x44
 801b5d2:	9b02      	ldr	r3, [sp, #8]
 801b5d4:	60c2      	str	r2, [r0, #12]
 801b5d6:	7401      	strb	r1, [r0, #16]
 801b5d8:	6141      	str	r1, [r0, #20]
 801b5da:	7601      	strb	r1, [r0, #24]
 801b5dc:	8701      	strh	r1, [r0, #56]	; 0x38
 801b5de:	8401      	strh	r1, [r0, #32]
 801b5e0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b5e4:	6483      	str	r3, [r0, #72]	; 0x48
 801b5e6:	bc30      	pop	{r4, r5}
 801b5e8:	f7f5 bab0 	b.w	8010b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b5ec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801b5ec:	b408      	push	{r3}
 801b5ee:	b510      	push	{r4, lr}
 801b5f0:	b085      	sub	sp, #20
 801b5f2:	ac07      	add	r4, sp, #28
 801b5f4:	f854 3b04 	ldr.w	r3, [r4], #4
 801b5f8:	9300      	str	r3, [sp, #0]
 801b5fa:	4613      	mov	r3, r2
 801b5fc:	4622      	mov	r2, r4
 801b5fe:	9403      	str	r4, [sp, #12]
 801b600:	f7ff ffdf 	bl	801b5c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b604:	b005      	add	sp, #20
 801b606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b60a:	b001      	add	sp, #4
 801b60c:	4770      	bx	lr

0801b60e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b60e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b610:	4605      	mov	r5, r0
 801b612:	4608      	mov	r0, r1
 801b614:	b1f1      	cbz	r1, 801b654 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b616:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801b61a:	460b      	mov	r3, r1
 801b61c:	f101 0708 	add.w	r7, r1, #8
 801b620:	4622      	mov	r2, r4
 801b622:	6818      	ldr	r0, [r3, #0]
 801b624:	3308      	adds	r3, #8
 801b626:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b62a:	4626      	mov	r6, r4
 801b62c:	42bb      	cmp	r3, r7
 801b62e:	c603      	stmia	r6!, {r0, r1}
 801b630:	4634      	mov	r4, r6
 801b632:	d1f6      	bne.n	801b622 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b634:	6818      	ldr	r0, [r3, #0]
 801b636:	6030      	str	r0, [r6, #0]
 801b638:	4610      	mov	r0, r2
 801b63a:	889b      	ldrh	r3, [r3, #4]
 801b63c:	80b3      	strh	r3, [r6, #4]
 801b63e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801b642:	015b      	lsls	r3, r3, #5
 801b644:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b648:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801b64c:	430b      	orrs	r3, r1
 801b64e:	425b      	negs	r3, r3
 801b650:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b654:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b656 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b656:	b538      	push	{r3, r4, r5, lr}
 801b658:	460c      	mov	r4, r1
 801b65a:	6811      	ldr	r1, [r2, #0]
 801b65c:	4610      	mov	r0, r2
 801b65e:	68cd      	ldr	r5, [r1, #12]
 801b660:	4619      	mov	r1, r3
 801b662:	47a8      	blx	r5
 801b664:	2800      	cmp	r0, #0
 801b666:	bf08      	it	eq
 801b668:	4620      	moveq	r0, r4
 801b66a:	bd38      	pop	{r3, r4, r5, pc}

0801b66c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b66e:	4604      	mov	r4, r0
 801b670:	4615      	mov	r5, r2
 801b672:	4608      	mov	r0, r1
 801b674:	b93a      	cbnz	r2, 801b686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b676:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b67a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801b67e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801b682:	4628      	mov	r0, r5
 801b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b686:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b68a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801b68e:	8893      	ldrh	r3, [r2, #4]
 801b690:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b694:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b698:	79ee      	ldrb	r6, [r5, #7]
 801b69a:	4316      	orrs	r6, r2
 801b69c:	19da      	adds	r2, r3, r7
 801b69e:	b291      	uxth	r1, r2
 801b6a0:	b2b7      	uxth	r7, r6
 801b6a2:	291d      	cmp	r1, #29
 801b6a4:	d87b      	bhi.n	801b79e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801b6a6:	2201      	movs	r2, #1
 801b6a8:	10f6      	asrs	r6, r6, #3
 801b6aa:	408a      	lsls	r2, r1
 801b6ac:	4974      	ldr	r1, [pc, #464]	; (801b880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801b6ae:	420a      	tst	r2, r1
 801b6b0:	d12e      	bne.n	801b710 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801b6b2:	f412 7f60 	tst.w	r2, #896	; 0x380
 801b6b6:	d072      	beq.n	801b79e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801b6b8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801b6bc:	462b      	mov	r3, r5
 801b6be:	f105 0e08 	add.w	lr, r5, #8
 801b6c2:	4615      	mov	r5, r2
 801b6c4:	6818      	ldr	r0, [r3, #0]
 801b6c6:	3308      	adds	r3, #8
 801b6c8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b6cc:	4694      	mov	ip, r2
 801b6ce:	4573      	cmp	r3, lr
 801b6d0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b6d4:	4662      	mov	r2, ip
 801b6d6:	d1f5      	bne.n	801b6c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801b6d8:	6818      	ldr	r0, [r3, #0]
 801b6da:	f8cc 0000 	str.w	r0, [ip]
 801b6de:	889b      	ldrh	r3, [r3, #4]
 801b6e0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b6e4:	b2b3      	uxth	r3, r6
 801b6e6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801b6ea:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801b6ee:	1aca      	subs	r2, r1, r3
 801b6f0:	1bcf      	subs	r7, r1, r7
 801b6f2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801b6f6:	b292      	uxth	r2, r2
 801b6f8:	1afb      	subs	r3, r7, r3
 801b6fa:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801b6fe:	10d2      	asrs	r2, r2, #3
 801b700:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801b704:	4302      	orrs	r2, r0
 801b706:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801b70a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801b70e:	e7b8      	b.n	801b682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b710:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b712:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b716:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801b718:	f640 6333 	movw	r3, #3635	; 0xe33
 801b71c:	4299      	cmp	r1, r3
 801b71e:	d110      	bne.n	801b742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801b720:	6803      	ldr	r3, [r0, #0]
 801b722:	68db      	ldr	r3, [r3, #12]
 801b724:	4798      	blx	r3
 801b726:	7b41      	ldrb	r1, [r0, #13]
 801b728:	00cb      	lsls	r3, r1, #3
 801b72a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b72e:	7a03      	ldrb	r3, [r0, #8]
 801b730:	0648      	lsls	r0, r1, #25
 801b732:	ea43 0302 	orr.w	r3, r3, r2
 801b736:	bf44      	itt	mi
 801b738:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b73c:	b21b      	sxthmi	r3, r3
 801b73e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b742:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801b746:	462a      	mov	r2, r5
 801b748:	f105 0c08 	add.w	ip, r5, #8
 801b74c:	443b      	add	r3, r7
 801b74e:	4433      	add	r3, r6
 801b750:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801b754:	b29b      	uxth	r3, r3
 801b756:	4635      	mov	r5, r6
 801b758:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b75c:	6810      	ldr	r0, [r2, #0]
 801b75e:	3208      	adds	r2, #8
 801b760:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b764:	4637      	mov	r7, r6
 801b766:	4562      	cmp	r2, ip
 801b768:	c703      	stmia	r7!, {r0, r1}
 801b76a:	463e      	mov	r6, r7
 801b76c:	d1f6      	bne.n	801b75c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801b76e:	6810      	ldr	r0, [r2, #0]
 801b770:	6038      	str	r0, [r7, #0]
 801b772:	8892      	ldrh	r2, [r2, #4]
 801b774:	80ba      	strh	r2, [r7, #4]
 801b776:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b77a:	10db      	asrs	r3, r3, #3
 801b77c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b780:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b788:	4313      	orrs	r3, r2
 801b78a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801b78e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b792:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801b796:	1a9b      	subs	r3, r3, r2
 801b798:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801b79c:	e771      	b.n	801b682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b79e:	f023 0204 	bic.w	r2, r3, #4
 801b7a2:	f640 611b 	movw	r1, #3611	; 0xe1b
 801b7a6:	428a      	cmp	r2, r1
 801b7a8:	d003      	beq.n	801b7b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801b7aa:	f640 621d 	movw	r2, #3613	; 0xe1d
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d120      	bne.n	801b7f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801b7b2:	3b01      	subs	r3, #1
 801b7b4:	4602      	mov	r2, r0
 801b7b6:	4629      	mov	r1, r5
 801b7b8:	4620      	mov	r0, r4
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	f7ff ff4b 	bl	801b656 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b7c0:	7b41      	ldrb	r1, [r0, #13]
 801b7c2:	00cb      	lsls	r3, r1, #3
 801b7c4:	0649      	lsls	r1, r1, #25
 801b7c6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b7ca:	7a03      	ldrb	r3, [r0, #8]
 801b7cc:	ea43 0302 	orr.w	r3, r3, r2
 801b7d0:	bf44      	itt	mi
 801b7d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b7d6:	b21b      	sxthmi	r3, r3
 801b7d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b7dc:	7b6b      	ldrb	r3, [r5, #13]
 801b7de:	7aaa      	ldrb	r2, [r5, #10]
 801b7e0:	005b      	lsls	r3, r3, #1
 801b7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7e6:	4313      	orrs	r3, r2
 801b7e8:	115a      	asrs	r2, r3, #5
 801b7ea:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b7ee:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801b7f2:	e035      	b.n	801b860 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801b7f4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801b7f8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801b7fc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801b800:	7a2a      	ldrb	r2, [r5, #8]
 801b802:	ea42 0201 	orr.w	r2, r2, r1
 801b806:	f640 6109 	movw	r1, #3593	; 0xe09
 801b80a:	bf1c      	itt	ne
 801b80c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801b810:	b212      	sxthne	r2, r2
 801b812:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b816:	f023 0210 	bic.w	r2, r3, #16
 801b81a:	428a      	cmp	r2, r1
 801b81c:	d003      	beq.n	801b826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801b81e:	f640 6213 	movw	r2, #3603	; 0xe13
 801b822:	4293      	cmp	r3, r2
 801b824:	d129      	bne.n	801b87a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801b826:	7b6e      	ldrb	r6, [r5, #13]
 801b828:	4629      	mov	r1, r5
 801b82a:	0076      	lsls	r6, r6, #1
 801b82c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b830:	7aae      	ldrb	r6, [r5, #10]
 801b832:	4316      	orrs	r6, r2
 801b834:	f640 6213 	movw	r2, #3603	; 0xe13
 801b838:	4293      	cmp	r3, r2
 801b83a:	4602      	mov	r2, r0
 801b83c:	4620      	mov	r0, r4
 801b83e:	bf16      	itet	ne
 801b840:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b844:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b848:	b29b      	uxthne	r3, r3
 801b84a:	f7ff ff04 	bl	801b656 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b84e:	7b43      	ldrb	r3, [r0, #13]
 801b850:	7a82      	ldrb	r2, [r0, #10]
 801b852:	005b      	lsls	r3, r3, #1
 801b854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b858:	4313      	orrs	r3, r2
 801b85a:	1af6      	subs	r6, r6, r3
 801b85c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801b860:	7b69      	ldrb	r1, [r5, #13]
 801b862:	00cb      	lsls	r3, r1, #3
 801b864:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b868:	7a2b      	ldrb	r3, [r5, #8]
 801b86a:	4313      	orrs	r3, r2
 801b86c:	064a      	lsls	r2, r1, #25
 801b86e:	bf44      	itt	mi
 801b870:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b874:	b21b      	sxthmi	r3, r3
 801b876:	1bdb      	subs	r3, r3, r7
 801b878:	e747      	b.n	801b70a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801b87a:	2300      	movs	r3, #0
 801b87c:	e7b7      	b.n	801b7ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801b87e:	bf00      	nop
 801b880:	3fc00079 	.word	0x3fc00079

0801b884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b888:	4604      	mov	r4, r0
 801b88a:	b942      	cbnz	r2, 801b89e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b88c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b890:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801b894:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801b898:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801b89c:	e047      	b.n	801b92e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b89e:	7b51      	ldrb	r1, [r2, #13]
 801b8a0:	8893      	ldrh	r3, [r2, #4]
 801b8a2:	010d      	lsls	r5, r1, #4
 801b8a4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801b8a8:	79d5      	ldrb	r5, [r2, #7]
 801b8aa:	4305      	orrs	r5, r0
 801b8ac:	2d04      	cmp	r5, #4
 801b8ae:	bfcc      	ite	gt
 801b8b0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801b8b4:	f04f 0e01 	movle.w	lr, #1
 801b8b8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801b8bc:	f200 80ab 	bhi.w	801ba16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801b8c0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801b8c4:	4283      	cmp	r3, r0
 801b8c6:	d216      	bcs.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b8c8:	f240 605b 	movw	r0, #1627	; 0x65b
 801b8cc:	4283      	cmp	r3, r0
 801b8ce:	d859      	bhi.n	801b984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801b8d0:	f240 6057 	movw	r0, #1623	; 0x657
 801b8d4:	4283      	cmp	r3, r0
 801b8d6:	d20e      	bcs.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b8d8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b8dc:	d24a      	bcs.n	801b974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801b8de:	f240 604e 	movw	r0, #1614	; 0x64e
 801b8e2:	4283      	cmp	r3, r0
 801b8e4:	d207      	bcs.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b8e6:	f240 601a 	movw	r0, #1562	; 0x61a
 801b8ea:	4283      	cmp	r3, r0
 801b8ec:	d02a      	beq.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b8ee:	d821      	bhi.n	801b934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801b8f0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b8f4:	d35b      	bcc.n	801b9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b8f6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801b8fa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b8fe:	f040 80d0 	bne.w	801baa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b902:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801b906:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b90a:	f040 80ca 	bne.w	801baa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b90e:	00cb      	lsls	r3, r1, #3
 801b910:	0649      	lsls	r1, r1, #25
 801b912:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b916:	7a13      	ldrb	r3, [r2, #8]
 801b918:	ea43 0300 	orr.w	r3, r3, r0
 801b91c:	bf44      	itt	mi
 801b91e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b922:	b21b      	sxthmi	r3, r3
 801b924:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b928:	1b5d      	subs	r5, r3, r5
 801b92a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b92e:	4610      	mov	r0, r2
 801b930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b934:	f240 604b 	movw	r0, #1611	; 0x64b
 801b938:	4283      	cmp	r3, r0
 801b93a:	d338      	bcc.n	801b9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b93c:	f240 604c 	movw	r0, #1612	; 0x64c
 801b940:	4283      	cmp	r3, r0
 801b942:	d9d8      	bls.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b944:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801b948:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801b94c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b950:	f040 80f3 	bne.w	801bb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b954:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b958:	f040 80ef 	bne.w	801bb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b95c:	00cb      	lsls	r3, r1, #3
 801b95e:	064e      	lsls	r6, r1, #25
 801b960:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b964:	7a13      	ldrb	r3, [r2, #8]
 801b966:	ea43 0300 	orr.w	r3, r3, r0
 801b96a:	bf44      	itt	mi
 801b96c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b970:	b21b      	sxthmi	r3, r3
 801b972:	e7d9      	b.n	801b928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801b974:	f240 6054 	movw	r0, #1620	; 0x654
 801b978:	4283      	cmp	r3, r0
 801b97a:	d8e3      	bhi.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b97c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b980:	d9e0      	bls.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b982:	e7b8      	b.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b984:	f240 6074 	movw	r0, #1652	; 0x674
 801b988:	4283      	cmp	r3, r0
 801b98a:	d0b4      	beq.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b98c:	d82d      	bhi.n	801b9ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801b98e:	f240 605e 	movw	r0, #1630	; 0x65e
 801b992:	4283      	cmp	r3, r0
 801b994:	d804      	bhi.n	801b9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801b996:	f240 605d 	movw	r0, #1629	; 0x65d
 801b99a:	4283      	cmp	r3, r0
 801b99c:	d3d2      	bcc.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b99e:	e7aa      	b.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b9a0:	f240 605f 	movw	r0, #1631	; 0x65f
 801b9a4:	4283      	cmp	r3, r0
 801b9a6:	d0cd      	beq.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b9a8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b9ac:	d0a3      	beq.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b9ae:	00cb      	lsls	r3, r1, #3
 801b9b0:	0649      	lsls	r1, r1, #25
 801b9b2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b9b6:	7a13      	ldrb	r3, [r2, #8]
 801b9b8:	ea43 0300 	orr.w	r3, r3, r0
 801b9bc:	bf44      	itt	mi
 801b9be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b9c2:	b21b      	sxthmi	r3, r3
 801b9c4:	1b5d      	subs	r5, r3, r5
 801b9c6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b9ca:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b9ce:	7b53      	ldrb	r3, [r2, #13]
 801b9d0:	015b      	lsls	r3, r3, #5
 801b9d2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b9d6:	7993      	ldrb	r3, [r2, #6]
 801b9d8:	430b      	orrs	r3, r1
 801b9da:	2105      	movs	r1, #5
 801b9dc:	005b      	lsls	r3, r3, #1
 801b9de:	fb93 f3f1 	sdiv	r3, r3, r1
 801b9e2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b9e6:	440b      	add	r3, r1
 801b9e8:	e756      	b.n	801b898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b9ea:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b9ee:	4283      	cmp	r3, r0
 801b9f0:	d809      	bhi.n	801ba06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801b9f2:	f240 60df 	movw	r0, #1759	; 0x6df
 801b9f6:	4283      	cmp	r3, r0
 801b9f8:	f4bf af7d 	bcs.w	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b9fc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ba00:	2b05      	cmp	r3, #5
 801ba02:	d8d4      	bhi.n	801b9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ba04:	e777      	b.n	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ba06:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ba0a:	4283      	cmp	r3, r0
 801ba0c:	d09a      	beq.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba0e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ba12:	4283      	cmp	r3, r0
 801ba14:	e7ca      	b.n	801b9ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ba16:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ba1a:	d22b      	bcs.n	801ba74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ba1c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ba20:	4283      	cmp	r3, r0
 801ba22:	d28f      	bcs.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ba28:	4283      	cmp	r3, r0
 801ba2a:	d816      	bhi.n	801ba5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ba2c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ba30:	4283      	cmp	r3, r0
 801ba32:	f4bf af60 	bcs.w	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ba36:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ba3a:	4283      	cmp	r3, r0
 801ba3c:	d80a      	bhi.n	801ba54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ba3e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ba42:	4283      	cmp	r3, r0
 801ba44:	f4bf af57 	bcs.w	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ba48:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ba4c:	4283      	cmp	r3, r0
 801ba4e:	f43f af79 	beq.w	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba52:	e7ac      	b.n	801b9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ba54:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ba58:	e7f8      	b.n	801ba4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ba5a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ba5e:	4283      	cmp	r3, r0
 801ba60:	d802      	bhi.n	801ba68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ba62:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ba66:	e798      	b.n	801b99a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ba68:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ba6c:	4283      	cmp	r3, r0
 801ba6e:	f47f af42 	bne.w	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ba72:	e767      	b.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba74:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ba78:	4283      	cmp	r3, r0
 801ba7a:	f43f af63 	beq.w	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba7e:	d802      	bhi.n	801ba86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ba80:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ba84:	e7f2      	b.n	801ba6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ba86:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ba8a:	4283      	cmp	r3, r0
 801ba8c:	d805      	bhi.n	801ba9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ba8e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ba92:	4283      	cmp	r3, r0
 801ba94:	f4ff af2f 	bcc.w	801b8f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ba98:	e754      	b.n	801b944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ba9a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ba9e:	4283      	cmp	r3, r0
 801baa0:	e7af      	b.n	801ba02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801baa2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801baa6:	4617      	mov	r7, r2
 801baa8:	f102 0808 	add.w	r8, r2, #8
 801baac:	4666      	mov	r6, ip
 801baae:	6838      	ldr	r0, [r7, #0]
 801bab0:	3708      	adds	r7, #8
 801bab2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bab6:	46e6      	mov	lr, ip
 801bab8:	4547      	cmp	r7, r8
 801baba:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801babe:	46f4      	mov	ip, lr
 801bac0:	d1f5      	bne.n	801baae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801bac2:	6838      	ldr	r0, [r7, #0]
 801bac4:	f8ce 0000 	str.w	r0, [lr]
 801bac8:	88b9      	ldrh	r1, [r7, #4]
 801baca:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bace:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bad2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bad6:	d009      	beq.n	801baec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801bad8:	7b51      	ldrb	r1, [r2, #13]
 801bada:	7992      	ldrb	r2, [r2, #6]
 801badc:	0149      	lsls	r1, r1, #5
 801bade:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bae2:	4311      	orrs	r1, r2
 801bae4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bae8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801baec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801baf0:	b2ad      	uxth	r5, r5
 801baf2:	d00d      	beq.n	801bb10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801baf4:	442b      	add	r3, r5
 801baf6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bafa:	b29b      	uxth	r3, r3
 801bafc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bb00:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bb04:	10db      	asrs	r3, r3, #3
 801bb06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bb0a:	4313      	orrs	r3, r2
 801bb0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bb10:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bb14:	00cb      	lsls	r3, r1, #3
 801bb16:	064f      	lsls	r7, r1, #25
 801bb18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb1c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bb20:	ea43 0302 	orr.w	r3, r3, r2
 801bb24:	bf44      	itt	mi
 801bb26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb2a:	b21b      	sxthmi	r3, r3
 801bb2c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bb30:	1b5b      	subs	r3, r3, r5
 801bb32:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801bb36:	4632      	mov	r2, r6
 801bb38:	e6f9      	b.n	801b92e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bb3a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801bb3e:	4617      	mov	r7, r2
 801bb40:	f102 0908 	add.w	r9, r2, #8
 801bb44:	4666      	mov	r6, ip
 801bb46:	6838      	ldr	r0, [r7, #0]
 801bb48:	3708      	adds	r7, #8
 801bb4a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bb4e:	46e0      	mov	r8, ip
 801bb50:	454f      	cmp	r7, r9
 801bb52:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801bb56:	46c4      	mov	ip, r8
 801bb58:	d1f5      	bne.n	801bb46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801bb5a:	6838      	ldr	r0, [r7, #0]
 801bb5c:	f8c8 0000 	str.w	r0, [r8]
 801bb60:	88b9      	ldrh	r1, [r7, #4]
 801bb62:	f8a8 1004 	strh.w	r1, [r8, #4]
 801bb66:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bb6a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bb6e:	d009      	beq.n	801bb84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801bb70:	7b51      	ldrb	r1, [r2, #13]
 801bb72:	7992      	ldrb	r2, [r2, #6]
 801bb74:	0149      	lsls	r1, r1, #5
 801bb76:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb7a:	4311      	orrs	r1, r2
 801bb7c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bb80:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801bb84:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bb88:	d00e      	beq.n	801bba8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801bb8a:	eba3 030e 	sub.w	r3, r3, lr
 801bb8e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bb98:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bb9c:	10db      	asrs	r3, r3, #3
 801bb9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bba2:	4313      	orrs	r3, r2
 801bba4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bba8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bbac:	00cb      	lsls	r3, r1, #3
 801bbae:	0648      	lsls	r0, r1, #25
 801bbb0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbb4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bbb8:	ea43 0302 	orr.w	r3, r3, r2
 801bbbc:	bf44      	itt	mi
 801bbbe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbc2:	b21b      	sxthmi	r3, r3
 801bbc4:	1b5d      	subs	r5, r3, r5
 801bbc6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bbca:	e7b4      	b.n	801bb36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801bbcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbd0:	461e      	mov	r6, r3
 801bbd2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bbd4:	4604      	mov	r4, r0
 801bbd6:	4617      	mov	r7, r2
 801bbd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bbdc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bbe0:	f7f4 ff0e 	bl	8010a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	b918      	cbnz	r0, 801bbf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801bbe8:	6030      	str	r0, [r6, #0]
 801bbea:	4628      	mov	r0, r5
 801bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	4601      	mov	r1, r0
 801bbf4:	4638      	mov	r0, r7
 801bbf6:	68db      	ldr	r3, [r3, #12]
 801bbf8:	4798      	blx	r3
 801bbfa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bbfe:	4602      	mov	r2, r0
 801bc00:	6030      	str	r0, [r6, #0]
 801bc02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bc06:	d213      	bcs.n	801bc30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801bc08:	4643      	mov	r3, r8
 801bc0a:	4639      	mov	r1, r7
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	f7ff fe39 	bl	801b884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bc12:	6030      	str	r0, [r6, #0]
 801bc14:	6833      	ldr	r3, [r6, #0]
 801bc16:	b143      	cbz	r3, 801bc2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801bc18:	7b5a      	ldrb	r2, [r3, #13]
 801bc1a:	7a9b      	ldrb	r3, [r3, #10]
 801bc1c:	0052      	lsls	r2, r2, #1
 801bc1e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bc22:	4313      	orrs	r3, r2
 801bc24:	bf0c      	ite	eq
 801bc26:	2301      	moveq	r3, #1
 801bc28:	2300      	movne	r3, #0
 801bc2a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801bc2e:	e7dc      	b.n	801bbea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801bc30:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801bc34:	b29b      	uxth	r3, r3
 801bc36:	2b7f      	cmp	r3, #127	; 0x7f
 801bc38:	d804      	bhi.n	801bc44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801bc3a:	4639      	mov	r1, r7
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	f7ff fd15 	bl	801b66c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bc42:	e7e6      	b.n	801bc12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801bc44:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d0e3      	beq.n	801bc14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bc4c:	f640 1302 	movw	r3, #2306	; 0x902
 801bc50:	429d      	cmp	r5, r3
 801bc52:	d1df      	bne.n	801bc14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bc54:	4601      	mov	r1, r0
 801bc56:	4620      	mov	r0, r4
 801bc58:	f7ff fcd9 	bl	801b60e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bc5c:	e7d9      	b.n	801bc12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801bc5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801bc5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc62:	461e      	mov	r6, r3
 801bc64:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bc66:	4604      	mov	r4, r0
 801bc68:	4617      	mov	r7, r2
 801bc6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bc6e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bc72:	f7f4 fec5 	bl	8010a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bc76:	4605      	mov	r5, r0
 801bc78:	b918      	cbnz	r0, 801bc82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801bc7a:	6030      	str	r0, [r6, #0]
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	4601      	mov	r1, r0
 801bc86:	4638      	mov	r0, r7
 801bc88:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801bc8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bc90:	47c8      	blx	r9
 801bc92:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bc96:	4602      	mov	r2, r0
 801bc98:	6030      	str	r0, [r6, #0]
 801bc9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bc9e:	d213      	bcs.n	801bcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801bca0:	4643      	mov	r3, r8
 801bca2:	4639      	mov	r1, r7
 801bca4:	4620      	mov	r0, r4
 801bca6:	f7ff fded 	bl	801b884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bcaa:	6030      	str	r0, [r6, #0]
 801bcac:	6833      	ldr	r3, [r6, #0]
 801bcae:	b143      	cbz	r3, 801bcc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801bcb0:	7b5a      	ldrb	r2, [r3, #13]
 801bcb2:	7a9b      	ldrb	r3, [r3, #10]
 801bcb4:	0052      	lsls	r2, r2, #1
 801bcb6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bcba:	4313      	orrs	r3, r2
 801bcbc:	bf0c      	ite	eq
 801bcbe:	2301      	moveq	r3, #1
 801bcc0:	2300      	movne	r3, #0
 801bcc2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801bcc6:	e7d9      	b.n	801bc7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801bcc8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801bccc:	b29b      	uxth	r3, r3
 801bcce:	2b7f      	cmp	r3, #127	; 0x7f
 801bcd0:	d804      	bhi.n	801bcdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801bcd2:	4639      	mov	r1, r7
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	f7ff fcc9 	bl	801b66c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bcda:	e7e6      	b.n	801bcaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801bcdc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d0e3      	beq.n	801bcac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801bce4:	f640 1302 	movw	r3, #2306	; 0x902
 801bce8:	429d      	cmp	r5, r3
 801bcea:	d1df      	bne.n	801bcac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801bcec:	4601      	mov	r1, r0
 801bcee:	4620      	mov	r0, r4
 801bcf0:	f7ff fc8d 	bl	801b60e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bcf4:	e7d9      	b.n	801bcaa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801bcf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801bcf6:	b510      	push	{r4, lr}
 801bcf8:	4604      	mov	r4, r0
 801bcfa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801bcfe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bd00:	b1e1      	cbz	r1, 801bd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801bd02:	2b0a      	cmp	r3, #10
 801bd04:	d02d      	beq.n	801bd62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801bd06:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801bd08:	3901      	subs	r1, #1
 801bd0a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801bd0e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801bd10:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801bd14:	1c51      	adds	r1, r2, #1
 801bd16:	b289      	uxth	r1, r1
 801bd18:	2901      	cmp	r1, #1
 801bd1a:	bf8a      	itet	hi
 801bd1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801bd20:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801bd22:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801bd24:	1c5a      	adds	r2, r3, #1
 801bd26:	8722      	strh	r2, [r4, #56]	; 0x38
 801bd28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bd2a:	4413      	add	r3, r2
 801bd2c:	b29b      	uxth	r3, r3
 801bd2e:	2b09      	cmp	r3, #9
 801bd30:	bf88      	it	hi
 801bd32:	3b0a      	subhi	r3, #10
 801bd34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bd38:	8458      	strh	r0, [r3, #34]	; 0x22
 801bd3a:	e7de      	b.n	801bcfa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801bd3c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bd3e:	2b0a      	cmp	r3, #10
 801bd40:	d00f      	beq.n	801bd62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801bd42:	4620      	mov	r0, r4
 801bd44:	f7ff fc11 	bl	801b56a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801bd48:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801bd4a:	1c5a      	adds	r2, r3, #1
 801bd4c:	8722      	strh	r2, [r4, #56]	; 0x38
 801bd4e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bd50:	4413      	add	r3, r2
 801bd52:	b29b      	uxth	r3, r3
 801bd54:	2b09      	cmp	r3, #9
 801bd56:	bf88      	it	hi
 801bd58:	3b0a      	subhi	r3, #10
 801bd5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bd5e:	8458      	strh	r0, [r3, #34]	; 0x22
 801bd60:	e7ec      	b.n	801bd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801bd62:	bd10      	pop	{r4, pc}

0801bd64 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801bd64:	b538      	push	{r3, r4, r5, lr}
 801bd66:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bd68:	4604      	mov	r4, r0
 801bd6a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801bd6e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801bd70:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801bd72:	3a01      	subs	r2, #1
 801bd74:	8702      	strh	r2, [r0, #56]	; 0x38
 801bd76:	1c5a      	adds	r2, r3, #1
 801bd78:	b292      	uxth	r2, r2
 801bd7a:	2a09      	cmp	r2, #9
 801bd7c:	bf8a      	itet	hi
 801bd7e:	3b09      	subhi	r3, #9
 801bd80:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801bd82:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801bd84:	f7ff ffb7 	bl	801bcf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bd88:	8c23      	ldrh	r3, [r4, #32]
 801bd8a:	2b01      	cmp	r3, #1
 801bd8c:	bf9c      	itt	ls
 801bd8e:	3301      	addls	r3, #1
 801bd90:	8423      	strhls	r3, [r4, #32]
 801bd92:	8be3      	ldrh	r3, [r4, #30]
 801bd94:	b90b      	cbnz	r3, 801bd9a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801bd96:	2302      	movs	r3, #2
 801bd98:	83e3      	strh	r3, [r4, #30]
 801bd9a:	8be3      	ldrh	r3, [r4, #30]
 801bd9c:	4628      	mov	r0, r5
 801bd9e:	3b01      	subs	r3, #1
 801bda0:	b29b      	uxth	r3, r3
 801bda2:	83e3      	strh	r3, [r4, #30]
 801bda4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bda8:	8365      	strh	r5, [r4, #26]
 801bdaa:	bd38      	pop	{r3, r4, r5, pc}

0801bdac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801bdac:	428a      	cmp	r2, r1
 801bdae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdb2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801bdb4:	d932      	bls.n	801be1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801bdb6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801bdb8:	1a54      	subs	r4, r2, r1
 801bdba:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801bdbe:	19ee      	adds	r6, r5, r7
 801bdc0:	fa1f fe84 	uxth.w	lr, r4
 801bdc4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801bdc8:	3e01      	subs	r6, #1
 801bdca:	b2b4      	uxth	r4, r6
 801bdcc:	eba4 090e 	sub.w	r9, r4, lr
 801bdd0:	fa1f f989 	uxth.w	r9, r9
 801bdd4:	2c09      	cmp	r4, #9
 801bdd6:	4626      	mov	r6, r4
 801bdd8:	bf88      	it	hi
 801bdda:	f1a4 060a 	subhi.w	r6, r4, #10
 801bdde:	f1bc 0f00 	cmp.w	ip, #0
 801bde2:	f104 34ff 	add.w	r4, r4, #4294967295
 801bde6:	bf08      	it	eq
 801bde8:	f04f 0c02 	moveq.w	ip, #2
 801bdec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801bdf0:	b2a4      	uxth	r4, r4
 801bdf2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bdf6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801bdfa:	454c      	cmp	r4, r9
 801bdfc:	fa1f fc8c 	uxth.w	ip, ip
 801be00:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801be04:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801be08:	d1e4      	bne.n	801bdd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801be0a:	eba5 050e 	sub.w	r5, r5, lr
 801be0e:	eb0e 0408 	add.w	r4, lr, r8
 801be12:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801be16:	8705      	strh	r5, [r0, #56]	; 0x38
 801be18:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801be1c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801be1e:	250a      	movs	r5, #10
 801be20:	1a64      	subs	r4, r4, r1
 801be22:	4439      	add	r1, r7
 801be24:	b289      	uxth	r1, r1
 801be26:	8704      	strh	r4, [r0, #56]	; 0x38
 801be28:	2909      	cmp	r1, #9
 801be2a:	bf88      	it	hi
 801be2c:	390a      	subhi	r1, #10
 801be2e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801be30:	b18a      	cbz	r2, 801be56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801be32:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801be34:	3a01      	subs	r2, #1
 801be36:	3101      	adds	r1, #1
 801be38:	b292      	uxth	r2, r2
 801be3a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801be3e:	8701      	strh	r1, [r0, #56]	; 0x38
 801be40:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801be42:	b901      	cbnz	r1, 801be46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801be44:	86c5      	strh	r5, [r0, #54]	; 0x36
 801be46:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801be48:	3901      	subs	r1, #1
 801be4a:	b289      	uxth	r1, r1
 801be4c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801be4e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801be52:	844c      	strh	r4, [r1, #34]	; 0x22
 801be54:	e7ec      	b.n	801be30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801be56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be5a:	f7ff bf4c 	b.w	801bcf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801be5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801be5e:	b570      	push	{r4, r5, r6, lr}
 801be60:	2500      	movs	r5, #0
 801be62:	4295      	cmp	r5, r2
 801be64:	d011      	beq.n	801be8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801be66:	8bc4      	ldrh	r4, [r0, #30]
 801be68:	f831 6b02 	ldrh.w	r6, [r1], #2
 801be6c:	4414      	add	r4, r2
 801be6e:	3c01      	subs	r4, #1
 801be70:	1b64      	subs	r4, r4, r5
 801be72:	b2a4      	uxth	r4, r4
 801be74:	2c01      	cmp	r4, #1
 801be76:	bf88      	it	hi
 801be78:	3c02      	subhi	r4, #2
 801be7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801be7e:	8b64      	ldrh	r4, [r4, #26]
 801be80:	42b4      	cmp	r4, r6
 801be82:	d117      	bne.n	801beb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801be84:	3501      	adds	r5, #1
 801be86:	b2ad      	uxth	r5, r5
 801be88:	e7eb      	b.n	801be62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801be8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801be8e:	2400      	movs	r4, #0
 801be90:	4413      	add	r3, r2
 801be92:	b2a2      	uxth	r2, r4
 801be94:	429a      	cmp	r2, r3
 801be96:	da0f      	bge.n	801beb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801be98:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801be9a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801be9e:	3401      	adds	r4, #1
 801bea0:	4432      	add	r2, r6
 801bea2:	b292      	uxth	r2, r2
 801bea4:	2a09      	cmp	r2, #9
 801bea6:	bf88      	it	hi
 801bea8:	3a0a      	subhi	r2, #10
 801beaa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801beae:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801beb0:	42aa      	cmp	r2, r5
 801beb2:	d0ee      	beq.n	801be92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801beb4:	2000      	movs	r0, #0
 801beb6:	bd70      	pop	{r4, r5, r6, pc}
 801beb8:	2001      	movs	r0, #1
 801beba:	e7fc      	b.n	801beb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801bebc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801bebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec0:	4605      	mov	r5, r0
 801bec2:	4616      	mov	r6, r2
 801bec4:	1c8c      	adds	r4, r1, #2
 801bec6:	8809      	ldrh	r1, [r1, #0]
 801bec8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801becc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801bed0:	42b3      	cmp	r3, r6
 801bed2:	d124      	bne.n	801bf1e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801bed4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801bed8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801bedc:	f001 070f 	and.w	r7, r1, #15
 801bee0:	4652      	mov	r2, sl
 801bee2:	f8cd 8000 	str.w	r8, [sp]
 801bee6:	464b      	mov	r3, r9
 801bee8:	4621      	mov	r1, r4
 801beea:	4628      	mov	r0, r5
 801beec:	f7ff ffb7 	bl	801be5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801bef0:	4683      	mov	fp, r0
 801bef2:	b168      	cbz	r0, 801bf10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801bef4:	eb0a 0109 	add.w	r1, sl, r9
 801bef8:	463a      	mov	r2, r7
 801befa:	4628      	mov	r0, r5
 801befc:	4441      	add	r1, r8
 801befe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801bf02:	4649      	mov	r1, r9
 801bf04:	f7ff ff52 	bl	801bdac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801bf08:	4658      	mov	r0, fp
 801bf0a:	b003      	add	sp, #12
 801bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf10:	eb07 010a 	add.w	r1, r7, sl
 801bf14:	4449      	add	r1, r9
 801bf16:	4441      	add	r1, r8
 801bf18:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801bf1c:	e7d2      	b.n	801bec4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801bf1e:	f04f 0b00 	mov.w	fp, #0
 801bf22:	e7f1      	b.n	801bf08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801bf24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bf24:	b570      	push	{r4, r5, r6, lr}
 801bf26:	8810      	ldrh	r0, [r2, #0]
 801bf28:	4298      	cmp	r0, r3
 801bf2a:	d817      	bhi.n	801bf5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bf2c:	1e48      	subs	r0, r1, #1
 801bf2e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bf32:	4298      	cmp	r0, r3
 801bf34:	d312      	bcc.n	801bf5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bf36:	2400      	movs	r4, #0
 801bf38:	428c      	cmp	r4, r1
 801bf3a:	d20f      	bcs.n	801bf5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bf3c:	1860      	adds	r0, r4, r1
 801bf3e:	1040      	asrs	r0, r0, #1
 801bf40:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bf44:	0085      	lsls	r5, r0, #2
 801bf46:	42b3      	cmp	r3, r6
 801bf48:	d902      	bls.n	801bf50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bf4a:	3001      	adds	r0, #1
 801bf4c:	b284      	uxth	r4, r0
 801bf4e:	e7f3      	b.n	801bf38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bf50:	d201      	bcs.n	801bf56 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801bf52:	b281      	uxth	r1, r0
 801bf54:	e7f0      	b.n	801bf38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bf56:	442a      	add	r2, r5
 801bf58:	8850      	ldrh	r0, [r2, #2]
 801bf5a:	bd70      	pop	{r4, r5, r6, pc}
 801bf5c:	2000      	movs	r0, #0
 801bf5e:	e7fc      	b.n	801bf5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801bf60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf64:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801bf66:	4604      	mov	r4, r0
 801bf68:	260b      	movs	r6, #11
 801bf6a:	886f      	ldrh	r7, [r5, #2]
 801bf6c:	087f      	lsrs	r7, r7, #1
 801bf6e:	3e01      	subs	r6, #1
 801bf70:	d013      	beq.n	801bf9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801bf72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801bf74:	462a      	mov	r2, r5
 801bf76:	4639      	mov	r1, r7
 801bf78:	4620      	mov	r0, r4
 801bf7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bf7e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bf82:	4643      	mov	r3, r8
 801bf84:	f7ff ffce 	bl	801bf24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bf88:	b138      	cbz	r0, 801bf9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801bf8a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bf8e:	4642      	mov	r2, r8
 801bf90:	4620      	mov	r0, r4
 801bf92:	f7ff ff93 	bl	801bebc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bf96:	2800      	cmp	r0, #0
 801bf98:	d1e9      	bne.n	801bf6e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801bf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801bfa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bfa0:	b570      	push	{r4, r5, r6, lr}
 801bfa2:	694a      	ldr	r2, [r1, #20]
 801bfa4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801bfa6:	684b      	ldr	r3, [r1, #4]
 801bfa8:	1b54      	subs	r4, r2, r5
 801bfaa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801bfac:	f000 8106 	beq.w	801c1bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bfb0:	1b9b      	subs	r3, r3, r6
 801bfb2:	d003      	beq.n	801bfbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bfb4:	4363      	muls	r3, r4
 801bfb6:	2210      	movs	r2, #16
 801bfb8:	fb93 f3f2 	sdiv	r3, r3, r2
 801bfbc:	680c      	ldr	r4, [r1, #0]
 801bfbe:	698a      	ldr	r2, [r1, #24]
 801bfc0:	1b65      	subs	r5, r4, r5
 801bfc2:	f000 80fd 	beq.w	801c1c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bfc6:	1b92      	subs	r2, r2, r6
 801bfc8:	d003      	beq.n	801bfd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bfca:	436a      	muls	r2, r5
 801bfcc:	2410      	movs	r4, #16
 801bfce:	fb92 f2f4 	sdiv	r2, r2, r4
 801bfd2:	1a9b      	subs	r3, r3, r2
 801bfd4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c1fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bfd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bfdc:	460a      	mov	r2, r1
 801bfde:	ee07 3a90 	vmov	s15, r3
 801bfe2:	f100 040c 	add.w	r4, r0, #12
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfec:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bff0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bff4:	eeb1 6a43 	vneg.f32	s12, s6
 801bff8:	edd2 7a02 	vldr	s15, [r2, #8]
 801bffc:	3214      	adds	r2, #20
 801bffe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c002:	ece3 6a01 	vstmia	r3!, {s13}
 801c006:	429c      	cmp	r4, r3
 801c008:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c00c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c010:	edc3 7a02 	vstr	s15, [r3, #8]
 801c014:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c018:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c01c:	edc3 7a05 	vstr	s15, [r3, #20]
 801c020:	d1ea      	bne.n	801bff8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c022:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c024:	698b      	ldr	r3, [r1, #24]
 801c026:	edd0 4a02 	vldr	s9, [r0, #8]
 801c02a:	1a9b      	subs	r3, r3, r2
 801c02c:	edd0 3a00 	vldr	s7, [r0]
 801c030:	edd0 6a01 	vldr	s13, [r0, #4]
 801c034:	ee07 3a90 	vmov	s15, r3
 801c038:	684b      	ldr	r3, [r1, #4]
 801c03a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c03e:	ed90 5a05 	vldr	s10, [r0, #20]
 801c042:	1a9b      	subs	r3, r3, r2
 801c044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c048:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c04c:	ed90 2a03 	vldr	s4, [r0, #12]
 801c050:	ee07 3a10 	vmov	s14, r3
 801c054:	edd0 5a04 	vldr	s11, [r0, #16]
 801c058:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c05c:	ed90 1a07 	vldr	s2, [r0, #28]
 801c060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c064:	edd0 2a06 	vldr	s5, [r0, #24]
 801c068:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c06c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c070:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c074:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c078:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c07c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c080:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c084:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c086:	694a      	ldr	r2, [r1, #20]
 801c088:	1b13      	subs	r3, r2, r4
 801c08a:	ee07 3a10 	vmov	s14, r3
 801c08e:	680b      	ldr	r3, [r1, #0]
 801c090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c094:	1b1b      	subs	r3, r3, r4
 801c096:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c09a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c09e:	ee07 3a10 	vmov	s14, r3
 801c0a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c0a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c0aa:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c0ae:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c0b2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c0b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c0b8:	698b      	ldr	r3, [r1, #24]
 801c0ba:	1a9b      	subs	r3, r3, r2
 801c0bc:	ee06 3a90 	vmov	s13, r3
 801c0c0:	684b      	ldr	r3, [r1, #4]
 801c0c2:	1a9b      	subs	r3, r3, r2
 801c0c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c0c8:	ee07 3a10 	vmov	s14, r3
 801c0cc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c0d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c0d4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c0d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c0dc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c0e0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c0e4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c0e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c0ea:	694a      	ldr	r2, [r1, #20]
 801c0ec:	1b13      	subs	r3, r2, r4
 801c0ee:	ee07 3a10 	vmov	s14, r3
 801c0f2:	680b      	ldr	r3, [r1, #0]
 801c0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c0f8:	1b1b      	subs	r3, r3, r4
 801c0fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c0fe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c102:	ee07 3a10 	vmov	s14, r3
 801c106:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c10a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c10e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c112:	edd0 5a08 	vldr	s11, [r0, #32]
 801c116:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c11a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c11e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c122:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c126:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c128:	698b      	ldr	r3, [r1, #24]
 801c12a:	1a9b      	subs	r3, r3, r2
 801c12c:	ee07 3a10 	vmov	s14, r3
 801c130:	684b      	ldr	r3, [r1, #4]
 801c132:	1a9b      	subs	r3, r3, r2
 801c134:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c138:	ee01 3a90 	vmov	s3, r3
 801c13c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c140:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c144:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c148:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c14c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c150:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c154:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c158:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c15a:	694a      	ldr	r2, [r1, #20]
 801c15c:	1b13      	subs	r3, r2, r4
 801c15e:	ee03 3a10 	vmov	s6, r3
 801c162:	680b      	ldr	r3, [r1, #0]
 801c164:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c168:	1b1b      	subs	r3, r3, r4
 801c16a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c16e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c172:	ee03 3a10 	vmov	s6, r3
 801c176:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c17a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c17e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c182:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c186:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c18a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c18e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c192:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c19a:	dd13      	ble.n	801c1c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c19c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c1a0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c1a4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c1a6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c1aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b2:	dd15      	ble.n	801c1e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c1b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c1b8:	6403      	str	r3, [r0, #64]	; 0x40
 801c1ba:	bd70      	pop	{r4, r5, r6, pc}
 801c1bc:	4623      	mov	r3, r4
 801c1be:	e6fd      	b.n	801bfbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c1c0:	462a      	mov	r2, r5
 801c1c2:	e706      	b.n	801bfd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c1c4:	d502      	bpl.n	801c1cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c1c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c1ca:	e7e9      	b.n	801c1a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c1cc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c1d0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c1d4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1dc:	dade      	bge.n	801c19c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c1de:	e7f2      	b.n	801c1c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c1e0:	d502      	bpl.n	801c1e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c1e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c1e6:	e7e7      	b.n	801c1b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c1e8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c1ec:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c1f0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1f8:	dadc      	bge.n	801c1b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c1fa:	e7f2      	b.n	801c1e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c1fc:	3d800000 	.word	0x3d800000

0801c200 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c204:	2714      	movs	r7, #20
 801c206:	435f      	muls	r7, r3
 801c208:	eb02 0c07 	add.w	ip, r2, r7
 801c20c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c210:	f115 0e0f 	adds.w	lr, r5, #15
 801c214:	f100 80a2 	bmi.w	801c35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c218:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c21c:	9c08      	ldr	r4, [sp, #32]
 801c21e:	2614      	movs	r6, #20
 801c220:	f8c0 e014 	str.w	lr, [r0, #20]
 801c224:	4366      	muls	r6, r4
 801c226:	eb02 0806 	add.w	r8, r2, r6
 801c22a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c22e:	f115 040f 	adds.w	r4, r5, #15
 801c232:	f100 809f 	bmi.w	801c374 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c236:	1124      	asrs	r4, r4, #4
 801c238:	eba4 040e 	sub.w	r4, r4, lr
 801c23c:	6184      	str	r4, [r0, #24]
 801c23e:	2c00      	cmp	r4, #0
 801c240:	f000 808a 	beq.w	801c358 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c244:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c248:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c24c:	5995      	ldr	r5, [r2, r6]
 801c24e:	eba4 0809 	sub.w	r8, r4, r9
 801c252:	59d4      	ldr	r4, [r2, r7]
 801c254:	eba5 0a04 	sub.w	sl, r5, r4
 801c258:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c25c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c260:	fb0e fe05 	mul.w	lr, lr, r5
 801c264:	fb0a ee19 	mls	lr, sl, r9, lr
 801c268:	fb08 e404 	mla	r4, r8, r4, lr
 801c26c:	3c01      	subs	r4, #1
 801c26e:	19a4      	adds	r4, r4, r6
 801c270:	f100 808c 	bmi.w	801c38c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c274:	fb94 fef6 	sdiv	lr, r4, r6
 801c278:	fb06 441e 	mls	r4, r6, lr, r4
 801c27c:	f8c0 e000 	str.w	lr, [r0]
 801c280:	6104      	str	r4, [r0, #16]
 801c282:	2d00      	cmp	r5, #0
 801c284:	f2c0 8095 	blt.w	801c3b2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c288:	fb95 f4f6 	sdiv	r4, r5, r6
 801c28c:	fb06 5514 	mls	r5, r6, r4, r5
 801c290:	6044      	str	r4, [r0, #4]
 801c292:	6085      	str	r5, [r0, #8]
 801c294:	60c6      	str	r6, [r0, #12]
 801c296:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c29a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c29e:	6945      	ldr	r5, [r0, #20]
 801c2a0:	59d2      	ldr	r2, [r2, r7]
 801c2a2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c2a6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801c3d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c2aa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c2ae:	ee07 4a10 	vmov	s14, r4
 801c2b2:	6804      	ldr	r4, [r0, #0]
 801c2b4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c2b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2bc:	ee07 2a90 	vmov	s15, r2
 801c2c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c2c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c2c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c2cc:	edd3 6a00 	vldr	s13, [r3]
 801c2d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c2d4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c2d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c2dc:	edc0 6a07 	vstr	s13, [r0, #28]
 801c2e0:	edd0 6a01 	vldr	s13, [r0, #4]
 801c2e4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c2e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c2ec:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c2f0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c2f4:	ed80 6a08 	vstr	s12, [r0, #32]
 801c2f8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c2fa:	6242      	str	r2, [r0, #36]	; 0x24
 801c2fc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c300:	ed93 6a03 	vldr	s12, [r3, #12]
 801c304:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c308:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c30c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c310:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c314:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c318:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c31c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c320:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c324:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c326:	6302      	str	r2, [r0, #48]	; 0x30
 801c328:	ed93 6a06 	vldr	s12, [r3, #24]
 801c32c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c330:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c334:	eeb0 7a46 	vmov.f32	s14, s12
 801c338:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c33c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c340:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c344:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c348:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c34c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c350:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801c354:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801c356:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c35c:	2410      	movs	r4, #16
 801c35e:	f1c5 0501 	rsb	r5, r5, #1
 801c362:	fb9e fef4 	sdiv	lr, lr, r4
 801c366:	f015 050f 	ands.w	r5, r5, #15
 801c36a:	bf18      	it	ne
 801c36c:	2501      	movne	r5, #1
 801c36e:	ebae 0e05 	sub.w	lr, lr, r5
 801c372:	e753      	b.n	801c21c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c374:	f04f 0910 	mov.w	r9, #16
 801c378:	f1c5 0501 	rsb	r5, r5, #1
 801c37c:	fb94 f4f9 	sdiv	r4, r4, r9
 801c380:	f015 050f 	ands.w	r5, r5, #15
 801c384:	bf18      	it	ne
 801c386:	2501      	movne	r5, #1
 801c388:	1b64      	subs	r4, r4, r5
 801c38a:	e755      	b.n	801c238 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c38c:	4264      	negs	r4, r4
 801c38e:	fb94 fef6 	sdiv	lr, r4, r6
 801c392:	f1ce 0800 	rsb	r8, lr, #0
 801c396:	fb06 441e 	mls	r4, r6, lr, r4
 801c39a:	f8c0 8000 	str.w	r8, [r0]
 801c39e:	6104      	str	r4, [r0, #16]
 801c3a0:	2c00      	cmp	r4, #0
 801c3a2:	f43f af6e 	beq.w	801c282 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c3a6:	ea6f 0e0e 	mvn.w	lr, lr
 801c3aa:	1b34      	subs	r4, r6, r4
 801c3ac:	f8c0 e000 	str.w	lr, [r0]
 801c3b0:	e766      	b.n	801c280 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c3b2:	426d      	negs	r5, r5
 801c3b4:	fb95 f4f6 	sdiv	r4, r5, r6
 801c3b8:	f1c4 0e00 	rsb	lr, r4, #0
 801c3bc:	fb06 5514 	mls	r5, r6, r4, r5
 801c3c0:	f8c0 e004 	str.w	lr, [r0, #4]
 801c3c4:	6085      	str	r5, [r0, #8]
 801c3c6:	2d00      	cmp	r5, #0
 801c3c8:	f43f af64 	beq.w	801c294 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c3cc:	43e4      	mvns	r4, r4
 801c3ce:	1b75      	subs	r5, r6, r5
 801c3d0:	6044      	str	r4, [r0, #4]
 801c3d2:	e75e      	b.n	801c292 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c3d4:	3d800000 	.word	0x3d800000

0801c3d8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c3d8:	4602      	mov	r2, r0
 801c3da:	b148      	cbz	r0, 801c3f0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c3dc:	2300      	movs	r3, #0
 801c3de:	b298      	uxth	r0, r3
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c3e6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c3ea:	2900      	cmp	r1, #0
 801c3ec:	d1f7      	bne.n	801c3de <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c3ee:	4770      	bx	lr
 801c3f0:	4770      	bx	lr

0801c3f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c3f2:	b530      	push	{r4, r5, lr}
 801c3f4:	4604      	mov	r4, r0
 801c3f6:	b159      	cbz	r1, 801c410 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c3f8:	b148      	cbz	r0, 801c40e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	b298      	uxth	r0, r3
 801c3fe:	4282      	cmp	r2, r0
 801c400:	d905      	bls.n	801c40e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c402:	5ccd      	ldrb	r5, [r1, r3]
 801c404:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c408:	3301      	adds	r3, #1
 801c40a:	2d00      	cmp	r5, #0
 801c40c:	d1f6      	bne.n	801c3fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c40e:	bd30      	pop	{r4, r5, pc}
 801c410:	4608      	mov	r0, r1
 801c412:	e7fc      	b.n	801c40e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c414 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c416:	468c      	mov	ip, r1
 801c418:	b08b      	sub	sp, #44	; 0x2c
 801c41a:	2100      	movs	r1, #0
 801c41c:	ae01      	add	r6, sp, #4
 801c41e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c422:	211f      	movs	r1, #31
 801c424:	fbb0 f7f3 	udiv	r7, r0, r3
 801c428:	fb03 0517 	mls	r5, r3, r7, r0
 801c42c:	4638      	mov	r0, r7
 801c42e:	b2ec      	uxtb	r4, r5
 801c430:	2d09      	cmp	r5, #9
 801c432:	bfd4      	ite	le
 801c434:	3430      	addle	r4, #48	; 0x30
 801c436:	3457      	addgt	r4, #87	; 0x57
 801c438:	b2e4      	uxtb	r4, r4
 801c43a:	558c      	strb	r4, [r1, r6]
 801c43c:	1e4c      	subs	r4, r1, #1
 801c43e:	b92f      	cbnz	r7, 801c44c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801c440:	4431      	add	r1, r6
 801c442:	4660      	mov	r0, ip
 801c444:	f7ff ffd5 	bl	801c3f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c448:	b00b      	add	sp, #44	; 0x2c
 801c44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c44c:	4621      	mov	r1, r4
 801c44e:	e7e9      	b.n	801c424 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801c450 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c450:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c452:	4607      	mov	r7, r0
 801c454:	b08b      	sub	sp, #44	; 0x2c
 801c456:	4608      	mov	r0, r1
 801c458:	b341      	cbz	r1, 801c4ac <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c45a:	1e99      	subs	r1, r3, #2
 801c45c:	2922      	cmp	r1, #34	; 0x22
 801c45e:	d825      	bhi.n	801c4ac <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c460:	2100      	movs	r1, #0
 801c462:	463c      	mov	r4, r7
 801c464:	261f      	movs	r6, #31
 801c466:	f10d 0c04 	add.w	ip, sp, #4
 801c46a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c46e:	1e71      	subs	r1, r6, #1
 801c470:	fb94 fef3 	sdiv	lr, r4, r3
 801c474:	fb03 441e 	mls	r4, r3, lr, r4
 801c478:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c47c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c480:	b2ec      	uxtb	r4, r5
 801c482:	2d09      	cmp	r5, #9
 801c484:	bfd4      	ite	le
 801c486:	3430      	addle	r4, #48	; 0x30
 801c488:	3457      	addgt	r4, #87	; 0x57
 801c48a:	b2e4      	uxtb	r4, r4
 801c48c:	f80c 4006 	strb.w	r4, [ip, r6]
 801c490:	4674      	mov	r4, lr
 801c492:	b96c      	cbnz	r4, 801c4b0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c494:	2f00      	cmp	r7, #0
 801c496:	da05      	bge.n	801c4a4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c498:	ab0a      	add	r3, sp, #40	; 0x28
 801c49a:	4419      	add	r1, r3
 801c49c:	232d      	movs	r3, #45	; 0x2d
 801c49e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c4a2:	1eb1      	subs	r1, r6, #2
 801c4a4:	3101      	adds	r1, #1
 801c4a6:	4461      	add	r1, ip
 801c4a8:	f7ff ffa3 	bl	801c3f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c4ac:	b00b      	add	sp, #44	; 0x2c
 801c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4b0:	460e      	mov	r6, r1
 801c4b2:	e7dc      	b.n	801c46e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c4b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b8:	b085      	sub	sp, #20
 801c4ba:	4691      	mov	r9, r2
 801c4bc:	6802      	ldr	r2, [r0, #0]
 801c4be:	4688      	mov	r8, r1
 801c4c0:	461c      	mov	r4, r3
 801c4c2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c4c6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c4ca:	4683      	mov	fp, r0
 801c4cc:	4610      	mov	r0, r2
 801c4ce:	9103      	str	r1, [sp, #12]
 801c4d0:	9302      	str	r3, [sp, #8]
 801c4d2:	9201      	str	r2, [sp, #4]
 801c4d4:	f7ff ff80 	bl	801c3d8 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c4d8:	f1b8 0f00 	cmp.w	r8, #0
 801c4dc:	bf0c      	ite	eq
 801c4de:	4684      	moveq	ip, r0
 801c4e0:	f100 0c01 	addne.w	ip, r0, #1
 801c4e4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801c4e8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c4ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c4ee:	fa1f fc8c 	uxth.w	ip, ip
 801c4f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c4f4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801c4f8:	9903      	ldr	r1, [sp, #12]
 801c4fa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c4fe:	d041      	beq.n	801c584 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c500:	d834      	bhi.n	801c56c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c502:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801c506:	d059      	beq.n	801c5bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c508:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801c50c:	d03a      	beq.n	801c584 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c50e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801c512:	d034      	beq.n	801c57e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c514:	2400      	movs	r4, #0
 801c516:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c51a:	3a01      	subs	r2, #1
 801c51c:	b169      	cbz	r1, 801c53a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c51e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c520:	458c      	cmp	ip, r1
 801c522:	da09      	bge.n	801c538 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c524:	eba1 010c 	sub.w	r1, r1, ip
 801c528:	b289      	uxth	r1, r1
 801c52a:	b933      	cbnz	r3, 801c53a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c52c:	2e00      	cmp	r6, #0
 801c52e:	d051      	beq.n	801c5d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c530:	2800      	cmp	r0, #0
 801c532:	d04f      	beq.n	801c5d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c534:	440c      	add	r4, r1
 801c536:	b2a4      	uxth	r4, r4
 801c538:	2100      	movs	r1, #0
 801c53a:	682b      	ldr	r3, [r5, #0]
 801c53c:	4293      	cmp	r3, r2
 801c53e:	da07      	bge.n	801c550 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c540:	f1b8 0f00 	cmp.w	r8, #0
 801c544:	d004      	beq.n	801c550 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c546:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801c54a:	682b      	ldr	r3, [r5, #0]
 801c54c:	3301      	adds	r3, #1
 801c54e:	602b      	str	r3, [r5, #0]
 801c550:	2730      	movs	r7, #48	; 0x30
 801c552:	2c00      	cmp	r4, #0
 801c554:	d04e      	beq.n	801c5f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c556:	682e      	ldr	r6, [r5, #0]
 801c558:	3c01      	subs	r4, #1
 801c55a:	42b2      	cmp	r2, r6
 801c55c:	b2a4      	uxth	r4, r4
 801c55e:	dd49      	ble.n	801c5f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c560:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c564:	682b      	ldr	r3, [r5, #0]
 801c566:	3301      	adds	r3, #1
 801c568:	602b      	str	r3, [r5, #0]
 801c56a:	e7f2      	b.n	801c552 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801c56c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801c570:	d01d      	beq.n	801c5ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801c572:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801c576:	d002      	beq.n	801c57e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c578:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801c57c:	e7c9      	b.n	801c512 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801c57e:	4684      	mov	ip, r0
 801c580:	f04f 0800 	mov.w	r8, #0
 801c584:	2c00      	cmp	r4, #0
 801c586:	d0c6      	beq.n	801c516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c588:	b947      	cbnz	r7, 801c59c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c58a:	2801      	cmp	r0, #1
 801c58c:	d106      	bne.n	801c59c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c58e:	8814      	ldrh	r4, [r2, #0]
 801c590:	2c30      	cmp	r4, #48	; 0x30
 801c592:	bf02      	ittt	eq
 801c594:	3202      	addeq	r2, #2
 801c596:	4638      	moveq	r0, r7
 801c598:	f8cb 2000 	streq.w	r2, [fp]
 801c59c:	45bc      	cmp	ip, r7
 801c59e:	da14      	bge.n	801c5ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801c5a0:	b2bf      	uxth	r7, r7
 801c5a2:	eba7 040c 	sub.w	r4, r7, ip
 801c5a6:	46bc      	mov	ip, r7
 801c5a8:	b2a4      	uxth	r4, r4
 801c5aa:	2600      	movs	r6, #0
 801c5ac:	e7b3      	b.n	801c516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c5ae:	4684      	mov	ip, r0
 801c5b0:	b16c      	cbz	r4, 801c5ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801c5b2:	42b8      	cmp	r0, r7
 801c5b4:	dd00      	ble.n	801c5b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801c5b6:	b2b8      	uxth	r0, r7
 801c5b8:	2400      	movs	r4, #0
 801c5ba:	e003      	b.n	801c5c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801c5bc:	f04f 0c01 	mov.w	ip, #1
 801c5c0:	2400      	movs	r4, #0
 801c5c2:	4660      	mov	r0, ip
 801c5c4:	4626      	mov	r6, r4
 801c5c6:	46a0      	mov	r8, r4
 801c5c8:	e7a5      	b.n	801c516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c5ca:	2400      	movs	r4, #0
 801c5cc:	e7ed      	b.n	801c5aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801c5ce:	4626      	mov	r6, r4
 801c5d0:	46a0      	mov	r8, r4
 801c5d2:	e7a0      	b.n	801c516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c5d4:	2900      	cmp	r1, #0
 801c5d6:	d0b0      	beq.n	801c53a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c5d8:	2720      	movs	r7, #32
 801c5da:	682e      	ldr	r6, [r5, #0]
 801c5dc:	2900      	cmp	r1, #0
 801c5de:	d0ac      	beq.n	801c53a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c5e0:	3901      	subs	r1, #1
 801c5e2:	4296      	cmp	r6, r2
 801c5e4:	b289      	uxth	r1, r1
 801c5e6:	daa7      	bge.n	801c538 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c5e8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c5ec:	682b      	ldr	r3, [r5, #0]
 801c5ee:	3301      	adds	r3, #1
 801c5f0:	602b      	str	r3, [r5, #0]
 801c5f2:	e7f2      	b.n	801c5da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801c5f4:	b188      	cbz	r0, 801c61a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c5f6:	682b      	ldr	r3, [r5, #0]
 801c5f8:	3801      	subs	r0, #1
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	b280      	uxth	r0, r0
 801c5fe:	dd0c      	ble.n	801c61a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c600:	f8db 3000 	ldr.w	r3, [fp]
 801c604:	1c9c      	adds	r4, r3, #2
 801c606:	f8cb 4000 	str.w	r4, [fp]
 801c60a:	881c      	ldrh	r4, [r3, #0]
 801c60c:	682b      	ldr	r3, [r5, #0]
 801c60e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801c612:	682b      	ldr	r3, [r5, #0]
 801c614:	3301      	adds	r3, #1
 801c616:	602b      	str	r3, [r5, #0]
 801c618:	e7ec      	b.n	801c5f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c61a:	2620      	movs	r6, #32
 801c61c:	b151      	cbz	r1, 801c634 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c61e:	6828      	ldr	r0, [r5, #0]
 801c620:	3901      	subs	r1, #1
 801c622:	4282      	cmp	r2, r0
 801c624:	b289      	uxth	r1, r1
 801c626:	dd05      	ble.n	801c634 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c628:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801c62c:	682b      	ldr	r3, [r5, #0]
 801c62e:	3301      	adds	r3, #1
 801c630:	602b      	str	r3, [r5, #0]
 801c632:	e7f3      	b.n	801c61c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801c634:	b005      	add	sp, #20
 801c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c63a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801c63a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c63e:	2400      	movs	r4, #0
 801c640:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801c644:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801c648:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801c64c:	8014      	strh	r4, [r2, #0]
 801c64e:	701c      	strb	r4, [r3, #0]
 801c650:	f888 4000 	strb.w	r4, [r8]
 801c654:	f88c 4000 	strb.w	r4, [ip]
 801c658:	f88e 4000 	strb.w	r4, [lr]
 801c65c:	703c      	strb	r4, [r7, #0]
 801c65e:	6804      	ldr	r4, [r0, #0]
 801c660:	b1a4      	cbz	r4, 801c68c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801c662:	8824      	ldrh	r4, [r4, #0]
 801c664:	f04f 0901 	mov.w	r9, #1
 801c668:	b314      	cbz	r4, 801c6b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c66a:	2c2b      	cmp	r4, #43	; 0x2b
 801c66c:	d001      	beq.n	801c672 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801c66e:	2c20      	cmp	r4, #32
 801c670:	d110      	bne.n	801c694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801c672:	8014      	strh	r4, [r2, #0]
 801c674:	6804      	ldr	r4, [r0, #0]
 801c676:	b10c      	cbz	r4, 801c67c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801c678:	3402      	adds	r4, #2
 801c67a:	6004      	str	r4, [r0, #0]
 801c67c:	680c      	ldr	r4, [r1, #0]
 801c67e:	b10c      	cbz	r4, 801c684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801c680:	3401      	adds	r4, #1
 801c682:	600c      	str	r4, [r1, #0]
 801c684:	6804      	ldr	r4, [r0, #0]
 801c686:	b17c      	cbz	r4, 801c6a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801c688:	8824      	ldrh	r4, [r4, #0]
 801c68a:	e7ed      	b.n	801c668 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c68c:	680c      	ldr	r4, [r1, #0]
 801c68e:	b17c      	cbz	r4, 801c6b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c690:	7824      	ldrb	r4, [r4, #0]
 801c692:	e7e7      	b.n	801c664 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801c694:	2c2d      	cmp	r4, #45	; 0x2d
 801c696:	d102      	bne.n	801c69e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801c698:	f883 9000 	strb.w	r9, [r3]
 801c69c:	e7ea      	b.n	801c674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c69e:	2c23      	cmp	r4, #35	; 0x23
 801c6a0:	d107      	bne.n	801c6b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801c6a2:	f888 9000 	strb.w	r9, [r8]
 801c6a6:	e7e5      	b.n	801c674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c6a8:	680c      	ldr	r4, [r1, #0]
 801c6aa:	b10c      	cbz	r4, 801c6b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c6ac:	7824      	ldrb	r4, [r4, #0]
 801c6ae:	e7db      	b.n	801c668 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c6b0:	2400      	movs	r4, #0
 801c6b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c6b6:	2b09      	cmp	r3, #9
 801c6b8:	d901      	bls.n	801c6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801c6ba:	2c2a      	cmp	r4, #42	; 0x2a
 801c6bc:	d122      	bne.n	801c704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c6be:	2301      	movs	r3, #1
 801c6c0:	2c30      	cmp	r4, #48	; 0x30
 801c6c2:	f88e 3000 	strb.w	r3, [lr]
 801c6c6:	d10d      	bne.n	801c6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c6c8:	f88c 3000 	strb.w	r3, [ip]
 801c6cc:	6803      	ldr	r3, [r0, #0]
 801c6ce:	b10b      	cbz	r3, 801c6d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801c6d0:	3302      	adds	r3, #2
 801c6d2:	6003      	str	r3, [r0, #0]
 801c6d4:	680b      	ldr	r3, [r1, #0]
 801c6d6:	b10b      	cbz	r3, 801c6dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801c6d8:	3301      	adds	r3, #1
 801c6da:	600b      	str	r3, [r1, #0]
 801c6dc:	6803      	ldr	r3, [r0, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d02f      	beq.n	801c742 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801c6e2:	881c      	ldrh	r4, [r3, #0]
 801c6e4:	2c2a      	cmp	r4, #42	; 0x2a
 801c6e6:	d135      	bne.n	801c754 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ec:	6033      	str	r3, [r6, #0]
 801c6ee:	6803      	ldr	r3, [r0, #0]
 801c6f0:	b10b      	cbz	r3, 801c6f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801c6f2:	3302      	adds	r3, #2
 801c6f4:	6003      	str	r3, [r0, #0]
 801c6f6:	680b      	ldr	r3, [r1, #0]
 801c6f8:	b10b      	cbz	r3, 801c6fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801c6fa:	3301      	adds	r3, #1
 801c6fc:	600b      	str	r3, [r1, #0]
 801c6fe:	6803      	ldr	r3, [r0, #0]
 801c700:	b31b      	cbz	r3, 801c74a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801c702:	881c      	ldrh	r4, [r3, #0]
 801c704:	2c2e      	cmp	r4, #46	; 0x2e
 801c706:	d11a      	bne.n	801c73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c708:	2301      	movs	r3, #1
 801c70a:	703b      	strb	r3, [r7, #0]
 801c70c:	6803      	ldr	r3, [r0, #0]
 801c70e:	b10b      	cbz	r3, 801c714 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801c710:	3302      	adds	r3, #2
 801c712:	6003      	str	r3, [r0, #0]
 801c714:	680b      	ldr	r3, [r1, #0]
 801c716:	b10b      	cbz	r3, 801c71c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801c718:	3301      	adds	r3, #1
 801c71a:	600b      	str	r3, [r1, #0]
 801c71c:	6803      	ldr	r3, [r0, #0]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d036      	beq.n	801c790 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801c722:	881b      	ldrh	r3, [r3, #0]
 801c724:	2b2a      	cmp	r3, #42	; 0x2a
 801c726:	d137      	bne.n	801c798 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c728:	f04f 33ff 	mov.w	r3, #4294967295
 801c72c:	602b      	str	r3, [r5, #0]
 801c72e:	6803      	ldr	r3, [r0, #0]
 801c730:	b10b      	cbz	r3, 801c736 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801c732:	3302      	adds	r3, #2
 801c734:	6003      	str	r3, [r0, #0]
 801c736:	680b      	ldr	r3, [r1, #0]
 801c738:	b10b      	cbz	r3, 801c73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c73a:	3301      	adds	r3, #1
 801c73c:	600b      	str	r3, [r1, #0]
 801c73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c742:	680c      	ldr	r4, [r1, #0]
 801c744:	b134      	cbz	r4, 801c754 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c746:	7824      	ldrb	r4, [r4, #0]
 801c748:	e7cc      	b.n	801c6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c74a:	680b      	ldr	r3, [r1, #0]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d0f6      	beq.n	801c73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c750:	781c      	ldrb	r4, [r3, #0]
 801c752:	e7d7      	b.n	801c704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c754:	2300      	movs	r3, #0
 801c756:	220a      	movs	r2, #10
 801c758:	6033      	str	r3, [r6, #0]
 801c75a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c75e:	fa1f f38c 	uxth.w	r3, ip
 801c762:	2b09      	cmp	r3, #9
 801c764:	d8ce      	bhi.n	801c704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c766:	6833      	ldr	r3, [r6, #0]
 801c768:	fb02 c303 	mla	r3, r2, r3, ip
 801c76c:	6033      	str	r3, [r6, #0]
 801c76e:	6803      	ldr	r3, [r0, #0]
 801c770:	b10b      	cbz	r3, 801c776 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801c772:	3302      	adds	r3, #2
 801c774:	6003      	str	r3, [r0, #0]
 801c776:	680b      	ldr	r3, [r1, #0]
 801c778:	b10b      	cbz	r3, 801c77e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801c77a:	3301      	adds	r3, #1
 801c77c:	600b      	str	r3, [r1, #0]
 801c77e:	6803      	ldr	r3, [r0, #0]
 801c780:	b10b      	cbz	r3, 801c786 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801c782:	881c      	ldrh	r4, [r3, #0]
 801c784:	e7e9      	b.n	801c75a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c786:	680c      	ldr	r4, [r1, #0]
 801c788:	2c00      	cmp	r4, #0
 801c78a:	d0e6      	beq.n	801c75a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c78c:	7824      	ldrb	r4, [r4, #0]
 801c78e:	e7e4      	b.n	801c75a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c790:	680b      	ldr	r3, [r1, #0]
 801c792:	b10b      	cbz	r3, 801c798 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c794:	781b      	ldrb	r3, [r3, #0]
 801c796:	e7c5      	b.n	801c724 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801c798:	2200      	movs	r2, #0
 801c79a:	240a      	movs	r4, #10
 801c79c:	602a      	str	r2, [r5, #0]
 801c79e:	3b30      	subs	r3, #48	; 0x30
 801c7a0:	682a      	ldr	r2, [r5, #0]
 801c7a2:	b29e      	uxth	r6, r3
 801c7a4:	2e09      	cmp	r6, #9
 801c7a6:	d813      	bhi.n	801c7d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801c7a8:	fb04 3302 	mla	r3, r4, r2, r3
 801c7ac:	602b      	str	r3, [r5, #0]
 801c7ae:	6803      	ldr	r3, [r0, #0]
 801c7b0:	b10b      	cbz	r3, 801c7b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801c7b2:	3302      	adds	r3, #2
 801c7b4:	6003      	str	r3, [r0, #0]
 801c7b6:	680b      	ldr	r3, [r1, #0]
 801c7b8:	b10b      	cbz	r3, 801c7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801c7ba:	3301      	adds	r3, #1
 801c7bc:	600b      	str	r3, [r1, #0]
 801c7be:	6803      	ldr	r3, [r0, #0]
 801c7c0:	b10b      	cbz	r3, 801c7c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801c7c2:	881b      	ldrh	r3, [r3, #0]
 801c7c4:	e7eb      	b.n	801c79e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c7c6:	680b      	ldr	r3, [r1, #0]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d0e8      	beq.n	801c79e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c7cc:	781b      	ldrb	r3, [r3, #0]
 801c7ce:	e7e6      	b.n	801c79e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c7d0:	2a06      	cmp	r2, #6
 801c7d2:	bfa8      	it	ge
 801c7d4:	2206      	movge	r2, #6
 801c7d6:	602a      	str	r2, [r5, #0]
 801c7d8:	e7b1      	b.n	801c73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801c7da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801c7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7de:	b0a3      	sub	sp, #140	; 0x8c
 801c7e0:	2600      	movs	r6, #0
 801c7e2:	4607      	mov	r7, r0
 801c7e4:	4688      	mov	r8, r1
 801c7e6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801c7ea:	4631      	mov	r1, r6
 801c7ec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801c7ee:	4648      	mov	r0, r9
 801c7f0:	960d      	str	r6, [sp, #52]	; 0x34
 801c7f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c7f6:	2242      	movs	r2, #66	; 0x42
 801c7f8:	f00c f8b2 	bl	8028960 <memset>
 801c7fc:	b15f      	cbz	r7, 801c816 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801c7fe:	f108 3aff 	add.w	sl, r8, #4294967295
 801c802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c806:	b152      	cbz	r2, 801c81e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801c808:	8812      	ldrh	r2, [r2, #0]
 801c80a:	b10a      	cbz	r2, 801c810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c80c:	459a      	cmp	sl, r3
 801c80e:	dc2e      	bgt.n	801c86e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801c810:	2200      	movs	r2, #0
 801c812:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c816:	4638      	mov	r0, r7
 801c818:	b023      	add	sp, #140	; 0x8c
 801c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c81e:	9a08      	ldr	r2, [sp, #32]
 801c820:	2a00      	cmp	r2, #0
 801c822:	d0f5      	beq.n	801c810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c824:	7812      	ldrb	r2, [r2, #0]
 801c826:	e7f0      	b.n	801c80a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801c828:	2d00      	cmp	r5, #0
 801c82a:	d0ea      	beq.n	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c82c:	782a      	ldrb	r2, [r5, #0]
 801c82e:	b142      	cbz	r2, 801c842 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801c830:	2a25      	cmp	r2, #37	; 0x25
 801c832:	d001      	beq.n	801c838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801c834:	459a      	cmp	sl, r3
 801c836:	dc08      	bgt.n	801c84a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801c838:	f1bb 0f00 	cmp.w	fp, #0
 801c83c:	d121      	bne.n	801c882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801c83e:	2d00      	cmp	r5, #0
 801c840:	d0df      	beq.n	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c842:	782a      	ldrb	r2, [r5, #0]
 801c844:	f04f 0b00 	mov.w	fp, #0
 801c848:	e01d      	b.n	801c886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801c84a:	f1bb 0f00 	cmp.w	fp, #0
 801c84e:	d077      	beq.n	801c940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801c850:	f8bb 2000 	ldrh.w	r2, [fp]
 801c854:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c858:	f1bb 0f00 	cmp.w	fp, #0
 801c85c:	d002      	beq.n	801c864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801c85e:	f10b 0202 	add.w	r2, fp, #2
 801c862:	9209      	str	r2, [sp, #36]	; 0x24
 801c864:	b10d      	cbz	r5, 801c86a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801c866:	3501      	adds	r5, #1
 801c868:	9508      	str	r5, [sp, #32]
 801c86a:	3301      	adds	r3, #1
 801c86c:	930d      	str	r3, [sp, #52]	; 0x34
 801c86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c870:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801c874:	f1bb 0f00 	cmp.w	fp, #0
 801c878:	d0d6      	beq.n	801c828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801c87a:	f8bb 2000 	ldrh.w	r2, [fp]
 801c87e:	2a00      	cmp	r2, #0
 801c880:	d1d6      	bne.n	801c830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801c882:	f8bb 2000 	ldrh.w	r2, [fp]
 801c886:	2a00      	cmp	r2, #0
 801c888:	d0bb      	beq.n	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c88a:	459a      	cmp	sl, r3
 801c88c:	ddb9      	ble.n	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c88e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801c892:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801c896:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801c89a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801c89e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801c8a2:	960e      	str	r6, [sp, #56]	; 0x38
 801c8a4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801c8a8:	960f      	str	r6, [sp, #60]	; 0x3c
 801c8aa:	f1bb 0f00 	cmp.w	fp, #0
 801c8ae:	d002      	beq.n	801c8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801c8b0:	f10b 0302 	add.w	r3, fp, #2
 801c8b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c8b6:	b10d      	cbz	r5, 801c8bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801c8b8:	1c6b      	adds	r3, r5, #1
 801c8ba:	9308      	str	r3, [sp, #32]
 801c8bc:	ab0f      	add	r3, sp, #60	; 0x3c
 801c8be:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801c8c2:	a908      	add	r1, sp, #32
 801c8c4:	a809      	add	r0, sp, #36	; 0x24
 801c8c6:	9305      	str	r3, [sp, #20]
 801c8c8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c8cc:	9304      	str	r3, [sp, #16]
 801c8ce:	ab0e      	add	r3, sp, #56	; 0x38
 801c8d0:	9303      	str	r3, [sp, #12]
 801c8d2:	ab0c      	add	r3, sp, #48	; 0x30
 801c8d4:	9302      	str	r3, [sp, #8]
 801c8d6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c8da:	9301      	str	r3, [sp, #4]
 801c8dc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c8e0:	9300      	str	r3, [sp, #0]
 801c8e2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c8e6:	f7ff fea8 	bl	801c63a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801c8ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	bfbf      	itttt	lt
 801c8f0:	6823      	ldrlt	r3, [r4, #0]
 801c8f2:	3404      	addlt	r4, #4
 801c8f4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c8f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	bfbe      	ittt	lt
 801c900:	6823      	ldrlt	r3, [r4, #0]
 801c902:	3404      	addlt	r4, #4
 801c904:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c908:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c90c:	bfb8      	it	lt
 801c90e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c910:	b1d9      	cbz	r1, 801c94a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801c912:	880b      	ldrh	r3, [r1, #0]
 801c914:	2b69      	cmp	r3, #105	; 0x69
 801c916:	d01f      	beq.n	801c958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c918:	d82f      	bhi.n	801c97a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801c91a:	2b58      	cmp	r3, #88	; 0x58
 801c91c:	d01c      	beq.n	801c958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c91e:	d818      	bhi.n	801c952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801c920:	2b25      	cmp	r3, #37	; 0x25
 801c922:	d034      	beq.n	801c98e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801c924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c926:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801c92a:	f1bb 0f00 	cmp.w	fp, #0
 801c92e:	f000 80b7 	beq.w	801caa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801c932:	f8bb 5000 	ldrh.w	r5, [fp]
 801c936:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801c93a:	3301      	adds	r3, #1
 801c93c:	930d      	str	r3, [sp, #52]	; 0x34
 801c93e:	e029      	b.n	801c994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c940:	b10d      	cbz	r5, 801c946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801c942:	782a      	ldrb	r2, [r5, #0]
 801c944:	e786      	b.n	801c854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c946:	462a      	mov	r2, r5
 801c948:	e784      	b.n	801c854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c94a:	2a00      	cmp	r2, #0
 801c94c:	d0ea      	beq.n	801c924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c94e:	7813      	ldrb	r3, [r2, #0]
 801c950:	e7e0      	b.n	801c914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801c952:	3b63      	subs	r3, #99	; 0x63
 801c954:	2b01      	cmp	r3, #1
 801c956:	d8e5      	bhi.n	801c924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c958:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801c95c:	b329      	cbz	r1, 801c9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801c95e:	880b      	ldrh	r3, [r1, #0]
 801c960:	2b69      	cmp	r3, #105	; 0x69
 801c962:	d063      	beq.n	801ca2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c964:	d825      	bhi.n	801c9b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801c966:	2b63      	cmp	r3, #99	; 0x63
 801c968:	d038      	beq.n	801c9dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801c96a:	2b64      	cmp	r3, #100	; 0x64
 801c96c:	d05e      	beq.n	801ca2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c96e:	2b58      	cmp	r3, #88	; 0x58
 801c970:	d07a      	beq.n	801ca68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801c972:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801c976:	4625      	mov	r5, r4
 801c978:	e036      	b.n	801c9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c97a:	2b73      	cmp	r3, #115	; 0x73
 801c97c:	d0ec      	beq.n	801c958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c97e:	d802      	bhi.n	801c986 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801c980:	2b6f      	cmp	r3, #111	; 0x6f
 801c982:	d1cf      	bne.n	801c924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c984:	e7e8      	b.n	801c958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c986:	2b75      	cmp	r3, #117	; 0x75
 801c988:	d0e6      	beq.n	801c958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c98a:	2b78      	cmp	r3, #120	; 0x78
 801c98c:	e7f9      	b.n	801c982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801c98e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c990:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801c994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c996:	b10b      	cbz	r3, 801c99c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801c998:	3302      	adds	r3, #2
 801c99a:	9309      	str	r3, [sp, #36]	; 0x24
 801c99c:	9b08      	ldr	r3, [sp, #32]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	f43f af2f 	beq.w	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c9a4:	3301      	adds	r3, #1
 801c9a6:	9308      	str	r3, [sp, #32]
 801c9a8:	e72b      	b.n	801c802 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c9aa:	2a00      	cmp	r2, #0
 801c9ac:	d0e1      	beq.n	801c972 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c9ae:	7813      	ldrb	r3, [r2, #0]
 801c9b0:	e7d6      	b.n	801c960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801c9b2:	2b73      	cmp	r3, #115	; 0x73
 801c9b4:	d036      	beq.n	801ca24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801c9b6:	d807      	bhi.n	801c9c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801c9b8:	2b6f      	cmp	r3, #111	; 0x6f
 801c9ba:	d1da      	bne.n	801c972 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c9bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c9be:	1d25      	adds	r5, r4, #4
 801c9c0:	2308      	movs	r3, #8
 801c9c2:	eba8 0202 	sub.w	r2, r8, r2
 801c9c6:	e049      	b.n	801ca5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c9c8:	2b75      	cmp	r3, #117	; 0x75
 801c9ca:	d042      	beq.n	801ca52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801c9cc:	2b78      	cmp	r3, #120	; 0x78
 801c9ce:	d1d0      	bne.n	801c972 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c9d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c9d2:	1d25      	adds	r5, r4, #4
 801c9d4:	2310      	movs	r3, #16
 801c9d6:	eba8 0202 	sub.w	r2, r8, r2
 801c9da:	e03f      	b.n	801ca5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c9dc:	6823      	ldr	r3, [r4, #0]
 801c9de:	1d25      	adds	r5, r4, #4
 801c9e0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c9e4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9ea:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d051      	beq.n	801ca96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801c9f2:	881a      	ldrh	r2, [r3, #0]
 801c9f4:	a80d      	add	r0, sp, #52	; 0x34
 801c9f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c9fa:	462c      	mov	r4, r5
 801c9fc:	9005      	str	r0, [sp, #20]
 801c9fe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801ca02:	9004      	str	r0, [sp, #16]
 801ca04:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ca06:	9003      	str	r0, [sp, #12]
 801ca08:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801ca0c:	9002      	str	r0, [sp, #8]
 801ca0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ca10:	9001      	str	r0, [sp, #4]
 801ca12:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ca16:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ca1a:	9000      	str	r0, [sp, #0]
 801ca1c:	a810      	add	r0, sp, #64	; 0x40
 801ca1e:	f7ff fd49 	bl	801c4b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ca22:	e7b7      	b.n	801c994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ca24:	1d25      	adds	r5, r4, #4
 801ca26:	6823      	ldr	r3, [r4, #0]
 801ca28:	9310      	str	r3, [sp, #64]	; 0x40
 801ca2a:	e7dd      	b.n	801c9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ca2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca2e:	230a      	movs	r3, #10
 801ca30:	4649      	mov	r1, r9
 801ca32:	6820      	ldr	r0, [r4, #0]
 801ca34:	eba8 0202 	sub.w	r2, r8, r2
 801ca38:	1d25      	adds	r5, r4, #4
 801ca3a:	b292      	uxth	r2, r2
 801ca3c:	f7ff fd08 	bl	801c450 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ca40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ca44:	2b2d      	cmp	r3, #45	; 0x2d
 801ca46:	d1cf      	bne.n	801c9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ca48:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ca4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca4e:	3302      	adds	r3, #2
 801ca50:	e7ea      	b.n	801ca28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ca52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca54:	1d25      	adds	r5, r4, #4
 801ca56:	230a      	movs	r3, #10
 801ca58:	eba8 0202 	sub.w	r2, r8, r2
 801ca5c:	b292      	uxth	r2, r2
 801ca5e:	4649      	mov	r1, r9
 801ca60:	6820      	ldr	r0, [r4, #0]
 801ca62:	f7ff fcd7 	bl	801c414 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ca66:	e7bf      	b.n	801c9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ca68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca6a:	2310      	movs	r3, #16
 801ca6c:	4649      	mov	r1, r9
 801ca6e:	6820      	ldr	r0, [r4, #0]
 801ca70:	eba8 0202 	sub.w	r2, r8, r2
 801ca74:	1d25      	adds	r5, r4, #4
 801ca76:	b292      	uxth	r2, r2
 801ca78:	f7ff fccc 	bl	801c414 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ca7c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ca80:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d0af      	beq.n	801c9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ca88:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ca8c:	2919      	cmp	r1, #25
 801ca8e:	d8f7      	bhi.n	801ca80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ca90:	3b20      	subs	r3, #32
 801ca92:	8013      	strh	r3, [r2, #0]
 801ca94:	e7f4      	b.n	801ca80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ca96:	9a08      	ldr	r2, [sp, #32]
 801ca98:	2a00      	cmp	r2, #0
 801ca9a:	d0ab      	beq.n	801c9f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ca9c:	7812      	ldrb	r2, [r2, #0]
 801ca9e:	e7a9      	b.n	801c9f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801caa0:	2d00      	cmp	r5, #0
 801caa2:	f43f af48 	beq.w	801c936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801caa6:	782d      	ldrb	r5, [r5, #0]
 801caa8:	e745      	b.n	801c936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801caaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801caaa:	b507      	push	{r0, r1, r2, lr}
 801caac:	9300      	str	r3, [sp, #0]
 801caae:	4613      	mov	r3, r2
 801cab0:	2200      	movs	r2, #0
 801cab2:	f7ff fe92 	bl	801c7da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801cab6:	b003      	add	sp, #12
 801cab8:	f85d fb04 	ldr.w	pc, [sp], #4

0801cabc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cabc:	b40c      	push	{r2, r3}
 801cabe:	b507      	push	{r0, r1, r2, lr}
 801cac0:	ab04      	add	r3, sp, #16
 801cac2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cac6:	9301      	str	r3, [sp, #4]
 801cac8:	f7ff ffef 	bl	801caaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cacc:	b003      	add	sp, #12
 801cace:	f85d eb04 	ldr.w	lr, [sp], #4
 801cad2:	b002      	add	sp, #8
 801cad4:	4770      	bx	lr
	...

0801cad8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cad8:	4b01      	ldr	r3, [pc, #4]	; (801cae0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cada:	6018      	str	r0, [r3, #0]
 801cadc:	4770      	bx	lr
 801cade:	bf00      	nop
 801cae0:	2003bd70 	.word	0x2003bd70

0801cae4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801cae4:	4b06      	ldr	r3, [pc, #24]	; (801cb00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801cae6:	881a      	ldrh	r2, [r3, #0]
 801cae8:	4282      	cmp	r2, r0
 801caea:	d807      	bhi.n	801cafc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801caec:	4b05      	ldr	r3, [pc, #20]	; (801cb04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801caee:	881b      	ldrh	r3, [r3, #0]
 801caf0:	4413      	add	r3, r2
 801caf2:	4298      	cmp	r0, r3
 801caf4:	bfac      	ite	ge
 801caf6:	2000      	movge	r0, #0
 801caf8:	2001      	movlt	r0, #1
 801cafa:	4770      	bx	lr
 801cafc:	2000      	movs	r0, #0
 801cafe:	4770      	bx	lr
 801cb00:	2003bd90 	.word	0x2003bd90
 801cb04:	2003bd94 	.word	0x2003bd94

0801cb08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cb08:	b508      	push	{r3, lr}
 801cb0a:	4601      	mov	r1, r0
 801cb0c:	f7ff ffea 	bl	801cae4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cb10:	b118      	cbz	r0, 801cb1a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801cb12:	4b02      	ldr	r3, [pc, #8]	; (801cb1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801cb1a:	bd08      	pop	{r3, pc}
 801cb1c:	2003bd74 	.word	0x2003bd74

0801cb20 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801cb20:	b538      	push	{r3, r4, r5, lr}
 801cb22:	4604      	mov	r4, r0
 801cb24:	f7ff ffde 	bl	801cae4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cb28:	b188      	cbz	r0, 801cb4e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801cb2a:	4b09      	ldr	r3, [pc, #36]	; (801cb50 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801cb2c:	881a      	ldrh	r2, [r3, #0]
 801cb2e:	4b09      	ldr	r3, [pc, #36]	; (801cb54 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801cb30:	1aa4      	subs	r4, r4, r2
 801cb32:	220e      	movs	r2, #14
 801cb34:	681d      	ldr	r5, [r3, #0]
 801cb36:	4362      	muls	r2, r4
 801cb38:	18ac      	adds	r4, r5, r2
 801cb3a:	7b23      	ldrb	r3, [r4, #12]
 801cb3c:	f013 0320 	ands.w	r3, r3, #32
 801cb40:	bf17      	itett	ne
 801cb42:	680b      	ldrne	r3, [r1, #0]
 801cb44:	4618      	moveq	r0, r3
 801cb46:	50ab      	strne	r3, [r5, r2]
 801cb48:	684b      	ldrne	r3, [r1, #4]
 801cb4a:	bf18      	it	ne
 801cb4c:	6063      	strne	r3, [r4, #4]
 801cb4e:	bd38      	pop	{r3, r4, r5, pc}
 801cb50:	2003bd90 	.word	0x2003bd90
 801cb54:	2003bd78 	.word	0x2003bd78

0801cb58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801cb58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb5c:	4606      	mov	r6, r0
 801cb5e:	460c      	mov	r4, r1
 801cb60:	f7ff ffc0 	bl	801cae4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cb64:	b918      	cbnz	r0, 801cb6e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801cb66:	2000      	movs	r0, #0
 801cb68:	b002      	add	sp, #8
 801cb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb6e:	4608      	mov	r0, r1
 801cb70:	f7f8 fafb 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb74:	2800      	cmp	r0, #0
 801cb76:	d1f6      	bne.n	801cb66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801cb78:	4b3f      	ldr	r3, [pc, #252]	; (801cc78 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801cb7a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801cc7c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801cb7e:	881d      	ldrh	r5, [r3, #0]
 801cb80:	f8d9 a000 	ldr.w	sl, [r9]
 801cb84:	46c8      	mov	r8, r9
 801cb86:	1b73      	subs	r3, r6, r5
 801cb88:	250e      	movs	r5, #14
 801cb8a:	435d      	muls	r5, r3
 801cb8c:	eb0a 0705 	add.w	r7, sl, r5
 801cb90:	7b3b      	ldrb	r3, [r7, #12]
 801cb92:	f013 0f20 	tst.w	r3, #32
 801cb96:	d0e6      	beq.n	801cb66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801cb98:	4621      	mov	r1, r4
 801cb9a:	4638      	mov	r0, r7
 801cb9c:	f7fc ff9c 	bl	8019ad8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801cba0:	2800      	cmp	r0, #0
 801cba2:	d1e1      	bne.n	801cb68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801cba4:	4639      	mov	r1, r7
 801cba6:	4620      	mov	r0, r4
 801cba8:	f7fc ff96 	bl	8019ad8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801cbac:	b108      	cbz	r0, 801cbb2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801cbae:	4621      	mov	r1, r4
 801cbb0:	e020      	b.n	801cbf4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801cbb2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cbb6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801cbba:	429a      	cmp	r2, r3
 801cbbc:	d11e      	bne.n	801cbfc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801cbbe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cbc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801cbc6:	429a      	cmp	r2, r3
 801cbc8:	d118      	bne.n	801cbfc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801cbca:	6820      	ldr	r0, [r4, #0]
 801cbcc:	466b      	mov	r3, sp
 801cbce:	6861      	ldr	r1, [r4, #4]
 801cbd0:	c303      	stmia	r3!, {r0, r1}
 801cbd2:	4639      	mov	r1, r7
 801cbd4:	4668      	mov	r0, sp
 801cbd6:	f7fc ffa5 	bl	8019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cbda:	f8d9 3000 	ldr.w	r3, [r9]
 801cbde:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cbe2:	442b      	add	r3, r5
 801cbe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cbe8:	4413      	add	r3, r2
 801cbea:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801cbee:	4293      	cmp	r3, r2
 801cbf0:	dc04      	bgt.n	801cbfc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801cbf2:	4669      	mov	r1, sp
 801cbf4:	4630      	mov	r0, r6
 801cbf6:	f7ff ff93 	bl	801cb20 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801cbfa:	e7b5      	b.n	801cb68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801cbfc:	f8d8 3000 	ldr.w	r3, [r8]
 801cc00:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cc04:	442b      	add	r3, r5
 801cc06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801cc0a:	4291      	cmp	r1, r2
 801cc0c:	d119      	bne.n	801cc42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801cc0e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cc12:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801cc16:	4291      	cmp	r1, r2
 801cc18:	d113      	bne.n	801cc42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801cc1a:	6820      	ldr	r0, [r4, #0]
 801cc1c:	466a      	mov	r2, sp
 801cc1e:	6861      	ldr	r1, [r4, #4]
 801cc20:	c203      	stmia	r2!, {r0, r1}
 801cc22:	4619      	mov	r1, r3
 801cc24:	4668      	mov	r0, sp
 801cc26:	f7fc ff7d 	bl	8019b24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cc2a:	f8d8 3000 	ldr.w	r3, [r8]
 801cc2e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cc32:	442b      	add	r3, r5
 801cc34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cc38:	4413      	add	r3, r2
 801cc3a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cc3e:	4293      	cmp	r3, r2
 801cc40:	ddd7      	ble.n	801cbf2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801cc42:	4620      	mov	r0, r4
 801cc44:	f7f8 fa91 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc48:	b990      	cbnz	r0, 801cc70 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801cc4a:	88a7      	ldrh	r7, [r4, #4]
 801cc4c:	88e3      	ldrh	r3, [r4, #6]
 801cc4e:	fb17 f703 	smulbb	r7, r7, r3
 801cc52:	f8d8 3000 	ldr.w	r3, [r8]
 801cc56:	441d      	add	r5, r3
 801cc58:	4628      	mov	r0, r5
 801cc5a:	f7f8 fa86 	bl	801516a <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc5e:	b948      	cbnz	r0, 801cc74 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801cc60:	88ab      	ldrh	r3, [r5, #4]
 801cc62:	88ea      	ldrh	r2, [r5, #6]
 801cc64:	fb13 f302 	smulbb	r3, r3, r2
 801cc68:	42bb      	cmp	r3, r7
 801cc6a:	f6bf af7c 	bge.w	801cb66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801cc6e:	e79e      	b.n	801cbae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801cc70:	2700      	movs	r7, #0
 801cc72:	e7ee      	b.n	801cc52 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801cc74:	2300      	movs	r3, #0
 801cc76:	e7f7      	b.n	801cc68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801cc78:	2003bd90 	.word	0x2003bd90
 801cc7c:	2003bd78 	.word	0x2003bd78

0801cc80 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc82:	4c24      	ldr	r4, [pc, #144]	; (801cd14 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801cc84:	6823      	ldr	r3, [r4, #0]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d042      	beq.n	801cd10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801cc8a:	4a23      	ldr	r2, [pc, #140]	; (801cd18 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801cc8c:	4d23      	ldr	r5, [pc, #140]	; (801cd1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801cc8e:	8811      	ldrh	r1, [r2, #0]
 801cc90:	f8b5 c000 	ldrh.w	ip, [r5]
 801cc94:	4822      	ldr	r0, [pc, #136]	; (801cd20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801cc96:	4461      	add	r1, ip
 801cc98:	1c4a      	adds	r2, r1, #1
 801cc9a:	008f      	lsls	r7, r1, #2
 801cc9c:	f022 0201 	bic.w	r2, r2, #1
 801cca0:	19de      	adds	r6, r3, r7
 801cca2:	0412      	lsls	r2, r2, #16
 801cca4:	6006      	str	r6, [r0, #0]
 801cca6:	4e1f      	ldr	r6, [pc, #124]	; (801cd24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801cca8:	0c12      	lsrs	r2, r2, #16
 801ccaa:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ccae:	19da      	adds	r2, r3, r7
 801ccb0:	6032      	str	r2, [r6, #0]
 801ccb2:	220e      	movs	r2, #14
 801ccb4:	fb02 f20c 	mul.w	r2, r2, ip
 801ccb8:	3203      	adds	r2, #3
 801ccba:	f022 0203 	bic.w	r2, r2, #3
 801ccbe:	443a      	add	r2, r7
 801ccc0:	4f19      	ldr	r7, [pc, #100]	; (801cd28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ccc2:	4413      	add	r3, r2
 801ccc4:	603b      	str	r3, [r7, #0]
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	4f18      	ldr	r7, [pc, #96]	; (801cd2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ccca:	469c      	mov	ip, r3
 801cccc:	803b      	strh	r3, [r7, #0]
 801ccce:	4f18      	ldr	r7, [pc, #96]	; (801cd30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ccd0:	683f      	ldr	r7, [r7, #0]
 801ccd2:	1aba      	subs	r2, r7, r2
 801ccd4:	4f17      	ldr	r7, [pc, #92]	; (801cd34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ccd6:	603a      	str	r2, [r7, #0]
 801ccd8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801ccdc:	4a16      	ldr	r2, [pc, #88]	; (801cd38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ccde:	8013      	strh	r3, [r2, #0]
 801cce0:	428b      	cmp	r3, r1
 801cce2:	d10d      	bne.n	801cd00 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801cce4:	882d      	ldrh	r5, [r5, #0]
 801cce6:	2300      	movs	r3, #0
 801cce8:	6830      	ldr	r0, [r6, #0]
 801ccea:	240e      	movs	r4, #14
 801ccec:	429d      	cmp	r5, r3
 801ccee:	d90f      	bls.n	801cd10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ccf0:	fb04 0203 	mla	r2, r4, r3, r0
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	7b11      	ldrb	r1, [r2, #12]
 801ccf8:	f36f 1145 	bfc	r1, #5, #1
 801ccfc:	7311      	strb	r1, [r2, #12]
 801ccfe:	e7f5      	b.n	801ccec <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801cd00:	6822      	ldr	r2, [r4, #0]
 801cd02:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801cd06:	6802      	ldr	r2, [r0, #0]
 801cd08:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	e7e7      	b.n	801cce0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801cd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd12:	bf00      	nop
 801cd14:	2003bd74 	.word	0x2003bd74
 801cd18:	2003bd90 	.word	0x2003bd90
 801cd1c:	2003bd94 	.word	0x2003bd94
 801cd20:	2003bd88 	.word	0x2003bd88
 801cd24:	2003bd78 	.word	0x2003bd78
 801cd28:	2003bd80 	.word	0x2003bd80
 801cd2c:	2003bd92 	.word	0x2003bd92
 801cd30:	2003bd7c 	.word	0x2003bd7c
 801cd34:	2003bd8c 	.word	0x2003bd8c
 801cd38:	2003bd84 	.word	0x2003bd84

0801cd3c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cd3c:	4b06      	ldr	r3, [pc, #24]	; (801cd58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	b943      	cbnz	r3, 801cd54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cd42:	b139      	cbz	r1, 801cd54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cd44:	4b05      	ldr	r3, [pc, #20]	; (801cd5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801cd46:	801a      	strh	r2, [r3, #0]
 801cd48:	4b05      	ldr	r3, [pc, #20]	; (801cd60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801cd4a:	6019      	str	r1, [r3, #0]
 801cd4c:	4b05      	ldr	r3, [pc, #20]	; (801cd64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801cd4e:	6018      	str	r0, [r3, #0]
 801cd50:	f7ff bf96 	b.w	801cc80 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cd54:	4770      	bx	lr
 801cd56:	bf00      	nop
 801cd58:	2003bd80 	.word	0x2003bd80
 801cd5c:	2003bd94 	.word	0x2003bd94
 801cd60:	2003bd7c 	.word	0x2003bd7c
 801cd64:	2003bd74 	.word	0x2003bd74

0801cd68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cd68:	b470      	push	{r4, r5, r6}
 801cd6a:	4c07      	ldr	r4, [pc, #28]	; (801cd88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cd6c:	4605      	mov	r5, r0
 801cd6e:	4610      	mov	r0, r2
 801cd70:	9a03      	ldr	r2, [sp, #12]
 801cd72:	6826      	ldr	r6, [r4, #0]
 801cd74:	b936      	cbnz	r6, 801cd84 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cd76:	6025      	str	r5, [r4, #0]
 801cd78:	4c04      	ldr	r4, [pc, #16]	; (801cd8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cd7a:	8021      	strh	r1, [r4, #0]
 801cd7c:	4619      	mov	r1, r3
 801cd7e:	bc70      	pop	{r4, r5, r6}
 801cd80:	f7ff bfdc 	b.w	801cd3c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cd84:	bc70      	pop	{r4, r5, r6}
 801cd86:	4770      	bx	lr
 801cd88:	2003bd98 	.word	0x2003bd98
 801cd8c:	2003bd90 	.word	0x2003bd90

0801cd90 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cd90:	4a12      	ldr	r2, [pc, #72]	; (801cddc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801cd92:	8803      	ldrh	r3, [r0, #0]
 801cd94:	8812      	ldrh	r2, [r2, #0]
 801cd96:	4293      	cmp	r3, r2
 801cd98:	d207      	bcs.n	801cdaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801cd9a:	4a11      	ldr	r2, [pc, #68]	; (801cde0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801cd9c:	2114      	movs	r1, #20
 801cd9e:	6812      	ldr	r2, [r2, #0]
 801cda0:	fb01 2303 	mla	r3, r1, r3, r2
 801cda4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801cda8:	4770      	bx	lr
 801cdaa:	490e      	ldr	r1, [pc, #56]	; (801cde4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cdac:	8809      	ldrh	r1, [r1, #0]
 801cdae:	4411      	add	r1, r2
 801cdb0:	428b      	cmp	r3, r1
 801cdb2:	da04      	bge.n	801cdbe <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801cdb4:	1a9b      	subs	r3, r3, r2
 801cdb6:	4a0c      	ldr	r2, [pc, #48]	; (801cde8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cdb8:	210e      	movs	r1, #14
 801cdba:	6812      	ldr	r2, [r2, #0]
 801cdbc:	e7f0      	b.n	801cda0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801cdbe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cdc2:	4293      	cmp	r3, r2
 801cdc4:	d108      	bne.n	801cdd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801cdc6:	4b09      	ldr	r3, [pc, #36]	; (801cdec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	b91b      	cbnz	r3, 801cdd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801cdcc:	4b08      	ldr	r3, [pc, #32]	; (801cdf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cdce:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cdd2:	4770      	bx	lr
 801cdd4:	4b07      	ldr	r3, [pc, #28]	; (801cdf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cdd6:	e7fa      	b.n	801cdce <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801cdd8:	2000      	movs	r0, #0
 801cdda:	4770      	bx	lr
 801cddc:	2003bd90 	.word	0x2003bd90
 801cde0:	2003bd98 	.word	0x2003bd98
 801cde4:	2003bd94 	.word	0x2003bd94
 801cde8:	2003bd78 	.word	0x2003bd78
 801cdec:	2003bd00 	.word	0x2003bd00
 801cdf0:	2003bd02 	.word	0x2003bd02
 801cdf4:	2003bd04 	.word	0x2003bd04

0801cdf8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cdf8:	4a12      	ldr	r2, [pc, #72]	; (801ce44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801cdfa:	8803      	ldrh	r3, [r0, #0]
 801cdfc:	8812      	ldrh	r2, [r2, #0]
 801cdfe:	4293      	cmp	r3, r2
 801ce00:	d207      	bcs.n	801ce12 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ce02:	4a11      	ldr	r2, [pc, #68]	; (801ce48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ce04:	2114      	movs	r1, #20
 801ce06:	6812      	ldr	r2, [r2, #0]
 801ce08:	fb01 2303 	mla	r3, r1, r3, r2
 801ce0c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ce10:	4770      	bx	lr
 801ce12:	490e      	ldr	r1, [pc, #56]	; (801ce4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ce14:	8809      	ldrh	r1, [r1, #0]
 801ce16:	4411      	add	r1, r2
 801ce18:	428b      	cmp	r3, r1
 801ce1a:	da04      	bge.n	801ce26 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ce1c:	1a9b      	subs	r3, r3, r2
 801ce1e:	4a0c      	ldr	r2, [pc, #48]	; (801ce50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ce20:	210e      	movs	r1, #14
 801ce22:	6812      	ldr	r2, [r2, #0]
 801ce24:	e7f0      	b.n	801ce08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ce26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ce2a:	4293      	cmp	r3, r2
 801ce2c:	d108      	bne.n	801ce40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ce2e:	4b09      	ldr	r3, [pc, #36]	; (801ce54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ce30:	781b      	ldrb	r3, [r3, #0]
 801ce32:	b91b      	cbnz	r3, 801ce3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ce34:	4b08      	ldr	r3, [pc, #32]	; (801ce58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ce36:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ce3a:	4770      	bx	lr
 801ce3c:	4b07      	ldr	r3, [pc, #28]	; (801ce5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ce3e:	e7fa      	b.n	801ce36 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ce40:	2000      	movs	r0, #0
 801ce42:	4770      	bx	lr
 801ce44:	2003bd90 	.word	0x2003bd90
 801ce48:	2003bd98 	.word	0x2003bd98
 801ce4c:	2003bd94 	.word	0x2003bd94
 801ce50:	2003bd78 	.word	0x2003bd78
 801ce54:	2003bd00 	.word	0x2003bd00
 801ce58:	2003bd04 	.word	0x2003bd04
 801ce5c:	2003bd02 	.word	0x2003bd02

0801ce60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ce60:	4a17      	ldr	r2, [pc, #92]	; (801cec0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ce62:	8803      	ldrh	r3, [r0, #0]
 801ce64:	8812      	ldrh	r2, [r2, #0]
 801ce66:	4293      	cmp	r3, r2
 801ce68:	d213      	bcs.n	801ce92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801ce6a:	4a16      	ldr	r2, [pc, #88]	; (801cec4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ce6c:	2114      	movs	r1, #20
 801ce6e:	6812      	ldr	r2, [r2, #0]
 801ce70:	fb01 2303 	mla	r3, r1, r3, r2
 801ce74:	8a1a      	ldrh	r2, [r3, #16]
 801ce76:	8919      	ldrh	r1, [r3, #8]
 801ce78:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ce7c:	428a      	cmp	r2, r1
 801ce7e:	db1d      	blt.n	801cebc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ce80:	8a58      	ldrh	r0, [r3, #18]
 801ce82:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ce86:	895b      	ldrh	r3, [r3, #10]
 801ce88:	4298      	cmp	r0, r3
 801ce8a:	bfac      	ite	ge
 801ce8c:	2000      	movge	r0, #0
 801ce8e:	2001      	movlt	r0, #1
 801ce90:	4770      	bx	lr
 801ce92:	490d      	ldr	r1, [pc, #52]	; (801cec8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ce94:	8809      	ldrh	r1, [r1, #0]
 801ce96:	4411      	add	r1, r2
 801ce98:	428b      	cmp	r3, r1
 801ce9a:	da0d      	bge.n	801ceb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ce9c:	1a9b      	subs	r3, r3, r2
 801ce9e:	4a0b      	ldr	r2, [pc, #44]	; (801cecc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cea0:	210e      	movs	r1, #14
 801cea2:	6812      	ldr	r2, [r2, #0]
 801cea4:	fb01 2303 	mla	r3, r1, r3, r2
 801cea8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ceac:	891a      	ldrh	r2, [r3, #8]
 801ceae:	4291      	cmp	r1, r2
 801ceb0:	db04      	blt.n	801cebc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ceb2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ceb6:	e7e6      	b.n	801ce86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ceb8:	2000      	movs	r0, #0
 801ceba:	4770      	bx	lr
 801cebc:	2001      	movs	r0, #1
 801cebe:	4770      	bx	lr
 801cec0:	2003bd90 	.word	0x2003bd90
 801cec4:	2003bd98 	.word	0x2003bd98
 801cec8:	2003bd94 	.word	0x2003bd94
 801cecc:	2003bd78 	.word	0x2003bd78

0801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ced0:	4a12      	ldr	r2, [pc, #72]	; (801cf1c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ced2:	8803      	ldrh	r3, [r0, #0]
 801ced4:	8811      	ldrh	r1, [r2, #0]
 801ced6:	428b      	cmp	r3, r1
 801ced8:	d20b      	bcs.n	801cef2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ceda:	4a11      	ldr	r2, [pc, #68]	; (801cf20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cedc:	6812      	ldr	r2, [r2, #0]
 801cede:	b112      	cbz	r2, 801cee6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cee4:	b9c0      	cbnz	r0, 801cf18 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801cee6:	4a0f      	ldr	r2, [pc, #60]	; (801cf24 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cee8:	6811      	ldr	r1, [r2, #0]
 801ceea:	2214      	movs	r2, #20
 801ceec:	4353      	muls	r3, r2
 801ceee:	58c8      	ldr	r0, [r1, r3]
 801cef0:	4770      	bx	lr
 801cef2:	4a0d      	ldr	r2, [pc, #52]	; (801cf28 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cef4:	8812      	ldrh	r2, [r2, #0]
 801cef6:	440a      	add	r2, r1
 801cef8:	4293      	cmp	r3, r2
 801cefa:	da04      	bge.n	801cf06 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801cefc:	4a08      	ldr	r2, [pc, #32]	; (801cf20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cefe:	6812      	ldr	r2, [r2, #0]
 801cf00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cf04:	4770      	bx	lr
 801cf06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cf0a:	4293      	cmp	r3, r2
 801cf0c:	d103      	bne.n	801cf16 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cf0e:	4b07      	ldr	r3, [pc, #28]	; (801cf2c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801cf14:	4770      	bx	lr
 801cf16:	2000      	movs	r0, #0
 801cf18:	4770      	bx	lr
 801cf1a:	bf00      	nop
 801cf1c:	2003bd90 	.word	0x2003bd90
 801cf20:	2003bd74 	.word	0x2003bd74
 801cf24:	2003bd98 	.word	0x2003bd98
 801cf28:	2003bd94 	.word	0x2003bd94
 801cf2c:	2003bd08 	.word	0x2003bd08

0801cf30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cf30:	4b24      	ldr	r3, [pc, #144]	; (801cfc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cf32:	8802      	ldrh	r2, [r0, #0]
 801cf34:	8818      	ldrh	r0, [r3, #0]
 801cf36:	4282      	cmp	r2, r0
 801cf38:	d221      	bcs.n	801cf7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cf3a:	4b23      	ldr	r3, [pc, #140]	; (801cfc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cf3c:	6819      	ldr	r1, [r3, #0]
 801cf3e:	2314      	movs	r3, #20
 801cf40:	fb03 1302 	mla	r3, r3, r2, r1
 801cf44:	6858      	ldr	r0, [r3, #4]
 801cf46:	2800      	cmp	r0, #0
 801cf48:	d03a      	beq.n	801cfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cf4a:	4920      	ldr	r1, [pc, #128]	; (801cfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cf4c:	6809      	ldr	r1, [r1, #0]
 801cf4e:	2900      	cmp	r1, #0
 801cf50:	d036      	beq.n	801cfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cf52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf56:	2900      	cmp	r1, #0
 801cf58:	d032      	beq.n	801cfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cf5a:	891a      	ldrh	r2, [r3, #8]
 801cf5c:	8958      	ldrh	r0, [r3, #10]
 801cf5e:	4350      	muls	r0, r2
 801cf60:	7c5a      	ldrb	r2, [r3, #17]
 801cf62:	7cdb      	ldrb	r3, [r3, #19]
 801cf64:	0952      	lsrs	r2, r2, #5
 801cf66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cf6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cf6e:	2b0b      	cmp	r3, #11
 801cf70:	bf18      	it	ne
 801cf72:	0040      	lslne	r0, r0, #1
 801cf74:	3003      	adds	r0, #3
 801cf76:	f020 0003 	bic.w	r0, r0, #3
 801cf7a:	4408      	add	r0, r1
 801cf7c:	4770      	bx	lr
 801cf7e:	4b14      	ldr	r3, [pc, #80]	; (801cfd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cf80:	881b      	ldrh	r3, [r3, #0]
 801cf82:	4403      	add	r3, r0
 801cf84:	429a      	cmp	r2, r3
 801cf86:	da1a      	bge.n	801cfbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cf88:	4b12      	ldr	r3, [pc, #72]	; (801cfd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cf8a:	1a10      	subs	r0, r2, r0
 801cf8c:	210e      	movs	r1, #14
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	fb01 3000 	mla	r0, r1, r0, r3
 801cf94:	7b03      	ldrb	r3, [r0, #12]
 801cf96:	f003 031f 	and.w	r3, r3, #31
 801cf9a:	2b0b      	cmp	r3, #11
 801cf9c:	d10b      	bne.n	801cfb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801cf9e:	8903      	ldrh	r3, [r0, #8]
 801cfa0:	8940      	ldrh	r0, [r0, #10]
 801cfa2:	4358      	muls	r0, r3
 801cfa4:	4b09      	ldr	r3, [pc, #36]	; (801cfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cfa6:	3003      	adds	r0, #3
 801cfa8:	6819      	ldr	r1, [r3, #0]
 801cfaa:	f020 0303 	bic.w	r3, r0, #3
 801cfae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cfb2:	4418      	add	r0, r3
 801cfb4:	4770      	bx	lr
 801cfb6:	2b0d      	cmp	r3, #13
 801cfb8:	d101      	bne.n	801cfbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cfba:	300d      	adds	r0, #13
 801cfbc:	4770      	bx	lr
 801cfbe:	2000      	movs	r0, #0
 801cfc0:	4770      	bx	lr
 801cfc2:	bf00      	nop
 801cfc4:	2003bd90 	.word	0x2003bd90
 801cfc8:	2003bd98 	.word	0x2003bd98
 801cfcc:	2003bd74 	.word	0x2003bd74
 801cfd0:	2003bd94 	.word	0x2003bd94
 801cfd4:	2003bd78 	.word	0x2003bd78

0801cfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cfd8:	4a17      	ldr	r2, [pc, #92]	; (801d038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801cfda:	b510      	push	{r4, lr}
 801cfdc:	8803      	ldrh	r3, [r0, #0]
 801cfde:	8812      	ldrh	r2, [r2, #0]
 801cfe0:	4293      	cmp	r3, r2
 801cfe2:	d20c      	bcs.n	801cffe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cfe4:	4a15      	ldr	r2, [pc, #84]	; (801d03c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cfe6:	2114      	movs	r1, #20
 801cfe8:	6812      	ldr	r2, [r2, #0]
 801cfea:	fb01 2303 	mla	r3, r1, r3, r2
 801cfee:	7c58      	ldrb	r0, [r3, #17]
 801cff0:	0942      	lsrs	r2, r0, #5
 801cff2:	7cd8      	ldrb	r0, [r3, #19]
 801cff4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cff8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cffc:	bd10      	pop	{r4, pc}
 801cffe:	4910      	ldr	r1, [pc, #64]	; (801d040 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d000:	8809      	ldrh	r1, [r1, #0]
 801d002:	4411      	add	r1, r2
 801d004:	428b      	cmp	r3, r1
 801d006:	da09      	bge.n	801d01c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d008:	1a9b      	subs	r3, r3, r2
 801d00a:	4a0e      	ldr	r2, [pc, #56]	; (801d044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d00c:	210e      	movs	r1, #14
 801d00e:	6812      	ldr	r2, [r2, #0]
 801d010:	fb01 2303 	mla	r3, r1, r3, r2
 801d014:	7b18      	ldrb	r0, [r3, #12]
 801d016:	f000 001f 	and.w	r0, r0, #31
 801d01a:	e7ef      	b.n	801cffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d01c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d020:	4293      	cmp	r3, r2
 801d022:	d106      	bne.n	801d032 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d024:	f7f0 fb7e 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 801d028:	6803      	ldr	r3, [r0, #0]
 801d02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d030:	4718      	bx	r3
 801d032:	2000      	movs	r0, #0
 801d034:	e7e2      	b.n	801cffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d036:	bf00      	nop
 801d038:	2003bd90 	.word	0x2003bd90
 801d03c:	2003bd98 	.word	0x2003bd98
 801d040:	2003bd94 	.word	0x2003bd94
 801d044:	2003bd78 	.word	0x2003bd78

0801d048 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801d048:	2020      	movs	r0, #32
 801d04a:	4770      	bx	lr

0801d04c <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801d04c:	2002      	movs	r0, #2
 801d04e:	4770      	bx	lr

0801d050 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801d050:	4b02      	ldr	r3, [pc, #8]	; (801d05c <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801d052:	8818      	ldrh	r0, [r3, #0]
 801d054:	0080      	lsls	r0, r0, #2
 801d056:	b280      	uxth	r0, r0
 801d058:	4770      	bx	lr
 801d05a:	bf00      	nop
 801d05c:	2003bd02 	.word	0x2003bd02

0801d060 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d064:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801d068:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d06a:	f1bc 0f00 	cmp.w	ip, #0
 801d06e:	d073      	beq.n	801d158 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d070:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801d074:	2c00      	cmp	r4, #0
 801d076:	dd6f      	ble.n	801d158 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d078:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801d07c:	2e00      	cmp	r6, #0
 801d07e:	dd6b      	ble.n	801d158 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d080:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801d084:	4356      	muls	r6, r2
 801d086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d08a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d08e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801d092:	fb02 3305 	mla	r3, r2, r5, r3
 801d096:	eba2 0204 	sub.w	r2, r2, r4
 801d09a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d09e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801d0a2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d0a6:	d10a      	bne.n	801d0be <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801d0a8:	42b1      	cmp	r1, r6
 801d0aa:	d255      	bcs.n	801d158 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d0ac:	eb01 030a 	add.w	r3, r1, sl
 801d0b0:	4299      	cmp	r1, r3
 801d0b2:	d202      	bcs.n	801d0ba <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801d0b4:	f841 0b04 	str.w	r0, [r1], #4
 801d0b8:	e7fa      	b.n	801d0b0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801d0ba:	4411      	add	r1, r2
 801d0bc:	e7f4      	b.n	801d0a8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801d0be:	fa1f fe8c 	uxth.w	lr, ip
 801d0c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801d0c6:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801d0ca:	fa5f f980 	uxtb.w	r9, r0
 801d0ce:	fb03 f30e 	mul.w	r3, r3, lr
 801d0d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801d0d6:	fb08 f80e 	mul.w	r8, r8, lr
 801d0da:	9301      	str	r3, [sp, #4]
 801d0dc:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801d0e0:	fb09 f90e 	mul.w	r9, r9, lr
 801d0e4:	9300      	str	r3, [sp, #0]
 801d0e6:	42b1      	cmp	r1, r6
 801d0e8:	d236      	bcs.n	801d158 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d0ea:	eb01 0b0a 	add.w	fp, r1, sl
 801d0ee:	4559      	cmp	r1, fp
 801d0f0:	d230      	bcs.n	801d154 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801d0f2:	680b      	ldr	r3, [r1, #0]
 801d0f4:	0e1c      	lsrs	r4, r3, #24
 801d0f6:	d102      	bne.n	801d0fe <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801d0f8:	9b00      	ldr	r3, [sp, #0]
 801d0fa:	600b      	str	r3, [r1, #0]
 801d0fc:	e7f7      	b.n	801d0ee <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801d0fe:	fb04 f00e 	mul.w	r0, r4, lr
 801d102:	eb0c 0504 	add.w	r5, ip, r4
 801d106:	3104      	adds	r1, #4
 801d108:	1c47      	adds	r7, r0, #1
 801d10a:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801d10e:	1238      	asrs	r0, r7, #8
 801d110:	1a27      	subs	r7, r4, r0
 801d112:	1a2d      	subs	r5, r5, r0
 801d114:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801d118:	9801      	ldr	r0, [sp, #4]
 801d11a:	b2ed      	uxtb	r5, r5
 801d11c:	fb07 0404 	mla	r4, r7, r4, r0
 801d120:	b2d8      	uxtb	r0, r3
 801d122:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d126:	fb07 9000 	mla	r0, r7, r0, r9
 801d12a:	fbb4 f4f5 	udiv	r4, r4, r5
 801d12e:	fbb0 f0f5 	udiv	r0, r0, r5
 801d132:	0424      	lsls	r4, r4, #16
 801d134:	b2c0      	uxtb	r0, r0
 801d136:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 801d13a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801d13e:	4320      	orrs	r0, r4
 801d140:	fb07 8403 	mla	r4, r7, r3, r8
 801d144:	fbb4 f4f5 	udiv	r4, r4, r5
 801d148:	0224      	lsls	r4, r4, #8
 801d14a:	b2a4      	uxth	r4, r4
 801d14c:	4320      	orrs	r0, r4
 801d14e:	f841 0c04 	str.w	r0, [r1, #-4]
 801d152:	e7cc      	b.n	801d0ee <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801d154:	4411      	add	r1, r2
 801d156:	e7c6      	b.n	801d0e6 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801d158:	b003      	add	sp, #12
 801d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d160 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d160:	2bff      	cmp	r3, #255	; 0xff
 801d162:	d061      	beq.n	801d228 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d164:	2a33      	cmp	r2, #51	; 0x33
 801d166:	d83d      	bhi.n	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d168:	e8df f012 	tbh	[pc, r2, lsl #1]
 801d16c:	00500054 	.word	0x00500054
 801d170:	004e0052 	.word	0x004e0052
 801d174:	00560058 	.word	0x00560058
 801d178:	003c003c 	.word	0x003c003c
 801d17c:	010000fe 	.word	0x010000fe
 801d180:	010000fe 	.word	0x010000fe
 801d184:	003c003c 	.word	0x003c003c
 801d188:	003c003c 	.word	0x003c003c
 801d18c:	003c003c 	.word	0x003c003c
 801d190:	003c003c 	.word	0x003c003c
 801d194:	003c003c 	.word	0x003c003c
 801d198:	003c003c 	.word	0x003c003c
 801d19c:	003c003c 	.word	0x003c003c
 801d1a0:	003c003c 	.word	0x003c003c
 801d1a4:	003c003c 	.word	0x003c003c
 801d1a8:	003c003c 	.word	0x003c003c
 801d1ac:	003c003c 	.word	0x003c003c
 801d1b0:	003c003c 	.word	0x003c003c
 801d1b4:	003c003c 	.word	0x003c003c
 801d1b8:	003c003c 	.word	0x003c003c
 801d1bc:	003c003c 	.word	0x003c003c
 801d1c0:	003c003c 	.word	0x003c003c
 801d1c4:	00340042 	.word	0x00340042
 801d1c8:	00e400eb 	.word	0x00e400eb
 801d1cc:	005a005c 	.word	0x005a005c
 801d1d0:	005a005c 	.word	0x005a005c
 801d1d4:	684b      	ldr	r3, [r1, #4]
 801d1d6:	781b      	ldrb	r3, [r3, #0]
 801d1d8:	2b01      	cmp	r3, #1
 801d1da:	d005      	beq.n	801d1e8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d1dc:	f0c0 80af 	bcc.w	801d33e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801d1e0:	2b02      	cmp	r3, #2
 801d1e2:	d003      	beq.n	801d1ec <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d1e4:	2000      	movs	r0, #0
 801d1e6:	4770      	bx	lr
 801d1e8:	6a00      	ldr	r0, [r0, #32]
 801d1ea:	4770      	bx	lr
 801d1ec:	6900      	ldr	r0, [r0, #16]
 801d1ee:	4770      	bx	lr
 801d1f0:	684b      	ldr	r3, [r1, #4]
 801d1f2:	781b      	ldrb	r3, [r3, #0]
 801d1f4:	2b01      	cmp	r3, #1
 801d1f6:	d005      	beq.n	801d204 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 801d1f8:	f0c0 80a8 	bcc.w	801d34c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801d1fc:	2b02      	cmp	r3, #2
 801d1fe:	d1f1      	bne.n	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d200:	6880      	ldr	r0, [r0, #8]
 801d202:	4770      	bx	lr
 801d204:	6980      	ldr	r0, [r0, #24]
 801d206:	4770      	bx	lr
 801d208:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d20a:	4770      	bx	lr
 801d20c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d20e:	4770      	bx	lr
 801d210:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d212:	4770      	bx	lr
 801d214:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d216:	4770      	bx	lr
 801d218:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801d21a:	4770      	bx	lr
 801d21c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d21e:	4770      	bx	lr
 801d220:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801d222:	4770      	bx	lr
 801d224:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801d226:	4770      	bx	lr
 801d228:	2a33      	cmp	r2, #51	; 0x33
 801d22a:	d8db      	bhi.n	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d22c:	a301      	add	r3, pc, #4	; (adr r3, 801d234 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801d22e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801d232:	bf00      	nop
 801d234:	0801d35d 	.word	0x0801d35d
 801d238:	0801d355 	.word	0x0801d355
 801d23c:	0801d359 	.word	0x0801d359
 801d240:	0801d351 	.word	0x0801d351
 801d244:	0801d365 	.word	0x0801d365
 801d248:	0801d361 	.word	0x0801d361
 801d24c:	0801d1e5 	.word	0x0801d1e5
 801d250:	0801d1e5 	.word	0x0801d1e5
 801d254:	0801d369 	.word	0x0801d369
 801d258:	0801d36d 	.word	0x0801d36d
 801d25c:	0801d369 	.word	0x0801d369
 801d260:	0801d36d 	.word	0x0801d36d
 801d264:	0801d1e5 	.word	0x0801d1e5
 801d268:	0801d1e5 	.word	0x0801d1e5
 801d26c:	0801d1e5 	.word	0x0801d1e5
 801d270:	0801d1e5 	.word	0x0801d1e5
 801d274:	0801d1e5 	.word	0x0801d1e5
 801d278:	0801d1e5 	.word	0x0801d1e5
 801d27c:	0801d1e5 	.word	0x0801d1e5
 801d280:	0801d1e5 	.word	0x0801d1e5
 801d284:	0801d1e5 	.word	0x0801d1e5
 801d288:	0801d1e5 	.word	0x0801d1e5
 801d28c:	0801d1e5 	.word	0x0801d1e5
 801d290:	0801d1e5 	.word	0x0801d1e5
 801d294:	0801d1e5 	.word	0x0801d1e5
 801d298:	0801d1e5 	.word	0x0801d1e5
 801d29c:	0801d1e5 	.word	0x0801d1e5
 801d2a0:	0801d1e5 	.word	0x0801d1e5
 801d2a4:	0801d1e5 	.word	0x0801d1e5
 801d2a8:	0801d1e5 	.word	0x0801d1e5
 801d2ac:	0801d1e5 	.word	0x0801d1e5
 801d2b0:	0801d1e5 	.word	0x0801d1e5
 801d2b4:	0801d1e5 	.word	0x0801d1e5
 801d2b8:	0801d1e5 	.word	0x0801d1e5
 801d2bc:	0801d1e5 	.word	0x0801d1e5
 801d2c0:	0801d1e5 	.word	0x0801d1e5
 801d2c4:	0801d1e5 	.word	0x0801d1e5
 801d2c8:	0801d1e5 	.word	0x0801d1e5
 801d2cc:	0801d1e5 	.word	0x0801d1e5
 801d2d0:	0801d1e5 	.word	0x0801d1e5
 801d2d4:	0801d1e5 	.word	0x0801d1e5
 801d2d8:	0801d1e5 	.word	0x0801d1e5
 801d2dc:	0801d1e5 	.word	0x0801d1e5
 801d2e0:	0801d1e5 	.word	0x0801d1e5
 801d2e4:	0801d31d 	.word	0x0801d31d
 801d2e8:	0801d305 	.word	0x0801d305
 801d2ec:	0801d343 	.word	0x0801d343
 801d2f0:	0801d335 	.word	0x0801d335
 801d2f4:	0801d375 	.word	0x0801d375
 801d2f8:	0801d371 	.word	0x0801d371
 801d2fc:	0801d375 	.word	0x0801d375
 801d300:	0801d371 	.word	0x0801d371
 801d304:	684b      	ldr	r3, [r1, #4]
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	2b01      	cmp	r3, #1
 801d30a:	d005      	beq.n	801d318 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801d30c:	d317      	bcc.n	801d33e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801d30e:	2b02      	cmp	r3, #2
 801d310:	f47f af68 	bne.w	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d314:	6940      	ldr	r0, [r0, #20]
 801d316:	4770      	bx	lr
 801d318:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d31a:	4770      	bx	lr
 801d31c:	684b      	ldr	r3, [r1, #4]
 801d31e:	781b      	ldrb	r3, [r3, #0]
 801d320:	2b01      	cmp	r3, #1
 801d322:	d005      	beq.n	801d330 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 801d324:	d312      	bcc.n	801d34c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801d326:	2b02      	cmp	r3, #2
 801d328:	f47f af5c 	bne.w	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d32c:	68c0      	ldr	r0, [r0, #12]
 801d32e:	4770      	bx	lr
 801d330:	69c0      	ldr	r0, [r0, #28]
 801d332:	4770      	bx	lr
 801d334:	684b      	ldr	r3, [r1, #4]
 801d336:	781b      	ldrb	r3, [r3, #0]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	f47f af53 	bne.w	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d33e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d340:	4770      	bx	lr
 801d342:	684b      	ldr	r3, [r1, #4]
 801d344:	781b      	ldrb	r3, [r3, #0]
 801d346:	2b00      	cmp	r3, #0
 801d348:	f47f af4c 	bne.w	801d1e4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d34c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d34e:	4770      	bx	lr
 801d350:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d352:	4770      	bx	lr
 801d354:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d356:	4770      	bx	lr
 801d358:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d35a:	4770      	bx	lr
 801d35c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d35e:	4770      	bx	lr
 801d360:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801d362:	4770      	bx	lr
 801d364:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d366:	4770      	bx	lr
 801d368:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801d36a:	4770      	bx	lr
 801d36c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801d36e:	4770      	bx	lr
 801d370:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801d372:	4770      	bx	lr
 801d374:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d376:	4770      	bx	lr

0801d378 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d37c:	b087      	sub	sp, #28
 801d37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d382:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d384:	9100      	str	r1, [sp, #0]
 801d386:	6868      	ldr	r0, [r5, #4]
 801d388:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801d38c:	9204      	str	r2, [sp, #16]
 801d38e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d392:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	; 0x58
 801d396:	fb00 1404 	mla	r4, r0, r4, r1
 801d39a:	6829      	ldr	r1, [r5, #0]
 801d39c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d3a0:	f8db 1000 	ldr.w	r1, [fp]
 801d3a4:	9101      	str	r1, [sp, #4]
 801d3a6:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d3aa:	3104      	adds	r1, #4
 801d3ac:	9102      	str	r1, [sp, #8]
 801d3ae:	9900      	ldr	r1, [sp, #0]
 801d3b0:	2900      	cmp	r1, #0
 801d3b2:	dc03      	bgt.n	801d3bc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d3b4:	9904      	ldr	r1, [sp, #16]
 801d3b6:	2900      	cmp	r1, #0
 801d3b8:	f340 815a 	ble.w	801d670 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d3bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d3be:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d3c2:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801d3c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d3c8:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801d3cc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	dd0e      	ble.n	801d3f2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d3d4:	1405      	asrs	r5, r0, #16
 801d3d6:	d405      	bmi.n	801d3e4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d3d8:	4565      	cmp	r5, ip
 801d3da:	da03      	bge.n	801d3e4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d3dc:	140d      	asrs	r5, r1, #16
 801d3de:	d401      	bmi.n	801d3e4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d3e0:	42bd      	cmp	r5, r7
 801d3e2:	db07      	blt.n	801d3f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d3e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d3e6:	3b01      	subs	r3, #1
 801d3e8:	3404      	adds	r4, #4
 801d3ea:	4428      	add	r0, r5
 801d3ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d3ee:	4429      	add	r1, r5
 801d3f0:	e7ee      	b.n	801d3d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d3f2:	d04d      	beq.n	801d490 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d3f4:	1e5d      	subs	r5, r3, #1
 801d3f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d3f8:	fb06 0605 	mla	r6, r6, r5, r0
 801d3fc:	1436      	asrs	r6, r6, #16
 801d3fe:	d43d      	bmi.n	801d47c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d400:	4566      	cmp	r6, ip
 801d402:	da3b      	bge.n	801d47c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d404:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d406:	fb06 1505 	mla	r5, r6, r5, r1
 801d40a:	142d      	asrs	r5, r5, #16
 801d40c:	d436      	bmi.n	801d47c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d40e:	42bd      	cmp	r5, r7
 801d410:	da34      	bge.n	801d47c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d412:	1d25      	adds	r5, r4, #4
 801d414:	4699      	mov	r9, r3
 801d416:	f1b9 0f00 	cmp.w	r9, #0
 801d41a:	dd35      	ble.n	801d488 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801d41c:	140e      	asrs	r6, r1, #16
 801d41e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d422:	1407      	asrs	r7, r0, #16
 801d424:	2aff      	cmp	r2, #255	; 0xff
 801d426:	46b6      	mov	lr, r6
 801d428:	9e01      	ldr	r6, [sp, #4]
 801d42a:	fb0c 660e 	mla	r6, ip, lr, r6
 801d42e:	5df6      	ldrb	r6, [r6, r7]
 801d430:	9f02      	ldr	r7, [sp, #8]
 801d432:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801d436:	ea4f 2726 	mov.w	r7, r6, asr #8
 801d43a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801d43e:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801d442:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d446:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d44a:	b2f6      	uxtb	r6, r6
 801d44c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d450:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801d454:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d458:	f040 80d4 	bne.w	801d604 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d45c:	f805 6c04 	strb.w	r6, [r5, #-4]
 801d460:	f805 cc03 	strb.w	ip, [r5, #-3]
 801d464:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d468:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d46c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d46e:	3504      	adds	r5, #4
 801d470:	f109 39ff 	add.w	r9, r9, #4294967295
 801d474:	4430      	add	r0, r6
 801d476:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d478:	4431      	add	r1, r6
 801d47a:	e7cc      	b.n	801d416 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d47c:	f04f 0c00 	mov.w	ip, #0
 801d480:	eb03 050c 	add.w	r5, r3, ip
 801d484:	2d00      	cmp	r5, #0
 801d486:	dc3f      	bgt.n	801d508 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d48c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d490:	9b00      	ldr	r3, [sp, #0]
 801d492:	2b00      	cmp	r3, #0
 801d494:	f340 80ec 	ble.w	801d670 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d498:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d49e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4a2:	eeb0 6a62 	vmov.f32	s12, s5
 801d4a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d4aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d4b6:	eeb0 6a43 	vmov.f32	s12, s6
 801d4ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d4c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4da:	ee12 1a90 	vmov	r1, s5
 801d4de:	eef0 2a47 	vmov.f32	s5, s14
 801d4e2:	fb91 f3f3 	sdiv	r3, r1, r3
 801d4e6:	ee13 1a10 	vmov	r1, s6
 801d4ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801d4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4ee:	eeb0 3a67 	vmov.f32	s6, s15
 801d4f2:	fb91 f3f3 	sdiv	r3, r1, r3
 801d4f6:	9314      	str	r3, [sp, #80]	; 0x50
 801d4f8:	9b00      	ldr	r3, [sp, #0]
 801d4fa:	9904      	ldr	r1, [sp, #16]
 801d4fc:	3b01      	subs	r3, #1
 801d4fe:	9300      	str	r3, [sp, #0]
 801d500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d502:	bf08      	it	eq
 801d504:	460b      	moveq	r3, r1
 801d506:	e752      	b.n	801d3ae <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d508:	1407      	asrs	r7, r0, #16
 801d50a:	d435      	bmi.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d50c:	f8db 6008 	ldr.w	r6, [fp, #8]
 801d510:	42be      	cmp	r6, r7
 801d512:	dd31      	ble.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d514:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d518:	d42e      	bmi.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d51a:	f8db 500c 	ldr.w	r5, [fp, #12]
 801d51e:	4575      	cmp	r5, lr
 801d520:	dd2a      	ble.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d522:	9d01      	ldr	r5, [sp, #4]
 801d524:	b236      	sxth	r6, r6
 801d526:	2aff      	cmp	r2, #255	; 0xff
 801d528:	fb0e 5606 	mla	r6, lr, r6, r5
 801d52c:	5df5      	ldrb	r5, [r6, r7]
 801d52e:	9e02      	ldr	r6, [sp, #8]
 801d530:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801d534:	ea4f 2625 	mov.w	r6, r5, asr #8
 801d538:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801d53c:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801d540:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d544:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d548:	b2ed      	uxtb	r5, r5
 801d54a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d54e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d552:	9603      	str	r6, [sp, #12]
 801d554:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801d558:	462e      	mov	r6, r5
 801d55a:	d114      	bne.n	801d586 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d55c:	f06f 0503 	mvn.w	r5, #3
 801d560:	fb05 fe0c 	mul.w	lr, r5, ip
 801d564:	9d03      	ldr	r5, [sp, #12]
 801d566:	f804 600e 	strb.w	r6, [r4, lr]
 801d56a:	44a6      	add	lr, r4
 801d56c:	f88e 7001 	strb.w	r7, [lr, #1]
 801d570:	f88e 5002 	strb.w	r5, [lr, #2]
 801d574:	f88e 2003 	strb.w	r2, [lr, #3]
 801d578:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d57a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d57e:	4428      	add	r0, r5
 801d580:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d582:	4429      	add	r1, r5
 801d584:	e77c      	b.n	801d480 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801d586:	2a00      	cmp	r2, #0
 801d588:	d0f6      	beq.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d58a:	fb12 f707 	smulbb	r7, r2, r7
 801d58e:	f06f 0503 	mvn.w	r5, #3
 801d592:	fb05 fa0c 	mul.w	sl, r5, ip
 801d596:	eb04 090a 	add.w	r9, r4, sl
 801d59a:	f899 5003 	ldrb.w	r5, [r9, #3]
 801d59e:	fb02 fe05 	mul.w	lr, r2, r5
 801d5a2:	f10e 0801 	add.w	r8, lr, #1
 801d5a6:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801d5aa:	eb02 0e05 	add.w	lr, r2, r5
 801d5ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5b2:	ebae 0e08 	sub.w	lr, lr, r8
 801d5b6:	eba5 0808 	sub.w	r8, r5, r8
 801d5ba:	f814 500a 	ldrb.w	r5, [r4, sl]
 801d5be:	fa5f fe8e 	uxtb.w	lr, lr
 801d5c2:	9505      	str	r5, [sp, #20]
 801d5c4:	fb16 f502 	smulbb	r5, r6, r2
 801d5c8:	462e      	mov	r6, r5
 801d5ca:	9d05      	ldr	r5, [sp, #20]
 801d5cc:	fb08 6505 	mla	r5, r8, r5, r6
 801d5d0:	9e03      	ldr	r6, [sp, #12]
 801d5d2:	fb95 f5fe 	sdiv	r5, r5, lr
 801d5d6:	f804 500a 	strb.w	r5, [r4, sl]
 801d5da:	fb12 f606 	smulbb	r6, r2, r6
 801d5de:	f899 5001 	ldrb.w	r5, [r9, #1]
 801d5e2:	f889 e003 	strb.w	lr, [r9, #3]
 801d5e6:	fb08 7705 	mla	r7, r8, r5, r7
 801d5ea:	f899 5002 	ldrb.w	r5, [r9, #2]
 801d5ee:	fb08 6605 	mla	r6, r8, r5, r6
 801d5f2:	fb97 f7fe 	sdiv	r7, r7, lr
 801d5f6:	fb96 f6fe 	sdiv	r6, r6, lr
 801d5fa:	f889 7001 	strb.w	r7, [r9, #1]
 801d5fe:	f889 6002 	strb.w	r6, [r9, #2]
 801d602:	e7b9      	b.n	801d578 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d604:	2a00      	cmp	r2, #0
 801d606:	f43f af31 	beq.w	801d46c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d60a:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801d60e:	fb16 f602 	smulbb	r6, r6, r2
 801d612:	fb12 fc0c 	smulbb	ip, r2, ip
 801d616:	fb12 f707 	smulbb	r7, r2, r7
 801d61a:	fb02 fe0a 	mul.w	lr, r2, sl
 801d61e:	f10e 0801 	add.w	r8, lr, #1
 801d622:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801d626:	eb02 0e0a 	add.w	lr, r2, sl
 801d62a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d62e:	ebae 0e08 	sub.w	lr, lr, r8
 801d632:	ebaa 0808 	sub.w	r8, sl, r8
 801d636:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801d63a:	fa5f fe8e 	uxtb.w	lr, lr
 801d63e:	fb08 660a 	mla	r6, r8, sl, r6
 801d642:	f805 ec01 	strb.w	lr, [r5, #-1]
 801d646:	fb96 f6fe 	sdiv	r6, r6, lr
 801d64a:	f805 6c04 	strb.w	r6, [r5, #-4]
 801d64e:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801d652:	fb08 cc06 	mla	ip, r8, r6, ip
 801d656:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801d65a:	fb08 7706 	mla	r7, r8, r6, r7
 801d65e:	fb9c fcfe 	sdiv	ip, ip, lr
 801d662:	fb97 f7fe 	sdiv	r7, r7, lr
 801d666:	f805 cc03 	strb.w	ip, [r5, #-3]
 801d66a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d66e:	e6fd      	b.n	801d46c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d670:	b007      	add	sp, #28
 801d672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d676 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d67a:	b085      	sub	sp, #20
 801d67c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d680:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d682:	9203      	str	r2, [sp, #12]
 801d684:	6860      	ldr	r0, [r4, #4]
 801d686:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801d688:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d68c:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	; 0x44
 801d690:	fb00 2505 	mla	r5, r0, r5, r2
 801d694:	6822      	ldr	r2, [r4, #0]
 801d696:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801d69a:	683a      	ldr	r2, [r7, #0]
 801d69c:	9201      	str	r2, [sp, #4]
 801d69e:	687a      	ldr	r2, [r7, #4]
 801d6a0:	3204      	adds	r2, #4
 801d6a2:	9202      	str	r2, [sp, #8]
 801d6a4:	2900      	cmp	r1, #0
 801d6a6:	dc03      	bgt.n	801d6b0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d6a8:	9a03      	ldr	r2, [sp, #12]
 801d6aa:	2a00      	cmp	r2, #0
 801d6ac:	f340 80c4 	ble.w	801d838 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d6b2:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801d6b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d6ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d6bc:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801d6c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	dd0c      	ble.n	801d6e2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d6c8:	1404      	asrs	r4, r0, #16
 801d6ca:	d405      	bmi.n	801d6d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d6cc:	454c      	cmp	r4, r9
 801d6ce:	da03      	bge.n	801d6d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d6d0:	1414      	asrs	r4, r2, #16
 801d6d2:	d401      	bmi.n	801d6d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d6d4:	4564      	cmp	r4, ip
 801d6d6:	db05      	blt.n	801d6e4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d6d8:	4440      	add	r0, r8
 801d6da:	4472      	add	r2, lr
 801d6dc:	3b01      	subs	r3, #1
 801d6de:	3504      	adds	r5, #4
 801d6e0:	e7f0      	b.n	801d6c4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d6e2:	d00e      	beq.n	801d702 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d6e4:	1e5c      	subs	r4, r3, #1
 801d6e6:	fb08 0604 	mla	r6, r8, r4, r0
 801d6ea:	1436      	asrs	r6, r6, #16
 801d6ec:	d53e      	bpl.n	801d76c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801d6ee:	4699      	mov	r9, r3
 801d6f0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801d6f4:	f1b9 0f00 	cmp.w	r9, #0
 801d6f8:	dc6b      	bgt.n	801d7d2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d6fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801d702:	2900      	cmp	r1, #0
 801d704:	f340 8098 	ble.w	801d838 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d708:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d70e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d712:	3901      	subs	r1, #1
 801d714:	eeb0 6a62 	vmov.f32	s12, s5
 801d718:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d71c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d720:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d724:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d728:	eeb0 6a43 	vmov.f32	s12, s6
 801d72c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d730:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d734:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d738:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d73c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d740:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d744:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d748:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d74c:	ee12 2a90 	vmov	r2, s5
 801d750:	eef0 2a47 	vmov.f32	s5, s14
 801d754:	fb92 f8f3 	sdiv	r8, r2, r3
 801d758:	ee13 2a10 	vmov	r2, s6
 801d75c:	eeb0 3a67 	vmov.f32	s6, s15
 801d760:	fb92 fef3 	sdiv	lr, r2, r3
 801d764:	9a03      	ldr	r2, [sp, #12]
 801d766:	bf08      	it	eq
 801d768:	4613      	moveq	r3, r2
 801d76a:	e79b      	b.n	801d6a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d76c:	454e      	cmp	r6, r9
 801d76e:	dabe      	bge.n	801d6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d770:	fb0e 2404 	mla	r4, lr, r4, r2
 801d774:	1424      	asrs	r4, r4, #16
 801d776:	d4ba      	bmi.n	801d6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d778:	4564      	cmp	r4, ip
 801d77a:	dab8      	bge.n	801d6ee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d77c:	4699      	mov	r9, r3
 801d77e:	46aa      	mov	sl, r5
 801d780:	f1b9 0f00 	cmp.w	r9, #0
 801d784:	ddb9      	ble.n	801d6fa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d786:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801d78a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801d78e:	9c01      	ldr	r4, [sp, #4]
 801d790:	1406      	asrs	r6, r0, #16
 801d792:	4472      	add	r2, lr
 801d794:	4440      	add	r0, r8
 801d796:	fb0c 440b 	mla	r4, ip, fp, r4
 801d79a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d79e:	5da4      	ldrb	r4, [r4, r6]
 801d7a0:	9e02      	ldr	r6, [sp, #8]
 801d7a2:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801d7a6:	10f4      	asrs	r4, r6, #3
 801d7a8:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801d7ac:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d7b0:	00f6      	lsls	r6, r6, #3
 801d7b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d7b6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d7ba:	b2f6      	uxtb	r6, r6
 801d7bc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801d7c0:	0224      	lsls	r4, r4, #8
 801d7c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d7c6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801d7ca:	4334      	orrs	r4, r6
 801d7cc:	f84a 4b04 	str.w	r4, [sl], #4
 801d7d0:	e7d6      	b.n	801d780 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d7d2:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801d7d6:	d42a      	bmi.n	801d82e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d7d8:	68be      	ldr	r6, [r7, #8]
 801d7da:	4566      	cmp	r6, ip
 801d7dc:	dd27      	ble.n	801d82e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d7de:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d7e2:	d424      	bmi.n	801d82e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d7e4:	68fc      	ldr	r4, [r7, #12]
 801d7e6:	455c      	cmp	r4, fp
 801d7e8:	dd21      	ble.n	801d82e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d7ea:	9c01      	ldr	r4, [sp, #4]
 801d7ec:	b236      	sxth	r6, r6
 801d7ee:	fb0b 4606 	mla	r6, fp, r6, r4
 801d7f2:	f06f 0b03 	mvn.w	fp, #3
 801d7f6:	f816 400c 	ldrb.w	r4, [r6, ip]
 801d7fa:	fb0b fb09 	mul.w	fp, fp, r9
 801d7fe:	9e02      	ldr	r6, [sp, #8]
 801d800:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801d804:	10f4      	asrs	r4, r6, #3
 801d806:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801d80a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d80e:	00f6      	lsls	r6, r6, #3
 801d810:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d814:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d818:	b2f6      	uxtb	r6, r6
 801d81a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801d81e:	0224      	lsls	r4, r4, #8
 801d820:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d824:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801d828:	4334      	orrs	r4, r6
 801d82a:	f84a 400b 	str.w	r4, [sl, fp]
 801d82e:	4440      	add	r0, r8
 801d830:	4472      	add	r2, lr
 801d832:	f109 39ff 	add.w	r9, r9, #4294967295
 801d836:	e75d      	b.n	801d6f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d838:	b005      	add	sp, #20
 801d83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d83e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d83e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d842:	b085      	sub	sp, #20
 801d844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d848:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d84a:	9101      	str	r1, [sp, #4]
 801d84c:	6868      	ldr	r0, [r5, #4]
 801d84e:	9203      	str	r2, [sp, #12]
 801d850:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d854:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801d858:	fb00 1404 	mla	r4, r0, r4, r1
 801d85c:	6829      	ldr	r1, [r5, #0]
 801d85e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d862:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d864:	6809      	ldr	r1, [r1, #0]
 801d866:	9102      	str	r1, [sp, #8]
 801d868:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d86a:	6849      	ldr	r1, [r1, #4]
 801d86c:	3104      	adds	r1, #4
 801d86e:	9100      	str	r1, [sp, #0]
 801d870:	9901      	ldr	r1, [sp, #4]
 801d872:	2900      	cmp	r1, #0
 801d874:	dc03      	bgt.n	801d87e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d876:	9903      	ldr	r1, [sp, #12]
 801d878:	2900      	cmp	r1, #0
 801d87a:	f340 813d 	ble.w	801daf8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d87e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d880:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801d884:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801d888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d88a:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801d88e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d890:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d894:	2b00      	cmp	r3, #0
 801d896:	dd0e      	ble.n	801d8b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d898:	1405      	asrs	r5, r0, #16
 801d89a:	d405      	bmi.n	801d8a8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d89c:	4565      	cmp	r5, ip
 801d89e:	da03      	bge.n	801d8a8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d8a0:	140d      	asrs	r5, r1, #16
 801d8a2:	d401      	bmi.n	801d8a8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d8a4:	42bd      	cmp	r5, r7
 801d8a6:	db07      	blt.n	801d8b8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d8a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d8aa:	3b01      	subs	r3, #1
 801d8ac:	3404      	adds	r4, #4
 801d8ae:	4428      	add	r0, r5
 801d8b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d8b2:	4429      	add	r1, r5
 801d8b4:	e7ee      	b.n	801d894 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d8b6:	d044      	beq.n	801d942 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d8b8:	1e5d      	subs	r5, r3, #1
 801d8ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d8bc:	fb06 0605 	mla	r6, r6, r5, r0
 801d8c0:	1436      	asrs	r6, r6, #16
 801d8c2:	d436      	bmi.n	801d932 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d8c4:	4566      	cmp	r6, ip
 801d8c6:	da34      	bge.n	801d932 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d8c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d8ca:	fb06 1505 	mla	r5, r6, r5, r1
 801d8ce:	142d      	asrs	r5, r5, #16
 801d8d0:	d42f      	bmi.n	801d932 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d8d2:	42bd      	cmp	r5, r7
 801d8d4:	da2d      	bge.n	801d932 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d8d6:	1d25      	adds	r5, r4, #4
 801d8d8:	469a      	mov	sl, r3
 801d8da:	f1ba 0f00 	cmp.w	sl, #0
 801d8de:	dd2c      	ble.n	801d93a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801d8e0:	140e      	asrs	r6, r1, #16
 801d8e2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801d8e4:	2aff      	cmp	r2, #255	; 0xff
 801d8e6:	46b6      	mov	lr, r6
 801d8e8:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801d8ec:	9e02      	ldr	r6, [sp, #8]
 801d8ee:	ea4f 4720 	mov.w	r7, r0, asr #16
 801d8f2:	fb0c 660e 	mla	r6, ip, lr, r6
 801d8f6:	5df6      	ldrb	r6, [r6, r7]
 801d8f8:	9f00      	ldr	r7, [sp, #0]
 801d8fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d8fe:	4437      	add	r7, r6
 801d900:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d904:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d908:	9f00      	ldr	r7, [sp, #0]
 801d90a:	f817 9006 	ldrb.w	r9, [r7, r6]
 801d90e:	f040 80be 	bne.w	801da8e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d912:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d916:	f805 8c03 	strb.w	r8, [r5, #-3]
 801d91a:	f805 ec02 	strb.w	lr, [r5, #-2]
 801d91e:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d922:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d924:	3504      	adds	r5, #4
 801d926:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d92a:	4430      	add	r0, r6
 801d92c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d92e:	4431      	add	r1, r6
 801d930:	e7d3      	b.n	801d8da <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d932:	2500      	movs	r5, #0
 801d934:	195e      	adds	r6, r3, r5
 801d936:	2e00      	cmp	r6, #0
 801d938:	dc3f      	bgt.n	801d9ba <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d93a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d93e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d942:	9b01      	ldr	r3, [sp, #4]
 801d944:	2b00      	cmp	r3, #0
 801d946:	f340 80d7 	ble.w	801daf8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d94a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d950:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d954:	eeb0 6a62 	vmov.f32	s12, s5
 801d958:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d95c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d960:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d964:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d968:	eeb0 6a43 	vmov.f32	s12, s6
 801d96c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d970:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d974:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d978:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d97c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d980:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d984:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d988:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d98c:	ee12 1a90 	vmov	r1, s5
 801d990:	eef0 2a47 	vmov.f32	s5, s14
 801d994:	fb91 f3f3 	sdiv	r3, r1, r3
 801d998:	ee13 1a10 	vmov	r1, s6
 801d99c:	9311      	str	r3, [sp, #68]	; 0x44
 801d99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9a0:	eeb0 3a67 	vmov.f32	s6, s15
 801d9a4:	fb91 f3f3 	sdiv	r3, r1, r3
 801d9a8:	9312      	str	r3, [sp, #72]	; 0x48
 801d9aa:	9b01      	ldr	r3, [sp, #4]
 801d9ac:	9903      	ldr	r1, [sp, #12]
 801d9ae:	3b01      	subs	r3, #1
 801d9b0:	9301      	str	r3, [sp, #4]
 801d9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9b4:	bf08      	it	eq
 801d9b6:	460b      	moveq	r3, r1
 801d9b8:	e75a      	b.n	801d870 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d9ba:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801d9be:	d427      	bmi.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d9c0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801d9c2:	68b7      	ldr	r7, [r6, #8]
 801d9c4:	4567      	cmp	r7, ip
 801d9c6:	dd23      	ble.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d9c8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d9cc:	d420      	bmi.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d9ce:	68f6      	ldr	r6, [r6, #12]
 801d9d0:	4576      	cmp	r6, lr
 801d9d2:	dd1d      	ble.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d9d4:	9e02      	ldr	r6, [sp, #8]
 801d9d6:	b23f      	sxth	r7, r7
 801d9d8:	2aff      	cmp	r2, #255	; 0xff
 801d9da:	fb0e 6707 	mla	r7, lr, r7, r6
 801d9de:	f817 600c 	ldrb.w	r6, [r7, ip]
 801d9e2:	9f00      	ldr	r7, [sp, #0]
 801d9e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d9e8:	4437      	add	r7, r6
 801d9ea:	f897 8002 	ldrb.w	r8, [r7, #2]
 801d9ee:	f897 9001 	ldrb.w	r9, [r7, #1]
 801d9f2:	9f00      	ldr	r7, [sp, #0]
 801d9f4:	f817 a006 	ldrb.w	sl, [r7, r6]
 801d9f8:	d110      	bne.n	801da1c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d9fa:	f06f 0603 	mvn.w	r6, #3
 801d9fe:	436e      	muls	r6, r5
 801da00:	f804 a006 	strb.w	sl, [r4, r6]
 801da04:	4426      	add	r6, r4
 801da06:	f886 9001 	strb.w	r9, [r6, #1]
 801da0a:	f886 8002 	strb.w	r8, [r6, #2]
 801da0e:	70f2      	strb	r2, [r6, #3]
 801da10:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801da12:	3d01      	subs	r5, #1
 801da14:	4430      	add	r0, r6
 801da16:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801da18:	4431      	add	r1, r6
 801da1a:	e78b      	b.n	801d934 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801da1c:	2a00      	cmp	r2, #0
 801da1e:	d0f7      	beq.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801da20:	fb1a fa02 	smulbb	sl, sl, r2
 801da24:	f06f 0603 	mvn.w	r6, #3
 801da28:	fb12 f909 	smulbb	r9, r2, r9
 801da2c:	fb12 f808 	smulbb	r8, r2, r8
 801da30:	fb06 fb05 	mul.w	fp, r6, r5
 801da34:	eb04 0c0b 	add.w	ip, r4, fp
 801da38:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801da3c:	fb02 f607 	mul.w	r6, r2, r7
 801da40:	f106 0e01 	add.w	lr, r6, #1
 801da44:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801da48:	19d6      	adds	r6, r2, r7
 801da4a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da4e:	eba7 070e 	sub.w	r7, r7, lr
 801da52:	eba6 060e 	sub.w	r6, r6, lr
 801da56:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801da5a:	b2f6      	uxtb	r6, r6
 801da5c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801da60:	fb9a faf6 	sdiv	sl, sl, r6
 801da64:	f804 a00b 	strb.w	sl, [r4, fp]
 801da68:	f89c e001 	ldrb.w	lr, [ip, #1]
 801da6c:	f88c 6003 	strb.w	r6, [ip, #3]
 801da70:	fb07 990e 	mla	r9, r7, lr, r9
 801da74:	f89c e002 	ldrb.w	lr, [ip, #2]
 801da78:	fb07 880e 	mla	r8, r7, lr, r8
 801da7c:	fb99 f9f6 	sdiv	r9, r9, r6
 801da80:	fb98 f8f6 	sdiv	r8, r8, r6
 801da84:	f88c 9001 	strb.w	r9, [ip, #1]
 801da88:	f88c 8002 	strb.w	r8, [ip, #2]
 801da8c:	e7c0      	b.n	801da10 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801da8e:	2a00      	cmp	r2, #0
 801da90:	f43f af47 	beq.w	801d922 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801da94:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801da98:	fb19 f902 	smulbb	r9, r9, r2
 801da9c:	fb12 f808 	smulbb	r8, r2, r8
 801daa0:	fb02 fc0b 	mul.w	ip, r2, fp
 801daa4:	eb02 060b 	add.w	r6, r2, fp
 801daa8:	fb12 fe0e 	smulbb	lr, r2, lr
 801daac:	f10c 0701 	add.w	r7, ip, #1
 801dab0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dab4:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801dab8:	ebab 070c 	sub.w	r7, fp, ip
 801dabc:	eba6 060c 	sub.w	r6, r6, ip
 801dac0:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801dac4:	b2f6      	uxtb	r6, r6
 801dac6:	fb07 990c 	mla	r9, r7, ip, r9
 801daca:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801dace:	f805 6c01 	strb.w	r6, [r5, #-1]
 801dad2:	fb07 880c 	mla	r8, r7, ip, r8
 801dad6:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801dada:	fb07 ee0c 	mla	lr, r7, ip, lr
 801dade:	fb99 f9f6 	sdiv	r9, r9, r6
 801dae2:	fb98 f8f6 	sdiv	r8, r8, r6
 801dae6:	fb9e fef6 	sdiv	lr, lr, r6
 801daea:	f805 9c04 	strb.w	r9, [r5, #-4]
 801daee:	f805 8c03 	strb.w	r8, [r5, #-3]
 801daf2:	f805 ec02 	strb.w	lr, [r5, #-2]
 801daf6:	e714      	b.n	801d922 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801daf8:	b005      	add	sp, #20
 801dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dafe <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dafe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db02:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801db04:	4693      	mov	fp, r2
 801db06:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801db08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db0c:	6870      	ldr	r0, [r6, #4]
 801db0e:	686f      	ldr	r7, [r5, #4]
 801db10:	9100      	str	r1, [sp, #0]
 801db12:	3704      	adds	r7, #4
 801db14:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801db18:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801db1c:	fb00 2404 	mla	r4, r0, r4, r2
 801db20:	6832      	ldr	r2, [r6, #0]
 801db22:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801db26:	682a      	ldr	r2, [r5, #0]
 801db28:	9201      	str	r2, [sp, #4]
 801db2a:	9a00      	ldr	r2, [sp, #0]
 801db2c:	2a00      	cmp	r2, #0
 801db2e:	dc03      	bgt.n	801db38 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801db30:	f1bb 0f00 	cmp.w	fp, #0
 801db34:	f340 80bd 	ble.w	801dcb2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801db38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db3a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801db3e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801db42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801db44:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801db48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	dd0c      	ble.n	801db6a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db50:	1406      	asrs	r6, r0, #16
 801db52:	d405      	bmi.n	801db60 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db54:	4556      	cmp	r6, sl
 801db56:	da03      	bge.n	801db60 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db58:	1416      	asrs	r6, r2, #16
 801db5a:	d401      	bmi.n	801db60 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db5c:	454e      	cmp	r6, r9
 801db5e:	db05      	blt.n	801db6c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801db60:	4440      	add	r0, r8
 801db62:	4472      	add	r2, lr
 801db64:	3b01      	subs	r3, #1
 801db66:	3404      	adds	r4, #4
 801db68:	e7f0      	b.n	801db4c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801db6a:	d03e      	beq.n	801dbea <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801db6c:	1e5e      	subs	r6, r3, #1
 801db6e:	fb08 0c06 	mla	ip, r8, r6, r0
 801db72:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801db76:	d42e      	bmi.n	801dbd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801db78:	45d4      	cmp	ip, sl
 801db7a:	da2c      	bge.n	801dbd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801db7c:	fb0e 2606 	mla	r6, lr, r6, r2
 801db80:	1436      	asrs	r6, r6, #16
 801db82:	d428      	bmi.n	801dbd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801db84:	454e      	cmp	r6, r9
 801db86:	da26      	bge.n	801dbd6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801db88:	1d26      	adds	r6, r4, #4
 801db8a:	469c      	mov	ip, r3
 801db8c:	f1bc 0f00 	cmp.w	ip, #0
 801db90:	f106 0604 	add.w	r6, r6, #4
 801db94:	dd25      	ble.n	801dbe2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801db96:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801db9a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801db9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dba2:	4472      	add	r2, lr
 801dba4:	468a      	mov	sl, r1
 801dba6:	9901      	ldr	r1, [sp, #4]
 801dba8:	fb0a 1909 	mla	r9, sl, r9, r1
 801dbac:	1401      	asrs	r1, r0, #16
 801dbae:	4440      	add	r0, r8
 801dbb0:	f819 9001 	ldrb.w	r9, [r9, r1]
 801dbb4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801dbb8:	eb07 0a09 	add.w	sl, r7, r9
 801dbbc:	f817 9009 	ldrb.w	r9, [r7, r9]
 801dbc0:	f806 9c08 	strb.w	r9, [r6, #-8]
 801dbc4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dbc8:	f806 9c07 	strb.w	r9, [r6, #-7]
 801dbcc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dbd0:	f806 9c06 	strb.w	r9, [r6, #-6]
 801dbd4:	e7da      	b.n	801db8c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801dbd6:	2600      	movs	r6, #0
 801dbd8:	eb03 0c06 	add.w	ip, r3, r6
 801dbdc:	f1bc 0f00 	cmp.w	ip, #0
 801dbe0:	dc3a      	bgt.n	801dc58 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801dbe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbe6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801dbea:	9b00      	ldr	r3, [sp, #0]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	dd60      	ble.n	801dcb2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dbf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbf6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbfa:	eeb0 6a62 	vmov.f32	s12, s5
 801dbfe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc0a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dc0e:	eeb0 6a43 	vmov.f32	s12, s6
 801dc12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc16:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dc1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc22:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc32:	ee12 2a90 	vmov	r2, s5
 801dc36:	eef0 2a47 	vmov.f32	s5, s14
 801dc3a:	fb92 f8f3 	sdiv	r8, r2, r3
 801dc3e:	ee13 2a10 	vmov	r2, s6
 801dc42:	eeb0 3a67 	vmov.f32	s6, s15
 801dc46:	fb92 fef3 	sdiv	lr, r2, r3
 801dc4a:	9b00      	ldr	r3, [sp, #0]
 801dc4c:	3b01      	subs	r3, #1
 801dc4e:	9300      	str	r3, [sp, #0]
 801dc50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc52:	bf08      	it	eq
 801dc54:	465b      	moveq	r3, fp
 801dc56:	e768      	b.n	801db2a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801dc58:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dc5c:	d425      	bmi.n	801dcaa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dc5e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801dc62:	45cc      	cmp	ip, r9
 801dc64:	dd21      	ble.n	801dcaa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dc66:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801dc6a:	d41e      	bmi.n	801dcaa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dc6c:	68e9      	ldr	r1, [r5, #12]
 801dc6e:	4551      	cmp	r1, sl
 801dc70:	dd1b      	ble.n	801dcaa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dc72:	9901      	ldr	r1, [sp, #4]
 801dc74:	fa0f fc8c 	sxth.w	ip, ip
 801dc78:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801dc7c:	f06f 0103 	mvn.w	r1, #3
 801dc80:	f81c c009 	ldrb.w	ip, [ip, r9]
 801dc84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dc88:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801dc8c:	eb07 090c 	add.w	r9, r7, ip
 801dc90:	fb01 fc06 	mul.w	ip, r1, r6
 801dc94:	f804 a00c 	strb.w	sl, [r4, ip]
 801dc98:	44a4      	add	ip, r4
 801dc9a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801dc9e:	f88c a001 	strb.w	sl, [ip, #1]
 801dca2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801dca6:	f88c 9002 	strb.w	r9, [ip, #2]
 801dcaa:	4440      	add	r0, r8
 801dcac:	4472      	add	r2, lr
 801dcae:	3e01      	subs	r6, #1
 801dcb0:	e792      	b.n	801dbd8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dcb2:	b003      	add	sp, #12
 801dcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcb8 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcbc:	b089      	sub	sp, #36	; 0x24
 801dcbe:	469b      	mov	fp, r3
 801dcc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dcc6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801dcca:	9101      	str	r1, [sp, #4]
 801dccc:	9205      	str	r2, [sp, #20]
 801dcce:	9306      	str	r3, [sp, #24]
 801dcd0:	6842      	ldr	r2, [r0, #4]
 801dcd2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801dcd6:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801dcda:	fb02 3101 	mla	r1, r2, r1, r3
 801dcde:	6803      	ldr	r3, [r0, #0]
 801dce0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dce4:	f8da 3000 	ldr.w	r3, [sl]
 801dce8:	9302      	str	r3, [sp, #8]
 801dcea:	f8da 3004 	ldr.w	r3, [sl, #4]
 801dcee:	3304      	adds	r3, #4
 801dcf0:	9303      	str	r3, [sp, #12]
 801dcf2:	9b01      	ldr	r3, [sp, #4]
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	dc03      	bgt.n	801dd00 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dcf8:	9b05      	ldr	r3, [sp, #20]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	f340 814e 	ble.w	801df9c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801dd00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd02:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801dd06:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801dd0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd0c:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801dd10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801dd14:	f1bb 0f00 	cmp.w	fp, #0
 801dd18:	dd0f      	ble.n	801dd3a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dd1a:	1410      	asrs	r0, r2, #16
 801dd1c:	d405      	bmi.n	801dd2a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd1e:	42b0      	cmp	r0, r6
 801dd20:	da03      	bge.n	801dd2a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd22:	1418      	asrs	r0, r3, #16
 801dd24:	d401      	bmi.n	801dd2a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd26:	42a8      	cmp	r0, r5
 801dd28:	db08      	blt.n	801dd3c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dd2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dd2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dd30:	3104      	adds	r1, #4
 801dd32:	4402      	add	r2, r0
 801dd34:	9816      	ldr	r0, [sp, #88]	; 0x58
 801dd36:	4403      	add	r3, r0
 801dd38:	e7ec      	b.n	801dd14 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dd3a:	d04a      	beq.n	801ddd2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801dd3c:	f10b 30ff 	add.w	r0, fp, #4294967295
 801dd40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dd42:	fb04 2400 	mla	r4, r4, r0, r2
 801dd46:	1424      	asrs	r4, r4, #16
 801dd48:	d43a      	bmi.n	801ddc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd4a:	42b4      	cmp	r4, r6
 801dd4c:	da38      	bge.n	801ddc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd4e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dd50:	fb04 3000 	mla	r0, r4, r0, r3
 801dd54:	1400      	asrs	r0, r0, #16
 801dd56:	d433      	bmi.n	801ddc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd58:	42a8      	cmp	r0, r5
 801dd5a:	da31      	bge.n	801ddc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd5c:	1d08      	adds	r0, r1, #4
 801dd5e:	46dc      	mov	ip, fp
 801dd60:	f1bc 0f00 	cmp.w	ip, #0
 801dd64:	dd31      	ble.n	801ddca <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dd66:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801dd6a:	141c      	asrs	r4, r3, #16
 801dd6c:	9f02      	ldr	r7, [sp, #8]
 801dd6e:	1415      	asrs	r5, r2, #16
 801dd70:	fb06 7404 	mla	r4, r6, r4, r7
 801dd74:	5d64      	ldrb	r4, [r4, r5]
 801dd76:	9d03      	ldr	r5, [sp, #12]
 801dd78:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801dd7c:	9d06      	ldr	r5, [sp, #24]
 801dd7e:	0e34      	lsrs	r4, r6, #24
 801dd80:	436c      	muls	r4, r5
 801dd82:	1c65      	adds	r5, r4, #1
 801dd84:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801dd88:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801dd8c:	1224      	asrs	r4, r4, #8
 801dd8e:	b2ef      	uxtb	r7, r5
 801dd90:	2cff      	cmp	r4, #255	; 0xff
 801dd92:	9704      	str	r7, [sp, #16]
 801dd94:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801dd98:	fa5f fe87 	uxtb.w	lr, r7
 801dd9c:	f040 80ca 	bne.w	801df34 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801dda0:	f800 6c04 	strb.w	r6, [r0, #-4]
 801dda4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801dda8:	f800 5c02 	strb.w	r5, [r0, #-2]
 801ddac:	f800 4c01 	strb.w	r4, [r0, #-1]
 801ddb0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ddb2:	3004      	adds	r0, #4
 801ddb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ddb8:	4422      	add	r2, r4
 801ddba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ddbc:	4423      	add	r3, r4
 801ddbe:	e7cf      	b.n	801dd60 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ddc0:	2700      	movs	r7, #0
 801ddc2:	eb0b 0007 	add.w	r0, fp, r7
 801ddc6:	2800      	cmp	r0, #0
 801ddc8:	dc41      	bgt.n	801de4e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ddca:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801ddce:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ddd2:	9b01      	ldr	r3, [sp, #4]
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	f340 80e1 	ble.w	801df9c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ddda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dde0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dde4:	eeb0 6a62 	vmov.f32	s12, s5
 801dde8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ddec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ddf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddf4:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801ddf8:	eeb0 6a43 	vmov.f32	s12, s6
 801ddfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de00:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801de04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de1c:	ee12 2a90 	vmov	r2, s5
 801de20:	eef0 2a47 	vmov.f32	s5, s14
 801de24:	fb92 f3f3 	sdiv	r3, r2, r3
 801de28:	ee13 2a10 	vmov	r2, s6
 801de2c:	9315      	str	r3, [sp, #84]	; 0x54
 801de2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de30:	eeb0 3a67 	vmov.f32	s6, s15
 801de34:	fb92 f3f3 	sdiv	r3, r2, r3
 801de38:	9316      	str	r3, [sp, #88]	; 0x58
 801de3a:	9b01      	ldr	r3, [sp, #4]
 801de3c:	9a05      	ldr	r2, [sp, #20]
 801de3e:	3b01      	subs	r3, #1
 801de40:	9301      	str	r3, [sp, #4]
 801de42:	bf08      	it	eq
 801de44:	4693      	moveq	fp, r2
 801de46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de48:	bf18      	it	ne
 801de4a:	469b      	movne	fp, r3
 801de4c:	e751      	b.n	801dcf2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801de4e:	1415      	asrs	r5, r2, #16
 801de50:	d42f      	bmi.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801de52:	f8da 4008 	ldr.w	r4, [sl, #8]
 801de56:	42ac      	cmp	r4, r5
 801de58:	dd2b      	ble.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801de5a:	141e      	asrs	r6, r3, #16
 801de5c:	d429      	bmi.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801de5e:	f8da 000c 	ldr.w	r0, [sl, #12]
 801de62:	42b0      	cmp	r0, r6
 801de64:	dd25      	ble.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801de66:	9802      	ldr	r0, [sp, #8]
 801de68:	b224      	sxth	r4, r4
 801de6a:	fb06 0404 	mla	r4, r6, r4, r0
 801de6e:	5d60      	ldrb	r0, [r4, r5]
 801de70:	9c03      	ldr	r4, [sp, #12]
 801de72:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801de76:	9c06      	ldr	r4, [sp, #24]
 801de78:	0e28      	lsrs	r0, r5, #24
 801de7a:	4360      	muls	r0, r4
 801de7c:	1c44      	adds	r4, r0, #1
 801de7e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801de82:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801de86:	1200      	asrs	r0, r0, #8
 801de88:	b2e6      	uxtb	r6, r4
 801de8a:	28ff      	cmp	r0, #255	; 0xff
 801de8c:	9607      	str	r6, [sp, #28]
 801de8e:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801de92:	fa5f fe86 	uxtb.w	lr, r6
 801de96:	d112      	bne.n	801debe <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801de98:	f06f 0c03 	mvn.w	ip, #3
 801de9c:	fb0c fc07 	mul.w	ip, ip, r7
 801dea0:	f801 500c 	strb.w	r5, [r1, ip]
 801dea4:	448c      	add	ip, r1
 801dea6:	f88c 6001 	strb.w	r6, [ip, #1]
 801deaa:	f88c 4002 	strb.w	r4, [ip, #2]
 801deae:	f88c 0003 	strb.w	r0, [ip, #3]
 801deb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801deb4:	3f01      	subs	r7, #1
 801deb6:	4402      	add	r2, r0
 801deb8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801deba:	4403      	add	r3, r0
 801debc:	e781      	b.n	801ddc2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801debe:	b2c4      	uxtb	r4, r0
 801dec0:	9404      	str	r4, [sp, #16]
 801dec2:	2800      	cmp	r0, #0
 801dec4:	d0f5      	beq.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dec6:	f06f 0403 	mvn.w	r4, #3
 801deca:	b2ed      	uxtb	r5, r5
 801decc:	fb00 fe0e 	mul.w	lr, r0, lr
 801ded0:	fb04 f807 	mul.w	r8, r4, r7
 801ded4:	9c04      	ldr	r4, [sp, #16]
 801ded6:	eb01 0c08 	add.w	ip, r1, r8
 801deda:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801dede:	fb04 f609 	mul.w	r6, r4, r9
 801dee2:	1c74      	adds	r4, r6, #1
 801dee4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801dee8:	9c04      	ldr	r4, [sp, #16]
 801deea:	1236      	asrs	r6, r6, #8
 801deec:	444c      	add	r4, r9
 801deee:	1ba4      	subs	r4, r4, r6
 801def0:	eba9 0606 	sub.w	r6, r9, r6
 801def4:	f811 9008 	ldrb.w	r9, [r1, r8]
 801def8:	b2e4      	uxtb	r4, r4
 801defa:	fb06 f909 	mul.w	r9, r6, r9
 801defe:	fb00 9505 	mla	r5, r0, r5, r9
 801df02:	fb95 f5f4 	sdiv	r5, r5, r4
 801df06:	f801 5008 	strb.w	r5, [r1, r8]
 801df0a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801df0e:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801df12:	fb06 ee05 	mla	lr, r6, r5, lr
 801df16:	9d07      	ldr	r5, [sp, #28]
 801df18:	f88c 4003 	strb.w	r4, [ip, #3]
 801df1c:	4368      	muls	r0, r5
 801df1e:	fb06 0609 	mla	r6, r6, r9, r0
 801df22:	fb9e fef4 	sdiv	lr, lr, r4
 801df26:	fb96 f6f4 	sdiv	r6, r6, r4
 801df2a:	f88c e001 	strb.w	lr, [ip, #1]
 801df2e:	f88c 6002 	strb.w	r6, [ip, #2]
 801df32:	e7be      	b.n	801deb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801df34:	b2e5      	uxtb	r5, r4
 801df36:	2c00      	cmp	r4, #0
 801df38:	f43f af3a 	beq.w	801ddb0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801df3c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801df40:	b2f6      	uxtb	r6, r6
 801df42:	fb04 fe0e 	mul.w	lr, r4, lr
 801df46:	fb05 f908 	mul.w	r9, r5, r8
 801df4a:	4445      	add	r5, r8
 801df4c:	f109 0701 	add.w	r7, r9, #1
 801df50:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801df54:	123f      	asrs	r7, r7, #8
 801df56:	1bed      	subs	r5, r5, r7
 801df58:	eba8 0707 	sub.w	r7, r8, r7
 801df5c:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801df60:	b2ed      	uxtb	r5, r5
 801df62:	fb07 f808 	mul.w	r8, r7, r8
 801df66:	f800 5c01 	strb.w	r5, [r0, #-1]
 801df6a:	fb04 8606 	mla	r6, r4, r6, r8
 801df6e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801df72:	fb96 f6f5 	sdiv	r6, r6, r5
 801df76:	f800 6c04 	strb.w	r6, [r0, #-4]
 801df7a:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801df7e:	fb07 ee06 	mla	lr, r7, r6, lr
 801df82:	9e04      	ldr	r6, [sp, #16]
 801df84:	4374      	muls	r4, r6
 801df86:	fb07 4708 	mla	r7, r7, r8, r4
 801df8a:	fb9e fef5 	sdiv	lr, lr, r5
 801df8e:	fb97 f7f5 	sdiv	r7, r7, r5
 801df92:	f800 ec03 	strb.w	lr, [r0, #-3]
 801df96:	f800 7c02 	strb.w	r7, [r0, #-2]
 801df9a:	e709      	b.n	801ddb0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801df9c:	b009      	add	sp, #36	; 0x24
 801df9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dfa2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa6:	b087      	sub	sp, #28
 801dfa8:	469b      	mov	fp, r3
 801dfaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfae:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dfb0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801dfb4:	9100      	str	r1, [sp, #0]
 801dfb6:	9204      	str	r2, [sp, #16]
 801dfb8:	9305      	str	r3, [sp, #20]
 801dfba:	6842      	ldr	r2, [r0, #4]
 801dfbc:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	; 0x58
 801dfc0:	fb02 3101 	mla	r1, r2, r1, r3
 801dfc4:	6803      	ldr	r3, [r0, #0]
 801dfc6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dfca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	9301      	str	r3, [sp, #4]
 801dfd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dfd2:	685b      	ldr	r3, [r3, #4]
 801dfd4:	9302      	str	r3, [sp, #8]
 801dfd6:	9b00      	ldr	r3, [sp, #0]
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	dc03      	bgt.n	801dfe4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801dfdc:	9b04      	ldr	r3, [sp, #16]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	f340 8156 	ble.w	801e290 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801dfe4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dfe6:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801dfea:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801dfee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dff0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801dff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dff6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801dffa:	f1bb 0f00 	cmp.w	fp, #0
 801dffe:	dd0f      	ble.n	801e020 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e000:	1410      	asrs	r0, r2, #16
 801e002:	d405      	bmi.n	801e010 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e004:	42b0      	cmp	r0, r6
 801e006:	da03      	bge.n	801e010 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e008:	1418      	asrs	r0, r3, #16
 801e00a:	d401      	bmi.n	801e010 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e00c:	42a8      	cmp	r0, r5
 801e00e:	db08      	blt.n	801e022 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e010:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e012:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e016:	3104      	adds	r1, #4
 801e018:	4402      	add	r2, r0
 801e01a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e01c:	4403      	add	r3, r0
 801e01e:	e7ec      	b.n	801dffa <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e020:	d053      	beq.n	801e0ca <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e022:	f10b 30ff 	add.w	r0, fp, #4294967295
 801e026:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e028:	fb04 2400 	mla	r4, r4, r0, r2
 801e02c:	1424      	asrs	r4, r4, #16
 801e02e:	d442      	bmi.n	801e0b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e030:	42b4      	cmp	r4, r6
 801e032:	da40      	bge.n	801e0b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e034:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e036:	fb04 3000 	mla	r0, r4, r0, r3
 801e03a:	1400      	asrs	r0, r0, #16
 801e03c:	d43b      	bmi.n	801e0b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e03e:	42a8      	cmp	r0, r5
 801e040:	da39      	bge.n	801e0b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e042:	1d08      	adds	r0, r1, #4
 801e044:	46d8      	mov	r8, fp
 801e046:	f1b8 0f00 	cmp.w	r8, #0
 801e04a:	dd3a      	ble.n	801e0c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801e04c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e04e:	141c      	asrs	r4, r3, #16
 801e050:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801e054:	1415      	asrs	r5, r2, #16
 801e056:	fb06 5404 	mla	r4, r6, r4, r5
 801e05a:	9e02      	ldr	r6, [sp, #8]
 801e05c:	9d01      	ldr	r5, [sp, #4]
 801e05e:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801e062:	5d34      	ldrb	r4, [r6, r4]
 801e064:	9e05      	ldr	r6, [sp, #20]
 801e066:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801e06a:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801e06e:	4374      	muls	r4, r6
 801e070:	00ed      	lsls	r5, r5, #3
 801e072:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e076:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e07a:	1c66      	adds	r6, r4, #1
 801e07c:	b2ed      	uxtb	r5, r5
 801e07e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801e082:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801e086:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e08a:	1224      	asrs	r4, r4, #8
 801e08c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e090:	2cff      	cmp	r4, #255	; 0xff
 801e092:	f040 80cb 	bne.w	801e22c <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e096:	f800 5c04 	strb.w	r5, [r0, #-4]
 801e09a:	f800 cc03 	strb.w	ip, [r0, #-3]
 801e09e:	f800 ec02 	strb.w	lr, [r0, #-2]
 801e0a2:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e0a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e0a8:	3004      	adds	r0, #4
 801e0aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801e0ae:	4422      	add	r2, r4
 801e0b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e0b2:	4423      	add	r3, r4
 801e0b4:	e7c7      	b.n	801e046 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e0b6:	f04f 0c00 	mov.w	ip, #0
 801e0ba:	eb0b 000c 	add.w	r0, fp, ip
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	dc41      	bgt.n	801e146 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e0c2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801e0c6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e0ca:	9b00      	ldr	r3, [sp, #0]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	f340 80df 	ble.w	801e290 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e0d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0dc:	eeb0 6a62 	vmov.f32	s12, s5
 801e0e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0ec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e0f0:	eeb0 6a43 	vmov.f32	s12, s6
 801e0f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0f8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e0fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e100:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e104:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e108:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e10c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e110:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e114:	ee12 2a90 	vmov	r2, s5
 801e118:	eef0 2a47 	vmov.f32	s5, s14
 801e11c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e120:	ee13 2a10 	vmov	r2, s6
 801e124:	9313      	str	r3, [sp, #76]	; 0x4c
 801e126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e128:	eeb0 3a67 	vmov.f32	s6, s15
 801e12c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e130:	9314      	str	r3, [sp, #80]	; 0x50
 801e132:	9b00      	ldr	r3, [sp, #0]
 801e134:	9a04      	ldr	r2, [sp, #16]
 801e136:	3b01      	subs	r3, #1
 801e138:	9300      	str	r3, [sp, #0]
 801e13a:	bf08      	it	eq
 801e13c:	4693      	moveq	fp, r2
 801e13e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e140:	bf18      	it	ne
 801e142:	469b      	movne	fp, r3
 801e144:	e747      	b.n	801dfd6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e146:	1415      	asrs	r5, r2, #16
 801e148:	d433      	bmi.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e14a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e14c:	6884      	ldr	r4, [r0, #8]
 801e14e:	42ac      	cmp	r4, r5
 801e150:	dd2f      	ble.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e152:	141e      	asrs	r6, r3, #16
 801e154:	d42d      	bmi.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e156:	68c0      	ldr	r0, [r0, #12]
 801e158:	42b0      	cmp	r0, r6
 801e15a:	dd2a      	ble.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e15c:	b224      	sxth	r4, r4
 801e15e:	9801      	ldr	r0, [sp, #4]
 801e160:	fb06 5504 	mla	r5, r6, r4, r5
 801e164:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801e168:	9802      	ldr	r0, [sp, #8]
 801e16a:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801e16e:	5d40      	ldrb	r0, [r0, r5]
 801e170:	10e7      	asrs	r7, r4, #3
 801e172:	9d05      	ldr	r5, [sp, #20]
 801e174:	00e4      	lsls	r4, r4, #3
 801e176:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e17a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e17e:	4368      	muls	r0, r5
 801e180:	b2e4      	uxtb	r4, r4
 801e182:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801e186:	1c45      	adds	r5, r0, #1
 801e188:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e18c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e190:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e194:	9403      	str	r4, [sp, #12]
 801e196:	1200      	asrs	r0, r0, #8
 801e198:	28ff      	cmp	r0, #255	; 0xff
 801e19a:	d111      	bne.n	801e1c0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801e19c:	f06f 0403 	mvn.w	r4, #3
 801e1a0:	fb04 f50c 	mul.w	r5, r4, ip
 801e1a4:	9c03      	ldr	r4, [sp, #12]
 801e1a6:	554c      	strb	r4, [r1, r5]
 801e1a8:	440d      	add	r5, r1
 801e1aa:	706f      	strb	r7, [r5, #1]
 801e1ac:	f885 e002 	strb.w	lr, [r5, #2]
 801e1b0:	70e8      	strb	r0, [r5, #3]
 801e1b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e1b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e1b8:	4402      	add	r2, r0
 801e1ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e1bc:	4403      	add	r3, r0
 801e1be:	e77c      	b.n	801e0ba <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e1c0:	b2c5      	uxtb	r5, r0
 801e1c2:	2800      	cmp	r0, #0
 801e1c4:	d0f5      	beq.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e1c6:	f06f 0403 	mvn.w	r4, #3
 801e1ca:	4347      	muls	r7, r0
 801e1cc:	fb04 f90c 	mul.w	r9, r4, ip
 801e1d0:	eb01 0809 	add.w	r8, r1, r9
 801e1d4:	f898 a003 	ldrb.w	sl, [r8, #3]
 801e1d8:	fb05 f60a 	mul.w	r6, r5, sl
 801e1dc:	4455      	add	r5, sl
 801e1de:	1c74      	adds	r4, r6, #1
 801e1e0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e1e4:	9c03      	ldr	r4, [sp, #12]
 801e1e6:	1236      	asrs	r6, r6, #8
 801e1e8:	4344      	muls	r4, r0
 801e1ea:	fb00 f00e 	mul.w	r0, r0, lr
 801e1ee:	1bad      	subs	r5, r5, r6
 801e1f0:	ebaa 0606 	sub.w	r6, sl, r6
 801e1f4:	f811 a009 	ldrb.w	sl, [r1, r9]
 801e1f8:	b2ed      	uxtb	r5, r5
 801e1fa:	fb06 440a 	mla	r4, r6, sl, r4
 801e1fe:	fb94 f4f5 	sdiv	r4, r4, r5
 801e202:	f801 4009 	strb.w	r4, [r1, r9]
 801e206:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e20a:	f898 a002 	ldrb.w	sl, [r8, #2]
 801e20e:	fb06 7704 	mla	r7, r6, r4, r7
 801e212:	fb06 060a 	mla	r6, r6, sl, r0
 801e216:	f888 5003 	strb.w	r5, [r8, #3]
 801e21a:	fb97 f7f5 	sdiv	r7, r7, r5
 801e21e:	fb96 f6f5 	sdiv	r6, r6, r5
 801e222:	f888 7001 	strb.w	r7, [r8, #1]
 801e226:	f888 6002 	strb.w	r6, [r8, #2]
 801e22a:	e7c2      	b.n	801e1b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e22c:	b2e6      	uxtb	r6, r4
 801e22e:	2c00      	cmp	r4, #0
 801e230:	f43f af39 	beq.w	801e0a6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e234:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801e238:	4365      	muls	r5, r4
 801e23a:	fb04 fc0c 	mul.w	ip, r4, ip
 801e23e:	fb06 fa09 	mul.w	sl, r6, r9
 801e242:	444e      	add	r6, r9
 801e244:	fb04 f40e 	mul.w	r4, r4, lr
 801e248:	f10a 0701 	add.w	r7, sl, #1
 801e24c:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801e250:	123f      	asrs	r7, r7, #8
 801e252:	1bf6      	subs	r6, r6, r7
 801e254:	eba9 0707 	sub.w	r7, r9, r7
 801e258:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801e25c:	b2f6      	uxtb	r6, r6
 801e25e:	fb07 5509 	mla	r5, r7, r9, r5
 801e262:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801e266:	f800 6c01 	strb.w	r6, [r0, #-1]
 801e26a:	fb95 f5f6 	sdiv	r5, r5, r6
 801e26e:	f800 5c04 	strb.w	r5, [r0, #-4]
 801e272:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801e276:	fb07 cc05 	mla	ip, r7, r5, ip
 801e27a:	fb07 4709 	mla	r7, r7, r9, r4
 801e27e:	fb9c fcf6 	sdiv	ip, ip, r6
 801e282:	fb97 f7f6 	sdiv	r7, r7, r6
 801e286:	f800 cc03 	strb.w	ip, [r0, #-3]
 801e28a:	f800 7c02 	strb.w	r7, [r0, #-2]
 801e28e:	e70a      	b.n	801e0a6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e290:	b007      	add	sp, #28
 801e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e296 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e29a:	b087      	sub	sp, #28
 801e29c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e2a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e2a2:	9101      	str	r1, [sp, #4]
 801e2a4:	9205      	str	r2, [sp, #20]
 801e2a6:	6861      	ldr	r1, [r4, #4]
 801e2a8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801e2ac:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e2b0:	fb01 2000 	mla	r0, r1, r0, r2
 801e2b4:	6822      	ldr	r2, [r4, #0]
 801e2b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801e2ba:	f8db 2000 	ldr.w	r2, [fp]
 801e2be:	9202      	str	r2, [sp, #8]
 801e2c0:	f8db 2004 	ldr.w	r2, [fp, #4]
 801e2c4:	9203      	str	r2, [sp, #12]
 801e2c6:	9a01      	ldr	r2, [sp, #4]
 801e2c8:	2a00      	cmp	r2, #0
 801e2ca:	dc03      	bgt.n	801e2d4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e2cc:	9a05      	ldr	r2, [sp, #20]
 801e2ce:	2a00      	cmp	r2, #0
 801e2d0:	f340 8151 	ble.w	801e576 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e2d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2d6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e2da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e2de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2e0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e2e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	dd0e      	ble.n	801e30a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e2ec:	140c      	asrs	r4, r1, #16
 801e2ee:	d405      	bmi.n	801e2fc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2f0:	42bc      	cmp	r4, r7
 801e2f2:	da03      	bge.n	801e2fc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2f4:	1414      	asrs	r4, r2, #16
 801e2f6:	d401      	bmi.n	801e2fc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e2f8:	42b4      	cmp	r4, r6
 801e2fa:	db07      	blt.n	801e30c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e2fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e2fe:	3b01      	subs	r3, #1
 801e300:	3004      	adds	r0, #4
 801e302:	4421      	add	r1, r4
 801e304:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e306:	4422      	add	r2, r4
 801e308:	e7ee      	b.n	801e2e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e30a:	d049      	beq.n	801e3a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e30c:	1e5c      	subs	r4, r3, #1
 801e30e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e310:	fb05 1504 	mla	r5, r5, r4, r1
 801e314:	142d      	asrs	r5, r5, #16
 801e316:	d43b      	bmi.n	801e390 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e318:	42bd      	cmp	r5, r7
 801e31a:	da39      	bge.n	801e390 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e31c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e31e:	fb05 2404 	mla	r4, r5, r4, r2
 801e322:	1424      	asrs	r4, r4, #16
 801e324:	d434      	bmi.n	801e390 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e326:	42b4      	cmp	r4, r6
 801e328:	da32      	bge.n	801e390 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e32a:	1d04      	adds	r4, r0, #4
 801e32c:	4699      	mov	r9, r3
 801e32e:	f1b9 0f00 	cmp.w	r9, #0
 801e332:	dd31      	ble.n	801e398 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801e334:	1415      	asrs	r5, r2, #16
 801e336:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e33a:	140e      	asrs	r6, r1, #16
 801e33c:	fb07 6605 	mla	r6, r7, r5, r6
 801e340:	9d02      	ldr	r5, [sp, #8]
 801e342:	9f03      	ldr	r7, [sp, #12]
 801e344:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801e348:	5dbe      	ldrb	r6, [r7, r6]
 801e34a:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e34e:	10ef      	asrs	r7, r5, #3
 801e350:	2eff      	cmp	r6, #255	; 0xff
 801e352:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e356:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e35a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e35e:	b2ed      	uxtb	r5, r5
 801e360:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e364:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e368:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e36c:	f040 80cd 	bne.w	801e50a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e370:	f804 5c04 	strb.w	r5, [r4, #-4]
 801e374:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e378:	f804 8c02 	strb.w	r8, [r4, #-2]
 801e37c:	f804 6c01 	strb.w	r6, [r4, #-1]
 801e380:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e382:	3404      	adds	r4, #4
 801e384:	f109 39ff 	add.w	r9, r9, #4294967295
 801e388:	4429      	add	r1, r5
 801e38a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e38c:	442a      	add	r2, r5
 801e38e:	e7ce      	b.n	801e32e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e390:	2700      	movs	r7, #0
 801e392:	19dc      	adds	r4, r3, r7
 801e394:	2c00      	cmp	r4, #0
 801e396:	dc3f      	bgt.n	801e418 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801e398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e39c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e3a0:	9b01      	ldr	r3, [sp, #4]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	f340 80e7 	ble.w	801e576 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e3a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3b2:	eeb0 6a62 	vmov.f32	s12, s5
 801e3b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3c2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e3c6:	eeb0 6a43 	vmov.f32	s12, s6
 801e3ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3ce:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e3d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e3d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3ea:	ee12 2a90 	vmov	r2, s5
 801e3ee:	eef0 2a47 	vmov.f32	s5, s14
 801e3f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3f6:	ee13 2a10 	vmov	r2, s6
 801e3fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801e3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3fe:	eeb0 3a67 	vmov.f32	s6, s15
 801e402:	fb92 f3f3 	sdiv	r3, r2, r3
 801e406:	9314      	str	r3, [sp, #80]	; 0x50
 801e408:	9b01      	ldr	r3, [sp, #4]
 801e40a:	9a05      	ldr	r2, [sp, #20]
 801e40c:	3b01      	subs	r3, #1
 801e40e:	9301      	str	r3, [sp, #4]
 801e410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e412:	bf08      	it	eq
 801e414:	4613      	moveq	r3, r2
 801e416:	e756      	b.n	801e2c6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e418:	140e      	asrs	r6, r1, #16
 801e41a:	d434      	bmi.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e41c:	f8db 5008 	ldr.w	r5, [fp, #8]
 801e420:	42b5      	cmp	r5, r6
 801e422:	dd30      	ble.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e424:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e428:	d42d      	bmi.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e42a:	f8db 400c 	ldr.w	r4, [fp, #12]
 801e42e:	4564      	cmp	r4, ip
 801e430:	dd29      	ble.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e432:	b22d      	sxth	r5, r5
 801e434:	9c02      	ldr	r4, [sp, #8]
 801e436:	fb0c 6505 	mla	r5, ip, r5, r6
 801e43a:	9e03      	ldr	r6, [sp, #12]
 801e43c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e440:	5d75      	ldrb	r5, [r6, r5]
 801e442:	ea4f 2824 	mov.w	r8, r4, asr #8
 801e446:	2dff      	cmp	r5, #255	; 0xff
 801e448:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e44c:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801e450:	9604      	str	r6, [sp, #16]
 801e452:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801e456:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e45a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e45e:	b2e4      	uxtb	r4, r4
 801e460:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e464:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e468:	d113      	bne.n	801e492 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e46a:	f06f 0c03 	mvn.w	ip, #3
 801e46e:	fb0c fc07 	mul.w	ip, ip, r7
 801e472:	f800 400c 	strb.w	r4, [r0, ip]
 801e476:	4484      	add	ip, r0
 801e478:	9c04      	ldr	r4, [sp, #16]
 801e47a:	f88c 6001 	strb.w	r6, [ip, #1]
 801e47e:	f88c 4002 	strb.w	r4, [ip, #2]
 801e482:	f88c 5003 	strb.w	r5, [ip, #3]
 801e486:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e488:	3f01      	subs	r7, #1
 801e48a:	4421      	add	r1, r4
 801e48c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e48e:	4422      	add	r2, r4
 801e490:	e77f      	b.n	801e392 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e492:	2d00      	cmp	r5, #0
 801e494:	d0f7      	beq.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e496:	fb14 f405 	smulbb	r4, r4, r5
 801e49a:	f06f 0c03 	mvn.w	ip, #3
 801e49e:	fb15 f606 	smulbb	r6, r5, r6
 801e4a2:	fb0c fa07 	mul.w	sl, ip, r7
 801e4a6:	eb00 090a 	add.w	r9, r0, sl
 801e4aa:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e4ae:	fb05 fc08 	mul.w	ip, r5, r8
 801e4b2:	f10c 0e01 	add.w	lr, ip, #1
 801e4b6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e4ba:	eb05 0c08 	add.w	ip, r5, r8
 801e4be:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e4c2:	ebac 0c0e 	sub.w	ip, ip, lr
 801e4c6:	eba8 0e0e 	sub.w	lr, r8, lr
 801e4ca:	f810 800a 	ldrb.w	r8, [r0, sl]
 801e4ce:	fa5f fc8c 	uxtb.w	ip, ip
 801e4d2:	fb0e 4408 	mla	r4, lr, r8, r4
 801e4d6:	fb94 f4fc 	sdiv	r4, r4, ip
 801e4da:	f800 400a 	strb.w	r4, [r0, sl]
 801e4de:	f899 4001 	ldrb.w	r4, [r9, #1]
 801e4e2:	f889 c003 	strb.w	ip, [r9, #3]
 801e4e6:	fb0e 6604 	mla	r6, lr, r4, r6
 801e4ea:	f899 4002 	ldrb.w	r4, [r9, #2]
 801e4ee:	fb96 f6fc 	sdiv	r6, r6, ip
 801e4f2:	f889 6001 	strb.w	r6, [r9, #1]
 801e4f6:	9e04      	ldr	r6, [sp, #16]
 801e4f8:	fb15 f506 	smulbb	r5, r5, r6
 801e4fc:	fb0e 5504 	mla	r5, lr, r4, r5
 801e500:	fb95 f5fc 	sdiv	r5, r5, ip
 801e504:	f889 5002 	strb.w	r5, [r9, #2]
 801e508:	e7bd      	b.n	801e486 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e50a:	2e00      	cmp	r6, #0
 801e50c:	f43f af38 	beq.w	801e380 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e510:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801e514:	fb15 f506 	smulbb	r5, r5, r6
 801e518:	fb16 f707 	smulbb	r7, r6, r7
 801e51c:	fb06 fc0a 	mul.w	ip, r6, sl
 801e520:	f10c 0e01 	add.w	lr, ip, #1
 801e524:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e528:	eb06 0c0a 	add.w	ip, r6, sl
 801e52c:	fb16 f608 	smulbb	r6, r6, r8
 801e530:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e534:	ebac 0c0e 	sub.w	ip, ip, lr
 801e538:	ebaa 0e0e 	sub.w	lr, sl, lr
 801e53c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801e540:	fa5f fc8c 	uxtb.w	ip, ip
 801e544:	fb0e 550a 	mla	r5, lr, sl, r5
 801e548:	f804 cc01 	strb.w	ip, [r4, #-1]
 801e54c:	fb95 f5fc 	sdiv	r5, r5, ip
 801e550:	f804 5c04 	strb.w	r5, [r4, #-4]
 801e554:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801e558:	fb0e 7705 	mla	r7, lr, r5, r7
 801e55c:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801e560:	fb0e 6605 	mla	r6, lr, r5, r6
 801e564:	fb97 f7fc 	sdiv	r7, r7, ip
 801e568:	fb96 f6fc 	sdiv	r6, r6, ip
 801e56c:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e570:	f804 6c02 	strb.w	r6, [r4, #-2]
 801e574:	e704      	b.n	801e380 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e576:	b007      	add	sp, #28
 801e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e57c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e580:	b085      	sub	sp, #20
 801e582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e586:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e588:	9101      	str	r1, [sp, #4]
 801e58a:	6868      	ldr	r0, [r5, #4]
 801e58c:	9203      	str	r2, [sp, #12]
 801e58e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e592:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801e596:	fb00 1404 	mla	r4, r0, r4, r1
 801e59a:	6829      	ldr	r1, [r5, #0]
 801e59c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e5a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5a2:	6809      	ldr	r1, [r1, #0]
 801e5a4:	9102      	str	r1, [sp, #8]
 801e5a6:	9901      	ldr	r1, [sp, #4]
 801e5a8:	2900      	cmp	r1, #0
 801e5aa:	dc03      	bgt.n	801e5b4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e5ac:	9903      	ldr	r1, [sp, #12]
 801e5ae:	2900      	cmp	r1, #0
 801e5b0:	f340 8150 	ble.w	801e854 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e5b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5b6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e5ba:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801e5be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e5c0:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801e5c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e5c6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	dd0e      	ble.n	801e5ec <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e5ce:	1405      	asrs	r5, r0, #16
 801e5d0:	d405      	bmi.n	801e5de <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e5d2:	4565      	cmp	r5, ip
 801e5d4:	da03      	bge.n	801e5de <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e5d6:	140d      	asrs	r5, r1, #16
 801e5d8:	d401      	bmi.n	801e5de <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e5da:	42bd      	cmp	r5, r7
 801e5dc:	db07      	blt.n	801e5ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e5e0:	3b01      	subs	r3, #1
 801e5e2:	3404      	adds	r4, #4
 801e5e4:	4428      	add	r0, r5
 801e5e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e5e8:	4429      	add	r1, r5
 801e5ea:	e7ee      	b.n	801e5ca <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e5ec:	d04c      	beq.n	801e688 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e5ee:	1e5d      	subs	r5, r3, #1
 801e5f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e5f2:	fb06 0605 	mla	r6, r6, r5, r0
 801e5f6:	1436      	asrs	r6, r6, #16
 801e5f8:	d43c      	bmi.n	801e674 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e5fa:	4566      	cmp	r6, ip
 801e5fc:	da3a      	bge.n	801e674 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e5fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e600:	fb06 1505 	mla	r5, r6, r5, r1
 801e604:	142d      	asrs	r5, r5, #16
 801e606:	d435      	bmi.n	801e674 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e608:	42bd      	cmp	r5, r7
 801e60a:	da33      	bge.n	801e674 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e60c:	1d25      	adds	r5, r4, #4
 801e60e:	4699      	mov	r9, r3
 801e610:	f1b9 0f00 	cmp.w	r9, #0
 801e614:	dd34      	ble.n	801e680 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e616:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801e618:	140e      	asrs	r6, r1, #16
 801e61a:	2aff      	cmp	r2, #255	; 0xff
 801e61c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e620:	ea4f 4720 	mov.w	r7, r0, asr #16
 801e624:	fb0c 7606 	mla	r6, ip, r6, r7
 801e628:	9f02      	ldr	r7, [sp, #8]
 801e62a:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801e62e:	ea4f 2726 	mov.w	r7, r6, asr #8
 801e632:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801e636:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801e63a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e63e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e642:	b2f6      	uxtb	r6, r6
 801e644:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e648:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e64c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e650:	f040 80ca 	bne.w	801e7e8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801e654:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e658:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e65c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e660:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e664:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e666:	3504      	adds	r5, #4
 801e668:	f109 39ff 	add.w	r9, r9, #4294967295
 801e66c:	4430      	add	r0, r6
 801e66e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e670:	4431      	add	r1, r6
 801e672:	e7cd      	b.n	801e610 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e674:	f04f 0c00 	mov.w	ip, #0
 801e678:	eb03 050c 	add.w	r5, r3, ip
 801e67c:	2d00      	cmp	r5, #0
 801e67e:	dc3f      	bgt.n	801e700 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e680:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e684:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e688:	9b01      	ldr	r3, [sp, #4]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	f340 80e2 	ble.w	801e854 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e690:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e696:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e69a:	eeb0 6a62 	vmov.f32	s12, s5
 801e69e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e6a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e6ae:	eeb0 6a43 	vmov.f32	s12, s6
 801e6b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6b6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e6ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6d2:	ee12 1a90 	vmov	r1, s5
 801e6d6:	eef0 2a47 	vmov.f32	s5, s14
 801e6da:	fb91 f3f3 	sdiv	r3, r1, r3
 801e6de:	ee13 1a10 	vmov	r1, s6
 801e6e2:	9311      	str	r3, [sp, #68]	; 0x44
 801e6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6e6:	eeb0 3a67 	vmov.f32	s6, s15
 801e6ea:	fb91 f3f3 	sdiv	r3, r1, r3
 801e6ee:	9312      	str	r3, [sp, #72]	; 0x48
 801e6f0:	9b01      	ldr	r3, [sp, #4]
 801e6f2:	9903      	ldr	r1, [sp, #12]
 801e6f4:	3b01      	subs	r3, #1
 801e6f6:	9301      	str	r3, [sp, #4]
 801e6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6fa:	bf08      	it	eq
 801e6fc:	460b      	moveq	r3, r1
 801e6fe:	e752      	b.n	801e5a6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e700:	1407      	asrs	r7, r0, #16
 801e702:	d42f      	bmi.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e704:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e706:	68ae      	ldr	r6, [r5, #8]
 801e708:	42be      	cmp	r6, r7
 801e70a:	dd2b      	ble.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e70c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e710:	d428      	bmi.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e712:	68ed      	ldr	r5, [r5, #12]
 801e714:	4575      	cmp	r5, lr
 801e716:	dd25      	ble.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e718:	b236      	sxth	r6, r6
 801e71a:	9d02      	ldr	r5, [sp, #8]
 801e71c:	2aff      	cmp	r2, #255	; 0xff
 801e71e:	fb0e 7606 	mla	r6, lr, r6, r7
 801e722:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801e726:	ea4f 2625 	mov.w	r6, r5, asr #8
 801e72a:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801e72e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e732:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e736:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e73a:	b2ed      	uxtb	r5, r5
 801e73c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e740:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e744:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e748:	d113      	bne.n	801e772 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e74a:	f06f 0e03 	mvn.w	lr, #3
 801e74e:	fb0e fe0c 	mul.w	lr, lr, ip
 801e752:	f804 500e 	strb.w	r5, [r4, lr]
 801e756:	44a6      	add	lr, r4
 801e758:	f88e 7001 	strb.w	r7, [lr, #1]
 801e75c:	f88e 6002 	strb.w	r6, [lr, #2]
 801e760:	f88e 2003 	strb.w	r2, [lr, #3]
 801e764:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e766:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e76a:	4428      	add	r0, r5
 801e76c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e76e:	4429      	add	r1, r5
 801e770:	e782      	b.n	801e678 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e772:	2a00      	cmp	r2, #0
 801e774:	d0f6      	beq.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e776:	fb15 f502 	smulbb	r5, r5, r2
 801e77a:	f06f 0e03 	mvn.w	lr, #3
 801e77e:	fb12 f707 	smulbb	r7, r2, r7
 801e782:	fb12 f606 	smulbb	r6, r2, r6
 801e786:	fb0e fa0c 	mul.w	sl, lr, ip
 801e78a:	eb04 090a 	add.w	r9, r4, sl
 801e78e:	f899 b003 	ldrb.w	fp, [r9, #3]
 801e792:	fb02 fe0b 	mul.w	lr, r2, fp
 801e796:	f10e 0801 	add.w	r8, lr, #1
 801e79a:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e79e:	eb02 0e0b 	add.w	lr, r2, fp
 801e7a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e7a6:	ebae 0e08 	sub.w	lr, lr, r8
 801e7aa:	ebab 0808 	sub.w	r8, fp, r8
 801e7ae:	f814 b00a 	ldrb.w	fp, [r4, sl]
 801e7b2:	fa5f fe8e 	uxtb.w	lr, lr
 801e7b6:	fb08 550b 	mla	r5, r8, fp, r5
 801e7ba:	fb95 f5fe 	sdiv	r5, r5, lr
 801e7be:	f804 500a 	strb.w	r5, [r4, sl]
 801e7c2:	f899 5001 	ldrb.w	r5, [r9, #1]
 801e7c6:	f889 e003 	strb.w	lr, [r9, #3]
 801e7ca:	fb08 7705 	mla	r7, r8, r5, r7
 801e7ce:	f899 5002 	ldrb.w	r5, [r9, #2]
 801e7d2:	fb08 6605 	mla	r6, r8, r5, r6
 801e7d6:	fb97 f7fe 	sdiv	r7, r7, lr
 801e7da:	fb96 f6fe 	sdiv	r6, r6, lr
 801e7de:	f889 7001 	strb.w	r7, [r9, #1]
 801e7e2:	f889 6002 	strb.w	r6, [r9, #2]
 801e7e6:	e7bd      	b.n	801e764 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e7e8:	2a00      	cmp	r2, #0
 801e7ea:	f43f af3b 	beq.w	801e664 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801e7ee:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801e7f2:	fb16 f602 	smulbb	r6, r6, r2
 801e7f6:	fb12 fc0c 	smulbb	ip, r2, ip
 801e7fa:	fb12 f707 	smulbb	r7, r2, r7
 801e7fe:	fb02 fe0a 	mul.w	lr, r2, sl
 801e802:	f10e 0801 	add.w	r8, lr, #1
 801e806:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e80a:	eb02 0e0a 	add.w	lr, r2, sl
 801e80e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e812:	ebae 0e08 	sub.w	lr, lr, r8
 801e816:	ebaa 0808 	sub.w	r8, sl, r8
 801e81a:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801e81e:	fa5f fe8e 	uxtb.w	lr, lr
 801e822:	fb08 660a 	mla	r6, r8, sl, r6
 801e826:	f805 ec01 	strb.w	lr, [r5, #-1]
 801e82a:	fb96 f6fe 	sdiv	r6, r6, lr
 801e82e:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e832:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801e836:	fb08 cc06 	mla	ip, r8, r6, ip
 801e83a:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801e83e:	fb08 7706 	mla	r7, r8, r6, r7
 801e842:	fb9c fcfe 	sdiv	ip, ip, lr
 801e846:	fb97 f7fe 	sdiv	r7, r7, lr
 801e84a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e84e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e852:	e707      	b.n	801e664 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801e854:	b005      	add	sp, #20
 801e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e85a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e85a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e85e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e864:	9201      	str	r2, [sp, #4]
 801e866:	6860      	ldr	r0, [r4, #4]
 801e868:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e86a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801e86e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801e872:	fb00 2505 	mla	r5, r0, r5, r2
 801e876:	6822      	ldr	r2, [r4, #0]
 801e878:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801e87c:	683a      	ldr	r2, [r7, #0]
 801e87e:	9200      	str	r2, [sp, #0]
 801e880:	2900      	cmp	r1, #0
 801e882:	dc03      	bgt.n	801e88c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e884:	9a01      	ldr	r2, [sp, #4]
 801e886:	2a00      	cmp	r2, #0
 801e888:	f340 80be 	ble.w	801ea08 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801e88c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e88e:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801e892:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e898:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801e89c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	dd0c      	ble.n	801e8be <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e8a4:	1404      	asrs	r4, r0, #16
 801e8a6:	d405      	bmi.n	801e8b4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e8a8:	454c      	cmp	r4, r9
 801e8aa:	da03      	bge.n	801e8b4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e8ac:	1414      	asrs	r4, r2, #16
 801e8ae:	d401      	bmi.n	801e8b4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e8b0:	4564      	cmp	r4, ip
 801e8b2:	db05      	blt.n	801e8c0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e8b4:	4440      	add	r0, r8
 801e8b6:	4472      	add	r2, lr
 801e8b8:	3b01      	subs	r3, #1
 801e8ba:	3504      	adds	r5, #4
 801e8bc:	e7f0      	b.n	801e8a0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e8be:	d00e      	beq.n	801e8de <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8c0:	1e5c      	subs	r4, r3, #1
 801e8c2:	fb08 0604 	mla	r6, r8, r4, r0
 801e8c6:	1436      	asrs	r6, r6, #16
 801e8c8:	d53e      	bpl.n	801e948 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801e8ca:	4699      	mov	r9, r3
 801e8cc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801e8d0:	f1b9 0f00 	cmp.w	r9, #0
 801e8d4:	dc68      	bgt.n	801e9a8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e8d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801e8de:	2900      	cmp	r1, #0
 801e8e0:	f340 8092 	ble.w	801ea08 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801e8e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8ee:	3901      	subs	r1, #1
 801e8f0:	eeb0 6a62 	vmov.f32	s12, s5
 801e8f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e900:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e904:	eeb0 6a43 	vmov.f32	s12, s6
 801e908:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e90c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e910:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e914:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e918:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e91c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e920:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e924:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e928:	ee12 2a90 	vmov	r2, s5
 801e92c:	eef0 2a47 	vmov.f32	s5, s14
 801e930:	fb92 f8f3 	sdiv	r8, r2, r3
 801e934:	ee13 2a10 	vmov	r2, s6
 801e938:	eeb0 3a67 	vmov.f32	s6, s15
 801e93c:	fb92 fef3 	sdiv	lr, r2, r3
 801e940:	9a01      	ldr	r2, [sp, #4]
 801e942:	bf08      	it	eq
 801e944:	4613      	moveq	r3, r2
 801e946:	e79b      	b.n	801e880 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801e948:	454e      	cmp	r6, r9
 801e94a:	dabe      	bge.n	801e8ca <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e94c:	fb0e 2404 	mla	r4, lr, r4, r2
 801e950:	1424      	asrs	r4, r4, #16
 801e952:	d4ba      	bmi.n	801e8ca <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e954:	4564      	cmp	r4, ip
 801e956:	dab8      	bge.n	801e8ca <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e958:	4699      	mov	r9, r3
 801e95a:	46aa      	mov	sl, r5
 801e95c:	f1b9 0f00 	cmp.w	r9, #0
 801e960:	ddb9      	ble.n	801e8d6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e962:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e966:	1406      	asrs	r6, r0, #16
 801e968:	1414      	asrs	r4, r2, #16
 801e96a:	4440      	add	r0, r8
 801e96c:	4472      	add	r2, lr
 801e96e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e972:	fb0c 6404 	mla	r4, ip, r4, r6
 801e976:	9e00      	ldr	r6, [sp, #0]
 801e978:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801e97c:	10f4      	asrs	r4, r6, #3
 801e97e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e982:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e986:	00f6      	lsls	r6, r6, #3
 801e988:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e98c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e990:	b2f6      	uxtb	r6, r6
 801e992:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e996:	0224      	lsls	r4, r4, #8
 801e998:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e99c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e9a0:	4334      	orrs	r4, r6
 801e9a2:	f84a 4b04 	str.w	r4, [sl], #4
 801e9a6:	e7d9      	b.n	801e95c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801e9a8:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801e9ac:	d427      	bmi.n	801e9fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e9ae:	68be      	ldr	r6, [r7, #8]
 801e9b0:	4566      	cmp	r6, ip
 801e9b2:	dd24      	ble.n	801e9fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e9b4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e9b8:	d421      	bmi.n	801e9fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e9ba:	68fc      	ldr	r4, [r7, #12]
 801e9bc:	455c      	cmp	r4, fp
 801e9be:	dd1e      	ble.n	801e9fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e9c0:	b236      	sxth	r6, r6
 801e9c2:	9c00      	ldr	r4, [sp, #0]
 801e9c4:	fb0b c606 	mla	r6, fp, r6, ip
 801e9c8:	f06f 0b03 	mvn.w	fp, #3
 801e9cc:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801e9d0:	fb0b fb09 	mul.w	fp, fp, r9
 801e9d4:	10f4      	asrs	r4, r6, #3
 801e9d6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e9da:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e9de:	00f6      	lsls	r6, r6, #3
 801e9e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e9e4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e9e8:	b2f6      	uxtb	r6, r6
 801e9ea:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e9ee:	0224      	lsls	r4, r4, #8
 801e9f0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e9f4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e9f8:	4334      	orrs	r4, r6
 801e9fa:	f84a 400b 	str.w	r4, [sl, fp]
 801e9fe:	4440      	add	r0, r8
 801ea00:	4472      	add	r2, lr
 801ea02:	f109 39ff 	add.w	r9, r9, #4294967295
 801ea06:	e763      	b.n	801e8d0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ea08:	b003      	add	sp, #12
 801ea0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea0e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea12:	b085      	sub	sp, #20
 801ea14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea1e:	6868      	ldr	r0, [r5, #4]
 801ea20:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ea24:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801ea28:	fb00 1404 	mla	r4, r0, r4, r1
 801ea2c:	6829      	ldr	r1, [r5, #0]
 801ea2e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ea32:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ea34:	6809      	ldr	r1, [r1, #0]
 801ea36:	9101      	str	r1, [sp, #4]
 801ea38:	9902      	ldr	r1, [sp, #8]
 801ea3a:	2900      	cmp	r1, #0
 801ea3c:	dc03      	bgt.n	801ea46 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ea3e:	9903      	ldr	r1, [sp, #12]
 801ea40:	2900      	cmp	r1, #0
 801ea42:	f340 8137 	ble.w	801ecb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ea46:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ea48:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ea4c:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801ea50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ea52:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801ea56:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ea58:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	dd0e      	ble.n	801ea7e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ea60:	1405      	asrs	r5, r0, #16
 801ea62:	d405      	bmi.n	801ea70 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea64:	4565      	cmp	r5, ip
 801ea66:	da03      	bge.n	801ea70 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea68:	140d      	asrs	r5, r1, #16
 801ea6a:	d401      	bmi.n	801ea70 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea6c:	42bd      	cmp	r5, r7
 801ea6e:	db07      	blt.n	801ea80 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ea70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ea72:	3b01      	subs	r3, #1
 801ea74:	3404      	adds	r4, #4
 801ea76:	4428      	add	r0, r5
 801ea78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ea7a:	4429      	add	r1, r5
 801ea7c:	e7ee      	b.n	801ea5c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ea7e:	d041      	beq.n	801eb04 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801ea80:	1e5d      	subs	r5, r3, #1
 801ea82:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ea84:	fb06 0605 	mla	r6, r6, r5, r0
 801ea88:	1436      	asrs	r6, r6, #16
 801ea8a:	d433      	bmi.n	801eaf4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ea8c:	4566      	cmp	r6, ip
 801ea8e:	da31      	bge.n	801eaf4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ea90:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ea92:	fb06 1505 	mla	r5, r6, r5, r1
 801ea96:	142d      	asrs	r5, r5, #16
 801ea98:	d42c      	bmi.n	801eaf4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ea9a:	42bd      	cmp	r5, r7
 801ea9c:	da2a      	bge.n	801eaf4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ea9e:	1d25      	adds	r5, r4, #4
 801eaa0:	469a      	mov	sl, r3
 801eaa2:	f1ba 0f00 	cmp.w	sl, #0
 801eaa6:	dd29      	ble.n	801eafc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801eaa8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801eaaa:	140e      	asrs	r6, r1, #16
 801eaac:	2aff      	cmp	r2, #255	; 0xff
 801eaae:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801eab2:	ea4f 4720 	mov.w	r7, r0, asr #16
 801eab6:	fb0c 7606 	mla	r6, ip, r6, r7
 801eaba:	9f01      	ldr	r7, [sp, #4]
 801eabc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eac0:	4437      	add	r7, r6
 801eac2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801eac6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801eaca:	9f01      	ldr	r7, [sp, #4]
 801eacc:	f817 9006 	ldrb.w	r9, [r7, r6]
 801ead0:	f040 80bb 	bne.w	801ec4a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801ead4:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ead8:	f805 8c03 	strb.w	r8, [r5, #-3]
 801eadc:	f805 ec02 	strb.w	lr, [r5, #-2]
 801eae0:	f805 2c01 	strb.w	r2, [r5, #-1]
 801eae4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eae6:	3504      	adds	r5, #4
 801eae8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eaec:	4430      	add	r0, r6
 801eaee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eaf0:	4431      	add	r1, r6
 801eaf2:	e7d6      	b.n	801eaa2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eaf4:	2500      	movs	r5, #0
 801eaf6:	195e      	adds	r6, r3, r5
 801eaf8:	2e00      	cmp	r6, #0
 801eafa:	dc3f      	bgt.n	801eb7c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801eafc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb00:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801eb04:	9b02      	ldr	r3, [sp, #8]
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	f340 80d4 	ble.w	801ecb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801eb0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb16:	eeb0 6a62 	vmov.f32	s12, s5
 801eb1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb26:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb2a:	eeb0 6a43 	vmov.f32	s12, s6
 801eb2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb4e:	ee12 1a90 	vmov	r1, s5
 801eb52:	eef0 2a47 	vmov.f32	s5, s14
 801eb56:	fb91 f3f3 	sdiv	r3, r1, r3
 801eb5a:	ee13 1a10 	vmov	r1, s6
 801eb5e:	9311      	str	r3, [sp, #68]	; 0x44
 801eb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb62:	eeb0 3a67 	vmov.f32	s6, s15
 801eb66:	fb91 f3f3 	sdiv	r3, r1, r3
 801eb6a:	9312      	str	r3, [sp, #72]	; 0x48
 801eb6c:	9b02      	ldr	r3, [sp, #8]
 801eb6e:	9903      	ldr	r1, [sp, #12]
 801eb70:	3b01      	subs	r3, #1
 801eb72:	9302      	str	r3, [sp, #8]
 801eb74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb76:	bf08      	it	eq
 801eb78:	460b      	moveq	r3, r1
 801eb7a:	e75d      	b.n	801ea38 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801eb7c:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801eb80:	d424      	bmi.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801eb82:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801eb84:	68b7      	ldr	r7, [r6, #8]
 801eb86:	4567      	cmp	r7, ip
 801eb88:	dd20      	ble.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801eb8a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801eb8e:	d41d      	bmi.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801eb90:	68f6      	ldr	r6, [r6, #12]
 801eb92:	4576      	cmp	r6, lr
 801eb94:	dd1a      	ble.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801eb96:	b23f      	sxth	r7, r7
 801eb98:	9e01      	ldr	r6, [sp, #4]
 801eb9a:	2aff      	cmp	r2, #255	; 0xff
 801eb9c:	fb0e cc07 	mla	ip, lr, r7, ip
 801eba0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eba4:	4466      	add	r6, ip
 801eba6:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ebaa:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ebae:	9e01      	ldr	r6, [sp, #4]
 801ebb0:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801ebb4:	d110      	bne.n	801ebd8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ebb6:	f06f 0603 	mvn.w	r6, #3
 801ebba:	436e      	muls	r6, r5
 801ebbc:	f804 a006 	strb.w	sl, [r4, r6]
 801ebc0:	4426      	add	r6, r4
 801ebc2:	f886 9001 	strb.w	r9, [r6, #1]
 801ebc6:	f886 8002 	strb.w	r8, [r6, #2]
 801ebca:	70f2      	strb	r2, [r6, #3]
 801ebcc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ebce:	3d01      	subs	r5, #1
 801ebd0:	4430      	add	r0, r6
 801ebd2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ebd4:	4431      	add	r1, r6
 801ebd6:	e78e      	b.n	801eaf6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801ebd8:	2a00      	cmp	r2, #0
 801ebda:	d0f7      	beq.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ebdc:	fb1a fa02 	smulbb	sl, sl, r2
 801ebe0:	f06f 0603 	mvn.w	r6, #3
 801ebe4:	fb12 f909 	smulbb	r9, r2, r9
 801ebe8:	fb12 f808 	smulbb	r8, r2, r8
 801ebec:	fb06 fb05 	mul.w	fp, r6, r5
 801ebf0:	eb04 0c0b 	add.w	ip, r4, fp
 801ebf4:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801ebf8:	fb02 f607 	mul.w	r6, r2, r7
 801ebfc:	f106 0e01 	add.w	lr, r6, #1
 801ec00:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801ec04:	19d6      	adds	r6, r2, r7
 801ec06:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec0a:	eba7 070e 	sub.w	r7, r7, lr
 801ec0e:	eba6 060e 	sub.w	r6, r6, lr
 801ec12:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801ec16:	b2f6      	uxtb	r6, r6
 801ec18:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ec1c:	fb9a faf6 	sdiv	sl, sl, r6
 801ec20:	f804 a00b 	strb.w	sl, [r4, fp]
 801ec24:	f89c e001 	ldrb.w	lr, [ip, #1]
 801ec28:	f88c 6003 	strb.w	r6, [ip, #3]
 801ec2c:	fb07 990e 	mla	r9, r7, lr, r9
 801ec30:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ec34:	fb07 880e 	mla	r8, r7, lr, r8
 801ec38:	fb99 f9f6 	sdiv	r9, r9, r6
 801ec3c:	fb98 f8f6 	sdiv	r8, r8, r6
 801ec40:	f88c 9001 	strb.w	r9, [ip, #1]
 801ec44:	f88c 8002 	strb.w	r8, [ip, #2]
 801ec48:	e7c0      	b.n	801ebcc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ec4a:	2a00      	cmp	r2, #0
 801ec4c:	f43f af4a 	beq.w	801eae4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801ec50:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801ec54:	fb19 f902 	smulbb	r9, r9, r2
 801ec58:	fb12 f808 	smulbb	r8, r2, r8
 801ec5c:	fb02 fc0b 	mul.w	ip, r2, fp
 801ec60:	eb02 060b 	add.w	r6, r2, fp
 801ec64:	fb12 fe0e 	smulbb	lr, r2, lr
 801ec68:	f10c 0701 	add.w	r7, ip, #1
 801ec6c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ec70:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801ec74:	ebab 070c 	sub.w	r7, fp, ip
 801ec78:	eba6 060c 	sub.w	r6, r6, ip
 801ec7c:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801ec80:	b2f6      	uxtb	r6, r6
 801ec82:	fb07 990c 	mla	r9, r7, ip, r9
 801ec86:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801ec8a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ec8e:	fb07 880c 	mla	r8, r7, ip, r8
 801ec92:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801ec96:	fb07 ee0c 	mla	lr, r7, ip, lr
 801ec9a:	fb99 f9f6 	sdiv	r9, r9, r6
 801ec9e:	fb98 f8f6 	sdiv	r8, r8, r6
 801eca2:	fb9e fef6 	sdiv	lr, lr, r6
 801eca6:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ecaa:	f805 8c03 	strb.w	r8, [r5, #-3]
 801ecae:	f805 ec02 	strb.w	lr, [r5, #-2]
 801ecb2:	e717      	b.n	801eae4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801ecb4:	b005      	add	sp, #20
 801ecb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecba <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ecc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecc4:	9201      	str	r2, [sp, #4]
 801ecc6:	6868      	ldr	r0, [r5, #4]
 801ecc8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ecca:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ecce:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801ecd2:	fb00 2404 	mla	r4, r0, r4, r2
 801ecd6:	682a      	ldr	r2, [r5, #0]
 801ecd8:	f8d7 8000 	ldr.w	r8, [r7]
 801ecdc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801ece0:	2900      	cmp	r1, #0
 801ece2:	dc03      	bgt.n	801ecec <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ece4:	9a01      	ldr	r2, [sp, #4]
 801ece6:	2a00      	cmp	r2, #0
 801ece8:	f340 80af 	ble.w	801ee4a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ecec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ecee:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ecf2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ecf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ecf8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ecfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	dd0c      	ble.n	801ed1e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ed04:	1405      	asrs	r5, r0, #16
 801ed06:	d405      	bmi.n	801ed14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed08:	4555      	cmp	r5, sl
 801ed0a:	da03      	bge.n	801ed14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed0c:	1415      	asrs	r5, r2, #16
 801ed0e:	d401      	bmi.n	801ed14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed10:	454d      	cmp	r5, r9
 801ed12:	db05      	blt.n	801ed20 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ed14:	4470      	add	r0, lr
 801ed16:	4462      	add	r2, ip
 801ed18:	3b01      	subs	r3, #1
 801ed1a:	3404      	adds	r4, #4
 801ed1c:	e7f0      	b.n	801ed00 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ed1e:	d037      	beq.n	801ed90 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801ed20:	1e5d      	subs	r5, r3, #1
 801ed22:	fb0e 0605 	mla	r6, lr, r5, r0
 801ed26:	1436      	asrs	r6, r6, #16
 801ed28:	d42a      	bmi.n	801ed80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ed2a:	4556      	cmp	r6, sl
 801ed2c:	da28      	bge.n	801ed80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ed2e:	fb0c 2505 	mla	r5, ip, r5, r2
 801ed32:	142d      	asrs	r5, r5, #16
 801ed34:	d424      	bmi.n	801ed80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ed36:	454d      	cmp	r5, r9
 801ed38:	da22      	bge.n	801ed80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ed3a:	1d26      	adds	r6, r4, #4
 801ed3c:	4699      	mov	r9, r3
 801ed3e:	f1b9 0f00 	cmp.w	r9, #0
 801ed42:	f106 0604 	add.w	r6, r6, #4
 801ed46:	dd1f      	ble.n	801ed88 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 801ed48:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ed4c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ed50:	1415      	asrs	r5, r2, #16
 801ed52:	4470      	add	r0, lr
 801ed54:	4462      	add	r2, ip
 801ed56:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed5a:	fb0b a505 	mla	r5, fp, r5, sl
 801ed5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed62:	eb08 0a05 	add.w	sl, r8, r5
 801ed66:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ed6a:	f806 5c08 	strb.w	r5, [r6, #-8]
 801ed6e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ed72:	f806 5c07 	strb.w	r5, [r6, #-7]
 801ed76:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801ed7a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ed7e:	e7de      	b.n	801ed3e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ed80:	2600      	movs	r6, #0
 801ed82:	199d      	adds	r5, r3, r6
 801ed84:	2d00      	cmp	r5, #0
 801ed86:	dc37      	bgt.n	801edf8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ed88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed8c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ed90:	2900      	cmp	r1, #0
 801ed92:	dd5a      	ble.n	801ee4a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ed94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed9e:	3901      	subs	r1, #1
 801eda0:	eeb0 6a62 	vmov.f32	s12, s5
 801eda4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eda8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edb0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801edb4:	eeb0 6a43 	vmov.f32	s12, s6
 801edb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edbc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801edc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edd8:	ee12 2a90 	vmov	r2, s5
 801eddc:	eef0 2a47 	vmov.f32	s5, s14
 801ede0:	fb92 fef3 	sdiv	lr, r2, r3
 801ede4:	ee13 2a10 	vmov	r2, s6
 801ede8:	eeb0 3a67 	vmov.f32	s6, s15
 801edec:	fb92 fcf3 	sdiv	ip, r2, r3
 801edf0:	9a01      	ldr	r2, [sp, #4]
 801edf2:	bf08      	it	eq
 801edf4:	4613      	moveq	r3, r2
 801edf6:	e773      	b.n	801ece0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801edf8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801edfc:	d421      	bmi.n	801ee42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801edfe:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ee02:	45cb      	cmp	fp, r9
 801ee04:	dd1d      	ble.n	801ee42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ee06:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ee0a:	d41a      	bmi.n	801ee42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ee0c:	68fd      	ldr	r5, [r7, #12]
 801ee0e:	4555      	cmp	r5, sl
 801ee10:	dd17      	ble.n	801ee42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ee12:	fa0f f58b 	sxth.w	r5, fp
 801ee16:	fb0a 9505 	mla	r5, sl, r5, r9
 801ee1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee1e:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ee22:	eb08 0b05 	add.w	fp, r8, r5
 801ee26:	f06f 0503 	mvn.w	r5, #3
 801ee2a:	4375      	muls	r5, r6
 801ee2c:	f804 9005 	strb.w	r9, [r4, r5]
 801ee30:	4425      	add	r5, r4
 801ee32:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ee36:	f885 9001 	strb.w	r9, [r5, #1]
 801ee3a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ee3e:	f885 9002 	strb.w	r9, [r5, #2]
 801ee42:	4470      	add	r0, lr
 801ee44:	4462      	add	r2, ip
 801ee46:	3e01      	subs	r6, #1
 801ee48:	e79b      	b.n	801ed82 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ee4a:	b003      	add	sp, #12
 801ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee50 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee54:	b087      	sub	sp, #28
 801ee56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee5c:	9203      	str	r2, [sp, #12]
 801ee5e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ee62:	9100      	str	r1, [sp, #0]
 801ee64:	9204      	str	r2, [sp, #16]
 801ee66:	6861      	ldr	r1, [r4, #4]
 801ee68:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801ee6c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ee70:	fb01 2000 	mla	r0, r1, r0, r2
 801ee74:	6822      	ldr	r2, [r4, #0]
 801ee76:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801ee7a:	f8db 2000 	ldr.w	r2, [fp]
 801ee7e:	9201      	str	r2, [sp, #4]
 801ee80:	9a00      	ldr	r2, [sp, #0]
 801ee82:	2a00      	cmp	r2, #0
 801ee84:	dc03      	bgt.n	801ee8e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ee86:	9a03      	ldr	r2, [sp, #12]
 801ee88:	2a00      	cmp	r2, #0
 801ee8a:	f340 8147 	ble.w	801f11c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801ee8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee90:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ee94:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee9a:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801ee9e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	dd0e      	ble.n	801eec4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eea6:	140c      	asrs	r4, r1, #16
 801eea8:	d405      	bmi.n	801eeb6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eeaa:	42bc      	cmp	r4, r7
 801eeac:	da03      	bge.n	801eeb6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eeae:	1414      	asrs	r4, r2, #16
 801eeb0:	d401      	bmi.n	801eeb6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eeb2:	42b4      	cmp	r4, r6
 801eeb4:	db07      	blt.n	801eec6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eeb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eeb8:	3b01      	subs	r3, #1
 801eeba:	3004      	adds	r0, #4
 801eebc:	4421      	add	r1, r4
 801eebe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eec0:	4422      	add	r2, r4
 801eec2:	e7ee      	b.n	801eea2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eec4:	d048      	beq.n	801ef58 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801eec6:	1e5c      	subs	r4, r3, #1
 801eec8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eeca:	fb05 1504 	mla	r5, r5, r4, r1
 801eece:	142d      	asrs	r5, r5, #16
 801eed0:	d438      	bmi.n	801ef44 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801eed2:	42bd      	cmp	r5, r7
 801eed4:	da36      	bge.n	801ef44 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801eed6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eed8:	fb05 2404 	mla	r4, r5, r4, r2
 801eedc:	1424      	asrs	r4, r4, #16
 801eede:	d431      	bmi.n	801ef44 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801eee0:	42b4      	cmp	r4, r6
 801eee2:	da2f      	bge.n	801ef44 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801eee4:	469e      	mov	lr, r3
 801eee6:	4604      	mov	r4, r0
 801eee8:	f1be 0f00 	cmp.w	lr, #0
 801eeec:	dd30      	ble.n	801ef50 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801eeee:	140e      	asrs	r6, r1, #16
 801eef0:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801eef4:	1415      	asrs	r5, r2, #16
 801eef6:	fb07 6505 	mla	r5, r7, r5, r6
 801eefa:	9e01      	ldr	r6, [sp, #4]
 801eefc:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 801ef00:	0e35      	lsrs	r5, r6, #24
 801ef02:	d017      	beq.n	801ef34 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ef04:	9f04      	ldr	r7, [sp, #16]
 801ef06:	f3c6 4907 	ubfx	r9, r6, #16, #8
 801ef0a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801ef0e:	437d      	muls	r5, r7
 801ef10:	fa5f f88c 	uxtb.w	r8, ip
 801ef14:	1c6f      	adds	r7, r5, #1
 801ef16:	eb07 2525 	add.w	r5, r7, r5, asr #8
 801ef1a:	fa5f f789 	uxtb.w	r7, r9
 801ef1e:	122d      	asrs	r5, r5, #8
 801ef20:	9702      	str	r7, [sp, #8]
 801ef22:	2dff      	cmp	r5, #255	; 0xff
 801ef24:	f040 80c7 	bne.w	801f0b6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ef28:	7026      	strb	r6, [r4, #0]
 801ef2a:	f884 c001 	strb.w	ip, [r4, #1]
 801ef2e:	f884 9002 	strb.w	r9, [r4, #2]
 801ef32:	70e5      	strb	r5, [r4, #3]
 801ef34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ef36:	3404      	adds	r4, #4
 801ef38:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef3c:	4429      	add	r1, r5
 801ef3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ef40:	442a      	add	r2, r5
 801ef42:	e7d1      	b.n	801eee8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ef44:	f04f 0c00 	mov.w	ip, #0
 801ef48:	eb03 040c 	add.w	r4, r3, ip
 801ef4c:	2c00      	cmp	r4, #0
 801ef4e:	dc3f      	bgt.n	801efd0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 801ef50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ef58:	9b00      	ldr	r3, [sp, #0]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	f340 80de 	ble.w	801f11c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801ef60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef6a:	eeb0 6a62 	vmov.f32	s12, s5
 801ef6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef7a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ef7e:	eeb0 6a43 	vmov.f32	s12, s6
 801ef82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef86:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efa2:	ee12 2a90 	vmov	r2, s5
 801efa6:	eef0 2a47 	vmov.f32	s5, s14
 801efaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801efae:	ee13 2a10 	vmov	r2, s6
 801efb2:	9313      	str	r3, [sp, #76]	; 0x4c
 801efb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efb6:	eeb0 3a67 	vmov.f32	s6, s15
 801efba:	fb92 f3f3 	sdiv	r3, r2, r3
 801efbe:	9314      	str	r3, [sp, #80]	; 0x50
 801efc0:	9b00      	ldr	r3, [sp, #0]
 801efc2:	9a03      	ldr	r2, [sp, #12]
 801efc4:	3b01      	subs	r3, #1
 801efc6:	9300      	str	r3, [sp, #0]
 801efc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801efca:	bf08      	it	eq
 801efcc:	4613      	moveq	r3, r2
 801efce:	e757      	b.n	801ee80 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801efd0:	140e      	asrs	r6, r1, #16
 801efd2:	d42e      	bmi.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801efd4:	f8db 5008 	ldr.w	r5, [fp, #8]
 801efd8:	42b5      	cmp	r5, r6
 801efda:	dd2a      	ble.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801efdc:	1417      	asrs	r7, r2, #16
 801efde:	d428      	bmi.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801efe0:	f8db 400c 	ldr.w	r4, [fp, #12]
 801efe4:	42bc      	cmp	r4, r7
 801efe6:	dd24      	ble.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801efe8:	b22d      	sxth	r5, r5
 801efea:	9c01      	ldr	r4, [sp, #4]
 801efec:	fb07 6505 	mla	r5, r7, r5, r6
 801eff0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801eff4:	0e2c      	lsrs	r4, r5, #24
 801eff6:	d01c      	beq.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801eff8:	9e04      	ldr	r6, [sp, #16]
 801effa:	4374      	muls	r4, r6
 801effc:	1c66      	adds	r6, r4, #1
 801effe:	eb06 2424 	add.w	r4, r6, r4, asr #8
 801f002:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f006:	1224      	asrs	r4, r4, #8
 801f008:	b2f7      	uxtb	r7, r6
 801f00a:	2cff      	cmp	r4, #255	; 0xff
 801f00c:	9705      	str	r7, [sp, #20]
 801f00e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801f012:	fa5f f887 	uxtb.w	r8, r7
 801f016:	d113      	bne.n	801f040 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f018:	f06f 0e03 	mvn.w	lr, #3
 801f01c:	fb0e fe0c 	mul.w	lr, lr, ip
 801f020:	f800 500e 	strb.w	r5, [r0, lr]
 801f024:	4486      	add	lr, r0
 801f026:	f88e 7001 	strb.w	r7, [lr, #1]
 801f02a:	f88e 6002 	strb.w	r6, [lr, #2]
 801f02e:	f88e 4003 	strb.w	r4, [lr, #3]
 801f032:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f034:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f038:	4421      	add	r1, r4
 801f03a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f03c:	4422      	add	r2, r4
 801f03e:	e783      	b.n	801ef48 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f040:	b2e6      	uxtb	r6, r4
 801f042:	9602      	str	r6, [sp, #8]
 801f044:	2c00      	cmp	r4, #0
 801f046:	d0f4      	beq.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f048:	f06f 0603 	mvn.w	r6, #3
 801f04c:	b2ed      	uxtb	r5, r5
 801f04e:	fb04 f808 	mul.w	r8, r4, r8
 801f052:	fb06 f90c 	mul.w	r9, r6, ip
 801f056:	9e02      	ldr	r6, [sp, #8]
 801f058:	eb00 0e09 	add.w	lr, r0, r9
 801f05c:	f89e a003 	ldrb.w	sl, [lr, #3]
 801f060:	fb06 f70a 	mul.w	r7, r6, sl
 801f064:	1c7e      	adds	r6, r7, #1
 801f066:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801f06a:	9e02      	ldr	r6, [sp, #8]
 801f06c:	123f      	asrs	r7, r7, #8
 801f06e:	4456      	add	r6, sl
 801f070:	1bf6      	subs	r6, r6, r7
 801f072:	ebaa 0707 	sub.w	r7, sl, r7
 801f076:	f810 a009 	ldrb.w	sl, [r0, r9]
 801f07a:	b2f6      	uxtb	r6, r6
 801f07c:	fb07 fa0a 	mul.w	sl, r7, sl
 801f080:	fb04 a505 	mla	r5, r4, r5, sl
 801f084:	fb95 f5f6 	sdiv	r5, r5, r6
 801f088:	f800 5009 	strb.w	r5, [r0, r9]
 801f08c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f090:	f89e a002 	ldrb.w	sl, [lr, #2]
 801f094:	fb07 8805 	mla	r8, r7, r5, r8
 801f098:	9d05      	ldr	r5, [sp, #20]
 801f09a:	f88e 6003 	strb.w	r6, [lr, #3]
 801f09e:	436c      	muls	r4, r5
 801f0a0:	fb07 470a 	mla	r7, r7, sl, r4
 801f0a4:	fb98 f8f6 	sdiv	r8, r8, r6
 801f0a8:	fb97 f7f6 	sdiv	r7, r7, r6
 801f0ac:	f88e 8001 	strb.w	r8, [lr, #1]
 801f0b0:	f88e 7002 	strb.w	r7, [lr, #2]
 801f0b4:	e7bd      	b.n	801f032 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f0b6:	b2ef      	uxtb	r7, r5
 801f0b8:	2d00      	cmp	r5, #0
 801f0ba:	f43f af3b 	beq.w	801ef34 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f0be:	f894 9003 	ldrb.w	r9, [r4, #3]
 801f0c2:	b2f6      	uxtb	r6, r6
 801f0c4:	fb05 f808 	mul.w	r8, r5, r8
 801f0c8:	fb07 fa09 	mul.w	sl, r7, r9
 801f0cc:	444f      	add	r7, r9
 801f0ce:	f10a 0c01 	add.w	ip, sl, #1
 801f0d2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f0d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f0da:	eba7 070c 	sub.w	r7, r7, ip
 801f0de:	eba9 0c0c 	sub.w	ip, r9, ip
 801f0e2:	f894 9000 	ldrb.w	r9, [r4]
 801f0e6:	b2ff      	uxtb	r7, r7
 801f0e8:	fb0c f909 	mul.w	r9, ip, r9
 801f0ec:	70e7      	strb	r7, [r4, #3]
 801f0ee:	fb05 9606 	mla	r6, r5, r6, r9
 801f0f2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f0f6:	fb96 f6f7 	sdiv	r6, r6, r7
 801f0fa:	7026      	strb	r6, [r4, #0]
 801f0fc:	7866      	ldrb	r6, [r4, #1]
 801f0fe:	fb0c 8806 	mla	r8, ip, r6, r8
 801f102:	9e02      	ldr	r6, [sp, #8]
 801f104:	4375      	muls	r5, r6
 801f106:	fb0c 5c09 	mla	ip, ip, r9, r5
 801f10a:	fb98 f8f7 	sdiv	r8, r8, r7
 801f10e:	fb9c fcf7 	sdiv	ip, ip, r7
 801f112:	f884 8001 	strb.w	r8, [r4, #1]
 801f116:	f884 c002 	strb.w	ip, [r4, #2]
 801f11a:	e70b      	b.n	801ef34 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f11c:	b007      	add	sp, #28
 801f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f124 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f128:	b089      	sub	sp, #36	; 0x24
 801f12a:	469a      	mov	sl, r3
 801f12c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f130:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f132:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801f136:	9102      	str	r1, [sp, #8]
 801f138:	9206      	str	r2, [sp, #24]
 801f13a:	9307      	str	r3, [sp, #28]
 801f13c:	6842      	ldr	r2, [r0, #4]
 801f13e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801f142:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801f146:	fb02 3101 	mla	r1, r2, r1, r3
 801f14a:	6803      	ldr	r3, [r0, #0]
 801f14c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f150:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f154:	3301      	adds	r3, #1
 801f156:	f023 0301 	bic.w	r3, r3, #1
 801f15a:	9303      	str	r3, [sp, #12]
 801f15c:	f8db 3000 	ldr.w	r3, [fp]
 801f160:	9304      	str	r3, [sp, #16]
 801f162:	9b02      	ldr	r3, [sp, #8]
 801f164:	2b00      	cmp	r3, #0
 801f166:	dc03      	bgt.n	801f170 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f168:	9b06      	ldr	r3, [sp, #24]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	f340 8154 	ble.w	801f418 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f172:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 801f176:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801f17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f17c:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 801f180:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f184:	9301      	str	r3, [sp, #4]
 801f186:	f1ba 0f00 	cmp.w	sl, #0
 801f18a:	dd12      	ble.n	801f1b2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f18c:	1410      	asrs	r0, r2, #16
 801f18e:	d406      	bmi.n	801f19e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f190:	42b0      	cmp	r0, r6
 801f192:	da04      	bge.n	801f19e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f194:	9b01      	ldr	r3, [sp, #4]
 801f196:	1418      	asrs	r0, r3, #16
 801f198:	d401      	bmi.n	801f19e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f19a:	42a8      	cmp	r0, r5
 801f19c:	db0a      	blt.n	801f1b4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f19e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f1a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1a4:	9b01      	ldr	r3, [sp, #4]
 801f1a6:	3104      	adds	r1, #4
 801f1a8:	4402      	add	r2, r0
 801f1aa:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f1ac:	4403      	add	r3, r0
 801f1ae:	9301      	str	r3, [sp, #4]
 801f1b0:	e7e9      	b.n	801f186 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f1b2:	d050      	beq.n	801f256 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f1b4:	f10a 30ff 	add.w	r0, sl, #4294967295
 801f1b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f1ba:	fb04 2400 	mla	r4, r4, r0, r2
 801f1be:	1424      	asrs	r4, r4, #16
 801f1c0:	d440      	bmi.n	801f244 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f1c2:	42b4      	cmp	r4, r6
 801f1c4:	da3e      	bge.n	801f244 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f1c6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f1c8:	9b01      	ldr	r3, [sp, #4]
 801f1ca:	fb04 3000 	mla	r0, r4, r0, r3
 801f1ce:	1400      	asrs	r0, r0, #16
 801f1d0:	d438      	bmi.n	801f244 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f1d2:	42a8      	cmp	r0, r5
 801f1d4:	da36      	bge.n	801f244 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f1d6:	1d08      	adds	r0, r1, #4
 801f1d8:	46d6      	mov	lr, sl
 801f1da:	f1be 0f00 	cmp.w	lr, #0
 801f1de:	dd36      	ble.n	801f24e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f1e0:	9b01      	ldr	r3, [sp, #4]
 801f1e2:	1414      	asrs	r4, r2, #16
 801f1e4:	141d      	asrs	r5, r3, #16
 801f1e6:	9b03      	ldr	r3, [sp, #12]
 801f1e8:	fb03 4505 	mla	r5, r3, r5, r4
 801f1ec:	9b04      	ldr	r3, [sp, #16]
 801f1ee:	086c      	lsrs	r4, r5, #1
 801f1f0:	5d1c      	ldrb	r4, [r3, r4]
 801f1f2:	07eb      	lsls	r3, r5, #31
 801f1f4:	9b07      	ldr	r3, [sp, #28]
 801f1f6:	bf54      	ite	pl
 801f1f8:	f004 040f 	andpl.w	r4, r4, #15
 801f1fc:	1124      	asrmi	r4, r4, #4
 801f1fe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f202:	b2e4      	uxtb	r4, r4
 801f204:	435c      	muls	r4, r3
 801f206:	1c65      	adds	r5, r4, #1
 801f208:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801f20c:	4d84      	ldr	r5, [pc, #528]	; (801f420 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f20e:	1224      	asrs	r4, r4, #8
 801f210:	f895 9002 	ldrb.w	r9, [r5, #2]
 801f214:	786f      	ldrb	r7, [r5, #1]
 801f216:	2cff      	cmp	r4, #255	; 0xff
 801f218:	f895 c000 	ldrb.w	ip, [r5]
 801f21c:	f040 80cb 	bne.w	801f3b6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f220:	f800 cc04 	strb.w	ip, [r0, #-4]
 801f224:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f228:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f22c:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f232:	3004      	adds	r0, #4
 801f234:	9c01      	ldr	r4, [sp, #4]
 801f236:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f23a:	441a      	add	r2, r3
 801f23c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f23e:	441c      	add	r4, r3
 801f240:	9401      	str	r4, [sp, #4]
 801f242:	e7ca      	b.n	801f1da <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f244:	2600      	movs	r6, #0
 801f246:	eb0a 0006 	add.w	r0, sl, r6
 801f24a:	2800      	cmp	r0, #0
 801f24c:	dc41      	bgt.n	801f2d2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f24e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801f252:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f256:	9b02      	ldr	r3, [sp, #8]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	f340 80dd 	ble.w	801f418 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f25e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f264:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f268:	eeb0 6a62 	vmov.f32	s12, s5
 801f26c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f270:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f274:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f278:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801f27c:	eeb0 6a43 	vmov.f32	s12, s6
 801f280:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f284:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801f288:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f28c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f290:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f294:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f298:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f29c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2a0:	ee12 2a90 	vmov	r2, s5
 801f2a4:	eef0 2a47 	vmov.f32	s5, s14
 801f2a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ac:	ee13 2a10 	vmov	r2, s6
 801f2b0:	9315      	str	r3, [sp, #84]	; 0x54
 801f2b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f2b4:	eeb0 3a67 	vmov.f32	s6, s15
 801f2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2bc:	9316      	str	r3, [sp, #88]	; 0x58
 801f2be:	9b02      	ldr	r3, [sp, #8]
 801f2c0:	9a06      	ldr	r2, [sp, #24]
 801f2c2:	3b01      	subs	r3, #1
 801f2c4:	9302      	str	r3, [sp, #8]
 801f2c6:	bf08      	it	eq
 801f2c8:	4692      	moveq	sl, r2
 801f2ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f2cc:	bf18      	it	ne
 801f2ce:	469a      	movne	sl, r3
 801f2d0:	e747      	b.n	801f162 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f2d2:	1414      	asrs	r4, r2, #16
 801f2d4:	d432      	bmi.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f2d6:	f8db 0008 	ldr.w	r0, [fp, #8]
 801f2da:	42a0      	cmp	r0, r4
 801f2dc:	dd2e      	ble.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f2de:	9b01      	ldr	r3, [sp, #4]
 801f2e0:	141d      	asrs	r5, r3, #16
 801f2e2:	d42b      	bmi.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f2e4:	f8db 000c 	ldr.w	r0, [fp, #12]
 801f2e8:	42a8      	cmp	r0, r5
 801f2ea:	dd27      	ble.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f2ec:	9803      	ldr	r0, [sp, #12]
 801f2ee:	fb05 4400 	mla	r4, r5, r0, r4
 801f2f2:	9d04      	ldr	r5, [sp, #16]
 801f2f4:	0860      	lsrs	r0, r4, #1
 801f2f6:	07e4      	lsls	r4, r4, #31
 801f2f8:	9c07      	ldr	r4, [sp, #28]
 801f2fa:	5c28      	ldrb	r0, [r5, r0]
 801f2fc:	bf54      	ite	pl
 801f2fe:	f000 000f 	andpl.w	r0, r0, #15
 801f302:	1100      	asrmi	r0, r0, #4
 801f304:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f308:	b2c0      	uxtb	r0, r0
 801f30a:	4360      	muls	r0, r4
 801f30c:	1c44      	adds	r4, r0, #1
 801f30e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f312:	4c43      	ldr	r4, [pc, #268]	; (801f420 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f314:	1200      	asrs	r0, r0, #8
 801f316:	78a5      	ldrb	r5, [r4, #2]
 801f318:	f894 c001 	ldrb.w	ip, [r4, #1]
 801f31c:	28ff      	cmp	r0, #255	; 0xff
 801f31e:	9505      	str	r5, [sp, #20]
 801f320:	f894 e000 	ldrb.w	lr, [r4]
 801f324:	d112      	bne.n	801f34c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f326:	f06f 0303 	mvn.w	r3, #3
 801f32a:	fb03 f406 	mul.w	r4, r3, r6
 801f32e:	f801 e004 	strb.w	lr, [r1, r4]
 801f332:	440c      	add	r4, r1
 801f334:	f884 c001 	strb.w	ip, [r4, #1]
 801f338:	70a5      	strb	r5, [r4, #2]
 801f33a:	70e0      	strb	r0, [r4, #3]
 801f33c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f33e:	3e01      	subs	r6, #1
 801f340:	9801      	ldr	r0, [sp, #4]
 801f342:	441a      	add	r2, r3
 801f344:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f346:	4418      	add	r0, r3
 801f348:	9001      	str	r0, [sp, #4]
 801f34a:	e77c      	b.n	801f246 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f34c:	b2c4      	uxtb	r4, r0
 801f34e:	2800      	cmp	r0, #0
 801f350:	d0f4      	beq.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f352:	f06f 0303 	mvn.w	r3, #3
 801f356:	fb00 fe0e 	mul.w	lr, r0, lr
 801f35a:	fb00 fc0c 	mul.w	ip, r0, ip
 801f35e:	fb03 f806 	mul.w	r8, r3, r6
 801f362:	eb01 0708 	add.w	r7, r1, r8
 801f366:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f36a:	fb04 f509 	mul.w	r5, r4, r9
 801f36e:	444c      	add	r4, r9
 801f370:	1c6b      	adds	r3, r5, #1
 801f372:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f376:	9b05      	ldr	r3, [sp, #20]
 801f378:	122d      	asrs	r5, r5, #8
 801f37a:	4358      	muls	r0, r3
 801f37c:	1b64      	subs	r4, r4, r5
 801f37e:	eba9 0505 	sub.w	r5, r9, r5
 801f382:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f386:	b2e4      	uxtb	r4, r4
 801f388:	fb05 ee09 	mla	lr, r5, r9, lr
 801f38c:	fb9e fef4 	sdiv	lr, lr, r4
 801f390:	f801 e008 	strb.w	lr, [r1, r8]
 801f394:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f398:	f897 9002 	ldrb.w	r9, [r7, #2]
 801f39c:	fb05 cc0e 	mla	ip, r5, lr, ip
 801f3a0:	fb05 0509 	mla	r5, r5, r9, r0
 801f3a4:	70fc      	strb	r4, [r7, #3]
 801f3a6:	fb9c fcf4 	sdiv	ip, ip, r4
 801f3aa:	fb95 f5f4 	sdiv	r5, r5, r4
 801f3ae:	f887 c001 	strb.w	ip, [r7, #1]
 801f3b2:	70bd      	strb	r5, [r7, #2]
 801f3b4:	e7c2      	b.n	801f33c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f3b6:	b2e5      	uxtb	r5, r4
 801f3b8:	2c00      	cmp	r4, #0
 801f3ba:	f43f af39 	beq.w	801f230 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f3be:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f3c2:	fb04 fc0c 	mul.w	ip, r4, ip
 801f3c6:	4367      	muls	r7, r4
 801f3c8:	fb05 f608 	mul.w	r6, r5, r8
 801f3cc:	4445      	add	r5, r8
 801f3ce:	fb04 f409 	mul.w	r4, r4, r9
 801f3d2:	1c73      	adds	r3, r6, #1
 801f3d4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f3d8:	1236      	asrs	r6, r6, #8
 801f3da:	1bad      	subs	r5, r5, r6
 801f3dc:	eba8 0606 	sub.w	r6, r8, r6
 801f3e0:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f3e4:	b2ed      	uxtb	r5, r5
 801f3e6:	fb06 cc08 	mla	ip, r6, r8, ip
 801f3ea:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f3ee:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f3f2:	fb9c fcf5 	sdiv	ip, ip, r5
 801f3f6:	f800 cc04 	strb.w	ip, [r0, #-4]
 801f3fa:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801f3fe:	fb06 770c 	mla	r7, r6, ip, r7
 801f402:	fb06 4608 	mla	r6, r6, r8, r4
 801f406:	fb97 f7f5 	sdiv	r7, r7, r5
 801f40a:	fb96 f6f5 	sdiv	r6, r6, r5
 801f40e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f412:	f800 6c02 	strb.w	r6, [r0, #-2]
 801f416:	e70b      	b.n	801f230 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f418:	b009      	add	sp, #36	; 0x24
 801f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41e:	bf00      	nop
 801f420:	2003bd18 	.word	0x2003bd18

0801f424 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f428:	b089      	sub	sp, #36	; 0x24
 801f42a:	469a      	mov	sl, r3
 801f42c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f430:	4cb8      	ldr	r4, [pc, #736]	; (801f714 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 801f432:	9102      	str	r1, [sp, #8]
 801f434:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f436:	9205      	str	r2, [sp, #20]
 801f438:	684a      	ldr	r2, [r1, #4]
 801f43a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801f43e:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 801f442:	fb02 3000 	mla	r0, r2, r0, r3
 801f446:	680b      	ldr	r3, [r1, #0]
 801f448:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f44c:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f450:	3301      	adds	r3, #1
 801f452:	f023 0301 	bic.w	r3, r3, #1
 801f456:	9303      	str	r3, [sp, #12]
 801f458:	f8db 3000 	ldr.w	r3, [fp]
 801f45c:	9304      	str	r3, [sp, #16]
 801f45e:	9b02      	ldr	r3, [sp, #8]
 801f460:	2b00      	cmp	r3, #0
 801f462:	dc03      	bgt.n	801f46c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f464:	9b05      	ldr	r3, [sp, #20]
 801f466:	2b00      	cmp	r3, #0
 801f468:	f340 8150 	ble.w	801f70c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f46c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f46e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f472:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 801f476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f478:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f47c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f480:	9301      	str	r3, [sp, #4]
 801f482:	f1ba 0f00 	cmp.w	sl, #0
 801f486:	dd12      	ble.n	801f4ae <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f488:	140b      	asrs	r3, r1, #16
 801f48a:	d406      	bmi.n	801f49a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f48c:	42bb      	cmp	r3, r7
 801f48e:	da04      	bge.n	801f49a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f490:	9b01      	ldr	r3, [sp, #4]
 801f492:	141b      	asrs	r3, r3, #16
 801f494:	d401      	bmi.n	801f49a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f496:	42b3      	cmp	r3, r6
 801f498:	db0a      	blt.n	801f4b0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f49c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f4a0:	9a01      	ldr	r2, [sp, #4]
 801f4a2:	3004      	adds	r0, #4
 801f4a4:	4419      	add	r1, r3
 801f4a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f4a8:	441a      	add	r2, r3
 801f4aa:	9201      	str	r2, [sp, #4]
 801f4ac:	e7e9      	b.n	801f482 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f4ae:	d046      	beq.n	801f53e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f4b0:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f4b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f4b6:	fb05 1503 	mla	r5, r5, r3, r1
 801f4ba:	142d      	asrs	r5, r5, #16
 801f4bc:	d436      	bmi.n	801f52c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f4be:	42bd      	cmp	r5, r7
 801f4c0:	da34      	bge.n	801f52c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f4c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4c4:	9a01      	ldr	r2, [sp, #4]
 801f4c6:	fb05 2303 	mla	r3, r5, r3, r2
 801f4ca:	141b      	asrs	r3, r3, #16
 801f4cc:	d42e      	bmi.n	801f52c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f4ce:	42b3      	cmp	r3, r6
 801f4d0:	da2c      	bge.n	801f52c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f4d2:	1d05      	adds	r5, r0, #4
 801f4d4:	46d0      	mov	r8, sl
 801f4d6:	f1b8 0f00 	cmp.w	r8, #0
 801f4da:	dd2c      	ble.n	801f536 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f4dc:	9b01      	ldr	r3, [sp, #4]
 801f4de:	9a03      	ldr	r2, [sp, #12]
 801f4e0:	141e      	asrs	r6, r3, #16
 801f4e2:	f894 e000 	ldrb.w	lr, [r4]
 801f4e6:	140b      	asrs	r3, r1, #16
 801f4e8:	fb02 3606 	mla	r6, r2, r6, r3
 801f4ec:	9a04      	ldr	r2, [sp, #16]
 801f4ee:	0873      	lsrs	r3, r6, #1
 801f4f0:	5cd3      	ldrb	r3, [r2, r3]
 801f4f2:	07f2      	lsls	r2, r6, #31
 801f4f4:	bf54      	ite	pl
 801f4f6:	f003 030f 	andpl.w	r3, r3, #15
 801f4fa:	111b      	asrmi	r3, r3, #4
 801f4fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f500:	b2db      	uxtb	r3, r3
 801f502:	2bff      	cmp	r3, #255	; 0xff
 801f504:	f040 80c9 	bne.w	801f69a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f508:	f805 ec04 	strb.w	lr, [r5, #-4]
 801f50c:	7863      	ldrb	r3, [r4, #1]
 801f50e:	f805 3c03 	strb.w	r3, [r5, #-3]
 801f512:	78a3      	ldrb	r3, [r4, #2]
 801f514:	f805 3c02 	strb.w	r3, [r5, #-2]
 801f518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f51a:	3504      	adds	r5, #4
 801f51c:	9a01      	ldr	r2, [sp, #4]
 801f51e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f522:	4419      	add	r1, r3
 801f524:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f526:	441a      	add	r2, r3
 801f528:	9201      	str	r2, [sp, #4]
 801f52a:	e7d4      	b.n	801f4d6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f52c:	2500      	movs	r5, #0
 801f52e:	eb0a 0305 	add.w	r3, sl, r5
 801f532:	2b00      	cmp	r3, #0
 801f534:	dc41      	bgt.n	801f5ba <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f536:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801f53a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f53e:	9b02      	ldr	r3, [sp, #8]
 801f540:	2b00      	cmp	r3, #0
 801f542:	f340 80e3 	ble.w	801f70c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f546:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f54a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f54c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f550:	eeb0 6a62 	vmov.f32	s12, s5
 801f554:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f558:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f55c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f560:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801f564:	eeb0 6a43 	vmov.f32	s12, s6
 801f568:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f56c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801f570:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f574:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f578:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f57c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f580:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f584:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f588:	ee12 2a90 	vmov	r2, s5
 801f58c:	eef0 2a47 	vmov.f32	s5, s14
 801f590:	fb92 f3f3 	sdiv	r3, r2, r3
 801f594:	ee13 2a10 	vmov	r2, s6
 801f598:	9315      	str	r3, [sp, #84]	; 0x54
 801f59a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f59c:	eeb0 3a67 	vmov.f32	s6, s15
 801f5a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5a4:	9316      	str	r3, [sp, #88]	; 0x58
 801f5a6:	9b02      	ldr	r3, [sp, #8]
 801f5a8:	9a05      	ldr	r2, [sp, #20]
 801f5aa:	3b01      	subs	r3, #1
 801f5ac:	9302      	str	r3, [sp, #8]
 801f5ae:	bf08      	it	eq
 801f5b0:	4692      	moveq	sl, r2
 801f5b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f5b4:	bf18      	it	ne
 801f5b6:	469a      	movne	sl, r3
 801f5b8:	e751      	b.n	801f45e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f5ba:	140e      	asrs	r6, r1, #16
 801f5bc:	d426      	bmi.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5be:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f5c2:	42b3      	cmp	r3, r6
 801f5c4:	dd22      	ble.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5c6:	9b01      	ldr	r3, [sp, #4]
 801f5c8:	141f      	asrs	r7, r3, #16
 801f5ca:	d41f      	bmi.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5cc:	f8db 300c 	ldr.w	r3, [fp, #12]
 801f5d0:	42bb      	cmp	r3, r7
 801f5d2:	dd1b      	ble.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f5d4:	9b03      	ldr	r3, [sp, #12]
 801f5d6:	f894 8000 	ldrb.w	r8, [r4]
 801f5da:	fb07 6603 	mla	r6, r7, r3, r6
 801f5de:	9f04      	ldr	r7, [sp, #16]
 801f5e0:	0873      	lsrs	r3, r6, #1
 801f5e2:	07f6      	lsls	r6, r6, #31
 801f5e4:	5cfb      	ldrb	r3, [r7, r3]
 801f5e6:	bf54      	ite	pl
 801f5e8:	f003 030f 	andpl.w	r3, r3, #15
 801f5ec:	111b      	asrmi	r3, r3, #4
 801f5ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f5f2:	b2db      	uxtb	r3, r3
 801f5f4:	2bff      	cmp	r3, #255	; 0xff
 801f5f6:	d111      	bne.n	801f61c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f5f8:	f06f 0303 	mvn.w	r3, #3
 801f5fc:	436b      	muls	r3, r5
 801f5fe:	f800 8003 	strb.w	r8, [r0, r3]
 801f602:	4403      	add	r3, r0
 801f604:	7866      	ldrb	r6, [r4, #1]
 801f606:	705e      	strb	r6, [r3, #1]
 801f608:	78a6      	ldrb	r6, [r4, #2]
 801f60a:	709e      	strb	r6, [r3, #2]
 801f60c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f60e:	3d01      	subs	r5, #1
 801f610:	9a01      	ldr	r2, [sp, #4]
 801f612:	4419      	add	r1, r3
 801f614:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f616:	441a      	add	r2, r3
 801f618:	9201      	str	r2, [sp, #4]
 801f61a:	e788      	b.n	801f52e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d0f5      	beq.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f620:	f06f 0203 	mvn.w	r2, #3
 801f624:	78a6      	ldrb	r6, [r4, #2]
 801f626:	fb18 f803 	smulbb	r8, r8, r3
 801f62a:	fb02 f905 	mul.w	r9, r2, r5
 801f62e:	9606      	str	r6, [sp, #24]
 801f630:	eb00 0c09 	add.w	ip, r0, r9
 801f634:	7866      	ldrb	r6, [r4, #1]
 801f636:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801f63a:	9607      	str	r6, [sp, #28]
 801f63c:	fb03 f607 	mul.w	r6, r3, r7
 801f640:	9a07      	ldr	r2, [sp, #28]
 801f642:	f106 0e01 	add.w	lr, r6, #1
 801f646:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 801f64a:	18fe      	adds	r6, r7, r3
 801f64c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f650:	eba7 070e 	sub.w	r7, r7, lr
 801f654:	eba6 060e 	sub.w	r6, r6, lr
 801f658:	f810 e009 	ldrb.w	lr, [r0, r9]
 801f65c:	b2f6      	uxtb	r6, r6
 801f65e:	fb07 880e 	mla	r8, r7, lr, r8
 801f662:	fb98 f8f6 	sdiv	r8, r8, r6
 801f666:	f800 8009 	strb.w	r8, [r0, r9]
 801f66a:	fb13 f902 	smulbb	r9, r3, r2
 801f66e:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f672:	9a06      	ldr	r2, [sp, #24]
 801f674:	fb07 990e 	mla	r9, r7, lr, r9
 801f678:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f67c:	fb13 f302 	smulbb	r3, r3, r2
 801f680:	f88c 6003 	strb.w	r6, [ip, #3]
 801f684:	fb07 330e 	mla	r3, r7, lr, r3
 801f688:	fb99 f9f6 	sdiv	r9, r9, r6
 801f68c:	fb93 f3f6 	sdiv	r3, r3, r6
 801f690:	f88c 9001 	strb.w	r9, [ip, #1]
 801f694:	f88c 3002 	strb.w	r3, [ip, #2]
 801f698:	e7b8      	b.n	801f60c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	f43f af3c 	beq.w	801f518 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f6a0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f6a4:	fb1e fe03 	smulbb	lr, lr, r3
 801f6a8:	78a2      	ldrb	r2, [r4, #2]
 801f6aa:	fb03 fc09 	mul.w	ip, r3, r9
 801f6ae:	eb09 0603 	add.w	r6, r9, r3
 801f6b2:	9206      	str	r2, [sp, #24]
 801f6b4:	f10c 0701 	add.w	r7, ip, #1
 801f6b8:	7862      	ldrb	r2, [r4, #1]
 801f6ba:	eb07 272c 	add.w	r7, r7, ip, asr #8
 801f6be:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801f6c2:	eba9 070c 	sub.w	r7, r9, ip
 801f6c6:	eba6 060c 	sub.w	r6, r6, ip
 801f6ca:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801f6ce:	fb13 f902 	smulbb	r9, r3, r2
 801f6d2:	9a06      	ldr	r2, [sp, #24]
 801f6d4:	b2f6      	uxtb	r6, r6
 801f6d6:	fb07 ee0c 	mla	lr, r7, ip, lr
 801f6da:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801f6de:	fb13 f302 	smulbb	r3, r3, r2
 801f6e2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f6e6:	fb07 990c 	mla	r9, r7, ip, r9
 801f6ea:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801f6ee:	fb07 330c 	mla	r3, r7, ip, r3
 801f6f2:	fb9e fef6 	sdiv	lr, lr, r6
 801f6f6:	fb99 f9f6 	sdiv	r9, r9, r6
 801f6fa:	fb93 f3f6 	sdiv	r3, r3, r6
 801f6fe:	f805 ec04 	strb.w	lr, [r5, #-4]
 801f702:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f706:	f805 3c02 	strb.w	r3, [r5, #-2]
 801f70a:	e705      	b.n	801f518 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f70c:	b009      	add	sp, #36	; 0x24
 801f70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f712:	bf00      	nop
 801f714:	2003bd18 	.word	0x2003bd18

0801f718 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f718:	4770      	bx	lr

0801f71a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f71a:	4770      	bx	lr

0801f71c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f71c:	4770      	bx	lr

0801f71e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f71e:	4770      	bx	lr

0801f720 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f720:	4770      	bx	lr

0801f722 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f722:	4770      	bx	lr

0801f724 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f724:	4770      	bx	lr

0801f726 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f726:	4770      	bx	lr

0801f728 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f728:	4770      	bx	lr

0801f72a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f72a:	4770      	bx	lr

0801f72c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f72c:	4770      	bx	lr

0801f72e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f72e:	4770      	bx	lr

0801f730 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f730:	4770      	bx	lr

0801f732 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f732:	4770      	bx	lr

0801f734 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f734:	4770      	bx	lr

0801f736 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f736:	4770      	bx	lr

0801f738 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f738:	4770      	bx	lr

0801f73a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f73a:	4770      	bx	lr

0801f73c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f73c:	4770      	bx	lr

0801f73e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f73e:	4770      	bx	lr

0801f740 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f740:	4770      	bx	lr

0801f742 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f742:	4770      	bx	lr

0801f744 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f744:	4770      	bx	lr

0801f746 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f746:	4770      	bx	lr

0801f748 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f748:	4770      	bx	lr

0801f74a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f74a:	4770      	bx	lr

0801f74c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f74c:	4770      	bx	lr

0801f74e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f74e:	4770      	bx	lr

0801f750 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f754:	b091      	sub	sp, #68	; 0x44
 801f756:	460f      	mov	r7, r1
 801f758:	4614      	mov	r4, r2
 801f75a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 801f75e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801f762:	f1b8 0f00 	cmp.w	r8, #0
 801f766:	d054      	beq.n	801f812 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801f768:	6810      	ldr	r0, [r2, #0]
 801f76a:	ae0c      	add	r6, sp, #48	; 0x30
 801f76c:	6851      	ldr	r1, [r2, #4]
 801f76e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801f944 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 801f772:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801f948 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 801f776:	c603      	stmia	r6!, {r0, r1}
 801f778:	6818      	ldr	r0, [r3, #0]
 801f77a:	ae0e      	add	r6, sp, #56	; 0x38
 801f77c:	6859      	ldr	r1, [r3, #4]
 801f77e:	c603      	stmia	r6!, {r0, r1}
 801f780:	a80c      	add	r0, sp, #48	; 0x30
 801f782:	f7fa f81b 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f786:	4621      	mov	r1, r4
 801f788:	a80e      	add	r0, sp, #56	; 0x38
 801f78a:	f7fa f83f 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f78e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f792:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f796:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f79a:	f8d9 0000 	ldr.w	r0, [r9]
 801f79e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f7a2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801f7a6:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 801f7aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f7ae:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 801f7b2:	440a      	add	r2, r1
 801f7b4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f7b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f7bc:	4413      	add	r3, r2
 801f7be:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f7c2:	6803      	ldr	r3, [r0, #0]
 801f7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7c6:	4798      	blx	r3
 801f7c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f7cc:	d024      	beq.n	801f818 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 801f7ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f7d2:	f8d9 0000 	ldr.w	r0, [r9]
 801f7d6:	d022      	beq.n	801f81e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 801f7d8:	2102      	movs	r1, #2
 801f7da:	f04f 0e00 	mov.w	lr, #0
 801f7de:	f8d0 c000 	ldr.w	ip, [r0]
 801f7e2:	b2b6      	uxth	r6, r6
 801f7e4:	9106      	str	r1, [sp, #24]
 801f7e6:	b2bf      	uxth	r7, r7
 801f7e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801f7ec:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801f7f0:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 801f7f4:	f8ba 1000 	ldrh.w	r1, [sl]
 801f7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801f7fc:	9601      	str	r6, [sp, #4]
 801f7fe:	9700      	str	r7, [sp, #0]
 801f800:	e9cd 5104 	strd	r5, r1, [sp, #16]
 801f804:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f808:	9102      	str	r1, [sp, #8]
 801f80a:	4621      	mov	r1, r4
 801f80c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801f810:	47a8      	blx	r5
 801f812:	b011      	add	sp, #68	; 0x44
 801f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f818:	f010 0f20 	tst.w	r0, #32
 801f81c:	e7d9      	b.n	801f7d2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 801f81e:	6803      	ldr	r3, [r0, #0]
 801f820:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 801f824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f826:	4798      	blx	r3
 801f828:	f8ba c000 	ldrh.w	ip, [sl]
 801f82c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f830:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f834:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f838:	fb0c f606 	mul.w	r6, ip, r6
 801f83c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f840:	fb0c 2303 	mla	r3, ip, r3, r2
 801f844:	ebac 0c07 	sub.w	ip, ip, r7
 801f848:	eba9 0907 	sub.w	r9, r9, r7
 801f84c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f850:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f854:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801f858:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801f85c:	d148      	bne.n	801f8f0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f85e:	2d00      	cmp	r5, #0
 801f860:	d146      	bne.n	801f8f0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f862:	42b0      	cmp	r0, r6
 801f864:	d268      	bcs.n	801f938 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801f866:	eb00 020b 	add.w	r2, r0, fp
 801f86a:	4290      	cmp	r0, r2
 801f86c:	d204      	bcs.n	801f878 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801f86e:	f854 3b04 	ldr.w	r3, [r4], #4
 801f872:	f840 3b04 	str.w	r3, [r0], #4
 801f876:	e7f8      	b.n	801f86a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 801f878:	4460      	add	r0, ip
 801f87a:	444c      	add	r4, r9
 801f87c:	e7f1      	b.n	801f862 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 801f87e:	fb04 f70a 	mul.w	r7, r4, sl
 801f882:	4454      	add	r4, sl
 801f884:	1c7a      	adds	r2, r7, #1
 801f886:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801f88a:	1212      	asrs	r2, r2, #8
 801f88c:	ebaa 0702 	sub.w	r7, sl, r2
 801f890:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 801f894:	1aa4      	subs	r4, r4, r2
 801f896:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f89a:	fb07 fa0a 	mul.w	sl, r7, sl
 801f89e:	b2e4      	uxtb	r4, r4
 801f8a0:	fb05 a202 	mla	r2, r5, r2, sl
 801f8a4:	fa5f fa8e 	uxtb.w	sl, lr
 801f8a8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f8ac:	fb07 fa0a 	mul.w	sl, r7, sl
 801f8b0:	fb07 fe0e 	mul.w	lr, r7, lr
 801f8b4:	fbb2 f2f4 	udiv	r2, r2, r4
 801f8b8:	0412      	lsls	r2, r2, #16
 801f8ba:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801f8be:	4611      	mov	r1, r2
 801f8c0:	b2da      	uxtb	r2, r3
 801f8c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f8c6:	fb05 a202 	mla	r2, r5, r2, sl
 801f8ca:	fb05 e503 	mla	r5, r5, r3, lr
 801f8ce:	fbb2 f2f4 	udiv	r2, r2, r4
 801f8d2:	b2d2      	uxtb	r2, r2
 801f8d4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801f8d8:	fbb5 f4f4 	udiv	r4, r5, r4
 801f8dc:	0224      	lsls	r4, r4, #8
 801f8de:	430a      	orrs	r2, r1
 801f8e0:	b2a4      	uxth	r4, r4
 801f8e2:	4322      	orrs	r2, r4
 801f8e4:	6002      	str	r2, [r0, #0]
 801f8e6:	e025      	b.n	801f934 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801f8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8ea:	4460      	add	r0, ip
 801f8ec:	444b      	add	r3, r9
 801f8ee:	461c      	mov	r4, r3
 801f8f0:	42b0      	cmp	r0, r6
 801f8f2:	d221      	bcs.n	801f938 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801f8f4:	eb00 030b 	add.w	r3, r0, fp
 801f8f8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 801f8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8fe:	4298      	cmp	r0, r3
 801f900:	d2f2      	bcs.n	801f8e8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801f902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f904:	f852 3b04 	ldr.w	r3, [r2], #4
 801f908:	0e1d      	lsrs	r5, r3, #24
 801f90a:	920a      	str	r2, [sp, #40]	; 0x28
 801f90c:	fb05 f408 	mul.w	r4, r5, r8
 801f910:	1c65      	adds	r5, r4, #1
 801f912:	eb05 2524 	add.w	r5, r5, r4, asr #8
 801f916:	122d      	asrs	r5, r5, #8
 801f918:	d00c      	beq.n	801f934 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801f91a:	2dff      	cmp	r5, #255	; 0xff
 801f91c:	b2ec      	uxtb	r4, r5
 801f91e:	d004      	beq.n	801f92a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 801f920:	f8d0 e000 	ldr.w	lr, [r0]
 801f924:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 801f928:	d1a9      	bne.n	801f87e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801f92a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f92e:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 801f932:	6005      	str	r5, [r0, #0]
 801f934:	3004      	adds	r0, #4
 801f936:	e7e1      	b.n	801f8fc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 801f938:	4b02      	ldr	r3, [pc, #8]	; (801f944 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 801f93a:	6818      	ldr	r0, [r3, #0]
 801f93c:	6803      	ldr	r3, [r0, #0]
 801f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f940:	4798      	blx	r3
 801f942:	e766      	b.n	801f812 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801f944:	2003bd08 	.word	0x2003bd08
 801f948:	2003bd02 	.word	0x2003bd02

0801f94c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f94c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f950:	2300      	movs	r3, #0
 801f952:	9300      	str	r3, [sp, #0]
 801f954:	4b3e      	ldr	r3, [pc, #248]	; (801fa50 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f956:	781b      	ldrb	r3, [r3, #0]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d137      	bne.n	801f9cc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f95c:	4a3d      	ldr	r2, [pc, #244]	; (801fa54 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f95e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f962:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f966:	2b00      	cmp	r3, #0
 801f968:	d132      	bne.n	801f9d0 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f96a:	4b3b      	ldr	r3, [pc, #236]	; (801fa58 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f970:	ac02      	add	r4, sp, #8
 801f972:	6808      	ldr	r0, [r1, #0]
 801f974:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f978:	ab02      	add	r3, sp, #8
 801f97a:	6849      	ldr	r1, [r1, #4]
 801f97c:	4d37      	ldr	r5, [pc, #220]	; (801fa5c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801f97e:	c303      	stmia	r3!, {r0, r1}
 801f980:	4669      	mov	r1, sp
 801f982:	4620      	mov	r0, r4
 801f984:	f7f9 ff42 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f988:	4668      	mov	r0, sp
 801f98a:	f7f9 ff17 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f98e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f992:	f8bd 2000 	ldrh.w	r2, [sp]
 801f996:	462f      	mov	r7, r5
 801f998:	6828      	ldr	r0, [r5, #0]
 801f99a:	4413      	add	r3, r2
 801f99c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f9a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f9a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f9a8:	4413      	add	r3, r2
 801f9aa:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f9ae:	6803      	ldr	r3, [r0, #0]
 801f9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f9b2:	4798      	blx	r3
 801f9b4:	f010 0f01 	tst.w	r0, #1
 801f9b8:	d00c      	beq.n	801f9d4 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f9ba:	6828      	ldr	r0, [r5, #0]
 801f9bc:	6803      	ldr	r3, [r0, #0]
 801f9be:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f9c4:	4798      	blx	r3
 801f9c6:	b004      	add	sp, #16
 801f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f9cc:	4a22      	ldr	r2, [pc, #136]	; (801fa58 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f9ce:	e7c6      	b.n	801f95e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f9d0:	4b20      	ldr	r3, [pc, #128]	; (801fa54 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f9d2:	e7cb      	b.n	801f96c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f9d4:	6828      	ldr	r0, [r5, #0]
 801f9d6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f9da:	6803      	ldr	r3, [r0, #0]
 801f9dc:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f9e2:	4798      	blx	r3
 801f9e4:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801f9e8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f9ec:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801f9f0:	fb15 3404 	smlabb	r4, r5, r4, r3
 801f9f4:	eba5 0508 	sub.w	r5, r5, r8
 801f9f8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801f9fc:	6838      	ldr	r0, [r7, #0]
 801f9fe:	00ad      	lsls	r5, r5, #2
 801fa00:	6803      	ldr	r3, [r0, #0]
 801fa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa04:	4798      	blx	r3
 801fa06:	4b13      	ldr	r3, [pc, #76]	; (801fa54 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fa08:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fa0c:	881a      	ldrh	r2, [r3, #0]
 801fa0e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fa12:	4356      	muls	r6, r2
 801fa14:	fb02 1303 	mla	r3, r2, r3, r1
 801fa18:	eba2 0208 	sub.w	r2, r2, r8
 801fa1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fa20:	0092      	lsls	r2, r2, #2
 801fa22:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801fa26:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801fa2a:	42b0      	cmp	r0, r6
 801fa2c:	d20b      	bcs.n	801fa46 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801fa2e:	eb00 0c03 	add.w	ip, r0, r3
 801fa32:	4560      	cmp	r0, ip
 801fa34:	d204      	bcs.n	801fa40 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 801fa36:	f854 1b04 	ldr.w	r1, [r4], #4
 801fa3a:	f840 1b04 	str.w	r1, [r0], #4
 801fa3e:	e7f8      	b.n	801fa32 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 801fa40:	4410      	add	r0, r2
 801fa42:	442c      	add	r4, r5
 801fa44:	e7f1      	b.n	801fa2a <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801fa46:	6838      	ldr	r0, [r7, #0]
 801fa48:	6803      	ldr	r3, [r0, #0]
 801fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa4c:	4798      	blx	r3
 801fa4e:	e7ba      	b.n	801f9c6 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801fa50:	2003bd00 	.word	0x2003bd00
 801fa54:	2003bd02 	.word	0x2003bd02
 801fa58:	2003bd04 	.word	0x2003bd04
 801fa5c:	2003bd08 	.word	0x2003bd08

0801fa60 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa64:	b089      	sub	sp, #36	; 0x24
 801fa66:	4607      	mov	r7, r0
 801fa68:	4689      	mov	r9, r1
 801fa6a:	4692      	mov	sl, r2
 801fa6c:	ac08      	add	r4, sp, #32
 801fa6e:	461e      	mov	r6, r3
 801fa70:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801fa74:	4620      	mov	r0, r4
 801fa76:	f7fd fa2b 	bl	801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fa7a:	683b      	ldr	r3, [r7, #0]
 801fa7c:	4605      	mov	r5, r0
 801fa7e:	4620      	mov	r0, r4
 801fa80:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801fa84:	f7fd f984 	bl	801cd90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fa88:	4683      	mov	fp, r0
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	f7fd f9b4 	bl	801cdf8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fa90:	4653      	mov	r3, sl
 801fa92:	464a      	mov	r2, r9
 801fa94:	4639      	mov	r1, r7
 801fa96:	9500      	str	r5, [sp, #0]
 801fa98:	e9cd b001 	strd	fp, r0, [sp, #4]
 801fa9c:	a806      	add	r0, sp, #24
 801fa9e:	47c0      	blx	r8
 801faa0:	a906      	add	r1, sp, #24
 801faa2:	4630      	mov	r0, r6
 801faa4:	f7fd f858 	bl	801cb58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801faa8:	4628      	mov	r0, r5
 801faaa:	b009      	add	sp, #36	; 0x24
 801faac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fab0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fab0:	b510      	push	{r4, lr}
 801fab2:	4604      	mov	r4, r0
 801fab4:	2104      	movs	r1, #4
 801fab6:	f008 fe99 	bl	80287ec <_ZdlPvj>
 801faba:	4620      	mov	r0, r4
 801fabc:	bd10      	pop	{r4, pc}

0801fabe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fabe:	b510      	push	{r4, lr}
 801fac0:	4604      	mov	r4, r0
 801fac2:	2104      	movs	r1, #4
 801fac4:	f008 fe92 	bl	80287ec <_ZdlPvj>
 801fac8:	4620      	mov	r0, r4
 801faca:	bd10      	pop	{r4, pc}

0801facc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801facc:	b510      	push	{r4, lr}
 801face:	4604      	mov	r4, r0
 801fad0:	2104      	movs	r1, #4
 801fad2:	f008 fe8b 	bl	80287ec <_ZdlPvj>
 801fad6:	4620      	mov	r0, r4
 801fad8:	bd10      	pop	{r4, pc}

0801fada <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801fada:	b510      	push	{r4, lr}
 801fadc:	4604      	mov	r4, r0
 801fade:	2104      	movs	r1, #4
 801fae0:	f008 fe84 	bl	80287ec <_ZdlPvj>
 801fae4:	4620      	mov	r0, r4
 801fae6:	bd10      	pop	{r4, pc}

0801fae8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fae8:	b510      	push	{r4, lr}
 801faea:	4604      	mov	r4, r0
 801faec:	2104      	movs	r1, #4
 801faee:	f008 fe7d 	bl	80287ec <_ZdlPvj>
 801faf2:	4620      	mov	r0, r4
 801faf4:	bd10      	pop	{r4, pc}

0801faf6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801faf6:	b510      	push	{r4, lr}
 801faf8:	4604      	mov	r4, r0
 801fafa:	2104      	movs	r1, #4
 801fafc:	f008 fe76 	bl	80287ec <_ZdlPvj>
 801fb00:	4620      	mov	r0, r4
 801fb02:	bd10      	pop	{r4, pc}

0801fb04 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fb04:	b510      	push	{r4, lr}
 801fb06:	4604      	mov	r4, r0
 801fb08:	2104      	movs	r1, #4
 801fb0a:	f008 fe6f 	bl	80287ec <_ZdlPvj>
 801fb0e:	4620      	mov	r0, r4
 801fb10:	bd10      	pop	{r4, pc}

0801fb12 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fb12:	b510      	push	{r4, lr}
 801fb14:	4604      	mov	r4, r0
 801fb16:	2104      	movs	r1, #4
 801fb18:	f008 fe68 	bl	80287ec <_ZdlPvj>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	bd10      	pop	{r4, pc}

0801fb20 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fb20:	b510      	push	{r4, lr}
 801fb22:	4604      	mov	r4, r0
 801fb24:	2104      	movs	r1, #4
 801fb26:	f008 fe61 	bl	80287ec <_ZdlPvj>
 801fb2a:	4620      	mov	r0, r4
 801fb2c:	bd10      	pop	{r4, pc}

0801fb2e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fb2e:	b510      	push	{r4, lr}
 801fb30:	4604      	mov	r4, r0
 801fb32:	2104      	movs	r1, #4
 801fb34:	f008 fe5a 	bl	80287ec <_ZdlPvj>
 801fb38:	4620      	mov	r0, r4
 801fb3a:	bd10      	pop	{r4, pc}

0801fb3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fb3c:	b510      	push	{r4, lr}
 801fb3e:	4604      	mov	r4, r0
 801fb40:	2104      	movs	r1, #4
 801fb42:	f008 fe53 	bl	80287ec <_ZdlPvj>
 801fb46:	4620      	mov	r0, r4
 801fb48:	bd10      	pop	{r4, pc}

0801fb4a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fb4a:	b510      	push	{r4, lr}
 801fb4c:	4604      	mov	r4, r0
 801fb4e:	2104      	movs	r1, #4
 801fb50:	f008 fe4c 	bl	80287ec <_ZdlPvj>
 801fb54:	4620      	mov	r0, r4
 801fb56:	bd10      	pop	{r4, pc}

0801fb58 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fb58:	b510      	push	{r4, lr}
 801fb5a:	4604      	mov	r4, r0
 801fb5c:	2104      	movs	r1, #4
 801fb5e:	f008 fe45 	bl	80287ec <_ZdlPvj>
 801fb62:	4620      	mov	r0, r4
 801fb64:	bd10      	pop	{r4, pc}

0801fb66 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fb66:	b510      	push	{r4, lr}
 801fb68:	4604      	mov	r4, r0
 801fb6a:	2104      	movs	r1, #4
 801fb6c:	f008 fe3e 	bl	80287ec <_ZdlPvj>
 801fb70:	4620      	mov	r0, r4
 801fb72:	bd10      	pop	{r4, pc}

0801fb74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fb74:	b510      	push	{r4, lr}
 801fb76:	4604      	mov	r4, r0
 801fb78:	2104      	movs	r1, #4
 801fb7a:	f008 fe37 	bl	80287ec <_ZdlPvj>
 801fb7e:	4620      	mov	r0, r4
 801fb80:	bd10      	pop	{r4, pc}

0801fb82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801fb82:	b510      	push	{r4, lr}
 801fb84:	4604      	mov	r4, r0
 801fb86:	2104      	movs	r1, #4
 801fb88:	f008 fe30 	bl	80287ec <_ZdlPvj>
 801fb8c:	4620      	mov	r0, r4
 801fb8e:	bd10      	pop	{r4, pc}

0801fb90 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fb90:	b510      	push	{r4, lr}
 801fb92:	4604      	mov	r4, r0
 801fb94:	2104      	movs	r1, #4
 801fb96:	f008 fe29 	bl	80287ec <_ZdlPvj>
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	bd10      	pop	{r4, pc}

0801fb9e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fb9e:	b510      	push	{r4, lr}
 801fba0:	4604      	mov	r4, r0
 801fba2:	2104      	movs	r1, #4
 801fba4:	f008 fe22 	bl	80287ec <_ZdlPvj>
 801fba8:	4620      	mov	r0, r4
 801fbaa:	bd10      	pop	{r4, pc}

0801fbac <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fbac:	b510      	push	{r4, lr}
 801fbae:	4604      	mov	r4, r0
 801fbb0:	2104      	movs	r1, #4
 801fbb2:	f008 fe1b 	bl	80287ec <_ZdlPvj>
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	bd10      	pop	{r4, pc}

0801fbba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fbba:	b510      	push	{r4, lr}
 801fbbc:	4604      	mov	r4, r0
 801fbbe:	2104      	movs	r1, #4
 801fbc0:	f008 fe14 	bl	80287ec <_ZdlPvj>
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	bd10      	pop	{r4, pc}

0801fbc8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fbc8:	b510      	push	{r4, lr}
 801fbca:	4604      	mov	r4, r0
 801fbcc:	2104      	movs	r1, #4
 801fbce:	f008 fe0d 	bl	80287ec <_ZdlPvj>
 801fbd2:	4620      	mov	r0, r4
 801fbd4:	bd10      	pop	{r4, pc}

0801fbd6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fbd6:	b510      	push	{r4, lr}
 801fbd8:	4604      	mov	r4, r0
 801fbda:	2104      	movs	r1, #4
 801fbdc:	f008 fe06 	bl	80287ec <_ZdlPvj>
 801fbe0:	4620      	mov	r0, r4
 801fbe2:	bd10      	pop	{r4, pc}

0801fbe4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fbe4:	b510      	push	{r4, lr}
 801fbe6:	4604      	mov	r4, r0
 801fbe8:	2104      	movs	r1, #4
 801fbea:	f008 fdff 	bl	80287ec <_ZdlPvj>
 801fbee:	4620      	mov	r0, r4
 801fbf0:	bd10      	pop	{r4, pc}

0801fbf2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fbf2:	b510      	push	{r4, lr}
 801fbf4:	4604      	mov	r4, r0
 801fbf6:	2104      	movs	r1, #4
 801fbf8:	f008 fdf8 	bl	80287ec <_ZdlPvj>
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	bd10      	pop	{r4, pc}

0801fc00 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801fc00:	b510      	push	{r4, lr}
 801fc02:	4604      	mov	r4, r0
 801fc04:	2104      	movs	r1, #4
 801fc06:	f008 fdf1 	bl	80287ec <_ZdlPvj>
 801fc0a:	4620      	mov	r0, r4
 801fc0c:	bd10      	pop	{r4, pc}

0801fc0e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801fc0e:	b510      	push	{r4, lr}
 801fc10:	4604      	mov	r4, r0
 801fc12:	2104      	movs	r1, #4
 801fc14:	f008 fdea 	bl	80287ec <_ZdlPvj>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	bd10      	pop	{r4, pc}

0801fc1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fc1c:	b510      	push	{r4, lr}
 801fc1e:	4604      	mov	r4, r0
 801fc20:	2104      	movs	r1, #4
 801fc22:	f008 fde3 	bl	80287ec <_ZdlPvj>
 801fc26:	4620      	mov	r0, r4
 801fc28:	bd10      	pop	{r4, pc}

0801fc2a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fc2a:	b510      	push	{r4, lr}
 801fc2c:	4604      	mov	r4, r0
 801fc2e:	2104      	movs	r1, #4
 801fc30:	f008 fddc 	bl	80287ec <_ZdlPvj>
 801fc34:	4620      	mov	r0, r4
 801fc36:	bd10      	pop	{r4, pc}

0801fc38 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801fc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc3a:	4606      	mov	r6, r0
 801fc3c:	b087      	sub	sp, #28
 801fc3e:	4615      	mov	r5, r2
 801fc40:	461f      	mov	r7, r3
 801fc42:	b353      	cbz	r3, 801fc9a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fc44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	dd26      	ble.n	801fc9a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fc4c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	dd22      	ble.n	801fc9a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fc54:	6808      	ldr	r0, [r1, #0]
 801fc56:	aa04      	add	r2, sp, #16
 801fc58:	6849      	ldr	r1, [r1, #4]
 801fc5a:	4c1b      	ldr	r4, [pc, #108]	; (801fcc8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801fc5c:	c203      	stmia	r2!, {r0, r1}
 801fc5e:	a804      	add	r0, sp, #16
 801fc60:	f7f9 fdac 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc64:	6820      	ldr	r0, [r4, #0]
 801fc66:	6803      	ldr	r3, [r0, #0]
 801fc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc6a:	4798      	blx	r3
 801fc6c:	2fff      	cmp	r7, #255	; 0xff
 801fc6e:	d016      	beq.n	801fc9e <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801fc70:	f010 0f08 	tst.w	r0, #8
 801fc74:	6820      	ldr	r0, [r4, #0]
 801fc76:	d015      	beq.n	801fca4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801fc78:	2400      	movs	r4, #0
 801fc7a:	6801      	ldr	r1, [r0, #0]
 801fc7c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fc80:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fc84:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801fc88:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fc8c:	9401      	str	r4, [sp, #4]
 801fc8e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801fc92:	9400      	str	r4, [sp, #0]
 801fc94:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801fc96:	4629      	mov	r1, r5
 801fc98:	47a0      	blx	r4
 801fc9a:	b007      	add	sp, #28
 801fc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc9e:	f010 0f02 	tst.w	r0, #2
 801fca2:	e7e7      	b.n	801fc74 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801fca4:	6803      	ldr	r3, [r0, #0]
 801fca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fca8:	4798      	blx	r3
 801fcaa:	4b08      	ldr	r3, [pc, #32]	; (801fccc <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801fcac:	4601      	mov	r1, r0
 801fcae:	4630      	mov	r0, r6
 801fcb0:	881a      	ldrh	r2, [r3, #0]
 801fcb2:	6833      	ldr	r3, [r6, #0]
 801fcb4:	e9cd 5700 	strd	r5, r7, [sp]
 801fcb8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801fcba:	ab04      	add	r3, sp, #16
 801fcbc:	47a8      	blx	r5
 801fcbe:	6820      	ldr	r0, [r4, #0]
 801fcc0:	6803      	ldr	r3, [r0, #0]
 801fcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcc4:	4798      	blx	r3
 801fcc6:	e7e8      	b.n	801fc9a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fcc8:	2003bd08 	.word	0x2003bd08
 801fccc:	2003bd02 	.word	0x2003bd02

0801fcd0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd4:	b08d      	sub	sp, #52	; 0x34
 801fcd6:	469b      	mov	fp, r3
 801fcd8:	4617      	mov	r7, r2
 801fcda:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fcde:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 801fce2:	4605      	mov	r5, r0
 801fce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fce8:	a806      	add	r0, sp, #24
 801fcea:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 801fcee:	460c      	mov	r4, r1
 801fcf0:	4659      	mov	r1, fp
 801fcf2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801fcf6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fcfa:	f8ad a01c 	strh.w	sl, [sp, #28]
 801fcfe:	f8ad 601e 	strh.w	r6, [sp, #30]
 801fd02:	f7f5 f9ef 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801fd06:	4639      	mov	r1, r7
 801fd08:	a806      	add	r0, sp, #24
 801fd0a:	f7f5 f9eb 	bl	80150e4 <_ZN8touchgfx4RectaNERKS0_>
 801fd0e:	4b74      	ldr	r3, [pc, #464]	; (801fee0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 801fd10:	f8b3 9000 	ldrh.w	r9, [r3]
 801fd14:	4b73      	ldr	r3, [pc, #460]	; (801fee4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801fd16:	fa0f f289 	sxth.w	r2, r9
 801fd1a:	8819      	ldrh	r1, [r3, #0]
 801fd1c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801fd20:	b208      	sxth	r0, r1
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	da07      	bge.n	801fd36 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801fd26:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801fd2a:	443b      	add	r3, r7
 801fd2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fd30:	2300      	movs	r3, #0
 801fd32:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fd36:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801fd3a:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801fd3e:	1ad2      	subs	r2, r2, r3
 801fd40:	4297      	cmp	r7, r2
 801fd42:	bfc4      	itt	gt
 801fd44:	eba9 0203 	subgt.w	r2, r9, r3
 801fd48:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 801fd4c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801fd50:	2a00      	cmp	r2, #0
 801fd52:	da07      	bge.n	801fd64 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 801fd54:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 801fd58:	443a      	add	r2, r7
 801fd5a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801fd5e:	2200      	movs	r2, #0
 801fd60:	f8ad 201a 	strh.w	r2, [sp, #26]
 801fd64:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801fd68:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 801fd6c:	1a80      	subs	r0, r0, r2
 801fd6e:	4287      	cmp	r7, r0
 801fd70:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801fd74:	bfc4      	itt	gt
 801fd76:	1a88      	subgt	r0, r1, r2
 801fd78:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 801fd7c:	485a      	ldr	r0, [pc, #360]	; (801fee8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801fd7e:	7800      	ldrb	r0, [r0, #0]
 801fd80:	2800      	cmp	r0, #0
 801fd82:	f040 8082 	bne.w	801fe8a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ba>
 801fd86:	454f      	cmp	r7, r9
 801fd88:	bf14      	ite	ne
 801fd8a:	f04f 0900 	movne.w	r9, #0
 801fd8e:	f04f 0901 	moveq.w	r9, #1
 801fd92:	2f00      	cmp	r7, #0
 801fd94:	dd7d      	ble.n	801fe92 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 801fd96:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 801fd9a:	f1b8 0f00 	cmp.w	r8, #0
 801fd9e:	dd78      	ble.n	801fe92 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 801fda0:	f8bb 1000 	ldrh.w	r1, [fp]
 801fda4:	a808      	add	r0, sp, #32
 801fda6:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 801fdaa:	1a5b      	subs	r3, r3, r1
 801fdac:	a90a      	add	r1, sp, #40	; 0x28
 801fdae:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
 801fdb2:	b21b      	sxth	r3, r3
 801fdb4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801fdb8:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 801fdbc:	9302      	str	r3, [sp, #8]
 801fdbe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801fdc2:	1ad2      	subs	r2, r2, r3
 801fdc4:	b213      	sxth	r3, r2
 801fdc6:	9303      	str	r3, [sp, #12]
 801fdc8:	9b02      	ldr	r3, [sp, #8]
 801fdca:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fdce:	9b03      	ldr	r3, [sp, #12]
 801fdd0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	930a      	str	r3, [sp, #40]	; 0x28
 801fdd8:	f7f9 fd18 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fddc:	a806      	add	r0, sp, #24
 801fdde:	f7f9 fced 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fde2:	a80a      	add	r0, sp, #40	; 0x28
 801fde4:	f7f9 fcea 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fde8:	4b40      	ldr	r3, [pc, #256]	; (801feec <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801fdea:	4620      	mov	r0, r4
 801fdec:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801fdf0:	881a      	ldrh	r2, [r3, #0]
 801fdf2:	6823      	ldr	r3, [r4, #0]
 801fdf4:	9205      	str	r2, [sp, #20]
 801fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdf8:	4798      	blx	r3
 801fdfa:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 801fdfe:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801fe02:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 801fe06:	fb1a 3304 	smlabb	r3, sl, r4, r3
 801fe0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fe0c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801fe10:	4b37      	ldr	r3, [pc, #220]	; (801fef0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801fe12:	6818      	ldr	r0, [r3, #0]
 801fe14:	9304      	str	r3, [sp, #16]
 801fe16:	6801      	ldr	r1, [r0, #0]
 801fe18:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801fe1a:	4788      	blx	r1
 801fe1c:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801fe20:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801fe24:	fb0b 1606 	mla	r6, fp, r6, r1
 801fe28:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 801fe2c:	9301      	str	r3, [sp, #4]
 801fe2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801fe32:	f1b9 0f00 	cmp.w	r9, #0
 801fe36:	d135      	bne.n	801fea4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>
 801fe38:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fe3c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801fe40:	f04f 0900 	mov.w	r9, #0
 801fe44:	ebaa 0a03 	sub.w	sl, sl, r3
 801fe48:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801fe4c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 801fef0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>
 801fe50:	9304      	str	r3, [sp, #16]
 801fe52:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801fe56:	454b      	cmp	r3, r9
 801fe58:	dd32      	ble.n	801fec0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801fe5a:	f8da 0000 	ldr.w	r0, [sl]
 801fe5e:	4621      	mov	r1, r4
 801fe60:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801fe64:	6802      	ldr	r2, [r0, #0]
 801fe66:	009b      	lsls	r3, r3, #2
 801fe68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801fe6a:	4616      	mov	r6, r2
 801fe6c:	9a01      	ldr	r2, [sp, #4]
 801fe6e:	47b0      	blx	r6
 801fe70:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801fe74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fe78:	4294      	cmp	r4, r2
 801fe7a:	d229      	bcs.n	801fed0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>
 801fe7c:	f854 3b04 	ldr.w	r3, [r4], #4
 801fe80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801fe84:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe88:	e7f6      	b.n	801fe78 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801fe8a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801fe8e:	4589      	cmp	r9, r1
 801fe90:	e77a      	b.n	801fd88 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801fe92:	2300      	movs	r3, #0
 801fe94:	802b      	strh	r3, [r5, #0]
 801fe96:	806b      	strh	r3, [r5, #2]
 801fe98:	80ab      	strh	r3, [r5, #4]
 801fe9a:	80eb      	strh	r3, [r5, #6]
 801fe9c:	4628      	mov	r0, r5
 801fe9e:	b00d      	add	sp, #52	; 0x34
 801fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea4:	4592      	cmp	sl, r2
 801fea6:	d1c7      	bne.n	801fe38 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x168>
 801fea8:	6818      	ldr	r0, [r3, #0]
 801feaa:	4621      	mov	r1, r4
 801feac:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801feb0:	6802      	ldr	r2, [r0, #0]
 801feb2:	fb0b f303 	mul.w	r3, fp, r3
 801feb6:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801feba:	009b      	lsls	r3, r3, #2
 801febc:	9a01      	ldr	r2, [sp, #4]
 801febe:	47c8      	blx	r9
 801fec0:	9b02      	ldr	r3, [sp, #8]
 801fec2:	80af      	strh	r7, [r5, #4]
 801fec4:	802b      	strh	r3, [r5, #0]
 801fec6:	9b03      	ldr	r3, [sp, #12]
 801fec8:	f8a5 8006 	strh.w	r8, [r5, #6]
 801fecc:	806b      	strh	r3, [r5, #2]
 801fece:	e7e5      	b.n	801fe9c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 801fed0:	9b01      	ldr	r3, [sp, #4]
 801fed2:	f109 0901 	add.w	r9, r9, #1
 801fed6:	445b      	add	r3, fp
 801fed8:	9301      	str	r3, [sp, #4]
 801feda:	9b04      	ldr	r3, [sp, #16]
 801fedc:	441c      	add	r4, r3
 801fede:	e7b8      	b.n	801fe52 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x182>
 801fee0:	2003bcfc 	.word	0x2003bcfc
 801fee4:	2003bcfe 	.word	0x2003bcfe
 801fee8:	2003bd00 	.word	0x2003bd00
 801feec:	2003bd02 	.word	0x2003bd02
 801fef0:	2003bd08 	.word	0x2003bd08

0801fef4 <_ZN8touchgfx8LCD32bppC1Ev>:
 801fef4:	2200      	movs	r2, #0
 801fef6:	4910      	ldr	r1, [pc, #64]	; (801ff38 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 801fef8:	6042      	str	r2, [r0, #4]
 801fefa:	6001      	str	r1, [r0, #0]
 801fefc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ff00:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ff04:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ff08:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ff0c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ff10:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ff14:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ff18:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ff1c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ff20:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ff24:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801ff28:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801ff2c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801ff30:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801ff34:	4770      	bx	lr
 801ff36:	bf00      	nop
 801ff38:	0802d634 	.word	0x0802d634

0801ff3c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 801ff3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff40:	4604      	mov	r4, r0
 801ff42:	b08f      	sub	sp, #60	; 0x3c
 801ff44:	460d      	mov	r5, r1
 801ff46:	461e      	mov	r6, r3
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d052      	beq.n	801fff2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 801ff4c:	6808      	ldr	r0, [r1, #0]
 801ff4e:	ab0a      	add	r3, sp, #40	; 0x28
 801ff50:	6849      	ldr	r1, [r1, #4]
 801ff52:	4f70      	ldr	r7, [pc, #448]	; (8020114 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 801ff54:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8020118 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 801ff58:	c303      	stmia	r3!, {r0, r1}
 801ff5a:	6810      	ldr	r0, [r2, #0]
 801ff5c:	ab0c      	add	r3, sp, #48	; 0x30
 801ff5e:	6851      	ldr	r1, [r2, #4]
 801ff60:	c303      	stmia	r3!, {r0, r1}
 801ff62:	a80a      	add	r0, sp, #40	; 0x28
 801ff64:	f7f9 fc2a 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff68:	4629      	mov	r1, r5
 801ff6a:	a80c      	add	r0, sp, #48	; 0x30
 801ff6c:	f7f9 fc4e 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff70:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ff74:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ff78:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ff7c:	6838      	ldr	r0, [r7, #0]
 801ff7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ff82:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801ff86:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 801ff8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ff8e:	440c      	add	r4, r1
 801ff90:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ff94:	440a      	add	r2, r1
 801ff96:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ff9a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ff9e:	4413      	add	r3, r2
 801ffa0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ffa4:	6803      	ldr	r3, [r0, #0]
 801ffa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffa8:	4798      	blx	r3
 801ffaa:	2eff      	cmp	r6, #255	; 0xff
 801ffac:	d024      	beq.n	801fff8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 801ffae:	f010 0f04 	tst.w	r0, #4
 801ffb2:	6838      	ldr	r0, [r7, #0]
 801ffb4:	d023      	beq.n	801fffe <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 801ffb6:	2100      	movs	r1, #0
 801ffb8:	f04f 0c02 	mov.w	ip, #2
 801ffbc:	6807      	ldr	r7, [r0, #0]
 801ffbe:	b2ad      	uxth	r5, r5
 801ffc0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ffc4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ffc8:	e9cd c107 	strd	ip, r1, [sp, #28]
 801ffcc:	f04f 0c01 	mov.w	ip, #1
 801ffd0:	f8cd c018 	str.w	ip, [sp, #24]
 801ffd4:	f8b9 c000 	ldrh.w	ip, [r9]
 801ffd8:	9603      	str	r6, [sp, #12]
 801ffda:	9501      	str	r5, [sp, #4]
 801ffdc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801ffe0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ffe4:	9102      	str	r1, [sp, #8]
 801ffe6:	fa1f f188 	uxth.w	r1, r8
 801ffea:	9100      	str	r1, [sp, #0]
 801ffec:	4621      	mov	r1, r4
 801ffee:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 801fff0:	47a8      	blx	r5
 801fff2:	b00f      	add	sp, #60	; 0x3c
 801fff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fff8:	f010 0f01 	tst.w	r0, #1
 801fffc:	e7d9      	b.n	801ffb2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 801fffe:	6803      	ldr	r3, [r0, #0]
 8020000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020002:	4798      	blx	r3
 8020004:	f8b9 3000 	ldrh.w	r3, [r9]
 8020008:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802000c:	2eff      	cmp	r6, #255	; 0xff
 802000e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8020012:	fb03 f505 	mul.w	r5, r3, r5
 8020016:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 802001a:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 802001e:	fb03 1202 	mla	r2, r3, r2, r1
 8020022:	eba3 0308 	sub.w	r3, r3, r8
 8020026:	eba7 0708 	sub.w	r7, r7, r8
 802002a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802002e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020032:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8020036:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802003a:	d04c      	beq.n	80200d6 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 802003c:	42a8      	cmp	r0, r5
 802003e:	d263      	bcs.n	8020108 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8020040:	eb00 0e0c 	add.w	lr, r0, ip
 8020044:	4621      	mov	r1, r4
 8020046:	4570      	cmp	r0, lr
 8020048:	460c      	mov	r4, r1
 802004a:	f101 0103 	add.w	r1, r1, #3
 802004e:	d23d      	bcs.n	80200cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8020050:	6802      	ldr	r2, [r0, #0]
 8020052:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8020056:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802005a:	fb1b fb06 	smulbb	fp, fp, r6
 802005e:	fa5f fa82 	uxtb.w	sl, r2
 8020062:	fb06 f809 	mul.w	r8, r6, r9
 8020066:	f108 0401 	add.w	r4, r8, #1
 802006a:	eb04 2428 	add.w	r4, r4, r8, asr #8
 802006e:	eb06 0809 	add.w	r8, r6, r9
 8020072:	1224      	asrs	r4, r4, #8
 8020074:	eba9 0904 	sub.w	r9, r9, r4
 8020078:	eba8 0804 	sub.w	r8, r8, r4
 802007c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8020080:	fb09 fa0a 	mul.w	sl, r9, sl
 8020084:	fa5f f888 	uxtb.w	r8, r8
 8020088:	fb04 a406 	mla	r4, r4, r6, sl
 802008c:	fbb4 f4f8 	udiv	r4, r4, r8
 8020090:	b2e4      	uxtb	r4, r4
 8020092:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8020096:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802009a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802009e:	fb09 b404 	mla	r4, r9, r4, fp
 80200a2:	fbb4 f4f8 	udiv	r4, r4, r8
 80200a6:	0424      	lsls	r4, r4, #16
 80200a8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80200ac:	ea4a 0404 	orr.w	r4, sl, r4
 80200b0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 80200b4:	fb1a fa06 	smulbb	sl, sl, r6
 80200b8:	fb09 a202 	mla	r2, r9, r2, sl
 80200bc:	fbb2 f2f8 	udiv	r2, r2, r8
 80200c0:	0212      	lsls	r2, r2, #8
 80200c2:	b292      	uxth	r2, r2
 80200c4:	4322      	orrs	r2, r4
 80200c6:	f840 2b04 	str.w	r2, [r0], #4
 80200ca:	e7bc      	b.n	8020046 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 80200cc:	4418      	add	r0, r3
 80200ce:	443c      	add	r4, r7
 80200d0:	e7b4      	b.n	802003c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 80200d2:	4418      	add	r0, r3
 80200d4:	443c      	add	r4, r7
 80200d6:	42a8      	cmp	r0, r5
 80200d8:	d216      	bcs.n	8020108 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 80200da:	eb00 060c 	add.w	r6, r0, ip
 80200de:	4621      	mov	r1, r4
 80200e0:	42b0      	cmp	r0, r6
 80200e2:	460c      	mov	r4, r1
 80200e4:	f101 0103 	add.w	r1, r1, #3
 80200e8:	d2f3      	bcs.n	80200d2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 80200ea:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80200ee:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 80200f2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80200f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80200fa:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 80200fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8020102:	f840 2b04 	str.w	r2, [r0], #4
 8020106:	e7eb      	b.n	80200e0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8020108:	4b02      	ldr	r3, [pc, #8]	; (8020114 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 802010a:	6818      	ldr	r0, [r3, #0]
 802010c:	6803      	ldr	r3, [r0, #0]
 802010e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020110:	4798      	blx	r3
 8020112:	e76e      	b.n	801fff2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8020114:	2003bd08 	.word	0x2003bd08
 8020118:	2003bd02 	.word	0x2003bd02

0802011c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 802011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020120:	4607      	mov	r7, r0
 8020122:	b091      	sub	sp, #68	; 0x44
 8020124:	460c      	mov	r4, r1
 8020126:	4698      	mov	r8, r3
 8020128:	2b00      	cmp	r3, #0
 802012a:	d04f      	beq.n	80201cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802012c:	6808      	ldr	r0, [r1, #0]
 802012e:	ab0c      	add	r3, sp, #48	; 0x30
 8020130:	6849      	ldr	r1, [r1, #4]
 8020132:	4e7e      	ldr	r6, [pc, #504]	; (802032c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8020134:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8020330 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8020138:	c303      	stmia	r3!, {r0, r1}
 802013a:	6810      	ldr	r0, [r2, #0]
 802013c:	ab0e      	add	r3, sp, #56	; 0x38
 802013e:	6851      	ldr	r1, [r2, #4]
 8020140:	c303      	stmia	r3!, {r0, r1}
 8020142:	a80c      	add	r0, sp, #48	; 0x30
 8020144:	f7f9 fb3a 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020148:	4621      	mov	r1, r4
 802014a:	a80e      	add	r0, sp, #56	; 0x38
 802014c:	f7f9 fb5e 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020150:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020154:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020158:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802015c:	6830      	ldr	r0, [r6, #0]
 802015e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020162:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020166:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802016a:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802016e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020172:	440a      	add	r2, r1
 8020174:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020178:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802017c:	4413      	add	r3, r2
 802017e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020182:	6803      	ldr	r3, [r0, #0]
 8020184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020186:	4798      	blx	r3
 8020188:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802018c:	d021      	beq.n	80201d2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802018e:	f010 0f04 	tst.w	r0, #4
 8020192:	6830      	ldr	r0, [r6, #0]
 8020194:	d020      	beq.n	80201d8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8020196:	2100      	movs	r1, #0
 8020198:	f04f 0c02 	mov.w	ip, #2
 802019c:	6806      	ldr	r6, [r0, #0]
 802019e:	b2a4      	uxth	r4, r4
 80201a0:	9106      	str	r1, [sp, #24]
 80201a2:	b2ad      	uxth	r5, r5
 80201a4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80201a8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80201ac:	e9cd c107 	strd	ip, r1, [sp, #28]
 80201b0:	f8b9 c000 	ldrh.w	ip, [r9]
 80201b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80201b8:	9501      	str	r5, [sp, #4]
 80201ba:	9400      	str	r4, [sp, #0]
 80201bc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80201c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80201c4:	9102      	str	r1, [sp, #8]
 80201c6:	4639      	mov	r1, r7
 80201c8:	6c34      	ldr	r4, [r6, #64]	; 0x40
 80201ca:	47a0      	blx	r4
 80201cc:	b011      	add	sp, #68	; 0x44
 80201ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201d2:	f010 0f01 	tst.w	r0, #1
 80201d6:	e7dc      	b.n	8020192 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 80201d8:	6803      	ldr	r3, [r0, #0]
 80201da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80201de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80201e0:	4798      	blx	r3
 80201e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80201e6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80201ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80201ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80201f2:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 80201f6:	fb0c 2303 	mla	r3, ip, r3, r2
 80201fa:	ebaa 0a04 	sub.w	sl, sl, r4
 80201fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020202:	fb0c f305 	mul.w	r3, ip, r5
 8020206:	ebac 0c04 	sub.w	ip, ip, r4
 802020a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 802020e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8020212:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020216:	d02d      	beq.n	8020274 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8020218:	ea4f 6208 	mov.w	r2, r8, lsl #24
 802021c:	920a      	str	r2, [sp, #40]	; 0x28
 802021e:	4298      	cmp	r0, r3
 8020220:	d27d      	bcs.n	802031e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8020222:	eb00 020b 	add.w	r2, r0, fp
 8020226:	920b      	str	r2, [sp, #44]	; 0x2c
 8020228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802022a:	4290      	cmp	r0, r2
 802022c:	d274      	bcs.n	8020318 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 802022e:	f837 eb02 	ldrh.w	lr, [r7], #2
 8020232:	f850 4b04 	ldr.w	r4, [r0], #4
 8020236:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 802023a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802023e:	ea4f 262e 	mov.w	r6, lr, asr #8
 8020242:	b2ed      	uxtb	r5, r5
 8020244:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020248:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802024c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8020250:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020254:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020258:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802025c:	d129      	bne.n	80202b2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 802025e:	0212      	lsls	r2, r2, #8
 8020260:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8020264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020266:	4335      	orrs	r5, r6
 8020268:	4315      	orrs	r5, r2
 802026a:	f840 5c04 	str.w	r5, [r0, #-4]
 802026e:	e7db      	b.n	8020228 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8020270:	4460      	add	r0, ip
 8020272:	4457      	add	r7, sl
 8020274:	4298      	cmp	r0, r3
 8020276:	d252      	bcs.n	802031e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8020278:	eb00 040b 	add.w	r4, r0, fp
 802027c:	42a0      	cmp	r0, r4
 802027e:	d2f7      	bcs.n	8020270 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8020280:	f837 5b02 	ldrh.w	r5, [r7], #2
 8020284:	10e9      	asrs	r1, r5, #3
 8020286:	122e      	asrs	r6, r5, #8
 8020288:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 802028c:	00ed      	lsls	r5, r5, #3
 802028e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020292:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020296:	b2ed      	uxtb	r5, r5
 8020298:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802029c:	0212      	lsls	r2, r2, #8
 802029e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80202a2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80202a6:	432a      	orrs	r2, r5
 80202a8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80202ac:	f840 2b04 	str.w	r2, [r0], #4
 80202b0:	e7e4      	b.n	802027c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 80202b2:	fb18 f505 	smulbb	r5, r8, r5
 80202b6:	fb08 fe09 	mul.w	lr, r8, r9
 80202ba:	fb18 f606 	smulbb	r6, r8, r6
 80202be:	fb18 f202 	smulbb	r2, r8, r2
 80202c2:	f10e 0101 	add.w	r1, lr, #1
 80202c6:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80202ca:	eb08 0e09 	add.w	lr, r8, r9
 80202ce:	1209      	asrs	r1, r1, #8
 80202d0:	eba9 0901 	sub.w	r9, r9, r1
 80202d4:	ebae 0e01 	sub.w	lr, lr, r1
 80202d8:	b2e1      	uxtb	r1, r4
 80202da:	fa5f fe8e 	uxtb.w	lr, lr
 80202de:	fb09 5101 	mla	r1, r9, r1, r5
 80202e2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80202e6:	fb09 6605 	mla	r6, r9, r5, r6
 80202ea:	fbb1 f1fe 	udiv	r1, r1, lr
 80202ee:	fbb6 f6fe 	udiv	r6, r6, lr
 80202f2:	b2c9      	uxtb	r1, r1
 80202f4:	0436      	lsls	r6, r6, #16
 80202f6:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 80202fa:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80202fe:	4331      	orrs	r1, r6
 8020300:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8020304:	fb09 2606 	mla	r6, r9, r6, r2
 8020308:	fbb6 f6fe 	udiv	r6, r6, lr
 802030c:	0236      	lsls	r6, r6, #8
 802030e:	b2b6      	uxth	r6, r6
 8020310:	4331      	orrs	r1, r6
 8020312:	f840 1c04 	str.w	r1, [r0, #-4]
 8020316:	e787      	b.n	8020228 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8020318:	4460      	add	r0, ip
 802031a:	4457      	add	r7, sl
 802031c:	e77f      	b.n	802021e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 802031e:	4b03      	ldr	r3, [pc, #12]	; (802032c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8020320:	6818      	ldr	r0, [r3, #0]
 8020322:	6803      	ldr	r3, [r0, #0]
 8020324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020326:	4798      	blx	r3
 8020328:	e750      	b.n	80201cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802032a:	bf00      	nop
 802032c:	2003bd08 	.word	0x2003bd08
 8020330:	2003bd02 	.word	0x2003bd02

08020334 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020334:	b4f0      	push	{r4, r5, r6, r7}
 8020336:	4616      	mov	r6, r2
 8020338:	461c      	mov	r4, r3
 802033a:	460d      	mov	r5, r1
 802033c:	9a04      	ldr	r2, [sp, #16]
 802033e:	2e01      	cmp	r6, #1
 8020340:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020344:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8020348:	d012      	beq.n	8020370 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802034a:	d303      	bcc.n	8020354 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802034c:	2e02      	cmp	r6, #2
 802034e:	d006      	beq.n	802035e <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8020350:	bcf0      	pop	{r4, r5, r6, r7}
 8020352:	4770      	bx	lr
 8020354:	4621      	mov	r1, r4
 8020356:	4628      	mov	r0, r5
 8020358:	bcf0      	pop	{r4, r5, r6, r7}
 802035a:	f7ff bedf 	b.w	802011c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802035e:	6805      	ldr	r5, [r0, #0]
 8020360:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8020364:	68ed      	ldr	r5, [r5, #12]
 8020366:	4613      	mov	r3, r2
 8020368:	4622      	mov	r2, r4
 802036a:	46ac      	mov	ip, r5
 802036c:	bcf0      	pop	{r4, r5, r6, r7}
 802036e:	4760      	bx	ip
 8020370:	4621      	mov	r1, r4
 8020372:	4628      	mov	r0, r5
 8020374:	bcf0      	pop	{r4, r5, r6, r7}
 8020376:	f7ff bde1 	b.w	801ff3c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

0802037c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020380:	b093      	sub	sp, #76	; 0x4c
 8020382:	4681      	mov	r9, r0
 8020384:	460f      	mov	r7, r1
 8020386:	6810      	ldr	r0, [r2, #0]
 8020388:	6851      	ldr	r1, [r2, #4]
 802038a:	ac0e      	add	r4, sp, #56	; 0x38
 802038c:	4616      	mov	r6, r2
 802038e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020392:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8020540 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8020396:	c403      	stmia	r4!, {r0, r1}
 8020398:	6818      	ldr	r0, [r3, #0]
 802039a:	ac10      	add	r4, sp, #64	; 0x40
 802039c:	6859      	ldr	r1, [r3, #4]
 802039e:	c403      	stmia	r4!, {r0, r1}
 80203a0:	a80e      	add	r0, sp, #56	; 0x38
 80203a2:	f7f9 fa0b 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203a6:	4631      	mov	r1, r6
 80203a8:	a810      	add	r0, sp, #64	; 0x40
 80203aa:	4e64      	ldr	r6, [pc, #400]	; (802053c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80203ac:	f7f9 fa2e 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203b0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80203b4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80203b8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80203bc:	6830      	ldr	r0, [r6, #0]
 80203be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80203c2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80203c6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80203ca:	4489      	add	r9, r1
 80203cc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80203d0:	440a      	add	r2, r1
 80203d2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80203d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80203da:	4413      	add	r3, r2
 80203dc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80203e0:	6803      	ldr	r3, [r0, #0]
 80203e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80203e4:	4798      	blx	r3
 80203e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80203ea:	6830      	ldr	r0, [r6, #0]
 80203ec:	d01f      	beq.n	802042e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80203ee:	2102      	movs	r1, #2
 80203f0:	2600      	movs	r6, #0
 80203f2:	6802      	ldr	r2, [r0, #0]
 80203f4:	b2a4      	uxth	r4, r4
 80203f6:	b2ad      	uxth	r5, r5
 80203f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80203fc:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8020400:	210b      	movs	r1, #11
 8020402:	9107      	str	r1, [sp, #28]
 8020404:	f8ba 1000 	ldrh.w	r1, [sl]
 8020408:	9502      	str	r5, [sp, #8]
 802040a:	9106      	str	r1, [sp, #24]
 802040c:	2101      	movs	r1, #1
 802040e:	9401      	str	r4, [sp, #4]
 8020410:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8020414:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020418:	9103      	str	r1, [sp, #12]
 802041a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 802041e:	9100      	str	r1, [sp, #0]
 8020420:	4649      	mov	r1, r9
 8020422:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8020424:	463a      	mov	r2, r7
 8020426:	47a0      	blx	r4
 8020428:	b013      	add	sp, #76	; 0x4c
 802042a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802042e:	6803      	ldr	r3, [r0, #0]
 8020430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020432:	4798      	blx	r3
 8020434:	f8ba 3000 	ldrh.w	r3, [sl]
 8020438:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802043c:	f04f 0e04 	mov.w	lr, #4
 8020440:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020444:	435d      	muls	r5, r3
 8020446:	fb03 1202 	mla	r2, r3, r2, r1
 802044a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802044e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8020452:	920c      	str	r2, [sp, #48]	; 0x30
 8020454:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020458:	1b12      	subs	r2, r2, r4
 802045a:	920d      	str	r2, [sp, #52]	; 0x34
 802045c:	00a2      	lsls	r2, r4, #2
 802045e:	1b1c      	subs	r4, r3, r4
 8020460:	920a      	str	r2, [sp, #40]	; 0x28
 8020462:	00a3      	lsls	r3, r4, #2
 8020464:	930b      	str	r3, [sp, #44]	; 0x2c
 8020466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020468:	4298      	cmp	r0, r3
 802046a:	d261      	bcs.n	8020530 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802046c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802046e:	eb00 0a03 	add.w	sl, r0, r3
 8020472:	4550      	cmp	r0, sl
 8020474:	d257      	bcs.n	8020526 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020476:	f819 2b01 	ldrb.w	r2, [r9], #1
 802047a:	fb1e e202 	smlabb	r2, lr, r2, lr
 802047e:	eb07 0c02 	add.w	ip, r7, r2
 8020482:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020486:	fb03 f308 	mul.w	r3, r3, r8
 802048a:	1c5c      	adds	r4, r3, #1
 802048c:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8020490:	1224      	asrs	r4, r4, #8
 8020492:	2cff      	cmp	r4, #255	; 0xff
 8020494:	d003      	beq.n	802049e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 8020496:	6803      	ldr	r3, [r0, #0]
 8020498:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 802049c:	d10d      	bne.n	80204ba <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802049e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80204a2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80204a6:	021b      	lsls	r3, r3, #8
 80204a8:	5cba      	ldrb	r2, [r7, r2]
 80204aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80204ae:	4313      	orrs	r3, r2
 80204b0:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 80204b4:	6004      	str	r4, [r0, #0]
 80204b6:	3004      	adds	r0, #4
 80204b8:	e7db      	b.n	8020472 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 80204ba:	b2e5      	uxtb	r5, r4
 80204bc:	2c00      	cmp	r4, #0
 80204be:	d0fa      	beq.n	80204b6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 80204c0:	fb05 f10b 	mul.w	r1, r5, fp
 80204c4:	445d      	add	r5, fp
 80204c6:	5cba      	ldrb	r2, [r7, r2]
 80204c8:	1c4e      	adds	r6, r1, #1
 80204ca:	eb06 2121 	add.w	r1, r6, r1, asr #8
 80204ce:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80204d2:	1209      	asrs	r1, r1, #8
 80204d4:	1a6d      	subs	r5, r5, r1
 80204d6:	ebab 0101 	sub.w	r1, fp, r1
 80204da:	f89c b002 	ldrb.w	fp, [ip, #2]
 80204de:	b2ed      	uxtb	r5, r5
 80204e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80204e4:	fb01 b606 	mla	r6, r1, r6, fp
 80204e8:	fa5f fb83 	uxtb.w	fp, r3
 80204ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80204f0:	fb01 fb0b 	mul.w	fp, r1, fp
 80204f4:	fb04 b202 	mla	r2, r4, r2, fp
 80204f8:	fbb6 f6f5 	udiv	r6, r6, r5
 80204fc:	fbb2 f2f5 	udiv	r2, r2, r5
 8020500:	0436      	lsls	r6, r6, #16
 8020502:	b2d2      	uxtb	r2, r2
 8020504:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8020508:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802050c:	4316      	orrs	r6, r2
 802050e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020512:	4354      	muls	r4, r2
 8020514:	fb01 4203 	mla	r2, r1, r3, r4
 8020518:	fbb2 f2f5 	udiv	r2, r2, r5
 802051c:	0212      	lsls	r2, r2, #8
 802051e:	b292      	uxth	r2, r2
 8020520:	4316      	orrs	r6, r2
 8020522:	6006      	str	r6, [r0, #0]
 8020524:	e7c7      	b.n	80204b6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8020526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020528:	4418      	add	r0, r3
 802052a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802052c:	4499      	add	r9, r3
 802052e:	e79a      	b.n	8020466 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8020530:	4b02      	ldr	r3, [pc, #8]	; (802053c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8020532:	6818      	ldr	r0, [r3, #0]
 8020534:	6803      	ldr	r3, [r0, #0]
 8020536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020538:	4798      	blx	r3
 802053a:	e775      	b.n	8020428 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802053c:	2003bd08 	.word	0x2003bd08
 8020540:	2003bd02 	.word	0x2003bd02

08020544 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020548:	b093      	sub	sp, #76	; 0x4c
 802054a:	4606      	mov	r6, r0
 802054c:	4689      	mov	r9, r1
 802054e:	6810      	ldr	r0, [r2, #0]
 8020550:	6851      	ldr	r1, [r2, #4]
 8020552:	ac0e      	add	r4, sp, #56	; 0x38
 8020554:	4615      	mov	r5, r2
 8020556:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 802055a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8020740 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 802055e:	c403      	stmia	r4!, {r0, r1}
 8020560:	6818      	ldr	r0, [r3, #0]
 8020562:	ac10      	add	r4, sp, #64	; 0x40
 8020564:	6859      	ldr	r1, [r3, #4]
 8020566:	c403      	stmia	r4!, {r0, r1}
 8020568:	a80e      	add	r0, sp, #56	; 0x38
 802056a:	f7f9 f927 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802056e:	4629      	mov	r1, r5
 8020570:	a810      	add	r0, sp, #64	; 0x40
 8020572:	f7f9 f94b 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020576:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802057a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802057e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020582:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8020586:	fb11 2103 	smlabb	r1, r1, r3, r2
 802058a:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 802058e:	1875      	adds	r5, r6, r1
 8020590:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020594:	4e69      	ldr	r6, [pc, #420]	; (802073c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020596:	440a      	add	r2, r1
 8020598:	6830      	ldr	r0, [r6, #0]
 802059a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802059e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80205a2:	4413      	add	r3, r2
 80205a4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80205a8:	6803      	ldr	r3, [r0, #0]
 80205aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205ac:	4798      	blx	r3
 80205ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80205b2:	d020      	beq.n	80205f6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 80205b4:	6830      	ldr	r0, [r6, #0]
 80205b6:	2200      	movs	r2, #0
 80205b8:	2602      	movs	r6, #2
 80205ba:	b2a4      	uxth	r4, r4
 80205bc:	6801      	ldr	r1, [r0, #0]
 80205be:	b2bf      	uxth	r7, r7
 80205c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80205c4:	e9cd 6208 	strd	r6, r2, [sp, #32]
 80205c8:	260b      	movs	r6, #11
 80205ca:	9607      	str	r6, [sp, #28]
 80205cc:	f8ba 6000 	ldrh.w	r6, [sl]
 80205d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80205d4:	9702      	str	r7, [sp, #8]
 80205d6:	9401      	str	r4, [sp, #4]
 80205d8:	e9cd 2605 	strd	r2, r6, [sp, #20]
 80205dc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80205e0:	9203      	str	r2, [sp, #12]
 80205e2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80205e6:	9200      	str	r2, [sp, #0]
 80205e8:	464a      	mov	r2, r9
 80205ea:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80205ec:	4629      	mov	r1, r5
 80205ee:	47a0      	blx	r4
 80205f0:	b013      	add	sp, #76	; 0x4c
 80205f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205f6:	6830      	ldr	r0, [r6, #0]
 80205f8:	f109 0904 	add.w	r9, r9, #4
 80205fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020600:	6803      	ldr	r3, [r0, #0]
 8020602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020604:	4798      	blx	r3
 8020606:	f8ba c000 	ldrh.w	ip, [sl]
 802060a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802060e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020612:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020616:	fb0c f707 	mul.w	r7, ip, r7
 802061a:	fb0c 2303 	mla	r3, ip, r3, r2
 802061e:	ebac 0c04 	sub.w	ip, ip, r4
 8020622:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020626:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 802062a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802062e:	eba3 0304 	sub.w	r3, r3, r4
 8020632:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8020636:	930b      	str	r3, [sp, #44]	; 0x2c
 8020638:	d025      	beq.n	8020686 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 802063a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 802063e:	930c      	str	r3, [sp, #48]	; 0x30
 8020640:	42b8      	cmp	r0, r7
 8020642:	d274      	bcs.n	802072e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8020644:	eb00 030b 	add.w	r3, r0, fp
 8020648:	930d      	str	r3, [sp, #52]	; 0x34
 802064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802064c:	4298      	cmp	r0, r3
 802064e:	d26a      	bcs.n	8020726 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 8020650:	f815 1b01 	ldrb.w	r1, [r5], #1
 8020654:	f850 3b04 	ldr.w	r3, [r0], #4
 8020658:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802065c:	0e1c      	lsrs	r4, r3, #24
 802065e:	eb09 0201 	add.w	r2, r9, r1
 8020662:	f819 6001 	ldrb.w	r6, [r9, r1]
 8020666:	f892 a002 	ldrb.w	sl, [r2, #2]
 802066a:	7851      	ldrb	r1, [r2, #1]
 802066c:	d124      	bne.n	80206b8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 802066e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020670:	431e      	orrs	r6, r3
 8020672:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 8020676:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 802067a:	f840 1c04 	str.w	r1, [r0, #-4]
 802067e:	e7e4      	b.n	802064a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020682:	4460      	add	r0, ip
 8020684:	441d      	add	r5, r3
 8020686:	42b8      	cmp	r0, r7
 8020688:	d251      	bcs.n	802072e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 802068a:	eb00 010b 	add.w	r1, r0, fp
 802068e:	4288      	cmp	r0, r1
 8020690:	d2f6      	bcs.n	8020680 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020692:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802069a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802069e:	eb09 0402 	add.w	r4, r9, r2
 80206a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80206a6:	78a6      	ldrb	r6, [r4, #2]
 80206a8:	7862      	ldrb	r2, [r4, #1]
 80206aa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80206ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80206b2:	f840 3b04 	str.w	r3, [r0], #4
 80206b6:	e7ea      	b.n	802068e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 80206b8:	fb18 f606 	smulbb	r6, r8, r6
 80206bc:	fb08 fe04 	mul.w	lr, r8, r4
 80206c0:	fb18 fa0a 	smulbb	sl, r8, sl
 80206c4:	fb18 f101 	smulbb	r1, r8, r1
 80206c8:	f10e 0201 	add.w	r2, lr, #1
 80206cc:	eb02 222e 	add.w	r2, r2, lr, asr #8
 80206d0:	eb08 0e04 	add.w	lr, r8, r4
 80206d4:	1212      	asrs	r2, r2, #8
 80206d6:	ebae 0e02 	sub.w	lr, lr, r2
 80206da:	1aa2      	subs	r2, r4, r2
 80206dc:	b2dc      	uxtb	r4, r3
 80206de:	fa5f fe8e 	uxtb.w	lr, lr
 80206e2:	fb02 6604 	mla	r6, r2, r4, r6
 80206e6:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80206ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80206ee:	fb02 aa04 	mla	sl, r2, r4, sl
 80206f2:	fb02 1303 	mla	r3, r2, r3, r1
 80206f6:	fbb6 f6fe 	udiv	r6, r6, lr
 80206fa:	fbba fafe 	udiv	sl, sl, lr
 80206fe:	b2f6      	uxtb	r6, r6
 8020700:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8020704:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8020708:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 802070c:	ea46 060a 	orr.w	r6, r6, sl
 8020710:	fbb3 fafe 	udiv	sl, r3, lr
 8020714:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8020718:	fa1f fa8a 	uxth.w	sl, sl
 802071c:	ea46 060a 	orr.w	r6, r6, sl
 8020720:	f840 6c04 	str.w	r6, [r0, #-4]
 8020724:	e791      	b.n	802064a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020728:	4460      	add	r0, ip
 802072a:	441d      	add	r5, r3
 802072c:	e788      	b.n	8020640 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 802072e:	4b03      	ldr	r3, [pc, #12]	; (802073c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020730:	6818      	ldr	r0, [r3, #0]
 8020732:	6803      	ldr	r3, [r0, #0]
 8020734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020736:	4798      	blx	r3
 8020738:	e75a      	b.n	80205f0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 802073a:	bf00      	nop
 802073c:	2003bd08 	.word	0x2003bd08
 8020740:	2003bd02 	.word	0x2003bd02

08020744 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020748:	b089      	sub	sp, #36	; 0x24
 802074a:	4605      	mov	r5, r0
 802074c:	4689      	mov	r9, r1
 802074e:	6810      	ldr	r0, [r2, #0]
 8020750:	6851      	ldr	r1, [r2, #4]
 8020752:	ac04      	add	r4, sp, #16
 8020754:	4616      	mov	r6, r2
 8020756:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 802075a:	f109 0904 	add.w	r9, r9, #4
 802075e:	c403      	stmia	r4!, {r0, r1}
 8020760:	6818      	ldr	r0, [r3, #0]
 8020762:	ac06      	add	r4, sp, #24
 8020764:	6859      	ldr	r1, [r3, #4]
 8020766:	c403      	stmia	r4!, {r0, r1}
 8020768:	a804      	add	r0, sp, #16
 802076a:	f7f9 f827 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802076e:	4631      	mov	r1, r6
 8020770:	a806      	add	r0, sp, #24
 8020772:	f7f9 f84b 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020776:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802077a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802077e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8020782:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020786:	fb16 2103 	smlabb	r1, r6, r3, r2
 802078a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 802078e:	186e      	adds	r6, r5, r1
 8020790:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8020794:	440a      	add	r2, r1
 8020796:	f8ad 2018 	strh.w	r2, [sp, #24]
 802079a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802079e:	4413      	add	r3, r2
 80207a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80207a4:	4b57      	ldr	r3, [pc, #348]	; (8020904 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80207a6:	6818      	ldr	r0, [r3, #0]
 80207a8:	6803      	ldr	r3, [r0, #0]
 80207aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207ac:	4798      	blx	r3
 80207ae:	4b56      	ldr	r3, [pc, #344]	; (8020908 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80207b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80207b4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80207b8:	f8b3 c000 	ldrh.w	ip, [r3]
 80207bc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80207c0:	fb0a fa0c 	mul.w	sl, sl, ip
 80207c4:	fb0c 2303 	mla	r3, ip, r3, r2
 80207c8:	ebac 0c0b 	sub.w	ip, ip, fp
 80207cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80207d0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80207d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80207d8:	eba3 030b 	sub.w	r3, r3, fp
 80207dc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80207e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80207e4:	9301      	str	r3, [sp, #4]
 80207e6:	d02e      	beq.n	8020846 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80207e8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80207ec:	9302      	str	r3, [sp, #8]
 80207ee:	4550      	cmp	r0, sl
 80207f0:	d27f      	bcs.n	80208f2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 80207f2:	eb00 030b 	add.w	r3, r0, fp
 80207f6:	9303      	str	r3, [sp, #12]
 80207f8:	9b03      	ldr	r3, [sp, #12]
 80207fa:	4298      	cmp	r0, r3
 80207fc:	d275      	bcs.n	80208ea <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 80207fe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8020802:	6802      	ldr	r2, [r0, #0]
 8020804:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8020808:	0e17      	lsrs	r7, r2, #24
 802080a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 802080e:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8020812:	ea4f 2521 	mov.w	r5, r1, asr #8
 8020816:	b2e4      	uxtb	r4, r4
 8020818:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802081c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020820:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020824:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8020828:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802082c:	d12c      	bne.n	8020888 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 802082e:	021b      	lsls	r3, r3, #8
 8020830:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8020834:	9b02      	ldr	r3, [sp, #8]
 8020836:	432c      	orrs	r4, r5
 8020838:	431c      	orrs	r4, r3
 802083a:	6004      	str	r4, [r0, #0]
 802083c:	3004      	adds	r0, #4
 802083e:	e7db      	b.n	80207f8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8020840:	9b01      	ldr	r3, [sp, #4]
 8020842:	4460      	add	r0, ip
 8020844:	441e      	add	r6, r3
 8020846:	4550      	cmp	r0, sl
 8020848:	d253      	bcs.n	80208f2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 802084a:	eb00 020b 	add.w	r2, r0, fp
 802084e:	4290      	cmp	r0, r2
 8020850:	d2f6      	bcs.n	8020840 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8020852:	f816 3b01 	ldrb.w	r3, [r6], #1
 8020856:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 802085a:	10e9      	asrs	r1, r5, #3
 802085c:	122c      	asrs	r4, r5, #8
 802085e:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8020862:	00e9      	lsls	r1, r5, #3
 8020864:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020868:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802086c:	b2c9      	uxtb	r1, r1
 802086e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020872:	021b      	lsls	r3, r3, #8
 8020874:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020878:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802087c:	430b      	orrs	r3, r1
 802087e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020882:	f840 3b04 	str.w	r3, [r0], #4
 8020886:	e7e2      	b.n	802084e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8020888:	fb18 f404 	smulbb	r4, r8, r4
 802088c:	fb08 fe07 	mul.w	lr, r8, r7
 8020890:	fb18 f505 	smulbb	r5, r8, r5
 8020894:	fb18 f303 	smulbb	r3, r8, r3
 8020898:	f10e 0101 	add.w	r1, lr, #1
 802089c:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80208a0:	eb08 0e07 	add.w	lr, r8, r7
 80208a4:	1209      	asrs	r1, r1, #8
 80208a6:	ebae 0e01 	sub.w	lr, lr, r1
 80208aa:	1a79      	subs	r1, r7, r1
 80208ac:	b2d7      	uxtb	r7, r2
 80208ae:	fa5f fe8e 	uxtb.w	lr, lr
 80208b2:	fb01 4707 	mla	r7, r1, r7, r4
 80208b6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80208ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80208be:	fb01 5504 	mla	r5, r1, r4, r5
 80208c2:	fb01 3202 	mla	r2, r1, r2, r3
 80208c6:	fbb7 f7fe 	udiv	r7, r7, lr
 80208ca:	fbb5 f5fe 	udiv	r5, r5, lr
 80208ce:	b2ff      	uxtb	r7, r7
 80208d0:	042d      	lsls	r5, r5, #16
 80208d2:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 80208d6:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 80208da:	432f      	orrs	r7, r5
 80208dc:	fbb2 f5fe 	udiv	r5, r2, lr
 80208e0:	022d      	lsls	r5, r5, #8
 80208e2:	b2ad      	uxth	r5, r5
 80208e4:	432f      	orrs	r7, r5
 80208e6:	6007      	str	r7, [r0, #0]
 80208e8:	e7a8      	b.n	802083c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 80208ea:	9b01      	ldr	r3, [sp, #4]
 80208ec:	4460      	add	r0, ip
 80208ee:	441e      	add	r6, r3
 80208f0:	e77d      	b.n	80207ee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 80208f2:	4b04      	ldr	r3, [pc, #16]	; (8020904 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80208f4:	6818      	ldr	r0, [r3, #0]
 80208f6:	6803      	ldr	r3, [r0, #0]
 80208f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208fa:	4798      	blx	r3
 80208fc:	b009      	add	sp, #36	; 0x24
 80208fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020902:	bf00      	nop
 8020904:	2003bd08 	.word	0x2003bd08
 8020908:	2003bd02 	.word	0x2003bd02

0802090c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802090c:	b430      	push	{r4, r5}
 802090e:	780d      	ldrb	r5, [r1, #0]
 8020910:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020914:	2d01      	cmp	r5, #1
 8020916:	d00a      	beq.n	802092e <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020918:	d305      	bcc.n	8020926 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802091a:	2d02      	cmp	r5, #2
 802091c:	d10b      	bne.n	8020936 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 802091e:	9402      	str	r4, [sp, #8]
 8020920:	bc30      	pop	{r4, r5}
 8020922:	f7ff bf0f 	b.w	8020744 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020926:	9402      	str	r4, [sp, #8]
 8020928:	bc30      	pop	{r4, r5}
 802092a:	f7ff bd27 	b.w	802037c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802092e:	9402      	str	r4, [sp, #8]
 8020930:	bc30      	pop	{r4, r5}
 8020932:	f7ff be07 	b.w	8020544 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020936:	bc30      	pop	{r4, r5}
 8020938:	4770      	bx	lr

0802093a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802093a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802093e:	b085      	sub	sp, #20
 8020940:	4606      	mov	r6, r0
 8020942:	460c      	mov	r4, r1
 8020944:	4691      	mov	r9, r2
 8020946:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802094a:	4698      	mov	r8, r3
 802094c:	b1d5      	cbz	r5, 8020984 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 802094e:	4608      	mov	r0, r1
 8020950:	f7fc fa1e 	bl	801cd90 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020954:	4607      	mov	r7, r0
 8020956:	4620      	mov	r0, r4
 8020958:	f7fc fa4e 	bl	801cdf8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802095c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020960:	4620      	mov	r0, r4
 8020962:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020966:	f8ad 800a 	strh.w	r8, [sp, #10]
 802096a:	f8ad 700c 	strh.w	r7, [sp, #12]
 802096e:	f7fc fb33 	bl	801cfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020972:	b950      	cbnz	r0, 802098a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8020974:	4620      	mov	r0, r4
 8020976:	f7fc faab 	bl	801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>
 802097a:	462b      	mov	r3, r5
 802097c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802097e:	a902      	add	r1, sp, #8
 8020980:	f7ff fbcc 	bl	802011c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020984:	b005      	add	sp, #20
 8020986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802098a:	2801      	cmp	r0, #1
 802098c:	d108      	bne.n	80209a0 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 802098e:	4620      	mov	r0, r4
 8020990:	f7fc fa9e 	bl	801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020994:	462b      	mov	r3, r5
 8020996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020998:	a902      	add	r1, sp, #8
 802099a:	f7ff facf 	bl	801ff3c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 802099e:	e7f1      	b.n	8020984 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80209a0:	2802      	cmp	r0, #2
 80209a2:	d110      	bne.n	80209c6 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80209a4:	6833      	ldr	r3, [r6, #0]
 80209a6:	4620      	mov	r0, r4
 80209a8:	68df      	ldr	r7, [r3, #12]
 80209aa:	f7fc fa91 	bl	801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80209ae:	4680      	mov	r8, r0
 80209b0:	4620      	mov	r0, r4
 80209b2:	f7fc fa55 	bl	801ce60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80209b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209b8:	aa02      	add	r2, sp, #8
 80209ba:	4641      	mov	r1, r8
 80209bc:	e9cd 5000 	strd	r5, r0, [sp]
 80209c0:	4630      	mov	r0, r6
 80209c2:	47b8      	blx	r7
 80209c4:	e7de      	b.n	8020984 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80209c6:	280b      	cmp	r0, #11
 80209c8:	d1dc      	bne.n	8020984 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80209ca:	4620      	mov	r0, r4
 80209cc:	f7fc fa80 	bl	801ced0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80209d0:	4606      	mov	r6, r0
 80209d2:	4620      	mov	r0, r4
 80209d4:	f7fc faac 	bl	801cf30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80209d8:	9500      	str	r5, [sp, #0]
 80209da:	4601      	mov	r1, r0
 80209dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209de:	aa02      	add	r2, sp, #8
 80209e0:	4630      	mov	r0, r6
 80209e2:	f7ff ff93 	bl	802090c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80209e6:	e7cd      	b.n	8020984 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

080209e8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 80209e8:	b160      	cbz	r0, 8020a04 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80209ea:	2903      	cmp	r1, #3
 80209ec:	d818      	bhi.n	8020a20 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 80209ee:	e8df f001 	tbb	[pc, r1]
 80209f2:	1902      	.short	0x1902
 80209f4:	1b06      	.short	0x1b06
 80209f6:	4b0e      	ldr	r3, [pc, #56]	; (8020a30 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80209f8:	8818      	ldrh	r0, [r3, #0]
 80209fa:	4240      	negs	r0, r0
 80209fc:	4770      	bx	lr
 80209fe:	4b0c      	ldr	r3, [pc, #48]	; (8020a30 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020a00:	8818      	ldrh	r0, [r3, #0]
 8020a02:	4770      	bx	lr
 8020a04:	2903      	cmp	r1, #3
 8020a06:	d80b      	bhi.n	8020a20 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020a08:	a301      	add	r3, pc, #4	; (adr r3, 8020a10 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8020a0a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020a0e:	bf00      	nop
 8020a10:	08020a25 	.word	0x08020a25
 8020a14:	080209ff 	.word	0x080209ff
 8020a18:	08020a29 	.word	0x08020a29
 8020a1c:	080209f7 	.word	0x080209f7
 8020a20:	2000      	movs	r0, #0
 8020a22:	4770      	bx	lr
 8020a24:	2001      	movs	r0, #1
 8020a26:	4770      	bx	lr
 8020a28:	f04f 30ff 	mov.w	r0, #4294967295
 8020a2c:	4770      	bx	lr
 8020a2e:	bf00      	nop
 8020a30:	2003bd02 	.word	0x2003bd02

08020a34 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8020a34:	b160      	cbz	r0, 8020a50 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8020a36:	2903      	cmp	r1, #3
 8020a38:	d818      	bhi.n	8020a6c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8020a3a:	e8df f001 	tbb	[pc, r1]
 8020a3e:	0219      	.short	0x0219
 8020a40:	051b      	.short	0x051b
 8020a42:	4b0e      	ldr	r3, [pc, #56]	; (8020a7c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020a44:	8818      	ldrh	r0, [r3, #0]
 8020a46:	4770      	bx	lr
 8020a48:	4b0c      	ldr	r3, [pc, #48]	; (8020a7c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020a4a:	8818      	ldrh	r0, [r3, #0]
 8020a4c:	4240      	negs	r0, r0
 8020a4e:	4770      	bx	lr
 8020a50:	2903      	cmp	r1, #3
 8020a52:	d80b      	bhi.n	8020a6c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8020a54:	a301      	add	r3, pc, #4	; (adr r3, 8020a5c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8020a56:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020a5a:	bf00      	nop
 8020a5c:	08020a43 	.word	0x08020a43
 8020a60:	08020a75 	.word	0x08020a75
 8020a64:	08020a49 	.word	0x08020a49
 8020a68:	08020a71 	.word	0x08020a71
 8020a6c:	2000      	movs	r0, #0
 8020a6e:	4770      	bx	lr
 8020a70:	2001      	movs	r0, #1
 8020a72:	4770      	bx	lr
 8020a74:	f04f 30ff 	mov.w	r0, #4294967295
 8020a78:	4770      	bx	lr
 8020a7a:	bf00      	nop
 8020a7c:	2003bd02 	.word	0x2003bd02

08020a80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a84:	b099      	sub	sp, #100	; 0x64
 8020a86:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a88:	a914      	add	r1, sp, #80	; 0x50
 8020a8a:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8020a8e:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8020a92:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8020a96:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 8020a9a:	e881 000c 	stmia.w	r1, {r2, r3}
 8020a9e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8020aa4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020aa8:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8020aac:	9310      	str	r3, [sp, #64]	; 0x40
 8020aae:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8020ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8020ab4:	7b4b      	ldrb	r3, [r1, #13]
 8020ab6:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8020aba:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8020abe:	f891 8006 	ldrb.w	r8, [r1, #6]
 8020ac2:	ea58 0800 	orrs.w	r8, r8, r0
 8020ac6:	f000 815b 	beq.w	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020aca:	011b      	lsls	r3, r3, #4
 8020acc:	79c8      	ldrb	r0, [r1, #7]
 8020ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020ad2:	4303      	orrs	r3, r0
 8020ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8020ad6:	f000 8153 	beq.w	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020ada:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020ade:	b29b      	uxth	r3, r3
 8020ae0:	2f00      	cmp	r7, #0
 8020ae2:	f000 80f3 	beq.w	8020ccc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 8020ae6:	1aff      	subs	r7, r7, r3
 8020ae8:	b2bf      	uxth	r7, r7
 8020aea:	043d      	lsls	r5, r7, #16
 8020aec:	d502      	bpl.n	8020af4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020aee:	1bf6      	subs	r6, r6, r7
 8020af0:	2700      	movs	r7, #0
 8020af2:	b236      	sxth	r6, r6
 8020af4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020af8:	fa1f f588 	uxth.w	r5, r8
 8020afc:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8020b00:	428e      	cmp	r6, r1
 8020b02:	b28b      	uxth	r3, r1
 8020b04:	bfbf      	itttt	lt
 8020b06:	18ff      	addlt	r7, r7, r3
 8020b08:	1bbe      	sublt	r6, r7, r6
 8020b0a:	b2b7      	uxthlt	r7, r6
 8020b0c:	460e      	movlt	r6, r1
 8020b0e:	8891      	ldrh	r1, [r2, #4]
 8020b10:	440b      	add	r3, r1
 8020b12:	4631      	mov	r1, r6
 8020b14:	b21b      	sxth	r3, r3
 8020b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b18:	88d3      	ldrh	r3, [r2, #6]
 8020b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b1c:	449a      	add	sl, r3
 8020b1e:	fa0f f38a 	sxth.w	r3, sl
 8020b22:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8020b26:	930e      	str	r3, [sp, #56]	; 0x38
 8020b28:	4bb1      	ldr	r3, [pc, #708]	; (8020df0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8020b2a:	f893 b000 	ldrb.w	fp, [r3]
 8020b2e:	f10b 30ff 	add.w	r0, fp, #4294967295
 8020b32:	4243      	negs	r3, r0
 8020b34:	4143      	adcs	r3, r0
 8020b36:	a814      	add	r0, sp, #80	; 0x50
 8020b38:	930c      	str	r3, [sp, #48]	; 0x30
 8020b3a:	464b      	mov	r3, r9
 8020b3c:	f7f8 fcb9 	bl	80194b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020b40:	4631      	mov	r1, r6
 8020b42:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8020b46:	464b      	mov	r3, r9
 8020b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b4a:	a814      	add	r0, sp, #80	; 0x50
 8020b4c:	f7f8 fcce 	bl	80194ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020b50:	a918      	add	r1, sp, #96	; 0x60
 8020b52:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020b56:	a817      	add	r0, sp, #92	; 0x5c
 8020b58:	f7f8 fdee 	bl	8019738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020b5c:	f1b9 0f00 	cmp.w	r9, #0
 8020b60:	f040 80b7 	bne.w	8020cd2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8020b64:	f1bb 0f01 	cmp.w	fp, #1
 8020b68:	f040 80bb 	bne.w	8020ce2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 8020b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b6e:	b153      	cbz	r3, 8020b86 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8020b70:	2508      	movs	r5, #8
 8020b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b74:	fb95 f3f3 	sdiv	r3, r5, r3
 8020b78:	1e5d      	subs	r5, r3, #1
 8020b7a:	4445      	add	r5, r8
 8020b7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8020b80:	fb15 f503 	smulbb	r5, r5, r3
 8020b84:	b2ad      	uxth	r5, r5
 8020b86:	b907      	cbnz	r7, 8020b8a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8020b88:	b16c      	cbz	r4, 8020ba6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8020b8a:	fb04 7305 	mla	r3, r4, r5, r7
 8020b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b90:	ebaa 0a04 	sub.w	sl, sl, r4
 8020b94:	4353      	muls	r3, r2
 8020b96:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020b98:	fa1f fa8a 	uxth.w	sl, sl
 8020b9c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020ba0:	f003 0407 	and.w	r4, r3, #7
 8020ba4:	9228      	str	r2, [sp, #160]	; 0xa0
 8020ba6:	4649      	mov	r1, r9
 8020ba8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020baa:	f7ff ff1d 	bl	80209e8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8020bae:	4683      	mov	fp, r0
 8020bb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020bb2:	f7ff ff3f 	bl	8020a34 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8020bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020bba:	4681      	mov	r9, r0
 8020bbc:	1a9b      	subs	r3, r3, r2
 8020bbe:	459a      	cmp	sl, r3
 8020bc0:	bfa8      	it	ge
 8020bc2:	469a      	movge	sl, r3
 8020bc4:	f1ba 0f00 	cmp.w	sl, #0
 8020bc8:	f340 80da 	ble.w	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020bcc:	1bf6      	subs	r6, r6, r7
 8020bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020bd0:	1b9e      	subs	r6, r3, r6
 8020bd2:	4546      	cmp	r6, r8
 8020bd4:	bfd4      	ite	le
 8020bd6:	ebc7 0706 	rsble	r7, r7, r6
 8020bda:	ebc7 0708 	rsbgt	r7, r7, r8
 8020bde:	2f00      	cmp	r7, #0
 8020be0:	f340 80ce 	ble.w	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020be4:	1bed      	subs	r5, r5, r7
 8020be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020be8:	436b      	muls	r3, r5
 8020bea:	930e      	str	r3, [sp, #56]	; 0x38
 8020bec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bee:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020bf2:	0c1d      	lsrs	r5, r3, #16
 8020bf4:	0a1e      	lsrs	r6, r3, #8
 8020bf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8020bfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8020bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	f040 80c3 	bne.w	8020d8a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8020c04:	4b7b      	ldr	r3, [pc, #492]	; (8020df4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8020c06:	6818      	ldr	r0, [r3, #0]
 8020c08:	6803      	ldr	r3, [r0, #0]
 8020c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c0c:	4798      	blx	r3
 8020c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c10:	2301      	movs	r3, #1
 8020c12:	4093      	lsls	r3, r2
 8020c14:	4a78      	ldr	r2, [pc, #480]	; (8020df8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020c16:	3b01      	subs	r3, #1
 8020c18:	8811      	ldrh	r1, [r2, #0]
 8020c1a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8020c1e:	b2db      	uxtb	r3, r3
 8020c20:	930d      	str	r3, [sp, #52]	; 0x34
 8020c22:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020c26:	fb01 2303 	mla	r3, r1, r3, r2
 8020c2a:	22ff      	movs	r2, #255	; 0xff
 8020c2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020c2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8020c32:	fb92 f2f1 	sdiv	r2, r2, r1
 8020c36:	fb02 f208 	mul.w	r2, r2, r8
 8020c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8020c3c:	9210      	str	r2, [sp, #64]	; 0x40
 8020c3e:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8020c42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c44:	fb07 9b1b 	mls	fp, r7, fp, r9
 8020c48:	920c      	str	r2, [sp, #48]	; 0x30
 8020c4a:	fb02 f907 	mul.w	r9, r2, r7
 8020c4e:	b2f2      	uxtb	r2, r6
 8020c50:	781b      	ldrb	r3, [r3, #0]
 8020c52:	9211      	str	r2, [sp, #68]	; 0x44
 8020c54:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8020c58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020c5a:	4123      	asrs	r3, r4
 8020c5c:	b2d2      	uxtb	r2, r2
 8020c5e:	b2db      	uxtb	r3, r3
 8020c60:	9212      	str	r2, [sp, #72]	; 0x48
 8020c62:	b2ea      	uxtb	r2, r5
 8020c64:	9213      	str	r2, [sp, #76]	; 0x4c
 8020c66:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020c6a:	f0c0 80d8 	bcc.w	8020e1e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8020c6e:	46b8      	mov	r8, r7
 8020c70:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8020c74:	f118 38ff 	adds.w	r8, r8, #4294967295
 8020c78:	f0c0 80c0 	bcc.w	8020dfc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8020c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020c7e:	401a      	ands	r2, r3
 8020c80:	d013      	beq.n	8020caa <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8020c82:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020c84:	fb12 f201 	smulbb	r2, r2, r1
 8020c88:	b292      	uxth	r2, r2
 8020c8a:	1c51      	adds	r1, r2, #1
 8020c8c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8020c90:	1209      	asrs	r1, r1, #8
 8020c92:	b2ce      	uxtb	r6, r1
 8020c94:	2eff      	cmp	r6, #255	; 0xff
 8020c96:	d003      	beq.n	8020ca0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8020c98:	f8dc 5000 	ldr.w	r5, [ip]
 8020c9c:	0e2a      	lsrs	r2, r5, #24
 8020c9e:	d176      	bne.n	8020d8e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8020ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020ca2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8020ca6:	f8cc 1000 	str.w	r1, [ip]
 8020caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020cac:	4414      	add	r4, r2
 8020cae:	b2a4      	uxth	r4, r4
 8020cb0:	2c07      	cmp	r4, #7
 8020cb2:	bf89      	itett	hi
 8020cb4:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 8020cb6:	4113      	asrls	r3, r2
 8020cb8:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020cba:	2400      	movhi	r4, #0
 8020cbc:	bf89      	itett	hi
 8020cbe:	3201      	addhi	r2, #1
 8020cc0:	b2db      	uxtbls	r3, r3
 8020cc2:	785b      	ldrbhi	r3, [r3, #1]
 8020cc4:	9228      	strhi	r2, [sp, #160]	; 0xa0
 8020cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020cc8:	4494      	add	ip, r2
 8020cca:	e7d3      	b.n	8020c74 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8020ccc:	441e      	add	r6, r3
 8020cce:	b236      	sxth	r6, r6
 8020cd0:	e710      	b.n	8020af4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020cd2:	f1b9 0f01 	cmp.w	r9, #1
 8020cd6:	f47f af49 	bne.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020cda:	f1bb 0f01 	cmp.w	fp, #1
 8020cde:	f47f af45 	bne.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020ce2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8020df4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8020ce6:	f8db 0000 	ldr.w	r0, [fp]
 8020cea:	6803      	ldr	r3, [r0, #0]
 8020cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020cee:	4798      	blx	r3
 8020cf0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8020cf4:	465a      	mov	r2, fp
 8020cf6:	d006      	beq.n	8020d06 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cfa:	2b04      	cmp	r3, #4
 8020cfc:	d143      	bne.n	8020d86 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 8020cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d00:	3300      	adds	r3, #0
 8020d02:	bf18      	it	ne
 8020d04:	2301      	movne	r3, #1
 8020d06:	0581      	lsls	r1, r0, #22
 8020d08:	f140 8092 	bpl.w	8020e30 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8020d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020d0e:	2908      	cmp	r1, #8
 8020d10:	f040 808e 	bne.w	8020e30 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	bf0c      	ite	eq
 8020d18:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8020d1c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8020d20:	2f00      	cmp	r7, #0
 8020d22:	f47f af23 	bne.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020d26:	2c00      	cmp	r4, #0
 8020d28:	f47f af20 	bne.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020d2c:	eb08 0306 	add.w	r3, r8, r6
 8020d30:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020d32:	4283      	cmp	r3, r0
 8020d34:	f73f af1a 	bgt.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020d38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d3c:	4403      	add	r3, r0
 8020d3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020d40:	4283      	cmp	r3, r0
 8020d42:	f73f af13 	bgt.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d48:	2600      	movs	r6, #0
 8020d4a:	6810      	ldr	r0, [r2, #0]
 8020d4c:	2b08      	cmp	r3, #8
 8020d4e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020d52:	6804      	ldr	r4, [r0, #0]
 8020d54:	bf18      	it	ne
 8020d56:	3501      	addne	r5, #1
 8020d58:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020d5c:	bf18      	it	ne
 8020d5e:	f025 0501 	bicne.w	r5, r5, #1
 8020d62:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8020d66:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8020d6a:	bf18      	it	ne
 8020d6c:	b2ad      	uxthne	r5, r5
 8020d6e:	9104      	str	r1, [sp, #16]
 8020d70:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020d72:	e9cd 5a00 	strd	r5, sl, [sp]
 8020d76:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8020d7a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020d7c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8020d7e:	47a0      	blx	r4
 8020d80:	b019      	add	sp, #100	; 0x64
 8020d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d86:	2300      	movs	r3, #0
 8020d88:	e7bd      	b.n	8020d06 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020d8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020d8c:	e73f      	b.n	8020c0e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8020d8e:	2e00      	cmp	r6, #0
 8020d90:	d08b      	beq.n	8020caa <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8020d92:	fb06 f102 	mul.w	r1, r6, r2
 8020d96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020d98:	f101 0e01 	add.w	lr, r1, #1
 8020d9c:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8020da0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020da4:	eba2 090e 	sub.w	r9, r2, lr
 8020da8:	4432      	add	r2, r6
 8020daa:	eba2 020e 	sub.w	r2, r2, lr
 8020dae:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8020db2:	b2d1      	uxtb	r1, r2
 8020db4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020db6:	4372      	muls	r2, r6
 8020db8:	fb09 2e0e 	mla	lr, r9, lr, r2
 8020dbc:	b2ea      	uxtb	r2, r5
 8020dbe:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8020dc2:	fb09 f202 	mul.w	r2, r9, r2
 8020dc6:	fb06 2200 	mla	r2, r6, r0, r2
 8020dca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020dcc:	fb92 f2f1 	sdiv	r2, r2, r1
 8020dd0:	4346      	muls	r6, r0
 8020dd2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8020dd6:	fb9e fef1 	sdiv	lr, lr, r1
 8020dda:	fb09 6505 	mla	r5, r9, r5, r6
 8020dde:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8020de2:	fb95 f5f1 	sdiv	r5, r5, r1
 8020de6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8020dea:	f8cc 5000 	str.w	r5, [ip]
 8020dee:	e75c      	b.n	8020caa <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8020df0:	2003bd00 	.word	0x2003bd00
 8020df4:	2003bd08 	.word	0x2003bd08
 8020df8:	2003bd02 	.word	0x2003bd02
 8020dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020dfe:	b152      	cbz	r2, 8020e16 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8020e00:	4414      	add	r4, r2
 8020e02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e04:	b2a4      	uxth	r4, r4
 8020e06:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8020e0a:	f004 0407 	and.w	r4, r4, #7
 8020e0e:	9328      	str	r3, [sp, #160]	; 0xa0
 8020e10:	781b      	ldrb	r3, [r3, #0]
 8020e12:	4123      	asrs	r3, r4
 8020e14:	b2db      	uxtb	r3, r3
 8020e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e18:	445a      	add	r2, fp
 8020e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8020e1c:	e723      	b.n	8020c66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 8020e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d1ad      	bne.n	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020e24:	4b05      	ldr	r3, [pc, #20]	; (8020e3c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 8020e26:	6818      	ldr	r0, [r3, #0]
 8020e28:	6803      	ldr	r3, [r0, #0]
 8020e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e2c:	4798      	blx	r3
 8020e2e:	e7a7      	b.n	8020d80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f43f ae9b 	beq.w	8020b6c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020e3a:	e771      	b.n	8020d20 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8020e3c:	2003bd08 	.word	0x2003bd08

08020e40 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020e40:	b538      	push	{r3, r4, r5, lr}
 8020e42:	4c15      	ldr	r4, [pc, #84]	; (8020e98 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020e44:	4605      	mov	r5, r0
 8020e46:	7823      	ldrb	r3, [r4, #0]
 8020e48:	f3bf 8f5b 	dmb	ish
 8020e4c:	07da      	lsls	r2, r3, #31
 8020e4e:	d40b      	bmi.n	8020e68 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020e50:	4620      	mov	r0, r4
 8020e52:	f007 fccd 	bl	80287f0 <__cxa_guard_acquire>
 8020e56:	b138      	cbz	r0, 8020e68 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020e58:	4620      	mov	r0, r4
 8020e5a:	f007 fcd5 	bl	8028808 <__cxa_guard_release>
 8020e5e:	4a0f      	ldr	r2, [pc, #60]	; (8020e9c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020e60:	490f      	ldr	r1, [pc, #60]	; (8020ea0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020e62:	4810      	ldr	r0, [pc, #64]	; (8020ea4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020e64:	f007 fcbd 	bl	80287e2 <__aeabi_atexit>
 8020e68:	4c0f      	ldr	r4, [pc, #60]	; (8020ea8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8020e6a:	7823      	ldrb	r3, [r4, #0]
 8020e6c:	f3bf 8f5b 	dmb	ish
 8020e70:	07db      	lsls	r3, r3, #31
 8020e72:	d40b      	bmi.n	8020e8c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020e74:	4620      	mov	r0, r4
 8020e76:	f007 fcbb 	bl	80287f0 <__cxa_guard_acquire>
 8020e7a:	b138      	cbz	r0, 8020e8c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020e7c:	4620      	mov	r0, r4
 8020e7e:	f007 fcc3 	bl	8028808 <__cxa_guard_release>
 8020e82:	4a06      	ldr	r2, [pc, #24]	; (8020e9c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020e84:	4909      	ldr	r1, [pc, #36]	; (8020eac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8020e86:	480a      	ldr	r0, [pc, #40]	; (8020eb0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020e88:	f007 fcab 	bl	80287e2 <__aeabi_atexit>
 8020e8c:	4b05      	ldr	r3, [pc, #20]	; (8020ea4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020e8e:	612b      	str	r3, [r5, #16]
 8020e90:	4b07      	ldr	r3, [pc, #28]	; (8020eb0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020e92:	616b      	str	r3, [r5, #20]
 8020e94:	bd38      	pop	{r3, r4, r5, pc}
 8020e96:	bf00      	nop
 8020e98:	2003bde0 	.word	0x2003bde0
 8020e9c:	20000000 	.word	0x20000000
 8020ea0:	0801f74b 	.word	0x0801f74b
 8020ea4:	2000007c 	.word	0x2000007c
 8020ea8:	2003bde4 	.word	0x2003bde4
 8020eac:	0801f749 	.word	0x0801f749
 8020eb0:	20000080 	.word	0x20000080

08020eb4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020eb4:	b538      	push	{r3, r4, r5, lr}
 8020eb6:	4c15      	ldr	r4, [pc, #84]	; (8020f0c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8020eb8:	4605      	mov	r5, r0
 8020eba:	7823      	ldrb	r3, [r4, #0]
 8020ebc:	f3bf 8f5b 	dmb	ish
 8020ec0:	07da      	lsls	r2, r3, #31
 8020ec2:	d40b      	bmi.n	8020edc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	f007 fc93 	bl	80287f0 <__cxa_guard_acquire>
 8020eca:	b138      	cbz	r0, 8020edc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020ecc:	4620      	mov	r0, r4
 8020ece:	f007 fc9b 	bl	8028808 <__cxa_guard_release>
 8020ed2:	4a0f      	ldr	r2, [pc, #60]	; (8020f10 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020ed4:	490f      	ldr	r1, [pc, #60]	; (8020f14 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8020ed6:	4810      	ldr	r0, [pc, #64]	; (8020f18 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020ed8:	f007 fc83 	bl	80287e2 <__aeabi_atexit>
 8020edc:	4c0f      	ldr	r4, [pc, #60]	; (8020f1c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8020ede:	7823      	ldrb	r3, [r4, #0]
 8020ee0:	f3bf 8f5b 	dmb	ish
 8020ee4:	07db      	lsls	r3, r3, #31
 8020ee6:	d40b      	bmi.n	8020f00 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020ee8:	4620      	mov	r0, r4
 8020eea:	f007 fc81 	bl	80287f0 <__cxa_guard_acquire>
 8020eee:	b138      	cbz	r0, 8020f00 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	f007 fc89 	bl	8028808 <__cxa_guard_release>
 8020ef6:	4a06      	ldr	r2, [pc, #24]	; (8020f10 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020ef8:	4909      	ldr	r1, [pc, #36]	; (8020f20 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8020efa:	480a      	ldr	r0, [pc, #40]	; (8020f24 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020efc:	f007 fc71 	bl	80287e2 <__aeabi_atexit>
 8020f00:	4b05      	ldr	r3, [pc, #20]	; (8020f18 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020f02:	60ab      	str	r3, [r5, #8]
 8020f04:	4b07      	ldr	r3, [pc, #28]	; (8020f24 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020f06:	60eb      	str	r3, [r5, #12]
 8020f08:	bd38      	pop	{r3, r4, r5, pc}
 8020f0a:	bf00      	nop
 8020f0c:	2003bdb8 	.word	0x2003bdb8
 8020f10:	20000000 	.word	0x20000000
 8020f14:	0801f74f 	.word	0x0801f74f
 8020f18:	20000054 	.word	0x20000054
 8020f1c:	2003bdbc 	.word	0x2003bdbc
 8020f20:	0801f74d 	.word	0x0801f74d
 8020f24:	20000058 	.word	0x20000058

08020f28 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8020f28:	b510      	push	{r4, lr}
 8020f2a:	4604      	mov	r4, r0
 8020f2c:	f7ff ff88 	bl	8020e40 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8020f30:	4620      	mov	r0, r4
 8020f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f36:	f7ff bfbd 	b.w	8020eb4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08020f3c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020f3c:	b538      	push	{r3, r4, r5, lr}
 8020f3e:	4c15      	ldr	r4, [pc, #84]	; (8020f94 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020f40:	4605      	mov	r5, r0
 8020f42:	7823      	ldrb	r3, [r4, #0]
 8020f44:	f3bf 8f5b 	dmb	ish
 8020f48:	07da      	lsls	r2, r3, #31
 8020f4a:	d40b      	bmi.n	8020f64 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020f4c:	4620      	mov	r0, r4
 8020f4e:	f007 fc4f 	bl	80287f0 <__cxa_guard_acquire>
 8020f52:	b138      	cbz	r0, 8020f64 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020f54:	4620      	mov	r0, r4
 8020f56:	f007 fc57 	bl	8028808 <__cxa_guard_release>
 8020f5a:	4a0f      	ldr	r2, [pc, #60]	; (8020f98 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020f5c:	490f      	ldr	r1, [pc, #60]	; (8020f9c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020f5e:	4810      	ldr	r0, [pc, #64]	; (8020fa0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020f60:	f007 fc3f 	bl	80287e2 <__aeabi_atexit>
 8020f64:	4c0f      	ldr	r4, [pc, #60]	; (8020fa4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020f66:	7823      	ldrb	r3, [r4, #0]
 8020f68:	f3bf 8f5b 	dmb	ish
 8020f6c:	07db      	lsls	r3, r3, #31
 8020f6e:	d40b      	bmi.n	8020f88 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020f70:	4620      	mov	r0, r4
 8020f72:	f007 fc3d 	bl	80287f0 <__cxa_guard_acquire>
 8020f76:	b138      	cbz	r0, 8020f88 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020f78:	4620      	mov	r0, r4
 8020f7a:	f007 fc45 	bl	8028808 <__cxa_guard_release>
 8020f7e:	4a06      	ldr	r2, [pc, #24]	; (8020f98 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020f80:	4909      	ldr	r1, [pc, #36]	; (8020fa8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020f82:	480a      	ldr	r0, [pc, #40]	; (8020fac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020f84:	f007 fc2d 	bl	80287e2 <__aeabi_atexit>
 8020f88:	4b05      	ldr	r3, [pc, #20]	; (8020fa0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020f8a:	622b      	str	r3, [r5, #32]
 8020f8c:	4b07      	ldr	r3, [pc, #28]	; (8020fac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020f8e:	626b      	str	r3, [r5, #36]	; 0x24
 8020f90:	bd38      	pop	{r3, r4, r5, pc}
 8020f92:	bf00      	nop
 8020f94:	2003bde8 	.word	0x2003bde8
 8020f98:	20000000 	.word	0x20000000
 8020f9c:	0801f743 	.word	0x0801f743
 8020fa0:	20000084 	.word	0x20000084
 8020fa4:	2003bdec 	.word	0x2003bdec
 8020fa8:	0801f741 	.word	0x0801f741
 8020fac:	20000088 	.word	0x20000088

08020fb0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020fb0:	b538      	push	{r3, r4, r5, lr}
 8020fb2:	4c15      	ldr	r4, [pc, #84]	; (8021008 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020fb4:	4605      	mov	r5, r0
 8020fb6:	7823      	ldrb	r3, [r4, #0]
 8020fb8:	f3bf 8f5b 	dmb	ish
 8020fbc:	07da      	lsls	r2, r3, #31
 8020fbe:	d40b      	bmi.n	8020fd8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020fc0:	4620      	mov	r0, r4
 8020fc2:	f007 fc15 	bl	80287f0 <__cxa_guard_acquire>
 8020fc6:	b138      	cbz	r0, 8020fd8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020fc8:	4620      	mov	r0, r4
 8020fca:	f007 fc1d 	bl	8028808 <__cxa_guard_release>
 8020fce:	4a0f      	ldr	r2, [pc, #60]	; (802100c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020fd0:	490f      	ldr	r1, [pc, #60]	; (8021010 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020fd2:	4810      	ldr	r0, [pc, #64]	; (8021014 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020fd4:	f007 fc05 	bl	80287e2 <__aeabi_atexit>
 8020fd8:	4c0f      	ldr	r4, [pc, #60]	; (8021018 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020fda:	7823      	ldrb	r3, [r4, #0]
 8020fdc:	f3bf 8f5b 	dmb	ish
 8020fe0:	07db      	lsls	r3, r3, #31
 8020fe2:	d40b      	bmi.n	8020ffc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020fe4:	4620      	mov	r0, r4
 8020fe6:	f007 fc03 	bl	80287f0 <__cxa_guard_acquire>
 8020fea:	b138      	cbz	r0, 8020ffc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020fec:	4620      	mov	r0, r4
 8020fee:	f007 fc0b 	bl	8028808 <__cxa_guard_release>
 8020ff2:	4a06      	ldr	r2, [pc, #24]	; (802100c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020ff4:	4909      	ldr	r1, [pc, #36]	; (802101c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020ff6:	480a      	ldr	r0, [pc, #40]	; (8021020 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ff8:	f007 fbf3 	bl	80287e2 <__aeabi_atexit>
 8020ffc:	4b05      	ldr	r3, [pc, #20]	; (8021014 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020ffe:	61ab      	str	r3, [r5, #24]
 8021000:	4b07      	ldr	r3, [pc, #28]	; (8021020 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021002:	61eb      	str	r3, [r5, #28]
 8021004:	bd38      	pop	{r3, r4, r5, pc}
 8021006:	bf00      	nop
 8021008:	2003bdc0 	.word	0x2003bdc0
 802100c:	20000000 	.word	0x20000000
 8021010:	0801f747 	.word	0x0801f747
 8021014:	2000005c 	.word	0x2000005c
 8021018:	2003bdc4 	.word	0x2003bdc4
 802101c:	0801f745 	.word	0x0801f745
 8021020:	20000060 	.word	0x20000060

08021024 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8021024:	b510      	push	{r4, lr}
 8021026:	4604      	mov	r4, r0
 8021028:	f7ff ff88 	bl	8020f3c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802102c:	4620      	mov	r0, r4
 802102e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021032:	f7ff bfbd 	b.w	8020fb0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021038 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021038:	b538      	push	{r3, r4, r5, lr}
 802103a:	4c0b      	ldr	r4, [pc, #44]	; (8021068 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 802103c:	4605      	mov	r5, r0
 802103e:	7823      	ldrb	r3, [r4, #0]
 8021040:	f3bf 8f5b 	dmb	ish
 8021044:	07db      	lsls	r3, r3, #31
 8021046:	d40b      	bmi.n	8021060 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021048:	4620      	mov	r0, r4
 802104a:	f007 fbd1 	bl	80287f0 <__cxa_guard_acquire>
 802104e:	b138      	cbz	r0, 8021060 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021050:	4620      	mov	r0, r4
 8021052:	f007 fbd9 	bl	8028808 <__cxa_guard_release>
 8021056:	4a05      	ldr	r2, [pc, #20]	; (802106c <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8021058:	4905      	ldr	r1, [pc, #20]	; (8021070 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 802105a:	4806      	ldr	r0, [pc, #24]	; (8021074 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 802105c:	f007 fbc1 	bl	80287e2 <__aeabi_atexit>
 8021060:	4b04      	ldr	r3, [pc, #16]	; (8021074 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8021062:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021064:	bd38      	pop	{r3, r4, r5, pc}
 8021066:	bf00      	nop
 8021068:	2003bdf8 	.word	0x2003bdf8
 802106c:	20000000 	.word	0x20000000
 8021070:	0801f73d 	.word	0x0801f73d
 8021074:	20000094 	.word	0x20000094

08021078 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021078:	b538      	push	{r3, r4, r5, lr}
 802107a:	4c0b      	ldr	r4, [pc, #44]	; (80210a8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 802107c:	4605      	mov	r5, r0
 802107e:	7823      	ldrb	r3, [r4, #0]
 8021080:	f3bf 8f5b 	dmb	ish
 8021084:	07db      	lsls	r3, r3, #31
 8021086:	d40b      	bmi.n	80210a0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021088:	4620      	mov	r0, r4
 802108a:	f007 fbb1 	bl	80287f0 <__cxa_guard_acquire>
 802108e:	b138      	cbz	r0, 80210a0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021090:	4620      	mov	r0, r4
 8021092:	f007 fbb9 	bl	8028808 <__cxa_guard_release>
 8021096:	4a05      	ldr	r2, [pc, #20]	; (80210ac <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8021098:	4905      	ldr	r1, [pc, #20]	; (80210b0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 802109a:	4806      	ldr	r0, [pc, #24]	; (80210b4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 802109c:	f007 fba1 	bl	80287e2 <__aeabi_atexit>
 80210a0:	4b04      	ldr	r3, [pc, #16]	; (80210b4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 80210a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80210a4:	bd38      	pop	{r3, r4, r5, pc}
 80210a6:	bf00      	nop
 80210a8:	2003bdc8 	.word	0x2003bdc8
 80210ac:	20000000 	.word	0x20000000
 80210b0:	0801f73f 	.word	0x0801f73f
 80210b4:	20000064 	.word	0x20000064

080210b8 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 80210b8:	b510      	push	{r4, lr}
 80210ba:	4604      	mov	r4, r0
 80210bc:	f7ff ffbc 	bl	8021038 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80210c0:	4620      	mov	r0, r4
 80210c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210c6:	f7ff bfd7 	b.w	8021078 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080210cc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80210cc:	b538      	push	{r3, r4, r5, lr}
 80210ce:	4c15      	ldr	r4, [pc, #84]	; (8021124 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80210d0:	4605      	mov	r5, r0
 80210d2:	7823      	ldrb	r3, [r4, #0]
 80210d4:	f3bf 8f5b 	dmb	ish
 80210d8:	07da      	lsls	r2, r3, #31
 80210da:	d40b      	bmi.n	80210f4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80210dc:	4620      	mov	r0, r4
 80210de:	f007 fb87 	bl	80287f0 <__cxa_guard_acquire>
 80210e2:	b138      	cbz	r0, 80210f4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80210e4:	4620      	mov	r0, r4
 80210e6:	f007 fb8f 	bl	8028808 <__cxa_guard_release>
 80210ea:	4a0f      	ldr	r2, [pc, #60]	; (8021128 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80210ec:	490f      	ldr	r1, [pc, #60]	; (802112c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80210ee:	4810      	ldr	r0, [pc, #64]	; (8021130 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80210f0:	f007 fb77 	bl	80287e2 <__aeabi_atexit>
 80210f4:	4c0f      	ldr	r4, [pc, #60]	; (8021134 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80210f6:	7823      	ldrb	r3, [r4, #0]
 80210f8:	f3bf 8f5b 	dmb	ish
 80210fc:	07db      	lsls	r3, r3, #31
 80210fe:	d40b      	bmi.n	8021118 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021100:	4620      	mov	r0, r4
 8021102:	f007 fb75 	bl	80287f0 <__cxa_guard_acquire>
 8021106:	b138      	cbz	r0, 8021118 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021108:	4620      	mov	r0, r4
 802110a:	f007 fb7d 	bl	8028808 <__cxa_guard_release>
 802110e:	4a06      	ldr	r2, [pc, #24]	; (8021128 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021110:	4909      	ldr	r1, [pc, #36]	; (8021138 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021112:	480a      	ldr	r0, [pc, #40]	; (802113c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021114:	f007 fb65 	bl	80287e2 <__aeabi_atexit>
 8021118:	4b05      	ldr	r3, [pc, #20]	; (8021130 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802111a:	64ab      	str	r3, [r5, #72]	; 0x48
 802111c:	4b07      	ldr	r3, [pc, #28]	; (802113c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802111e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021120:	bd38      	pop	{r3, r4, r5, pc}
 8021122:	bf00      	nop
 8021124:	2003bdfc 	.word	0x2003bdfc
 8021128:	20000000 	.word	0x20000000
 802112c:	0801f72f 	.word	0x0801f72f
 8021130:	20000098 	.word	0x20000098
 8021134:	2003be00 	.word	0x2003be00
 8021138:	0801f72d 	.word	0x0801f72d
 802113c:	2000009c 	.word	0x2000009c

08021140 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021140:	b538      	push	{r3, r4, r5, lr}
 8021142:	4c15      	ldr	r4, [pc, #84]	; (8021198 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021144:	4605      	mov	r5, r0
 8021146:	7823      	ldrb	r3, [r4, #0]
 8021148:	f3bf 8f5b 	dmb	ish
 802114c:	07da      	lsls	r2, r3, #31
 802114e:	d40b      	bmi.n	8021168 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021150:	4620      	mov	r0, r4
 8021152:	f007 fb4d 	bl	80287f0 <__cxa_guard_acquire>
 8021156:	b138      	cbz	r0, 8021168 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021158:	4620      	mov	r0, r4
 802115a:	f007 fb55 	bl	8028808 <__cxa_guard_release>
 802115e:	4a0f      	ldr	r2, [pc, #60]	; (802119c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021160:	490f      	ldr	r1, [pc, #60]	; (80211a0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021162:	4810      	ldr	r0, [pc, #64]	; (80211a4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021164:	f007 fb3d 	bl	80287e2 <__aeabi_atexit>
 8021168:	4c0f      	ldr	r4, [pc, #60]	; (80211a8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802116a:	7823      	ldrb	r3, [r4, #0]
 802116c:	f3bf 8f5b 	dmb	ish
 8021170:	07db      	lsls	r3, r3, #31
 8021172:	d40b      	bmi.n	802118c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021174:	4620      	mov	r0, r4
 8021176:	f007 fb3b 	bl	80287f0 <__cxa_guard_acquire>
 802117a:	b138      	cbz	r0, 802118c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802117c:	4620      	mov	r0, r4
 802117e:	f007 fb43 	bl	8028808 <__cxa_guard_release>
 8021182:	4a06      	ldr	r2, [pc, #24]	; (802119c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021184:	4909      	ldr	r1, [pc, #36]	; (80211ac <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8021186:	480a      	ldr	r0, [pc, #40]	; (80211b0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021188:	f007 fb2b 	bl	80287e2 <__aeabi_atexit>
 802118c:	4b05      	ldr	r3, [pc, #20]	; (80211a4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802118e:	642b      	str	r3, [r5, #64]	; 0x40
 8021190:	4b07      	ldr	r3, [pc, #28]	; (80211b0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021192:	646b      	str	r3, [r5, #68]	; 0x44
 8021194:	bd38      	pop	{r3, r4, r5, pc}
 8021196:	bf00      	nop
 8021198:	2003be04 	.word	0x2003be04
 802119c:	20000000 	.word	0x20000000
 80211a0:	0801f737 	.word	0x0801f737
 80211a4:	200000a0 	.word	0x200000a0
 80211a8:	2003be08 	.word	0x2003be08
 80211ac:	0801f735 	.word	0x0801f735
 80211b0:	200000a4 	.word	0x200000a4

080211b4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80211b4:	b538      	push	{r3, r4, r5, lr}
 80211b6:	4c15      	ldr	r4, [pc, #84]	; (802120c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80211b8:	4605      	mov	r5, r0
 80211ba:	7823      	ldrb	r3, [r4, #0]
 80211bc:	f3bf 8f5b 	dmb	ish
 80211c0:	07da      	lsls	r2, r3, #31
 80211c2:	d40b      	bmi.n	80211dc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80211c4:	4620      	mov	r0, r4
 80211c6:	f007 fb13 	bl	80287f0 <__cxa_guard_acquire>
 80211ca:	b138      	cbz	r0, 80211dc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80211cc:	4620      	mov	r0, r4
 80211ce:	f007 fb1b 	bl	8028808 <__cxa_guard_release>
 80211d2:	4a0f      	ldr	r2, [pc, #60]	; (8021210 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80211d4:	490f      	ldr	r1, [pc, #60]	; (8021214 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80211d6:	4810      	ldr	r0, [pc, #64]	; (8021218 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80211d8:	f007 fb03 	bl	80287e2 <__aeabi_atexit>
 80211dc:	4c0f      	ldr	r4, [pc, #60]	; (802121c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80211de:	7823      	ldrb	r3, [r4, #0]
 80211e0:	f3bf 8f5b 	dmb	ish
 80211e4:	07db      	lsls	r3, r3, #31
 80211e6:	d40b      	bmi.n	8021200 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80211e8:	4620      	mov	r0, r4
 80211ea:	f007 fb01 	bl	80287f0 <__cxa_guard_acquire>
 80211ee:	b138      	cbz	r0, 8021200 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80211f0:	4620      	mov	r0, r4
 80211f2:	f007 fb09 	bl	8028808 <__cxa_guard_release>
 80211f6:	4a06      	ldr	r2, [pc, #24]	; (8021210 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80211f8:	4909      	ldr	r1, [pc, #36]	; (8021220 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80211fa:	480a      	ldr	r0, [pc, #40]	; (8021224 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80211fc:	f007 faf1 	bl	80287e2 <__aeabi_atexit>
 8021200:	4b05      	ldr	r3, [pc, #20]	; (8021218 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021202:	63ab      	str	r3, [r5, #56]	; 0x38
 8021204:	4b07      	ldr	r3, [pc, #28]	; (8021224 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021206:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021208:	bd38      	pop	{r3, r4, r5, pc}
 802120a:	bf00      	nop
 802120c:	2003bdd4 	.word	0x2003bdd4
 8021210:	20000000 	.word	0x20000000
 8021214:	0801f733 	.word	0x0801f733
 8021218:	20000070 	.word	0x20000070
 802121c:	2003bdd8 	.word	0x2003bdd8
 8021220:	0801f731 	.word	0x0801f731
 8021224:	20000074 	.word	0x20000074

08021228 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021228:	b538      	push	{r3, r4, r5, lr}
 802122a:	4c15      	ldr	r4, [pc, #84]	; (8021280 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802122c:	4605      	mov	r5, r0
 802122e:	7823      	ldrb	r3, [r4, #0]
 8021230:	f3bf 8f5b 	dmb	ish
 8021234:	07da      	lsls	r2, r3, #31
 8021236:	d40b      	bmi.n	8021250 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021238:	4620      	mov	r0, r4
 802123a:	f007 fad9 	bl	80287f0 <__cxa_guard_acquire>
 802123e:	b138      	cbz	r0, 8021250 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021240:	4620      	mov	r0, r4
 8021242:	f007 fae1 	bl	8028808 <__cxa_guard_release>
 8021246:	4a0f      	ldr	r2, [pc, #60]	; (8021284 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021248:	490f      	ldr	r1, [pc, #60]	; (8021288 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802124a:	4810      	ldr	r0, [pc, #64]	; (802128c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802124c:	f007 fac9 	bl	80287e2 <__aeabi_atexit>
 8021250:	4c0f      	ldr	r4, [pc, #60]	; (8021290 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021252:	7823      	ldrb	r3, [r4, #0]
 8021254:	f3bf 8f5b 	dmb	ish
 8021258:	07db      	lsls	r3, r3, #31
 802125a:	d40b      	bmi.n	8021274 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802125c:	4620      	mov	r0, r4
 802125e:	f007 fac7 	bl	80287f0 <__cxa_guard_acquire>
 8021262:	b138      	cbz	r0, 8021274 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021264:	4620      	mov	r0, r4
 8021266:	f007 facf 	bl	8028808 <__cxa_guard_release>
 802126a:	4a06      	ldr	r2, [pc, #24]	; (8021284 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802126c:	4909      	ldr	r1, [pc, #36]	; (8021294 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802126e:	480a      	ldr	r0, [pc, #40]	; (8021298 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021270:	f007 fab7 	bl	80287e2 <__aeabi_atexit>
 8021274:	4b05      	ldr	r3, [pc, #20]	; (802128c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021276:	632b      	str	r3, [r5, #48]	; 0x30
 8021278:	4b07      	ldr	r3, [pc, #28]	; (8021298 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802127a:	636b      	str	r3, [r5, #52]	; 0x34
 802127c:	bd38      	pop	{r3, r4, r5, pc}
 802127e:	bf00      	nop
 8021280:	2003bdf0 	.word	0x2003bdf0
 8021284:	20000000 	.word	0x20000000
 8021288:	0801f73b 	.word	0x0801f73b
 802128c:	2000008c 	.word	0x2000008c
 8021290:	2003bdf4 	.word	0x2003bdf4
 8021294:	0801f739 	.word	0x0801f739
 8021298:	20000090 	.word	0x20000090

0802129c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 802129c:	b510      	push	{r4, lr}
 802129e:	4604      	mov	r4, r0
 80212a0:	f7ff ff14 	bl	80210cc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80212a4:	4620      	mov	r0, r4
 80212a6:	f7ff ff85 	bl	80211b4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80212aa:	4620      	mov	r0, r4
 80212ac:	f7ff ff48 	bl	8021140 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80212b0:	4620      	mov	r0, r4
 80212b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212b6:	f7ff bfb7 	b.w	8021228 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080212bc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80212bc:	b538      	push	{r3, r4, r5, lr}
 80212be:	4c15      	ldr	r4, [pc, #84]	; (8021314 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80212c0:	4605      	mov	r5, r0
 80212c2:	7823      	ldrb	r3, [r4, #0]
 80212c4:	f3bf 8f5b 	dmb	ish
 80212c8:	07da      	lsls	r2, r3, #31
 80212ca:	d40b      	bmi.n	80212e4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80212cc:	4620      	mov	r0, r4
 80212ce:	f007 fa8f 	bl	80287f0 <__cxa_guard_acquire>
 80212d2:	b138      	cbz	r0, 80212e4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80212d4:	4620      	mov	r0, r4
 80212d6:	f007 fa97 	bl	8028808 <__cxa_guard_release>
 80212da:	4a0f      	ldr	r2, [pc, #60]	; (8021318 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80212dc:	490f      	ldr	r1, [pc, #60]	; (802131c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80212de:	4810      	ldr	r0, [pc, #64]	; (8021320 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80212e0:	f007 fa7f 	bl	80287e2 <__aeabi_atexit>
 80212e4:	4c0f      	ldr	r4, [pc, #60]	; (8021324 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80212e6:	7823      	ldrb	r3, [r4, #0]
 80212e8:	f3bf 8f5b 	dmb	ish
 80212ec:	07db      	lsls	r3, r3, #31
 80212ee:	d40b      	bmi.n	8021308 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80212f0:	4620      	mov	r0, r4
 80212f2:	f007 fa7d 	bl	80287f0 <__cxa_guard_acquire>
 80212f6:	b138      	cbz	r0, 8021308 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80212f8:	4620      	mov	r0, r4
 80212fa:	f007 fa85 	bl	8028808 <__cxa_guard_release>
 80212fe:	4a06      	ldr	r2, [pc, #24]	; (8021318 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021300:	4909      	ldr	r1, [pc, #36]	; (8021328 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021302:	480a      	ldr	r0, [pc, #40]	; (802132c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021304:	f007 fa6d 	bl	80287e2 <__aeabi_atexit>
 8021308:	4b05      	ldr	r3, [pc, #20]	; (8021320 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802130a:	65ab      	str	r3, [r5, #88]	; 0x58
 802130c:	4b07      	ldr	r3, [pc, #28]	; (802132c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802130e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021310:	bd38      	pop	{r3, r4, r5, pc}
 8021312:	bf00      	nop
 8021314:	2003bdcc 	.word	0x2003bdcc
 8021318:	20000000 	.word	0x20000000
 802131c:	0801f727 	.word	0x0801f727
 8021320:	20000068 	.word	0x20000068
 8021324:	2003bdd0 	.word	0x2003bdd0
 8021328:	0801f725 	.word	0x0801f725
 802132c:	2000006c 	.word	0x2000006c

08021330 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021330:	b538      	push	{r3, r4, r5, lr}
 8021332:	4c15      	ldr	r4, [pc, #84]	; (8021388 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021334:	4605      	mov	r5, r0
 8021336:	7823      	ldrb	r3, [r4, #0]
 8021338:	f3bf 8f5b 	dmb	ish
 802133c:	07da      	lsls	r2, r3, #31
 802133e:	d40b      	bmi.n	8021358 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021340:	4620      	mov	r0, r4
 8021342:	f007 fa55 	bl	80287f0 <__cxa_guard_acquire>
 8021346:	b138      	cbz	r0, 8021358 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021348:	4620      	mov	r0, r4
 802134a:	f007 fa5d 	bl	8028808 <__cxa_guard_release>
 802134e:	4a0f      	ldr	r2, [pc, #60]	; (802138c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021350:	490f      	ldr	r1, [pc, #60]	; (8021390 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021352:	4810      	ldr	r0, [pc, #64]	; (8021394 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021354:	f007 fa45 	bl	80287e2 <__aeabi_atexit>
 8021358:	4c0f      	ldr	r4, [pc, #60]	; (8021398 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802135a:	7823      	ldrb	r3, [r4, #0]
 802135c:	f3bf 8f5b 	dmb	ish
 8021360:	07db      	lsls	r3, r3, #31
 8021362:	d40b      	bmi.n	802137c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021364:	4620      	mov	r0, r4
 8021366:	f007 fa43 	bl	80287f0 <__cxa_guard_acquire>
 802136a:	b138      	cbz	r0, 802137c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802136c:	4620      	mov	r0, r4
 802136e:	f007 fa4b 	bl	8028808 <__cxa_guard_release>
 8021372:	4a06      	ldr	r2, [pc, #24]	; (802138c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021374:	4909      	ldr	r1, [pc, #36]	; (802139c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021376:	480a      	ldr	r0, [pc, #40]	; (80213a0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021378:	f007 fa33 	bl	80287e2 <__aeabi_atexit>
 802137c:	4b05      	ldr	r3, [pc, #20]	; (8021394 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802137e:	652b      	str	r3, [r5, #80]	; 0x50
 8021380:	4b07      	ldr	r3, [pc, #28]	; (80213a0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021382:	656b      	str	r3, [r5, #84]	; 0x54
 8021384:	bd38      	pop	{r3, r4, r5, pc}
 8021386:	bf00      	nop
 8021388:	2003bda4 	.word	0x2003bda4
 802138c:	20000000 	.word	0x20000000
 8021390:	0801f72b 	.word	0x0801f72b
 8021394:	20000040 	.word	0x20000040
 8021398:	2003bda8 	.word	0x2003bda8
 802139c:	0801f729 	.word	0x0801f729
 80213a0:	20000044 	.word	0x20000044

080213a4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 80213a4:	b510      	push	{r4, lr}
 80213a6:	4604      	mov	r4, r0
 80213a8:	f7ff ff88 	bl	80212bc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80213ac:	4620      	mov	r0, r4
 80213ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213b2:	f7ff bfbd 	b.w	8021330 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080213b8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80213b8:	b538      	push	{r3, r4, r5, lr}
 80213ba:	4c0b      	ldr	r4, [pc, #44]	; (80213e8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 80213bc:	4605      	mov	r5, r0
 80213be:	7823      	ldrb	r3, [r4, #0]
 80213c0:	f3bf 8f5b 	dmb	ish
 80213c4:	07db      	lsls	r3, r3, #31
 80213c6:	d40b      	bmi.n	80213e0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80213c8:	4620      	mov	r0, r4
 80213ca:	f007 fa11 	bl	80287f0 <__cxa_guard_acquire>
 80213ce:	b138      	cbz	r0, 80213e0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80213d0:	4620      	mov	r0, r4
 80213d2:	f007 fa19 	bl	8028808 <__cxa_guard_release>
 80213d6:	4a05      	ldr	r2, [pc, #20]	; (80213ec <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 80213d8:	4905      	ldr	r1, [pc, #20]	; (80213f0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 80213da:	4806      	ldr	r0, [pc, #24]	; (80213f4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80213dc:	f007 fa01 	bl	80287e2 <__aeabi_atexit>
 80213e0:	4b04      	ldr	r3, [pc, #16]	; (80213f4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80213e2:	666b      	str	r3, [r5, #100]	; 0x64
 80213e4:	bd38      	pop	{r3, r4, r5, pc}
 80213e6:	bf00      	nop
 80213e8:	2003bddc 	.word	0x2003bddc
 80213ec:	20000000 	.word	0x20000000
 80213f0:	0801f721 	.word	0x0801f721
 80213f4:	20000078 	.word	0x20000078

080213f8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80213f8:	b538      	push	{r3, r4, r5, lr}
 80213fa:	4c0b      	ldr	r4, [pc, #44]	; (8021428 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 80213fc:	4605      	mov	r5, r0
 80213fe:	7823      	ldrb	r3, [r4, #0]
 8021400:	f3bf 8f5b 	dmb	ish
 8021404:	07db      	lsls	r3, r3, #31
 8021406:	d40b      	bmi.n	8021420 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021408:	4620      	mov	r0, r4
 802140a:	f007 f9f1 	bl	80287f0 <__cxa_guard_acquire>
 802140e:	b138      	cbz	r0, 8021420 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021410:	4620      	mov	r0, r4
 8021412:	f007 f9f9 	bl	8028808 <__cxa_guard_release>
 8021416:	4a05      	ldr	r2, [pc, #20]	; (802142c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8021418:	4905      	ldr	r1, [pc, #20]	; (8021430 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 802141a:	4806      	ldr	r0, [pc, #24]	; (8021434 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 802141c:	f007 f9e1 	bl	80287e2 <__aeabi_atexit>
 8021420:	4b04      	ldr	r3, [pc, #16]	; (8021434 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8021422:	662b      	str	r3, [r5, #96]	; 0x60
 8021424:	bd38      	pop	{r3, r4, r5, pc}
 8021426:	bf00      	nop
 8021428:	2003bdb4 	.word	0x2003bdb4
 802142c:	20000000 	.word	0x20000000
 8021430:	0801f723 	.word	0x0801f723
 8021434:	20000050 	.word	0x20000050

08021438 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8021438:	b510      	push	{r4, lr}
 802143a:	4604      	mov	r4, r0
 802143c:	f7ff ffbc 	bl	80213b8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021440:	4620      	mov	r0, r4
 8021442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021446:	f7ff bfd7 	b.w	80213f8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802144c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802144c:	b538      	push	{r3, r4, r5, lr}
 802144e:	4c15      	ldr	r4, [pc, #84]	; (80214a4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021450:	4605      	mov	r5, r0
 8021452:	7823      	ldrb	r3, [r4, #0]
 8021454:	f3bf 8f5b 	dmb	ish
 8021458:	07da      	lsls	r2, r3, #31
 802145a:	d40b      	bmi.n	8021474 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802145c:	4620      	mov	r0, r4
 802145e:	f007 f9c7 	bl	80287f0 <__cxa_guard_acquire>
 8021462:	b138      	cbz	r0, 8021474 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021464:	4620      	mov	r0, r4
 8021466:	f007 f9cf 	bl	8028808 <__cxa_guard_release>
 802146a:	4a0f      	ldr	r2, [pc, #60]	; (80214a8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802146c:	490f      	ldr	r1, [pc, #60]	; (80214ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802146e:	4810      	ldr	r0, [pc, #64]	; (80214b0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021470:	f007 f9b7 	bl	80287e2 <__aeabi_atexit>
 8021474:	4c0f      	ldr	r4, [pc, #60]	; (80214b4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021476:	7823      	ldrb	r3, [r4, #0]
 8021478:	f3bf 8f5b 	dmb	ish
 802147c:	07db      	lsls	r3, r3, #31
 802147e:	d40b      	bmi.n	8021498 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021480:	4620      	mov	r0, r4
 8021482:	f007 f9b5 	bl	80287f0 <__cxa_guard_acquire>
 8021486:	b138      	cbz	r0, 8021498 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021488:	4620      	mov	r0, r4
 802148a:	f007 f9bd 	bl	8028808 <__cxa_guard_release>
 802148e:	4a06      	ldr	r2, [pc, #24]	; (80214a8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021490:	4909      	ldr	r1, [pc, #36]	; (80214b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021492:	480a      	ldr	r0, [pc, #40]	; (80214bc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021494:	f007 f9a5 	bl	80287e2 <__aeabi_atexit>
 8021498:	4b05      	ldr	r3, [pc, #20]	; (80214b0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802149a:	672b      	str	r3, [r5, #112]	; 0x70
 802149c:	4b07      	ldr	r3, [pc, #28]	; (80214bc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802149e:	676b      	str	r3, [r5, #116]	; 0x74
 80214a0:	bd38      	pop	{r3, r4, r5, pc}
 80214a2:	bf00      	nop
 80214a4:	2003bdac 	.word	0x2003bdac
 80214a8:	20000000 	.word	0x20000000
 80214ac:	0801f71b 	.word	0x0801f71b
 80214b0:	20000048 	.word	0x20000048
 80214b4:	2003bdb0 	.word	0x2003bdb0
 80214b8:	0801f719 	.word	0x0801f719
 80214bc:	2000004c 	.word	0x2000004c

080214c0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 80214c0:	b538      	push	{r3, r4, r5, lr}
 80214c2:	4c15      	ldr	r4, [pc, #84]	; (8021518 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80214c4:	4605      	mov	r5, r0
 80214c6:	7823      	ldrb	r3, [r4, #0]
 80214c8:	f3bf 8f5b 	dmb	ish
 80214cc:	07da      	lsls	r2, r3, #31
 80214ce:	d40b      	bmi.n	80214e8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80214d0:	4620      	mov	r0, r4
 80214d2:	f007 f98d 	bl	80287f0 <__cxa_guard_acquire>
 80214d6:	b138      	cbz	r0, 80214e8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80214d8:	4620      	mov	r0, r4
 80214da:	f007 f995 	bl	8028808 <__cxa_guard_release>
 80214de:	4a0f      	ldr	r2, [pc, #60]	; (802151c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80214e0:	490f      	ldr	r1, [pc, #60]	; (8021520 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80214e2:	4810      	ldr	r0, [pc, #64]	; (8021524 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80214e4:	f007 f97d 	bl	80287e2 <__aeabi_atexit>
 80214e8:	4c0f      	ldr	r4, [pc, #60]	; (8021528 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80214ea:	7823      	ldrb	r3, [r4, #0]
 80214ec:	f3bf 8f5b 	dmb	ish
 80214f0:	07db      	lsls	r3, r3, #31
 80214f2:	d40b      	bmi.n	802150c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80214f4:	4620      	mov	r0, r4
 80214f6:	f007 f97b 	bl	80287f0 <__cxa_guard_acquire>
 80214fa:	b138      	cbz	r0, 802150c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80214fc:	4620      	mov	r0, r4
 80214fe:	f007 f983 	bl	8028808 <__cxa_guard_release>
 8021502:	4a06      	ldr	r2, [pc, #24]	; (802151c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021504:	4909      	ldr	r1, [pc, #36]	; (802152c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021506:	480a      	ldr	r0, [pc, #40]	; (8021530 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021508:	f007 f96b 	bl	80287e2 <__aeabi_atexit>
 802150c:	4b05      	ldr	r3, [pc, #20]	; (8021524 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802150e:	66ab      	str	r3, [r5, #104]	; 0x68
 8021510:	4b07      	ldr	r3, [pc, #28]	; (8021530 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021512:	66eb      	str	r3, [r5, #108]	; 0x6c
 8021514:	bd38      	pop	{r3, r4, r5, pc}
 8021516:	bf00      	nop
 8021518:	2003bd9c 	.word	0x2003bd9c
 802151c:	20000000 	.word	0x20000000
 8021520:	0801f71f 	.word	0x0801f71f
 8021524:	20000038 	.word	0x20000038
 8021528:	2003bda0 	.word	0x2003bda0
 802152c:	0801f71d 	.word	0x0801f71d
 8021530:	2000003c 	.word	0x2000003c

08021534 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 8021534:	b510      	push	{r4, lr}
 8021536:	4604      	mov	r4, r0
 8021538:	f7ff ff88 	bl	802144c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802153c:	4620      	mov	r0, r4
 802153e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021542:	f7ff bfbd 	b.w	80214c0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

08021546 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 8021546:	b510      	push	{r4, lr}
 8021548:	4604      	mov	r4, r0
 802154a:	f7ff fff3 	bl	8021534 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 802154e:	4620      	mov	r0, r4
 8021550:	f7ff ff72 	bl	8021438 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 8021554:	4620      	mov	r0, r4
 8021556:	f7ff fdaf 	bl	80210b8 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 802155a:	4620      	mov	r0, r4
 802155c:	f7ff fce4 	bl	8020f28 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 8021560:	4620      	mov	r0, r4
 8021562:	f7ff fd5f 	bl	8021024 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 8021566:	4620      	mov	r0, r4
 8021568:	f7ff fe98 	bl	802129c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 802156c:	4620      	mov	r0, r4
 802156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021572:	f7ff bf17 	b.w	80213a4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>

08021576 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 8021576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802157a:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 802157e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021582:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021586:	f1b8 0f00 	cmp.w	r8, #0
 802158a:	fb08 640e 	mla	r4, r8, lr, r6
 802158e:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8021592:	9001      	str	r0, [sp, #4]
 8021594:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021598:	eb02 0a04 	add.w	sl, r2, r4
 802159c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80215a0:	6808      	ldr	r0, [r1, #0]
 80215a2:	f2c0 80dc 	blt.w	802175e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 80215a6:	45c3      	cmp	fp, r8
 80215a8:	f340 80d9 	ble.w	802175e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 80215ac:	2e00      	cmp	r6, #0
 80215ae:	f2c0 80d4 	blt.w	802175a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 80215b2:	45b6      	cmp	lr, r6
 80215b4:	f340 80d1 	ble.w	802175a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 80215b8:	5d12      	ldrb	r2, [r2, r4]
 80215ba:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80215be:	ea4f 222c 	mov.w	r2, ip, asr #8
 80215c2:	ea4f 04ec 	mov.w	r4, ip, asr #3
 80215c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80215ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80215ce:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80215d2:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 80215d6:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 80215da:	fa5f fc8c 	uxtb.w	ip, ip
 80215de:	0212      	lsls	r2, r2, #8
 80215e0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80215e4:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80215e8:	ea42 020c 	orr.w	r2, r2, ip
 80215ec:	1c74      	adds	r4, r6, #1
 80215ee:	f100 80b7 	bmi.w	8021760 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80215f2:	45a6      	cmp	lr, r4
 80215f4:	f340 80b4 	ble.w	8021760 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80215f8:	2d00      	cmp	r5, #0
 80215fa:	f000 80b1 	beq.w	8021760 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 80215fe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021602:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8021606:	ea4f 04ec 	mov.w	r4, ip, asr #3
 802160a:	ea4f 292c 	mov.w	r9, ip, asr #8
 802160e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021612:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021616:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 802161a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802161e:	fa5f fc8c 	uxtb.w	ip, ip
 8021622:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8021626:	0224      	lsls	r4, r4, #8
 8021628:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802162c:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8021630:	ea49 090c 	orr.w	r9, r9, ip
 8021634:	f118 0801 	adds.w	r8, r8, #1
 8021638:	f100 8096 	bmi.w	8021768 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 802163c:	45c3      	cmp	fp, r8
 802163e:	f340 8093 	ble.w	8021768 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8021642:	9c01      	ldr	r4, [sp, #4]
 8021644:	2c00      	cmp	r4, #0
 8021646:	f000 808f 	beq.w	8021768 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 802164a:	2e00      	cmp	r6, #0
 802164c:	f2c0 808a 	blt.w	8021764 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8021650:	45b6      	cmp	lr, r6
 8021652:	f340 8087 	ble.w	8021764 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8021656:	f81a 400e 	ldrb.w	r4, [sl, lr]
 802165a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 802165e:	ea4f 2824 	mov.w	r8, r4, asr #8
 8021662:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8021666:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 802166a:	00e4      	lsls	r4, r4, #3
 802166c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021670:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 8021674:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 8021678:	b2e4      	uxtb	r4, r4
 802167a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802167e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021682:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 8021686:	ea48 0804 	orr.w	r8, r8, r4
 802168a:	3601      	adds	r6, #1
 802168c:	d419      	bmi.n	80216c2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 802168e:	45b6      	cmp	lr, r6
 8021690:	dd17      	ble.n	80216c2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021692:	b1b5      	cbz	r5, 80216c2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021694:	44d6      	add	lr, sl
 8021696:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802169a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 802169e:	10dc      	asrs	r4, r3, #3
 80216a0:	1218      	asrs	r0, r3, #8
 80216a2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80216a6:	00db      	lsls	r3, r3, #3
 80216a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80216ac:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80216b0:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 80216b4:	b2db      	uxtb	r3, r3
 80216b6:	0220      	lsls	r0, r4, #8
 80216b8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80216bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80216c0:	4318      	orrs	r0, r3
 80216c2:	b2ad      	uxth	r5, r5
 80216c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80216c8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80216cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216d0:	fb05 fa03 	mul.w	sl, r5, r3
 80216d4:	012d      	lsls	r5, r5, #4
 80216d6:	2fff      	cmp	r7, #255	; 0xff
 80216d8:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 80216dc:	f5c5 7b80 	rsb	fp, r5, #256	; 0x100
 80216e0:	eba5 050a 	sub.w	r5, r5, sl
 80216e4:	fa1f fe83 	uxth.w	lr, r3
 80216e8:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 80216ec:	b2ad      	uxth	r5, r5
 80216ee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80216f2:	ebab 0b0e 	sub.w	fp, fp, lr
 80216f6:	fb05 f303 	mul.w	r3, r5, r3
 80216fa:	fa1f fb8b 	uxth.w	fp, fp
 80216fe:	fb05 f509 	mul.w	r5, r5, r9
 8021702:	fb0b 3606 	mla	r6, fp, r6, r3
 8021706:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802170a:	fb0b 5502 	mla	r5, fp, r2, r5
 802170e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021712:	fb0a 6603 	mla	r6, sl, r3, r6
 8021716:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 802171a:	fb0a 5000 	mla	r0, sl, r0, r5
 802171e:	fb0e 6303 	mla	r3, lr, r3, r6
 8021722:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021726:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802172a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 802172e:	fb0e 0303 	mla	r3, lr, r3, r0
 8021732:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802173a:	ea43 0306 	orr.w	r3, r3, r6
 802173e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8021742:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8021746:	b2d4      	uxtb	r4, r2
 8021748:	b2c5      	uxtb	r5, r0
 802174a:	d10f      	bne.n	802176c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 802174c:	700b      	strb	r3, [r1, #0]
 802174e:	7048      	strb	r0, [r1, #1]
 8021750:	708a      	strb	r2, [r1, #2]
 8021752:	70cf      	strb	r7, [r1, #3]
 8021754:	b003      	add	sp, #12
 8021756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802175a:	4602      	mov	r2, r0
 802175c:	e746      	b.n	80215ec <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 802175e:	4602      	mov	r2, r0
 8021760:	4681      	mov	r9, r0
 8021762:	e767      	b.n	8021634 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 8021764:	4680      	mov	r8, r0
 8021766:	e790      	b.n	802168a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 8021768:	4680      	mov	r8, r0
 802176a:	e7aa      	b.n	80216c2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 802176c:	2f00      	cmp	r7, #0
 802176e:	d0f1      	beq.n	8021754 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 8021770:	78ce      	ldrb	r6, [r1, #3]
 8021772:	b2db      	uxtb	r3, r3
 8021774:	fb17 f505 	smulbb	r5, r7, r5
 8021778:	fb07 f206 	mul.w	r2, r7, r6
 802177c:	1c50      	adds	r0, r2, #1
 802177e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021782:	19ba      	adds	r2, r7, r6
 8021784:	1200      	asrs	r0, r0, #8
 8021786:	1a12      	subs	r2, r2, r0
 8021788:	1a30      	subs	r0, r6, r0
 802178a:	780e      	ldrb	r6, [r1, #0]
 802178c:	b2d2      	uxtb	r2, r2
 802178e:	4346      	muls	r6, r0
 8021790:	70ca      	strb	r2, [r1, #3]
 8021792:	fb07 6303 	mla	r3, r7, r3, r6
 8021796:	fb17 f704 	smulbb	r7, r7, r4
 802179a:	fb93 f3f2 	sdiv	r3, r3, r2
 802179e:	700b      	strb	r3, [r1, #0]
 80217a0:	784b      	ldrb	r3, [r1, #1]
 80217a2:	fb00 5303 	mla	r3, r0, r3, r5
 80217a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80217aa:	704b      	strb	r3, [r1, #1]
 80217ac:	788b      	ldrb	r3, [r1, #2]
 80217ae:	fb00 7703 	mla	r7, r0, r3, r7
 80217b2:	fb97 f7f2 	sdiv	r7, r7, r2
 80217b6:	708f      	strb	r7, [r1, #2]
 80217b8:	e7cc      	b.n	8021754 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

080217ba <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80217ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217be:	b097      	sub	sp, #92	; 0x5c
 80217c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80217c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80217c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80217c8:	9014      	str	r0, [sp, #80]	; 0x50
 80217ca:	910c      	str	r1, [sp, #48]	; 0x30
 80217cc:	6850      	ldr	r0, [r2, #4]
 80217ce:	9309      	str	r3, [sp, #36]	; 0x24
 80217d0:	6812      	ldr	r2, [r2, #0]
 80217d2:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
 80217d6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80217da:	e9dd a621 	ldrd	sl, r6, [sp, #132]	; 0x84
 80217de:	fb00 1303 	mla	r3, r0, r3, r1
 80217e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80217e6:	930a      	str	r3, [sp, #40]	; 0x28
 80217e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80217ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217f0:	685f      	ldr	r7, [r3, #4]
 80217f2:	3704      	adds	r7, #4
 80217f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	dc03      	bgt.n	8021802 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80217fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	f340 826a 	ble.w	8021cd6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8021802:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021804:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021808:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802180c:	1e48      	subs	r0, r1, #1
 802180e:	f102 3cff 	add.w	ip, r2, #4294967295
 8021812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021814:	2b00      	cmp	r3, #0
 8021816:	f340 80ce 	ble.w	80219b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802181a:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 802181e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021822:	d406      	bmi.n	8021832 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021824:	4586      	cmp	lr, r0
 8021826:	da04      	bge.n	8021832 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021828:	2b00      	cmp	r3, #0
 802182a:	db02      	blt.n	8021832 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802182c:	4563      	cmp	r3, ip
 802182e:	f2c0 80c3 	blt.w	80219b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8021832:	f11e 0e01 	adds.w	lr, lr, #1
 8021836:	f100 80b3 	bmi.w	80219a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802183a:	4571      	cmp	r1, lr
 802183c:	f2c0 80b0 	blt.w	80219a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021840:	3301      	adds	r3, #1
 8021842:	f100 80ad 	bmi.w	80219a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021846:	429a      	cmp	r2, r3
 8021848:	f2c0 80aa 	blt.w	80219a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802184c:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
 8021850:	f1bb 0f00 	cmp.w	fp, #0
 8021854:	f340 80ce 	ble.w	80219f4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021858:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802185a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802185e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021860:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021864:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021868:	ea5f 422a 	movs.w	r2, sl, asr #16
 802186c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021870:	689b      	ldr	r3, [r3, #8]
 8021872:	f100 8141 	bmi.w	8021af8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021876:	f103 39ff 	add.w	r9, r3, #4294967295
 802187a:	454a      	cmp	r2, r9
 802187c:	f280 813c 	bge.w	8021af8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021880:	f1bc 0f00 	cmp.w	ip, #0
 8021884:	f2c0 8138 	blt.w	8021af8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021888:	f10e 39ff 	add.w	r9, lr, #4294967295
 802188c:	45cc      	cmp	ip, r9
 802188e:	f280 8133 	bge.w	8021af8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021892:	b21b      	sxth	r3, r3
 8021894:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021896:	fb0c 2203 	mla	r2, ip, r3, r2
 802189a:	eb05 0902 	add.w	r9, r5, r2
 802189e:	5caa      	ldrb	r2, [r5, r2]
 80218a0:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80218a4:	2800      	cmp	r0, #0
 80218a6:	f000 80e9 	beq.w	8021a7c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 80218aa:	f899 2001 	ldrb.w	r2, [r9, #1]
 80218ae:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80218b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80218b4:	b151      	cbz	r1, 80218cc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80218b6:	eb09 0203 	add.w	r2, r9, r3
 80218ba:	f819 3003 	ldrb.w	r3, [r9, r3]
 80218be:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80218c2:	930d      	str	r3, [sp, #52]	; 0x34
 80218c4:	7853      	ldrb	r3, [r2, #1]
 80218c6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80218ca:	9310      	str	r3, [sp, #64]	; 0x40
 80218cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80218ce:	fb10 f201 	smulbb	r2, r0, r1
 80218d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80218d4:	2cff      	cmp	r4, #255	; 0xff
 80218d6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80218da:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80218de:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80218e2:	ea4f 02e2 	mov.w	r2, r2, asr #3
 80218e6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80218ea:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80218ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80218f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80218f4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80218f8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80218fc:	ea43 0305 	orr.w	r3, r3, r5
 8021900:	fb02 f303 	mul.w	r3, r2, r3
 8021904:	fb09 330c 	mla	r3, r9, ip, r3
 8021908:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802190c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021910:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021914:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021918:	f1c1 0c10 	rsb	ip, r1, #16
 802191c:	ebac 0c00 	sub.w	ip, ip, r0
 8021920:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021924:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021928:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802192c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802192e:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8021932:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021936:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802193a:	ea40 0003 	orr.w	r0, r0, r3
 802193e:	fb02 c200 	mla	r2, r2, r0, ip
 8021942:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8021946:	ea4f 1252 	mov.w	r2, r2, lsr #5
 802194a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802194e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021952:	ea42 0203 	orr.w	r2, r2, r3
 8021956:	b293      	uxth	r3, r2
 8021958:	ea4f 2223 	mov.w	r2, r3, asr #8
 802195c:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8021960:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8021964:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021968:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802196c:	b2db      	uxtb	r3, r3
 802196e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021972:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021976:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802197a:	f040 8088 	bne.w	8021a8e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802197e:	f888 3000 	strb.w	r3, [r8]
 8021982:	f888 1001 	strb.w	r1, [r8, #1]
 8021986:	f888 2002 	strb.w	r2, [r8, #2]
 802198a:	f888 4003 	strb.w	r4, [r8, #3]
 802198e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021990:	f108 0804 	add.w	r8, r8, #4
 8021994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021998:	449a      	add	sl, r3
 802199a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802199c:	441e      	add	r6, r3
 802199e:	e757      	b.n	8021850 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80219a2:	449a      	add	sl, r3
 80219a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219a6:	441e      	add	r6, r3
 80219a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219aa:	3b01      	subs	r3, #1
 80219ac:	9309      	str	r3, [sp, #36]	; 0x24
 80219ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219b0:	3304      	adds	r3, #4
 80219b2:	930a      	str	r3, [sp, #40]	; 0x28
 80219b4:	e72d      	b.n	8021812 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80219b6:	d024      	beq.n	8021a02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80219b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80219bc:	3b01      	subs	r3, #1
 80219be:	fb00 a003 	mla	r0, r0, r3, sl
 80219c2:	1400      	asrs	r0, r0, #16
 80219c4:	f53f af42 	bmi.w	802184c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219c8:	3901      	subs	r1, #1
 80219ca:	4288      	cmp	r0, r1
 80219cc:	f6bf af3e 	bge.w	802184c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80219d2:	fb01 6303 	mla	r3, r1, r3, r6
 80219d6:	141b      	asrs	r3, r3, #16
 80219d8:	f53f af38 	bmi.w	802184c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219dc:	3a01      	subs	r2, #1
 80219de:	4293      	cmp	r3, r2
 80219e0:	f6bf af34 	bge.w	802184c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80219ea:	3304      	adds	r3, #4
 80219ec:	f1b9 0f00 	cmp.w	r9, #0
 80219f0:	f300 80a1 	bgt.w	8021b36 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80219f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80219fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8021a00:	930a      	str	r3, [sp, #40]	; 0x28
 8021a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	f340 8166 	ble.w	8021cd6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8021a0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a14:	eeb0 6a62 	vmov.f32	s12, s5
 8021a18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021a1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021a24:	ee16 aa10 	vmov	sl, s12
 8021a28:	eeb0 6a43 	vmov.f32	s12, s6
 8021a2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021a30:	ee16 6a10 	vmov	r6, s12
 8021a34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a4c:	ee12 2a90 	vmov	r2, s5
 8021a50:	eef0 2a47 	vmov.f32	s5, s14
 8021a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a58:	ee13 2a10 	vmov	r2, s6
 8021a5c:	9323      	str	r3, [sp, #140]	; 0x8c
 8021a5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a60:	eeb0 3a67 	vmov.f32	s6, s15
 8021a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a68:	9324      	str	r3, [sp, #144]	; 0x90
 8021a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a6e:	3b01      	subs	r3, #1
 8021a70:	930c      	str	r3, [sp, #48]	; 0x30
 8021a72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a74:	bf08      	it	eq
 8021a76:	4613      	moveq	r3, r2
 8021a78:	9309      	str	r3, [sp, #36]	; 0x24
 8021a7a:	e6bb      	b.n	80217f4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021a7c:	2900      	cmp	r1, #0
 8021a7e:	f43f af25 	beq.w	80218cc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021a82:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021a86:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8021a8c:	e71e      	b.n	80218cc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021a8e:	2c00      	cmp	r4, #0
 8021a90:	f43f af7d 	beq.w	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021a94:	f898 e003 	ldrb.w	lr, [r8, #3]
 8021a98:	fb13 f304 	smulbb	r3, r3, r4
 8021a9c:	fb14 f101 	smulbb	r1, r4, r1
 8021aa0:	fb14 f202 	smulbb	r2, r4, r2
 8021aa4:	fb04 fc0e 	mul.w	ip, r4, lr
 8021aa8:	f10c 0001 	add.w	r0, ip, #1
 8021aac:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8021ab0:	eb04 0c0e 	add.w	ip, r4, lr
 8021ab4:	1200      	asrs	r0, r0, #8
 8021ab6:	ebac 0c00 	sub.w	ip, ip, r0
 8021aba:	ebae 0000 	sub.w	r0, lr, r0
 8021abe:	f898 e000 	ldrb.w	lr, [r8]
 8021ac2:	fa5f fc8c 	uxtb.w	ip, ip
 8021ac6:	fb00 330e 	mla	r3, r0, lr, r3
 8021aca:	f888 c003 	strb.w	ip, [r8, #3]
 8021ace:	fb93 f3fc 	sdiv	r3, r3, ip
 8021ad2:	f888 3000 	strb.w	r3, [r8]
 8021ad6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8021ada:	fb00 1103 	mla	r1, r0, r3, r1
 8021ade:	f898 3002 	ldrb.w	r3, [r8, #2]
 8021ae2:	fb00 2003 	mla	r0, r0, r3, r2
 8021ae6:	fb91 f1fc 	sdiv	r1, r1, ip
 8021aea:	fb90 f0fc 	sdiv	r0, r0, ip
 8021aee:	f888 1001 	strb.w	r1, [r8, #1]
 8021af2:	f888 0002 	strb.w	r0, [r8, #2]
 8021af6:	e74a      	b.n	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021af8:	f112 0901 	adds.w	r9, r2, #1
 8021afc:	f53f af47 	bmi.w	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021b00:	454b      	cmp	r3, r9
 8021b02:	f6ff af44 	blt.w	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021b06:	f11c 0901 	adds.w	r9, ip, #1
 8021b0a:	f53f af40 	bmi.w	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021b0e:	45ce      	cmp	lr, r9
 8021b10:	f6ff af3d 	blt.w	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021b14:	9202      	str	r2, [sp, #8]
 8021b16:	b21b      	sxth	r3, r3
 8021b18:	fa0f f28e 	sxth.w	r2, lr
 8021b1c:	9300      	str	r3, [sp, #0]
 8021b1e:	463b      	mov	r3, r7
 8021b20:	9201      	str	r2, [sp, #4]
 8021b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b24:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021b28:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021b2c:	4641      	mov	r1, r8
 8021b2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021b30:	f7ff fd21 	bl	8021576 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8021b34:	e72b      	b.n	802198e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021b36:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021b38:	ea4f 412a 	mov.w	r1, sl, asr #16
 8021b3c:	1430      	asrs	r0, r6, #16
 8021b3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021b40:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021b44:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8021b48:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021b4c:	fb02 1000 	mla	r0, r2, r0, r1
 8021b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021b52:	4401      	add	r1, r0
 8021b54:	5c28      	ldrb	r0, [r5, r0]
 8021b56:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8021b5a:	f1b8 0f00 	cmp.w	r8, #0
 8021b5e:	d07d      	beq.n	8021c5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8021b60:	f891 e001 	ldrb.w	lr, [r1, #1]
 8021b64:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8021b68:	9511      	str	r5, [sp, #68]	; 0x44
 8021b6a:	f1bc 0f00 	cmp.w	ip, #0
 8021b6e:	d00a      	beq.n	8021b86 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021b70:	eb01 0e02 	add.w	lr, r1, r2
 8021b74:	5c8a      	ldrb	r2, [r1, r2]
 8021b76:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021b7a:	920e      	str	r2, [sp, #56]	; 0x38
 8021b7c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021b80:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021b84:	9212      	str	r2, [sp, #72]	; 0x48
 8021b86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021b88:	fb18 f10c 	smulbb	r1, r8, ip
 8021b8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021b8e:	2cff      	cmp	r4, #255	; 0xff
 8021b90:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8021b94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b98:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8021b9c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8021ba0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021ba4:	ea4e 0e02 	orr.w	lr, lr, r2
 8021ba8:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8021bac:	9215      	str	r2, [sp, #84]	; 0x54
 8021bae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021bb2:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8021bb6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021bba:	ea42 020b 	orr.w	r2, r2, fp
 8021bbe:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021bc2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021bc6:	fb01 f202 	mul.w	r2, r1, r2
 8021bca:	fb05 2e0e 	mla	lr, r5, lr, r2
 8021bce:	f00b 62fc 	and.w	r2, fp, #132120576	; 0x7e00000
 8021bd2:	ea42 0b00 	orr.w	fp, r2, r0
 8021bd6:	f1cc 0010 	rsb	r0, ip, #16
 8021bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bdc:	eba0 0808 	sub.w	r8, r0, r8
 8021be0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8021be4:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8021be8:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021bec:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021bf0:	f422 68fc 	bic.w	r8, r2, #2016	; 0x7e0
 8021bf4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021bf8:	ea4b 0808 	orr.w	r8, fp, r8
 8021bfc:	fb01 ee08 	mla	lr, r1, r8, lr
 8021c00:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021c04:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021c08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c0c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021c10:	ea42 0e0e 	orr.w	lr, r2, lr
 8021c14:	fa1f f28e 	uxth.w	r2, lr
 8021c18:	ea4f 2122 	mov.w	r1, r2, asr #8
 8021c1c:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8021c20:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8021c24:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021c28:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021c2c:	b2d2      	uxtb	r2, r2
 8021c2e:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021c32:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8021c36:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021c3a:	d117      	bne.n	8021c6c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8021c3c:	f803 2c04 	strb.w	r2, [r3, #-4]
 8021c40:	f803 0c03 	strb.w	r0, [r3, #-3]
 8021c44:	f803 1c02 	strb.w	r1, [r3, #-2]
 8021c48:	f803 4c01 	strb.w	r4, [r3, #-1]
 8021c4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021c4e:	3304      	adds	r3, #4
 8021c50:	f109 39ff 	add.w	r9, r9, #4294967295
 8021c54:	4492      	add	sl, r2
 8021c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021c58:	4416      	add	r6, r2
 8021c5a:	e6c7      	b.n	80219ec <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021c5c:	f1bc 0f00 	cmp.w	ip, #0
 8021c60:	d091      	beq.n	8021b86 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021c62:	5c8a      	ldrb	r2, [r1, r2]
 8021c64:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021c68:	920e      	str	r2, [sp, #56]	; 0x38
 8021c6a:	e78c      	b.n	8021b86 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021c6c:	2c00      	cmp	r4, #0
 8021c6e:	d0ed      	beq.n	8021c4c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8021c70:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8021c74:	fb12 f204 	smulbb	r2, r2, r4
 8021c78:	fb14 f000 	smulbb	r0, r4, r0
 8021c7c:	fb14 f101 	smulbb	r1, r4, r1
 8021c80:	fb04 fc08 	mul.w	ip, r4, r8
 8021c84:	f10c 0e01 	add.w	lr, ip, #1
 8021c88:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021c8c:	eb04 0c08 	add.w	ip, r4, r8
 8021c90:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021c94:	ebac 0c0e 	sub.w	ip, ip, lr
 8021c98:	eba8 0e0e 	sub.w	lr, r8, lr
 8021c9c:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8021ca0:	fa5f fc8c 	uxtb.w	ip, ip
 8021ca4:	fb0e 2208 	mla	r2, lr, r8, r2
 8021ca8:	f803 cc01 	strb.w	ip, [r3, #-1]
 8021cac:	fb92 f2fc 	sdiv	r2, r2, ip
 8021cb0:	f803 2c04 	strb.w	r2, [r3, #-4]
 8021cb4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8021cb8:	fb0e 0002 	mla	r0, lr, r2, r0
 8021cbc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8021cc0:	fb0e 1e02 	mla	lr, lr, r2, r1
 8021cc4:	fb90 f0fc 	sdiv	r0, r0, ip
 8021cc8:	fb9e fefc 	sdiv	lr, lr, ip
 8021ccc:	f803 0c03 	strb.w	r0, [r3, #-3]
 8021cd0:	f803 ec02 	strb.w	lr, [r3, #-2]
 8021cd4:	e7ba      	b.n	8021c4c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8021cd6:	b017      	add	sp, #92	; 0x5c
 8021cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021cdc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8021cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ce0:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	; 0x2c
 8021ce4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021ce8:	f1be 0f00 	cmp.w	lr, #0
 8021cec:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021cf0:	fb0e 7409 	mla	r4, lr, r9, r7
 8021cf4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8021cf8:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8021cfc:	eb02 0a04 	add.w	sl, r2, r4
 8021d00:	6808      	ldr	r0, [r1, #0]
 8021d02:	f2c0 80c5 	blt.w	8021e90 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8021d06:	45f0      	cmp	r8, lr
 8021d08:	f340 80c2 	ble.w	8021e90 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8021d0c:	2f00      	cmp	r7, #0
 8021d0e:	f2c0 80bd 	blt.w	8021e8c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8021d12:	45b9      	cmp	r9, r7
 8021d14:	f340 80ba 	ble.w	8021e8c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8021d18:	5d12      	ldrb	r2, [r2, r4]
 8021d1a:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8021d1e:	122c      	asrs	r4, r5, #8
 8021d20:	10ea      	asrs	r2, r5, #3
 8021d22:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021d26:	00ed      	lsls	r5, r5, #3
 8021d28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021d2c:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8021d30:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8021d34:	b2ed      	uxtb	r5, r5
 8021d36:	0224      	lsls	r4, r4, #8
 8021d38:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021d3c:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8021d40:	432c      	orrs	r4, r5
 8021d42:	1c7a      	adds	r2, r7, #1
 8021d44:	f100 80a7 	bmi.w	8021e96 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8021d48:	4591      	cmp	r9, r2
 8021d4a:	f340 80a4 	ble.w	8021e96 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8021d4e:	2e00      	cmp	r6, #0
 8021d50:	f000 80a1 	beq.w	8021e96 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8021d54:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021d58:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8021d5c:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8021d60:	ea4f 252b 	mov.w	r5, fp, asr #8
 8021d64:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021d68:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021d6c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021d70:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021d74:	fa5f fb8b 	uxtb.w	fp, fp
 8021d78:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021d7c:	0212      	lsls	r2, r2, #8
 8021d7e:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8021d82:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8021d86:	ea45 050b 	orr.w	r5, r5, fp
 8021d8a:	f11e 0e01 	adds.w	lr, lr, #1
 8021d8e:	f100 8086 	bmi.w	8021e9e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8021d92:	45f0      	cmp	r8, lr
 8021d94:	f340 8083 	ble.w	8021e9e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8021d98:	f1bc 0f00 	cmp.w	ip, #0
 8021d9c:	d07f      	beq.n	8021e9e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8021d9e:	2f00      	cmp	r7, #0
 8021da0:	db7b      	blt.n	8021e9a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8021da2:	45b9      	cmp	r9, r7
 8021da4:	dd79      	ble.n	8021e9a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8021da6:	f81a 2009 	ldrb.w	r2, [sl, r9]
 8021daa:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8021dae:	ea4f 222e 	mov.w	r2, lr, asr #8
 8021db2:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8021db6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021dba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021dbe:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8021dc2:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8021dc6:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 8021dca:	fa5f fe8e 	uxtb.w	lr, lr
 8021dce:	0212      	lsls	r2, r2, #8
 8021dd0:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8021dd4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8021dd8:	ea42 020e 	orr.w	r2, r2, lr
 8021ddc:	3701      	adds	r7, #1
 8021dde:	d419      	bmi.n	8021e14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8021de0:	45b9      	cmp	r9, r7
 8021de2:	dd17      	ble.n	8021e14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8021de4:	b1b6      	cbz	r6, 8021e14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8021de6:	44d1      	add	r9, sl
 8021de8:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021dec:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8021df0:	10df      	asrs	r7, r3, #3
 8021df2:	1218      	asrs	r0, r3, #8
 8021df4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021df8:	00db      	lsls	r3, r3, #3
 8021dfa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021dfe:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8021e02:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8021e06:	b2db      	uxtb	r3, r3
 8021e08:	0238      	lsls	r0, r7, #8
 8021e0a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021e0e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8021e12:	4318      	orrs	r0, r3
 8021e14:	b2b6      	uxth	r6, r6
 8021e16:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 8021e1a:	fa1f f78c 	uxth.w	r7, ip
 8021e1e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021e22:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8021e26:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021e2a:	fb06 fc07 	mul.w	ip, r6, r7
 8021e2e:	0136      	lsls	r6, r6, #4
 8021e30:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8021e34:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8021e38:	eba6 060c 	sub.w	r6, r6, ip
 8021e3c:	b2bf      	uxth	r7, r7
 8021e3e:	b2b6      	uxth	r6, r6
 8021e40:	ebae 0e07 	sub.w	lr, lr, r7
 8021e44:	4373      	muls	r3, r6
 8021e46:	fa1f fe8e 	uxth.w	lr, lr
 8021e4a:	4375      	muls	r5, r6
 8021e4c:	fb0e 3808 	mla	r8, lr, r8, r3
 8021e50:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021e54:	fb0e 5404 	mla	r4, lr, r4, r5
 8021e58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e5c:	fb0c 8803 	mla	r8, ip, r3, r8
 8021e60:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e64:	fb0c 4000 	mla	r0, ip, r0, r4
 8021e68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e6c:	fb07 8303 	mla	r3, r7, r3, r8
 8021e70:	fb07 0002 	mla	r0, r7, r2, r0
 8021e74:	0a1b      	lsrs	r3, r3, #8
 8021e76:	0a00      	lsrs	r0, r0, #8
 8021e78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e80:	4318      	orrs	r0, r3
 8021e82:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021e86:	6008      	str	r0, [r1, #0]
 8021e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e8c:	4604      	mov	r4, r0
 8021e8e:	e758      	b.n	8021d42 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8021e90:	4605      	mov	r5, r0
 8021e92:	4604      	mov	r4, r0
 8021e94:	e779      	b.n	8021d8a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8021e96:	4605      	mov	r5, r0
 8021e98:	e777      	b.n	8021d8a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8021e9a:	4602      	mov	r2, r0
 8021e9c:	e79e      	b.n	8021ddc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 8021e9e:	4602      	mov	r2, r0
 8021ea0:	e7b8      	b.n	8021e14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08021ea2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ea6:	b093      	sub	sp, #76	; 0x4c
 8021ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021eac:	920f      	str	r2, [sp, #60]	; 0x3c
 8021eae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021eb0:	9010      	str	r0, [sp, #64]	; 0x40
 8021eb2:	9108      	str	r1, [sp, #32]
 8021eb4:	6850      	ldr	r0, [r2, #4]
 8021eb6:	9306      	str	r3, [sp, #24]
 8021eb8:	6812      	ldr	r2, [r2, #0]
 8021eba:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021ebe:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8021ec2:	fb00 1303 	mla	r3, r0, r3, r1
 8021ec6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8021eca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	9307      	str	r3, [sp, #28]
 8021ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ed2:	685f      	ldr	r7, [r3, #4]
 8021ed4:	3704      	adds	r7, #4
 8021ed6:	9b08      	ldr	r3, [sp, #32]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	dc03      	bgt.n	8021ee4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	f340 81d9 	ble.w	8022296 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8021ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ee6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021eea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021eee:	1e48      	subs	r0, r1, #1
 8021ef0:	f102 3cff 	add.w	ip, r2, #4294967295
 8021ef4:	9b06      	ldr	r3, [sp, #24]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	f340 80bc 	ble.w	8022074 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021efc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021f00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021f04:	d406      	bmi.n	8021f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f06:	4586      	cmp	lr, r0
 8021f08:	da04      	bge.n	8021f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	db02      	blt.n	8021f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f0e:	4563      	cmp	r3, ip
 8021f10:	f2c0 80b1 	blt.w	8022076 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021f14:	f11e 0e01 	adds.w	lr, lr, #1
 8021f18:	f100 80a2 	bmi.w	8022060 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021f1c:	4571      	cmp	r1, lr
 8021f1e:	f2c0 809f 	blt.w	8022060 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021f22:	3301      	adds	r3, #1
 8021f24:	f100 809c 	bmi.w	8022060 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021f28:	429a      	cmp	r2, r3
 8021f2a:	f2c0 8099 	blt.w	8022060 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021f2e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021f32:	46c8      	mov	r8, r9
 8021f34:	f1bb 0f00 	cmp.w	fp, #0
 8021f38:	f340 80b9 	ble.w	80220ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021f3e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f44:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021f48:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021f4c:	1422      	asrs	r2, r4, #16
 8021f4e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021f52:	689b      	ldr	r3, [r3, #8]
 8021f54:	f100 80f6 	bmi.w	8022144 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f58:	f103 3aff 	add.w	sl, r3, #4294967295
 8021f5c:	4552      	cmp	r2, sl
 8021f5e:	f280 80f1 	bge.w	8022144 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f62:	f1bc 0f00 	cmp.w	ip, #0
 8021f66:	f2c0 80ed 	blt.w	8022144 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021f6e:	45d4      	cmp	ip, sl
 8021f70:	f280 80e8 	bge.w	8022144 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021f74:	b21b      	sxth	r3, r3
 8021f76:	9d07      	ldr	r5, [sp, #28]
 8021f78:	fb0c 2203 	mla	r2, ip, r3, r2
 8021f7c:	eb05 0a02 	add.w	sl, r5, r2
 8021f80:	5caa      	ldrb	r2, [r5, r2]
 8021f82:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021f86:	2800      	cmp	r0, #0
 8021f88:	f000 80d3 	beq.w	8022132 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8021f8c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021f90:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021f94:	920b      	str	r2, [sp, #44]	; 0x2c
 8021f96:	b151      	cbz	r1, 8021fae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021f98:	eb0a 0203 	add.w	r2, sl, r3
 8021f9c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021fa0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8021fa6:	7853      	ldrb	r3, [r2, #1]
 8021fa8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021fac:	930c      	str	r3, [sp, #48]	; 0x30
 8021fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fb0:	fb10 f201 	smulbb	r2, r0, r1
 8021fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021fb6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021fba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021fbe:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021fc2:	10d2      	asrs	r2, r2, #3
 8021fc4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021fc8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8021fcc:	ea4c 0c03 	orr.w	ip, ip, r3
 8021fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fd2:	041b      	lsls	r3, r3, #16
 8021fd4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021fd8:	432b      	orrs	r3, r5
 8021fda:	4353      	muls	r3, r2
 8021fdc:	fb0a 330c 	mla	r3, sl, ip, r3
 8021fe0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021fe4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021fe8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021fec:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021ff0:	f1c1 0c10 	rsb	ip, r1, #16
 8021ff4:	ebac 0c00 	sub.w	ip, ip, r0
 8021ff8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021ffc:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022000:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022006:	0418      	lsls	r0, r3, #16
 8022008:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802200c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022010:	4318      	orrs	r0, r3
 8022012:	fb02 c200 	mla	r2, r2, r0, ip
 8022016:	0d51      	lsrs	r1, r2, #21
 8022018:	0952      	lsrs	r2, r2, #5
 802201a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802201e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022022:	430a      	orrs	r2, r1
 8022024:	b291      	uxth	r1, r2
 8022026:	10ca      	asrs	r2, r1, #3
 8022028:	1208      	asrs	r0, r1, #8
 802202a:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 802202e:	00c9      	lsls	r1, r1, #3
 8022030:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022034:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8022038:	b2c9      	uxtb	r1, r1
 802203a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802203e:	021b      	lsls	r3, r3, #8
 8022040:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022044:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022048:	430b      	orrs	r3, r1
 802204a:	f8c8 3000 	str.w	r3, [r8]
 802204e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022050:	f108 0804 	add.w	r8, r8, #4
 8022054:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022058:	441c      	add	r4, r3
 802205a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802205c:	441e      	add	r6, r3
 802205e:	e769      	b.n	8021f34 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022062:	f109 0904 	add.w	r9, r9, #4
 8022066:	441c      	add	r4, r3
 8022068:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802206a:	441e      	add	r6, r3
 802206c:	9b06      	ldr	r3, [sp, #24]
 802206e:	3b01      	subs	r3, #1
 8022070:	9306      	str	r3, [sp, #24]
 8022072:	e73f      	b.n	8021ef4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022074:	d020      	beq.n	80220b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022076:	9b06      	ldr	r3, [sp, #24]
 8022078:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802207a:	3b01      	subs	r3, #1
 802207c:	fb00 4003 	mla	r0, r0, r3, r4
 8022080:	1400      	asrs	r0, r0, #16
 8022082:	f53f af54 	bmi.w	8021f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022086:	3901      	subs	r1, #1
 8022088:	4288      	cmp	r0, r1
 802208a:	f6bf af50 	bge.w	8021f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802208e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022090:	fb01 6303 	mla	r3, r1, r3, r6
 8022094:	141b      	asrs	r3, r3, #16
 8022096:	f53f af4a 	bmi.w	8021f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802209a:	3a01      	subs	r2, #1
 802209c:	4293      	cmp	r3, r2
 802209e:	f6bf af46 	bge.w	8021f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80220a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80220a6:	46ca      	mov	sl, r9
 80220a8:	f1b8 0f00 	cmp.w	r8, #0
 80220ac:	dc67      	bgt.n	802217e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80220ae:	9b06      	ldr	r3, [sp, #24]
 80220b0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80220b4:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 80220b8:	9b08      	ldr	r3, [sp, #32]
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	f340 80eb 	ble.w	8022296 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80220c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80220c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80220ca:	eeb0 6a62 	vmov.f32	s12, s5
 80220ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80220d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80220d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80220da:	ee16 4a10 	vmov	r4, s12
 80220de:	eeb0 6a43 	vmov.f32	s12, s6
 80220e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80220e6:	ee16 6a10 	vmov	r6, s12
 80220ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80220ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80220f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80220f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022102:	ee12 2a90 	vmov	r2, s5
 8022106:	eef0 2a47 	vmov.f32	s5, s14
 802210a:	fb92 f3f3 	sdiv	r3, r2, r3
 802210e:	ee13 2a10 	vmov	r2, s6
 8022112:	931f      	str	r3, [sp, #124]	; 0x7c
 8022114:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022116:	eeb0 3a67 	vmov.f32	s6, s15
 802211a:	fb92 f3f3 	sdiv	r3, r2, r3
 802211e:	9320      	str	r3, [sp, #128]	; 0x80
 8022120:	9b08      	ldr	r3, [sp, #32]
 8022122:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022124:	3b01      	subs	r3, #1
 8022126:	9308      	str	r3, [sp, #32]
 8022128:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802212a:	bf08      	it	eq
 802212c:	4613      	moveq	r3, r2
 802212e:	9306      	str	r3, [sp, #24]
 8022130:	e6d1      	b.n	8021ed6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022132:	2900      	cmp	r1, #0
 8022134:	f43f af3b 	beq.w	8021fae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022138:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802213c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022140:	9309      	str	r3, [sp, #36]	; 0x24
 8022142:	e734      	b.n	8021fae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022144:	f112 0a01 	adds.w	sl, r2, #1
 8022148:	d481      	bmi.n	802204e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802214a:	4553      	cmp	r3, sl
 802214c:	f6ff af7f 	blt.w	802204e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022150:	f11c 0a01 	adds.w	sl, ip, #1
 8022154:	f53f af7b 	bmi.w	802204e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022158:	45d6      	cmp	lr, sl
 802215a:	f6ff af78 	blt.w	802204e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802215e:	b21b      	sxth	r3, r3
 8022160:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022164:	fa0f f28e 	sxth.w	r2, lr
 8022168:	9300      	str	r3, [sp, #0]
 802216a:	463b      	mov	r3, r7
 802216c:	9201      	str	r2, [sp, #4]
 802216e:	9a07      	ldr	r2, [sp, #28]
 8022170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022174:	4641      	mov	r1, r8
 8022176:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022178:	f7ff fdb0 	bl	8021cdc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 802217c:	e767      	b.n	802204e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802217e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022180:	1422      	asrs	r2, r4, #16
 8022182:	1431      	asrs	r1, r6, #16
 8022184:	9d07      	ldr	r5, [sp, #28]
 8022186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802218a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802218e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022192:	fb03 2101 	mla	r1, r3, r1, r2
 8022196:	9a07      	ldr	r2, [sp, #28]
 8022198:	440a      	add	r2, r1
 802219a:	5c69      	ldrb	r1, [r5, r1]
 802219c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80221a0:	f1be 0f00 	cmp.w	lr, #0
 80221a4:	d070      	beq.n	8022288 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80221a6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80221aa:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80221ae:	950d      	str	r5, [sp, #52]	; 0x34
 80221b0:	b150      	cbz	r0, 80221c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80221b2:	eb02 0c03 	add.w	ip, r2, r3
 80221b6:	5cd3      	ldrb	r3, [r2, r3]
 80221b8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80221bc:	930a      	str	r3, [sp, #40]	; 0x28
 80221be:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80221c2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80221c6:	930e      	str	r3, [sp, #56]	; 0x38
 80221c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80221ca:	fb1e f200 	smulbb	r2, lr, r0
 80221ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80221d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80221d4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80221d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80221dc:	10d2      	asrs	r2, r2, #3
 80221de:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80221e2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80221e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80221ea:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80221ee:	9311      	str	r3, [sp, #68]	; 0x44
 80221f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80221f4:	041b      	lsls	r3, r3, #16
 80221f6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80221fa:	ea43 030b 	orr.w	r3, r3, fp
 80221fe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022202:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022206:	4353      	muls	r3, r2
 8022208:	fb05 3c0c 	mla	ip, r5, ip, r3
 802220c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022210:	ea43 0b01 	orr.w	fp, r3, r1
 8022214:	f1c0 0110 	rsb	r1, r0, #16
 8022218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802221a:	eba1 0e0e 	sub.w	lr, r1, lr
 802221e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022222:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022226:	fb0e cc0b 	mla	ip, lr, fp, ip
 802222a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802222e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022232:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022236:	ea4b 0e0e 	orr.w	lr, fp, lr
 802223a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802223e:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8022242:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022246:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802224a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802224e:	ea42 0c0c 	orr.w	ip, r2, ip
 8022252:	fa1f f28c 	uxth.w	r2, ip
 8022256:	10d3      	asrs	r3, r2, #3
 8022258:	1211      	asrs	r1, r2, #8
 802225a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802225e:	00d2      	lsls	r2, r2, #3
 8022260:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022264:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8022268:	b2d2      	uxtb	r2, r2
 802226a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802226e:	021b      	lsls	r3, r3, #8
 8022270:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022278:	431a      	orrs	r2, r3
 802227a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802227c:	441c      	add	r4, r3
 802227e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022280:	f84a 2b04 	str.w	r2, [sl], #4
 8022284:	441e      	add	r6, r3
 8022286:	e70f      	b.n	80220a8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022288:	2800      	cmp	r0, #0
 802228a:	d09d      	beq.n	80221c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802228c:	5cd3      	ldrb	r3, [r2, r3]
 802228e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022292:	930a      	str	r3, [sp, #40]	; 0x28
 8022294:	e798      	b.n	80221c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022296:	b013      	add	sp, #76	; 0x4c
 8022298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802229c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802229c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222a0:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 80222a4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80222a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80222ac:	f1b8 0f00 	cmp.w	r8, #0
 80222b0:	fb08 750e 	mla	r5, r8, lr, r7
 80222b4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 80222b8:	9001      	str	r0, [sp, #4]
 80222ba:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80222be:	eb02 0a05 	add.w	sl, r2, r5
 80222c2:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 80222c6:	6808      	ldr	r0, [r1, #0]
 80222c8:	f2c0 80b2 	blt.w	8022430 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 80222cc:	45c3      	cmp	fp, r8
 80222ce:	f340 80af 	ble.w	8022430 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 80222d2:	2f00      	cmp	r7, #0
 80222d4:	f2c0 80aa 	blt.w	802242c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 80222d8:	45be      	cmp	lr, r7
 80222da:	f340 80a7 	ble.w	802242c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 80222de:	5d55      	ldrb	r5, [r2, r5]
 80222e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80222e4:	195a      	adds	r2, r3, r5
 80222e6:	5d5d      	ldrb	r5, [r3, r5]
 80222e8:	f892 9001 	ldrb.w	r9, [r2, #1]
 80222ec:	7892      	ldrb	r2, [r2, #2]
 80222ee:	0412      	lsls	r2, r2, #16
 80222f0:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 80222f4:	432a      	orrs	r2, r5
 80222f6:	1c7d      	adds	r5, r7, #1
 80222f8:	f100 809b 	bmi.w	8022432 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80222fc:	45ae      	cmp	lr, r5
 80222fe:	f340 8098 	ble.w	8022432 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8022302:	2c00      	cmp	r4, #0
 8022304:	f000 8095 	beq.w	8022432 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8022308:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802230c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022310:	eb03 0509 	add.w	r5, r3, r9
 8022314:	f813 9009 	ldrb.w	r9, [r3, r9]
 8022318:	786e      	ldrb	r6, [r5, #1]
 802231a:	78ad      	ldrb	r5, [r5, #2]
 802231c:	042d      	lsls	r5, r5, #16
 802231e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8022322:	ea45 0509 	orr.w	r5, r5, r9
 8022326:	f118 0801 	adds.w	r8, r8, #1
 802232a:	f100 8086 	bmi.w	802243a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802232e:	45c3      	cmp	fp, r8
 8022330:	f340 8083 	ble.w	802243a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 8022334:	9e01      	ldr	r6, [sp, #4]
 8022336:	2e00      	cmp	r6, #0
 8022338:	d07f      	beq.n	802243a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802233a:	2f00      	cmp	r7, #0
 802233c:	eb0a 090e 	add.w	r9, sl, lr
 8022340:	db79      	blt.n	8022436 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8022342:	45be      	cmp	lr, r7
 8022344:	dd77      	ble.n	8022436 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8022346:	f81a a00e 	ldrb.w	sl, [sl, lr]
 802234a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802234e:	eb03 080a 	add.w	r8, r3, sl
 8022352:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8022356:	f898 b001 	ldrb.w	fp, [r8, #1]
 802235a:	f898 8002 	ldrb.w	r8, [r8, #2]
 802235e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8022362:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 8022366:	ea48 080a 	orr.w	r8, r8, sl
 802236a:	3701      	adds	r7, #1
 802236c:	d411      	bmi.n	8022392 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802236e:	45be      	cmp	lr, r7
 8022370:	dd0f      	ble.n	8022392 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8022372:	b174      	cbz	r4, 8022392 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8022374:	f899 7001 	ldrb.w	r7, [r9, #1]
 8022378:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802237c:	eb03 0e07 	add.w	lr, r3, r7
 8022380:	5ddb      	ldrb	r3, [r3, r7]
 8022382:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022386:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802238a:	0400      	lsls	r0, r0, #16
 802238c:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8022390:	4318      	orrs	r0, r3
 8022392:	b2a4      	uxth	r4, r4
 8022394:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8022398:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802239c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80223a0:	fb04 fe06 	mul.w	lr, r4, r6
 80223a4:	0124      	lsls	r4, r4, #4
 80223a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80223aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223ae:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 80223b2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80223b6:	eba4 040e 	sub.w	r4, r4, lr
 80223ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80223be:	b2b6      	uxth	r6, r6
 80223c0:	b2a4      	uxth	r4, r4
 80223c2:	eba9 0906 	sub.w	r9, r9, r6
 80223c6:	fb04 f303 	mul.w	r3, r4, r3
 80223ca:	fa1f f989 	uxth.w	r9, r9
 80223ce:	fb04 f405 	mul.w	r4, r4, r5
 80223d2:	fb09 3707 	mla	r7, r9, r7, r3
 80223d6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80223da:	fb09 4402 	mla	r4, r9, r2, r4
 80223de:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80223e2:	fb0e 7703 	mla	r7, lr, r3, r7
 80223e6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 80223ea:	fb0e 4000 	mla	r0, lr, r0, r4
 80223ee:	fb06 7303 	mla	r3, r6, r3, r7
 80223f2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80223f6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223fa:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 80223fe:	fb06 0303 	mla	r3, r6, r3, r0
 8022402:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8022406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802240a:	ea43 0307 	orr.w	r3, r3, r7
 802240e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022412:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8022416:	b2d4      	uxtb	r4, r2
 8022418:	b2c5      	uxtb	r5, r0
 802241a:	d110      	bne.n	802243e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 802241c:	700b      	strb	r3, [r1, #0]
 802241e:	7048      	strb	r0, [r1, #1]
 8022420:	708a      	strb	r2, [r1, #2]
 8022422:	f881 c003 	strb.w	ip, [r1, #3]
 8022426:	b003      	add	sp, #12
 8022428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802242c:	4602      	mov	r2, r0
 802242e:	e762      	b.n	80222f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 8022430:	4602      	mov	r2, r0
 8022432:	4605      	mov	r5, r0
 8022434:	e777      	b.n	8022326 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 8022436:	4680      	mov	r8, r0
 8022438:	e797      	b.n	802236a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 802243a:	4680      	mov	r8, r0
 802243c:	e7a9      	b.n	8022392 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802243e:	f1bc 0f00 	cmp.w	ip, #0
 8022442:	d0f0      	beq.n	8022426 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 8022444:	78ce      	ldrb	r6, [r1, #3]
 8022446:	b2db      	uxtb	r3, r3
 8022448:	fb1c f505 	smulbb	r5, ip, r5
 802244c:	fb0c f206 	mul.w	r2, ip, r6
 8022450:	1c50      	adds	r0, r2, #1
 8022452:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022456:	eb0c 0206 	add.w	r2, ip, r6
 802245a:	1200      	asrs	r0, r0, #8
 802245c:	1a12      	subs	r2, r2, r0
 802245e:	1a30      	subs	r0, r6, r0
 8022460:	780e      	ldrb	r6, [r1, #0]
 8022462:	b2d2      	uxtb	r2, r2
 8022464:	4346      	muls	r6, r0
 8022466:	70ca      	strb	r2, [r1, #3]
 8022468:	fb0c 6303 	mla	r3, ip, r3, r6
 802246c:	fb1c fc04 	smulbb	ip, ip, r4
 8022470:	fb93 f3f2 	sdiv	r3, r3, r2
 8022474:	700b      	strb	r3, [r1, #0]
 8022476:	784b      	ldrb	r3, [r1, #1]
 8022478:	fb00 5303 	mla	r3, r0, r3, r5
 802247c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022480:	704b      	strb	r3, [r1, #1]
 8022482:	788b      	ldrb	r3, [r1, #2]
 8022484:	fb00 cc03 	mla	ip, r0, r3, ip
 8022488:	fb9c fcf2 	sdiv	ip, ip, r2
 802248c:	f881 c002 	strb.w	ip, [r1, #2]
 8022490:	e7c9      	b.n	8022426 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

08022492 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022496:	b091      	sub	sp, #68	; 0x44
 8022498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802249c:	920e      	str	r2, [sp, #56]	; 0x38
 802249e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80224a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80224a2:	910c      	str	r1, [sp, #48]	; 0x30
 80224a4:	6850      	ldr	r0, [r2, #4]
 80224a6:	9309      	str	r3, [sp, #36]	; 0x24
 80224a8:	6812      	ldr	r2, [r2, #0]
 80224aa:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 80224ae:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 80224b2:	fb00 1303 	mla	r3, r0, r3, r1
 80224b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80224ba:	930a      	str	r3, [sp, #40]	; 0x28
 80224bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80224c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80224c4:	685d      	ldr	r5, [r3, #4]
 80224c6:	3504      	adds	r5, #4
 80224c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	dc03      	bgt.n	80224d6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80224ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	f340 825d 	ble.w	8022990 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80224d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80224d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80224dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80224e0:	1e48      	subs	r0, r1, #1
 80224e2:	1e56      	subs	r6, r2, #1
 80224e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	f340 80c9 	ble.w	802267e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80224ec:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80224ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80224f0:	143f      	asrs	r7, r7, #16
 80224f2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80224f6:	d406      	bmi.n	8022506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80224f8:	4287      	cmp	r7, r0
 80224fa:	da04      	bge.n	8022506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	db02      	blt.n	8022506 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022500:	42b3      	cmp	r3, r6
 8022502:	f2c0 80bd 	blt.w	8022680 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022506:	3701      	adds	r7, #1
 8022508:	f100 80aa 	bmi.w	8022660 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802250c:	42b9      	cmp	r1, r7
 802250e:	f2c0 80a7 	blt.w	8022660 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8022512:	3301      	adds	r3, #1
 8022514:	f100 80a4 	bmi.w	8022660 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8022518:	429a      	cmp	r2, r3
 802251a:	f2c0 80a1 	blt.w	8022660 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802251e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022520:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022522:	930d      	str	r3, [sp, #52]	; 0x34
 8022524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022526:	2b00      	cmp	r3, #0
 8022528:	f340 80ca 	ble.w	80226c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802252c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802252e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022530:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022532:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8022536:	141f      	asrs	r7, r3, #16
 8022538:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802253a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802253e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022540:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022542:	1400      	asrs	r0, r0, #16
 8022544:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022548:	6892      	ldr	r2, [r2, #8]
 802254a:	f100 8138 	bmi.w	80227be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802254e:	f102 3eff 	add.w	lr, r2, #4294967295
 8022552:	4570      	cmp	r0, lr
 8022554:	f280 8133 	bge.w	80227be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022558:	2f00      	cmp	r7, #0
 802255a:	f2c0 8130 	blt.w	80227be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802255e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8022562:	4577      	cmp	r7, lr
 8022564:	f280 812b 	bge.w	80227be <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022568:	b212      	sxth	r2, r2
 802256a:	fb07 0002 	mla	r0, r7, r2, r0
 802256e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022570:	eb07 0c00 	add.w	ip, r7, r0
 8022574:	5c38      	ldrb	r0, [r7, r0]
 8022576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802257a:	eb05 0800 	add.w	r8, r5, r0
 802257e:	2b00      	cmp	r3, #0
 8022580:	f000 80e2 	beq.w	8022748 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022584:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022588:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802258c:	44ae      	add	lr, r5
 802258e:	2900      	cmp	r1, #0
 8022590:	f000 80e3 	beq.w	802275a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8022594:	eb0c 0702 	add.w	r7, ip, r2
 8022598:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802259c:	f897 c001 	ldrb.w	ip, [r7, #1]
 80225a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80225a8:	442a      	add	r2, r5
 80225aa:	44ac      	add	ip, r5
 80225ac:	b29b      	uxth	r3, r3
 80225ae:	5c2f      	ldrb	r7, [r5, r0]
 80225b0:	b289      	uxth	r1, r1
 80225b2:	f89e 0000 	ldrb.w	r0, [lr]
 80225b6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80225ba:	2cff      	cmp	r4, #255	; 0xff
 80225bc:	fb03 fb01 	mul.w	fp, r3, r1
 80225c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80225c4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80225c8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80225cc:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80225d0:	eba3 030b 	sub.w	r3, r3, fp
 80225d4:	b289      	uxth	r1, r1
 80225d6:	b29b      	uxth	r3, r3
 80225d8:	eba9 0901 	sub.w	r9, r9, r1
 80225dc:	fb03 f000 	mul.w	r0, r3, r0
 80225e0:	fa1f f989 	uxth.w	r9, r9
 80225e4:	fb03 fa0a 	mul.w	sl, r3, sl
 80225e8:	fb03 f30e 	mul.w	r3, r3, lr
 80225ec:	f892 e002 	ldrb.w	lr, [r2, #2]
 80225f0:	fb09 0007 	mla	r0, r9, r7, r0
 80225f4:	7817      	ldrb	r7, [r2, #0]
 80225f6:	fb01 0007 	mla	r0, r1, r7, r0
 80225fa:	f89c 7000 	ldrb.w	r7, [ip]
 80225fe:	fb0b 0707 	mla	r7, fp, r7, r0
 8022602:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022606:	f898 8002 	ldrb.w	r8, [r8, #2]
 802260a:	fb09 aa00 	mla	sl, r9, r0, sl
 802260e:	7850      	ldrb	r0, [r2, #1]
 8022610:	fb09 3308 	mla	r3, r9, r8, r3
 8022614:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8022618:	fb01 aa00 	mla	sl, r1, r0, sl
 802261c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022620:	fb01 330e 	mla	r3, r1, lr, r3
 8022624:	ea4f 2727 	mov.w	r7, r7, asr #8
 8022628:	fb0b a000 	mla	r0, fp, r0, sl
 802262c:	fb0b 3b02 	mla	fp, fp, r2, r3
 8022630:	ea4f 2020 	mov.w	r0, r0, asr #8
 8022634:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022638:	f040 8095 	bne.w	8022766 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802263c:	7037      	strb	r7, [r6, #0]
 802263e:	7070      	strb	r0, [r6, #1]
 8022640:	f886 b002 	strb.w	fp, [r6, #2]
 8022644:	70f4      	strb	r4, [r6, #3]
 8022646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022648:	3604      	adds	r6, #4
 802264a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802264c:	4413      	add	r3, r2
 802264e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022650:	931b      	str	r3, [sp, #108]	; 0x6c
 8022652:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022654:	4413      	add	r3, r2
 8022656:	931c      	str	r3, [sp, #112]	; 0x70
 8022658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802265a:	3b01      	subs	r3, #1
 802265c:	930d      	str	r3, [sp, #52]	; 0x34
 802265e:	e761      	b.n	8022524 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022660:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022662:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8022664:	443b      	add	r3, r7
 8022666:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8022668:	931b      	str	r3, [sp, #108]	; 0x6c
 802266a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802266c:	443b      	add	r3, r7
 802266e:	931c      	str	r3, [sp, #112]	; 0x70
 8022670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022672:	3b01      	subs	r3, #1
 8022674:	9309      	str	r3, [sp, #36]	; 0x24
 8022676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022678:	3304      	adds	r3, #4
 802267a:	930a      	str	r3, [sp, #40]	; 0x28
 802267c:	e732      	b.n	80224e4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802267e:	d026      	beq.n	80226ce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8022680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022682:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022684:	3b01      	subs	r3, #1
 8022686:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8022688:	fb00 6003 	mla	r0, r0, r3, r6
 802268c:	1400      	asrs	r0, r0, #16
 802268e:	f53f af46 	bmi.w	802251e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022692:	3901      	subs	r1, #1
 8022694:	4288      	cmp	r0, r1
 8022696:	f6bf af42 	bge.w	802251e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802269a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802269c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802269e:	fb01 0303 	mla	r3, r1, r3, r0
 80226a2:	141b      	asrs	r3, r3, #16
 80226a4:	f53f af3b 	bmi.w	802251e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226a8:	3a01      	subs	r2, #1
 80226aa:	4293      	cmp	r3, r2
 80226ac:	f6bf af37 	bge.w	802251e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80226b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226b2:	1d19      	adds	r1, r3, #4
 80226b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226b6:	930d      	str	r3, [sp, #52]	; 0x34
 80226b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	f300 809e 	bgt.w	80227fc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80226c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80226c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80226c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80226cc:	930a      	str	r3, [sp, #40]	; 0x28
 80226ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	f340 815d 	ble.w	8022990 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80226d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80226da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80226dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80226e0:	eeb0 6a62 	vmov.f32	s12, s5
 80226e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80226e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80226ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80226f0:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 80226f4:	eeb0 6a43 	vmov.f32	s12, s6
 80226f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80226fc:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8022700:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022704:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022708:	ee77 2a62 	vsub.f32	s5, s14, s5
 802270c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022710:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022714:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022718:	ee12 2a90 	vmov	r2, s5
 802271c:	eef0 2a47 	vmov.f32	s5, s14
 8022720:	fb92 f3f3 	sdiv	r3, r2, r3
 8022724:	ee13 2a10 	vmov	r2, s6
 8022728:	931d      	str	r3, [sp, #116]	; 0x74
 802272a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802272c:	eeb0 3a67 	vmov.f32	s6, s15
 8022730:	fb92 f3f3 	sdiv	r3, r2, r3
 8022734:	931e      	str	r3, [sp, #120]	; 0x78
 8022736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802273a:	3b01      	subs	r3, #1
 802273c:	930c      	str	r3, [sp, #48]	; 0x30
 802273e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022740:	bf08      	it	eq
 8022742:	4613      	moveq	r3, r2
 8022744:	9309      	str	r3, [sp, #36]	; 0x24
 8022746:	e6bf      	b.n	80224c8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022748:	b151      	cbz	r1, 8022760 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 802274a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802274e:	46c4      	mov	ip, r8
 8022750:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022754:	442a      	add	r2, r5
 8022756:	46c6      	mov	lr, r8
 8022758:	e728      	b.n	80225ac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 802275a:	46c4      	mov	ip, r8
 802275c:	4642      	mov	r2, r8
 802275e:	e725      	b.n	80225ac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022760:	46c4      	mov	ip, r8
 8022762:	4642      	mov	r2, r8
 8022764:	e7f7      	b.n	8022756 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8022766:	2c00      	cmp	r4, #0
 8022768:	f43f af6d 	beq.w	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802276c:	78f1      	ldrb	r1, [r6, #3]
 802276e:	b2ff      	uxtb	r7, r7
 8022770:	f896 a001 	ldrb.w	sl, [r6, #1]
 8022774:	b2c0      	uxtb	r0, r0
 8022776:	fb04 f201 	mul.w	r2, r4, r1
 802277a:	fa5f fb8b 	uxtb.w	fp, fp
 802277e:	1c53      	adds	r3, r2, #1
 8022780:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022784:	1862      	adds	r2, r4, r1
 8022786:	121b      	asrs	r3, r3, #8
 8022788:	1ad2      	subs	r2, r2, r3
 802278a:	1acb      	subs	r3, r1, r3
 802278c:	7831      	ldrb	r1, [r6, #0]
 802278e:	fb03 fa0a 	mul.w	sl, r3, sl
 8022792:	b2d2      	uxtb	r2, r2
 8022794:	4359      	muls	r1, r3
 8022796:	fb04 a000 	mla	r0, r4, r0, sl
 802279a:	fb04 1707 	mla	r7, r4, r7, r1
 802279e:	78b1      	ldrb	r1, [r6, #2]
 80227a0:	70f2      	strb	r2, [r6, #3]
 80227a2:	434b      	muls	r3, r1
 80227a4:	fb04 3b0b 	mla	fp, r4, fp, r3
 80227a8:	fb97 f7f2 	sdiv	r7, r7, r2
 80227ac:	fb90 f0f2 	sdiv	r0, r0, r2
 80227b0:	fb9b fbf2 	sdiv	fp, fp, r2
 80227b4:	7037      	strb	r7, [r6, #0]
 80227b6:	7070      	strb	r0, [r6, #1]
 80227b8:	f886 b002 	strb.w	fp, [r6, #2]
 80227bc:	e743      	b.n	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227be:	f110 0e01 	adds.w	lr, r0, #1
 80227c2:	f53f af40 	bmi.w	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227c6:	4572      	cmp	r2, lr
 80227c8:	f6ff af3d 	blt.w	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227cc:	f117 0e01 	adds.w	lr, r7, #1
 80227d0:	f53f af39 	bmi.w	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227d4:	45f4      	cmp	ip, lr
 80227d6:	f6ff af36 	blt.w	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227da:	b212      	sxth	r2, r2
 80227dc:	9002      	str	r0, [sp, #8]
 80227de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80227e0:	9200      	str	r2, [sp, #0]
 80227e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80227e4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80227e8:	fa0f f38c 	sxth.w	r3, ip
 80227ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80227f0:	9301      	str	r3, [sp, #4]
 80227f2:	4631      	mov	r1, r6
 80227f4:	462b      	mov	r3, r5
 80227f6:	f7ff fd51 	bl	802229c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 80227fa:	e724      	b.n	8022646 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80227fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80227fe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8022800:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022804:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8022806:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022808:	1436      	asrs	r6, r6, #16
 802280a:	143f      	asrs	r7, r7, #16
 802280c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802280e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022812:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022816:	fb02 7606 	mla	r6, r2, r6, r7
 802281a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802281c:	eb07 0c06 	add.w	ip, r7, r6
 8022820:	5dbe      	ldrb	r6, [r7, r6]
 8022822:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022826:	eb05 0806 	add.w	r8, r5, r6
 802282a:	2b00      	cmp	r3, #0
 802282c:	d06d      	beq.n	802290a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 802282e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022832:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022836:	44ae      	add	lr, r5
 8022838:	2800      	cmp	r0, #0
 802283a:	d06f      	beq.n	802291c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 802283c:	eb0c 0702 	add.w	r7, ip, r2
 8022840:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022844:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802284c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022850:	442a      	add	r2, r5
 8022852:	44ac      	add	ip, r5
 8022854:	b29b      	uxth	r3, r3
 8022856:	5daf      	ldrb	r7, [r5, r6]
 8022858:	b280      	uxth	r0, r0
 802285a:	f89e 6000 	ldrb.w	r6, [lr]
 802285e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022862:	2cff      	cmp	r4, #255	; 0xff
 8022864:	fb03 fb00 	mul.w	fp, r3, r0
 8022868:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802286c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8022870:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022874:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8022878:	eba3 030b 	sub.w	r3, r3, fp
 802287c:	b280      	uxth	r0, r0
 802287e:	b29b      	uxth	r3, r3
 8022880:	eba9 0900 	sub.w	r9, r9, r0
 8022884:	fb03 f606 	mul.w	r6, r3, r6
 8022888:	fa1f f989 	uxth.w	r9, r9
 802288c:	fb03 fa0a 	mul.w	sl, r3, sl
 8022890:	fb03 f30e 	mul.w	r3, r3, lr
 8022894:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022898:	fb09 6607 	mla	r6, r9, r7, r6
 802289c:	7817      	ldrb	r7, [r2, #0]
 802289e:	fb00 6607 	mla	r6, r0, r7, r6
 80228a2:	f89c 7000 	ldrb.w	r7, [ip]
 80228a6:	fb0b 6707 	mla	r7, fp, r7, r6
 80228aa:	f898 6001 	ldrb.w	r6, [r8, #1]
 80228ae:	f898 8002 	ldrb.w	r8, [r8, #2]
 80228b2:	fb09 aa06 	mla	sl, r9, r6, sl
 80228b6:	7856      	ldrb	r6, [r2, #1]
 80228b8:	fb09 3308 	mla	r3, r9, r8, r3
 80228bc:	ea4f 2727 	mov.w	r7, r7, asr #8
 80228c0:	fb00 aa06 	mla	sl, r0, r6, sl
 80228c4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80228c8:	fb00 330e 	mla	r3, r0, lr, r3
 80228cc:	f89c e002 	ldrb.w	lr, [ip, #2]
 80228d0:	fb0b a606 	mla	r6, fp, r6, sl
 80228d4:	fb0b 330e 	mla	r3, fp, lr, r3
 80228d8:	ea4f 2626 	mov.w	r6, r6, asr #8
 80228dc:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80228e0:	d122      	bne.n	8022928 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80228e2:	f801 7c04 	strb.w	r7, [r1, #-4]
 80228e6:	f801 6c03 	strb.w	r6, [r1, #-3]
 80228ea:	f801 bc02 	strb.w	fp, [r1, #-2]
 80228ee:	f801 4c01 	strb.w	r4, [r1, #-1]
 80228f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80228f4:	3104      	adds	r1, #4
 80228f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80228f8:	4413      	add	r3, r2
 80228fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80228fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80228fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022900:	4413      	add	r3, r2
 8022902:	931c      	str	r3, [sp, #112]	; 0x70
 8022904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022906:	3b01      	subs	r3, #1
 8022908:	e6d5      	b.n	80226b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802290a:	b150      	cbz	r0, 8022922 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802290c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022910:	46c4      	mov	ip, r8
 8022912:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022916:	442a      	add	r2, r5
 8022918:	46c6      	mov	lr, r8
 802291a:	e79b      	b.n	8022854 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802291c:	46c4      	mov	ip, r8
 802291e:	4642      	mov	r2, r8
 8022920:	e798      	b.n	8022854 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022922:	46c4      	mov	ip, r8
 8022924:	4642      	mov	r2, r8
 8022926:	e7f7      	b.n	8022918 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022928:	2c00      	cmp	r4, #0
 802292a:	d0e2      	beq.n	80228f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802292c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8022930:	b2ff      	uxtb	r7, r7
 8022932:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8022936:	b2f6      	uxtb	r6, r6
 8022938:	fb04 f300 	mul.w	r3, r4, r0
 802293c:	eb04 0c00 	add.w	ip, r4, r0
 8022940:	fa5f fb8b 	uxtb.w	fp, fp
 8022944:	1c5a      	adds	r2, r3, #1
 8022946:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802294a:	1213      	asrs	r3, r2, #8
 802294c:	1ac2      	subs	r2, r0, r3
 802294e:	ebac 0c03 	sub.w	ip, ip, r3
 8022952:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8022956:	fb02 fa0a 	mul.w	sl, r2, sl
 802295a:	fa5f fc8c 	uxtb.w	ip, ip
 802295e:	4353      	muls	r3, r2
 8022960:	fb04 a606 	mla	r6, r4, r6, sl
 8022964:	fb04 3707 	mla	r7, r4, r7, r3
 8022968:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 802296c:	f801 cc01 	strb.w	ip, [r1, #-1]
 8022970:	435a      	muls	r2, r3
 8022972:	fb04 2b0b 	mla	fp, r4, fp, r2
 8022976:	fb97 f7fc 	sdiv	r7, r7, ip
 802297a:	fb96 f6fc 	sdiv	r6, r6, ip
 802297e:	fb9b fbfc 	sdiv	fp, fp, ip
 8022982:	f801 7c04 	strb.w	r7, [r1, #-4]
 8022986:	f801 6c03 	strb.w	r6, [r1, #-3]
 802298a:	f801 bc02 	strb.w	fp, [r1, #-2]
 802298e:	e7b0      	b.n	80228f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8022990:	b011      	add	sp, #68	; 0x44
 8022992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022996 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8022996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802299a:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
 802299e:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 80229a2:	f1b8 0f00 	cmp.w	r8, #0
 80229a6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80229aa:	fb08 740e 	mla	r4, r8, lr, r7
 80229ae:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80229b2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80229b6:	eb02 0904 	add.w	r9, r2, r4
 80229ba:	6808      	ldr	r0, [r1, #0]
 80229bc:	f2c0 8099 	blt.w	8022af2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 80229c0:	45c2      	cmp	sl, r8
 80229c2:	f340 8096 	ble.w	8022af2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 80229c6:	2f00      	cmp	r7, #0
 80229c8:	f2c0 8091 	blt.w	8022aee <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 80229cc:	45be      	cmp	lr, r7
 80229ce:	f340 808e 	ble.w	8022aee <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 80229d2:	5d12      	ldrb	r2, [r2, r4]
 80229d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229d8:	189c      	adds	r4, r3, r2
 80229da:	5c9a      	ldrb	r2, [r3, r2]
 80229dc:	7866      	ldrb	r6, [r4, #1]
 80229de:	78a4      	ldrb	r4, [r4, #2]
 80229e0:	0424      	lsls	r4, r4, #16
 80229e2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80229e6:	4314      	orrs	r4, r2
 80229e8:	1c7a      	adds	r2, r7, #1
 80229ea:	f100 8085 	bmi.w	8022af8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80229ee:	4596      	cmp	lr, r2
 80229f0:	f340 8082 	ble.w	8022af8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80229f4:	2d00      	cmp	r5, #0
 80229f6:	d07f      	beq.n	8022af8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80229f8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80229fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a00:	189e      	adds	r6, r3, r2
 8022a02:	5c9a      	ldrb	r2, [r3, r2]
 8022a04:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022a08:	78b6      	ldrb	r6, [r6, #2]
 8022a0a:	0436      	lsls	r6, r6, #16
 8022a0c:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8022a10:	4316      	orrs	r6, r2
 8022a12:	f118 0801 	adds.w	r8, r8, #1
 8022a16:	d473      	bmi.n	8022b00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022a18:	45c2      	cmp	sl, r8
 8022a1a:	dd71      	ble.n	8022b00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022a1c:	f1bc 0f00 	cmp.w	ip, #0
 8022a20:	d06e      	beq.n	8022b00 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022a22:	2f00      	cmp	r7, #0
 8022a24:	eb09 080e 	add.w	r8, r9, lr
 8022a28:	db68      	blt.n	8022afc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8022a2a:	45be      	cmp	lr, r7
 8022a2c:	dd66      	ble.n	8022afc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8022a2e:	f819 900e 	ldrb.w	r9, [r9, lr]
 8022a32:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022a36:	eb03 0209 	add.w	r2, r3, r9
 8022a3a:	f813 9009 	ldrb.w	r9, [r3, r9]
 8022a3e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022a42:	7892      	ldrb	r2, [r2, #2]
 8022a44:	0412      	lsls	r2, r2, #16
 8022a46:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8022a4a:	ea42 0209 	orr.w	r2, r2, r9
 8022a4e:	3701      	adds	r7, #1
 8022a50:	d411      	bmi.n	8022a76 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022a52:	45be      	cmp	lr, r7
 8022a54:	dd0f      	ble.n	8022a76 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022a56:	b175      	cbz	r5, 8022a76 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022a58:	f898 7001 	ldrb.w	r7, [r8, #1]
 8022a5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022a60:	eb03 0e07 	add.w	lr, r3, r7
 8022a64:	5ddb      	ldrb	r3, [r3, r7]
 8022a66:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022a6a:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8022a6e:	0400      	lsls	r0, r0, #16
 8022a70:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8022a74:	4318      	orrs	r0, r3
 8022a76:	b2ad      	uxth	r5, r5
 8022a78:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8022a7c:	fa1f f78c 	uxth.w	r7, ip
 8022a80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022a84:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8022a88:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022a8c:	fb05 fc07 	mul.w	ip, r5, r7
 8022a90:	012d      	lsls	r5, r5, #4
 8022a92:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022a96:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8022a9a:	eba5 050c 	sub.w	r5, r5, ip
 8022a9e:	b2bf      	uxth	r7, r7
 8022aa0:	b2ad      	uxth	r5, r5
 8022aa2:	ebae 0e07 	sub.w	lr, lr, r7
 8022aa6:	436b      	muls	r3, r5
 8022aa8:	fa1f fe8e 	uxth.w	lr, lr
 8022aac:	436e      	muls	r6, r5
 8022aae:	fb0e 3808 	mla	r8, lr, r8, r3
 8022ab2:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022ab6:	fb0e 6404 	mla	r4, lr, r4, r6
 8022aba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022abe:	fb0c 8803 	mla	r8, ip, r3, r8
 8022ac2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022ac6:	fb0c 4000 	mla	r0, ip, r0, r4
 8022aca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ace:	fb07 8303 	mla	r3, r7, r3, r8
 8022ad2:	fb07 0002 	mla	r0, r7, r2, r0
 8022ad6:	0a1b      	lsrs	r3, r3, #8
 8022ad8:	0a00      	lsrs	r0, r0, #8
 8022ada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ade:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022ae2:	4318      	orrs	r0, r3
 8022ae4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022ae8:	6008      	str	r0, [r1, #0]
 8022aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aee:	4604      	mov	r4, r0
 8022af0:	e77a      	b.n	80229e8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8022af2:	4606      	mov	r6, r0
 8022af4:	4604      	mov	r4, r0
 8022af6:	e78c      	b.n	8022a12 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8022af8:	4606      	mov	r6, r0
 8022afa:	e78a      	b.n	8022a12 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8022afc:	4602      	mov	r2, r0
 8022afe:	e7a6      	b.n	8022a4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8022b00:	4602      	mov	r2, r0
 8022b02:	e7b8      	b.n	8022a76 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08022b04 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b08:	b08f      	sub	sp, #60	; 0x3c
 8022b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b0e:	920c      	str	r2, [sp, #48]	; 0x30
 8022b10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022b12:	900d      	str	r0, [sp, #52]	; 0x34
 8022b14:	910a      	str	r1, [sp, #40]	; 0x28
 8022b16:	6850      	ldr	r0, [r2, #4]
 8022b18:	9306      	str	r3, [sp, #24]
 8022b1a:	6812      	ldr	r2, [r2, #0]
 8022b1c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8022b20:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8022b24:	fb00 1303 	mla	r3, r0, r3, r1
 8022b28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022b2c:	9307      	str	r3, [sp, #28]
 8022b2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	9308      	str	r3, [sp, #32]
 8022b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b36:	685c      	ldr	r4, [r3, #4]
 8022b38:	3404      	adds	r4, #4
 8022b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	dc03      	bgt.n	8022b48 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	f340 81dc 	ble.w	8022f00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8022b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b52:	1e48      	subs	r0, r1, #1
 8022b54:	1e56      	subs	r6, r2, #1
 8022b56:	9b06      	ldr	r3, [sp, #24]
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	f340 80ba 	ble.w	8022cd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8022b5e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8022b62:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022b66:	d406      	bmi.n	8022b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b68:	4287      	cmp	r7, r0
 8022b6a:	da04      	bge.n	8022b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	db02      	blt.n	8022b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b70:	42b3      	cmp	r3, r6
 8022b72:	f2c0 80af 	blt.w	8022cd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8022b76:	3701      	adds	r7, #1
 8022b78:	f100 80a0 	bmi.w	8022cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8022b7c:	42b9      	cmp	r1, r7
 8022b7e:	f2c0 809d 	blt.w	8022cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8022b82:	3301      	adds	r3, #1
 8022b84:	f100 809a 	bmi.w	8022cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8022b88:	429a      	cmp	r2, r3
 8022b8a:	f2c0 8097 	blt.w	8022cbc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8022b8e:	9b06      	ldr	r3, [sp, #24]
 8022b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b92:	9b07      	ldr	r3, [sp, #28]
 8022b94:	9309      	str	r3, [sp, #36]	; 0x24
 8022b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	f340 80b8 	ble.w	8022d0e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022b9e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022ba0:	142e      	asrs	r6, r5, #16
 8022ba2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022ba4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022ba8:	68c7      	ldr	r7, [r0, #12]
 8022baa:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022bae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022bb2:	6892      	ldr	r2, [r2, #8]
 8022bb4:	f100 80fe 	bmi.w	8022db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bb8:	f102 3cff 	add.w	ip, r2, #4294967295
 8022bbc:	4560      	cmp	r0, ip
 8022bbe:	f280 80f9 	bge.w	8022db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bc2:	2e00      	cmp	r6, #0
 8022bc4:	f2c0 80f6 	blt.w	8022db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bc8:	f107 3cff 	add.w	ip, r7, #4294967295
 8022bcc:	4566      	cmp	r6, ip
 8022bce:	f280 80f1 	bge.w	8022db4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bd2:	b212      	sxth	r2, r2
 8022bd4:	fb06 0002 	mla	r0, r6, r2, r0
 8022bd8:	9e08      	ldr	r6, [sp, #32]
 8022bda:	5c37      	ldrb	r7, [r6, r0]
 8022bdc:	eb06 0e00 	add.w	lr, r6, r0
 8022be0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022be4:	eb04 0c07 	add.w	ip, r4, r7
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	f000 80d4 	beq.w	8022d96 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022bee:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022bf2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022bf6:	4426      	add	r6, r4
 8022bf8:	2900      	cmp	r1, #0
 8022bfa:	f000 80d5 	beq.w	8022da8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022bfe:	eb0e 0002 	add.w	r0, lr, r2
 8022c02:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022c06:	7840      	ldrb	r0, [r0, #1]
 8022c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c10:	4422      	add	r2, r4
 8022c12:	4420      	add	r0, r4
 8022c14:	b29b      	uxth	r3, r3
 8022c16:	f814 a007 	ldrb.w	sl, [r4, r7]
 8022c1a:	b289      	uxth	r1, r1
 8022c1c:	7837      	ldrb	r7, [r6, #0]
 8022c1e:	f896 8001 	ldrb.w	r8, [r6, #1]
 8022c22:	fb03 f901 	mul.w	r9, r3, r1
 8022c26:	011b      	lsls	r3, r3, #4
 8022c28:	78b6      	ldrb	r6, [r6, #2]
 8022c2a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022c2e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022c32:	eba3 0309 	sub.w	r3, r3, r9
 8022c36:	b289      	uxth	r1, r1
 8022c38:	b29b      	uxth	r3, r3
 8022c3a:	ebae 0e01 	sub.w	lr, lr, r1
 8022c3e:	435f      	muls	r7, r3
 8022c40:	fa1f fe8e 	uxth.w	lr, lr
 8022c44:	fb03 f808 	mul.w	r8, r3, r8
 8022c48:	4373      	muls	r3, r6
 8022c4a:	fb0e 770a 	mla	r7, lr, sl, r7
 8022c4e:	f892 a000 	ldrb.w	sl, [r2]
 8022c52:	fb01 770a 	mla	r7, r1, sl, r7
 8022c56:	f890 a000 	ldrb.w	sl, [r0]
 8022c5a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022c5e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8022c62:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022c66:	fb0e 8807 	mla	r8, lr, r7, r8
 8022c6a:	7857      	ldrb	r7, [r2, #1]
 8022c6c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022c70:	fb0e 330c 	mla	r3, lr, ip, r3
 8022c74:	fb01 8807 	mla	r8, r1, r7, r8
 8022c78:	7847      	ldrb	r7, [r0, #1]
 8022c7a:	fb09 8707 	mla	r7, r9, r7, r8
 8022c7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c82:	ea4a 0707 	orr.w	r7, sl, r7
 8022c86:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022c8a:	fb01 310a 	mla	r1, r1, sl, r3
 8022c8e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c94:	fb09 1a0a 	mla	sl, r9, sl, r1
 8022c98:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8022c9c:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8022ca0:	ea47 070a 	orr.w	r7, r7, sl
 8022ca4:	601f      	str	r7, [r3, #0]
 8022ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ca8:	3304      	adds	r3, #4
 8022caa:	9309      	str	r3, [sp, #36]	; 0x24
 8022cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cae:	449b      	add	fp, r3
 8022cb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022cb2:	441d      	add	r5, r3
 8022cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cb6:	3b01      	subs	r3, #1
 8022cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cba:	e76c      	b.n	8022b96 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cbe:	449b      	add	fp, r3
 8022cc0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022cc2:	441d      	add	r5, r3
 8022cc4:	9b06      	ldr	r3, [sp, #24]
 8022cc6:	3b01      	subs	r3, #1
 8022cc8:	9306      	str	r3, [sp, #24]
 8022cca:	9b07      	ldr	r3, [sp, #28]
 8022ccc:	3304      	adds	r3, #4
 8022cce:	9307      	str	r3, [sp, #28]
 8022cd0:	e741      	b.n	8022b56 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022cd2:	d023      	beq.n	8022d1c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022cd4:	9b06      	ldr	r3, [sp, #24]
 8022cd6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022cd8:	3b01      	subs	r3, #1
 8022cda:	fb00 b003 	mla	r0, r0, r3, fp
 8022cde:	1400      	asrs	r0, r0, #16
 8022ce0:	f53f af55 	bmi.w	8022b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022ce4:	3901      	subs	r1, #1
 8022ce6:	4288      	cmp	r0, r1
 8022ce8:	f6bf af51 	bge.w	8022b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022cec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022cee:	fb01 5303 	mla	r3, r1, r3, r5
 8022cf2:	141b      	asrs	r3, r3, #16
 8022cf4:	f53f af4b 	bmi.w	8022b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022cf8:	3a01      	subs	r2, #1
 8022cfa:	4293      	cmp	r3, r2
 8022cfc:	f6bf af47 	bge.w	8022b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d00:	9b06      	ldr	r3, [sp, #24]
 8022d02:	9309      	str	r3, [sp, #36]	; 0x24
 8022d04:	9b07      	ldr	r3, [sp, #28]
 8022d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d0a:	2b00      	cmp	r3, #0
 8022d0c:	dc6f      	bgt.n	8022dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8022d0e:	9b06      	ldr	r3, [sp, #24]
 8022d10:	9a07      	ldr	r2, [sp, #28]
 8022d12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022d1a:	9307      	str	r3, [sp, #28]
 8022d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	f340 80ee 	ble.w	8022f00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8022d24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d2e:	eeb0 6a62 	vmov.f32	s12, s5
 8022d32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022d36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d3e:	ee16 ba10 	vmov	fp, s12
 8022d42:	eeb0 6a43 	vmov.f32	s12, s6
 8022d46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d4a:	ee16 5a10 	vmov	r5, s12
 8022d4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d66:	ee12 2a90 	vmov	r2, s5
 8022d6a:	eef0 2a47 	vmov.f32	s5, s14
 8022d6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d72:	ee13 2a10 	vmov	r2, s6
 8022d76:	931b      	str	r3, [sp, #108]	; 0x6c
 8022d78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d7a:	eeb0 3a67 	vmov.f32	s6, s15
 8022d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d82:	931c      	str	r3, [sp, #112]	; 0x70
 8022d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d88:	3b01      	subs	r3, #1
 8022d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8022d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d8e:	bf08      	it	eq
 8022d90:	4613      	moveq	r3, r2
 8022d92:	9306      	str	r3, [sp, #24]
 8022d94:	e6d1      	b.n	8022b3a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022d96:	b151      	cbz	r1, 8022dae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8022d98:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022d9c:	4660      	mov	r0, ip
 8022d9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022da2:	4422      	add	r2, r4
 8022da4:	4666      	mov	r6, ip
 8022da6:	e735      	b.n	8022c14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8022da8:	4660      	mov	r0, ip
 8022daa:	4662      	mov	r2, ip
 8022dac:	e732      	b.n	8022c14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8022dae:	4660      	mov	r0, ip
 8022db0:	4662      	mov	r2, ip
 8022db2:	e7f7      	b.n	8022da4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022db4:	f110 0c01 	adds.w	ip, r0, #1
 8022db8:	f53f af75 	bmi.w	8022ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dbc:	4562      	cmp	r2, ip
 8022dbe:	f6ff af72 	blt.w	8022ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dc2:	f116 0c01 	adds.w	ip, r6, #1
 8022dc6:	f53f af6e 	bmi.w	8022ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dca:	4567      	cmp	r7, ip
 8022dcc:	f6ff af6b 	blt.w	8022ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dd0:	b23f      	sxth	r7, r7
 8022dd2:	b212      	sxth	r2, r2
 8022dd4:	9701      	str	r7, [sp, #4]
 8022dd6:	9200      	str	r2, [sp, #0]
 8022dd8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022ddc:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022de0:	4623      	mov	r3, r4
 8022de2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022de4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022de8:	f7ff fdd5 	bl	8022996 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8022dec:	e75b      	b.n	8022ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022df0:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022df4:	1428      	asrs	r0, r5, #16
 8022df6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022dfa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022dfe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022e02:	fb02 6000 	mla	r0, r2, r0, r6
 8022e06:	9e08      	ldr	r6, [sp, #32]
 8022e08:	5c37      	ldrb	r7, [r6, r0]
 8022e0a:	eb06 0e00 	add.w	lr, r6, r0
 8022e0e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022e12:	eb04 0c07 	add.w	ip, r4, r7
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d063      	beq.n	8022ee2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022e1a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022e1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022e22:	4426      	add	r6, r4
 8022e24:	2900      	cmp	r1, #0
 8022e26:	d065      	beq.n	8022ef4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8022e28:	eb0e 0002 	add.w	r0, lr, r2
 8022e2c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022e30:	7840      	ldrb	r0, [r0, #1]
 8022e32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e3a:	4422      	add	r2, r4
 8022e3c:	4420      	add	r0, r4
 8022e3e:	b29b      	uxth	r3, r3
 8022e40:	f814 a007 	ldrb.w	sl, [r4, r7]
 8022e44:	b289      	uxth	r1, r1
 8022e46:	7837      	ldrb	r7, [r6, #0]
 8022e48:	f896 8001 	ldrb.w	r8, [r6, #1]
 8022e4c:	fb03 f901 	mul.w	r9, r3, r1
 8022e50:	011b      	lsls	r3, r3, #4
 8022e52:	78b6      	ldrb	r6, [r6, #2]
 8022e54:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022e58:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022e5c:	eba3 0309 	sub.w	r3, r3, r9
 8022e60:	b289      	uxth	r1, r1
 8022e62:	b29b      	uxth	r3, r3
 8022e64:	ebae 0e01 	sub.w	lr, lr, r1
 8022e68:	435f      	muls	r7, r3
 8022e6a:	fa1f fe8e 	uxth.w	lr, lr
 8022e6e:	fb03 f808 	mul.w	r8, r3, r8
 8022e72:	4373      	muls	r3, r6
 8022e74:	7896      	ldrb	r6, [r2, #2]
 8022e76:	fb0e 770a 	mla	r7, lr, sl, r7
 8022e7a:	f892 a000 	ldrb.w	sl, [r2]
 8022e7e:	fb01 770a 	mla	r7, r1, sl, r7
 8022e82:	f890 a000 	ldrb.w	sl, [r0]
 8022e86:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022e8a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8022e8e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022e92:	fb0e 8807 	mla	r8, lr, r7, r8
 8022e96:	7857      	ldrb	r7, [r2, #1]
 8022e98:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022e9c:	fb0e 330c 	mla	r3, lr, ip, r3
 8022ea0:	fb01 8807 	mla	r8, r1, r7, r8
 8022ea4:	7847      	ldrb	r7, [r0, #1]
 8022ea6:	fb01 3306 	mla	r3, r1, r6, r3
 8022eaa:	fb09 8707 	mla	r7, r9, r7, r8
 8022eae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022eb2:	ea4a 0707 	orr.w	r7, sl, r7
 8022eb6:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022eba:	fb09 3a0a 	mla	sl, r9, sl, r3
 8022ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ec0:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8022ec4:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8022ec8:	ea47 070a 	orr.w	r7, r7, sl
 8022ecc:	f843 7b04 	str.w	r7, [r3], #4
 8022ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022ed4:	449b      	add	fp, r3
 8022ed6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ed8:	441d      	add	r5, r3
 8022eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022edc:	3b01      	subs	r3, #1
 8022ede:	9309      	str	r3, [sp, #36]	; 0x24
 8022ee0:	e712      	b.n	8022d08 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022ee2:	b151      	cbz	r1, 8022efa <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022ee4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022ee8:	4660      	mov	r0, ip
 8022eea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022eee:	4422      	add	r2, r4
 8022ef0:	4666      	mov	r6, ip
 8022ef2:	e7a4      	b.n	8022e3e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022ef4:	4660      	mov	r0, ip
 8022ef6:	4662      	mov	r2, ip
 8022ef8:	e7a1      	b.n	8022e3e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022efa:	4660      	mov	r0, ip
 8022efc:	4662      	mov	r2, ip
 8022efe:	e7f7      	b.n	8022ef0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8022f00:	b00f      	add	sp, #60	; 0x3c
 8022f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f06 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8022f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f0a:	b085      	sub	sp, #20
 8022f0c:	6808      	ldr	r0, [r1, #0]
 8022f0e:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 8022f12:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022f16:	f1b9 0f00 	cmp.w	r9, #0
 8022f1a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8022f1e:	fb09 6408 	mla	r4, r9, r8, r6
 8022f22:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8022f26:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022f2a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8022f2e:	eb02 0a04 	add.w	sl, r2, r4
 8022f32:	f2c0 8103 	blt.w	802313c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8022f36:	45cb      	cmp	fp, r9
 8022f38:	f340 8100 	ble.w	802313c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8022f3c:	2e00      	cmp	r6, #0
 8022f3e:	f2c0 80fb 	blt.w	8023138 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8022f42:	45b0      	cmp	r8, r6
 8022f44:	f340 80f8 	ble.w	8023138 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8022f48:	5d12      	ldrb	r2, [r2, r4]
 8022f4a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022f4e:	1c72      	adds	r2, r6, #1
 8022f50:	f100 80f5 	bmi.w	802313e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8022f54:	4590      	cmp	r8, r2
 8022f56:	f340 80f2 	ble.w	802313e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8022f5a:	f1bc 0f00 	cmp.w	ip, #0
 8022f5e:	f000 80ee 	beq.w	802313e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8022f62:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022f66:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022f6a:	f119 0901 	adds.w	r9, r9, #1
 8022f6e:	f100 80ea 	bmi.w	8023146 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8022f72:	45cb      	cmp	fp, r9
 8022f74:	f340 80e7 	ble.w	8023146 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8022f78:	f1be 0f00 	cmp.w	lr, #0
 8022f7c:	f000 80e3 	beq.w	8023146 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8022f80:	2e00      	cmp	r6, #0
 8022f82:	f2c0 80de 	blt.w	8023142 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8022f86:	45b0      	cmp	r8, r6
 8022f88:	f340 80db 	ble.w	8023142 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8022f8c:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022f90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022f94:	3601      	adds	r6, #1
 8022f96:	d409      	bmi.n	8022fac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8022f98:	45b0      	cmp	r8, r6
 8022f9a:	dd07      	ble.n	8022fac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8022f9c:	f1bc 0f00 	cmp.w	ip, #0
 8022fa0:	d004      	beq.n	8022fac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8022fa2:	44d0      	add	r8, sl
 8022fa4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022fa8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8022fac:	fa1f fc8c 	uxth.w	ip, ip
 8022fb0:	fa1f f38e 	uxth.w	r3, lr
 8022fb4:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8022fb8:	fb03 fe0c 	mul.w	lr, r3, ip
 8022fbc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022fc0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022fc4:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8022fc8:	ebac 060e 	sub.w	r6, ip, lr
 8022fcc:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8022fd0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022fd4:	b29b      	uxth	r3, r3
 8022fd6:	b2b6      	uxth	r6, r6
 8022fd8:	ebac 0c03 	sub.w	ip, ip, r3
 8022fdc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022fe0:	9601      	str	r6, [sp, #4]
 8022fe2:	fa1f f68c 	uxth.w	r6, ip
 8022fe6:	9602      	str	r6, [sp, #8]
 8022fe8:	9e01      	ldr	r6, [sp, #4]
 8022fea:	fb06 fc0a 	mul.w	ip, r6, sl
 8022fee:	9e02      	ldr	r6, [sp, #8]
 8022ff0:	fb06 cc0b 	mla	ip, r6, fp, ip
 8022ff4:	fb03 cc09 	mla	ip, r3, r9, ip
 8022ff8:	fb0e cc08 	mla	ip, lr, r8, ip
 8022ffc:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8023000:	9603      	str	r6, [sp, #12]
 8023002:	2e00      	cmp	r6, #0
 8023004:	f000 8095 	beq.w	8023132 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8023008:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802300c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023010:	fb0b fc0c 	mul.w	ip, fp, ip
 8023014:	fb0b f505 	mul.w	r5, fp, r5
 8023018:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802301c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023020:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023024:	44dc      	add	ip, fp
 8023026:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802302a:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 802302e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023032:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023036:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802303a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802303e:	fb0a fc0c 	mul.w	ip, sl, ip
 8023042:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023046:	fb0a fa04 	mul.w	sl, sl, r4
 802304a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802304e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023052:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8023056:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802305a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802305e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8023062:	4465      	add	r5, ip
 8023064:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8023068:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802306c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023070:	fb09 fc0c 	mul.w	ip, r9, ip
 8023074:	0a2d      	lsrs	r5, r5, #8
 8023076:	fb09 f902 	mul.w	r9, r9, r2
 802307a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802307e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8023082:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023086:	f509 7280 	add.w	r2, r9, #256	; 0x100
 802308a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802308e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023092:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023096:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 802309a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802309e:	4464      	add	r4, ip
 80230a0:	fb08 f202 	mul.w	r2, r8, r2
 80230a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80230a8:	fb08 f800 	mul.w	r8, r8, r0
 80230ac:	0a24      	lsrs	r4, r4, #8
 80230ae:	0a10      	lsrs	r0, r2, #8
 80230b0:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80230b4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80230b8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80230bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80230c0:	4402      	add	r2, r0
 80230c2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80230c6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80230ca:	9801      	ldr	r0, [sp, #4]
 80230cc:	0a12      	lsrs	r2, r2, #8
 80230ce:	4345      	muls	r5, r0
 80230d0:	9802      	ldr	r0, [sp, #8]
 80230d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80230d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80230da:	fb06 5500 	mla	r5, r6, r0, r5
 80230de:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80230e2:	fb02 520e 	mla	r2, r2, lr, r5
 80230e6:	fb04 2403 	mla	r4, r4, r3, r2
 80230ea:	9a01      	ldr	r2, [sp, #4]
 80230ec:	fb02 f60a 	mul.w	r6, r2, sl
 80230f0:	0a24      	lsrs	r4, r4, #8
 80230f2:	9a03      	ldr	r2, [sp, #12]
 80230f4:	fb00 660b 	mla	r6, r0, fp, r6
 80230f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80230fc:	fb07 fc02 	mul.w	ip, r7, r2
 8023100:	fb0e 6e08 	mla	lr, lr, r8, r6
 8023104:	fb03 e309 	mla	r3, r3, r9, lr
 8023108:	0a1b      	lsrs	r3, r3, #8
 802310a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802310e:	4323      	orrs	r3, r4
 8023110:	f10c 0401 	add.w	r4, ip, #1
 8023114:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8023118:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802311c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023120:	1224      	asrs	r4, r4, #8
 8023122:	b2d5      	uxtb	r5, r2
 8023124:	2cff      	cmp	r4, #255	; 0xff
 8023126:	b2c6      	uxtb	r6, r0
 8023128:	d10f      	bne.n	802314a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 802312a:	700b      	strb	r3, [r1, #0]
 802312c:	7048      	strb	r0, [r1, #1]
 802312e:	708a      	strb	r2, [r1, #2]
 8023130:	70cc      	strb	r4, [r1, #3]
 8023132:	b005      	add	sp, #20
 8023134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023138:	4605      	mov	r5, r0
 802313a:	e708      	b.n	8022f4e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 802313c:	4605      	mov	r5, r0
 802313e:	4604      	mov	r4, r0
 8023140:	e713      	b.n	8022f6a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 8023142:	4602      	mov	r2, r0
 8023144:	e726      	b.n	8022f94 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 8023146:	4602      	mov	r2, r0
 8023148:	e730      	b.n	8022fac <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802314a:	b2e2      	uxtb	r2, r4
 802314c:	2c00      	cmp	r4, #0
 802314e:	d0f0      	beq.n	8023132 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8023150:	78cc      	ldrb	r4, [r1, #3]
 8023152:	b2db      	uxtb	r3, r3
 8023154:	fb17 f606 	smulbb	r6, r7, r6
 8023158:	fb02 fc04 	mul.w	ip, r2, r4
 802315c:	4422      	add	r2, r4
 802315e:	f10c 0001 	add.w	r0, ip, #1
 8023162:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8023166:	1200      	asrs	r0, r0, #8
 8023168:	1a24      	subs	r4, r4, r0
 802316a:	1a12      	subs	r2, r2, r0
 802316c:	7808      	ldrb	r0, [r1, #0]
 802316e:	b2d2      	uxtb	r2, r2
 8023170:	4360      	muls	r0, r4
 8023172:	70ca      	strb	r2, [r1, #3]
 8023174:	fb07 0303 	mla	r3, r7, r3, r0
 8023178:	7848      	ldrb	r0, [r1, #1]
 802317a:	fb17 f705 	smulbb	r7, r7, r5
 802317e:	fb04 6000 	mla	r0, r4, r0, r6
 8023182:	fb93 f3f2 	sdiv	r3, r3, r2
 8023186:	2bff      	cmp	r3, #255	; 0xff
 8023188:	bfd6      	itet	le
 802318a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802318e:	23ff      	movgt	r3, #255	; 0xff
 8023190:	b2db      	uxtble	r3, r3
 8023192:	fb90 f0f2 	sdiv	r0, r0, r2
 8023196:	700b      	strb	r3, [r1, #0]
 8023198:	28ff      	cmp	r0, #255	; 0xff
 802319a:	788b      	ldrb	r3, [r1, #2]
 802319c:	bfd4      	ite	le
 802319e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80231a2:	20ff      	movgt	r0, #255	; 0xff
 80231a4:	fb04 7303 	mla	r3, r4, r3, r7
 80231a8:	bfd8      	it	le
 80231aa:	b2c0      	uxtble	r0, r0
 80231ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80231b0:	2bff      	cmp	r3, #255	; 0xff
 80231b2:	7048      	strb	r0, [r1, #1]
 80231b4:	bfd6      	itet	le
 80231b6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80231ba:	23ff      	movgt	r3, #255	; 0xff
 80231bc:	b2db      	uxtble	r3, r3
 80231be:	708b      	strb	r3, [r1, #2]
 80231c0:	e7b7      	b.n	8023132 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

080231c2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231c6:	b09d      	sub	sp, #116	; 0x74
 80231c8:	921a      	str	r2, [sp, #104]	; 0x68
 80231ca:	9308      	str	r3, [sp, #32]
 80231cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80231ce:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80231d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80231d4:	9118      	str	r1, [sp, #96]	; 0x60
 80231d6:	6850      	ldr	r0, [r2, #4]
 80231d8:	9309      	str	r3, [sp, #36]	; 0x24
 80231da:	6812      	ldr	r2, [r2, #0]
 80231dc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80231e0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80231e4:	fb00 1303 	mla	r3, r0, r3, r1
 80231e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80231ec:	930c      	str	r3, [sp, #48]	; 0x30
 80231ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	9311      	str	r3, [sp, #68]	; 0x44
 80231f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231f6:	685f      	ldr	r7, [r3, #4]
 80231f8:	3704      	adds	r7, #4
 80231fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	dc03      	bgt.n	8023208 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023200:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023202:	2b00      	cmp	r3, #0
 8023204:	f340 83cd 	ble.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8023208:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802320a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802320e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023212:	1e48      	subs	r0, r1, #1
 8023214:	f102 3cff 	add.w	ip, r2, #4294967295
 8023218:	9b08      	ldr	r3, [sp, #32]
 802321a:	2b00      	cmp	r3, #0
 802321c:	f340 816c 	ble.w	80234f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8023220:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023224:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023228:	d406      	bmi.n	8023238 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802322a:	4586      	cmp	lr, r0
 802322c:	da04      	bge.n	8023238 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802322e:	2b00      	cmp	r3, #0
 8023230:	db02      	blt.n	8023238 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023232:	4563      	cmp	r3, ip
 8023234:	f2c0 8161 	blt.w	80234fa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8023238:	f11e 0e01 	adds.w	lr, lr, #1
 802323c:	f100 8151 	bmi.w	80234e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023240:	4571      	cmp	r1, lr
 8023242:	f2c0 814e 	blt.w	80234e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023246:	3301      	adds	r3, #1
 8023248:	f100 814b 	bmi.w	80234e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802324c:	429a      	cmp	r2, r3
 802324e:	f2c0 8148 	blt.w	80234e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023252:	9b08      	ldr	r3, [sp, #32]
 8023254:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8023258:	9319      	str	r3, [sp, #100]	; 0x64
 802325a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802325c:	2b00      	cmp	r3, #0
 802325e:	f340 8169 	ble.w	8023534 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023262:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023264:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023268:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802326c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023270:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023274:	1423      	asrs	r3, r4, #16
 8023276:	f100 81f7 	bmi.w	8023668 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802327a:	f100 39ff 	add.w	r9, r0, #4294967295
 802327e:	454b      	cmp	r3, r9
 8023280:	f280 81f2 	bge.w	8023668 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8023284:	f1bc 0f00 	cmp.w	ip, #0
 8023288:	f2c0 81ee 	blt.w	8023668 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802328c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023290:	45cc      	cmp	ip, r9
 8023292:	f280 81e9 	bge.w	8023668 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8023296:	b200      	sxth	r0, r0
 8023298:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802329a:	fb0c 3300 	mla	r3, ip, r0, r3
 802329e:	eb05 0903 	add.w	r9, r5, r3
 80232a2:	5ceb      	ldrb	r3, [r5, r3]
 80232a4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80232a8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80232ac:	2a00      	cmp	r2, #0
 80232ae:	f000 8187 	beq.w	80235c0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80232b2:	f899 c001 	ldrb.w	ip, [r9, #1]
 80232b6:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80232ba:	950d      	str	r5, [sp, #52]	; 0x34
 80232bc:	0e2d      	lsrs	r5, r5, #24
 80232be:	9514      	str	r5, [sp, #80]	; 0x50
 80232c0:	b179      	cbz	r1, 80232e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80232c2:	eb09 0c00 	add.w	ip, r9, r0
 80232c6:	f819 0000 	ldrb.w	r0, [r9, r0]
 80232ca:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80232ce:	900a      	str	r0, [sp, #40]	; 0x28
 80232d0:	0e00      	lsrs	r0, r0, #24
 80232d2:	9012      	str	r0, [sp, #72]	; 0x48
 80232d4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80232d8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80232dc:	900e      	str	r0, [sp, #56]	; 0x38
 80232de:	0e00      	lsrs	r0, r0, #24
 80232e0:	9015      	str	r0, [sp, #84]	; 0x54
 80232e2:	b292      	uxth	r2, r2
 80232e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80232e6:	b289      	uxth	r1, r1
 80232e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80232ea:	fb02 fa01 	mul.w	sl, r2, r1
 80232ee:	0112      	lsls	r2, r2, #4
 80232f0:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80232f4:	eba2 090a 	sub.w	r9, r2, sl
 80232f8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80232fc:	b289      	uxth	r1, r1
 80232fe:	fa1f f989 	uxth.w	r9, r9
 8023302:	1a52      	subs	r2, r2, r1
 8023304:	fb09 f000 	mul.w	r0, r9, r0
 8023308:	b292      	uxth	r2, r2
 802330a:	fb02 000e 	mla	r0, r2, lr, r0
 802330e:	fb01 0005 	mla	r0, r1, r5, r0
 8023312:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023314:	fb0a 0005 	mla	r0, sl, r5, r0
 8023318:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802331c:	2800      	cmp	r0, #0
 802331e:	f000 80d6 	beq.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023322:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023326:	d01b      	beq.n	8023360 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8023328:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 802332c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023330:	fb0e fb0b 	mul.w	fp, lr, fp
 8023334:	fb0e fe03 	mul.w	lr, lr, r3
 8023338:	ea4f 231b 	mov.w	r3, fp, lsr #8
 802333c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023340:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023344:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023348:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802334c:	445b      	add	r3, fp
 802334e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023352:	0a1b      	lsrs	r3, r3, #8
 8023354:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023358:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802335c:	ea43 030c 	orr.w	r3, r3, ip
 8023360:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023362:	2dff      	cmp	r5, #255	; 0xff
 8023364:	d021      	beq.n	80233aa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023366:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023368:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802336c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802336e:	fb05 fc0c 	mul.w	ip, r5, ip
 8023372:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023374:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023378:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 802337c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802337e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023382:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023386:	fb05 fb0b 	mul.w	fp, r5, fp
 802338a:	44e6      	add	lr, ip
 802338c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023390:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023394:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023398:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802339c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80233a0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80233a4:	ea4e 050b 	orr.w	r5, lr, fp
 80233a8:	950d      	str	r5, [sp, #52]	; 0x34
 80233aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80233ac:	2dff      	cmp	r5, #255	; 0xff
 80233ae:	d021      	beq.n	80233f4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80233b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80233b2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80233b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80233b8:	fb05 fc0c 	mul.w	ip, r5, ip
 80233bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80233be:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80233c2:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80233c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80233c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80233cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233d0:	fb05 fb0b 	mul.w	fp, r5, fp
 80233d4:	44e6      	add	lr, ip
 80233d6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80233da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233de:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80233e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233e6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80233ea:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80233ee:	ea4e 050b 	orr.w	r5, lr, fp
 80233f2:	950a      	str	r5, [sp, #40]	; 0x28
 80233f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80233f6:	2dff      	cmp	r5, #255	; 0xff
 80233f8:	d021      	beq.n	802343e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80233fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80233fc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023400:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023402:	fb05 fc0c 	mul.w	ip, r5, ip
 8023406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023408:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802340c:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023410:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023412:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023416:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802341a:	fb05 fb0b 	mul.w	fp, r5, fp
 802341e:	44e6      	add	lr, ip
 8023420:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023424:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023428:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802342c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023430:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023434:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023438:	ea4e 050b 	orr.w	r5, lr, fp
 802343c:	950e      	str	r5, [sp, #56]	; 0x38
 802343e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023440:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023448:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802344c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802344e:	fb09 fc0c 	mul.w	ip, r9, ip
 8023452:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023456:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802345a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802345c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023460:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023464:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023466:	fb0a cc0e 	mla	ip, sl, lr, ip
 802346a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802346e:	fb09 f90e 	mul.w	r9, r9, lr
 8023472:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023476:	fb02 9303 	mla	r3, r2, r3, r9
 802347a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802347c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023480:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8023484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023486:	fb01 330b 	mla	r3, r1, fp, r3
 802348a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802348e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8023492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023494:	4358      	muls	r0, r3
 8023496:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802349a:	1c43      	adds	r3, r0, #1
 802349c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80234a4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80234a8:	1200      	asrs	r0, r0, #8
 80234aa:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80234ae:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80234b2:	28ff      	cmp	r0, #255	; 0xff
 80234b4:	b2d9      	uxtb	r1, r3
 80234b6:	fa5f fe82 	uxtb.w	lr, r2
 80234ba:	f040 808c 	bne.w	80235d6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80234be:	f888 c000 	strb.w	ip, [r8]
 80234c2:	f888 2001 	strb.w	r2, [r8, #1]
 80234c6:	f888 3002 	strb.w	r3, [r8, #2]
 80234ca:	f888 0003 	strb.w	r0, [r8, #3]
 80234ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234d0:	f108 0804 	add.w	r8, r8, #4
 80234d4:	441c      	add	r4, r3
 80234d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234d8:	441e      	add	r6, r3
 80234da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80234dc:	3b01      	subs	r3, #1
 80234de:	9319      	str	r3, [sp, #100]	; 0x64
 80234e0:	e6bb      	b.n	802325a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80234e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234e4:	441c      	add	r4, r3
 80234e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234e8:	441e      	add	r6, r3
 80234ea:	9b08      	ldr	r3, [sp, #32]
 80234ec:	3b01      	subs	r3, #1
 80234ee:	9308      	str	r3, [sp, #32]
 80234f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234f2:	3304      	adds	r3, #4
 80234f4:	930c      	str	r3, [sp, #48]	; 0x30
 80234f6:	e68f      	b.n	8023218 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80234f8:	d023      	beq.n	8023542 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80234fa:	9b08      	ldr	r3, [sp, #32]
 80234fc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80234fe:	3b01      	subs	r3, #1
 8023500:	fb00 4003 	mla	r0, r0, r3, r4
 8023504:	1400      	asrs	r0, r0, #16
 8023506:	f53f aea4 	bmi.w	8023252 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802350a:	3901      	subs	r1, #1
 802350c:	4288      	cmp	r0, r1
 802350e:	f6bf aea0 	bge.w	8023252 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023512:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023514:	fb01 6303 	mla	r3, r1, r3, r6
 8023518:	141b      	asrs	r3, r3, #16
 802351a:	f53f ae9a 	bmi.w	8023252 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802351e:	3a01      	subs	r2, #1
 8023520:	4293      	cmp	r3, r2
 8023522:	f6bf ae96 	bge.w	8023252 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023526:	9b08      	ldr	r3, [sp, #32]
 8023528:	990c      	ldr	r1, [sp, #48]	; 0x30
 802352a:	9319      	str	r3, [sp, #100]	; 0x64
 802352c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802352e:	2b00      	cmp	r3, #0
 8023530:	f300 80ba 	bgt.w	80236a8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023534:	9b08      	ldr	r3, [sp, #32]
 8023536:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802353a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802353c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8023540:	930c      	str	r3, [sp, #48]	; 0x30
 8023542:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023544:	2b00      	cmp	r3, #0
 8023546:	f340 822c 	ble.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 802354a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802354e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023550:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023554:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023558:	eef0 6a62 	vmov.f32	s13, s5
 802355c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023560:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023564:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023568:	ee16 4a90 	vmov	r4, s13
 802356c:	eef0 6a43 	vmov.f32	s13, s6
 8023570:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023574:	ee16 6a90 	vmov	r6, s13
 8023578:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802357c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023580:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023584:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023588:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802358c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023590:	ee12 2a90 	vmov	r2, s5
 8023594:	eef0 2a47 	vmov.f32	s5, s14
 8023598:	fb92 f3f3 	sdiv	r3, r2, r3
 802359c:	ee13 2a10 	vmov	r2, s6
 80235a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80235a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235a4:	eeb0 3a67 	vmov.f32	s6, s15
 80235a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235ac:	932a      	str	r3, [sp, #168]	; 0xa8
 80235ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80235b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80235b2:	3b01      	subs	r3, #1
 80235b4:	9318      	str	r3, [sp, #96]	; 0x60
 80235b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235b8:	bf08      	it	eq
 80235ba:	4613      	moveq	r3, r2
 80235bc:	9308      	str	r3, [sp, #32]
 80235be:	e61c      	b.n	80231fa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80235c0:	2900      	cmp	r1, #0
 80235c2:	f43f ae8e 	beq.w	80232e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80235c6:	f819 0000 	ldrb.w	r0, [r9, r0]
 80235ca:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80235ce:	900a      	str	r0, [sp, #40]	; 0x28
 80235d0:	0e00      	lsrs	r0, r0, #24
 80235d2:	9012      	str	r0, [sp, #72]	; 0x48
 80235d4:	e685      	b.n	80232e2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80235d6:	b2c3      	uxtb	r3, r0
 80235d8:	2800      	cmp	r0, #0
 80235da:	f43f af78 	beq.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80235de:	f898 0003 	ldrb.w	r0, [r8, #3]
 80235e2:	fa5f fc8c 	uxtb.w	ip, ip
 80235e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80235e8:	fb03 f900 	mul.w	r9, r3, r0
 80235ec:	4403      	add	r3, r0
 80235ee:	f109 0201 	add.w	r2, r9, #1
 80235f2:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 80235f6:	1212      	asrs	r2, r2, #8
 80235f8:	1a80      	subs	r0, r0, r2
 80235fa:	1a9b      	subs	r3, r3, r2
 80235fc:	f898 2000 	ldrb.w	r2, [r8]
 8023600:	b2db      	uxtb	r3, r3
 8023602:	4342      	muls	r2, r0
 8023604:	f888 3003 	strb.w	r3, [r8, #3]
 8023608:	fb05 220c 	mla	r2, r5, ip, r2
 802360c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802360e:	fb92 f2f3 	sdiv	r2, r2, r3
 8023612:	fb15 fe0e 	smulbb	lr, r5, lr
 8023616:	2aff      	cmp	r2, #255	; 0xff
 8023618:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802361a:	bfd4      	ite	le
 802361c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023620:	22ff      	movgt	r2, #255	; 0xff
 8023622:	fb15 f101 	smulbb	r1, r5, r1
 8023626:	bfd8      	it	le
 8023628:	b2d2      	uxtble	r2, r2
 802362a:	f888 2000 	strb.w	r2, [r8]
 802362e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023632:	fb00 e202 	mla	r2, r0, r2, lr
 8023636:	fb92 f2f3 	sdiv	r2, r2, r3
 802363a:	2aff      	cmp	r2, #255	; 0xff
 802363c:	bfd6      	itet	le
 802363e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023642:	22ff      	movgt	r2, #255	; 0xff
 8023644:	b2d2      	uxtble	r2, r2
 8023646:	f888 2001 	strb.w	r2, [r8, #1]
 802364a:	f898 2002 	ldrb.w	r2, [r8, #2]
 802364e:	fb00 1202 	mla	r2, r0, r2, r1
 8023652:	fb92 f2f3 	sdiv	r2, r2, r3
 8023656:	2aff      	cmp	r2, #255	; 0xff
 8023658:	bfd6      	itet	le
 802365a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802365e:	22ff      	movgt	r2, #255	; 0xff
 8023660:	b2d2      	uxtble	r2, r2
 8023662:	f888 2002 	strb.w	r2, [r8, #2]
 8023666:	e732      	b.n	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023668:	f113 0901 	adds.w	r9, r3, #1
 802366c:	f53f af2f 	bmi.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023670:	4548      	cmp	r0, r9
 8023672:	f6ff af2c 	blt.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023676:	f11c 0901 	adds.w	r9, ip, #1
 802367a:	f53f af28 	bmi.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802367e:	45ce      	cmp	lr, r9
 8023680:	f6ff af25 	blt.w	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023686:	b200      	sxth	r0, r0
 8023688:	9302      	str	r3, [sp, #8]
 802368a:	fa0f f38e 	sxth.w	r3, lr
 802368e:	9000      	str	r0, [sp, #0]
 8023690:	9301      	str	r3, [sp, #4]
 8023692:	463b      	mov	r3, r7
 8023694:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023696:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802369a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802369e:	4641      	mov	r1, r8
 80236a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80236a2:	f7ff fc30 	bl	8022f06 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 80236a6:	e712      	b.n	80234ce <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80236a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80236ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80236b0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80236b4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80236b8:	1433      	asrs	r3, r6, #16
 80236ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80236be:	fb0c e303 	mla	r3, ip, r3, lr
 80236c2:	eb05 0e03 	add.w	lr, r5, r3
 80236c6:	5ceb      	ldrb	r3, [r5, r3]
 80236c8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80236cc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80236d0:	2a00      	cmp	r2, #0
 80236d2:	f000 8116 	beq.w	8023902 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 80236d6:	f89e 9001 	ldrb.w	r9, [lr, #1]
 80236da:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 80236de:	950f      	str	r5, [sp, #60]	; 0x3c
 80236e0:	0e2d      	lsrs	r5, r5, #24
 80236e2:	9516      	str	r5, [sp, #88]	; 0x58
 80236e4:	b178      	cbz	r0, 8023706 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 80236e6:	eb0e 090c 	add.w	r9, lr, ip
 80236ea:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80236ee:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80236f2:	f899 c001 	ldrb.w	ip, [r9, #1]
 80236f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80236f8:	0e2d      	lsrs	r5, r5, #24
 80236fa:	9513      	str	r5, [sp, #76]	; 0x4c
 80236fc:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8023700:	9510      	str	r5, [sp, #64]	; 0x40
 8023702:	0e2d      	lsrs	r5, r5, #24
 8023704:	9517      	str	r5, [sp, #92]	; 0x5c
 8023706:	b292      	uxth	r2, r2
 8023708:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802370a:	b280      	uxth	r0, r0
 802370c:	fb02 fa00 	mul.w	sl, r2, r0
 8023710:	0112      	lsls	r2, r2, #4
 8023712:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023716:	eba2 090a 	sub.w	r9, r2, sl
 802371a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802371e:	fa1f fc80 	uxth.w	ip, r0
 8023722:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023724:	fa1f f989 	uxth.w	r9, r9
 8023728:	eba2 020c 	sub.w	r2, r2, ip
 802372c:	fb09 f000 	mul.w	r0, r9, r0
 8023730:	b292      	uxth	r2, r2
 8023732:	fb02 0008 	mla	r0, r2, r8, r0
 8023736:	fb0c 0005 	mla	r0, ip, r5, r0
 802373a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802373c:	fb0a 0005 	mla	r0, sl, r5, r0
 8023740:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023744:	2800      	cmp	r0, #0
 8023746:	f000 80d3 	beq.w	80238f0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802374a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802374e:	d01b      	beq.n	8023788 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023750:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8023754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023758:	fb08 fb0b 	mul.w	fp, r8, fp
 802375c:	fb08 f803 	mul.w	r8, r8, r3
 8023760:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8023764:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023768:	f508 7e80 	add.w	lr, r8, #256	; 0x100
 802376c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023770:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 8023774:	445b      	add	r3, fp
 8023776:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802377a:	0a1b      	lsrs	r3, r3, #8
 802377c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023780:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023784:	ea43 030e 	orr.w	r3, r3, lr
 8023788:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802378a:	2dff      	cmp	r5, #255	; 0xff
 802378c:	d021      	beq.n	80237d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802378e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023790:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023794:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023796:	fb05 fe0e 	mul.w	lr, r5, lr
 802379a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802379c:	ea4f 281e 	mov.w	r8, lr, lsr #8
 80237a0:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80237a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80237a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80237aa:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80237ae:	fb05 fb0b 	mul.w	fp, r5, fp
 80237b2:	44f0      	add	r8, lr
 80237b4:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 80237b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80237bc:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 80237c0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80237c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80237c8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80237cc:	ea48 050b 	orr.w	r5, r8, fp
 80237d0:	950f      	str	r5, [sp, #60]	; 0x3c
 80237d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80237d4:	2dff      	cmp	r5, #255	; 0xff
 80237d6:	d021      	beq.n	802381c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 80237d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80237da:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80237de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80237e0:	fb05 fe0e 	mul.w	lr, r5, lr
 80237e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80237e6:	ea4f 281e 	mov.w	r8, lr, lsr #8
 80237ea:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80237ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80237f0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80237f4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80237f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80237fc:	44f0      	add	r8, lr
 80237fe:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8023802:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023806:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 802380a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802380e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023812:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023816:	ea48 050b 	orr.w	r5, r8, fp
 802381a:	950b      	str	r5, [sp, #44]	; 0x2c
 802381c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802381e:	2dff      	cmp	r5, #255	; 0xff
 8023820:	d021      	beq.n	8023866 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 8023822:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023824:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023828:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802382a:	fb05 fe0e 	mul.w	lr, r5, lr
 802382e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023830:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8023834:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023838:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802383a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802383e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023842:	fb05 fb0b 	mul.w	fp, r5, fp
 8023846:	44f0      	add	r8, lr
 8023848:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 802384c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023850:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8023854:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023858:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802385c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023860:	ea48 050b 	orr.w	r5, r8, fp
 8023864:	9510      	str	r5, [sp, #64]	; 0x40
 8023866:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023868:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802386c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023870:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023874:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023876:	fb09 fe0e 	mul.w	lr, r9, lr
 802387a:	fb02 ee08 	mla	lr, r2, r8, lr
 802387e:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8023882:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023884:	fb0c ee08 	mla	lr, ip, r8, lr
 8023888:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 802388c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802388e:	fb0a ee08 	mla	lr, sl, r8, lr
 8023892:	f405 487f 	and.w	r8, r5, #65280	; 0xff00
 8023896:	fb09 f908 	mul.w	r9, r9, r8
 802389a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802389e:	fb02 9303 	mla	r3, r2, r3, r9
 80238a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80238a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238a8:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 80238ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80238ae:	fb0c 330b 	mla	r3, ip, fp, r3
 80238b2:	f402 487f 	and.w	r8, r2, #65280	; 0xff00
 80238b6:	fb0a 3808 	mla	r8, sl, r8, r3
 80238ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238bc:	4358      	muls	r0, r3
 80238be:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80238c2:	1c43      	adds	r3, r0, #1
 80238c4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80238c8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80238cc:	ea4e 0e08 	orr.w	lr, lr, r8
 80238d0:	1200      	asrs	r0, r0, #8
 80238d2:	f3ce 4307 	ubfx	r3, lr, #16, #8
 80238d6:	f3ce 2207 	ubfx	r2, lr, #8, #8
 80238da:	28ff      	cmp	r0, #255	; 0xff
 80238dc:	fa5f fc83 	uxtb.w	ip, r3
 80238e0:	fa5f f882 	uxtb.w	r8, r2
 80238e4:	d118      	bne.n	8023918 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80238e6:	f881 e000 	strb.w	lr, [r1]
 80238ea:	704a      	strb	r2, [r1, #1]
 80238ec:	708b      	strb	r3, [r1, #2]
 80238ee:	70c8      	strb	r0, [r1, #3]
 80238f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238f2:	3104      	adds	r1, #4
 80238f4:	441c      	add	r4, r3
 80238f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238f8:	441e      	add	r6, r3
 80238fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238fc:	3b01      	subs	r3, #1
 80238fe:	9319      	str	r3, [sp, #100]	; 0x64
 8023900:	e614      	b.n	802352c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023902:	2800      	cmp	r0, #0
 8023904:	f43f aeff 	beq.w	8023706 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8023908:	f81e c00c 	ldrb.w	ip, [lr, ip]
 802390c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8023910:	950b      	str	r5, [sp, #44]	; 0x2c
 8023912:	0e2d      	lsrs	r5, r5, #24
 8023914:	9513      	str	r5, [sp, #76]	; 0x4c
 8023916:	e6f6      	b.n	8023706 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8023918:	b2c3      	uxtb	r3, r0
 802391a:	2800      	cmp	r0, #0
 802391c:	d0e8      	beq.n	80238f0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802391e:	78c8      	ldrb	r0, [r1, #3]
 8023920:	fa5f fe8e 	uxtb.w	lr, lr
 8023924:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023926:	fb03 f900 	mul.w	r9, r3, r0
 802392a:	4403      	add	r3, r0
 802392c:	f109 0201 	add.w	r2, r9, #1
 8023930:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8023934:	1212      	asrs	r2, r2, #8
 8023936:	1a9b      	subs	r3, r3, r2
 8023938:	1a82      	subs	r2, r0, r2
 802393a:	7808      	ldrb	r0, [r1, #0]
 802393c:	b2db      	uxtb	r3, r3
 802393e:	4350      	muls	r0, r2
 8023940:	70cb      	strb	r3, [r1, #3]
 8023942:	fb05 0e0e 	mla	lr, r5, lr, r0
 8023946:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023948:	7848      	ldrb	r0, [r1, #1]
 802394a:	fb15 f808 	smulbb	r8, r5, r8
 802394e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023950:	fb9e fef3 	sdiv	lr, lr, r3
 8023954:	fb02 8000 	mla	r0, r2, r0, r8
 8023958:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802395c:	fb15 fc0c 	smulbb	ip, r5, ip
 8023960:	bfd4      	ite	le
 8023962:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8023966:	f04f 0eff 	movgt.w	lr, #255	; 0xff
 802396a:	fb90 f0f3 	sdiv	r0, r0, r3
 802396e:	bfd8      	it	le
 8023970:	fa5f fe8e 	uxtble.w	lr, lr
 8023974:	28ff      	cmp	r0, #255	; 0xff
 8023976:	bfd4      	ite	le
 8023978:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802397c:	20ff      	movgt	r0, #255	; 0xff
 802397e:	f881 e000 	strb.w	lr, [r1]
 8023982:	bfd8      	it	le
 8023984:	b2c0      	uxtble	r0, r0
 8023986:	7048      	strb	r0, [r1, #1]
 8023988:	7888      	ldrb	r0, [r1, #2]
 802398a:	fb02 c200 	mla	r2, r2, r0, ip
 802398e:	fb92 f2f3 	sdiv	r2, r2, r3
 8023992:	2aff      	cmp	r2, #255	; 0xff
 8023994:	bfd6      	itet	le
 8023996:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802399a:	22ff      	movgt	r2, #255	; 0xff
 802399c:	b2d2      	uxtble	r2, r2
 802399e:	708a      	strb	r2, [r1, #2]
 80239a0:	e7a6      	b.n	80238f0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80239a2:	b01d      	add	sp, #116	; 0x74
 80239a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080239a8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 80239a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239ac:	b087      	sub	sp, #28
 80239ae:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
 80239b2:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 80239b6:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 80239ba:	2e00      	cmp	r6, #0
 80239bc:	9002      	str	r0, [sp, #8]
 80239be:	fb06 8005 	mla	r0, r6, r5, r8
 80239c2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80239c6:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80239ca:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 80239ce:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80239d2:	9703      	str	r7, [sp, #12]
 80239d4:	eb03 0700 	add.w	r7, r3, r0
 80239d8:	9704      	str	r7, [sp, #16]
 80239da:	f2c0 8133 	blt.w	8023c44 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 80239de:	45b3      	cmp	fp, r6
 80239e0:	f340 8130 	ble.w	8023c44 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 80239e4:	f1b8 0f00 	cmp.w	r8, #0
 80239e8:	f2c0 8128 	blt.w	8023c3c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 80239ec:	4545      	cmp	r5, r8
 80239ee:	f340 8125 	ble.w	8023c3c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 80239f2:	f813 c000 	ldrb.w	ip, [r3, r0]
 80239f6:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80239fa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 80239fe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023a02:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 8023a06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a0a:	fb0c f303 	mul.w	r3, ip, r3
 8023a0e:	fb0a f202 	mul.w	r2, sl, r2
 8023a12:	f103 0a20 	add.w	sl, r3, #32
 8023a16:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8023a1a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023a1e:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8023a22:	4402      	add	r2, r0
 8023a24:	0a1b      	lsrs	r3, r3, #8
 8023a26:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8023a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a2e:	ea47 0a03 	orr.w	sl, r7, r3
 8023a32:	f118 0301 	adds.w	r3, r8, #1
 8023a36:	f100 810a 	bmi.w	8023c4e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8023a3a:	429d      	cmp	r5, r3
 8023a3c:	f340 8107 	ble.w	8023c4e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8023a40:	2c00      	cmp	r4, #0
 8023a42:	f000 8107 	beq.w	8023c54 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8023a46:	9b04      	ldr	r3, [sp, #16]
 8023a48:	785a      	ldrb	r2, [r3, #1]
 8023a4a:	9b03      	ldr	r3, [sp, #12]
 8023a4c:	10d7      	asrs	r7, r2, #3
 8023a4e:	885b      	ldrh	r3, [r3, #2]
 8023a50:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8023a54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a58:	4347      	muls	r7, r0
 8023a5a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8023a5e:	4353      	muls	r3, r2
 8023a60:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8023a64:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8023a68:	444f      	add	r7, r9
 8023a6a:	f103 0920 	add.w	r9, r3, #32
 8023a6e:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8023a72:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8023a76:	0a1b      	lsrs	r3, r3, #8
 8023a78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a7c:	4303      	orrs	r3, r0
 8023a7e:	9301      	str	r3, [sp, #4]
 8023a80:	3601      	adds	r6, #1
 8023a82:	f100 80ed 	bmi.w	8023c60 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8023a86:	45b3      	cmp	fp, r6
 8023a88:	f340 80ea 	ble.w	8023c60 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8023a8c:	f1be 0f00 	cmp.w	lr, #0
 8023a90:	f000 80eb 	beq.w	8023c6a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8023a94:	f1b8 0f00 	cmp.w	r8, #0
 8023a98:	f2c0 80df 	blt.w	8023c5a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8023a9c:	4545      	cmp	r5, r8
 8023a9e:	f340 80dc 	ble.w	8023c5a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8023aa2:	9b04      	ldr	r3, [sp, #16]
 8023aa4:	5d5f      	ldrb	r7, [r3, r5]
 8023aa6:	9b03      	ldr	r3, [sp, #12]
 8023aa8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023aac:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8023ab0:	f423 66fc 	bic.w	r6, r3, #2016	; 0x7e0
 8023ab4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ab8:	fb09 f906 	mul.w	r9, r9, r6
 8023abc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023ac0:	437b      	muls	r3, r7
 8023ac2:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8023ac6:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023aca:	44d9      	add	r9, fp
 8023acc:	f103 0b20 	add.w	fp, r3, #32
 8023ad0:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8023ad4:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8023ad8:	0a1b      	lsrs	r3, r3, #8
 8023ada:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ade:	431e      	orrs	r6, r3
 8023ae0:	f118 0801 	adds.w	r8, r8, #1
 8023ae4:	f100 80c6 	bmi.w	8023c74 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8023ae8:	4545      	cmp	r5, r8
 8023aea:	f340 80c3 	ble.w	8023c74 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8023aee:	2c00      	cmp	r4, #0
 8023af0:	f000 80c3 	beq.w	8023c7a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8023af4:	3501      	adds	r5, #1
 8023af6:	9b04      	ldr	r3, [sp, #16]
 8023af8:	9803      	ldr	r0, [sp, #12]
 8023afa:	5d5b      	ldrb	r3, [r3, r5]
 8023afc:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8023b00:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8023b04:	f428 65fc 	bic.w	r5, r8, #2016	; 0x7e0
 8023b08:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023b0c:	fb09 f905 	mul.w	r9, r9, r5
 8023b10:	f64f 051f 	movw	r5, #63519	; 0xf81f
 8023b14:	fb03 f808 	mul.w	r8, r3, r8
 8023b18:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8023b1c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023b20:	44d9      	add	r9, fp
 8023b22:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8023b26:	f108 0920 	add.w	r9, r8, #32
 8023b2a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8023b2e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023b32:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023b36:	ea45 0508 	orr.w	r5, r5, r8
 8023b3a:	fa1f f984 	uxth.w	r9, r4
 8023b3e:	fa1f f88e 	uxth.w	r8, lr
 8023b42:	fb09 f008 	mul.w	r0, r9, r8
 8023b46:	9003      	str	r0, [sp, #12]
 8023b48:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8023b4c:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8023b50:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 8023b54:	9004      	str	r0, [sp, #16]
 8023b56:	9803      	ldr	r0, [sp, #12]
 8023b58:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8023b5c:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8023b60:	ea49 090a 	orr.w	r9, r9, sl
 8023b64:	f1ce 0a10 	rsb	sl, lr, #16
 8023b68:	fa1f f088 	uxth.w	r0, r8
 8023b6c:	fb14 f80e 	smulbb	r8, r4, lr
 8023b70:	ebaa 0a04 	sub.w	sl, sl, r4
 8023b74:	9005      	str	r0, [sp, #20]
 8023b76:	9801      	ldr	r0, [sp, #4]
 8023b78:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8023b7c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023b80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023b84:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8023b88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023b8c:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8023b90:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8023b94:	ea4b 0000 	orr.w	r0, fp, r0
 8023b98:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023b9c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ba0:	4360      	muls	r0, r4
 8023ba2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023ba6:	9c04      	ldr	r4, [sp, #16]
 8023ba8:	ea4b 0505 	orr.w	r5, fp, r5
 8023bac:	fb0a 0009 	mla	r0, sl, r9, r0
 8023bb0:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8023bb4:	fb08 0005 	mla	r0, r8, r5, r0
 8023bb8:	0435      	lsls	r5, r6, #16
 8023bba:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8023bbe:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023bc2:	432e      	orrs	r6, r5
 8023bc4:	9d05      	ldr	r5, [sp, #20]
 8023bc6:	fb0e 0e06 	mla	lr, lr, r6, r0
 8023bca:	1b64      	subs	r4, r4, r5
 8023bcc:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8023bd0:	b2a4      	uxth	r4, r4
 8023bd2:	1bad      	subs	r5, r5, r6
 8023bd4:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8023bd8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023bdc:	b2ad      	uxth	r5, r5
 8023bde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023be2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023be6:	436a      	muls	r2, r5
 8023be8:	ea40 0e0e 	orr.w	lr, r0, lr
 8023bec:	fb0c 2204 	mla	r2, ip, r4, r2
 8023bf0:	9c05      	ldr	r4, [sp, #20]
 8023bf2:	fa1f f08e 	uxth.w	r0, lr
 8023bf6:	fb04 2707 	mla	r7, r4, r7, r2
 8023bfa:	9a02      	ldr	r2, [sp, #8]
 8023bfc:	1205      	asrs	r5, r0, #8
 8023bfe:	fb06 7303 	mla	r3, r6, r3, r7
 8023c02:	10c7      	asrs	r7, r0, #3
 8023c04:	00c0      	lsls	r0, r0, #3
 8023c06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023c0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023c0e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023c12:	b2c0      	uxtb	r0, r0
 8023c14:	4353      	muls	r3, r2
 8023c16:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023c1a:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8023c1e:	1c5a      	adds	r2, r3, #1
 8023c20:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023c24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c28:	121b      	asrs	r3, r3, #8
 8023c2a:	2bff      	cmp	r3, #255	; 0xff
 8023c2c:	d128      	bne.n	8023c80 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8023c2e:	7008      	strb	r0, [r1, #0]
 8023c30:	704f      	strb	r7, [r1, #1]
 8023c32:	708d      	strb	r5, [r1, #2]
 8023c34:	70cb      	strb	r3, [r1, #3]
 8023c36:	b007      	add	sp, #28
 8023c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c3c:	f04f 0c00 	mov.w	ip, #0
 8023c40:	46e2      	mov	sl, ip
 8023c42:	e6f6      	b.n	8023a32 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8023c44:	2200      	movs	r2, #0
 8023c46:	4694      	mov	ip, r2
 8023c48:	9201      	str	r2, [sp, #4]
 8023c4a:	4692      	mov	sl, r2
 8023c4c:	e718      	b.n	8023a80 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8023c4e:	2200      	movs	r2, #0
 8023c50:	9201      	str	r2, [sp, #4]
 8023c52:	e715      	b.n	8023a80 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8023c54:	4622      	mov	r2, r4
 8023c56:	9401      	str	r4, [sp, #4]
 8023c58:	e712      	b.n	8023a80 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8023c5a:	2700      	movs	r7, #0
 8023c5c:	463e      	mov	r6, r7
 8023c5e:	e73f      	b.n	8023ae0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8023c60:	2300      	movs	r3, #0
 8023c62:	461f      	mov	r7, r3
 8023c64:	461d      	mov	r5, r3
 8023c66:	461e      	mov	r6, r3
 8023c68:	e767      	b.n	8023b3a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8023c6a:	4673      	mov	r3, lr
 8023c6c:	4677      	mov	r7, lr
 8023c6e:	4675      	mov	r5, lr
 8023c70:	4676      	mov	r6, lr
 8023c72:	e762      	b.n	8023b3a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8023c74:	2300      	movs	r3, #0
 8023c76:	461d      	mov	r5, r3
 8023c78:	e75f      	b.n	8023b3a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8023c7a:	4623      	mov	r3, r4
 8023c7c:	4625      	mov	r5, r4
 8023c7e:	e75c      	b.n	8023b3a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8023c80:	b2dc      	uxtb	r4, r3
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	d0d7      	beq.n	8023c36 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8023c86:	f891 c003 	ldrb.w	ip, [r1, #3]
 8023c8a:	fb04 f20c 	mul.w	r2, r4, ip
 8023c8e:	eb0c 0304 	add.w	r3, ip, r4
 8023c92:	780c      	ldrb	r4, [r1, #0]
 8023c94:	1c56      	adds	r6, r2, #1
 8023c96:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023c9a:	1232      	asrs	r2, r6, #8
 8023c9c:	ebac 0602 	sub.w	r6, ip, r2
 8023ca0:	1a9b      	subs	r3, r3, r2
 8023ca2:	9a02      	ldr	r2, [sp, #8]
 8023ca4:	b2db      	uxtb	r3, r3
 8023ca6:	fb10 f002 	smulbb	r0, r0, r2
 8023caa:	9a02      	ldr	r2, [sp, #8]
 8023cac:	fb06 0404 	mla	r4, r6, r4, r0
 8023cb0:	fb12 f707 	smulbb	r7, r2, r7
 8023cb4:	7848      	ldrb	r0, [r1, #1]
 8023cb6:	788a      	ldrb	r2, [r1, #2]
 8023cb8:	fb06 7000 	mla	r0, r6, r0, r7
 8023cbc:	fb94 f4f3 	sdiv	r4, r4, r3
 8023cc0:	fb90 f0f3 	sdiv	r0, r0, r3
 8023cc4:	2cff      	cmp	r4, #255	; 0xff
 8023cc6:	bfd6      	itet	le
 8023cc8:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8023ccc:	24ff      	movgt	r4, #255	; 0xff
 8023cce:	b2e4      	uxtble	r4, r4
 8023cd0:	28ff      	cmp	r0, #255	; 0xff
 8023cd2:	bfd4      	ite	le
 8023cd4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8023cd8:	20ff      	movgt	r0, #255	; 0xff
 8023cda:	700c      	strb	r4, [r1, #0]
 8023cdc:	bfd8      	it	le
 8023cde:	b2c0      	uxtble	r0, r0
 8023ce0:	7048      	strb	r0, [r1, #1]
 8023ce2:	9802      	ldr	r0, [sp, #8]
 8023ce4:	fb10 f505 	smulbb	r5, r0, r5
 8023ce8:	fb06 5202 	mla	r2, r6, r2, r5
 8023cec:	fb92 f2f3 	sdiv	r2, r2, r3
 8023cf0:	2aff      	cmp	r2, #255	; 0xff
 8023cf2:	bfd6      	itet	le
 8023cf4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023cf8:	22ff      	movgt	r2, #255	; 0xff
 8023cfa:	b2d2      	uxtble	r2, r2
 8023cfc:	708a      	strb	r2, [r1, #2]
 8023cfe:	e799      	b.n	8023c34 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08023d00 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d04:	b097      	sub	sp, #92	; 0x5c
 8023d06:	9214      	str	r2, [sp, #80]	; 0x50
 8023d08:	9309      	str	r3, [sp, #36]	; 0x24
 8023d0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023d0c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023d10:	9015      	str	r0, [sp, #84]	; 0x54
 8023d12:	9112      	str	r1, [sp, #72]	; 0x48
 8023d14:	6850      	ldr	r0, [r2, #4]
 8023d16:	930a      	str	r3, [sp, #40]	; 0x28
 8023d18:	6812      	ldr	r2, [r2, #0]
 8023d1a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8023d1e:	fb00 1303 	mla	r3, r0, r3, r1
 8023d22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8023d2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d30:	685b      	ldr	r3, [r3, #4]
 8023d32:	930d      	str	r3, [sp, #52]	; 0x34
 8023d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	dc03      	bgt.n	8023d42 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	f340 8407 	ble.w	8024550 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8023d42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d4c:	1e48      	subs	r0, r1, #1
 8023d4e:	1e55      	subs	r5, r2, #1
 8023d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d52:	2b00      	cmp	r3, #0
 8023d54:	f340 81b7 	ble.w	80240c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023d58:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8023d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023d5c:	1436      	asrs	r6, r6, #16
 8023d5e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023d62:	d406      	bmi.n	8023d72 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023d64:	4286      	cmp	r6, r0
 8023d66:	da04      	bge.n	8023d72 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	db02      	blt.n	8023d72 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023d6c:	42ab      	cmp	r3, r5
 8023d6e:	f2c0 81ab 	blt.w	80240c8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8023d72:	3601      	adds	r6, #1
 8023d74:	f100 8198 	bmi.w	80240a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023d78:	42b1      	cmp	r1, r6
 8023d7a:	f2c0 8195 	blt.w	80240a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023d7e:	3301      	adds	r3, #1
 8023d80:	f100 8192 	bmi.w	80240a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023d84:	429a      	cmp	r2, r3
 8023d86:	f2c0 818f 	blt.w	80240a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d8c:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8023d90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d92:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d96:	2b00      	cmp	r3, #0
 8023d98:	f340 81b7 	ble.w	802410a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023d9e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8023da0:	1418      	asrs	r0, r3, #16
 8023da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023da4:	1436      	asrs	r6, r6, #16
 8023da6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023daa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023dac:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023db0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023db2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023db6:	f100 820f 	bmi.w	80241d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023dba:	f102 3eff 	add.w	lr, r2, #4294967295
 8023dbe:	4576      	cmp	r6, lr
 8023dc0:	f280 820a 	bge.w	80241d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023dc4:	2800      	cmp	r0, #0
 8023dc6:	f2c0 8207 	blt.w	80241d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023dca:	f103 3eff 	add.w	lr, r3, #4294967295
 8023dce:	4570      	cmp	r0, lr
 8023dd0:	f280 8202 	bge.w	80241d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023dd4:	b212      	sxth	r2, r2
 8023dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023dd8:	fa1f fe81 	uxth.w	lr, r1
 8023ddc:	fb00 6002 	mla	r0, r0, r2, r6
 8023de0:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8023de4:	eb03 0a00 	add.w	sl, r3, r0
 8023de8:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023dec:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023df0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023df4:	b29b      	uxth	r3, r3
 8023df6:	f1bc 0f00 	cmp.w	ip, #0
 8023dfa:	f000 81cc 	beq.w	8024196 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023dfe:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023e02:	eb0a 0b02 	add.w	fp, sl, r2
 8023e06:	fa1f fa8c 	uxth.w	sl, ip
 8023e0a:	940e      	str	r4, [sp, #56]	; 0x38
 8023e0c:	fb0a fe0e 	mul.w	lr, sl, lr
 8023e10:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023e14:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023e18:	eba6 060e 	sub.w	r6, r6, lr
 8023e1c:	940f      	str	r4, [sp, #60]	; 0x3c
 8023e1e:	fa1f fa8a 	uxth.w	sl, sl
 8023e22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023e24:	b2b6      	uxth	r6, r6
 8023e26:	eba3 030a 	sub.w	r3, r3, sl
 8023e2a:	fb08 f606 	mul.w	r6, r8, r6
 8023e2e:	b29b      	uxth	r3, r3
 8023e30:	fb09 6303 	mla	r3, r9, r3, r6
 8023e34:	fb0a 3304 	mla	r3, sl, r4, r3
 8023e38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023e3a:	fb0e 3304 	mla	r3, lr, r4, r3
 8023e3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	f000 8123 	beq.w	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8023e48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023e4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023e4e:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8023e52:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023e56:	f000 81a3 	beq.w	80241a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 8023e5a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023e5e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023e62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023e66:	fb0a fe0e 	mul.w	lr, sl, lr
 8023e6a:	fb09 f000 	mul.w	r0, r9, r0
 8023e6e:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8023e72:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023e76:	f100 0b20 	add.w	fp, r0, #32
 8023e7a:	44ce      	add	lr, r9
 8023e7c:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023e80:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8023e84:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023e88:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023e8c:	ea4e 0909 	orr.w	r9, lr, r9
 8023e90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023e94:	8870      	ldrh	r0, [r6, #2]
 8023e96:	d019      	beq.n	8023ecc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8023e98:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023e9c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023ea0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023ea4:	fb0a fe0e 	mul.w	lr, sl, lr
 8023ea8:	fb08 f800 	mul.w	r8, r8, r0
 8023eac:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8023eb0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023eb4:	f108 0b20 	add.w	fp, r8, #32
 8023eb8:	4486      	add	lr, r0
 8023eba:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023ebe:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8023ec2:	0a00      	lsrs	r0, r0, #8
 8023ec4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023ec8:	ea4e 0000 	orr.w	r0, lr, r0
 8023ecc:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8023ed0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023ed4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023ed8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023edc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023ee0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023ee4:	ea4e 0909 	orr.w	r9, lr, r9
 8023ee8:	ea4a 0000 	orr.w	r0, sl, r0
 8023eec:	f1bc 0f00 	cmp.w	ip, #0
 8023ef0:	f000 8158 	beq.w	80241a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8023ef4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023ef8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023efa:	3a01      	subs	r2, #1
 8023efc:	2cff      	cmp	r4, #255	; 0xff
 8023efe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023f02:	f102 0202 	add.w	r2, r2, #2
 8023f06:	eb06 0e02 	add.w	lr, r6, r2
 8023f0a:	5ab2      	ldrh	r2, [r6, r2]
 8023f0c:	d018      	beq.n	8023f40 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023f0e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8023f12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023f16:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023f1a:	fb04 fa02 	mul.w	sl, r4, r2
 8023f1e:	fb08 f806 	mul.w	r8, r8, r6
 8023f22:	f10a 0620 	add.w	r6, sl, #32
 8023f26:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8023f2a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023f2e:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8023f32:	4442      	add	r2, r8
 8023f34:	0a36      	lsrs	r6, r6, #8
 8023f36:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8023f3a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023f3e:	4332      	orrs	r2, r6
 8023f40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023f42:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8023f46:	2cff      	cmp	r4, #255	; 0xff
 8023f48:	d01a      	beq.n	8023f80 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023f4a:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8023f4e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023f52:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023f56:	fb04 fa06 	mul.w	sl, r4, r6
 8023f5a:	fb08 f80e 	mul.w	r8, r8, lr
 8023f5e:	f10a 0e20 	add.w	lr, sl, #32
 8023f62:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8023f66:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023f6a:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023f6e:	4446      	add	r6, r8
 8023f70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f74:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8023f78:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023f7c:	ea46 060e 	orr.w	r6, r6, lr
 8023f80:	fb1c fe01 	smulbb	lr, ip, r1
 8023f84:	f1cc 0810 	rsb	r8, ip, #16
 8023f88:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023f8c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023f90:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023f94:	eba8 0801 	sub.w	r8, r8, r1
 8023f98:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8023f9c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023fa0:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023fa4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8023fa8:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023fac:	ea4a 0202 	orr.w	r2, sl, r2
 8023fb0:	4341      	muls	r1, r0
 8023fb2:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023fb6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023fba:	fb09 1108 	mla	r1, r9, r8, r1
 8023fbe:	ea4b 0606 	orr.w	r6, fp, r6
 8023fc2:	fb0c 1102 	mla	r1, ip, r2, r1
 8023fc6:	fb0e 1e06 	mla	lr, lr, r6, r1
 8023fca:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8023fce:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023fd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023fd6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023fda:	ea40 0e0e 	orr.w	lr, r0, lr
 8023fde:	fa1f f08e 	uxth.w	r0, lr
 8023fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023fe4:	1206      	asrs	r6, r0, #8
 8023fe6:	10c1      	asrs	r1, r0, #3
 8023fe8:	4353      	muls	r3, r2
 8023fea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023fee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023ff2:	1c5a      	adds	r2, r3, #1
 8023ff4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023ff8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8023ffc:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8024000:	00c2      	lsls	r2, r0, #3
 8024002:	121b      	asrs	r3, r3, #8
 8024004:	b2d2      	uxtb	r2, r2
 8024006:	2bff      	cmp	r3, #255	; 0xff
 8024008:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802400c:	f000 80de 	beq.w	80241cc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8024010:	b2d8      	uxtb	r0, r3
 8024012:	2b00      	cmp	r3, #0
 8024014:	d03b      	beq.n	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024016:	f895 c003 	ldrb.w	ip, [r5, #3]
 802401a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802401c:	fb00 fe0c 	mul.w	lr, r0, ip
 8024020:	4460      	add	r0, ip
 8024022:	fb12 f204 	smulbb	r2, r2, r4
 8024026:	f10e 0301 	add.w	r3, lr, #1
 802402a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802402e:	121b      	asrs	r3, r3, #8
 8024030:	ebac 0c03 	sub.w	ip, ip, r3
 8024034:	1ac0      	subs	r0, r0, r3
 8024036:	782b      	ldrb	r3, [r5, #0]
 8024038:	b2c0      	uxtb	r0, r0
 802403a:	fb0c 2303 	mla	r3, ip, r3, r2
 802403e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024040:	70e8      	strb	r0, [r5, #3]
 8024042:	fb12 f101 	smulbb	r1, r2, r1
 8024046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024048:	fb93 f3f0 	sdiv	r3, r3, r0
 802404c:	fb12 f606 	smulbb	r6, r2, r6
 8024050:	2bff      	cmp	r3, #255	; 0xff
 8024052:	bfd6      	itet	le
 8024054:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024058:	23ff      	movgt	r3, #255	; 0xff
 802405a:	b2db      	uxtble	r3, r3
 802405c:	702b      	strb	r3, [r5, #0]
 802405e:	786b      	ldrb	r3, [r5, #1]
 8024060:	fb0c 1303 	mla	r3, ip, r3, r1
 8024064:	fb93 f3f0 	sdiv	r3, r3, r0
 8024068:	2bff      	cmp	r3, #255	; 0xff
 802406a:	bfd6      	itet	le
 802406c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024070:	23ff      	movgt	r3, #255	; 0xff
 8024072:	b2db      	uxtble	r3, r3
 8024074:	706b      	strb	r3, [r5, #1]
 8024076:	78ab      	ldrb	r3, [r5, #2]
 8024078:	fb0c 6303 	mla	r3, ip, r3, r6
 802407c:	fb93 f3f0 	sdiv	r3, r3, r0
 8024080:	2bff      	cmp	r3, #255	; 0xff
 8024082:	bfd6      	itet	le
 8024084:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024088:	23ff      	movgt	r3, #255	; 0xff
 802408a:	b2db      	uxtble	r3, r3
 802408c:	70ab      	strb	r3, [r5, #2]
 802408e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024090:	3504      	adds	r5, #4
 8024092:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024094:	4413      	add	r3, r2
 8024096:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024098:	9321      	str	r3, [sp, #132]	; 0x84
 802409a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802409c:	441a      	add	r2, r3
 802409e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80240a0:	3b01      	subs	r3, #1
 80240a2:	9222      	str	r2, [sp, #136]	; 0x88
 80240a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80240a6:	e675      	b.n	8023d94 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80240a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80240aa:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80240ac:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80240ae:	4433      	add	r3, r6
 80240b0:	9321      	str	r3, [sp, #132]	; 0x84
 80240b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80240b4:	441c      	add	r4, r3
 80240b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240b8:	3b01      	subs	r3, #1
 80240ba:	9422      	str	r4, [sp, #136]	; 0x88
 80240bc:	9309      	str	r3, [sp, #36]	; 0x24
 80240be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240c0:	3304      	adds	r3, #4
 80240c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80240c4:	e644      	b.n	8023d50 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80240c6:	d027      	beq.n	8024118 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80240c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240ca:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80240cc:	3b01      	subs	r3, #1
 80240ce:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80240d0:	fb00 5003 	mla	r0, r0, r3, r5
 80240d4:	1400      	asrs	r0, r0, #16
 80240d6:	f53f ae58 	bmi.w	8023d8a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240da:	3901      	subs	r1, #1
 80240dc:	4288      	cmp	r0, r1
 80240de:	f6bf ae54 	bge.w	8023d8a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240e2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80240e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80240e6:	fb01 0303 	mla	r3, r1, r3, r0
 80240ea:	141b      	asrs	r3, r3, #16
 80240ec:	f53f ae4d 	bmi.w	8023d8a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240f0:	3a01      	subs	r2, #1
 80240f2:	4293      	cmp	r3, r2
 80240f4:	f6bf ae49 	bge.w	8023d8a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240fa:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80240fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024100:	9313      	str	r3, [sp, #76]	; 0x4c
 8024102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024104:	2b00      	cmp	r3, #0
 8024106:	f300 8086 	bgt.w	8024216 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802410c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024112:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024116:	930b      	str	r3, [sp, #44]	; 0x2c
 8024118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802411a:	2b00      	cmp	r3, #0
 802411c:	f340 8218 	ble.w	8024550 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8024120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024126:	ee30 0a04 	vadd.f32	s0, s0, s8
 802412a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802412e:	eef0 6a62 	vmov.f32	s13, s5
 8024132:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024136:	ee31 1a05 	vadd.f32	s2, s2, s10
 802413a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802413e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8024142:	eef0 6a43 	vmov.f32	s13, s6
 8024146:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802414a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802414e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024152:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024156:	ee77 2a62 	vsub.f32	s5, s14, s5
 802415a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802415e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024162:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024166:	ee12 2a90 	vmov	r2, s5
 802416a:	eef0 2a47 	vmov.f32	s5, s14
 802416e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024172:	ee13 2a10 	vmov	r2, s6
 8024176:	9323      	str	r3, [sp, #140]	; 0x8c
 8024178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802417a:	eeb0 3a67 	vmov.f32	s6, s15
 802417e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024182:	9324      	str	r3, [sp, #144]	; 0x90
 8024184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024188:	3b01      	subs	r3, #1
 802418a:	9312      	str	r3, [sp, #72]	; 0x48
 802418c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802418e:	bf08      	it	eq
 8024190:	4613      	moveq	r3, r2
 8024192:	9309      	str	r3, [sp, #36]	; 0x24
 8024194:	e5ce      	b.n	8023d34 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024196:	fb08 f606 	mul.w	r6, r8, r6
 802419a:	fb09 6303 	mla	r3, r9, r3, r6
 802419e:	e64e      	b.n	8023e3e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80241a0:	4681      	mov	r9, r0
 80241a2:	e675      	b.n	8023e90 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80241a4:	f1c1 0210 	rsb	r2, r1, #16
 80241a8:	4341      	muls	r1, r0
 80241aa:	fb09 1902 	mla	r9, r9, r2, r1
 80241ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80241b2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80241b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80241ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241be:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80241c2:	ea40 0909 	orr.w	r9, r0, r9
 80241c6:	fa1f f089 	uxth.w	r0, r9
 80241ca:	e70a      	b.n	8023fe2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80241cc:	0209      	lsls	r1, r1, #8
 80241ce:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 80241d2:	4332      	orrs	r2, r6
 80241d4:	602a      	str	r2, [r5, #0]
 80241d6:	e75a      	b.n	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80241d8:	f116 0e01 	adds.w	lr, r6, #1
 80241dc:	f53f af57 	bmi.w	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80241e0:	4572      	cmp	r2, lr
 80241e2:	f6ff af54 	blt.w	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80241e6:	f110 0e01 	adds.w	lr, r0, #1
 80241ea:	f53f af50 	bmi.w	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80241ee:	4573      	cmp	r3, lr
 80241f0:	f6ff af4d 	blt.w	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80241f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80241f6:	b21b      	sxth	r3, r3
 80241f8:	b212      	sxth	r2, r2
 80241fa:	9602      	str	r6, [sp, #8]
 80241fc:	9301      	str	r3, [sp, #4]
 80241fe:	9200      	str	r2, [sp, #0]
 8024200:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8024204:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024208:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802420c:	4629      	mov	r1, r5
 802420e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024210:	f7ff fbca 	bl	80239a8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 8024214:	e73b      	b.n	802408e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024218:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802421c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802421e:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8024222:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024224:	fa1f fe82 	uxth.w	lr, r2
 8024228:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802422c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802422e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024232:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8024236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024238:	141b      	asrs	r3, r3, #16
 802423a:	fb00 3c0c 	mla	ip, r0, ip, r3
 802423e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024240:	eb03 0a0c 	add.w	sl, r3, ip
 8024244:	f813 900c 	ldrb.w	r9, [r3, ip]
 8024248:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802424c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024250:	b29b      	uxth	r3, r3
 8024252:	2e00      	cmp	r6, #0
 8024254:	f000 815c 	beq.w	8024510 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 8024258:	f81a 4000 	ldrb.w	r4, [sl, r0]
 802425c:	eb0a 0b00 	add.w	fp, sl, r0
 8024260:	fa1f fa86 	uxth.w	sl, r6
 8024264:	9410      	str	r4, [sp, #64]	; 0x40
 8024266:	fb0a fe0e 	mul.w	lr, sl, lr
 802426a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802426e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024272:	eba5 050e 	sub.w	r5, r5, lr
 8024276:	9411      	str	r4, [sp, #68]	; 0x44
 8024278:	fa1f fa8a 	uxth.w	sl, sl
 802427c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802427e:	b2ad      	uxth	r5, r5
 8024280:	eba3 030a 	sub.w	r3, r3, sl
 8024284:	fb08 f505 	mul.w	r5, r8, r5
 8024288:	b29b      	uxth	r3, r3
 802428a:	fb09 5303 	mla	r3, r9, r3, r5
 802428e:	fb0a 3304 	mla	r3, sl, r4, r3
 8024292:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024294:	fb0e 3304 	mla	r3, lr, r4, r3
 8024298:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802429c:	2b00      	cmp	r3, #0
 802429e:	f000 812a 	beq.w	80244f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80242a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80242a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80242a8:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 80242ac:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 80242b0:	f000 8133 	beq.w	802451a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 80242b4:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80242b8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80242bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80242c0:	fb0a fe0e 	mul.w	lr, sl, lr
 80242c4:	fb09 fc0c 	mul.w	ip, r9, ip
 80242c8:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 80242cc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80242d0:	f10c 0b20 	add.w	fp, ip, #32
 80242d4:	44ce      	add	lr, r9
 80242d6:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 80242da:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80242de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80242e2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80242e6:	ea4e 0909 	orr.w	r9, lr, r9
 80242ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80242ee:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 80242f2:	d01a      	beq.n	802432a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 80242f4:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80242f8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80242fc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024300:	fb0a fe0e 	mul.w	lr, sl, lr
 8024304:	fb08 f80c 	mul.w	r8, r8, ip
 8024308:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 802430c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024310:	f108 0b20 	add.w	fp, r8, #32
 8024314:	44e6      	add	lr, ip
 8024316:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 802431a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802431e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024322:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024326:	ea4e 0c0c 	orr.w	ip, lr, ip
 802432a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802432e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024332:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 8024336:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802433a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802433e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024342:	ea4e 0909 	orr.w	r9, lr, r9
 8024346:	ea4a 0c0c 	orr.w	ip, sl, ip
 802434a:	2e00      	cmp	r6, #0
 802434c:	f000 80e7 	beq.w	802451e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 8024350:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8024354:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024356:	3801      	subs	r0, #1
 8024358:	2cff      	cmp	r4, #255	; 0xff
 802435a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802435e:	f100 0002 	add.w	r0, r0, #2
 8024362:	eb05 0e00 	add.w	lr, r5, r0
 8024366:	5a28      	ldrh	r0, [r5, r0]
 8024368:	d018      	beq.n	802439c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802436a:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 802436e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024372:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024376:	fb04 fa00 	mul.w	sl, r4, r0
 802437a:	fb08 f805 	mul.w	r8, r8, r5
 802437e:	f10a 0520 	add.w	r5, sl, #32
 8024382:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 8024386:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802438a:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802438e:	4440      	add	r0, r8
 8024390:	0a2d      	lsrs	r5, r5, #8
 8024392:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8024396:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802439a:	4328      	orrs	r0, r5
 802439c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802439e:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80243a2:	2cff      	cmp	r4, #255	; 0xff
 80243a4:	d01a      	beq.n	80243dc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80243a6:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80243aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80243ae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80243b2:	fb04 fa05 	mul.w	sl, r4, r5
 80243b6:	fb08 f80e 	mul.w	r8, r8, lr
 80243ba:	f10a 0e20 	add.w	lr, sl, #32
 80243be:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 80243c2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80243c6:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80243ca:	4445      	add	r5, r8
 80243cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243d0:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 80243d4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80243d8:	ea45 050e 	orr.w	r5, r5, lr
 80243dc:	fb16 fe02 	smulbb	lr, r6, r2
 80243e0:	f1c6 0810 	rsb	r8, r6, #16
 80243e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80243e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80243ec:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80243f0:	eba8 0802 	sub.w	r8, r8, r2
 80243f4:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80243f8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80243fc:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8024400:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024404:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024408:	ea4a 0000 	orr.w	r0, sl, r0
 802440c:	fb0c f202 	mul.w	r2, ip, r2
 8024410:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8024414:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024418:	fb09 2208 	mla	r2, r9, r8, r2
 802441c:	ea4b 0505 	orr.w	r5, fp, r5
 8024420:	fb06 2200 	mla	r2, r6, r0, r2
 8024424:	fb0e 2205 	mla	r2, lr, r5, r2
 8024428:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 802442c:	0952      	lsrs	r2, r2, #5
 802442e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024432:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024436:	ea4c 0c05 	orr.w	ip, ip, r5
 802443a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802443c:	fa1f fc8c 	uxth.w	ip, ip
 8024440:	4353      	muls	r3, r2
 8024442:	ea4f 262c 	mov.w	r6, ip, asr #8
 8024446:	ea4f 00ec 	mov.w	r0, ip, asr #3
 802444a:	1c5a      	adds	r2, r3, #1
 802444c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024450:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024454:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8024458:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802445c:	121b      	asrs	r3, r3, #8
 802445e:	b2d2      	uxtb	r2, r2
 8024460:	2bff      	cmp	r3, #255	; 0xff
 8024462:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8024466:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802446a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802446e:	d069      	beq.n	8024544 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 8024470:	b2dd      	uxtb	r5, r3
 8024472:	2b00      	cmp	r3, #0
 8024474:	d03f      	beq.n	80244f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8024476:	f891 c003 	ldrb.w	ip, [r1, #3]
 802447a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802447c:	fb05 fe0c 	mul.w	lr, r5, ip
 8024480:	4465      	add	r5, ip
 8024482:	f891 8000 	ldrb.w	r8, [r1]
 8024486:	fb12 f204 	smulbb	r2, r2, r4
 802448a:	f10e 0301 	add.w	r3, lr, #1
 802448e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8024492:	121b      	asrs	r3, r3, #8
 8024494:	1aed      	subs	r5, r5, r3
 8024496:	ebac 0303 	sub.w	r3, ip, r3
 802449a:	f891 c001 	ldrb.w	ip, [r1, #1]
 802449e:	b2ed      	uxtb	r5, r5
 80244a0:	fb03 2208 	mla	r2, r3, r8, r2
 80244a4:	fb92 f2f5 	sdiv	r2, r2, r5
 80244a8:	2aff      	cmp	r2, #255	; 0xff
 80244aa:	70cd      	strb	r5, [r1, #3]
 80244ac:	bfd6      	itet	le
 80244ae:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80244b2:	22ff      	movgt	r2, #255	; 0xff
 80244b4:	b2d2      	uxtble	r2, r2
 80244b6:	700a      	strb	r2, [r1, #0]
 80244b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80244ba:	fb12 f000 	smulbb	r0, r2, r0
 80244be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80244c0:	fb03 000c 	mla	r0, r3, ip, r0
 80244c4:	fb12 f606 	smulbb	r6, r2, r6
 80244c8:	f891 c002 	ldrb.w	ip, [r1, #2]
 80244cc:	fb90 f0f5 	sdiv	r0, r0, r5
 80244d0:	fb03 630c 	mla	r3, r3, ip, r6
 80244d4:	28ff      	cmp	r0, #255	; 0xff
 80244d6:	fb93 f3f5 	sdiv	r3, r3, r5
 80244da:	bfd6      	itet	le
 80244dc:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80244e0:	20ff      	movgt	r0, #255	; 0xff
 80244e2:	b2c0      	uxtble	r0, r0
 80244e4:	2bff      	cmp	r3, #255	; 0xff
 80244e6:	bfd4      	ite	le
 80244e8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80244ec:	23ff      	movgt	r3, #255	; 0xff
 80244ee:	7048      	strb	r0, [r1, #1]
 80244f0:	bfd8      	it	le
 80244f2:	b2db      	uxtble	r3, r3
 80244f4:	708b      	strb	r3, [r1, #2]
 80244f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80244f8:	3104      	adds	r1, #4
 80244fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80244fc:	4413      	add	r3, r2
 80244fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024500:	9321      	str	r3, [sp, #132]	; 0x84
 8024502:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024504:	441a      	add	r2, r3
 8024506:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024508:	3b01      	subs	r3, #1
 802450a:	9222      	str	r2, [sp, #136]	; 0x88
 802450c:	9313      	str	r3, [sp, #76]	; 0x4c
 802450e:	e5f8      	b.n	8024102 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024510:	fb08 f505 	mul.w	r5, r8, r5
 8024514:	fb09 5303 	mla	r3, r9, r3, r5
 8024518:	e6be      	b.n	8024298 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 802451a:	46e1      	mov	r9, ip
 802451c:	e6e5      	b.n	80242ea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802451e:	f1c2 0010 	rsb	r0, r2, #16
 8024522:	fb0c f202 	mul.w	r2, ip, r2
 8024526:	fb09 2900 	mla	r9, r9, r0, r2
 802452a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802452e:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 8024532:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024536:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802453a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802453e:	ea4c 0c09 	orr.w	ip, ip, r9
 8024542:	e77a      	b.n	802443a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8024544:	0200      	lsls	r0, r0, #8
 8024546:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802454a:	4302      	orrs	r2, r0
 802454c:	600a      	str	r2, [r1, #0]
 802454e:	e7d2      	b.n	80244f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8024550:	b017      	add	sp, #92	; 0x5c
 8024552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024556 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 8024556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802455a:	b085      	sub	sp, #20
 802455c:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	; 0x40
 8024560:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8024564:	2800      	cmp	r0, #0
 8024566:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802456a:	fb00 8504 	mla	r5, r0, r4, r8
 802456e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024572:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8024576:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 802457a:	9702      	str	r7, [sp, #8]
 802457c:	eb03 0705 	add.w	r7, r3, r5
 8024580:	9703      	str	r7, [sp, #12]
 8024582:	f2c0 812e 	blt.w	80247e2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8024586:	4582      	cmp	sl, r0
 8024588:	f340 812b 	ble.w	80247e2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 802458c:	f1b8 0f00 	cmp.w	r8, #0
 8024590:	f2c0 8122 	blt.w	80247d8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8024594:	4544      	cmp	r4, r8
 8024596:	f340 811f 	ble.w	80247d8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 802459a:	f813 e005 	ldrb.w	lr, [r3, r5]
 802459e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80245a2:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80245a6:	f423 67fc 	bic.w	r7, r3, #2016	; 0x7e0
 80245aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80245ae:	4357      	muls	r7, r2
 80245b0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80245b4:	fb0e f503 	mul.w	r5, lr, r3
 80245b8:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 80245bc:	f607 0701 	addw	r7, r7, #2049	; 0x801
 80245c0:	441f      	add	r7, r3
 80245c2:	f105 0320 	add.w	r3, r5, #32
 80245c6:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80245ca:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 80245ce:	0a1b      	lsrs	r3, r3, #8
 80245d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80245d4:	4313      	orrs	r3, r2
 80245d6:	9301      	str	r3, [sp, #4]
 80245d8:	f118 0301 	adds.w	r3, r8, #1
 80245dc:	f100 8106 	bmi.w	80247ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80245e0:	429c      	cmp	r4, r3
 80245e2:	f340 8103 	ble.w	80247ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80245e6:	2e00      	cmp	r6, #0
 80245e8:	f000 8103 	beq.w	80247f2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 80245ec:	9b03      	ldr	r3, [sp, #12]
 80245ee:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80245f2:	785a      	ldrb	r2, [r3, #1]
 80245f4:	9b02      	ldr	r3, [sp, #8]
 80245f6:	10d7      	asrs	r7, r2, #3
 80245f8:	885b      	ldrh	r3, [r3, #2]
 80245fa:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80245fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024602:	436f      	muls	r7, r5
 8024604:	4353      	muls	r3, r2
 8024606:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 802460a:	f607 0701 	addw	r7, r7, #2049	; 0x801
 802460e:	444f      	add	r7, r9
 8024610:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8024614:	f103 0b20 	add.w	fp, r3, #32
 8024618:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802461c:	0a1b      	lsrs	r3, r3, #8
 802461e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024622:	431d      	orrs	r5, r3
 8024624:	3001      	adds	r0, #1
 8024626:	f100 80ea 	bmi.w	80247fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 802462a:	4582      	cmp	sl, r0
 802462c:	f340 80e7 	ble.w	80247fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8024630:	f1bc 0f00 	cmp.w	ip, #0
 8024634:	f000 80e8 	beq.w	8024808 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 8024638:	f1b8 0f00 	cmp.w	r8, #0
 802463c:	f2c0 80dc 	blt.w	80247f8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8024640:	4544      	cmp	r4, r8
 8024642:	f340 80d9 	ble.w	80247f8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8024646:	9b03      	ldr	r3, [sp, #12]
 8024648:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802464c:	5d1f      	ldrb	r7, [r3, r4]
 802464e:	9b02      	ldr	r3, [sp, #8]
 8024650:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024654:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024658:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 802465c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024660:	fb09 f900 	mul.w	r9, r9, r0
 8024664:	437b      	muls	r3, r7
 8024666:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 802466a:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802466e:	44d1      	add	r9, sl
 8024670:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 8024674:	f103 0b20 	add.w	fp, r3, #32
 8024678:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802467c:	0a1b      	lsrs	r3, r3, #8
 802467e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024682:	4318      	orrs	r0, r3
 8024684:	f118 0801 	adds.w	r8, r8, #1
 8024688:	f100 80c3 	bmi.w	8024812 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 802468c:	4544      	cmp	r4, r8
 802468e:	f340 80c0 	ble.w	8024812 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8024692:	2e00      	cmp	r6, #0
 8024694:	f000 80c0 	beq.w	8024818 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8024698:	f104 0801 	add.w	r8, r4, #1
 802469c:	9b03      	ldr	r3, [sp, #12]
 802469e:	9c02      	ldr	r4, [sp, #8]
 80246a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80246a4:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 80246a8:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 80246ac:	f424 68fc 	bic.w	r8, r4, #2016	; 0x7e0
 80246b0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80246b4:	fb0a fa08 	mul.w	sl, sl, r8
 80246b8:	fb03 f904 	mul.w	r9, r3, r4
 80246bc:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80246c0:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 80246c4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80246c8:	44da      	add	sl, fp
 80246ca:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 80246ce:	f109 0420 	add.w	r4, r9, #32
 80246d2:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 80246d6:	0a24      	lsrs	r4, r4, #8
 80246d8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80246dc:	ea48 0404 	orr.w	r4, r8, r4
 80246e0:	fa1f f886 	uxth.w	r8, r6
 80246e4:	fa1f fa8c 	uxth.w	sl, ip
 80246e8:	fb08 fb0a 	mul.w	fp, r8, sl
 80246ec:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80246f0:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 80246f4:	f5c8 7980 	rsb	r9, r8, #256	; 0x100
 80246f8:	eba8 080b 	sub.w	r8, r8, fp
 80246fc:	fa1f fa8a 	uxth.w	sl, sl
 8024700:	fa1f f888 	uxth.w	r8, r8
 8024704:	eba9 090a 	sub.w	r9, r9, sl
 8024708:	fb02 f808 	mul.w	r8, r2, r8
 802470c:	9a01      	ldr	r2, [sp, #4]
 802470e:	fa1f f989 	uxth.w	r9, r9
 8024712:	0412      	lsls	r2, r2, #16
 8024714:	fb0e 8809 	mla	r8, lr, r9, r8
 8024718:	f002 6efc 	and.w	lr, r2, #132120576	; 0x7e00000
 802471c:	9a01      	ldr	r2, [sp, #4]
 802471e:	fb0a 8707 	mla	r7, sl, r7, r8
 8024722:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8024726:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802472a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802472e:	fb0b 7303 	mla	r3, fp, r3, r7
 8024732:	fb16 f70c 	smulbb	r7, r6, ip
 8024736:	ea4e 0202 	orr.w	r2, lr, r2
 802473a:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 802473e:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 8024742:	f1cc 0e10 	rsb	lr, ip, #16
 8024746:	ea48 0505 	orr.w	r5, r8, r5
 802474a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802474e:	ebae 0e06 	sub.w	lr, lr, r6
 8024752:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 8024756:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 802475a:	2bff      	cmp	r3, #255	; 0xff
 802475c:	fb06 f605 	mul.w	r6, r6, r5
 8024760:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 8024764:	fb0e 6202 	mla	r2, lr, r2, r6
 8024768:	ea4f 4604 	mov.w	r6, r4, lsl #16
 802476c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024770:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8024774:	ea44 0406 	orr.w	r4, r4, r6
 8024778:	fb07 2604 	mla	r6, r7, r4, r2
 802477c:	ea4f 4200 	mov.w	r2, r0, lsl #16
 8024780:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024784:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024788:	ea40 0002 	orr.w	r0, r0, r2
 802478c:	fb0c 6c00 	mla	ip, ip, r0, r6
 8024790:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8024794:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024798:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802479c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80247a0:	ea42 020c 	orr.w	r2, r2, ip
 80247a4:	b292      	uxth	r2, r2
 80247a6:	ea4f 2022 	mov.w	r0, r2, asr #8
 80247aa:	ea4f 05e2 	mov.w	r5, r2, asr #3
 80247ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80247b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80247b6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80247ba:	b2d2      	uxtb	r2, r2
 80247bc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80247c0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80247c4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80247c8:	d129      	bne.n	802481e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 80247ca:	700a      	strb	r2, [r1, #0]
 80247cc:	704d      	strb	r5, [r1, #1]
 80247ce:	7088      	strb	r0, [r1, #2]
 80247d0:	70cb      	strb	r3, [r1, #3]
 80247d2:	b005      	add	sp, #20
 80247d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247d8:	f04f 0e00 	mov.w	lr, #0
 80247dc:	f8cd e004 	str.w	lr, [sp, #4]
 80247e0:	e6fa      	b.n	80245d8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 80247e2:	2200      	movs	r2, #0
 80247e4:	4696      	mov	lr, r2
 80247e6:	4615      	mov	r5, r2
 80247e8:	9201      	str	r2, [sp, #4]
 80247ea:	e71b      	b.n	8024624 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80247ec:	2200      	movs	r2, #0
 80247ee:	4615      	mov	r5, r2
 80247f0:	e718      	b.n	8024624 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80247f2:	4632      	mov	r2, r6
 80247f4:	4635      	mov	r5, r6
 80247f6:	e715      	b.n	8024624 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 80247f8:	2700      	movs	r7, #0
 80247fa:	4638      	mov	r0, r7
 80247fc:	e742      	b.n	8024684 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 80247fe:	2300      	movs	r3, #0
 8024800:	461f      	mov	r7, r3
 8024802:	461c      	mov	r4, r3
 8024804:	4618      	mov	r0, r3
 8024806:	e76b      	b.n	80246e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024808:	4663      	mov	r3, ip
 802480a:	4667      	mov	r7, ip
 802480c:	4664      	mov	r4, ip
 802480e:	4660      	mov	r0, ip
 8024810:	e766      	b.n	80246e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024812:	2300      	movs	r3, #0
 8024814:	461c      	mov	r4, r3
 8024816:	e763      	b.n	80246e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024818:	4633      	mov	r3, r6
 802481a:	4634      	mov	r4, r6
 802481c:	e760      	b.n	80246e0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 802481e:	2b00      	cmp	r3, #0
 8024820:	d0d7      	beq.n	80247d2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 8024822:	78cf      	ldrb	r7, [r1, #3]
 8024824:	fb03 f607 	mul.w	r6, r3, r7
 8024828:	443b      	add	r3, r7
 802482a:	1c74      	adds	r4, r6, #1
 802482c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8024830:	780e      	ldrb	r6, [r1, #0]
 8024832:	1224      	asrs	r4, r4, #8
 8024834:	1b3f      	subs	r7, r7, r4
 8024836:	1b1b      	subs	r3, r3, r4
 8024838:	24ff      	movs	r4, #255	; 0xff
 802483a:	437e      	muls	r6, r7
 802483c:	b2db      	uxtb	r3, r3
 802483e:	fb14 6202 	smlabb	r2, r4, r2, r6
 8024842:	fb92 f6f3 	sdiv	r6, r2, r3
 8024846:	42a6      	cmp	r6, r4
 8024848:	f04f 02ff 	mov.w	r2, #255	; 0xff
 802484c:	bfc8      	it	gt
 802484e:	4626      	movgt	r6, r4
 8024850:	784c      	ldrb	r4, [r1, #1]
 8024852:	bfd8      	it	le
 8024854:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8024858:	fb07 f404 	mul.w	r4, r7, r4
 802485c:	bfd8      	it	le
 802485e:	b2f6      	uxtble	r6, r6
 8024860:	fb12 4505 	smlabb	r5, r2, r5, r4
 8024864:	700e      	strb	r6, [r1, #0]
 8024866:	fb95 f4f3 	sdiv	r4, r5, r3
 802486a:	4294      	cmp	r4, r2
 802486c:	bfd4      	ite	le
 802486e:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8024872:	4614      	movgt	r4, r2
 8024874:	788a      	ldrb	r2, [r1, #2]
 8024876:	bfd8      	it	le
 8024878:	b2e4      	uxtble	r4, r4
 802487a:	437a      	muls	r2, r7
 802487c:	704c      	strb	r4, [r1, #1]
 802487e:	24ff      	movs	r4, #255	; 0xff
 8024880:	fb14 2000 	smlabb	r0, r4, r0, r2
 8024884:	fb90 f2f3 	sdiv	r2, r0, r3
 8024888:	42a2      	cmp	r2, r4
 802488a:	bfd6      	itet	le
 802488c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024890:	4622      	movgt	r2, r4
 8024892:	b2d2      	uxtble	r2, r2
 8024894:	708a      	strb	r2, [r1, #2]
 8024896:	e79b      	b.n	80247d0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08024898 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802489c:	b093      	sub	sp, #76	; 0x4c
 802489e:	9210      	str	r2, [sp, #64]	; 0x40
 80248a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80248a2:	9011      	str	r0, [sp, #68]	; 0x44
 80248a4:	910e      	str	r1, [sp, #56]	; 0x38
 80248a6:	6850      	ldr	r0, [r2, #4]
 80248a8:	9306      	str	r3, [sp, #24]
 80248aa:	6812      	ldr	r2, [r2, #0]
 80248ac:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80248b0:	fb00 1303 	mla	r3, r0, r3, r1
 80248b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80248b8:	9307      	str	r3, [sp, #28]
 80248ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	9308      	str	r3, [sp, #32]
 80248c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80248c2:	685b      	ldr	r3, [r3, #4]
 80248c4:	9309      	str	r3, [sp, #36]	; 0x24
 80248c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	dc03      	bgt.n	80248d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80248cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80248ce:	2b00      	cmp	r3, #0
 80248d0:	f340 83f9 	ble.w	80250c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 80248d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80248d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80248de:	1e48      	subs	r0, r1, #1
 80248e0:	1e55      	subs	r5, r2, #1
 80248e2:	9b06      	ldr	r3, [sp, #24]
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	f340 81b4 	ble.w	8024c52 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80248ea:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80248ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80248ee:	1436      	asrs	r6, r6, #16
 80248f0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80248f4:	d406      	bmi.n	8024904 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248f6:	4286      	cmp	r6, r0
 80248f8:	da04      	bge.n	8024904 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	db02      	blt.n	8024904 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248fe:	42ab      	cmp	r3, r5
 8024900:	f2c0 81a8 	blt.w	8024c54 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8024904:	3601      	adds	r6, #1
 8024906:	f100 8195 	bmi.w	8024c34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802490a:	42b1      	cmp	r1, r6
 802490c:	f2c0 8192 	blt.w	8024c34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024910:	3301      	adds	r3, #1
 8024912:	f100 818f 	bmi.w	8024c34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024916:	429a      	cmp	r2, r3
 8024918:	f2c0 818c 	blt.w	8024c34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802491c:	9b06      	ldr	r3, [sp, #24]
 802491e:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024922:	9d07      	ldr	r5, [sp, #28]
 8024924:	930f      	str	r3, [sp, #60]	; 0x3c
 8024926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024928:	2b00      	cmp	r3, #0
 802492a:	f340 81b5 	ble.w	8024c98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 802492e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024930:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024932:	1418      	asrs	r0, r3, #16
 8024934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024936:	1436      	asrs	r6, r6, #16
 8024938:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802493c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802493e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024942:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024944:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024948:	f100 820e 	bmi.w	8024d68 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 802494c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024950:	4576      	cmp	r6, lr
 8024952:	f280 8209 	bge.w	8024d68 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024956:	2800      	cmp	r0, #0
 8024958:	f2c0 8206 	blt.w	8024d68 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 802495c:	f103 3eff 	add.w	lr, r3, #4294967295
 8024960:	4570      	cmp	r0, lr
 8024962:	f280 8201 	bge.w	8024d68 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024966:	b212      	sxth	r2, r2
 8024968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802496a:	fa1f fe81 	uxth.w	lr, r1
 802496e:	fb00 6002 	mla	r0, r0, r2, r6
 8024972:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8024976:	eb03 0a00 	add.w	sl, r3, r0
 802497a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802497e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024982:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024986:	b29b      	uxth	r3, r3
 8024988:	f1bc 0f00 	cmp.w	ip, #0
 802498c:	f000 81ca 	beq.w	8024d24 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024990:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024994:	eb0a 0b02 	add.w	fp, sl, r2
 8024998:	fa1f fa8c 	uxth.w	sl, ip
 802499c:	940a      	str	r4, [sp, #40]	; 0x28
 802499e:	fb0a fe0e 	mul.w	lr, sl, lr
 80249a2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80249a6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80249aa:	eba6 060e 	sub.w	r6, r6, lr
 80249ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80249b0:	fa1f fa8a 	uxth.w	sl, sl
 80249b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80249b6:	b2b6      	uxth	r6, r6
 80249b8:	eba3 030a 	sub.w	r3, r3, sl
 80249bc:	fb08 f606 	mul.w	r6, r8, r6
 80249c0:	b29b      	uxth	r3, r3
 80249c2:	fb09 6303 	mla	r3, r9, r3, r6
 80249c6:	fb0a 3304 	mla	r3, sl, r4, r3
 80249ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249cc:	fb0e 3304 	mla	r3, lr, r4, r3
 80249d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	f000 8120 	beq.w	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80249da:	9c08      	ldr	r4, [sp, #32]
 80249dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80249e0:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 80249e4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80249e8:	f000 81a1 	beq.w	8024d2e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80249ec:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80249f0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80249f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80249f8:	fb0a fe0e 	mul.w	lr, sl, lr
 80249fc:	fb09 f000 	mul.w	r0, r9, r0
 8024a00:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8024a04:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024a08:	f100 0b20 	add.w	fp, r0, #32
 8024a0c:	44ce      	add	lr, r9
 8024a0e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024a12:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024a16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024a1a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024a1e:	ea4e 0909 	orr.w	r9, lr, r9
 8024a22:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024a26:	8870      	ldrh	r0, [r6, #2]
 8024a28:	d019      	beq.n	8024a5e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024a2a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024a2e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024a32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a36:	fb0a fe0e 	mul.w	lr, sl, lr
 8024a3a:	fb08 f800 	mul.w	r8, r8, r0
 8024a3e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8024a42:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024a46:	f108 0b20 	add.w	fp, r8, #32
 8024a4a:	4486      	add	lr, r0
 8024a4c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024a50:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024a54:	0a00      	lsrs	r0, r0, #8
 8024a56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a5a:	ea4e 0000 	orr.w	r0, lr, r0
 8024a5e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024a62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024a66:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024a6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024a6e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024a72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024a76:	ea4e 0909 	orr.w	r9, lr, r9
 8024a7a:	ea4a 0000 	orr.w	r0, sl, r0
 8024a7e:	f1bc 0f00 	cmp.w	ip, #0
 8024a82:	f000 8156 	beq.w	8024d32 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024a86:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024a8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a8c:	3a01      	subs	r2, #1
 8024a8e:	2cff      	cmp	r4, #255	; 0xff
 8024a90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024a94:	f102 0202 	add.w	r2, r2, #2
 8024a98:	eb06 0e02 	add.w	lr, r6, r2
 8024a9c:	5ab2      	ldrh	r2, [r6, r2]
 8024a9e:	d018      	beq.n	8024ad2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024aa0:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024aa4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024aa8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024aac:	fb04 fa02 	mul.w	sl, r4, r2
 8024ab0:	fb08 f806 	mul.w	r8, r8, r6
 8024ab4:	f10a 0620 	add.w	r6, sl, #32
 8024ab8:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8024abc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024ac0:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8024ac4:	4442      	add	r2, r8
 8024ac6:	0a36      	lsrs	r6, r6, #8
 8024ac8:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8024acc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024ad0:	4332      	orrs	r2, r6
 8024ad2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024ad4:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8024ad8:	2cff      	cmp	r4, #255	; 0xff
 8024ada:	d01a      	beq.n	8024b12 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024adc:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8024ae0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024ae4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024ae8:	fb04 fa06 	mul.w	sl, r4, r6
 8024aec:	fb08 f80e 	mul.w	r8, r8, lr
 8024af0:	f10a 0e20 	add.w	lr, sl, #32
 8024af4:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8024af8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024afc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024b00:	4446      	add	r6, r8
 8024b02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b06:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8024b0a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024b0e:	ea46 060e 	orr.w	r6, r6, lr
 8024b12:	fb1c fe01 	smulbb	lr, ip, r1
 8024b16:	f1cc 0810 	rsb	r8, ip, #16
 8024b1a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024b1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b22:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024b26:	eba8 0801 	sub.w	r8, r8, r1
 8024b2a:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8024b2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024b32:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024b36:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024b3a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024b3e:	ea4a 0202 	orr.w	r2, sl, r2
 8024b42:	4341      	muls	r1, r0
 8024b44:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024b48:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024b4c:	fb09 1108 	mla	r1, r9, r8, r1
 8024b50:	ea4b 0606 	orr.w	r6, fp, r6
 8024b54:	fb0c 1102 	mla	r1, ip, r2, r1
 8024b58:	fb0e 1e06 	mla	lr, lr, r6, r1
 8024b5c:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8024b60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024b64:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024b68:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024b6c:	ea41 0e0e 	orr.w	lr, r1, lr
 8024b70:	fa1f f18e 	uxth.w	r1, lr
 8024b74:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024b78:	2bff      	cmp	r3, #255	; 0xff
 8024b7a:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8024b7e:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8024b82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024b86:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b8a:	b2d2      	uxtb	r2, r2
 8024b8c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8024b90:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8024b94:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024b98:	f000 80df 	beq.w	8024d5a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024b9c:	f895 8003 	ldrb.w	r8, [r5, #3]
 8024ba0:	24ff      	movs	r4, #255	; 0xff
 8024ba2:	fb03 f608 	mul.w	r6, r3, r8
 8024ba6:	4443      	add	r3, r8
 8024ba8:	1c71      	adds	r1, r6, #1
 8024baa:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8024bae:	782e      	ldrb	r6, [r5, #0]
 8024bb0:	1209      	asrs	r1, r1, #8
 8024bb2:	1a5b      	subs	r3, r3, r1
 8024bb4:	eba8 0101 	sub.w	r1, r8, r1
 8024bb8:	f895 8002 	ldrb.w	r8, [r5, #2]
 8024bbc:	434e      	muls	r6, r1
 8024bbe:	b2db      	uxtb	r3, r3
 8024bc0:	fb14 6202 	smlabb	r2, r4, r2, r6
 8024bc4:	24ff      	movs	r4, #255	; 0xff
 8024bc6:	70eb      	strb	r3, [r5, #3]
 8024bc8:	fb92 f2f3 	sdiv	r2, r2, r3
 8024bcc:	2aff      	cmp	r2, #255	; 0xff
 8024bce:	bfd6      	itet	le
 8024bd0:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024bd4:	22ff      	movgt	r2, #255	; 0xff
 8024bd6:	b2d2      	uxtble	r2, r2
 8024bd8:	702a      	strb	r2, [r5, #0]
 8024bda:	786a      	ldrb	r2, [r5, #1]
 8024bdc:	434a      	muls	r2, r1
 8024bde:	fb01 f108 	mul.w	r1, r1, r8
 8024be2:	fb14 2000 	smlabb	r0, r4, r0, r2
 8024be6:	22ff      	movs	r2, #255	; 0xff
 8024be8:	fb90 f0f3 	sdiv	r0, r0, r3
 8024bec:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8024bf0:	28ff      	cmp	r0, #255	; 0xff
 8024bf2:	fb9c fcf3 	sdiv	ip, ip, r3
 8024bf6:	bfd6      	itet	le
 8024bf8:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024bfc:	20ff      	movgt	r0, #255	; 0xff
 8024bfe:	b2c0      	uxtble	r0, r0
 8024c00:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c04:	bfd4      	ite	le
 8024c06:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8024c0a:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8024c0e:	7068      	strb	r0, [r5, #1]
 8024c10:	bfd8      	it	le
 8024c12:	fa5f fc8c 	uxtble.w	ip, ip
 8024c16:	f885 c002 	strb.w	ip, [r5, #2]
 8024c1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024c1c:	3504      	adds	r5, #4
 8024c1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024c20:	4413      	add	r3, r2
 8024c22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024c24:	931d      	str	r3, [sp, #116]	; 0x74
 8024c26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c28:	441a      	add	r2, r3
 8024c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024c2c:	3b01      	subs	r3, #1
 8024c2e:	921e      	str	r2, [sp, #120]	; 0x78
 8024c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c32:	e678      	b.n	8024926 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024c36:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8024c38:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8024c3a:	4433      	add	r3, r6
 8024c3c:	931d      	str	r3, [sp, #116]	; 0x74
 8024c3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c40:	441c      	add	r4, r3
 8024c42:	9b06      	ldr	r3, [sp, #24]
 8024c44:	3b01      	subs	r3, #1
 8024c46:	941e      	str	r4, [sp, #120]	; 0x78
 8024c48:	9306      	str	r3, [sp, #24]
 8024c4a:	9b07      	ldr	r3, [sp, #28]
 8024c4c:	3304      	adds	r3, #4
 8024c4e:	9307      	str	r3, [sp, #28]
 8024c50:	e647      	b.n	80248e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024c52:	d028      	beq.n	8024ca6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024c54:	9b06      	ldr	r3, [sp, #24]
 8024c56:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024c58:	3b01      	subs	r3, #1
 8024c5a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024c5c:	fb00 5003 	mla	r0, r0, r3, r5
 8024c60:	1400      	asrs	r0, r0, #16
 8024c62:	f53f ae5b 	bmi.w	802491c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024c66:	3901      	subs	r1, #1
 8024c68:	4288      	cmp	r0, r1
 8024c6a:	f6bf ae57 	bge.w	802491c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024c6e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024c70:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024c72:	fb01 0303 	mla	r3, r1, r3, r0
 8024c76:	141b      	asrs	r3, r3, #16
 8024c78:	f53f ae50 	bmi.w	802491c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024c7c:	3a01      	subs	r2, #1
 8024c7e:	4293      	cmp	r3, r2
 8024c80:	f6bf ae4c 	bge.w	802491c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8024c84:	9b07      	ldr	r3, [sp, #28]
 8024c86:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024c8a:	1d19      	adds	r1, r3, #4
 8024c8c:	9b06      	ldr	r3, [sp, #24]
 8024c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	f300 8085 	bgt.w	8024da2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8024c98:	9b06      	ldr	r3, [sp, #24]
 8024c9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024c9e:	9b07      	ldr	r3, [sp, #28]
 8024ca0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024ca4:	9307      	str	r3, [sp, #28]
 8024ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	f340 820c 	ble.w	80250c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8024cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024cb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024cb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024cb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024cbc:	eef0 6a62 	vmov.f32	s13, s5
 8024cc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024cc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024cc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ccc:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8024cd0:	eef0 6a43 	vmov.f32	s13, s6
 8024cd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cd8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8024cdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ce0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024ce4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024ce8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024cec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024cf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024cf4:	ee12 2a90 	vmov	r2, s5
 8024cf8:	eef0 2a47 	vmov.f32	s5, s14
 8024cfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d00:	ee13 2a10 	vmov	r2, s6
 8024d04:	931f      	str	r3, [sp, #124]	; 0x7c
 8024d06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d08:	eeb0 3a67 	vmov.f32	s6, s15
 8024d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d10:	9320      	str	r3, [sp, #128]	; 0x80
 8024d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d16:	3b01      	subs	r3, #1
 8024d18:	930e      	str	r3, [sp, #56]	; 0x38
 8024d1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024d1c:	bf08      	it	eq
 8024d1e:	4613      	moveq	r3, r2
 8024d20:	9306      	str	r3, [sp, #24]
 8024d22:	e5d0      	b.n	80248c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8024d24:	fb08 f606 	mul.w	r6, r8, r6
 8024d28:	fb09 6303 	mla	r3, r9, r3, r6
 8024d2c:	e650      	b.n	80249d0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8024d2e:	4681      	mov	r9, r0
 8024d30:	e677      	b.n	8024a22 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8024d32:	f1c1 0210 	rsb	r2, r1, #16
 8024d36:	4341      	muls	r1, r0
 8024d38:	fb09 1902 	mla	r9, r9, r2, r1
 8024d3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024d40:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8024d44:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024d48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024d4c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024d50:	ea41 0909 	orr.w	r9, r1, r9
 8024d54:	fa1f f189 	uxth.w	r1, r9
 8024d58:	e70c      	b.n	8024b74 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8024d5a:	0200      	lsls	r0, r0, #8
 8024d5c:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8024d60:	ea4c 0202 	orr.w	r2, ip, r2
 8024d64:	602a      	str	r2, [r5, #0]
 8024d66:	e758      	b.n	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024d68:	f116 0e01 	adds.w	lr, r6, #1
 8024d6c:	f53f af55 	bmi.w	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024d70:	4572      	cmp	r2, lr
 8024d72:	f6ff af52 	blt.w	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024d76:	f110 0e01 	adds.w	lr, r0, #1
 8024d7a:	f53f af4e 	bmi.w	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024d7e:	4573      	cmp	r3, lr
 8024d80:	f6ff af4b 	blt.w	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024d84:	b21b      	sxth	r3, r3
 8024d86:	b212      	sxth	r2, r2
 8024d88:	9301      	str	r3, [sp, #4]
 8024d8a:	9200      	str	r2, [sp, #0]
 8024d8c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8024d90:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8024d94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8024d98:	4629      	mov	r1, r5
 8024d9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024d9c:	f7ff fbdb 	bl	8024556 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8024da0:	e73b      	b.n	8024c1a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024da2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024da4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024da8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024daa:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8024dae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024db0:	fa1f fe82 	uxth.w	lr, r2
 8024db4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024db8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024dba:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024dbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8024dc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024dc4:	141b      	asrs	r3, r3, #16
 8024dc6:	fb00 3c0c 	mla	ip, r0, ip, r3
 8024dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dcc:	eb03 0a0c 	add.w	sl, r3, ip
 8024dd0:	f813 900c 	ldrb.w	r9, [r3, ip]
 8024dd4:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024dd8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024ddc:	b29b      	uxth	r3, r3
 8024dde:	2e00      	cmp	r6, #0
 8024de0:	f000 8152 	beq.w	8025088 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8024de4:	f81a 4000 	ldrb.w	r4, [sl, r0]
 8024de8:	eb0a 0b00 	add.w	fp, sl, r0
 8024dec:	fa1f fa86 	uxth.w	sl, r6
 8024df0:	940c      	str	r4, [sp, #48]	; 0x30
 8024df2:	fb0a fe0e 	mul.w	lr, sl, lr
 8024df6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024dfa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024dfe:	eba5 050e 	sub.w	r5, r5, lr
 8024e02:	940d      	str	r4, [sp, #52]	; 0x34
 8024e04:	fa1f fa8a 	uxth.w	sl, sl
 8024e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024e0a:	b2ad      	uxth	r5, r5
 8024e0c:	eba3 030a 	sub.w	r3, r3, sl
 8024e10:	fb08 f505 	mul.w	r5, r8, r5
 8024e14:	b29b      	uxth	r3, r3
 8024e16:	fb09 5303 	mla	r3, r9, r3, r5
 8024e1a:	fb0a 3304 	mla	r3, sl, r4, r3
 8024e1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024e20:	fb0e 3304 	mla	r3, lr, r4, r3
 8024e24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	f000 8120 	beq.w	802506e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8024e2e:	9c08      	ldr	r4, [sp, #32]
 8024e30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024e34:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8024e38:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 8024e3c:	f000 8129 	beq.w	8025092 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8024e40:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8024e44:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024e48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024e4c:	fb0a fc0c 	mul.w	ip, sl, ip
 8024e50:	fb09 f505 	mul.w	r5, r9, r5
 8024e54:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8024e58:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024e5c:	f105 0b20 	add.w	fp, r5, #32
 8024e60:	44cc      	add	ip, r9
 8024e62:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8024e66:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8024e6a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024e6e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024e72:	ea4c 0909 	orr.w	r9, ip, r9
 8024e76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024e7a:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024e7e:	d019      	beq.n	8024eb4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8024e80:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8024e84:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024e88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024e8c:	fb0a fc0c 	mul.w	ip, sl, ip
 8024e90:	fb08 f805 	mul.w	r8, r8, r5
 8024e94:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 8024e98:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024e9c:	f108 0b20 	add.w	fp, r8, #32
 8024ea0:	44ac      	add	ip, r5
 8024ea2:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8024ea6:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8024eaa:	0a2d      	lsrs	r5, r5, #8
 8024eac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024eb0:	ea4c 0505 	orr.w	r5, ip, r5
 8024eb4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024eb8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024ebc:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8024ec0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024ec4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024ec8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024ecc:	ea4c 0909 	orr.w	r9, ip, r9
 8024ed0:	ea4a 0505 	orr.w	r5, sl, r5
 8024ed4:	2e00      	cmp	r6, #0
 8024ed6:	f000 80de 	beq.w	8025096 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 8024eda:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8024ede:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024ee0:	3801      	subs	r0, #1
 8024ee2:	2cff      	cmp	r4, #255	; 0xff
 8024ee4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8024ee8:	f100 0002 	add.w	r0, r0, #2
 8024eec:	eb0e 0800 	add.w	r8, lr, r0
 8024ef0:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8024ef4:	d01a      	beq.n	8024f2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8024ef6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024efa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024efe:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8024f02:	fb04 fa00 	mul.w	sl, r4, r0
 8024f06:	fb0e fe0c 	mul.w	lr, lr, ip
 8024f0a:	f10a 0c20 	add.w	ip, sl, #32
 8024f0e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8024f12:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024f16:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024f1a:	4470      	add	r0, lr
 8024f1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f20:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8024f24:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024f28:	ea40 000c 	orr.w	r0, r0, ip
 8024f2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f2e:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8024f32:	2cff      	cmp	r4, #255	; 0xff
 8024f34:	d01a      	beq.n	8024f6c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8024f36:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8024f3a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024f3e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024f42:	fb04 fa0c 	mul.w	sl, r4, ip
 8024f46:	fb08 f80e 	mul.w	r8, r8, lr
 8024f4a:	f10a 0e20 	add.w	lr, sl, #32
 8024f4e:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8024f52:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024f56:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024f5a:	44c4      	add	ip, r8
 8024f5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f60:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8024f64:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024f68:	ea4c 0c0e 	orr.w	ip, ip, lr
 8024f6c:	fb16 fe02 	smulbb	lr, r6, r2
 8024f70:	f1c6 0810 	rsb	r8, r6, #16
 8024f74:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024f78:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024f7c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024f80:	eba8 0802 	sub.w	r8, r8, r2
 8024f84:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8024f88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024f8c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8024f90:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024f94:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024f98:	ea4a 0000 	orr.w	r0, sl, r0
 8024f9c:	436a      	muls	r2, r5
 8024f9e:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8024fa2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024fa6:	fb09 2208 	mla	r2, r9, r8, r2
 8024faa:	ea4b 0c0c 	orr.w	ip, fp, ip
 8024fae:	fb06 2200 	mla	r2, r6, r0, r2
 8024fb2:	fb0e 220c 	mla	r2, lr, ip, r2
 8024fb6:	0d55      	lsrs	r5, r2, #21
 8024fb8:	0952      	lsrs	r2, r2, #5
 8024fba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024fbe:	f422 6cfc 	bic.w	ip, r2, #2016	; 0x7e0
 8024fc2:	ea45 000c 	orr.w	r0, r5, ip
 8024fc6:	b280      	uxth	r0, r0
 8024fc8:	2bff      	cmp	r3, #255	; 0xff
 8024fca:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8024fce:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8024fd2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8024fd6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024fda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024fde:	b2d2      	uxtb	r2, r2
 8024fe0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8024fe4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8024fe8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024fec:	d064      	beq.n	80250b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 8024fee:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8024ff2:	24ff      	movs	r4, #255	; 0xff
 8024ff4:	fb03 f508 	mul.w	r5, r3, r8
 8024ff8:	4443      	add	r3, r8
 8024ffa:	1c68      	adds	r0, r5, #1
 8024ffc:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8025000:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8025004:	1200      	asrs	r0, r0, #8
 8025006:	1a1b      	subs	r3, r3, r0
 8025008:	eba8 0000 	sub.w	r0, r8, r0
 802500c:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8025010:	4345      	muls	r5, r0
 8025012:	b2db      	uxtb	r3, r3
 8025014:	fb14 5202 	smlabb	r2, r4, r2, r5
 8025018:	24ff      	movs	r4, #255	; 0xff
 802501a:	f801 3c01 	strb.w	r3, [r1, #-1]
 802501e:	fb92 f2f3 	sdiv	r2, r2, r3
 8025022:	2aff      	cmp	r2, #255	; 0xff
 8025024:	bfd6      	itet	le
 8025026:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802502a:	22ff      	movgt	r2, #255	; 0xff
 802502c:	b2d2      	uxtble	r2, r2
 802502e:	f801 2c04 	strb.w	r2, [r1, #-4]
 8025032:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8025036:	4342      	muls	r2, r0
 8025038:	fb00 f008 	mul.w	r0, r0, r8
 802503c:	fb14 2206 	smlabb	r2, r4, r6, r2
 8025040:	fb92 f2f3 	sdiv	r2, r2, r3
 8025044:	2aff      	cmp	r2, #255	; 0xff
 8025046:	bfd6      	itet	le
 8025048:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802504c:	22ff      	movgt	r2, #255	; 0xff
 802504e:	b2d2      	uxtble	r2, r2
 8025050:	f801 2c03 	strb.w	r2, [r1, #-3]
 8025054:	22ff      	movs	r2, #255	; 0xff
 8025056:	fb12 000c 	smlabb	r0, r2, ip, r0
 802505a:	fb90 f0f3 	sdiv	r0, r0, r3
 802505e:	28ff      	cmp	r0, #255	; 0xff
 8025060:	bfd6      	itet	le
 8025062:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025066:	20ff      	movgt	r0, #255	; 0xff
 8025068:	b2c0      	uxtble	r0, r0
 802506a:	f801 0c02 	strb.w	r0, [r1, #-2]
 802506e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025070:	3104      	adds	r1, #4
 8025072:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025074:	4413      	add	r3, r2
 8025076:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025078:	931d      	str	r3, [sp, #116]	; 0x74
 802507a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802507c:	441a      	add	r2, r3
 802507e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025080:	3b01      	subs	r3, #1
 8025082:	921e      	str	r2, [sp, #120]	; 0x78
 8025084:	930f      	str	r3, [sp, #60]	; 0x3c
 8025086:	e603      	b.n	8024c90 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025088:	fb08 f505 	mul.w	r5, r8, r5
 802508c:	fb09 5303 	mla	r3, r9, r3, r5
 8025090:	e6c8      	b.n	8024e24 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025092:	46a9      	mov	r9, r5
 8025094:	e6ef      	b.n	8024e76 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8025096:	f1c2 0010 	rsb	r0, r2, #16
 802509a:	436a      	muls	r2, r5
 802509c:	fb09 2900 	mla	r9, r9, r0, r2
 80250a0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80250a4:	ea4f 5659 	mov.w	r6, r9, lsr #21
 80250a8:	ea4f 1059 	mov.w	r0, r9, lsr #5
 80250ac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80250b0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80250b4:	4330      	orrs	r0, r6
 80250b6:	e786      	b.n	8024fc6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80250b8:	0236      	lsls	r6, r6, #8
 80250ba:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80250be:	4332      	orrs	r2, r6
 80250c0:	f841 2c04 	str.w	r2, [r1, #-4]
 80250c4:	e7d3      	b.n	802506e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80250c6:	b013      	add	sp, #76	; 0x4c
 80250c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080250cc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 80250cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250d0:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	; 0x28
 80250d4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80250d8:	fb08 6703 	mla	r7, r8, r3, r6
 80250dc:	f1b8 0f00 	cmp.w	r8, #0
 80250e0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80250e4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80250e8:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 80250ec:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80250f0:	6808      	ldr	r0, [r1, #0]
 80250f2:	f2c0 80d5 	blt.w	80252a0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 80250f6:	45c1      	cmp	r9, r8
 80250f8:	f340 80d2 	ble.w	80252a0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 80250fc:	2e00      	cmp	r6, #0
 80250fe:	f2c0 80cd 	blt.w	802529c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8025102:	42b3      	cmp	r3, r6
 8025104:	f340 80ca 	ble.w	802529c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8025108:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802510c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8025110:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025114:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8025118:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802511c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025120:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8025124:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8025128:	fa5f fc8c 	uxtb.w	ip, ip
 802512c:	023f      	lsls	r7, r7, #8
 802512e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025132:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8025136:	ea47 070c 	orr.w	r7, r7, ip
 802513a:	1c72      	adds	r2, r6, #1
 802513c:	f100 80b3 	bmi.w	80252a6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8025140:	4293      	cmp	r3, r2
 8025142:	f340 80b0 	ble.w	80252a6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8025146:	2c00      	cmp	r4, #0
 8025148:	f000 80ad 	beq.w	80252a6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 802514c:	f8ba b002 	ldrh.w	fp, [sl, #2]
 8025150:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8025154:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 8025158:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802515c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025160:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025164:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025168:	fa5f fb8b 	uxtb.w	fp, fp
 802516c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025170:	0212      	lsls	r2, r2, #8
 8025172:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8025176:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 802517a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802517e:	f118 0801 	adds.w	r8, r8, #1
 8025182:	f100 8094 	bmi.w	80252ae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8025186:	45c1      	cmp	r9, r8
 8025188:	f340 8091 	ble.w	80252ae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 802518c:	f1be 0f00 	cmp.w	lr, #0
 8025190:	f000 808d 	beq.w	80252ae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8025194:	2e00      	cmp	r6, #0
 8025196:	f2c0 8088 	blt.w	80252aa <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802519a:	42b3      	cmp	r3, r6
 802519c:	f340 8085 	ble.w	80252aa <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 80251a0:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 80251a4:	ea4f 2228 	mov.w	r2, r8, asr #8
 80251a8:	ea4f 09e8 	mov.w	r9, r8, asr #3
 80251ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80251b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80251b4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80251b8:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 80251bc:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 80251c0:	fa5f f888 	uxtb.w	r8, r8
 80251c4:	0212      	lsls	r2, r2, #8
 80251c6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80251ca:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80251ce:	ea42 0208 	orr.w	r2, r2, r8
 80251d2:	3601      	adds	r6, #1
 80251d4:	d417      	bmi.n	8025206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80251d6:	42b3      	cmp	r3, r6
 80251d8:	dd15      	ble.n	8025206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80251da:	b1a4      	cbz	r4, 8025206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80251dc:	3301      	adds	r3, #1
 80251de:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 80251e2:	10f3      	asrs	r3, r6, #3
 80251e4:	1230      	asrs	r0, r6, #8
 80251e6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80251ea:	00f6      	lsls	r6, r6, #3
 80251ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80251f0:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80251f4:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 80251f8:	b2f6      	uxtb	r6, r6
 80251fa:	0218      	lsls	r0, r3, #8
 80251fc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025200:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8025204:	4330      	orrs	r0, r6
 8025206:	b2a4      	uxth	r4, r4
 8025208:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802520c:	fa1f fe8e 	uxth.w	lr, lr
 8025210:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8025214:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025218:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802521c:	fb04 f80e 	mul.w	r8, r4, lr
 8025220:	0124      	lsls	r4, r4, #4
 8025222:	2dff      	cmp	r5, #255	; 0xff
 8025224:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 8025228:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802522c:	eba4 0408 	sub.w	r4, r4, r8
 8025230:	fa1f fe8e 	uxth.w	lr, lr
 8025234:	b2a4      	uxth	r4, r4
 8025236:	eba9 090e 	sub.w	r9, r9, lr
 802523a:	fb04 f303 	mul.w	r3, r4, r3
 802523e:	fa1f f989 	uxth.w	r9, r9
 8025242:	fb04 f40c 	mul.w	r4, r4, ip
 8025246:	fb09 3606 	mla	r6, r9, r6, r3
 802524a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802524e:	fb09 4407 	mla	r4, r9, r7, r4
 8025252:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025256:	fb08 6603 	mla	r6, r8, r3, r6
 802525a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802525e:	fb08 4000 	mla	r0, r8, r0, r4
 8025262:	fb0e 6303 	mla	r3, lr, r3, r6
 8025266:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802526a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802526e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8025272:	fb0e 0303 	mla	r3, lr, r3, r0
 8025276:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802527a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802527e:	ea43 0306 	orr.w	r3, r3, r6
 8025282:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8025286:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802528a:	b2d4      	uxtb	r4, r2
 802528c:	b2c6      	uxtb	r6, r0
 802528e:	d110      	bne.n	80252b2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 8025290:	700b      	strb	r3, [r1, #0]
 8025292:	7048      	strb	r0, [r1, #1]
 8025294:	708a      	strb	r2, [r1, #2]
 8025296:	70cd      	strb	r5, [r1, #3]
 8025298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802529c:	4607      	mov	r7, r0
 802529e:	e74c      	b.n	802513a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 80252a0:	4684      	mov	ip, r0
 80252a2:	4607      	mov	r7, r0
 80252a4:	e76b      	b.n	802517e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 80252a6:	4684      	mov	ip, r0
 80252a8:	e769      	b.n	802517e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 80252aa:	4602      	mov	r2, r0
 80252ac:	e791      	b.n	80251d2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 80252ae:	4602      	mov	r2, r0
 80252b0:	e7a9      	b.n	8025206 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80252b2:	2d00      	cmp	r5, #0
 80252b4:	d0f0      	beq.n	8025298 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 80252b6:	78cf      	ldrb	r7, [r1, #3]
 80252b8:	b2db      	uxtb	r3, r3
 80252ba:	fb15 f606 	smulbb	r6, r5, r6
 80252be:	fb05 f207 	mul.w	r2, r5, r7
 80252c2:	1c50      	adds	r0, r2, #1
 80252c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80252c8:	19ea      	adds	r2, r5, r7
 80252ca:	1200      	asrs	r0, r0, #8
 80252cc:	1a12      	subs	r2, r2, r0
 80252ce:	1a38      	subs	r0, r7, r0
 80252d0:	780f      	ldrb	r7, [r1, #0]
 80252d2:	b2d2      	uxtb	r2, r2
 80252d4:	4347      	muls	r7, r0
 80252d6:	70ca      	strb	r2, [r1, #3]
 80252d8:	fb05 7303 	mla	r3, r5, r3, r7
 80252dc:	fb15 f504 	smulbb	r5, r5, r4
 80252e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80252e4:	700b      	strb	r3, [r1, #0]
 80252e6:	784b      	ldrb	r3, [r1, #1]
 80252e8:	fb00 6303 	mla	r3, r0, r3, r6
 80252ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80252f0:	704b      	strb	r3, [r1, #1]
 80252f2:	788b      	ldrb	r3, [r1, #2]
 80252f4:	fb00 5503 	mla	r5, r0, r3, r5
 80252f8:	fb95 f5f2 	sdiv	r5, r5, r2
 80252fc:	708d      	strb	r5, [r1, #2]
 80252fe:	e7cb      	b.n	8025298 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

08025300 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025304:	b08f      	sub	sp, #60	; 0x3c
 8025306:	461f      	mov	r7, r3
 8025308:	920c      	str	r2, [sp, #48]	; 0x30
 802530a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802530c:	900d      	str	r0, [sp, #52]	; 0x34
 802530e:	9107      	str	r1, [sp, #28]
 8025310:	6850      	ldr	r0, [r2, #4]
 8025312:	6812      	ldr	r2, [r2, #0]
 8025314:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 8025318:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802531c:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	; 0x64
 8025320:	fb00 1303 	mla	r3, r0, r3, r1
 8025324:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8025328:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	9306      	str	r3, [sp, #24]
 802532e:	9b07      	ldr	r3, [sp, #28]
 8025330:	2b00      	cmp	r3, #0
 8025332:	dc03      	bgt.n	802533c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025336:	2b00      	cmp	r3, #0
 8025338:	f340 8230 	ble.w	802579c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802533c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802533e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025342:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025346:	1e48      	subs	r0, r1, #1
 8025348:	1e56      	subs	r6, r2, #1
 802534a:	2f00      	cmp	r7, #0
 802534c:	f340 80bd 	ble.w	80254ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8025350:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025354:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025358:	d406      	bmi.n	8025368 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802535a:	4584      	cmp	ip, r0
 802535c:	da04      	bge.n	8025368 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802535e:	2b00      	cmp	r3, #0
 8025360:	db02      	blt.n	8025368 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025362:	42b3      	cmp	r3, r6
 8025364:	f2c0 80b2 	blt.w	80254cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8025368:	f11c 0c01 	adds.w	ip, ip, #1
 802536c:	f100 80a5 	bmi.w	80254ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025370:	4561      	cmp	r1, ip
 8025372:	f2c0 80a2 	blt.w	80254ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025376:	3301      	adds	r3, #1
 8025378:	f100 809f 	bmi.w	80254ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802537c:	429a      	cmp	r2, r3
 802537e:	f2c0 809c 	blt.w	80254ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025382:	46ba      	mov	sl, r7
 8025384:	464e      	mov	r6, r9
 8025386:	f1ba 0f00 	cmp.w	sl, #0
 802538a:	f340 80bb 	ble.w	8025504 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802538e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025390:	1429      	asrs	r1, r5, #16
 8025392:	ea4f 4028 	mov.w	r0, r8, asr #16
 8025396:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802539a:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 802539e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80253a2:	f100 8122 	bmi.w	80255ea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80253a6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80253aa:	4559      	cmp	r1, fp
 80253ac:	f280 811d 	bge.w	80255ea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80253b0:	2800      	cmp	r0, #0
 80253b2:	f2c0 811a 	blt.w	80255ea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80253b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80253ba:	4558      	cmp	r0, fp
 80253bc:	f280 8115 	bge.w	80255ea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80253c0:	fa0f fe8e 	sxth.w	lr, lr
 80253c4:	9b06      	ldr	r3, [sp, #24]
 80253c6:	fb00 110e 	mla	r1, r0, lr, r1
 80253ca:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 80253ce:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 80253d2:	8841      	ldrh	r1, [r0, #2]
 80253d4:	f1bc 0f00 	cmp.w	ip, #0
 80253d8:	d00b      	beq.n	80253f2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 80253da:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80253de:	3b01      	subs	r3, #1
 80253e0:	005b      	lsls	r3, r3, #1
 80253e2:	3302      	adds	r3, #2
 80253e4:	eb00 0e03 	add.w	lr, r0, r3
 80253e8:	5ac3      	ldrh	r3, [r0, r3]
 80253ea:	9308      	str	r3, [sp, #32]
 80253ec:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80253f0:	9309      	str	r3, [sp, #36]	; 0x24
 80253f2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80253f6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80253fa:	fb12 f30c 	smulbb	r3, r2, ip
 80253fe:	f1cc 0e10 	rsb	lr, ip, #16
 8025402:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025406:	2cff      	cmp	r4, #255	; 0xff
 8025408:	ea4f 03e3 	mov.w	r3, r3, asr #3
 802540c:	ebae 0e02 	sub.w	lr, lr, r2
 8025410:	ea40 000b 	orr.w	r0, r0, fp
 8025414:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025418:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802541c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025420:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025424:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025428:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 802542c:	ea4b 0101 	orr.w	r1, fp, r1
 8025430:	fb02 f101 	mul.w	r1, r2, r1
 8025434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025436:	fb0e 1e00 	mla	lr, lr, r0, r1
 802543a:	ea4f 4002 	mov.w	r0, r2, lsl #16
 802543e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025442:	9908      	ldr	r1, [sp, #32]
 8025444:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025448:	ea40 0002 	orr.w	r0, r0, r2
 802544c:	9a08      	ldr	r2, [sp, #32]
 802544e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025452:	fb03 e000 	mla	r0, r3, r0, lr
 8025456:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802545a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802545e:	ea42 020e 	orr.w	r2, r2, lr
 8025462:	fb0c 0c02 	mla	ip, ip, r2, r0
 8025466:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802546a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802546e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025472:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025476:	ea43 0c0c 	orr.w	ip, r3, ip
 802547a:	fa1f f38c 	uxth.w	r3, ip
 802547e:	ea4f 2223 	mov.w	r2, r3, asr #8
 8025482:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8025486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802548a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802548e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025492:	b2db      	uxtb	r3, r3
 8025494:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025498:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802549c:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80254a0:	d174      	bne.n	802558c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80254a2:	7033      	strb	r3, [r6, #0]
 80254a4:	7071      	strb	r1, [r6, #1]
 80254a6:	70b2      	strb	r2, [r6, #2]
 80254a8:	70f4      	strb	r4, [r6, #3]
 80254aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80254ac:	3604      	adds	r6, #4
 80254ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80254b2:	441d      	add	r5, r3
 80254b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80254b6:	4498      	add	r8, r3
 80254b8:	e765      	b.n	8025386 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80254ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80254bc:	3f01      	subs	r7, #1
 80254be:	f109 0904 	add.w	r9, r9, #4
 80254c2:	441d      	add	r5, r3
 80254c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80254c6:	4498      	add	r8, r3
 80254c8:	e73f      	b.n	802534a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80254ca:	d01f      	beq.n	802550c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80254cc:	1e7b      	subs	r3, r7, #1
 80254ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80254d0:	fb00 5003 	mla	r0, r0, r3, r5
 80254d4:	1400      	asrs	r0, r0, #16
 80254d6:	f53f af54 	bmi.w	8025382 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80254da:	3901      	subs	r1, #1
 80254dc:	4288      	cmp	r0, r1
 80254de:	f6bf af50 	bge.w	8025382 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80254e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80254e4:	fb01 8303 	mla	r3, r1, r3, r8
 80254e8:	141b      	asrs	r3, r3, #16
 80254ea:	f53f af4a 	bmi.w	8025382 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80254ee:	3a01      	subs	r2, #1
 80254f0:	4293      	cmp	r3, r2
 80254f2:	f6bf af46 	bge.w	8025382 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80254f6:	f109 0304 	add.w	r3, r9, #4
 80254fa:	46ba      	mov	sl, r7
 80254fc:	f1ba 0f00 	cmp.w	sl, #0
 8025500:	f300 8090 	bgt.w	8025624 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025504:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8025508:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 802550c:	9b07      	ldr	r3, [sp, #28]
 802550e:	2b00      	cmp	r3, #0
 8025510:	f340 8144 	ble.w	802579c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8025514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025518:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802551a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802551e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025522:	eef0 6a62 	vmov.f32	s13, s5
 8025526:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802552a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802552e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025532:	ee16 5a90 	vmov	r5, s13
 8025536:	eef0 6a43 	vmov.f32	s13, s6
 802553a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802553e:	ee16 8a90 	vmov	r8, s13
 8025542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025546:	ee61 7a27 	vmul.f32	s15, s2, s15
 802554a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802554e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802555a:	ee12 2a90 	vmov	r2, s5
 802555e:	eef0 2a47 	vmov.f32	s5, s14
 8025562:	fb92 f3f3 	sdiv	r3, r2, r3
 8025566:	ee13 2a10 	vmov	r2, s6
 802556a:	931b      	str	r3, [sp, #108]	; 0x6c
 802556c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802556e:	eeb0 3a67 	vmov.f32	s6, s15
 8025572:	fb92 f3f3 	sdiv	r3, r2, r3
 8025576:	931c      	str	r3, [sp, #112]	; 0x70
 8025578:	9b07      	ldr	r3, [sp, #28]
 802557a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802557c:	3b01      	subs	r3, #1
 802557e:	9307      	str	r3, [sp, #28]
 8025580:	bf08      	it	eq
 8025582:	4617      	moveq	r7, r2
 8025584:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025586:	bf18      	it	ne
 8025588:	461f      	movne	r7, r3
 802558a:	e6d0      	b.n	802532e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802558c:	2c00      	cmp	r4, #0
 802558e:	d08c      	beq.n	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025590:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025594:	fb13 f304 	smulbb	r3, r3, r4
 8025598:	fb14 f101 	smulbb	r1, r4, r1
 802559c:	fb14 f202 	smulbb	r2, r4, r2
 80255a0:	fb04 fc0e 	mul.w	ip, r4, lr
 80255a4:	f10c 0001 	add.w	r0, ip, #1
 80255a8:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80255ac:	eb04 0c0e 	add.w	ip, r4, lr
 80255b0:	1200      	asrs	r0, r0, #8
 80255b2:	ebac 0c00 	sub.w	ip, ip, r0
 80255b6:	ebae 0000 	sub.w	r0, lr, r0
 80255ba:	f896 e000 	ldrb.w	lr, [r6]
 80255be:	fa5f fc8c 	uxtb.w	ip, ip
 80255c2:	fb00 330e 	mla	r3, r0, lr, r3
 80255c6:	f886 c003 	strb.w	ip, [r6, #3]
 80255ca:	fb93 f3fc 	sdiv	r3, r3, ip
 80255ce:	7033      	strb	r3, [r6, #0]
 80255d0:	7873      	ldrb	r3, [r6, #1]
 80255d2:	fb00 1103 	mla	r1, r0, r3, r1
 80255d6:	78b3      	ldrb	r3, [r6, #2]
 80255d8:	fb00 2003 	mla	r0, r0, r3, r2
 80255dc:	fb91 f1fc 	sdiv	r1, r1, ip
 80255e0:	fb90 f0fc 	sdiv	r0, r0, ip
 80255e4:	7071      	strb	r1, [r6, #1]
 80255e6:	70b0      	strb	r0, [r6, #2]
 80255e8:	e75f      	b.n	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80255ea:	f111 0b01 	adds.w	fp, r1, #1
 80255ee:	f53f af5c 	bmi.w	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80255f2:	45de      	cmp	lr, fp
 80255f4:	f6ff af59 	blt.w	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80255f8:	f110 0b01 	adds.w	fp, r0, #1
 80255fc:	f53f af55 	bmi.w	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025600:	455b      	cmp	r3, fp
 8025602:	f6ff af52 	blt.w	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025606:	b21b      	sxth	r3, r3
 8025608:	9101      	str	r1, [sp, #4]
 802560a:	4631      	mov	r1, r6
 802560c:	9300      	str	r3, [sp, #0]
 802560e:	fa0f f38e 	sxth.w	r3, lr
 8025612:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025616:	e9cd c404 	strd	ip, r4, [sp, #16]
 802561a:	9a06      	ldr	r2, [sp, #24]
 802561c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802561e:	f7ff fd55 	bl	80250cc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 8025622:	e742      	b.n	80254aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025624:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025626:	142e      	asrs	r6, r5, #16
 8025628:	ea4f 4028 	mov.w	r0, r8, asr #16
 802562c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025630:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 8025634:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025638:	9a06      	ldr	r2, [sp, #24]
 802563a:	fb0b 6000 	mla	r0, fp, r0, r6
 802563e:	9e06      	ldr	r6, [sp, #24]
 8025640:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8025644:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 8025648:	8870      	ldrh	r0, [r6, #2]
 802564a:	f1be 0f00 	cmp.w	lr, #0
 802564e:	d00b      	beq.n	8025668 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025650:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8025654:	3a01      	subs	r2, #1
 8025656:	0052      	lsls	r2, r2, #1
 8025658:	3202      	adds	r2, #2
 802565a:	eb06 0b02 	add.w	fp, r6, r2
 802565e:	5ab2      	ldrh	r2, [r6, r2]
 8025660:	920a      	str	r2, [sp, #40]	; 0x28
 8025662:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8025666:	920b      	str	r2, [sp, #44]	; 0x2c
 8025668:	ea4f 460c 	mov.w	r6, ip, lsl #16
 802566c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025670:	fb11 f20e 	smulbb	r2, r1, lr
 8025674:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025678:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 802567c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025680:	10d2      	asrs	r2, r2, #3
 8025682:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025686:	ea46 060c 	orr.w	r6, r6, ip
 802568a:	f1ce 0c10 	rsb	ip, lr, #16
 802568e:	ea4b 0000 	orr.w	r0, fp, r0
 8025692:	2cff      	cmp	r4, #255	; 0xff
 8025694:	ebac 0c01 	sub.w	ip, ip, r1
 8025698:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 802569c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80256a0:	fb01 f000 	mul.w	r0, r1, r0
 80256a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80256a6:	fb0c 0c06 	mla	ip, ip, r6, r0
 80256aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80256ac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80256b0:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 80256b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80256b6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80256ba:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80256be:	ea4b 0606 	orr.w	r6, fp, r6
 80256c2:	f420 6bfc 	bic.w	fp, r0, #2016	; 0x7e0
 80256c6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80256ca:	fb02 c606 	mla	r6, r2, r6, ip
 80256ce:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 80256d2:	ea41 0b0b 	orr.w	fp, r1, fp
 80256d6:	fb02 660b 	mla	r6, r2, fp, r6
 80256da:	ea4f 5256 	mov.w	r2, r6, lsr #21
 80256de:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80256e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80256e6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80256ea:	ea46 0602 	orr.w	r6, r6, r2
 80256ee:	b2b2      	uxth	r2, r6
 80256f0:	ea4f 2122 	mov.w	r1, r2, asr #8
 80256f4:	ea4f 00e2 	mov.w	r0, r2, asr #3
 80256f8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80256fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025700:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025704:	b2d2      	uxtb	r2, r2
 8025706:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802570a:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802570e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025712:	d10f      	bne.n	8025734 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025714:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025718:	f803 0c03 	strb.w	r0, [r3, #-3]
 802571c:	f803 1c02 	strb.w	r1, [r3, #-2]
 8025720:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025724:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025726:	3304      	adds	r3, #4
 8025728:	f10a 3aff 	add.w	sl, sl, #4294967295
 802572c:	4415      	add	r5, r2
 802572e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025730:	4490      	add	r8, r2
 8025732:	e6e3      	b.n	80254fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025734:	2c00      	cmp	r4, #0
 8025736:	d0f5      	beq.n	8025724 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025738:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 802573c:	fb12 f204 	smulbb	r2, r2, r4
 8025740:	fb14 f000 	smulbb	r0, r4, r0
 8025744:	fb14 f101 	smulbb	r1, r4, r1
 8025748:	fb04 f60e 	mul.w	r6, r4, lr
 802574c:	f106 0c01 	add.w	ip, r6, #1
 8025750:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8025754:	eb04 060e 	add.w	r6, r4, lr
 8025758:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802575c:	eba6 060c 	sub.w	r6, r6, ip
 8025760:	ebae 0c0c 	sub.w	ip, lr, ip
 8025764:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8025768:	b2f6      	uxtb	r6, r6
 802576a:	fb0c 220e 	mla	r2, ip, lr, r2
 802576e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8025772:	fb92 f2f6 	sdiv	r2, r2, r6
 8025776:	f803 2c04 	strb.w	r2, [r3, #-4]
 802577a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 802577e:	fb0c 0002 	mla	r0, ip, r2, r0
 8025782:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8025786:	fb0c 1c02 	mla	ip, ip, r2, r1
 802578a:	fb90 f0f6 	sdiv	r0, r0, r6
 802578e:	fb9c fcf6 	sdiv	ip, ip, r6
 8025792:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025796:	f803 cc02 	strb.w	ip, [r3, #-2]
 802579a:	e7c3      	b.n	8025724 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802579c:	b00f      	add	sp, #60	; 0x3c
 802579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080257a2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 80257a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257a6:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 80257aa:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80257ae:	fb08 7403 	mla	r4, r8, r3, r7
 80257b2:	f1b8 0f00 	cmp.w	r8, #0
 80257b6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80257ba:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80257be:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 80257c2:	6808      	ldr	r0, [r1, #0]
 80257c4:	f2c0 80be 	blt.w	8025944 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 80257c8:	45c2      	cmp	sl, r8
 80257ca:	f340 80bb 	ble.w	8025944 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 80257ce:	2f00      	cmp	r7, #0
 80257d0:	f2c0 80b6 	blt.w	8025940 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 80257d4:	42bb      	cmp	r3, r7
 80257d6:	f340 80b3 	ble.w	8025940 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 80257da:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 80257de:	10d5      	asrs	r5, r2, #3
 80257e0:	1214      	asrs	r4, r2, #8
 80257e2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80257e6:	00d2      	lsls	r2, r2, #3
 80257e8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80257ec:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80257f0:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 80257f4:	b2d2      	uxtb	r2, r2
 80257f6:	022c      	lsls	r4, r5, #8
 80257f8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80257fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8025800:	4314      	orrs	r4, r2
 8025802:	1c7a      	adds	r2, r7, #1
 8025804:	f100 80a1 	bmi.w	802594a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8025808:	4293      	cmp	r3, r2
 802580a:	f340 809e 	ble.w	802594a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 802580e:	2e00      	cmp	r6, #0
 8025810:	f000 809b 	beq.w	802594a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8025814:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8025818:	ea4f 252e 	mov.w	r5, lr, asr #8
 802581c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8025820:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025824:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025828:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802582c:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 8025830:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 8025834:	fa5f fe8e 	uxtb.w	lr, lr
 8025838:	022d      	lsls	r5, r5, #8
 802583a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802583e:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8025842:	ea45 050e 	orr.w	r5, r5, lr
 8025846:	f118 0801 	adds.w	r8, r8, #1
 802584a:	f100 8082 	bmi.w	8025952 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 802584e:	45c2      	cmp	sl, r8
 8025850:	dd7f      	ble.n	8025952 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8025852:	f1bc 0f00 	cmp.w	ip, #0
 8025856:	d07c      	beq.n	8025952 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8025858:	2f00      	cmp	r7, #0
 802585a:	db78      	blt.n	802594e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 802585c:	42bb      	cmp	r3, r7
 802585e:	dd76      	ble.n	802594e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8025860:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8025864:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8025868:	ea4f 222e 	mov.w	r2, lr, asr #8
 802586c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8025870:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025874:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025878:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 802587c:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8025880:	fa5f fe8e 	uxtb.w	lr, lr
 8025884:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8025888:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802588c:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8025890:	ea42 020e 	orr.w	r2, r2, lr
 8025894:	3701      	adds	r7, #1
 8025896:	d417      	bmi.n	80258c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8025898:	42bb      	cmp	r3, r7
 802589a:	dd15      	ble.n	80258c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802589c:	b1a6      	cbz	r6, 80258c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 802589e:	3301      	adds	r3, #1
 80258a0:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80258a4:	10df      	asrs	r7, r3, #3
 80258a6:	1218      	asrs	r0, r3, #8
 80258a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80258ac:	00db      	lsls	r3, r3, #3
 80258ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80258b2:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80258b6:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 80258ba:	b2db      	uxtb	r3, r3
 80258bc:	0238      	lsls	r0, r7, #8
 80258be:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80258c2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80258c6:	4318      	orrs	r0, r3
 80258c8:	b2b6      	uxth	r6, r6
 80258ca:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 80258ce:	fa1f f78c 	uxth.w	r7, ip
 80258d2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80258d6:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80258da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80258de:	fb06 fc07 	mul.w	ip, r6, r7
 80258e2:	0136      	lsls	r6, r6, #4
 80258e4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80258e8:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 80258ec:	eba6 060c 	sub.w	r6, r6, ip
 80258f0:	b2bf      	uxth	r7, r7
 80258f2:	b2b6      	uxth	r6, r6
 80258f4:	ebae 0e07 	sub.w	lr, lr, r7
 80258f8:	4373      	muls	r3, r6
 80258fa:	fa1f fe8e 	uxth.w	lr, lr
 80258fe:	4375      	muls	r5, r6
 8025900:	fb0e 3808 	mla	r8, lr, r8, r3
 8025904:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025908:	fb0e 5404 	mla	r4, lr, r4, r5
 802590c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025910:	fb0c 8803 	mla	r8, ip, r3, r8
 8025914:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025918:	fb0c 4000 	mla	r0, ip, r0, r4
 802591c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025920:	fb07 8303 	mla	r3, r7, r3, r8
 8025924:	fb07 0002 	mla	r0, r7, r2, r0
 8025928:	0a1b      	lsrs	r3, r3, #8
 802592a:	0a00      	lsrs	r0, r0, #8
 802592c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025930:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025934:	4318      	orrs	r0, r3
 8025936:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802593a:	6008      	str	r0, [r1, #0]
 802593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025940:	4604      	mov	r4, r0
 8025942:	e75e      	b.n	8025802 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8025944:	4605      	mov	r5, r0
 8025946:	4604      	mov	r4, r0
 8025948:	e77d      	b.n	8025846 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 802594a:	4605      	mov	r5, r0
 802594c:	e77b      	b.n	8025846 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 802594e:	4602      	mov	r2, r0
 8025950:	e7a0      	b.n	8025894 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8025952:	4602      	mov	r2, r0
 8025954:	e7b8      	b.n	80258c8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08025956 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802595a:	b08f      	sub	sp, #60	; 0x3c
 802595c:	461d      	mov	r5, r3
 802595e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025960:	9107      	str	r1, [sp, #28]
 8025962:	920c      	str	r2, [sp, #48]	; 0x30
 8025964:	6859      	ldr	r1, [r3, #4]
 8025966:	681b      	ldr	r3, [r3, #0]
 8025968:	900d      	str	r0, [sp, #52]	; 0x34
 802596a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802596e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8025972:	fb01 2707 	mla	r7, r1, r7, r2
 8025976:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802597a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802597c:	f8d3 8000 	ldr.w	r8, [r3]
 8025980:	9b07      	ldr	r3, [sp, #28]
 8025982:	2b00      	cmp	r3, #0
 8025984:	dc03      	bgt.n	802598e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8025986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025988:	2b00      	cmp	r3, #0
 802598a:	f340 81aa 	ble.w	8025ce2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802598e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025990:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025994:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025998:	1e48      	subs	r0, r1, #1
 802599a:	f102 3cff 	add.w	ip, r2, #4294967295
 802599e:	2d00      	cmp	r5, #0
 80259a0:	f340 80b0 	ble.w	8025b04 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80259a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80259a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80259ac:	d406      	bmi.n	80259bc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80259ae:	4586      	cmp	lr, r0
 80259b0:	da04      	bge.n	80259bc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	db02      	blt.n	80259bc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80259b6:	4563      	cmp	r3, ip
 80259b8:	f2c0 80a5 	blt.w	8025b06 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80259bc:	f11e 0e01 	adds.w	lr, lr, #1
 80259c0:	f100 8099 	bmi.w	8025af6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80259c4:	4571      	cmp	r1, lr
 80259c6:	f2c0 8096 	blt.w	8025af6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80259ca:	3301      	adds	r3, #1
 80259cc:	f100 8093 	bmi.w	8025af6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80259d0:	429a      	cmp	r2, r3
 80259d2:	f2c0 8090 	blt.w	8025af6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80259d6:	46aa      	mov	sl, r5
 80259d8:	46b9      	mov	r9, r7
 80259da:	f1ba 0f00 	cmp.w	sl, #0
 80259de:	f340 80ac 	ble.w	8025b3a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80259e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259e4:	1421      	asrs	r1, r4, #16
 80259e6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80259ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80259ee:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80259f2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80259f6:	f100 80e4 	bmi.w	8025bc2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80259fa:	f10e 3bff 	add.w	fp, lr, #4294967295
 80259fe:	4559      	cmp	r1, fp
 8025a00:	f280 80df 	bge.w	8025bc2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025a04:	2800      	cmp	r0, #0
 8025a06:	f2c0 80dc 	blt.w	8025bc2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025a0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8025a0e:	4558      	cmp	r0, fp
 8025a10:	f280 80d7 	bge.w	8025bc2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025a14:	fa0f fe8e 	sxth.w	lr, lr
 8025a18:	fb00 110e 	mla	r1, r0, lr, r1
 8025a1c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025a20:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025a24:	8841      	ldrh	r1, [r0, #2]
 8025a26:	f1bc 0f00 	cmp.w	ip, #0
 8025a2a:	d00b      	beq.n	8025a44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8025a2c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025a30:	3b01      	subs	r3, #1
 8025a32:	005b      	lsls	r3, r3, #1
 8025a34:	3302      	adds	r3, #2
 8025a36:	eb00 0e03 	add.w	lr, r0, r3
 8025a3a:	5ac3      	ldrh	r3, [r0, r3]
 8025a3c:	9308      	str	r3, [sp, #32]
 8025a3e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025a42:	9309      	str	r3, [sp, #36]	; 0x24
 8025a44:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025a48:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025a4c:	fb12 f30c 	smulbb	r3, r2, ip
 8025a50:	f1cc 0e10 	rsb	lr, ip, #16
 8025a54:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025a58:	10db      	asrs	r3, r3, #3
 8025a5a:	ebae 0e02 	sub.w	lr, lr, r2
 8025a5e:	ea40 000b 	orr.w	r0, r0, fp
 8025a62:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025a66:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025a6a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025a6e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025a72:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025a76:	ea4b 0101 	orr.w	r1, fp, r1
 8025a7a:	4351      	muls	r1, r2
 8025a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a7e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025a82:	0410      	lsls	r0, r2, #16
 8025a84:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025a88:	9908      	ldr	r1, [sp, #32]
 8025a8a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025a8e:	4310      	orrs	r0, r2
 8025a90:	9a08      	ldr	r2, [sp, #32]
 8025a92:	0412      	lsls	r2, r2, #16
 8025a94:	fb03 e000 	mla	r0, r3, r0, lr
 8025a98:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025a9c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025aa0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025aa4:	ea42 020e 	orr.w	r2, r2, lr
 8025aa8:	fb03 0302 	mla	r3, r3, r2, r0
 8025aac:	0d59      	lsrs	r1, r3, #21
 8025aae:	095b      	lsrs	r3, r3, #5
 8025ab0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ab4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025ab8:	430b      	orrs	r3, r1
 8025aba:	b299      	uxth	r1, r3
 8025abc:	10ca      	asrs	r2, r1, #3
 8025abe:	1208      	asrs	r0, r1, #8
 8025ac0:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8025ac4:	00c9      	lsls	r1, r1, #3
 8025ac6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025aca:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8025ace:	b2c9      	uxtb	r1, r1
 8025ad0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025ad4:	021b      	lsls	r3, r3, #8
 8025ad6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8025ade:	430b      	orrs	r3, r1
 8025ae0:	f8c9 3000 	str.w	r3, [r9]
 8025ae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025ae6:	f109 0904 	add.w	r9, r9, #4
 8025aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025aee:	441c      	add	r4, r3
 8025af0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025af2:	441e      	add	r6, r3
 8025af4:	e771      	b.n	80259da <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025af8:	3d01      	subs	r5, #1
 8025afa:	3704      	adds	r7, #4
 8025afc:	441c      	add	r4, r3
 8025afe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025b00:	441e      	add	r6, r3
 8025b02:	e74c      	b.n	802599e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025b04:	d01d      	beq.n	8025b42 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025b06:	1e6b      	subs	r3, r5, #1
 8025b08:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025b0a:	fb00 4003 	mla	r0, r0, r3, r4
 8025b0e:	1400      	asrs	r0, r0, #16
 8025b10:	f53f af61 	bmi.w	80259d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025b14:	3901      	subs	r1, #1
 8025b16:	4288      	cmp	r0, r1
 8025b18:	f6bf af5d 	bge.w	80259d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025b1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025b1e:	fb01 6303 	mla	r3, r1, r3, r6
 8025b22:	141b      	asrs	r3, r3, #16
 8025b24:	f53f af57 	bmi.w	80259d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025b28:	3a01      	subs	r2, #1
 8025b2a:	4293      	cmp	r3, r2
 8025b2c:	f6bf af53 	bge.w	80259d6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025b30:	46a9      	mov	r9, r5
 8025b32:	46ba      	mov	sl, r7
 8025b34:	f1b9 0f00 	cmp.w	r9, #0
 8025b38:	dc5b      	bgt.n	8025bf2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025b3a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025b3e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8025b42:	9b07      	ldr	r3, [sp, #28]
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	f340 80cc 	ble.w	8025ce2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8025b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025b50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b58:	eef0 6a62 	vmov.f32	s13, s5
 8025b5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b60:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b68:	ee16 4a90 	vmov	r4, s13
 8025b6c:	eef0 6a43 	vmov.f32	s13, s6
 8025b70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b74:	ee16 6a90 	vmov	r6, s13
 8025b78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025b7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025b80:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025b84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025b88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025b8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025b90:	ee12 2a90 	vmov	r2, s5
 8025b94:	eef0 2a47 	vmov.f32	s5, s14
 8025b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b9c:	ee13 2a10 	vmov	r2, s6
 8025ba0:	931b      	str	r3, [sp, #108]	; 0x6c
 8025ba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025ba4:	eeb0 3a67 	vmov.f32	s6, s15
 8025ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bac:	931c      	str	r3, [sp, #112]	; 0x70
 8025bae:	9b07      	ldr	r3, [sp, #28]
 8025bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025bb2:	3b01      	subs	r3, #1
 8025bb4:	9307      	str	r3, [sp, #28]
 8025bb6:	bf08      	it	eq
 8025bb8:	4615      	moveq	r5, r2
 8025bba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025bbc:	bf18      	it	ne
 8025bbe:	461d      	movne	r5, r3
 8025bc0:	e6de      	b.n	8025980 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8025bc2:	f111 0b01 	adds.w	fp, r1, #1
 8025bc6:	d48d      	bmi.n	8025ae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025bc8:	45de      	cmp	lr, fp
 8025bca:	db8b      	blt.n	8025ae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025bcc:	f110 0b01 	adds.w	fp, r0, #1
 8025bd0:	d488      	bmi.n	8025ae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025bd2:	455b      	cmp	r3, fp
 8025bd4:	db86      	blt.n	8025ae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025bd6:	b21b      	sxth	r3, r3
 8025bd8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8025bdc:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8025be0:	9300      	str	r3, [sp, #0]
 8025be2:	4642      	mov	r2, r8
 8025be4:	fa0f f38e 	sxth.w	r3, lr
 8025be8:	4649      	mov	r1, r9
 8025bea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025bec:	f7ff fdd9 	bl	80257a2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8025bf0:	e778      	b.n	8025ae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8025bf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025bf4:	1420      	asrs	r0, r4, #16
 8025bf6:	1431      	asrs	r1, r6, #16
 8025bf8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025bfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025c00:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025c04:	fb03 0101 	mla	r1, r3, r1, r0
 8025c08:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025c0c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8025c10:	8841      	ldrh	r1, [r0, #2]
 8025c12:	f1be 0f00 	cmp.w	lr, #0
 8025c16:	d00b      	beq.n	8025c30 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025c18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025c1c:	3b01      	subs	r3, #1
 8025c1e:	005b      	lsls	r3, r3, #1
 8025c20:	3302      	adds	r3, #2
 8025c22:	eb00 0b03 	add.w	fp, r0, r3
 8025c26:	5ac3      	ldrh	r3, [r0, r3]
 8025c28:	930a      	str	r3, [sp, #40]	; 0x28
 8025c2a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c30:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8025c34:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025c38:	fb12 f30e 	smulbb	r3, r2, lr
 8025c3c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025c40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025c44:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025c48:	10db      	asrs	r3, r3, #3
 8025c4a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c4e:	ea40 000c 	orr.w	r0, r0, ip
 8025c52:	f1ce 0c10 	rsb	ip, lr, #16
 8025c56:	ea4b 0101 	orr.w	r1, fp, r1
 8025c5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8025c5e:	ebac 0c02 	sub.w	ip, ip, r2
 8025c62:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025c66:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025c6a:	4351      	muls	r1, r2
 8025c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025c6e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8025c72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025c74:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025c78:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8025c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025c7e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c82:	0412      	lsls	r2, r2, #16
 8025c84:	ea4b 0000 	orr.w	r0, fp, r0
 8025c88:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8025c8c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025c90:	fb03 c000 	mla	r0, r3, r0, ip
 8025c94:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025c98:	ea42 0b0b 	orr.w	fp, r2, fp
 8025c9c:	fb03 000b 	mla	r0, r3, fp, r0
 8025ca0:	0d42      	lsrs	r2, r0, #21
 8025ca2:	0940      	lsrs	r0, r0, #5
 8025ca4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025ca8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025cac:	4310      	orrs	r0, r2
 8025cae:	b282      	uxth	r2, r0
 8025cb0:	10d3      	asrs	r3, r2, #3
 8025cb2:	1211      	asrs	r1, r2, #8
 8025cb4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025cb8:	00d2      	lsls	r2, r2, #3
 8025cba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025cbe:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8025cc2:	b2d2      	uxtb	r2, r2
 8025cc4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025cc8:	021b      	lsls	r3, r3, #8
 8025cca:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8025cd2:	431a      	orrs	r2, r3
 8025cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025cd6:	441c      	add	r4, r3
 8025cd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025cda:	f84a 2b04 	str.w	r2, [sl], #4
 8025cde:	441e      	add	r6, r3
 8025ce0:	e728      	b.n	8025b34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025ce2:	b00f      	add	sp, #60	; 0x3c
 8025ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ce8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8025ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cec:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8025cf0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8025cf4:	fb09 6c03 	mla	ip, r9, r3, r6
 8025cf8:	f1b9 0f00 	cmp.w	r9, #0
 8025cfc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8025d00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025d04:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8025d08:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8025d0c:	eb02 080c 	add.w	r8, r2, ip
 8025d10:	6808      	ldr	r0, [r1, #0]
 8025d12:	f2c0 80a0 	blt.w	8025e56 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8025d16:	45ca      	cmp	sl, r9
 8025d18:	f340 809d 	ble.w	8025e56 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8025d1c:	2e00      	cmp	r6, #0
 8025d1e:	f2c0 8098 	blt.w	8025e52 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8025d22:	42b3      	cmp	r3, r6
 8025d24:	f340 8095 	ble.w	8025e52 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8025d28:	f898 7002 	ldrb.w	r7, [r8, #2]
 8025d2c:	f898 b001 	ldrb.w	fp, [r8, #1]
 8025d30:	043f      	lsls	r7, r7, #16
 8025d32:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025d36:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8025d3a:	4317      	orrs	r7, r2
 8025d3c:	1c72      	adds	r2, r6, #1
 8025d3e:	f100 808b 	bmi.w	8025e58 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8025d42:	4293      	cmp	r3, r2
 8025d44:	f340 8088 	ble.w	8025e58 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8025d48:	2c00      	cmp	r4, #0
 8025d4a:	f000 8085 	beq.w	8025e58 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8025d4e:	f898 c005 	ldrb.w	ip, [r8, #5]
 8025d52:	f898 2004 	ldrb.w	r2, [r8, #4]
 8025d56:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8025d5a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8025d5e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8025d62:	ea4c 0c02 	orr.w	ip, ip, r2
 8025d66:	f119 0901 	adds.w	r9, r9, #1
 8025d6a:	d479      	bmi.n	8025e60 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8025d6c:	45ca      	cmp	sl, r9
 8025d6e:	dd77      	ble.n	8025e60 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8025d70:	f1be 0f00 	cmp.w	lr, #0
 8025d74:	d074      	beq.n	8025e60 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8025d76:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8025d7a:	2e00      	cmp	r6, #0
 8025d7c:	eb08 090a 	add.w	r9, r8, sl
 8025d80:	db6c      	blt.n	8025e5c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8025d82:	42b3      	cmp	r3, r6
 8025d84:	dd6a      	ble.n	8025e5c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8025d86:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025d8a:	f899 b001 	ldrb.w	fp, [r9, #1]
 8025d8e:	0412      	lsls	r2, r2, #16
 8025d90:	f818 800a 	ldrb.w	r8, [r8, sl]
 8025d94:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8025d98:	ea42 0208 	orr.w	r2, r2, r8
 8025d9c:	3601      	adds	r6, #1
 8025d9e:	d40c      	bmi.n	8025dba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8025da0:	42b3      	cmp	r3, r6
 8025da2:	dd0a      	ble.n	8025dba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8025da4:	b14c      	cbz	r4, 8025dba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8025da6:	f899 0005 	ldrb.w	r0, [r9, #5]
 8025daa:	f899 3004 	ldrb.w	r3, [r9, #4]
 8025dae:	0400      	lsls	r0, r0, #16
 8025db0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8025db4:	f899 3003 	ldrb.w	r3, [r9, #3]
 8025db8:	4318      	orrs	r0, r3
 8025dba:	fa1f f38e 	uxth.w	r3, lr
 8025dbe:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8025dc2:	b2a4      	uxth	r4, r4
 8025dc4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025dc8:	2dff      	cmp	r5, #255	; 0xff
 8025dca:	fb04 f803 	mul.w	r8, r4, r3
 8025dce:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8025dd2:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8025dd6:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8025dda:	eba4 0408 	sub.w	r4, r4, r8
 8025dde:	fa1f fe83 	uxth.w	lr, r3
 8025de2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8025de6:	b2a4      	uxth	r4, r4
 8025de8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025dec:	eba9 090e 	sub.w	r9, r9, lr
 8025df0:	fb04 f303 	mul.w	r3, r4, r3
 8025df4:	fa1f f989 	uxth.w	r9, r9
 8025df8:	fb04 f40c 	mul.w	r4, r4, ip
 8025dfc:	fb09 3606 	mla	r6, r9, r6, r3
 8025e00:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025e04:	fb09 4407 	mla	r4, r9, r7, r4
 8025e08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025e0c:	fb08 6603 	mla	r6, r8, r3, r6
 8025e10:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025e14:	fb08 4000 	mla	r0, r8, r0, r4
 8025e18:	fb0e 6303 	mla	r3, lr, r3, r6
 8025e1c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8025e20:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025e24:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8025e28:	fb0e 0303 	mla	r3, lr, r3, r0
 8025e2c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8025e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e34:	ea43 0306 	orr.w	r3, r3, r6
 8025e38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8025e3c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8025e40:	b2d4      	uxtb	r4, r2
 8025e42:	b2c6      	uxtb	r6, r0
 8025e44:	d10e      	bne.n	8025e64 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8025e46:	700b      	strb	r3, [r1, #0]
 8025e48:	7048      	strb	r0, [r1, #1]
 8025e4a:	708a      	strb	r2, [r1, #2]
 8025e4c:	70cd      	strb	r5, [r1, #3]
 8025e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e52:	4607      	mov	r7, r0
 8025e54:	e772      	b.n	8025d3c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8025e56:	4607      	mov	r7, r0
 8025e58:	4684      	mov	ip, r0
 8025e5a:	e784      	b.n	8025d66 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 8025e5c:	4602      	mov	r2, r0
 8025e5e:	e79d      	b.n	8025d9c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8025e60:	4602      	mov	r2, r0
 8025e62:	e7aa      	b.n	8025dba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8025e64:	2d00      	cmp	r5, #0
 8025e66:	d0f2      	beq.n	8025e4e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8025e68:	78cf      	ldrb	r7, [r1, #3]
 8025e6a:	b2db      	uxtb	r3, r3
 8025e6c:	fb15 f606 	smulbb	r6, r5, r6
 8025e70:	fb05 f207 	mul.w	r2, r5, r7
 8025e74:	1c50      	adds	r0, r2, #1
 8025e76:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025e7a:	19ea      	adds	r2, r5, r7
 8025e7c:	1200      	asrs	r0, r0, #8
 8025e7e:	1a12      	subs	r2, r2, r0
 8025e80:	1a38      	subs	r0, r7, r0
 8025e82:	780f      	ldrb	r7, [r1, #0]
 8025e84:	b2d2      	uxtb	r2, r2
 8025e86:	4347      	muls	r7, r0
 8025e88:	70ca      	strb	r2, [r1, #3]
 8025e8a:	fb05 7303 	mla	r3, r5, r3, r7
 8025e8e:	fb15 f504 	smulbb	r5, r5, r4
 8025e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8025e96:	700b      	strb	r3, [r1, #0]
 8025e98:	784b      	ldrb	r3, [r1, #1]
 8025e9a:	fb00 6303 	mla	r3, r0, r3, r6
 8025e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8025ea2:	704b      	strb	r3, [r1, #1]
 8025ea4:	788b      	ldrb	r3, [r1, #2]
 8025ea6:	fb00 5503 	mla	r5, r0, r3, r5
 8025eaa:	fb95 f5f2 	sdiv	r5, r5, r2
 8025eae:	708d      	strb	r5, [r1, #2]
 8025eb0:	e7cd      	b.n	8025e4e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08025eb2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025eb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eb6:	b09b      	sub	sp, #108	; 0x6c
 8025eb8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8025ebc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025ebe:	9019      	str	r0, [sp, #100]	; 0x64
 8025ec0:	9307      	str	r3, [sp, #28]
 8025ec2:	6850      	ldr	r0, [r2, #4]
 8025ec4:	6812      	ldr	r2, [r2, #0]
 8025ec6:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
 8025eca:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025ece:	fb00 1303 	mla	r3, r0, r3, r1
 8025ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025ed6:	9308      	str	r3, [sp, #32]
 8025ed8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025eda:	681b      	ldr	r3, [r3, #0]
 8025edc:	9309      	str	r3, [sp, #36]	; 0x24
 8025ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	dc03      	bgt.n	8025eec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	f340 8231 	ble.w	802634e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8025eec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ef2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ef6:	1e48      	subs	r0, r1, #1
 8025ef8:	1e55      	subs	r5, r2, #1
 8025efa:	9b07      	ldr	r3, [sp, #28]
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	f340 80c3 	ble.w	8026088 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8025f02:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8025f04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025f06:	1436      	asrs	r6, r6, #16
 8025f08:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025f0c:	d406      	bmi.n	8025f1c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025f0e:	4286      	cmp	r6, r0
 8025f10:	da04      	bge.n	8025f1c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	db02      	blt.n	8025f1c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025f16:	42ab      	cmp	r3, r5
 8025f18:	f2c0 80b7 	blt.w	802608a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8025f1c:	3601      	adds	r6, #1
 8025f1e:	f100 80a4 	bmi.w	802606a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025f22:	42b1      	cmp	r1, r6
 8025f24:	f2c0 80a1 	blt.w	802606a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025f28:	3301      	adds	r3, #1
 8025f2a:	f100 809e 	bmi.w	802606a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025f2e:	429a      	cmp	r2, r3
 8025f30:	f2c0 809b 	blt.w	802606a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025f34:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8025f38:	f1bb 0f00 	cmp.w	fp, #0
 8025f3c:	f340 80c5 	ble.w	80260ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8025f40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025f42:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025f44:	1418      	asrs	r0, r3, #16
 8025f46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025f48:	68cf      	ldr	r7, [r1, #12]
 8025f4a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025f4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8025f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025f52:	1409      	asrs	r1, r1, #16
 8025f54:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025f58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f5a:	689b      	ldr	r3, [r3, #8]
 8025f5c:	f100 8127 	bmi.w	80261ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8025f60:	f103 3cff 	add.w	ip, r3, #4294967295
 8025f64:	4561      	cmp	r1, ip
 8025f66:	f280 8122 	bge.w	80261ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8025f6a:	2800      	cmp	r0, #0
 8025f6c:	f2c0 811f 	blt.w	80261ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8025f70:	f107 3cff 	add.w	ip, r7, #4294967295
 8025f74:	4560      	cmp	r0, ip
 8025f76:	f280 811a 	bge.w	80261ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8025f7a:	b21b      	sxth	r3, r3
 8025f7c:	fb00 1103 	mla	r1, r0, r3, r1
 8025f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025f82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025f86:	1847      	adds	r7, r0, r1
 8025f88:	5c40      	ldrb	r0, [r0, r1]
 8025f8a:	7879      	ldrb	r1, [r7, #1]
 8025f8c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025f90:	910c      	str	r1, [sp, #48]	; 0x30
 8025f92:	f897 9003 	ldrb.w	r9, [r7, #3]
 8025f96:	f897 8004 	ldrb.w	r8, [r7, #4]
 8025f9a:	f897 a005 	ldrb.w	sl, [r7, #5]
 8025f9e:	b1cd      	cbz	r5, 8025fd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8025fa0:	f04f 0c03 	mov.w	ip, #3
 8025fa4:	f06f 0104 	mvn.w	r1, #4
 8025fa8:	3705      	adds	r7, #5
 8025faa:	fb13 130c 	smlabb	r3, r3, ip, r1
 8025fae:	eb07 0c03 	add.w	ip, r7, r3
 8025fb2:	5cfb      	ldrb	r3, [r7, r3]
 8025fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8025fb6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025fba:	930f      	str	r3, [sp, #60]	; 0x3c
 8025fbc:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8025fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8025fc2:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8025fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8025fc8:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8025fcc:	9310      	str	r3, [sp, #64]	; 0x40
 8025fce:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8025fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8025fd4:	b292      	uxth	r2, r2
 8025fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025fd8:	b2ad      	uxth	r5, r5
 8025fda:	2cff      	cmp	r4, #255	; 0xff
 8025fdc:	fb02 f305 	mul.w	r3, r2, r5
 8025fe0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8025fe4:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 8025fe8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025fec:	eba2 0203 	sub.w	r2, r2, r3
 8025ff0:	b2ad      	uxth	r5, r5
 8025ff2:	b292      	uxth	r2, r2
 8025ff4:	eba7 0705 	sub.w	r7, r7, r5
 8025ff8:	fb02 f909 	mul.w	r9, r2, r9
 8025ffc:	b2bf      	uxth	r7, r7
 8025ffe:	fb02 f808 	mul.w	r8, r2, r8
 8026002:	fb02 fa0a 	mul.w	sl, r2, sl
 8026006:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026008:	fb07 9900 	mla	r9, r7, r0, r9
 802600c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802600e:	fb07 8801 	mla	r8, r7, r1, r8
 8026012:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026014:	fb07 aa0e 	mla	sl, r7, lr, sl
 8026018:	fb05 9900 	mla	r9, r5, r0, r9
 802601c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802601e:	fb05 8801 	mla	r8, r5, r1, r8
 8026022:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026024:	fb05 a502 	mla	r5, r5, r2, sl
 8026028:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802602a:	fb03 9900 	mla	r9, r3, r0, r9
 802602e:	fb03 8801 	mla	r8, r3, r1, r8
 8026032:	fb03 5302 	mla	r3, r3, r2, r5
 8026036:	ea4f 2929 	mov.w	r9, r9, asr #8
 802603a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802603e:	ea4f 2323 	mov.w	r3, r3, asr #8
 8026042:	f040 8088 	bne.w	8026156 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026046:	f886 9000 	strb.w	r9, [r6]
 802604a:	f886 8001 	strb.w	r8, [r6, #1]
 802604e:	70b3      	strb	r3, [r6, #2]
 8026050:	70f4      	strb	r4, [r6, #3]
 8026052:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026054:	3604      	adds	r6, #4
 8026056:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026058:	f10b 3bff 	add.w	fp, fp, #4294967295
 802605c:	4413      	add	r3, r2
 802605e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8026060:	9325      	str	r3, [sp, #148]	; 0x94
 8026062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026064:	4413      	add	r3, r2
 8026066:	9326      	str	r3, [sp, #152]	; 0x98
 8026068:	e766      	b.n	8025f38 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802606a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802606c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802606e:	4433      	add	r3, r6
 8026070:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8026072:	9325      	str	r3, [sp, #148]	; 0x94
 8026074:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026076:	4433      	add	r3, r6
 8026078:	9326      	str	r3, [sp, #152]	; 0x98
 802607a:	9b07      	ldr	r3, [sp, #28]
 802607c:	3b01      	subs	r3, #1
 802607e:	9307      	str	r3, [sp, #28]
 8026080:	9b08      	ldr	r3, [sp, #32]
 8026082:	3304      	adds	r3, #4
 8026084:	9308      	str	r3, [sp, #32]
 8026086:	e738      	b.n	8025efa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026088:	d026      	beq.n	80260d8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802608a:	9b07      	ldr	r3, [sp, #28]
 802608c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802608e:	3b01      	subs	r3, #1
 8026090:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026092:	fb00 5003 	mla	r0, r0, r3, r5
 8026096:	1400      	asrs	r0, r0, #16
 8026098:	f53f af4c 	bmi.w	8025f34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802609c:	3901      	subs	r1, #1
 802609e:	4288      	cmp	r0, r1
 80260a0:	f6bf af48 	bge.w	8025f34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80260a4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80260a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80260a8:	fb01 0303 	mla	r3, r1, r3, r0
 80260ac:	141b      	asrs	r3, r3, #16
 80260ae:	f53f af41 	bmi.w	8025f34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80260b2:	3a01      	subs	r2, #1
 80260b4:	4293      	cmp	r3, r2
 80260b6:	f6bf af3d 	bge.w	8025f34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80260ba:	9b08      	ldr	r3, [sp, #32]
 80260bc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80260c0:	1d18      	adds	r0, r3, #4
 80260c2:	f1be 0f00 	cmp.w	lr, #0
 80260c6:	f300 808e 	bgt.w	80261e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80260ca:	9b07      	ldr	r3, [sp, #28]
 80260cc:	9a08      	ldr	r2, [sp, #32]
 80260ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80260d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80260d6:	9308      	str	r3, [sp, #32]
 80260d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80260da:	2b00      	cmp	r3, #0
 80260dc:	f340 8137 	ble.w	802634e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80260e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80260e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80260e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80260ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80260ee:	eef0 6a62 	vmov.f32	s13, s5
 80260f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80260f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80260fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260fe:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026102:	eef0 6a43 	vmov.f32	s13, s6
 8026106:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802610a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802610e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026112:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026116:	ee77 2a62 	vsub.f32	s5, s14, s5
 802611a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802611e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026122:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026126:	ee12 2a90 	vmov	r2, s5
 802612a:	eef0 2a47 	vmov.f32	s5, s14
 802612e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026132:	ee13 2a10 	vmov	r2, s6
 8026136:	9327      	str	r3, [sp, #156]	; 0x9c
 8026138:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802613a:	eeb0 3a67 	vmov.f32	s6, s15
 802613e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026142:	9328      	str	r3, [sp, #160]	; 0xa0
 8026144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026148:	3b01      	subs	r3, #1
 802614a:	930a      	str	r3, [sp, #40]	; 0x28
 802614c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802614e:	bf08      	it	eq
 8026150:	4613      	moveq	r3, r2
 8026152:	9307      	str	r3, [sp, #28]
 8026154:	e6c3      	b.n	8025ede <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8026156:	2c00      	cmp	r4, #0
 8026158:	f43f af7b 	beq.w	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802615c:	78f0      	ldrb	r0, [r6, #3]
 802615e:	fa5f f989 	uxtb.w	r9, r9
 8026162:	fa5f f888 	uxtb.w	r8, r8
 8026166:	fb04 f100 	mul.w	r1, r4, r0
 802616a:	1822      	adds	r2, r4, r0
 802616c:	b2db      	uxtb	r3, r3
 802616e:	1c4d      	adds	r5, r1, #1
 8026170:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026174:	1229      	asrs	r1, r5, #8
 8026176:	1a45      	subs	r5, r0, r1
 8026178:	1a52      	subs	r2, r2, r1
 802617a:	7831      	ldrb	r1, [r6, #0]
 802617c:	b2d2      	uxtb	r2, r2
 802617e:	4369      	muls	r1, r5
 8026180:	70f2      	strb	r2, [r6, #3]
 8026182:	fb04 1909 	mla	r9, r4, r9, r1
 8026186:	7871      	ldrb	r1, [r6, #1]
 8026188:	4369      	muls	r1, r5
 802618a:	fb04 1808 	mla	r8, r4, r8, r1
 802618e:	78b1      	ldrb	r1, [r6, #2]
 8026190:	434d      	muls	r5, r1
 8026192:	fb04 5303 	mla	r3, r4, r3, r5
 8026196:	fb99 f9f2 	sdiv	r9, r9, r2
 802619a:	fb98 f8f2 	sdiv	r8, r8, r2
 802619e:	fb93 f3f2 	sdiv	r3, r3, r2
 80261a2:	f886 9000 	strb.w	r9, [r6]
 80261a6:	f886 8001 	strb.w	r8, [r6, #1]
 80261aa:	70b3      	strb	r3, [r6, #2]
 80261ac:	e751      	b.n	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261ae:	f111 0c01 	adds.w	ip, r1, #1
 80261b2:	f53f af4e 	bmi.w	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261b6:	4563      	cmp	r3, ip
 80261b8:	f6ff af4b 	blt.w	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261bc:	f110 0c01 	adds.w	ip, r0, #1
 80261c0:	f53f af47 	bmi.w	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261c4:	4567      	cmp	r7, ip
 80261c6:	f6ff af44 	blt.w	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261ca:	b23f      	sxth	r7, r7
 80261cc:	9101      	str	r1, [sp, #4]
 80261ce:	b21b      	sxth	r3, r3
 80261d0:	4631      	mov	r1, r6
 80261d2:	9700      	str	r7, [sp, #0]
 80261d4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80261d8:	e9cd 5404 	strd	r5, r4, [sp, #16]
 80261dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80261de:	9819      	ldr	r0, [sp, #100]	; 0x64
 80261e0:	f7ff fd82 	bl	8025ce8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 80261e4:	e735      	b.n	8026052 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80261e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80261e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80261ea:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80261ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80261f0:	1412      	asrs	r2, r2, #16
 80261f2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80261f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80261f8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80261fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80261fe:	141b      	asrs	r3, r3, #16
 8026200:	fb0c 2303 	mla	r3, ip, r3, r2
 8026204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026206:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802620a:	18d6      	adds	r6, r2, r3
 802620c:	5cd2      	ldrb	r2, [r2, r3]
 802620e:	7873      	ldrb	r3, [r6, #1]
 8026210:	f896 8002 	ldrb.w	r8, [r6, #2]
 8026214:	930c      	str	r3, [sp, #48]	; 0x30
 8026216:	f896 a003 	ldrb.w	sl, [r6, #3]
 802621a:	f896 9004 	ldrb.w	r9, [r6, #4]
 802621e:	f896 b005 	ldrb.w	fp, [r6, #5]
 8026222:	b1a5      	cbz	r5, 802624e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8026224:	2703      	movs	r7, #3
 8026226:	f06f 0304 	mvn.w	r3, #4
 802622a:	3605      	adds	r6, #5
 802622c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026230:	eb06 070c 	add.w	r7, r6, ip
 8026234:	f816 600c 	ldrb.w	r6, [r6, ip]
 8026238:	9613      	str	r6, [sp, #76]	; 0x4c
 802623a:	787e      	ldrb	r6, [r7, #1]
 802623c:	9615      	str	r6, [sp, #84]	; 0x54
 802623e:	78be      	ldrb	r6, [r7, #2]
 8026240:	9617      	str	r6, [sp, #92]	; 0x5c
 8026242:	78fe      	ldrb	r6, [r7, #3]
 8026244:	9614      	str	r6, [sp, #80]	; 0x50
 8026246:	793e      	ldrb	r6, [r7, #4]
 8026248:	9616      	str	r6, [sp, #88]	; 0x58
 802624a:	797e      	ldrb	r6, [r7, #5]
 802624c:	9618      	str	r6, [sp, #96]	; 0x60
 802624e:	b289      	uxth	r1, r1
 8026250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026252:	b2ad      	uxth	r5, r5
 8026254:	2cff      	cmp	r4, #255	; 0xff
 8026256:	fb01 f605 	mul.w	r6, r1, r5
 802625a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802625e:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 8026262:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 8026266:	eba1 0106 	sub.w	r1, r1, r6
 802626a:	b2ad      	uxth	r5, r5
 802626c:	b289      	uxth	r1, r1
 802626e:	eba7 0705 	sub.w	r7, r7, r5
 8026272:	fb01 f909 	mul.w	r9, r1, r9
 8026276:	b2bf      	uxth	r7, r7
 8026278:	fb01 fa0a 	mul.w	sl, r1, sl
 802627c:	fb01 fb0b 	mul.w	fp, r1, fp
 8026280:	fb07 9903 	mla	r9, r7, r3, r9
 8026284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026286:	fb07 aa02 	mla	sl, r7, r2, sl
 802628a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802628c:	fb05 9903 	mla	r9, r5, r3, r9
 8026290:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026292:	fb07 bb08 	mla	fp, r7, r8, fp
 8026296:	fb06 9903 	mla	r9, r6, r3, r9
 802629a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802629c:	fb05 aa02 	mla	sl, r5, r2, sl
 80262a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80262a2:	fb05 bb03 	mla	fp, r5, r3, fp
 80262a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80262a8:	fb06 aa02 	mla	sl, r6, r2, sl
 80262ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80262b0:	fb06 b603 	mla	r6, r6, r3, fp
 80262b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80262b8:	ea4f 2626 	mov.w	r6, r6, asr #8
 80262bc:	d113      	bne.n	80262e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80262be:	f800 ac04 	strb.w	sl, [r0, #-4]
 80262c2:	f800 9c03 	strb.w	r9, [r0, #-3]
 80262c6:	f800 6c02 	strb.w	r6, [r0, #-2]
 80262ca:	f800 4c01 	strb.w	r4, [r0, #-1]
 80262ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80262d0:	3004      	adds	r0, #4
 80262d2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80262d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80262d8:	4413      	add	r3, r2
 80262da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80262dc:	9325      	str	r3, [sp, #148]	; 0x94
 80262de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80262e0:	4413      	add	r3, r2
 80262e2:	9326      	str	r3, [sp, #152]	; 0x98
 80262e4:	e6ed      	b.n	80260c2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80262e6:	2c00      	cmp	r4, #0
 80262e8:	d0f1      	beq.n	80262ce <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80262ea:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80262ee:	fa5f fa8a 	uxtb.w	sl, sl
 80262f2:	fa5f f989 	uxtb.w	r9, r9
 80262f6:	fb04 f302 	mul.w	r3, r4, r2
 80262fa:	eb04 0c02 	add.w	ip, r4, r2
 80262fe:	b2f6      	uxtb	r6, r6
 8026300:	1c59      	adds	r1, r3, #1
 8026302:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026306:	120b      	asrs	r3, r1, #8
 8026308:	1ad1      	subs	r1, r2, r3
 802630a:	ebac 0c03 	sub.w	ip, ip, r3
 802630e:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8026312:	fa5f fc8c 	uxtb.w	ip, ip
 8026316:	434b      	muls	r3, r1
 8026318:	f800 cc01 	strb.w	ip, [r0, #-1]
 802631c:	fb04 3a0a 	mla	sl, r4, sl, r3
 8026320:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 8026324:	434b      	muls	r3, r1
 8026326:	fb04 3909 	mla	r9, r4, r9, r3
 802632a:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 802632e:	4359      	muls	r1, r3
 8026330:	fb04 1606 	mla	r6, r4, r6, r1
 8026334:	fb9a fafc 	sdiv	sl, sl, ip
 8026338:	fb99 f9fc 	sdiv	r9, r9, ip
 802633c:	fb96 f6fc 	sdiv	r6, r6, ip
 8026340:	f800 ac04 	strb.w	sl, [r0, #-4]
 8026344:	f800 9c03 	strb.w	r9, [r0, #-3]
 8026348:	f800 6c02 	strb.w	r6, [r0, #-2]
 802634c:	e7bf      	b.n	80262ce <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802634e:	b01b      	add	sp, #108	; 0x6c
 8026350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026354 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 8026354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026358:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 802635c:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8026360:	fb08 7603 	mla	r6, r8, r3, r7
 8026364:	f1b8 0f00 	cmp.w	r8, #0
 8026368:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802636c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026370:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8026374:	6808      	ldr	r0, [r1, #0]
 8026376:	eb02 0e06 	add.w	lr, r2, r6
 802637a:	f2c0 8089 	blt.w	8026490 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802637e:	45c1      	cmp	r9, r8
 8026380:	f340 8086 	ble.w	8026490 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 8026384:	2f00      	cmp	r7, #0
 8026386:	f2c0 8081 	blt.w	802648c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802638a:	42bb      	cmp	r3, r7
 802638c:	dd7e      	ble.n	802648c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802638e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8026392:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026396:	0424      	lsls	r4, r4, #16
 8026398:	5d92      	ldrb	r2, [r2, r6]
 802639a:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802639e:	4314      	orrs	r4, r2
 80263a0:	1c7a      	adds	r2, r7, #1
 80263a2:	d478      	bmi.n	8026496 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80263a4:	4293      	cmp	r3, r2
 80263a6:	dd76      	ble.n	8026496 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80263a8:	2d00      	cmp	r5, #0
 80263aa:	d074      	beq.n	8026496 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80263ac:	f89e 6005 	ldrb.w	r6, [lr, #5]
 80263b0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 80263b4:	0436      	lsls	r6, r6, #16
 80263b6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 80263ba:	f89e 2003 	ldrb.w	r2, [lr, #3]
 80263be:	4316      	orrs	r6, r2
 80263c0:	f118 0801 	adds.w	r8, r8, #1
 80263c4:	d46b      	bmi.n	802649e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80263c6:	45c1      	cmp	r9, r8
 80263c8:	dd69      	ble.n	802649e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80263ca:	f1bc 0f00 	cmp.w	ip, #0
 80263ce:	d066      	beq.n	802649e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80263d0:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 80263d4:	2f00      	cmp	r7, #0
 80263d6:	eb0e 0809 	add.w	r8, lr, r9
 80263da:	db5e      	blt.n	802649a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80263dc:	42bb      	cmp	r3, r7
 80263de:	dd5c      	ble.n	802649a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80263e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80263e4:	f898 a001 	ldrb.w	sl, [r8, #1]
 80263e8:	0412      	lsls	r2, r2, #16
 80263ea:	f81e e009 	ldrb.w	lr, [lr, r9]
 80263ee:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 80263f2:	ea42 020e 	orr.w	r2, r2, lr
 80263f6:	3701      	adds	r7, #1
 80263f8:	d40c      	bmi.n	8026414 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80263fa:	42bb      	cmp	r3, r7
 80263fc:	dd0a      	ble.n	8026414 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80263fe:	b14d      	cbz	r5, 8026414 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 8026400:	f898 0005 	ldrb.w	r0, [r8, #5]
 8026404:	f898 3004 	ldrb.w	r3, [r8, #4]
 8026408:	0400      	lsls	r0, r0, #16
 802640a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802640e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8026412:	4318      	orrs	r0, r3
 8026414:	b2ad      	uxth	r5, r5
 8026416:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802641a:	fa1f f78c 	uxth.w	r7, ip
 802641e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026422:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026426:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802642a:	fb05 fc07 	mul.w	ip, r5, r7
 802642e:	012d      	lsls	r5, r5, #4
 8026430:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026434:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8026438:	eba5 050c 	sub.w	r5, r5, ip
 802643c:	b2bf      	uxth	r7, r7
 802643e:	b2ad      	uxth	r5, r5
 8026440:	ebae 0e07 	sub.w	lr, lr, r7
 8026444:	436b      	muls	r3, r5
 8026446:	fa1f fe8e 	uxth.w	lr, lr
 802644a:	436e      	muls	r6, r5
 802644c:	fb0e 3808 	mla	r8, lr, r8, r3
 8026450:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026454:	fb0e 6404 	mla	r4, lr, r4, r6
 8026458:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802645c:	fb0c 8803 	mla	r8, ip, r3, r8
 8026460:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026464:	fb0c 4000 	mla	r0, ip, r0, r4
 8026468:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802646c:	fb07 8303 	mla	r3, r7, r3, r8
 8026470:	fb07 0002 	mla	r0, r7, r2, r0
 8026474:	0a1b      	lsrs	r3, r3, #8
 8026476:	0a00      	lsrs	r0, r0, #8
 8026478:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802647c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026480:	4318      	orrs	r0, r3
 8026482:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026486:	6008      	str	r0, [r1, #0]
 8026488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802648c:	4604      	mov	r4, r0
 802648e:	e787      	b.n	80263a0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 8026490:	4606      	mov	r6, r0
 8026492:	4604      	mov	r4, r0
 8026494:	e794      	b.n	80263c0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 8026496:	4606      	mov	r6, r0
 8026498:	e792      	b.n	80263c0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802649a:	4602      	mov	r2, r0
 802649c:	e7ab      	b.n	80263f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802649e:	4602      	mov	r2, r0
 80264a0:	e7b8      	b.n	8026414 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

080264a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264a6:	b09b      	sub	sp, #108	; 0x6c
 80264a8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80264ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80264ae:	9019      	str	r0, [sp, #100]	; 0x64
 80264b0:	9306      	str	r3, [sp, #24]
 80264b2:	6850      	ldr	r0, [r2, #4]
 80264b4:	6812      	ldr	r2, [r2, #0]
 80264b6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80264ba:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	; 0x94
 80264be:	fb00 1303 	mla	r3, r0, r3, r1
 80264c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80264c6:	9307      	str	r3, [sp, #28]
 80264c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264ca:	681b      	ldr	r3, [r3, #0]
 80264cc:	9308      	str	r3, [sp, #32]
 80264ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264d0:	2b00      	cmp	r3, #0
 80264d2:	dc03      	bgt.n	80264dc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80264d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	f340 81a6 	ble.w	8026828 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80264dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264e6:	1e48      	subs	r0, r1, #1
 80264e8:	1e55      	subs	r5, r2, #1
 80264ea:	9b06      	ldr	r3, [sp, #24]
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	f340 80b0 	ble.w	8026652 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80264f2:	1426      	asrs	r6, r4, #16
 80264f4:	ea4f 432a 	mov.w	r3, sl, asr #16
 80264f8:	d406      	bmi.n	8026508 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80264fa:	4286      	cmp	r6, r0
 80264fc:	da04      	bge.n	8026508 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80264fe:	2b00      	cmp	r3, #0
 8026500:	db02      	blt.n	8026508 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026502:	42ab      	cmp	r3, r5
 8026504:	f2c0 80a6 	blt.w	8026654 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8026508:	3601      	adds	r6, #1
 802650a:	f100 8097 	bmi.w	802663c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802650e:	42b1      	cmp	r1, r6
 8026510:	f2c0 8094 	blt.w	802663c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026514:	3301      	adds	r3, #1
 8026516:	f100 8091 	bmi.w	802663c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802651a:	429a      	cmp	r2, r3
 802651c:	f2c0 808e 	blt.w	802663c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026520:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8026524:	f1bb 0f00 	cmp.w	fp, #0
 8026528:	f340 80af 	ble.w	802668a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802652c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802652e:	ea4f 452a 	mov.w	r5, sl, asr #16
 8026532:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026534:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026538:	68c7      	ldr	r7, [r0, #12]
 802653a:	1420      	asrs	r0, r4, #16
 802653c:	f3ca 3103 	ubfx	r1, sl, #12, #4
 8026540:	689b      	ldr	r3, [r3, #8]
 8026542:	f100 80e8 	bmi.w	8026716 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026546:	f103 3cff 	add.w	ip, r3, #4294967295
 802654a:	4560      	cmp	r0, ip
 802654c:	f280 80e3 	bge.w	8026716 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026550:	2d00      	cmp	r5, #0
 8026552:	f2c0 80e0 	blt.w	8026716 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026556:	f107 3cff 	add.w	ip, r7, #4294967295
 802655a:	4565      	cmp	r5, ip
 802655c:	f280 80db 	bge.w	8026716 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026560:	b21b      	sxth	r3, r3
 8026562:	fb05 0003 	mla	r0, r5, r3, r0
 8026566:	9d08      	ldr	r5, [sp, #32]
 8026568:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802656c:	182f      	adds	r7, r5, r0
 802656e:	5c28      	ldrb	r0, [r5, r0]
 8026570:	900b      	str	r0, [sp, #44]	; 0x2c
 8026572:	7978      	ldrb	r0, [r7, #5]
 8026574:	787d      	ldrb	r5, [r7, #1]
 8026576:	f897 e002 	ldrb.w	lr, [r7, #2]
 802657a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802657e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026582:	900c      	str	r0, [sp, #48]	; 0x30
 8026584:	b1c1      	cbz	r1, 80265b8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026586:	f06f 0c04 	mvn.w	ip, #4
 802658a:	2003      	movs	r0, #3
 802658c:	3705      	adds	r7, #5
 802658e:	fb13 c300 	smlabb	r3, r3, r0, ip
 8026592:	eb07 0c03 	add.w	ip, r7, r3
 8026596:	5cfb      	ldrb	r3, [r7, r3]
 8026598:	930d      	str	r3, [sp, #52]	; 0x34
 802659a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802659e:	930f      	str	r3, [sp, #60]	; 0x3c
 80265a0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80265a4:	9311      	str	r3, [sp, #68]	; 0x44
 80265a6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80265aa:	930e      	str	r3, [sp, #56]	; 0x38
 80265ac:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80265b0:	9310      	str	r3, [sp, #64]	; 0x40
 80265b2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80265b6:	9312      	str	r3, [sp, #72]	; 0x48
 80265b8:	b292      	uxth	r2, r2
 80265ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80265bc:	b289      	uxth	r1, r1
 80265be:	fb02 f301 	mul.w	r3, r2, r1
 80265c2:	0112      	lsls	r2, r2, #4
 80265c4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80265c8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80265cc:	1ad2      	subs	r2, r2, r3
 80265ce:	b289      	uxth	r1, r1
 80265d0:	b292      	uxth	r2, r2
 80265d2:	1a7f      	subs	r7, r7, r1
 80265d4:	fb02 f909 	mul.w	r9, r2, r9
 80265d8:	b2bf      	uxth	r7, r7
 80265da:	fb02 f808 	mul.w	r8, r2, r8
 80265de:	fb07 9900 	mla	r9, r7, r0, r9
 80265e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80265e4:	fb07 8805 	mla	r8, r7, r5, r8
 80265e8:	fb01 9900 	mla	r9, r1, r0, r9
 80265ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80265ee:	fb03 9900 	mla	r9, r3, r0, r9
 80265f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80265f4:	fb01 8800 	mla	r8, r1, r0, r8
 80265f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80265fa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80265fe:	fb03 8800 	mla	r8, r3, r0, r8
 8026602:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026604:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026608:	4342      	muls	r2, r0
 802660a:	ea49 0908 	orr.w	r9, r9, r8
 802660e:	fb07 280e 	mla	r8, r7, lr, r2
 8026612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026614:	fb01 8802 	mla	r8, r1, r2, r8
 8026618:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802661a:	fb03 8802 	mla	r8, r3, r2, r8
 802661e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8026622:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8026626:	ea49 0308 	orr.w	r3, r9, r8
 802662a:	6033      	str	r3, [r6, #0]
 802662c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802662e:	3604      	adds	r6, #4
 8026630:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026634:	441c      	add	r4, r3
 8026636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026638:	449a      	add	sl, r3
 802663a:	e773      	b.n	8026524 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802663c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802663e:	441c      	add	r4, r3
 8026640:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026642:	449a      	add	sl, r3
 8026644:	9b06      	ldr	r3, [sp, #24]
 8026646:	3b01      	subs	r3, #1
 8026648:	9306      	str	r3, [sp, #24]
 802664a:	9b07      	ldr	r3, [sp, #28]
 802664c:	3304      	adds	r3, #4
 802664e:	9307      	str	r3, [sp, #28]
 8026650:	e74b      	b.n	80264ea <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026652:	d021      	beq.n	8026698 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026654:	9b06      	ldr	r3, [sp, #24]
 8026656:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026658:	3b01      	subs	r3, #1
 802665a:	fb00 4003 	mla	r0, r0, r3, r4
 802665e:	1400      	asrs	r0, r0, #16
 8026660:	f53f af5e 	bmi.w	8026520 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026664:	3901      	subs	r1, #1
 8026666:	4288      	cmp	r0, r1
 8026668:	f6bf af5a 	bge.w	8026520 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802666c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802666e:	fb01 a303 	mla	r3, r1, r3, sl
 8026672:	141b      	asrs	r3, r3, #16
 8026674:	f53f af54 	bmi.w	8026520 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026678:	3a01      	subs	r2, #1
 802667a:	4293      	cmp	r3, r2
 802667c:	f6bf af50 	bge.w	8026520 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026680:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8026684:	f1bc 0f00 	cmp.w	ip, #0
 8026688:	dc5c      	bgt.n	8026744 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802668a:	9b06      	ldr	r3, [sp, #24]
 802668c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026690:	9b07      	ldr	r3, [sp, #28]
 8026692:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8026696:	9307      	str	r3, [sp, #28]
 8026698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802669a:	2b00      	cmp	r3, #0
 802669c:	f340 80c4 	ble.w	8026828 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80266a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266ae:	eef0 6a62 	vmov.f32	s13, s5
 80266b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266be:	ee16 4a90 	vmov	r4, s13
 80266c2:	eef0 6a43 	vmov.f32	s13, s6
 80266c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266ca:	ee16 aa90 	vmov	sl, s13
 80266ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80266d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80266d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80266da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80266de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80266e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80266e6:	ee12 2a90 	vmov	r2, s5
 80266ea:	eef0 2a47 	vmov.f32	s5, s14
 80266ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80266f2:	ee13 2a10 	vmov	r2, s6
 80266f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80266f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266fa:	eeb0 3a67 	vmov.f32	s6, s15
 80266fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026702:	9328      	str	r3, [sp, #160]	; 0xa0
 8026704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026708:	3b01      	subs	r3, #1
 802670a:	9309      	str	r3, [sp, #36]	; 0x24
 802670c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802670e:	bf08      	it	eq
 8026710:	4613      	moveq	r3, r2
 8026712:	9306      	str	r3, [sp, #24]
 8026714:	e6db      	b.n	80264ce <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8026716:	f110 0c01 	adds.w	ip, r0, #1
 802671a:	d487      	bmi.n	802662c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802671c:	4563      	cmp	r3, ip
 802671e:	db85      	blt.n	802662c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026720:	f115 0c01 	adds.w	ip, r5, #1
 8026724:	d482      	bmi.n	802662c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026726:	4567      	cmp	r7, ip
 8026728:	db80      	blt.n	802662c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802672a:	b23f      	sxth	r7, r7
 802672c:	b21b      	sxth	r3, r3
 802672e:	9700      	str	r7, [sp, #0]
 8026730:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8026734:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8026738:	9a08      	ldr	r2, [sp, #32]
 802673a:	4631      	mov	r1, r6
 802673c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802673e:	f7ff fe09 	bl	8026354 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 8026742:	e773      	b.n	802662c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026744:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026746:	1420      	asrs	r0, r4, #16
 8026748:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802674c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8026750:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8026754:	ea4f 412a 	mov.w	r1, sl, asr #16
 8026758:	930b      	str	r3, [sp, #44]	; 0x2c
 802675a:	fb07 0101 	mla	r1, r7, r1, r0
 802675e:	9808      	ldr	r0, [sp, #32]
 8026760:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026764:	1845      	adds	r5, r0, r1
 8026766:	5c41      	ldrb	r1, [r0, r1]
 8026768:	78ae      	ldrb	r6, [r5, #2]
 802676a:	7868      	ldrb	r0, [r5, #1]
 802676c:	960c      	str	r6, [sp, #48]	; 0x30
 802676e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8026772:	f895 8004 	ldrb.w	r8, [r5, #4]
 8026776:	f895 b005 	ldrb.w	fp, [r5, #5]
 802677a:	b192      	cbz	r2, 80267a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802677c:	2603      	movs	r6, #3
 802677e:	f06f 0304 	mvn.w	r3, #4
 8026782:	3505      	adds	r5, #5
 8026784:	fb17 3706 	smlabb	r7, r7, r6, r3
 8026788:	19ee      	adds	r6, r5, r7
 802678a:	5ded      	ldrb	r5, [r5, r7]
 802678c:	9513      	str	r5, [sp, #76]	; 0x4c
 802678e:	7875      	ldrb	r5, [r6, #1]
 8026790:	9515      	str	r5, [sp, #84]	; 0x54
 8026792:	78b5      	ldrb	r5, [r6, #2]
 8026794:	9517      	str	r5, [sp, #92]	; 0x5c
 8026796:	78f5      	ldrb	r5, [r6, #3]
 8026798:	9514      	str	r5, [sp, #80]	; 0x50
 802679a:	7935      	ldrb	r5, [r6, #4]
 802679c:	9516      	str	r5, [sp, #88]	; 0x58
 802679e:	7975      	ldrb	r5, [r6, #5]
 80267a0:	9518      	str	r5, [sp, #96]	; 0x60
 80267a2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80267a6:	b292      	uxth	r2, r2
 80267a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80267ac:	fb03 f502 	mul.w	r5, r3, r2
 80267b0:	011b      	lsls	r3, r3, #4
 80267b2:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80267b6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80267ba:	1b5b      	subs	r3, r3, r5
 80267bc:	b292      	uxth	r2, r2
 80267be:	b29b      	uxth	r3, r3
 80267c0:	1ab6      	subs	r6, r6, r2
 80267c2:	fb03 f909 	mul.w	r9, r3, r9
 80267c6:	b2b6      	uxth	r6, r6
 80267c8:	fb03 f808 	mul.w	r8, r3, r8
 80267cc:	fb03 fb0b 	mul.w	fp, r3, fp
 80267d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80267d2:	fb06 9901 	mla	r9, r6, r1, r9
 80267d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80267d8:	fb06 8800 	mla	r8, r6, r0, r8
 80267dc:	fb02 9901 	mla	r9, r2, r1, r9
 80267e0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80267e2:	fb06 bb03 	mla	fp, r6, r3, fp
 80267e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80267e8:	fb05 9901 	mla	r9, r5, r1, r9
 80267ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80267ee:	fb02 bb03 	mla	fp, r2, r3, fp
 80267f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80267f4:	fb02 8801 	mla	r8, r2, r1, r8
 80267f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80267fa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80267fe:	fb05 8801 	mla	r8, r5, r1, r8
 8026802:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026806:	ea49 0908 	orr.w	r9, r9, r8
 802680a:	fb05 b803 	mla	r8, r5, r3, fp
 802680e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026810:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8026814:	441c      	add	r4, r3
 8026816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026818:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 802681c:	449a      	add	sl, r3
 802681e:	ea49 0508 	orr.w	r5, r9, r8
 8026822:	f84e 5b04 	str.w	r5, [lr], #4
 8026826:	e72d      	b.n	8026684 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026828:	b01b      	add	sp, #108	; 0x6c
 802682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802682e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 802682e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026832:	b085      	sub	sp, #20
 8026834:	6808      	ldr	r0, [r1, #0]
 8026836:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	; 0x3c
 802683a:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 802683e:	fb08 6403 	mla	r4, r8, r3, r6
 8026842:	f1b8 0f00 	cmp.w	r8, #0
 8026846:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802684a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 802684e:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 8026852:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8026856:	f2c0 80fc 	blt.w	8026a52 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802685a:	45c2      	cmp	sl, r8
 802685c:	f340 80f9 	ble.w	8026a52 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8026860:	2e00      	cmp	r6, #0
 8026862:	f2c0 80f4 	blt.w	8026a4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8026866:	42b3      	cmp	r3, r6
 8026868:	f340 80f1 	ble.w	8026a4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802686c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8026870:	1c72      	adds	r2, r6, #1
 8026872:	f100 80ef 	bmi.w	8026a54 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8026876:	4293      	cmp	r3, r2
 8026878:	f340 80ec 	ble.w	8026a54 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802687c:	f1bc 0f00 	cmp.w	ip, #0
 8026880:	f000 80e8 	beq.w	8026a54 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8026884:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8026888:	f118 0801 	adds.w	r8, r8, #1
 802688c:	f100 80e6 	bmi.w	8026a5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8026890:	45c2      	cmp	sl, r8
 8026892:	f340 80e3 	ble.w	8026a5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8026896:	f1be 0f00 	cmp.w	lr, #0
 802689a:	f000 80df 	beq.w	8026a5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802689e:	2e00      	cmp	r6, #0
 80268a0:	f2c0 80da 	blt.w	8026a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 80268a4:	42b3      	cmp	r3, r6
 80268a6:	f340 80d7 	ble.w	8026a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 80268aa:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 80268ae:	3601      	adds	r6, #1
 80268b0:	d407      	bmi.n	80268c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 80268b2:	42b3      	cmp	r3, r6
 80268b4:	dd05      	ble.n	80268c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 80268b6:	f1bc 0f00 	cmp.w	ip, #0
 80268ba:	d002      	beq.n	80268c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 80268bc:	3301      	adds	r3, #1
 80268be:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 80268c2:	fa1f fc8c 	uxth.w	ip, ip
 80268c6:	fa1f f38e 	uxth.w	r3, lr
 80268ca:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80268ce:	fb03 fe0c 	mul.w	lr, r3, ip
 80268d2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80268d6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80268da:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 80268de:	ebac 060e 	sub.w	r6, ip, lr
 80268e2:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 80268e6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80268ea:	b29b      	uxth	r3, r3
 80268ec:	b2b6      	uxth	r6, r6
 80268ee:	ebac 0c03 	sub.w	ip, ip, r3
 80268f2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80268f6:	9601      	str	r6, [sp, #4]
 80268f8:	fa1f f68c 	uxth.w	r6, ip
 80268fc:	9602      	str	r6, [sp, #8]
 80268fe:	9e01      	ldr	r6, [sp, #4]
 8026900:	fb06 fc0a 	mul.w	ip, r6, sl
 8026904:	9e02      	ldr	r6, [sp, #8]
 8026906:	fb06 cc0b 	mla	ip, r6, fp, ip
 802690a:	fb03 cc09 	mla	ip, r3, r9, ip
 802690e:	fb0e cc08 	mla	ip, lr, r8, ip
 8026912:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8026916:	9603      	str	r6, [sp, #12]
 8026918:	2e00      	cmp	r6, #0
 802691a:	f000 8095 	beq.w	8026a48 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802691e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026922:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026926:	fb0b fc0c 	mul.w	ip, fp, ip
 802692a:	fb0b f505 	mul.w	r5, fp, r5
 802692e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026932:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026936:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802693a:	44dc      	add	ip, fp
 802693c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026940:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8026944:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026948:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802694c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026950:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026954:	fb0a fc0c 	mul.w	ip, sl, ip
 8026958:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802695c:	fb0a fa04 	mul.w	sl, sl, r4
 8026960:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026964:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026968:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802696c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026970:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026974:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8026978:	4465      	add	r5, ip
 802697a:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 802697e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026986:	fb09 fc0c 	mul.w	ip, r9, ip
 802698a:	0a2d      	lsrs	r5, r5, #8
 802698c:	fb09 f902 	mul.w	r9, r9, r2
 8026990:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026994:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8026998:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802699c:	f509 7280 	add.w	r2, r9, #256	; 0x100
 80269a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80269a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80269a8:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80269ac:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 80269b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80269b4:	4464      	add	r4, ip
 80269b6:	fb08 f202 	mul.w	r2, r8, r2
 80269ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80269be:	fb08 f800 	mul.w	r8, r8, r0
 80269c2:	0a24      	lsrs	r4, r4, #8
 80269c4:	0a10      	lsrs	r0, r2, #8
 80269c6:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80269ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80269ce:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80269d2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80269d6:	4402      	add	r2, r0
 80269d8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80269dc:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80269e0:	9801      	ldr	r0, [sp, #4]
 80269e2:	0a12      	lsrs	r2, r2, #8
 80269e4:	4345      	muls	r5, r0
 80269e6:	9802      	ldr	r0, [sp, #8]
 80269e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80269ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80269f0:	fb06 5500 	mla	r5, r6, r0, r5
 80269f4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80269f8:	fb02 520e 	mla	r2, r2, lr, r5
 80269fc:	fb04 2403 	mla	r4, r4, r3, r2
 8026a00:	9a01      	ldr	r2, [sp, #4]
 8026a02:	fb02 f60a 	mul.w	r6, r2, sl
 8026a06:	0a24      	lsrs	r4, r4, #8
 8026a08:	9a03      	ldr	r2, [sp, #12]
 8026a0a:	fb00 660b 	mla	r6, r0, fp, r6
 8026a0e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026a12:	fb07 fc02 	mul.w	ip, r7, r2
 8026a16:	fb0e 6e08 	mla	lr, lr, r8, r6
 8026a1a:	fb03 e309 	mla	r3, r3, r9, lr
 8026a1e:	0a1b      	lsrs	r3, r3, #8
 8026a20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a24:	4323      	orrs	r3, r4
 8026a26:	f10c 0401 	add.w	r4, ip, #1
 8026a2a:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8026a2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026a32:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026a36:	1224      	asrs	r4, r4, #8
 8026a38:	b2d5      	uxtb	r5, r2
 8026a3a:	2cff      	cmp	r4, #255	; 0xff
 8026a3c:	b2c6      	uxtb	r6, r0
 8026a3e:	d10f      	bne.n	8026a60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 8026a40:	700b      	strb	r3, [r1, #0]
 8026a42:	7048      	strb	r0, [r1, #1]
 8026a44:	708a      	strb	r2, [r1, #2]
 8026a46:	70cc      	strb	r4, [r1, #3]
 8026a48:	b005      	add	sp, #20
 8026a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a4e:	4605      	mov	r5, r0
 8026a50:	e70e      	b.n	8026870 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 8026a52:	4605      	mov	r5, r0
 8026a54:	4604      	mov	r4, r0
 8026a56:	e717      	b.n	8026888 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 8026a58:	4602      	mov	r2, r0
 8026a5a:	e728      	b.n	80268ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 8026a5c:	4602      	mov	r2, r0
 8026a5e:	e730      	b.n	80268c2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8026a60:	b2e2      	uxtb	r2, r4
 8026a62:	2c00      	cmp	r4, #0
 8026a64:	d0f0      	beq.n	8026a48 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8026a66:	78cc      	ldrb	r4, [r1, #3]
 8026a68:	b2db      	uxtb	r3, r3
 8026a6a:	fb17 f606 	smulbb	r6, r7, r6
 8026a6e:	fb02 fc04 	mul.w	ip, r2, r4
 8026a72:	4422      	add	r2, r4
 8026a74:	f10c 0001 	add.w	r0, ip, #1
 8026a78:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026a7c:	1200      	asrs	r0, r0, #8
 8026a7e:	1a24      	subs	r4, r4, r0
 8026a80:	1a12      	subs	r2, r2, r0
 8026a82:	7808      	ldrb	r0, [r1, #0]
 8026a84:	b2d2      	uxtb	r2, r2
 8026a86:	4360      	muls	r0, r4
 8026a88:	70ca      	strb	r2, [r1, #3]
 8026a8a:	fb07 0303 	mla	r3, r7, r3, r0
 8026a8e:	7848      	ldrb	r0, [r1, #1]
 8026a90:	fb17 f705 	smulbb	r7, r7, r5
 8026a94:	fb04 6000 	mla	r0, r4, r0, r6
 8026a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8026a9c:	2bff      	cmp	r3, #255	; 0xff
 8026a9e:	bfd6      	itet	le
 8026aa0:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8026aa4:	23ff      	movgt	r3, #255	; 0xff
 8026aa6:	b2db      	uxtble	r3, r3
 8026aa8:	fb90 f0f2 	sdiv	r0, r0, r2
 8026aac:	700b      	strb	r3, [r1, #0]
 8026aae:	28ff      	cmp	r0, #255	; 0xff
 8026ab0:	788b      	ldrb	r3, [r1, #2]
 8026ab2:	bfd4      	ite	le
 8026ab4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8026ab8:	20ff      	movgt	r0, #255	; 0xff
 8026aba:	fb04 7303 	mla	r3, r4, r3, r7
 8026abe:	bfd8      	it	le
 8026ac0:	b2c0      	uxtble	r0, r0
 8026ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8026ac6:	2bff      	cmp	r3, #255	; 0xff
 8026ac8:	7048      	strb	r0, [r1, #1]
 8026aca:	bfd6      	itet	le
 8026acc:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8026ad0:	23ff      	movgt	r3, #255	; 0xff
 8026ad2:	b2db      	uxtble	r3, r3
 8026ad4:	708b      	strb	r3, [r1, #2]
 8026ad6:	e7b7      	b.n	8026a48 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

08026ad8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026adc:	b09b      	sub	sp, #108	; 0x6c
 8026ade:	9218      	str	r2, [sp, #96]	; 0x60
 8026ae0:	9306      	str	r3, [sp, #24]
 8026ae2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026ae4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8026ae8:	9019      	str	r0, [sp, #100]	; 0x64
 8026aea:	9116      	str	r1, [sp, #88]	; 0x58
 8026aec:	6850      	ldr	r0, [r2, #4]
 8026aee:	9307      	str	r3, [sp, #28]
 8026af0:	6812      	ldr	r2, [r2, #0]
 8026af2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026af6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026afa:	fb00 1303 	mla	r3, r0, r3, r1
 8026afe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026b02:	930a      	str	r3, [sp, #40]	; 0x28
 8026b04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8026b0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026b0c:	2b00      	cmp	r3, #0
 8026b0e:	dc03      	bgt.n	8026b18 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8026b10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026b12:	2b00      	cmp	r3, #0
 8026b14:	f340 83b3 	ble.w	802727e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8026b18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b1a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b1e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026b22:	1e48      	subs	r0, r1, #1
 8026b24:	1e57      	subs	r7, r2, #1
 8026b26:	9b06      	ldr	r3, [sp, #24]
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	f340 8167 	ble.w	8026dfc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026b2e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026b32:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b36:	d406      	bmi.n	8026b46 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026b38:	4584      	cmp	ip, r0
 8026b3a:	da04      	bge.n	8026b46 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	db02      	blt.n	8026b46 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026b40:	42bb      	cmp	r3, r7
 8026b42:	f2c0 815c 	blt.w	8026dfe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8026b46:	f11c 0c01 	adds.w	ip, ip, #1
 8026b4a:	f100 814c 	bmi.w	8026de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8026b4e:	4561      	cmp	r1, ip
 8026b50:	f2c0 8149 	blt.w	8026de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8026b54:	3301      	adds	r3, #1
 8026b56:	f100 8146 	bmi.w	8026de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8026b5a:	429a      	cmp	r2, r3
 8026b5c:	f2c0 8143 	blt.w	8026de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8026b60:	9b06      	ldr	r3, [sp, #24]
 8026b62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026b64:	9317      	str	r3, [sp, #92]	; 0x5c
 8026b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026b68:	2b00      	cmp	r3, #0
 8026b6a:	f340 8165 	ble.w	8026e38 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026b6e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026b70:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026b74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b76:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026b7a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026b7e:	1422      	asrs	r2, r4, #16
 8026b80:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026b84:	689b      	ldr	r3, [r3, #8]
 8026b86:	f100 81e7 	bmi.w	8026f58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026b8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8026b8e:	4542      	cmp	r2, r8
 8026b90:	f280 81e2 	bge.w	8026f58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026b94:	f1bc 0f00 	cmp.w	ip, #0
 8026b98:	f2c0 81de 	blt.w	8026f58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026b9c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026ba0:	45c4      	cmp	ip, r8
 8026ba2:	f280 81d9 	bge.w	8026f58 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026ba6:	b21b      	sxth	r3, r3
 8026ba8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026baa:	fb0c 2203 	mla	r2, ip, r3, r2
 8026bae:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026bb2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026bb6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026bba:	2800      	cmp	r0, #0
 8026bbc:	f000 8182 	beq.w	8026ec4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026bc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026bc4:	950b      	str	r5, [sp, #44]	; 0x2c
 8026bc6:	0e2d      	lsrs	r5, r5, #24
 8026bc8:	9512      	str	r5, [sp, #72]	; 0x48
 8026bca:	b181      	cbz	r1, 8026bee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026bcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026bd0:	3b01      	subs	r3, #1
 8026bd2:	009b      	lsls	r3, r3, #2
 8026bd4:	3304      	adds	r3, #4
 8026bd6:	eb08 0c03 	add.w	ip, r8, r3
 8026bda:	f858 3003 	ldr.w	r3, [r8, r3]
 8026bde:	9308      	str	r3, [sp, #32]
 8026be0:	0e1b      	lsrs	r3, r3, #24
 8026be2:	9310      	str	r3, [sp, #64]	; 0x40
 8026be4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026be8:	930c      	str	r3, [sp, #48]	; 0x30
 8026bea:	0e1b      	lsrs	r3, r3, #24
 8026bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8026bee:	b280      	uxth	r0, r0
 8026bf0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026bf2:	b289      	uxth	r1, r1
 8026bf4:	fb00 f901 	mul.w	r9, r0, r1
 8026bf8:	0100      	lsls	r0, r0, #4
 8026bfa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026bfe:	eba0 0809 	sub.w	r8, r0, r9
 8026c02:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026c06:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026c08:	b289      	uxth	r1, r1
 8026c0a:	fa1f f888 	uxth.w	r8, r8
 8026c0e:	1a5b      	subs	r3, r3, r1
 8026c10:	fb08 f000 	mul.w	r0, r8, r0
 8026c14:	b29b      	uxth	r3, r3
 8026c16:	fb03 000e 	mla	r0, r3, lr, r0
 8026c1a:	fb01 0005 	mla	r0, r1, r5, r0
 8026c1e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026c20:	fb09 0005 	mla	r0, r9, r5, r0
 8026c24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026c28:	2800      	cmp	r0, #0
 8026c2a:	f000 80d3 	beq.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026c2e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026c32:	d01b      	beq.n	8026c6c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8026c34:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026c38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026c3c:	fb0e fa0a 	mul.w	sl, lr, sl
 8026c40:	fb0e fe02 	mul.w	lr, lr, r2
 8026c44:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026c48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026c4c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026c50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c54:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026c58:	4452      	add	r2, sl
 8026c5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c5e:	0a12      	lsrs	r2, r2, #8
 8026c60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026c64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c68:	ea42 020c 	orr.w	r2, r2, ip
 8026c6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026c6e:	2dff      	cmp	r5, #255	; 0xff
 8026c70:	d021      	beq.n	8026cb6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026c72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026c74:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026c78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026c7a:	fb05 fb0b 	mul.w	fp, r5, fp
 8026c7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026c80:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026c84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026c86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026c8e:	fb05 fa0a 	mul.w	sl, r5, sl
 8026c92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c96:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026c9a:	44de      	add	lr, fp
 8026c9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026ca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ca4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ca8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026cac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026cb0:	ea4e 050a 	orr.w	r5, lr, sl
 8026cb4:	950b      	str	r5, [sp, #44]	; 0x2c
 8026cb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026cb8:	2dff      	cmp	r5, #255	; 0xff
 8026cba:	d021      	beq.n	8026d00 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8026cbc:	9d08      	ldr	r5, [sp, #32]
 8026cbe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026cc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026cc4:	fb05 fb0b 	mul.w	fp, r5, fp
 8026cc8:	9d08      	ldr	r5, [sp, #32]
 8026cca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026cce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026cd0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026cd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026cd8:	fb05 fa0a 	mul.w	sl, r5, sl
 8026cdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ce0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026ce4:	44de      	add	lr, fp
 8026ce6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026cea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026cee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cf2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026cf6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026cfa:	ea4e 050a 	orr.w	r5, lr, sl
 8026cfe:	9508      	str	r5, [sp, #32]
 8026d00:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026d02:	2dff      	cmp	r5, #255	; 0xff
 8026d04:	d021      	beq.n	8026d4a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026d08:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026d0e:	fb05 fb0b 	mul.w	fp, r5, fp
 8026d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026d14:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026d18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026d1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026d1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d22:	fb05 fa0a 	mul.w	sl, r5, sl
 8026d26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d2a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026d2e:	44de      	add	lr, fp
 8026d30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026d34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026d44:	ea4e 050a 	orr.w	r5, lr, sl
 8026d48:	950c      	str	r5, [sp, #48]	; 0x30
 8026d4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026d4c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026d50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d54:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026d58:	9d08      	ldr	r5, [sp, #32]
 8026d5a:	fb08 fc0c 	mul.w	ip, r8, ip
 8026d5e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026d62:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026d68:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026d6c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026d70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026d72:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026d76:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026d7a:	fb08 f80e 	mul.w	r8, r8, lr
 8026d7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d82:	fb03 8202 	mla	r2, r3, r2, r8
 8026d86:	9b08      	ldr	r3, [sp, #32]
 8026d88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d8c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d92:	fb01 220a 	mla	r2, r1, sl, r2
 8026d96:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026d9a:	9b07      	ldr	r3, [sp, #28]
 8026d9c:	fb09 2901 	mla	r9, r9, r1, r2
 8026da0:	4358      	muls	r0, r3
 8026da2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026da6:	1c43      	adds	r3, r0, #1
 8026da8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026dac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026db0:	ea4c 0c09 	orr.w	ip, ip, r9
 8026db4:	1200      	asrs	r0, r0, #8
 8026db6:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8026dba:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8026dbe:	28ff      	cmp	r0, #255	; 0xff
 8026dc0:	b2d9      	uxtb	r1, r3
 8026dc2:	fa5f fe82 	uxtb.w	lr, r2
 8026dc6:	f040 8086 	bne.w	8026ed6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8026dca:	f887 c000 	strb.w	ip, [r7]
 8026dce:	707a      	strb	r2, [r7, #1]
 8026dd0:	70bb      	strb	r3, [r7, #2]
 8026dd2:	70f8      	strb	r0, [r7, #3]
 8026dd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026dd6:	3704      	adds	r7, #4
 8026dd8:	441c      	add	r4, r3
 8026dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ddc:	441e      	add	r6, r3
 8026dde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026de0:	3b01      	subs	r3, #1
 8026de2:	9317      	str	r3, [sp, #92]	; 0x5c
 8026de4:	e6bf      	b.n	8026b66 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026de6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026de8:	441c      	add	r4, r3
 8026dea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026dec:	441e      	add	r6, r3
 8026dee:	9b06      	ldr	r3, [sp, #24]
 8026df0:	3b01      	subs	r3, #1
 8026df2:	9306      	str	r3, [sp, #24]
 8026df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026df6:	3304      	adds	r3, #4
 8026df8:	930a      	str	r3, [sp, #40]	; 0x28
 8026dfa:	e694      	b.n	8026b26 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8026dfc:	d023      	beq.n	8026e46 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026dfe:	9b06      	ldr	r3, [sp, #24]
 8026e00:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026e02:	3b01      	subs	r3, #1
 8026e04:	fb00 4003 	mla	r0, r0, r3, r4
 8026e08:	1400      	asrs	r0, r0, #16
 8026e0a:	f53f aea9 	bmi.w	8026b60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026e0e:	3901      	subs	r1, #1
 8026e10:	4288      	cmp	r0, r1
 8026e12:	f6bf aea5 	bge.w	8026b60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026e16:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026e18:	fb01 6303 	mla	r3, r1, r3, r6
 8026e1c:	141b      	asrs	r3, r3, #16
 8026e1e:	f53f ae9f 	bmi.w	8026b60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026e22:	3a01      	subs	r2, #1
 8026e24:	4293      	cmp	r3, r2
 8026e26:	f6bf ae9b 	bge.w	8026b60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026e2a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026e2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026e30:	f1bb 0f00 	cmp.w	fp, #0
 8026e34:	f300 80ae 	bgt.w	8026f94 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8026e38:	9b06      	ldr	r3, [sp, #24]
 8026e3a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e40:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8026e44:	930a      	str	r3, [sp, #40]	; 0x28
 8026e46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	f340 8218 	ble.w	802727e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8026e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e5c:	eef0 6a62 	vmov.f32	s13, s5
 8026e60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e64:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e6c:	ee16 4a90 	vmov	r4, s13
 8026e70:	eef0 6a43 	vmov.f32	s13, s6
 8026e74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e78:	ee16 6a90 	vmov	r6, s13
 8026e7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e94:	ee12 2a90 	vmov	r2, s5
 8026e98:	eef0 2a47 	vmov.f32	s5, s14
 8026e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ea0:	ee13 2a10 	vmov	r2, s6
 8026ea4:	9327      	str	r3, [sp, #156]	; 0x9c
 8026ea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ea8:	eeb0 3a67 	vmov.f32	s6, s15
 8026eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8026eb0:	9328      	str	r3, [sp, #160]	; 0xa0
 8026eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026eb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026eb6:	3b01      	subs	r3, #1
 8026eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8026eba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ebc:	bf08      	it	eq
 8026ebe:	4613      	moveq	r3, r2
 8026ec0:	9306      	str	r3, [sp, #24]
 8026ec2:	e622      	b.n	8026b0a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8026ec4:	2900      	cmp	r1, #0
 8026ec6:	f43f ae92 	beq.w	8026bee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026eca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026ece:	9308      	str	r3, [sp, #32]
 8026ed0:	0e1b      	lsrs	r3, r3, #24
 8026ed2:	9310      	str	r3, [sp, #64]	; 0x40
 8026ed4:	e68b      	b.n	8026bee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026ed6:	b2c3      	uxtb	r3, r0
 8026ed8:	2800      	cmp	r0, #0
 8026eda:	f43f af7b 	beq.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026ede:	78f8      	ldrb	r0, [r7, #3]
 8026ee0:	fa5f fc8c 	uxtb.w	ip, ip
 8026ee4:	9d07      	ldr	r5, [sp, #28]
 8026ee6:	fb03 f800 	mul.w	r8, r3, r0
 8026eea:	4403      	add	r3, r0
 8026eec:	f108 0201 	add.w	r2, r8, #1
 8026ef0:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8026ef4:	1212      	asrs	r2, r2, #8
 8026ef6:	1a80      	subs	r0, r0, r2
 8026ef8:	1a9b      	subs	r3, r3, r2
 8026efa:	783a      	ldrb	r2, [r7, #0]
 8026efc:	b2db      	uxtb	r3, r3
 8026efe:	4342      	muls	r2, r0
 8026f00:	70fb      	strb	r3, [r7, #3]
 8026f02:	fb05 220c 	mla	r2, r5, ip, r2
 8026f06:	9d07      	ldr	r5, [sp, #28]
 8026f08:	fb92 f2f3 	sdiv	r2, r2, r3
 8026f0c:	fb15 fe0e 	smulbb	lr, r5, lr
 8026f10:	2aff      	cmp	r2, #255	; 0xff
 8026f12:	9d07      	ldr	r5, [sp, #28]
 8026f14:	bfd4      	ite	le
 8026f16:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8026f1a:	22ff      	movgt	r2, #255	; 0xff
 8026f1c:	fb15 f101 	smulbb	r1, r5, r1
 8026f20:	bfd8      	it	le
 8026f22:	b2d2      	uxtble	r2, r2
 8026f24:	703a      	strb	r2, [r7, #0]
 8026f26:	787a      	ldrb	r2, [r7, #1]
 8026f28:	fb00 e202 	mla	r2, r0, r2, lr
 8026f2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8026f30:	2aff      	cmp	r2, #255	; 0xff
 8026f32:	bfd6      	itet	le
 8026f34:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8026f38:	22ff      	movgt	r2, #255	; 0xff
 8026f3a:	b2d2      	uxtble	r2, r2
 8026f3c:	707a      	strb	r2, [r7, #1]
 8026f3e:	78ba      	ldrb	r2, [r7, #2]
 8026f40:	fb00 1202 	mla	r2, r0, r2, r1
 8026f44:	fb92 f2f3 	sdiv	r2, r2, r3
 8026f48:	2aff      	cmp	r2, #255	; 0xff
 8026f4a:	bfd6      	itet	le
 8026f4c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8026f50:	22ff      	movgt	r2, #255	; 0xff
 8026f52:	b2d2      	uxtble	r2, r2
 8026f54:	70ba      	strb	r2, [r7, #2]
 8026f56:	e73d      	b.n	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f58:	f112 0801 	adds.w	r8, r2, #1
 8026f5c:	f53f af3a 	bmi.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f60:	4543      	cmp	r3, r8
 8026f62:	f6ff af37 	blt.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f66:	f11c 0801 	adds.w	r8, ip, #1
 8026f6a:	f53f af33 	bmi.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f6e:	45c6      	cmp	lr, r8
 8026f70:	f6ff af30 	blt.w	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f74:	9d07      	ldr	r5, [sp, #28]
 8026f76:	b21b      	sxth	r3, r3
 8026f78:	9201      	str	r2, [sp, #4]
 8026f7a:	fa0f f28e 	sxth.w	r2, lr
 8026f7e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026f82:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026f86:	9200      	str	r2, [sp, #0]
 8026f88:	4639      	mov	r1, r7
 8026f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026f8c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026f8e:	f7ff fc4e 	bl	802682e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 8026f92:	e71f      	b.n	8026dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026f94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f96:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8026f9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026f9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026fa0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026fa4:	1433      	asrs	r3, r6, #16
 8026fa6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8026faa:	fb00 c303 	mla	r3, r0, r3, ip
 8026fae:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8026fb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026fb6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026fba:	2a00      	cmp	r2, #0
 8026fbc:	f000 8111 	beq.w	80271e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8026fc0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8026fc4:	950d      	str	r5, [sp, #52]	; 0x34
 8026fc6:	0e2d      	lsrs	r5, r5, #24
 8026fc8:	9514      	str	r5, [sp, #80]	; 0x50
 8026fca:	b187      	cbz	r7, 8026fee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8026fcc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8026fd0:	3801      	subs	r0, #1
 8026fd2:	0080      	lsls	r0, r0, #2
 8026fd4:	3004      	adds	r0, #4
 8026fd6:	eb0c 0800 	add.w	r8, ip, r0
 8026fda:	f85c 0000 	ldr.w	r0, [ip, r0]
 8026fde:	9009      	str	r0, [sp, #36]	; 0x24
 8026fe0:	0e00      	lsrs	r0, r0, #24
 8026fe2:	9011      	str	r0, [sp, #68]	; 0x44
 8026fe4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026fe8:	900e      	str	r0, [sp, #56]	; 0x38
 8026fea:	0e00      	lsrs	r0, r0, #24
 8026fec:	9015      	str	r0, [sp, #84]	; 0x54
 8026fee:	b292      	uxth	r2, r2
 8026ff0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8026ff2:	b2bf      	uxth	r7, r7
 8026ff4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ff6:	fb02 f907 	mul.w	r9, r2, r7
 8026ffa:	0112      	lsls	r2, r2, #4
 8026ffc:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 8027000:	eba2 0809 	sub.w	r8, r2, r9
 8027004:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027008:	b2bf      	uxth	r7, r7
 802700a:	fa1f f888 	uxth.w	r8, r8
 802700e:	1bd2      	subs	r2, r2, r7
 8027010:	fb08 f000 	mul.w	r0, r8, r0
 8027014:	b292      	uxth	r2, r2
 8027016:	fb02 000e 	mla	r0, r2, lr, r0
 802701a:	fb07 0005 	mla	r0, r7, r5, r0
 802701e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027020:	fb09 0005 	mla	r0, r9, r5, r0
 8027024:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027028:	2800      	cmp	r0, #0
 802702a:	f000 80d2 	beq.w	80271d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802702e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027032:	d01b      	beq.n	802706c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8027034:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802703c:	fb0e fa0a 	mul.w	sl, lr, sl
 8027040:	fb0e fe03 	mul.w	lr, lr, r3
 8027044:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027048:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802704c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027050:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027054:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027058:	4453      	add	r3, sl
 802705a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802705e:	0a1b      	lsrs	r3, r3, #8
 8027060:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027064:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027068:	ea43 030c 	orr.w	r3, r3, ip
 802706c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802706e:	2dff      	cmp	r5, #255	; 0xff
 8027070:	d021      	beq.n	80270b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8027072:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027074:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027078:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802707a:	fb05 fc0c 	mul.w	ip, r5, ip
 802707e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027080:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027084:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027088:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802708a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802708e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027092:	fb05 fa0a 	mul.w	sl, r5, sl
 8027096:	44e6      	add	lr, ip
 8027098:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802709c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270b0:	ea4e 050a 	orr.w	r5, lr, sl
 80270b4:	950d      	str	r5, [sp, #52]	; 0x34
 80270b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80270b8:	2dff      	cmp	r5, #255	; 0xff
 80270ba:	d021      	beq.n	8027100 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80270bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80270be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80270c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80270c4:	fb05 fc0c 	mul.w	ip, r5, ip
 80270c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80270ca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80270ce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80270d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80270d4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80270d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270dc:	fb05 fa0a 	mul.w	sl, r5, sl
 80270e0:	44e6      	add	lr, ip
 80270e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270fa:	ea4e 050a 	orr.w	r5, lr, sl
 80270fe:	9509      	str	r5, [sp, #36]	; 0x24
 8027100:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027102:	2dff      	cmp	r5, #255	; 0xff
 8027104:	d021      	beq.n	802714a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8027106:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027108:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802710c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802710e:	fb05 fc0c 	mul.w	ip, r5, ip
 8027112:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027114:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027118:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802711c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802711e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027122:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027126:	fb05 fa0a 	mul.w	sl, r5, sl
 802712a:	44e6      	add	lr, ip
 802712c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027130:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027134:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802713c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027140:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027144:	ea4e 050a 	orr.w	r5, lr, sl
 8027148:	950e      	str	r5, [sp, #56]	; 0x38
 802714a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802714c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8027150:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027154:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027158:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802715a:	fb08 fc0c 	mul.w	ip, r8, ip
 802715e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027162:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027166:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027168:	fb07 cc0e 	mla	ip, r7, lr, ip
 802716c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027170:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027172:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027176:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802717a:	fb08 f80e 	mul.w	r8, r8, lr
 802717e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027182:	fb02 8303 	mla	r3, r2, r3, r8
 8027186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802718c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027192:	fb07 330a 	mla	r3, r7, sl, r3
 8027196:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802719a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802719e:	9b07      	ldr	r3, [sp, #28]
 80271a0:	4358      	muls	r0, r3
 80271a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271a6:	1c43      	adds	r3, r0, #1
 80271a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80271ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80271b0:	ea4c 0c0e 	orr.w	ip, ip, lr
 80271b4:	1200      	asrs	r0, r0, #8
 80271b6:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80271ba:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80271be:	28ff      	cmp	r0, #255	; 0xff
 80271c0:	b2df      	uxtb	r7, r3
 80271c2:	fa5f fe82 	uxtb.w	lr, r2
 80271c6:	d115      	bne.n	80271f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 80271c8:	f881 c000 	strb.w	ip, [r1]
 80271cc:	704a      	strb	r2, [r1, #1]
 80271ce:	708b      	strb	r3, [r1, #2]
 80271d0:	70c8      	strb	r0, [r1, #3]
 80271d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80271d4:	3104      	adds	r1, #4
 80271d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80271da:	441c      	add	r4, r3
 80271dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271de:	441e      	add	r6, r3
 80271e0:	e626      	b.n	8026e30 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80271e2:	2f00      	cmp	r7, #0
 80271e4:	f43f af03 	beq.w	8026fee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80271e8:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80271ec:	9009      	str	r0, [sp, #36]	; 0x24
 80271ee:	0e00      	lsrs	r0, r0, #24
 80271f0:	9011      	str	r0, [sp, #68]	; 0x44
 80271f2:	e6fc      	b.n	8026fee <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80271f4:	b2c3      	uxtb	r3, r0
 80271f6:	2800      	cmp	r0, #0
 80271f8:	d0eb      	beq.n	80271d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80271fa:	78c8      	ldrb	r0, [r1, #3]
 80271fc:	fa5f fc8c 	uxtb.w	ip, ip
 8027200:	9d07      	ldr	r5, [sp, #28]
 8027202:	fb03 f800 	mul.w	r8, r3, r0
 8027206:	4403      	add	r3, r0
 8027208:	f108 0201 	add.w	r2, r8, #1
 802720c:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8027210:	1212      	asrs	r2, r2, #8
 8027212:	1a9b      	subs	r3, r3, r2
 8027214:	1a82      	subs	r2, r0, r2
 8027216:	7808      	ldrb	r0, [r1, #0]
 8027218:	b2db      	uxtb	r3, r3
 802721a:	4350      	muls	r0, r2
 802721c:	70cb      	strb	r3, [r1, #3]
 802721e:	fb05 0c0c 	mla	ip, r5, ip, r0
 8027222:	9d07      	ldr	r5, [sp, #28]
 8027224:	7848      	ldrb	r0, [r1, #1]
 8027226:	fb15 fe0e 	smulbb	lr, r5, lr
 802722a:	9d07      	ldr	r5, [sp, #28]
 802722c:	fb9c fcf3 	sdiv	ip, ip, r3
 8027230:	fb02 e000 	mla	r0, r2, r0, lr
 8027234:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027238:	fb15 f707 	smulbb	r7, r5, r7
 802723c:	bfd4      	ite	le
 802723e:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8027242:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8027246:	fb90 f0f3 	sdiv	r0, r0, r3
 802724a:	bfd8      	it	le
 802724c:	fa5f fc8c 	uxtble.w	ip, ip
 8027250:	28ff      	cmp	r0, #255	; 0xff
 8027252:	bfd4      	ite	le
 8027254:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027258:	20ff      	movgt	r0, #255	; 0xff
 802725a:	f881 c000 	strb.w	ip, [r1]
 802725e:	bfd8      	it	le
 8027260:	b2c0      	uxtble	r0, r0
 8027262:	7048      	strb	r0, [r1, #1]
 8027264:	7888      	ldrb	r0, [r1, #2]
 8027266:	fb02 7200 	mla	r2, r2, r0, r7
 802726a:	fb92 f2f3 	sdiv	r2, r2, r3
 802726e:	2aff      	cmp	r2, #255	; 0xff
 8027270:	bfd6      	itet	le
 8027272:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027276:	22ff      	movgt	r2, #255	; 0xff
 8027278:	b2d2      	uxtble	r2, r2
 802727a:	708a      	strb	r2, [r1, #2]
 802727c:	e7a9      	b.n	80271d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802727e:	b01b      	add	sp, #108	; 0x6c
 8027280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 8027284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027288:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802728c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027290:	2c00      	cmp	r4, #0
 8027292:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027296:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802729a:	fb00 4e03 	mla	lr, r0, r3, r4
 802729e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80272a2:	f2c0 808f 	blt.w	80273c4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80272a6:	45a1      	cmp	r9, r4
 80272a8:	f340 808c 	ble.w	80273c4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80272ac:	2800      	cmp	r0, #0
 80272ae:	f2c0 8089 	blt.w	80273c4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80272b2:	4580      	cmp	r8, r0
 80272b4:	f340 8086 	ble.w	80273c4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80272b8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80272bc:	f01e 0f01 	tst.w	lr, #1
 80272c0:	5d56      	ldrb	r6, [r2, r5]
 80272c2:	bf0c      	ite	eq
 80272c4:	f006 060f 	andeq.w	r6, r6, #15
 80272c8:	1136      	asrne	r6, r6, #4
 80272ca:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80272ce:	b2f6      	uxtb	r6, r6
 80272d0:	f114 0a01 	adds.w	sl, r4, #1
 80272d4:	d478      	bmi.n	80273c8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80272d6:	45d1      	cmp	r9, sl
 80272d8:	dd76      	ble.n	80273c8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80272da:	2800      	cmp	r0, #0
 80272dc:	db74      	blt.n	80273c8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80272de:	4580      	cmp	r8, r0
 80272e0:	dd72      	ble.n	80273c8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80272e2:	2f00      	cmp	r7, #0
 80272e4:	d072      	beq.n	80273cc <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 80272e6:	f10e 0b01 	add.w	fp, lr, #1
 80272ea:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80272ee:	f01b 0f01 	tst.w	fp, #1
 80272f2:	5d55      	ldrb	r5, [r2, r5]
 80272f4:	bf0c      	ite	eq
 80272f6:	f005 050f 	andeq.w	r5, r5, #15
 80272fa:	112d      	asrne	r5, r5, #4
 80272fc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027300:	b2ed      	uxtb	r5, r5
 8027302:	f1bc 0f00 	cmp.w	ip, #0
 8027306:	d065      	beq.n	80273d4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 8027308:	2c00      	cmp	r4, #0
 802730a:	f100 0001 	add.w	r0, r0, #1
 802730e:	db5f      	blt.n	80273d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8027310:	45a1      	cmp	r9, r4
 8027312:	dd5d      	ble.n	80273d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8027314:	2800      	cmp	r0, #0
 8027316:	db5b      	blt.n	80273d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8027318:	4580      	cmp	r8, r0
 802731a:	dd59      	ble.n	80273d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802731c:	eb03 0b0e 	add.w	fp, r3, lr
 8027320:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027324:	f01b 0f01 	tst.w	fp, #1
 8027328:	5d14      	ldrb	r4, [r2, r4]
 802732a:	bf0c      	ite	eq
 802732c:	f004 040f 	andeq.w	r4, r4, #15
 8027330:	1124      	asrne	r4, r4, #4
 8027332:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027336:	b2e4      	uxtb	r4, r4
 8027338:	f1ba 0f00 	cmp.w	sl, #0
 802733c:	db4d      	blt.n	80273da <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802733e:	45d1      	cmp	r9, sl
 8027340:	dd4b      	ble.n	80273da <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8027342:	2800      	cmp	r0, #0
 8027344:	db49      	blt.n	80273da <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8027346:	4580      	cmp	r8, r0
 8027348:	dd47      	ble.n	80273da <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802734a:	2f00      	cmp	r7, #0
 802734c:	d047      	beq.n	80273de <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802734e:	3301      	adds	r3, #1
 8027350:	449e      	add	lr, r3
 8027352:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027356:	f01e 0f01 	tst.w	lr, #1
 802735a:	5cd0      	ldrb	r0, [r2, r3]
 802735c:	bf0c      	ite	eq
 802735e:	f000 000f 	andeq.w	r0, r0, #15
 8027362:	1100      	asrne	r0, r0, #4
 8027364:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027368:	b2c3      	uxtb	r3, r0
 802736a:	b2ba      	uxth	r2, r7
 802736c:	fa1f fc8c 	uxth.w	ip, ip
 8027370:	fb02 f00c 	mul.w	r0, r2, ip
 8027374:	0112      	lsls	r2, r2, #4
 8027376:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802737a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802737e:	1a12      	subs	r2, r2, r0
 8027380:	fa1f fc8c 	uxth.w	ip, ip
 8027384:	b292      	uxth	r2, r2
 8027386:	eba7 070c 	sub.w	r7, r7, ip
 802738a:	436a      	muls	r2, r5
 802738c:	b2bf      	uxth	r7, r7
 802738e:	fb06 2207 	mla	r2, r6, r7, r2
 8027392:	fb0c 2404 	mla	r4, ip, r4, r2
 8027396:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802739a:	fb00 4303 	mla	r3, r0, r3, r4
 802739e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80273a2:	4353      	muls	r3, r2
 80273a4:	1c5a      	adds	r2, r3, #1
 80273a6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80273aa:	4a21      	ldr	r2, [pc, #132]	; (8027430 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 80273ac:	121b      	asrs	r3, r3, #8
 80273ae:	7895      	ldrb	r5, [r2, #2]
 80273b0:	7857      	ldrb	r7, [r2, #1]
 80273b2:	2bff      	cmp	r3, #255	; 0xff
 80273b4:	7814      	ldrb	r4, [r2, #0]
 80273b6:	d114      	bne.n	80273e2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 80273b8:	700c      	strb	r4, [r1, #0]
 80273ba:	704f      	strb	r7, [r1, #1]
 80273bc:	708d      	strb	r5, [r1, #2]
 80273be:	70cb      	strb	r3, [r1, #3]
 80273c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273c4:	2600      	movs	r6, #0
 80273c6:	e783      	b.n	80272d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 80273c8:	2500      	movs	r5, #0
 80273ca:	e79a      	b.n	8027302 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 80273cc:	463d      	mov	r5, r7
 80273ce:	e798      	b.n	8027302 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 80273d0:	2400      	movs	r4, #0
 80273d2:	e7b1      	b.n	8027338 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 80273d4:	4663      	mov	r3, ip
 80273d6:	4664      	mov	r4, ip
 80273d8:	e7c7      	b.n	802736a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80273da:	2300      	movs	r3, #0
 80273dc:	e7c5      	b.n	802736a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80273de:	463b      	mov	r3, r7
 80273e0:	e7c3      	b.n	802736a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80273e2:	b2da      	uxtb	r2, r3
 80273e4:	2b00      	cmp	r3, #0
 80273e6:	d0eb      	beq.n	80273c0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80273e8:	78ce      	ldrb	r6, [r1, #3]
 80273ea:	435c      	muls	r4, r3
 80273ec:	435f      	muls	r7, r3
 80273ee:	fb02 fc06 	mul.w	ip, r2, r6
 80273f2:	4432      	add	r2, r6
 80273f4:	436b      	muls	r3, r5
 80273f6:	f10c 0001 	add.w	r0, ip, #1
 80273fa:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80273fe:	1200      	asrs	r0, r0, #8
 8027400:	1a12      	subs	r2, r2, r0
 8027402:	1a30      	subs	r0, r6, r0
 8027404:	780e      	ldrb	r6, [r1, #0]
 8027406:	b2d2      	uxtb	r2, r2
 8027408:	fb00 4606 	mla	r6, r0, r6, r4
 802740c:	784c      	ldrb	r4, [r1, #1]
 802740e:	70ca      	strb	r2, [r1, #3]
 8027410:	fb00 7404 	mla	r4, r0, r4, r7
 8027414:	fb94 f4f2 	sdiv	r4, r4, r2
 8027418:	704c      	strb	r4, [r1, #1]
 802741a:	788c      	ldrb	r4, [r1, #2]
 802741c:	fb00 3304 	mla	r3, r0, r4, r3
 8027420:	fb96 f6f2 	sdiv	r6, r6, r2
 8027424:	fb93 f3f2 	sdiv	r3, r3, r2
 8027428:	700e      	strb	r6, [r1, #0]
 802742a:	708b      	strb	r3, [r1, #2]
 802742c:	e7c8      	b.n	80273c0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802742e:	bf00      	nop
 8027430:	2003bd18 	.word	0x2003bd18

08027434 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027438:	b097      	sub	sp, #92	; 0x5c
 802743a:	9214      	str	r2, [sp, #80]	; 0x50
 802743c:	9309      	str	r3, [sp, #36]	; 0x24
 802743e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027440:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027444:	9015      	str	r0, [sp, #84]	; 0x54
 8027446:	910d      	str	r1, [sp, #52]	; 0x34
 8027448:	6850      	ldr	r0, [r2, #4]
 802744a:	930e      	str	r3, [sp, #56]	; 0x38
 802744c:	6812      	ldr	r2, [r2, #0]
 802744e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027452:	e9dd a521 	ldrd	sl, r5, [sp, #132]	; 0x84
 8027456:	fb00 1303 	mla	r3, r0, r3, r1
 802745a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802745e:	930a      	str	r3, [sp, #40]	; 0x28
 8027460:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027462:	689b      	ldr	r3, [r3, #8]
 8027464:	3301      	adds	r3, #1
 8027466:	f023 0301 	bic.w	r3, r3, #1
 802746a:	930f      	str	r3, [sp, #60]	; 0x3c
 802746c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802746e:	681e      	ldr	r6, [r3, #0]
 8027470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027472:	2b00      	cmp	r3, #0
 8027474:	dc03      	bgt.n	802747e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027478:	2b00      	cmp	r3, #0
 802747a:	f340 8255 	ble.w	8027928 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802747e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027480:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027484:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027488:	1e48      	subs	r0, r1, #1
 802748a:	1e57      	subs	r7, r2, #1
 802748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802748e:	2b00      	cmp	r3, #0
 8027490:	f340 80bb 	ble.w	802760a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027494:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8027498:	ea4f 4325 	mov.w	r3, r5, asr #16
 802749c:	d406      	bmi.n	80274ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802749e:	4584      	cmp	ip, r0
 80274a0:	da04      	bge.n	80274ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	db02      	blt.n	80274ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80274a6:	42bb      	cmp	r3, r7
 80274a8:	f2c0 80b0 	blt.w	802760c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80274ac:	f11c 0c01 	adds.w	ip, ip, #1
 80274b0:	f100 80a0 	bmi.w	80275f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80274b4:	4561      	cmp	r1, ip
 80274b6:	f2c0 809d 	blt.w	80275f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80274ba:	3301      	adds	r3, #1
 80274bc:	f100 809a 	bmi.w	80275f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80274c0:	429a      	cmp	r2, r3
 80274c2:	f2c0 8097 	blt.w	80275f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80274c6:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 80274ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80274ce:	f1bb 0f00 	cmp.w	fp, #0
 80274d2:	f340 80bb 	ble.w	802764c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80274d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80274d8:	1428      	asrs	r0, r5, #16
 80274da:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80274de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80274e2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80274e6:	ea5f 432a 	movs.w	r3, sl, asr #16
 80274ea:	f100 8134 	bmi.w	8027756 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80274ee:	f10c 39ff 	add.w	r9, ip, #4294967295
 80274f2:	454b      	cmp	r3, r9
 80274f4:	f280 812f 	bge.w	8027756 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80274f8:	2800      	cmp	r0, #0
 80274fa:	f2c0 812c 	blt.w	8027756 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80274fe:	f10e 39ff 	add.w	r9, lr, #4294967295
 8027502:	4548      	cmp	r0, r9
 8027504:	f280 8127 	bge.w	8027756 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027508:	fb00 3308 	mla	r3, r0, r8, r3
 802750c:	0858      	lsrs	r0, r3, #1
 802750e:	07dc      	lsls	r4, r3, #31
 8027510:	f816 c000 	ldrb.w	ip, [r6, r0]
 8027514:	bf54      	ite	pl
 8027516:	f00c 0c0f 	andpl.w	ip, ip, #15
 802751a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802751e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027522:	fa5f fc8c 	uxtb.w	ip, ip
 8027526:	2a00      	cmp	r2, #0
 8027528:	f000 80d6 	beq.w	80276d8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802752c:	1c58      	adds	r0, r3, #1
 802752e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027532:	07c0      	lsls	r0, r0, #31
 8027534:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8027538:	bf54      	ite	pl
 802753a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802753e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027542:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027546:	fa5f f08e 	uxtb.w	r0, lr
 802754a:	9010      	str	r0, [sp, #64]	; 0x40
 802754c:	b1d9      	cbz	r1, 8027586 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802754e:	4443      	add	r3, r8
 8027550:	0858      	lsrs	r0, r3, #1
 8027552:	07dc      	lsls	r4, r3, #31
 8027554:	f103 0301 	add.w	r3, r3, #1
 8027558:	5c30      	ldrb	r0, [r6, r0]
 802755a:	bf54      	ite	pl
 802755c:	f000 000f 	andpl.w	r0, r0, #15
 8027560:	1100      	asrmi	r0, r0, #4
 8027562:	07dc      	lsls	r4, r3, #31
 8027564:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027568:	b2c0      	uxtb	r0, r0
 802756a:	900b      	str	r0, [sp, #44]	; 0x2c
 802756c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027570:	f816 e000 	ldrb.w	lr, [r6, r0]
 8027574:	bf54      	ite	pl
 8027576:	f00e 030f 	andpl.w	r3, lr, #15
 802757a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802757e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027582:	b2db      	uxtb	r3, r3
 8027584:	9311      	str	r3, [sp, #68]	; 0x44
 8027586:	b292      	uxth	r2, r2
 8027588:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802758a:	b289      	uxth	r1, r1
 802758c:	fb02 f301 	mul.w	r3, r2, r1
 8027590:	0112      	lsls	r2, r2, #4
 8027592:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027596:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802759a:	1ad2      	subs	r2, r2, r3
 802759c:	b289      	uxth	r1, r1
 802759e:	b292      	uxth	r2, r2
 80275a0:	1a40      	subs	r0, r0, r1
 80275a2:	4362      	muls	r2, r4
 80275a4:	b280      	uxth	r0, r0
 80275a6:	fb0c 2c00 	mla	ip, ip, r0, r2
 80275aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80275ac:	fb01 c102 	mla	r1, r1, r2, ip
 80275b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80275b2:	fb03 1302 	mla	r3, r3, r2, r1
 80275b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80275b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80275bc:	4353      	muls	r3, r2
 80275be:	1c5a      	adds	r2, r3, #1
 80275c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80275c4:	4abf      	ldr	r2, [pc, #764]	; (80278c4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80275c6:	121b      	asrs	r3, r3, #8
 80275c8:	f892 9002 	ldrb.w	r9, [r2, #2]
 80275cc:	7850      	ldrb	r0, [r2, #1]
 80275ce:	2bff      	cmp	r3, #255	; 0xff
 80275d0:	f892 c000 	ldrb.w	ip, [r2]
 80275d4:	f040 8091 	bne.w	80276fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80275d8:	f887 c000 	strb.w	ip, [r7]
 80275dc:	7078      	strb	r0, [r7, #1]
 80275de:	f887 9002 	strb.w	r9, [r7, #2]
 80275e2:	70fb      	strb	r3, [r7, #3]
 80275e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80275e6:	3704      	adds	r7, #4
 80275e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80275ec:	449a      	add	sl, r3
 80275ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275f0:	441d      	add	r5, r3
 80275f2:	e76c      	b.n	80274ce <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80275f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80275f6:	449a      	add	sl, r3
 80275f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275fa:	441d      	add	r5, r3
 80275fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275fe:	3b01      	subs	r3, #1
 8027600:	9309      	str	r3, [sp, #36]	; 0x24
 8027602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027604:	3304      	adds	r3, #4
 8027606:	930a      	str	r3, [sp, #40]	; 0x28
 8027608:	e740      	b.n	802748c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802760a:	d026      	beq.n	802765a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802760e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027610:	3b01      	subs	r3, #1
 8027612:	fb00 a003 	mla	r0, r0, r3, sl
 8027616:	1400      	asrs	r0, r0, #16
 8027618:	f53f af55 	bmi.w	80274c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802761c:	3901      	subs	r1, #1
 802761e:	4288      	cmp	r0, r1
 8027620:	f6bf af51 	bge.w	80274c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027624:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027626:	fb01 5303 	mla	r3, r1, r3, r5
 802762a:	141b      	asrs	r3, r3, #16
 802762c:	f53f af4b 	bmi.w	80274c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027630:	3a01      	subs	r2, #1
 8027632:	4293      	cmp	r3, r2
 8027634:	f6bf af47 	bge.w	80274c6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802763a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802763e:	3304      	adds	r3, #4
 8027640:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027644:	f1be 0f00 	cmp.w	lr, #0
 8027648:	f300 80a6 	bgt.w	8027798 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 802764c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802764e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027654:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027658:	930a      	str	r3, [sp, #40]	; 0x28
 802765a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802765c:	2b00      	cmp	r3, #0
 802765e:	f340 8163 	ble.w	8027928 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8027662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027668:	ee30 0a04 	vadd.f32	s0, s0, s8
 802766c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027670:	eef0 6a62 	vmov.f32	s13, s5
 8027674:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027678:	ee31 1a05 	vadd.f32	s2, s2, s10
 802767c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027680:	ee16 aa90 	vmov	sl, s13
 8027684:	eef0 6a43 	vmov.f32	s13, s6
 8027688:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802768c:	ee16 5a90 	vmov	r5, s13
 8027690:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027694:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027698:	ee77 2a62 	vsub.f32	s5, s14, s5
 802769c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80276a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80276a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80276a8:	ee12 2a90 	vmov	r2, s5
 80276ac:	eef0 2a47 	vmov.f32	s5, s14
 80276b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80276b4:	ee13 2a10 	vmov	r2, s6
 80276b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80276ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80276bc:	eeb0 3a67 	vmov.f32	s6, s15
 80276c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80276c4:	9324      	str	r3, [sp, #144]	; 0x90
 80276c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80276c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80276ca:	3b01      	subs	r3, #1
 80276cc:	930d      	str	r3, [sp, #52]	; 0x34
 80276ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80276d0:	bf08      	it	eq
 80276d2:	4613      	moveq	r3, r2
 80276d4:	9309      	str	r3, [sp, #36]	; 0x24
 80276d6:	e6cb      	b.n	8027470 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80276d8:	2900      	cmp	r1, #0
 80276da:	f43f af54 	beq.w	8027586 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80276de:	eb08 0003 	add.w	r0, r8, r3
 80276e2:	0843      	lsrs	r3, r0, #1
 80276e4:	07c0      	lsls	r0, r0, #31
 80276e6:	5cf3      	ldrb	r3, [r6, r3]
 80276e8:	bf54      	ite	pl
 80276ea:	f003 030f 	andpl.w	r3, r3, #15
 80276ee:	111b      	asrmi	r3, r3, #4
 80276f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80276f4:	b2db      	uxtb	r3, r3
 80276f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80276f8:	e745      	b.n	8027586 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80276fa:	b2da      	uxtb	r2, r3
 80276fc:	2b00      	cmp	r3, #0
 80276fe:	f43f af71 	beq.w	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027702:	f897 e003 	ldrb.w	lr, [r7, #3]
 8027706:	fb03 fc0c 	mul.w	ip, r3, ip
 802770a:	4358      	muls	r0, r3
 802770c:	fb02 f10e 	mul.w	r1, r2, lr
 8027710:	4472      	add	r2, lr
 8027712:	fb03 f309 	mul.w	r3, r3, r9
 8027716:	1c4c      	adds	r4, r1, #1
 8027718:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802771c:	1209      	asrs	r1, r1, #8
 802771e:	1a52      	subs	r2, r2, r1
 8027720:	ebae 0101 	sub.w	r1, lr, r1
 8027724:	f897 e000 	ldrb.w	lr, [r7]
 8027728:	b2d2      	uxtb	r2, r2
 802772a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802772e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8027732:	70fa      	strb	r2, [r7, #3]
 8027734:	fb9c fcf2 	sdiv	ip, ip, r2
 8027738:	f887 c000 	strb.w	ip, [r7]
 802773c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8027740:	fb01 000c 	mla	r0, r1, ip, r0
 8027744:	fb01 310e 	mla	r1, r1, lr, r3
 8027748:	fb90 f0f2 	sdiv	r0, r0, r2
 802774c:	fb91 f1f2 	sdiv	r1, r1, r2
 8027750:	7078      	strb	r0, [r7, #1]
 8027752:	70b9      	strb	r1, [r7, #2]
 8027754:	e746      	b.n	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027756:	f113 0901 	adds.w	r9, r3, #1
 802775a:	f53f af43 	bmi.w	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802775e:	45cc      	cmp	ip, r9
 8027760:	f6ff af40 	blt.w	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027764:	f110 0901 	adds.w	r9, r0, #1
 8027768:	f53f af3c 	bmi.w	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802776c:	45ce      	cmp	lr, r9
 802776e:	f6ff af39 	blt.w	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027772:	9302      	str	r3, [sp, #8]
 8027774:	fa0f f38e 	sxth.w	r3, lr
 8027778:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802777a:	9301      	str	r3, [sp, #4]
 802777c:	fa0f f38c 	sxth.w	r3, ip
 8027780:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027784:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027788:	9300      	str	r3, [sp, #0]
 802778a:	4632      	mov	r2, r6
 802778c:	4643      	mov	r3, r8
 802778e:	4639      	mov	r1, r7
 8027790:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027792:	f7ff fd77 	bl	8027284 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8027796:	e725      	b.n	80275e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027798:	ea4f 412a 	mov.w	r1, sl, asr #16
 802779c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80277a0:	142a      	asrs	r2, r5, #16
 80277a2:	f3c5 3703 	ubfx	r7, r5, #12, #4
 80277a6:	fb08 1202 	mla	r2, r8, r2, r1
 80277aa:	0851      	lsrs	r1, r2, #1
 80277ac:	07d4      	lsls	r4, r2, #31
 80277ae:	5c71      	ldrb	r1, [r6, r1]
 80277b0:	bf54      	ite	pl
 80277b2:	f001 010f 	andpl.w	r1, r1, #15
 80277b6:	1109      	asrmi	r1, r1, #4
 80277b8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80277bc:	b2c9      	uxtb	r1, r1
 80277be:	2800      	cmp	r0, #0
 80277c0:	d06d      	beq.n	802789e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80277c2:	f102 0901 	add.w	r9, r2, #1
 80277c6:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 80277ca:	f019 0f01 	tst.w	r9, #1
 80277ce:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80277d2:	bf0c      	ite	eq
 80277d4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80277d8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80277dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80277e0:	fa5f f48c 	uxtb.w	r4, ip
 80277e4:	9412      	str	r4, [sp, #72]	; 0x48
 80277e6:	b307      	cbz	r7, 802782a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80277e8:	4442      	add	r2, r8
 80277ea:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80277ee:	07d4      	lsls	r4, r2, #31
 80277f0:	f102 0201 	add.w	r2, r2, #1
 80277f4:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80277f8:	bf54      	ite	pl
 80277fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80277fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027802:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027806:	fa5f f48c 	uxtb.w	r4, ip
 802780a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802780e:	940c      	str	r4, [sp, #48]	; 0x30
 8027810:	07d4      	lsls	r4, r2, #31
 8027812:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8027816:	bf54      	ite	pl
 8027818:	f00c 0c0f 	andpl.w	ip, ip, #15
 802781c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027820:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027824:	fa5f f28c 	uxtb.w	r2, ip
 8027828:	9213      	str	r2, [sp, #76]	; 0x4c
 802782a:	b280      	uxth	r0, r0
 802782c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802782e:	b2bf      	uxth	r7, r7
 8027830:	fb00 f207 	mul.w	r2, r0, r7
 8027834:	0100      	lsls	r0, r0, #4
 8027836:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802783a:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802783e:	1a80      	subs	r0, r0, r2
 8027840:	b2bf      	uxth	r7, r7
 8027842:	b280      	uxth	r0, r0
 8027844:	ebac 0c07 	sub.w	ip, ip, r7
 8027848:	4360      	muls	r0, r4
 802784a:	fa1f fc8c 	uxth.w	ip, ip
 802784e:	fb01 010c 	mla	r1, r1, ip, r0
 8027852:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027854:	fb07 1700 	mla	r7, r7, r0, r1
 8027858:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802785a:	fb02 7201 	mla	r2, r2, r1, r7
 802785e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027860:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027864:	434a      	muls	r2, r1
 8027866:	1c51      	adds	r1, r2, #1
 8027868:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802786c:	4915      	ldr	r1, [pc, #84]	; (80278c4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802786e:	1212      	asrs	r2, r2, #8
 8027870:	7888      	ldrb	r0, [r1, #2]
 8027872:	784f      	ldrb	r7, [r1, #1]
 8027874:	2aff      	cmp	r2, #255	; 0xff
 8027876:	4604      	mov	r4, r0
 8027878:	f891 c000 	ldrb.w	ip, [r1]
 802787c:	d124      	bne.n	80278c8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802787e:	f803 cc04 	strb.w	ip, [r3, #-4]
 8027882:	f803 7c03 	strb.w	r7, [r3, #-3]
 8027886:	f803 0c02 	strb.w	r0, [r3, #-2]
 802788a:	f803 2c01 	strb.w	r2, [r3, #-1]
 802788e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027890:	3304      	adds	r3, #4
 8027892:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027896:	4492      	add	sl, r2
 8027898:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802789a:	4415      	add	r5, r2
 802789c:	e6d2      	b.n	8027644 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802789e:	2f00      	cmp	r7, #0
 80278a0:	d0c3      	beq.n	802782a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80278a2:	4442      	add	r2, r8
 80278a4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80278a8:	07d2      	lsls	r2, r2, #31
 80278aa:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80278ae:	bf54      	ite	pl
 80278b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80278b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80278b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80278bc:	fa5f f28c 	uxtb.w	r2, ip
 80278c0:	920c      	str	r2, [sp, #48]	; 0x30
 80278c2:	e7b2      	b.n	802782a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80278c4:	2003bd18 	.word	0x2003bd18
 80278c8:	b2d1      	uxtb	r1, r2
 80278ca:	2a00      	cmp	r2, #0
 80278cc:	d0df      	beq.n	802788e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 80278ce:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 80278d2:	fb02 fc0c 	mul.w	ip, r2, ip
 80278d6:	4357      	muls	r7, r2
 80278d8:	fb01 fb09 	mul.w	fp, r1, r9
 80278dc:	4449      	add	r1, r9
 80278de:	4362      	muls	r2, r4
 80278e0:	f10b 0001 	add.w	r0, fp, #1
 80278e4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80278e8:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 80278ec:	1200      	asrs	r0, r0, #8
 80278ee:	1a09      	subs	r1, r1, r0
 80278f0:	eba9 0000 	sub.w	r0, r9, r0
 80278f4:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 80278f8:	b2c9      	uxtb	r1, r1
 80278fa:	fb00 cc0b 	mla	ip, r0, fp, ip
 80278fe:	fb9c fcf1 	sdiv	ip, ip, r1
 8027902:	f803 cc04 	strb.w	ip, [r3, #-4]
 8027906:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 802790a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802790e:	fb00 770c 	mla	r7, r0, ip, r7
 8027912:	fb00 2009 	mla	r0, r0, r9, r2
 8027916:	fb97 f7f1 	sdiv	r7, r7, r1
 802791a:	fb90 f0f1 	sdiv	r0, r0, r1
 802791e:	f803 7c03 	strb.w	r7, [r3, #-3]
 8027922:	f803 0c02 	strb.w	r0, [r3, #-2]
 8027926:	e7b2      	b.n	802788e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8027928:	b017      	add	sp, #92	; 0x5c
 802792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802792e:	bf00      	nop

08027930 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 8027930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027934:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	; 0x2c
 8027938:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802793c:	2800      	cmp	r0, #0
 802793e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027942:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027946:	fb0c 0e03 	mla	lr, ip, r3, r0
 802794a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802794e:	f2c0 8088 	blt.w	8027a62 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027952:	4581      	cmp	r9, r0
 8027954:	f340 8085 	ble.w	8027a62 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027958:	f1bc 0f00 	cmp.w	ip, #0
 802795c:	f2c0 8081 	blt.w	8027a62 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027960:	45e0      	cmp	r8, ip
 8027962:	dd7e      	ble.n	8027a62 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027964:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027968:	f01e 0f01 	tst.w	lr, #1
 802796c:	5d15      	ldrb	r5, [r2, r4]
 802796e:	bf0c      	ite	eq
 8027970:	f005 050f 	andeq.w	r5, r5, #15
 8027974:	112d      	asrne	r5, r5, #4
 8027976:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802797a:	b2ed      	uxtb	r5, r5
 802797c:	f110 0a01 	adds.w	sl, r0, #1
 8027980:	d471      	bmi.n	8027a66 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027982:	45d1      	cmp	r9, sl
 8027984:	dd6f      	ble.n	8027a66 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027986:	f1bc 0f00 	cmp.w	ip, #0
 802798a:	db6c      	blt.n	8027a66 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802798c:	45e0      	cmp	r8, ip
 802798e:	dd6a      	ble.n	8027a66 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027990:	2e00      	cmp	r6, #0
 8027992:	d06a      	beq.n	8027a6a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 8027994:	f10e 0b01 	add.w	fp, lr, #1
 8027998:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802799c:	f01b 0f01 	tst.w	fp, #1
 80279a0:	5d14      	ldrb	r4, [r2, r4]
 80279a2:	bf0c      	ite	eq
 80279a4:	f004 040f 	andeq.w	r4, r4, #15
 80279a8:	1124      	asrne	r4, r4, #4
 80279aa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80279ae:	b2e4      	uxtb	r4, r4
 80279b0:	2f00      	cmp	r7, #0
 80279b2:	d05e      	beq.n	8027a72 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 80279b4:	2800      	cmp	r0, #0
 80279b6:	f10c 0c01 	add.w	ip, ip, #1
 80279ba:	db58      	blt.n	8027a6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 80279bc:	4581      	cmp	r9, r0
 80279be:	dd56      	ble.n	8027a6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 80279c0:	f1bc 0f00 	cmp.w	ip, #0
 80279c4:	db53      	blt.n	8027a6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 80279c6:	45e0      	cmp	r8, ip
 80279c8:	dd51      	ble.n	8027a6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 80279ca:	eb03 0b0e 	add.w	fp, r3, lr
 80279ce:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80279d2:	f01b 0f01 	tst.w	fp, #1
 80279d6:	5c10      	ldrb	r0, [r2, r0]
 80279d8:	bf0c      	ite	eq
 80279da:	f000 000f 	andeq.w	r0, r0, #15
 80279de:	1100      	asrne	r0, r0, #4
 80279e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80279e4:	b2c0      	uxtb	r0, r0
 80279e6:	f1ba 0f00 	cmp.w	sl, #0
 80279ea:	db45      	blt.n	8027a78 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80279ec:	45d1      	cmp	r9, sl
 80279ee:	dd43      	ble.n	8027a78 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80279f0:	f1bc 0f00 	cmp.w	ip, #0
 80279f4:	db40      	blt.n	8027a78 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80279f6:	45e0      	cmp	r8, ip
 80279f8:	dd3e      	ble.n	8027a78 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 80279fa:	2e00      	cmp	r6, #0
 80279fc:	d03e      	beq.n	8027a7c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 80279fe:	3301      	adds	r3, #1
 8027a00:	449e      	add	lr, r3
 8027a02:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027a06:	f01e 0f01 	tst.w	lr, #1
 8027a0a:	5cd3      	ldrb	r3, [r2, r3]
 8027a0c:	bf0c      	ite	eq
 8027a0e:	f003 030f 	andeq.w	r3, r3, #15
 8027a12:	111b      	asrne	r3, r3, #4
 8027a14:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027a18:	b2db      	uxtb	r3, r3
 8027a1a:	b2b2      	uxth	r2, r6
 8027a1c:	b2bf      	uxth	r7, r7
 8027a1e:	fb02 f607 	mul.w	r6, r2, r7
 8027a22:	0112      	lsls	r2, r2, #4
 8027a24:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 8027a28:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8027a2c:	1b92      	subs	r2, r2, r6
 8027a2e:	b2bf      	uxth	r7, r7
 8027a30:	b292      	uxth	r2, r2
 8027a32:	ebac 0c07 	sub.w	ip, ip, r7
 8027a36:	4362      	muls	r2, r4
 8027a38:	fa1f fc8c 	uxth.w	ip, ip
 8027a3c:	fb05 220c 	mla	r2, r5, ip, r2
 8027a40:	fb07 2000 	mla	r0, r7, r0, r2
 8027a44:	4a22      	ldr	r2, [pc, #136]	; (8027ad0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 8027a46:	fb06 0303 	mla	r3, r6, r3, r0
 8027a4a:	7817      	ldrb	r7, [r2, #0]
 8027a4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a50:	2bff      	cmp	r3, #255	; 0xff
 8027a52:	d115      	bne.n	8027a80 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 8027a54:	700f      	strb	r7, [r1, #0]
 8027a56:	7853      	ldrb	r3, [r2, #1]
 8027a58:	704b      	strb	r3, [r1, #1]
 8027a5a:	7893      	ldrb	r3, [r2, #2]
 8027a5c:	708b      	strb	r3, [r1, #2]
 8027a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a62:	2500      	movs	r5, #0
 8027a64:	e78a      	b.n	802797c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 8027a66:	2400      	movs	r4, #0
 8027a68:	e7a2      	b.n	80279b0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8027a6a:	4634      	mov	r4, r6
 8027a6c:	e7a0      	b.n	80279b0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8027a6e:	2000      	movs	r0, #0
 8027a70:	e7b9      	b.n	80279e6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 8027a72:	463b      	mov	r3, r7
 8027a74:	4638      	mov	r0, r7
 8027a76:	e7d0      	b.n	8027a1a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027a78:	2300      	movs	r3, #0
 8027a7a:	e7ce      	b.n	8027a1a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027a7c:	4633      	mov	r3, r6
 8027a7e:	e7cc      	b.n	8027a1a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	d0ec      	beq.n	8027a5e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8027a84:	78cc      	ldrb	r4, [r1, #3]
 8027a86:	435f      	muls	r7, r3
 8027a88:	7896      	ldrb	r6, [r2, #2]
 8027a8a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8027a8e:	fb03 f204 	mul.w	r2, r3, r4
 8027a92:	780d      	ldrb	r5, [r1, #0]
 8027a94:	1c50      	adds	r0, r2, #1
 8027a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8027a9a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027a9e:	191a      	adds	r2, r3, r4
 8027aa0:	4373      	muls	r3, r6
 8027aa2:	1200      	asrs	r0, r0, #8
 8027aa4:	1a12      	subs	r2, r2, r0
 8027aa6:	1a20      	subs	r0, r4, r0
 8027aa8:	784c      	ldrb	r4, [r1, #1]
 8027aaa:	b2d2      	uxtb	r2, r2
 8027aac:	fb00 7505 	mla	r5, r0, r5, r7
 8027ab0:	fb00 c404 	mla	r4, r0, r4, ip
 8027ab4:	70ca      	strb	r2, [r1, #3]
 8027ab6:	fb94 f4f2 	sdiv	r4, r4, r2
 8027aba:	704c      	strb	r4, [r1, #1]
 8027abc:	788c      	ldrb	r4, [r1, #2]
 8027abe:	fb00 3304 	mla	r3, r0, r4, r3
 8027ac2:	fb95 f5f2 	sdiv	r5, r5, r2
 8027ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8027aca:	700d      	strb	r5, [r1, #0]
 8027acc:	708b      	strb	r3, [r1, #2]
 8027ace:	e7c6      	b.n	8027a5e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8027ad0:	2003bd18 	.word	0x2003bd18

08027ad4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ad8:	b095      	sub	sp, #84	; 0x54
 8027ada:	461c      	mov	r4, r3
 8027adc:	4fc4      	ldr	r7, [pc, #784]	; (8027df0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 8027ade:	920d      	str	r2, [sp, #52]	; 0x34
 8027ae0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027ae2:	9013      	str	r0, [sp, #76]	; 0x4c
 8027ae4:	9108      	str	r1, [sp, #32]
 8027ae6:	6850      	ldr	r0, [r2, #4]
 8027ae8:	6812      	ldr	r2, [r2, #0]
 8027aea:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8027aee:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	; 0x7c
 8027af2:	fb00 1303 	mla	r3, r0, r3, r1
 8027af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027afa:	9307      	str	r3, [sp, #28]
 8027afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027afe:	689b      	ldr	r3, [r3, #8]
 8027b00:	3301      	adds	r3, #1
 8027b02:	f023 0301 	bic.w	r3, r3, #1
 8027b06:	930a      	str	r3, [sp, #40]	; 0x28
 8027b08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b0a:	681e      	ldr	r6, [r3, #0]
 8027b0c:	9b08      	ldr	r3, [sp, #32]
 8027b0e:	2b00      	cmp	r3, #0
 8027b10:	dc03      	bgt.n	8027b1a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b14:	2b00      	cmp	r3, #0
 8027b16:	f340 824e 	ble.w	8027fb6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b24:	1e48      	subs	r0, r1, #1
 8027b26:	f102 3cff 	add.w	ip, r2, #4294967295
 8027b2a:	2c00      	cmp	r4, #0
 8027b2c:	f340 80b3 	ble.w	8027c96 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027b30:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 8027b34:	ea4f 4325 	mov.w	r3, r5, asr #16
 8027b38:	d406      	bmi.n	8027b48 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027b3a:	4586      	cmp	lr, r0
 8027b3c:	da04      	bge.n	8027b48 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	db02      	blt.n	8027b48 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027b42:	4563      	cmp	r3, ip
 8027b44:	f2c0 80a8 	blt.w	8027c98 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8027b48:	f11e 0e01 	adds.w	lr, lr, #1
 8027b4c:	f100 809a 	bmi.w	8027c84 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027b50:	4571      	cmp	r1, lr
 8027b52:	f2c0 8097 	blt.w	8027c84 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027b56:	3301      	adds	r3, #1
 8027b58:	f100 8094 	bmi.w	8027c84 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027b5c:	429a      	cmp	r2, r3
 8027b5e:	f2c0 8091 	blt.w	8027c84 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027b62:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027b66:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8027b6a:	9409      	str	r4, [sp, #36]	; 0x24
 8027b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b6e:	2b00      	cmp	r3, #0
 8027b70:	f340 80b0 	ble.w	8027cd4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8027b74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b76:	1428      	asrs	r0, r5, #16
 8027b78:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8027b7c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027b80:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027b84:	ea5f 432b 	movs.w	r3, fp, asr #16
 8027b88:	f100 8134 	bmi.w	8027df4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8027b8c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8027b90:	4553      	cmp	r3, sl
 8027b92:	f280 812f 	bge.w	8027df4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8027b96:	2800      	cmp	r0, #0
 8027b98:	f2c0 812c 	blt.w	8027df4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8027b9c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027ba0:	4550      	cmp	r0, sl
 8027ba2:	f280 8127 	bge.w	8027df4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8027ba6:	fb00 3309 	mla	r3, r0, r9, r3
 8027baa:	0858      	lsrs	r0, r3, #1
 8027bac:	f816 c000 	ldrb.w	ip, [r6, r0]
 8027bb0:	07d8      	lsls	r0, r3, #31
 8027bb2:	bf54      	ite	pl
 8027bb4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027bb8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027bbc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8027bc4:	2a00      	cmp	r2, #0
 8027bc6:	f000 80cb 	beq.w	8027d60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8027bca:	1c58      	adds	r0, r3, #1
 8027bcc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027bd0:	07c0      	lsls	r0, r0, #31
 8027bd2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8027bd6:	bf54      	ite	pl
 8027bd8:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027bdc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027be0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027be4:	fa5f fe8e 	uxtb.w	lr, lr
 8027be8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8027bec:	b1c1      	cbz	r1, 8027c20 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8027bee:	444b      	add	r3, r9
 8027bf0:	0858      	lsrs	r0, r3, #1
 8027bf2:	f013 0f01 	tst.w	r3, #1
 8027bf6:	5c30      	ldrb	r0, [r6, r0]
 8027bf8:	bf0c      	ite	eq
 8027bfa:	f000 000f 	andeq.w	r0, r0, #15
 8027bfe:	1100      	asrne	r0, r0, #4
 8027c00:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c04:	b2c0      	uxtb	r0, r0
 8027c06:	900b      	str	r0, [sp, #44]	; 0x2c
 8027c08:	1c58      	adds	r0, r3, #1
 8027c0a:	0843      	lsrs	r3, r0, #1
 8027c0c:	07c0      	lsls	r0, r0, #31
 8027c0e:	5cf3      	ldrb	r3, [r6, r3]
 8027c10:	bf54      	ite	pl
 8027c12:	f003 030f 	andpl.w	r3, r3, #15
 8027c16:	111b      	asrmi	r3, r3, #4
 8027c18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027c1c:	b2db      	uxtb	r3, r3
 8027c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027c20:	b292      	uxth	r2, r2
 8027c22:	b289      	uxth	r1, r1
 8027c24:	fb02 f301 	mul.w	r3, r2, r1
 8027c28:	0112      	lsls	r2, r2, #4
 8027c2a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027c2e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027c32:	1ad2      	subs	r2, r2, r3
 8027c34:	b289      	uxth	r1, r1
 8027c36:	b292      	uxth	r2, r2
 8027c38:	1a40      	subs	r0, r0, r1
 8027c3a:	fa1f fe80 	uxth.w	lr, r0
 8027c3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027c40:	4342      	muls	r2, r0
 8027c42:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027c48:	fb01 c102 	mla	r1, r1, r2, ip
 8027c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027c4e:	f897 c000 	ldrb.w	ip, [r7]
 8027c52:	fb03 1302 	mla	r3, r3, r2, r1
 8027c56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c5a:	2bff      	cmp	r3, #255	; 0xff
 8027c5c:	f040 8091 	bne.w	8027d82 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8027c60:	f888 c000 	strb.w	ip, [r8]
 8027c64:	787b      	ldrb	r3, [r7, #1]
 8027c66:	f888 3001 	strb.w	r3, [r8, #1]
 8027c6a:	78bb      	ldrb	r3, [r7, #2]
 8027c6c:	f888 3002 	strb.w	r3, [r8, #2]
 8027c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027c72:	f108 0804 	add.w	r8, r8, #4
 8027c76:	449b      	add	fp, r3
 8027c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027c7a:	441d      	add	r5, r3
 8027c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c7e:	3b01      	subs	r3, #1
 8027c80:	9309      	str	r3, [sp, #36]	; 0x24
 8027c82:	e773      	b.n	8027b6c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027c84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027c86:	3c01      	subs	r4, #1
 8027c88:	449b      	add	fp, r3
 8027c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027c8c:	441d      	add	r5, r3
 8027c8e:	9b07      	ldr	r3, [sp, #28]
 8027c90:	3304      	adds	r3, #4
 8027c92:	9307      	str	r3, [sp, #28]
 8027c94:	e749      	b.n	8027b2a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027c96:	d023      	beq.n	8027ce0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027c98:	1e63      	subs	r3, r4, #1
 8027c9a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8027c9c:	fb00 b003 	mla	r0, r0, r3, fp
 8027ca0:	1400      	asrs	r0, r0, #16
 8027ca2:	f53f af5e 	bmi.w	8027b62 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027ca6:	3901      	subs	r1, #1
 8027ca8:	4288      	cmp	r0, r1
 8027caa:	f6bf af5a 	bge.w	8027b62 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027cae:	9922      	ldr	r1, [sp, #136]	; 0x88
 8027cb0:	fb01 5303 	mla	r3, r1, r3, r5
 8027cb4:	141b      	asrs	r3, r3, #16
 8027cb6:	f53f af54 	bmi.w	8027b62 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027cba:	3a01      	subs	r2, #1
 8027cbc:	4293      	cmp	r3, r2
 8027cbe:	f6bf af50 	bge.w	8027b62 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027cc2:	9b07      	ldr	r3, [sp, #28]
 8027cc4:	46a0      	mov	r8, r4
 8027cc6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8027cca:	1d1a      	adds	r2, r3, #4
 8027ccc:	f1b8 0f00 	cmp.w	r8, #0
 8027cd0:	f300 80af 	bgt.w	8027e32 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027cd4:	9b07      	ldr	r3, [sp, #28]
 8027cd6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027cda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027cde:	9307      	str	r3, [sp, #28]
 8027ce0:	9b08      	ldr	r3, [sp, #32]
 8027ce2:	2b00      	cmp	r3, #0
 8027ce4:	f340 8167 	ble.w	8027fb6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027cec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027cee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027cf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027cf6:	eef0 6a62 	vmov.f32	s13, s5
 8027cfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027cfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027d02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d06:	ee16 ba90 	vmov	fp, s13
 8027d0a:	eef0 6a43 	vmov.f32	s13, s6
 8027d0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d12:	ee16 5a90 	vmov	r5, s13
 8027d16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027d1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027d1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027d22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027d26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027d2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027d2e:	ee12 2a90 	vmov	r2, s5
 8027d32:	eef0 2a47 	vmov.f32	s5, s14
 8027d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d3a:	ee13 2a10 	vmov	r2, s6
 8027d3e:	9321      	str	r3, [sp, #132]	; 0x84
 8027d40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027d42:	eeb0 3a67 	vmov.f32	s6, s15
 8027d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d4a:	9322      	str	r3, [sp, #136]	; 0x88
 8027d4c:	9b08      	ldr	r3, [sp, #32]
 8027d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027d50:	3b01      	subs	r3, #1
 8027d52:	9308      	str	r3, [sp, #32]
 8027d54:	bf08      	it	eq
 8027d56:	4614      	moveq	r4, r2
 8027d58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027d5a:	bf18      	it	ne
 8027d5c:	461c      	movne	r4, r3
 8027d5e:	e6d5      	b.n	8027b0c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027d60:	2900      	cmp	r1, #0
 8027d62:	f43f af5d 	beq.w	8027c20 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8027d66:	eb09 0003 	add.w	r0, r9, r3
 8027d6a:	0843      	lsrs	r3, r0, #1
 8027d6c:	07c0      	lsls	r0, r0, #31
 8027d6e:	5cf3      	ldrb	r3, [r6, r3]
 8027d70:	bf54      	ite	pl
 8027d72:	f003 030f 	andpl.w	r3, r3, #15
 8027d76:	111b      	asrmi	r3, r3, #4
 8027d78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027d7c:	b2db      	uxtb	r3, r3
 8027d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d80:	e74e      	b.n	8027c20 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8027d82:	2b00      	cmp	r3, #0
 8027d84:	f43f af74 	beq.w	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027d88:	f898 a003 	ldrb.w	sl, [r8, #3]
 8027d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8027d90:	78ba      	ldrb	r2, [r7, #2]
 8027d92:	fb03 f00a 	mul.w	r0, r3, sl
 8027d96:	f897 e001 	ldrb.w	lr, [r7, #1]
 8027d9a:	9210      	str	r2, [sp, #64]	; 0x40
 8027d9c:	eb03 020a 	add.w	r2, r3, sl
 8027da0:	1c41      	adds	r1, r0, #1
 8027da2:	fb03 fe0e 	mul.w	lr, r3, lr
 8027da6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027daa:	1208      	asrs	r0, r1, #8
 8027dac:	ebaa 0100 	sub.w	r1, sl, r0
 8027db0:	1a12      	subs	r2, r2, r0
 8027db2:	f898 0000 	ldrb.w	r0, [r8]
 8027db6:	b2d2      	uxtb	r2, r2
 8027db8:	fb01 cc00 	mla	ip, r1, r0, ip
 8027dbc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8027dc0:	f888 2003 	strb.w	r2, [r8, #3]
 8027dc4:	fb01 ee00 	mla	lr, r1, r0, lr
 8027dc8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027dca:	fb9c fcf2 	sdiv	ip, ip, r2
 8027dce:	4343      	muls	r3, r0
 8027dd0:	f888 c000 	strb.w	ip, [r8]
 8027dd4:	f898 c002 	ldrb.w	ip, [r8, #2]
 8027dd8:	fb01 330c 	mla	r3, r1, ip, r3
 8027ddc:	fb9e fef2 	sdiv	lr, lr, r2
 8027de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8027de4:	f888 e001 	strb.w	lr, [r8, #1]
 8027de8:	f888 3002 	strb.w	r3, [r8, #2]
 8027dec:	e740      	b.n	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027dee:	bf00      	nop
 8027df0:	2003bd18 	.word	0x2003bd18
 8027df4:	f113 0a01 	adds.w	sl, r3, #1
 8027df8:	f53f af3a 	bmi.w	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027dfc:	45d4      	cmp	ip, sl
 8027dfe:	f6ff af37 	blt.w	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027e02:	f110 0a01 	adds.w	sl, r0, #1
 8027e06:	f53f af33 	bmi.w	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027e0a:	45d6      	cmp	lr, sl
 8027e0c:	f6ff af30 	blt.w	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027e10:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8027e14:	fa0f f38e 	sxth.w	r3, lr
 8027e18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027e1a:	9301      	str	r3, [sp, #4]
 8027e1c:	fa0f f38c 	sxth.w	r3, ip
 8027e20:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8027e24:	9300      	str	r3, [sp, #0]
 8027e26:	4632      	mov	r2, r6
 8027e28:	464b      	mov	r3, r9
 8027e2a:	4641      	mov	r1, r8
 8027e2c:	f7ff fd80 	bl	8027930 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 8027e30:	e71e      	b.n	8027c70 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8027e32:	ea4f 412b 	mov.w	r1, fp, asr #16
 8027e36:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 8027e3a:	142b      	asrs	r3, r5, #16
 8027e3c:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 8027e40:	fb09 1303 	mla	r3, r9, r3, r1
 8027e44:	0859      	lsrs	r1, r3, #1
 8027e46:	07d8      	lsls	r0, r3, #31
 8027e48:	5c71      	ldrb	r1, [r6, r1]
 8027e4a:	bf54      	ite	pl
 8027e4c:	f001 010f 	andpl.w	r1, r1, #15
 8027e50:	1109      	asrmi	r1, r1, #4
 8027e52:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027e56:	b2c9      	uxtb	r1, r1
 8027e58:	f1bc 0f00 	cmp.w	ip, #0
 8027e5c:	d062      	beq.n	8027f24 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8027e5e:	f103 0a01 	add.w	sl, r3, #1
 8027e62:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027e66:	f01a 0f01 	tst.w	sl, #1
 8027e6a:	5c30      	ldrb	r0, [r6, r0]
 8027e6c:	bf0c      	ite	eq
 8027e6e:	f000 000f 	andeq.w	r0, r0, #15
 8027e72:	1100      	asrne	r0, r0, #4
 8027e74:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e78:	b2c0      	uxtb	r0, r0
 8027e7a:	9011      	str	r0, [sp, #68]	; 0x44
 8027e7c:	f1be 0f00 	cmp.w	lr, #0
 8027e80:	d019      	beq.n	8027eb6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027e82:	444b      	add	r3, r9
 8027e84:	0858      	lsrs	r0, r3, #1
 8027e86:	f013 0f01 	tst.w	r3, #1
 8027e8a:	f103 0301 	add.w	r3, r3, #1
 8027e8e:	5c30      	ldrb	r0, [r6, r0]
 8027e90:	bf0c      	ite	eq
 8027e92:	f000 000f 	andeq.w	r0, r0, #15
 8027e96:	1100      	asrne	r0, r0, #4
 8027e98:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e9c:	b2c0      	uxtb	r0, r0
 8027e9e:	900c      	str	r0, [sp, #48]	; 0x30
 8027ea0:	0858      	lsrs	r0, r3, #1
 8027ea2:	07db      	lsls	r3, r3, #31
 8027ea4:	5c30      	ldrb	r0, [r6, r0]
 8027ea6:	bf54      	ite	pl
 8027ea8:	f000 000f 	andpl.w	r0, r0, #15
 8027eac:	1100      	asrmi	r0, r0, #4
 8027eae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027eb2:	b2c0      	uxtb	r0, r0
 8027eb4:	9012      	str	r0, [sp, #72]	; 0x48
 8027eb6:	fa1f fc8c 	uxth.w	ip, ip
 8027eba:	fa1f fe8e 	uxth.w	lr, lr
 8027ebe:	fb0c f30e 	mul.w	r3, ip, lr
 8027ec2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027ec6:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 8027eca:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 8027ece:	ebac 0c03 	sub.w	ip, ip, r3
 8027ed2:	fa1f fe8e 	uxth.w	lr, lr
 8027ed6:	fa1f fc8c 	uxth.w	ip, ip
 8027eda:	eba0 000e 	sub.w	r0, r0, lr
 8027ede:	fa1f fa80 	uxth.w	sl, r0
 8027ee2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027ee4:	fb00 fc0c 	mul.w	ip, r0, ip
 8027ee8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027eea:	fb01 c10a 	mla	r1, r1, sl, ip
 8027eee:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027ef2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027ef4:	fb03 e301 	mla	r3, r3, r1, lr
 8027ef8:	f897 e000 	ldrb.w	lr, [r7]
 8027efc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f00:	2bff      	cmp	r3, #255	; 0xff
 8027f02:	d11f      	bne.n	8027f44 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027f04:	f802 ec04 	strb.w	lr, [r2, #-4]
 8027f08:	787b      	ldrb	r3, [r7, #1]
 8027f0a:	f802 3c03 	strb.w	r3, [r2, #-3]
 8027f0e:	78bb      	ldrb	r3, [r7, #2]
 8027f10:	f802 3c02 	strb.w	r3, [r2, #-2]
 8027f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027f16:	3204      	adds	r2, #4
 8027f18:	f108 38ff 	add.w	r8, r8, #4294967295
 8027f1c:	449b      	add	fp, r3
 8027f1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027f20:	441d      	add	r5, r3
 8027f22:	e6d3      	b.n	8027ccc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8027f24:	f1be 0f00 	cmp.w	lr, #0
 8027f28:	d0c5      	beq.n	8027eb6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027f2a:	444b      	add	r3, r9
 8027f2c:	0858      	lsrs	r0, r3, #1
 8027f2e:	07db      	lsls	r3, r3, #31
 8027f30:	5c30      	ldrb	r0, [r6, r0]
 8027f32:	bf54      	ite	pl
 8027f34:	f000 000f 	andpl.w	r0, r0, #15
 8027f38:	1100      	asrmi	r0, r0, #4
 8027f3a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027f3e:	b2c0      	uxtb	r0, r0
 8027f40:	900c      	str	r0, [sp, #48]	; 0x30
 8027f42:	e7b8      	b.n	8027eb6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	d0e5      	beq.n	8027f14 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8027f48:	78b9      	ldrb	r1, [r7, #2]
 8027f4a:	fb03 fe0e 	mul.w	lr, r3, lr
 8027f4e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8027f52:	9110      	str	r1, [sp, #64]	; 0x40
 8027f54:	fb03 f100 	mul.w	r1, r3, r0
 8027f58:	f897 a001 	ldrb.w	sl, [r7, #1]
 8027f5c:	f101 0c01 	add.w	ip, r1, #1
 8027f60:	fb03 fa0a 	mul.w	sl, r3, sl
 8027f64:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027f68:	1819      	adds	r1, r3, r0
 8027f6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027f6e:	eba0 000c 	sub.w	r0, r0, ip
 8027f72:	eba1 010c 	sub.w	r1, r1, ip
 8027f76:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 8027f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8027f7c:	b2c9      	uxtb	r1, r1
 8027f7e:	fb00 ee0c 	mla	lr, r0, ip, lr
 8027f82:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8027f86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8027f8a:	fb00 aa0c 	mla	sl, r0, ip, sl
 8027f8e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027f90:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8027f94:	4343      	muls	r3, r0
 8027f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027f98:	fb00 330c 	mla	r3, r0, ip, r3
 8027f9c:	fb9e fef1 	sdiv	lr, lr, r1
 8027fa0:	fb9a faf1 	sdiv	sl, sl, r1
 8027fa4:	fb93 f3f1 	sdiv	r3, r3, r1
 8027fa8:	f802 ec04 	strb.w	lr, [r2, #-4]
 8027fac:	f802 ac03 	strb.w	sl, [r2, #-3]
 8027fb0:	f802 3c02 	strb.w	r3, [r2, #-2]
 8027fb4:	e7ae      	b.n	8027f14 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8027fb6:	b015      	add	sp, #84	; 0x54
 8027fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027fbc <CRC_Lock>:
 8027fbc:	4a20      	ldr	r2, [pc, #128]	; (8028040 <CRC_Lock+0x84>)
 8027fbe:	b530      	push	{r4, r5, lr}
 8027fc0:	6813      	ldr	r3, [r2, #0]
 8027fc2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8027fc6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8027fca:	f023 0301 	bic.w	r3, r3, #1
 8027fce:	6013      	str	r3, [r2, #0]
 8027fd0:	4b1c      	ldr	r3, [pc, #112]	; (8028044 <CRC_Lock+0x88>)
 8027fd2:	681a      	ldr	r2, [r3, #0]
 8027fd4:	4022      	ands	r2, r4
 8027fd6:	42aa      	cmp	r2, r5
 8027fd8:	d005      	beq.n	8027fe6 <CRC_Lock+0x2a>
 8027fda:	681b      	ldr	r3, [r3, #0]
 8027fdc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027fe0:	4023      	ands	r3, r4
 8027fe2:	4293      	cmp	r3, r2
 8027fe4:	d124      	bne.n	8028030 <CRC_Lock+0x74>
 8027fe6:	4b18      	ldr	r3, [pc, #96]	; (8028048 <CRC_Lock+0x8c>)
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	bb0b      	cbnz	r3, 8028030 <CRC_Lock+0x74>
 8027fec:	4b17      	ldr	r3, [pc, #92]	; (802804c <CRC_Lock+0x90>)
 8027fee:	681a      	ldr	r2, [r3, #0]
 8027ff0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027ff4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8027ff8:	d00d      	beq.n	8028016 <CRC_Lock+0x5a>
 8027ffa:	681a      	ldr	r2, [r3, #0]
 8027ffc:	f240 4483 	movw	r4, #1155	; 0x483
 8028000:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028004:	42a2      	cmp	r2, r4
 8028006:	d006      	beq.n	8028016 <CRC_Lock+0x5a>
 8028008:	681b      	ldr	r3, [r3, #0]
 802800a:	f240 4285 	movw	r2, #1157	; 0x485
 802800e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028012:	4293      	cmp	r3, r2
 8028014:	d10c      	bne.n	8028030 <CRC_Lock+0x74>
 8028016:	4b0e      	ldr	r3, [pc, #56]	; (8028050 <CRC_Lock+0x94>)
 8028018:	2201      	movs	r2, #1
 802801a:	601a      	str	r2, [r3, #0]
 802801c:	681a      	ldr	r2, [r3, #0]
 802801e:	2a00      	cmp	r2, #0
 8028020:	d1fc      	bne.n	802801c <CRC_Lock+0x60>
 8028022:	4b0c      	ldr	r3, [pc, #48]	; (8028054 <CRC_Lock+0x98>)
 8028024:	6018      	str	r0, [r3, #0]
 8028026:	6818      	ldr	r0, [r3, #0]
 8028028:	1a43      	subs	r3, r0, r1
 802802a:	4258      	negs	r0, r3
 802802c:	4158      	adcs	r0, r3
 802802e:	bd30      	pop	{r4, r5, pc}
 8028030:	4b09      	ldr	r3, [pc, #36]	; (8028058 <CRC_Lock+0x9c>)
 8028032:	2201      	movs	r2, #1
 8028034:	601a      	str	r2, [r3, #0]
 8028036:	681a      	ldr	r2, [r3, #0]
 8028038:	2a00      	cmp	r2, #0
 802803a:	d1fc      	bne.n	8028036 <CRC_Lock+0x7a>
 802803c:	4b07      	ldr	r3, [pc, #28]	; (802805c <CRC_Lock+0xa0>)
 802803e:	e7f1      	b.n	8028024 <CRC_Lock+0x68>
 8028040:	e0002000 	.word	0xe0002000
 8028044:	e000ed00 	.word	0xe000ed00
 8028048:	e0042000 	.word	0xe0042000
 802804c:	5c001000 	.word	0x5c001000
 8028050:	58024c08 	.word	0x58024c08
 8028054:	58024c00 	.word	0x58024c00
 8028058:	40023008 	.word	0x40023008
 802805c:	40023000 	.word	0x40023000

08028060 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028060:	6101      	str	r1, [r0, #16]
 8028062:	4770      	bx	lr

08028064 <_ZN8touchgfx8Gestures4tickEv>:
 8028064:	7b83      	ldrb	r3, [r0, #14]
 8028066:	b14b      	cbz	r3, 802807c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028068:	8903      	ldrh	r3, [r0, #8]
 802806a:	3301      	adds	r3, #1
 802806c:	b29b      	uxth	r3, r3
 802806e:	2b07      	cmp	r3, #7
 8028070:	8103      	strh	r3, [r0, #8]
 8028072:	bf81      	itttt	hi
 8028074:	2300      	movhi	r3, #0
 8028076:	8143      	strhhi	r3, [r0, #10]
 8028078:	8183      	strhhi	r3, [r0, #12]
 802807a:	7383      	strbhi	r3, [r0, #14]
 802807c:	4770      	bx	lr
	...

08028080 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028080:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028084:	4698      	mov	r8, r3
 8028086:	8883      	ldrh	r3, [r0, #4]
 8028088:	4604      	mov	r4, r0
 802808a:	4617      	mov	r7, r2
 802808c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028090:	eba8 0303 	sub.w	r3, r8, r3
 8028094:	4a19      	ldr	r2, [pc, #100]	; (80280fc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028096:	460e      	mov	r6, r1
 8028098:	b21b      	sxth	r3, r3
 802809a:	88c1      	ldrh	r1, [r0, #6]
 802809c:	9200      	str	r2, [sp, #0]
 802809e:	2000      	movs	r0, #0
 80280a0:	2b00      	cmp	r3, #0
 80280a2:	8aa2      	ldrh	r2, [r4, #20]
 80280a4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80280a8:	bfb8      	it	lt
 80280aa:	425b      	neglt	r3, r3
 80280ac:	f88d 0004 	strb.w	r0, [sp, #4]
 80280b0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80280b4:	b21b      	sxth	r3, r3
 80280b6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80280ba:	f8ad 500c 	strh.w	r5, [sp, #12]
 80280be:	4293      	cmp	r3, r2
 80280c0:	dc07      	bgt.n	80280d2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80280c2:	1a69      	subs	r1, r5, r1
 80280c4:	b209      	sxth	r1, r1
 80280c6:	2900      	cmp	r1, #0
 80280c8:	bfb8      	it	lt
 80280ca:	4249      	neglt	r1, r1
 80280cc:	b209      	sxth	r1, r1
 80280ce:	428a      	cmp	r2, r1
 80280d0:	da10      	bge.n	80280f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80280d2:	6920      	ldr	r0, [r4, #16]
 80280d4:	4669      	mov	r1, sp
 80280d6:	eba8 0606 	sub.w	r6, r8, r6
 80280da:	1bef      	subs	r7, r5, r7
 80280dc:	6803      	ldr	r3, [r0, #0]
 80280de:	685b      	ldr	r3, [r3, #4]
 80280e0:	4798      	blx	r3
 80280e2:	2300      	movs	r3, #0
 80280e4:	2001      	movs	r0, #1
 80280e6:	8166      	strh	r6, [r4, #10]
 80280e8:	8123      	strh	r3, [r4, #8]
 80280ea:	81a7      	strh	r7, [r4, #12]
 80280ec:	f8a4 8004 	strh.w	r8, [r4, #4]
 80280f0:	80e5      	strh	r5, [r4, #6]
 80280f2:	73a0      	strb	r0, [r4, #14]
 80280f4:	b004      	add	sp, #16
 80280f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80280fa:	bf00      	nop
 80280fc:	0802d3a8 	.word	0x0802d3a8

08028100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028102:	461e      	mov	r6, r3
 8028104:	1e4b      	subs	r3, r1, #1
 8028106:	b085      	sub	sp, #20
 8028108:	4604      	mov	r4, r0
 802810a:	2b01      	cmp	r3, #1
 802810c:	460d      	mov	r5, r1
 802810e:	4617      	mov	r7, r2
 8028110:	d84b      	bhi.n	80281aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028112:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028116:	1cd3      	adds	r3, r2, #3
 8028118:	b29b      	uxth	r3, r3
 802811a:	2b06      	cmp	r3, #6
 802811c:	d916      	bls.n	802814c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802811e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80281c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028122:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028126:	f8cd c004 	str.w	ip, [sp, #4]
 802812a:	f04f 0c00 	mov.w	ip, #0
 802812e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028132:	6900      	ldr	r0, [r0, #16]
 8028134:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028138:	a901      	add	r1, sp, #4
 802813a:	f88d c008 	strb.w	ip, [sp, #8]
 802813e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028142:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028146:	6803      	ldr	r3, [r0, #0]
 8028148:	689b      	ldr	r3, [r3, #8]
 802814a:	4798      	blx	r3
 802814c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028150:	1cd3      	adds	r3, r2, #3
 8028152:	b29b      	uxth	r3, r3
 8028154:	2b06      	cmp	r3, #6
 8028156:	d916      	bls.n	8028186 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028158:	f8df c064 	ldr.w	ip, [pc, #100]	; 80281c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802815c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028160:	f8cd c004 	str.w	ip, [sp, #4]
 8028164:	f04f 0c01 	mov.w	ip, #1
 8028168:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802816c:	6920      	ldr	r0, [r4, #16]
 802816e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028172:	a901      	add	r1, sp, #4
 8028174:	f88d c008 	strb.w	ip, [sp, #8]
 8028178:	f8ad 200a 	strh.w	r2, [sp, #10]
 802817c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028180:	6803      	ldr	r3, [r0, #0]
 8028182:	689b      	ldr	r3, [r3, #8]
 8028184:	4798      	blx	r3
 8028186:	4b0d      	ldr	r3, [pc, #52]	; (80281bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028188:	a901      	add	r1, sp, #4
 802818a:	6920      	ldr	r0, [r4, #16]
 802818c:	9301      	str	r3, [sp, #4]
 802818e:	2300      	movs	r3, #0
 8028190:	f88d 5008 	strb.w	r5, [sp, #8]
 8028194:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028198:	f8ad 600c 	strh.w	r6, [sp, #12]
 802819c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80281a0:	6803      	ldr	r3, [r0, #0]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	4798      	blx	r3
 80281a6:	b005      	add	sp, #20
 80281a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80281aa:	2900      	cmp	r1, #0
 80281ac:	d1eb      	bne.n	8028186 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80281ae:	80a2      	strh	r2, [r4, #4]
 80281b0:	80c6      	strh	r6, [r0, #6]
 80281b2:	60a1      	str	r1, [r4, #8]
 80281b4:	81a1      	strh	r1, [r4, #12]
 80281b6:	73a1      	strb	r1, [r4, #14]
 80281b8:	e7e5      	b.n	8028186 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80281ba:	bf00      	nop
 80281bc:	0802d394 	.word	0x0802d394
 80281c0:	0802d3bc 	.word	0x0802d3bc

080281c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80281c4:	10c9      	asrs	r1, r1, #3
 80281c6:	2900      	cmp	r1, #0
 80281c8:	bfb8      	it	lt
 80281ca:	4249      	neglt	r1, r1
 80281cc:	2801      	cmp	r0, #1
 80281ce:	d108      	bne.n	80281e2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80281d0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80281d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80281d8:	4601      	mov	r1, r0
 80281da:	dd02      	ble.n	80281e2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80281dc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80281e0:	4770      	bx	lr
 80281e2:	29ff      	cmp	r1, #255	; 0xff
 80281e4:	bfa8      	it	ge
 80281e6:	21ff      	movge	r1, #255	; 0xff
 80281e8:	4608      	mov	r0, r1
 80281ea:	4770      	bx	lr

080281ec <_ZN8touchgfx10Rasterizer6lineToEii>:
 80281ec:	b410      	push	{r4}
 80281ee:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80281f2:	429c      	cmp	r4, r3
 80281f4:	d803      	bhi.n	80281fe <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80281f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80281fa:	f7ef be3d 	b.w	8017e78 <_ZN8touchgfx7Outline6lineToEii>
 80281fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028202:	4770      	bx	lr

08028204 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028208:	b08b      	sub	sp, #44	; 0x2c
 802820a:	4606      	mov	r6, r0
 802820c:	468a      	mov	sl, r1
 802820e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028212:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8028216:	9308      	str	r3, [sp, #32]
 8028218:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802821c:	9309      	str	r3, [sp, #36]	; 0x24
 802821e:	f7ef ff96 	bl	801814e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028222:	68b5      	ldr	r5, [r6, #8]
 8028224:	4604      	mov	r4, r0
 8028226:	2d00      	cmp	r5, #0
 8028228:	d044      	beq.n	80282b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802822a:	6873      	ldr	r3, [r6, #4]
 802822c:	42ab      	cmp	r3, r5
 802822e:	d33d      	bcc.n	80282ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028230:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028234:	f04f 0800 	mov.w	r8, #0
 8028238:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802823c:	eb02 0b03 	add.w	fp, r2, r3
 8028240:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028244:	fb02 1203 	mla	r2, r2, r3, r1
 8028248:	9205      	str	r2, [sp, #20]
 802824a:	1e6a      	subs	r2, r5, #1
 802824c:	9204      	str	r2, [sp, #16]
 802824e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028252:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028256:	454b      	cmp	r3, r9
 8028258:	463a      	mov	r2, r7
 802825a:	d008      	beq.n	802826e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802825c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8028260:	eb03 0b09 	add.w	fp, r3, r9
 8028264:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028268:	fb03 1309 	mla	r3, r3, r9, r1
 802826c:	9305      	str	r3, [sp, #20]
 802826e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028272:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028276:	4498      	add	r8, r3
 8028278:	9b04      	ldr	r3, [sp, #16]
 802827a:	3b01      	subs	r3, #1
 802827c:	9304      	str	r3, [sp, #16]
 802827e:	9b04      	ldr	r3, [sp, #16]
 8028280:	3301      	adds	r3, #1
 8028282:	d015      	beq.n	80282b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028284:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028288:	42bb      	cmp	r3, r7
 802828a:	d117      	bne.n	80282bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802828c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028290:	9b04      	ldr	r3, [sp, #16]
 8028292:	4548      	cmp	r0, r9
 8028294:	f103 33ff 	add.w	r3, r3, #4294967295
 8028298:	d17d      	bne.n	8028396 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802829a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802829e:	4401      	add	r1, r0
 80282a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80282a4:	4480      	add	r8, r0
 80282a6:	e7e9      	b.n	802827c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80282a8:	461f      	mov	r7, r3
 80282aa:	e042      	b.n	8028332 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80282ac:	2000      	movs	r0, #0
 80282ae:	e002      	b.n	80282b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80282b0:	2900      	cmp	r1, #0
 80282b2:	d16d      	bne.n	8028390 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80282b4:	2001      	movs	r0, #1
 80282b6:	b00b      	add	sp, #44	; 0x2c
 80282b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282bc:	b379      	cbz	r1, 802831e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80282be:	2f00      	cmp	r7, #0
 80282c0:	db29      	blt.n	8028316 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80282c2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80282c6:	42bb      	cmp	r3, r7
 80282c8:	dd25      	ble.n	8028316 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80282ca:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80282ce:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80282d2:	f7ff ff77 	bl	80281c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80282d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80282d8:	fb10 f003 	smulbb	r0, r0, r3
 80282dc:	b280      	uxth	r0, r0
 80282de:	1c41      	adds	r1, r0, #1
 80282e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80282e4:	1209      	asrs	r1, r1, #8
 80282e6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80282ea:	d014      	beq.n	8028316 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80282ec:	b2c9      	uxtb	r1, r1
 80282ee:	9808      	ldr	r0, [sp, #32]
 80282f0:	b2ba      	uxth	r2, r7
 80282f2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80282f4:	9102      	str	r1, [sp, #8]
 80282f6:	2101      	movs	r1, #1
 80282f8:	4413      	add	r3, r2
 80282fa:	4402      	add	r2, r0
 80282fc:	9101      	str	r1, [sp, #4]
 80282fe:	fa0f f18b 	sxth.w	r1, fp
 8028302:	f8da 0000 	ldr.w	r0, [sl]
 8028306:	b21b      	sxth	r3, r3
 8028308:	9100      	str	r1, [sp, #0]
 802830a:	b212      	sxth	r2, r2
 802830c:	6941      	ldr	r1, [r0, #20]
 802830e:	4650      	mov	r0, sl
 8028310:	460d      	mov	r5, r1
 8028312:	9905      	ldr	r1, [sp, #20]
 8028314:	47a8      	blx	r5
 8028316:	9b04      	ldr	r3, [sp, #16]
 8028318:	1c7a      	adds	r2, r7, #1
 802831a:	3301      	adds	r3, #1
 802831c:	d0ca      	beq.n	80282b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802831e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028322:	1abb      	subs	r3, r7, r2
 8028324:	2b00      	cmp	r3, #0
 8028326:	dd31      	ble.n	802838c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028328:	2a00      	cmp	r2, #0
 802832a:	dabd      	bge.n	80282a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802832c:	2f00      	cmp	r7, #0
 802832e:	dd2d      	ble.n	802838c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028330:	2200      	movs	r2, #0
 8028332:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8028336:	19d1      	adds	r1, r2, r7
 8028338:	4299      	cmp	r1, r3
 802833a:	db02      	blt.n	8028342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802833c:	1a9f      	subs	r7, r3, r2
 802833e:	2f00      	cmp	r7, #0
 8028340:	dd24      	ble.n	802838c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028342:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8028346:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802834a:	f7ff ff3b 	bl	80281c4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028350:	fb10 f003 	smulbb	r0, r0, r3
 8028354:	b280      	uxth	r0, r0
 8028356:	1c41      	adds	r1, r0, #1
 8028358:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802835c:	1209      	asrs	r1, r1, #8
 802835e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8028362:	d013      	beq.n	802838c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028364:	b292      	uxth	r2, r2
 8028366:	9808      	ldr	r0, [sp, #32]
 8028368:	b2c9      	uxtb	r1, r1
 802836a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802836c:	b23f      	sxth	r7, r7
 802836e:	4413      	add	r3, r2
 8028370:	9102      	str	r1, [sp, #8]
 8028372:	4402      	add	r2, r0
 8028374:	fa0f f18b 	sxth.w	r1, fp
 8028378:	f8da 0000 	ldr.w	r0, [sl]
 802837c:	b21b      	sxth	r3, r3
 802837e:	9100      	str	r1, [sp, #0]
 8028380:	b212      	sxth	r2, r2
 8028382:	9701      	str	r7, [sp, #4]
 8028384:	9905      	ldr	r1, [sp, #20]
 8028386:	6947      	ldr	r7, [r0, #20]
 8028388:	4650      	mov	r0, sl
 802838a:	47b8      	blx	r7
 802838c:	464b      	mov	r3, r9
 802838e:	e75e      	b.n	802824e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8028390:	2f00      	cmp	r7, #0
 8028392:	da96      	bge.n	80282c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8028394:	e78e      	b.n	80282b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028396:	2900      	cmp	r1, #0
 8028398:	d0f8      	beq.n	802838c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802839a:	e790      	b.n	80282be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802839c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802839c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80283a0:	4b4b      	ldr	r3, [pc, #300]	; (80284d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 80283a2:	2500      	movs	r5, #0
 80283a4:	f100 0620 	add.w	r6, r0, #32
 80283a8:	4604      	mov	r4, r0
 80283aa:	f100 0718 	add.w	r7, r0, #24
 80283ae:	4690      	mov	r8, r2
 80283b0:	e9c0 3100 	strd	r3, r1, [r0]
 80283b4:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80283b8:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80283bc:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80283c0:	4630      	mov	r0, r6
 80283c2:	f7ef f89f 	bl	8017504 <_ZN8touchgfx7OutlineC1Ev>
 80283c6:	2301      	movs	r3, #1
 80283c8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80283cc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80283d0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80283d4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80283d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80283dc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80283e0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80283e4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80283e8:	9500      	str	r5, [sp, #0]
 80283ea:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80283ee:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80283f2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80283f6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80283fa:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80283fe:	4410      	add	r0, r2
 8028400:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8028404:	b280      	uxth	r0, r0
 8028406:	fa0f fa80 	sxth.w	sl, r0
 802840a:	45aa      	cmp	sl, r5
 802840c:	dd5c      	ble.n	80284c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802840e:	4591      	cmp	r9, r2
 8028410:	dd5a      	ble.n	80284c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8028412:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8028416:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802841a:	440b      	add	r3, r1
 802841c:	b29b      	uxth	r3, r3
 802841e:	b21d      	sxth	r5, r3
 8028420:	2d00      	cmp	r5, #0
 8028422:	dd51      	ble.n	80284c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8028424:	458e      	cmp	lr, r1
 8028426:	dd4f      	ble.n	80284c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8028428:	45d1      	cmp	r9, sl
 802842a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802842e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8028432:	bfb8      	it	lt
 8028434:	fa1f f089 	uxthlt.w	r0, r9
 8028438:	45ae      	cmp	lr, r5
 802843a:	f8ad 2000 	strh.w	r2, [sp]
 802843e:	bfb8      	it	lt
 8028440:	fa1f f38e 	uxthlt.w	r3, lr
 8028444:	1a80      	subs	r0, r0, r2
 8028446:	f8ad 1002 	strh.w	r1, [sp, #2]
 802844a:	1a5b      	subs	r3, r3, r1
 802844c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8028450:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028454:	466d      	mov	r5, sp
 8028456:	e895 0003 	ldmia.w	r5, {r0, r1}
 802845a:	e887 0003 	stmia.w	r7, {r0, r1}
 802845e:	f8dc 3000 	ldr.w	r3, [ip]
 8028462:	4660      	mov	r0, ip
 8028464:	4639      	mov	r1, r7
 8028466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028468:	4798      	blx	r3
 802846a:	6861      	ldr	r1, [r4, #4]
 802846c:	4628      	mov	r0, r5
 802846e:	3104      	adds	r1, #4
 8028470:	f7f1 f9cc 	bl	801980c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028474:	4638      	mov	r0, r7
 8028476:	f7f1 f9a1 	bl	80197bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802847a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802847e:	f8bd 2000 	ldrh.w	r2, [sp]
 8028482:	4630      	mov	r0, r6
 8028484:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8028488:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802848c:	f7ef f81f 	bl	80174ce <_ZN8touchgfx7Outline5resetEv>
 8028490:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028494:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8028498:	4620      	mov	r0, r4
 802849a:	015b      	lsls	r3, r3, #5
 802849c:	60a3      	str	r3, [r4, #8]
 802849e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80284a2:	015b      	lsls	r3, r3, #5
 80284a4:	60e3      	str	r3, [r4, #12]
 80284a6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80284aa:	015b      	lsls	r3, r3, #5
 80284ac:	6123      	str	r3, [r4, #16]
 80284ae:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80284b2:	015b      	lsls	r3, r3, #5
 80284b4:	6163      	str	r3, [r4, #20]
 80284b6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80284ba:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80284be:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80284c2:	b002      	add	sp, #8
 80284c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284c8:	2300      	movs	r3, #0
 80284ca:	9301      	str	r3, [sp, #4]
 80284cc:	e7c2      	b.n	8028454 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 80284ce:	bf00      	nop
 80284d0:	0802ce94 	.word	0x0802ce94

080284d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80284d4:	4b07      	ldr	r3, [pc, #28]	; (80284f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80284d6:	b510      	push	{r4, lr}
 80284d8:	781b      	ldrb	r3, [r3, #0]
 80284da:	2b01      	cmp	r3, #1
 80284dc:	d108      	bne.n	80284f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80284de:	6843      	ldr	r3, [r0, #4]
 80284e0:	6814      	ldr	r4, [r2, #0]
 80284e2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80284e6:	680b      	ldr	r3, [r1, #0]
 80284e8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80284ec:	6013      	str	r3, [r2, #0]
 80284ee:	600c      	str	r4, [r1, #0]
 80284f0:	bd10      	pop	{r4, pc}
 80284f2:	bf00      	nop
 80284f4:	2003bd00 	.word	0x2003bd00

080284f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80284f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80284fa:	ab02      	add	r3, sp, #8
 80284fc:	4604      	mov	r4, r0
 80284fe:	9101      	str	r1, [sp, #4]
 8028500:	a901      	add	r1, sp, #4
 8028502:	f843 2d08 	str.w	r2, [r3, #-8]!
 8028506:	461a      	mov	r2, r3
 8028508:	f7ff ffe4 	bl	80284d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802850c:	68a3      	ldr	r3, [r4, #8]
 802850e:	9901      	ldr	r1, [sp, #4]
 8028510:	9a00      	ldr	r2, [sp, #0]
 8028512:	1ac9      	subs	r1, r1, r3
 8028514:	68e3      	ldr	r3, [r4, #12]
 8028516:	1ad2      	subs	r2, r2, r3
 8028518:	9101      	str	r1, [sp, #4]
 802851a:	2a00      	cmp	r2, #0
 802851c:	9200      	str	r2, [sp, #0]
 802851e:	db1c      	blt.n	802855a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8028520:	6963      	ldr	r3, [r4, #20]
 8028522:	429a      	cmp	r2, r3
 8028524:	bfac      	ite	ge
 8028526:	2002      	movge	r0, #2
 8028528:	2000      	movlt	r0, #0
 802852a:	2900      	cmp	r1, #0
 802852c:	db17      	blt.n	802855e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802852e:	6923      	ldr	r3, [r4, #16]
 8028530:	4299      	cmp	r1, r3
 8028532:	bfac      	ite	ge
 8028534:	2308      	movge	r3, #8
 8028536:	2300      	movlt	r3, #0
 8028538:	4303      	orrs	r3, r0
 802853a:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802853e:	b2dd      	uxtb	r5, r3
 8028540:	b978      	cbnz	r0, 8028562 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8028542:	f104 0020 	add.w	r0, r4, #32
 8028546:	f7ff fe51 	bl	80281ec <_ZN8touchgfx10Rasterizer6lineToEii>
 802854a:	9b01      	ldr	r3, [sp, #4]
 802854c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8028550:	65e3      	str	r3, [r4, #92]	; 0x5c
 8028552:	9b00      	ldr	r3, [sp, #0]
 8028554:	6623      	str	r3, [r4, #96]	; 0x60
 8028556:	b002      	add	sp, #8
 8028558:	bd70      	pop	{r4, r5, r6, pc}
 802855a:	2001      	movs	r0, #1
 802855c:	e7e5      	b.n	802852a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802855e:	2304      	movs	r3, #4
 8028560:	e7ea      	b.n	8028538 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8028562:	b113      	cbz	r3, 802856a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8028564:	ea10 0305 	ands.w	r3, r0, r5
 8028568:	d11d      	bne.n	80285a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802856a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802856e:	f104 0620 	add.w	r6, r4, #32
 8028572:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8028576:	b193      	cbz	r3, 802859e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8028578:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802857c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8028580:	4298      	cmp	r0, r3
 8028582:	d802      	bhi.n	802858a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8028584:	4630      	mov	r0, r6
 8028586:	f7ef fc91 	bl	8017eac <_ZN8touchgfx7Outline6moveToEii>
 802858a:	2300      	movs	r3, #0
 802858c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8028590:	2301      	movs	r3, #1
 8028592:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8028596:	4630      	mov	r0, r6
 8028598:	e9dd 2100 	ldrd	r2, r1, [sp]
 802859c:	e7d3      	b.n	8028546 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802859e:	4630      	mov	r0, r6
 80285a0:	f7ff fe24 	bl	80281ec <_ZN8touchgfx10Rasterizer6lineToEii>
 80285a4:	e7f7      	b.n	8028596 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80285a6:	461d      	mov	r5, r3
 80285a8:	e7cf      	b.n	802854a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

080285aa <_ZN8touchgfx6Canvas5closeEv>:
 80285aa:	b538      	push	{r3, r4, r5, lr}
 80285ac:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80285b0:	4604      	mov	r4, r0
 80285b2:	b993      	cbnz	r3, 80285da <_ZN8touchgfx6Canvas5closeEv+0x30>
 80285b4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80285b8:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80285bc:	4213      	tst	r3, r2
 80285be:	d10c      	bne.n	80285da <_ZN8touchgfx6Canvas5closeEv+0x30>
 80285c0:	f100 0520 	add.w	r5, r0, #32
 80285c4:	b123      	cbz	r3, 80285d0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80285c6:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80285ca:	4628      	mov	r0, r5
 80285cc:	f7ff fe0e 	bl	80281ec <_ZN8touchgfx10Rasterizer6lineToEii>
 80285d0:	4628      	mov	r0, r5
 80285d2:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80285d6:	f7ff fe09 	bl	80281ec <_ZN8touchgfx10Rasterizer6lineToEii>
 80285da:	2300      	movs	r3, #0
 80285dc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80285e0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80285e4:	4298      	cmp	r0, r3
 80285e6:	bf34      	ite	cc
 80285e8:	2000      	movcc	r0, #0
 80285ea:	2001      	movcs	r0, #1
 80285ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080285f0 <_ZN8touchgfx6Canvas6renderEh>:
 80285f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80285f4:	4604      	mov	r4, r0
 80285f6:	6840      	ldr	r0, [r0, #4]
 80285f8:	460d      	mov	r5, r1
 80285fa:	6803      	ldr	r3, [r0, #0]
 80285fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80285fe:	4798      	blx	r3
 8028600:	fb10 f105 	smulbb	r1, r0, r5
 8028604:	b289      	uxth	r1, r1
 8028606:	1c4d      	adds	r5, r1, #1
 8028608:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802860c:	122d      	asrs	r5, r5, #8
 802860e:	f000 8097 	beq.w	8028740 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8028612:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8028616:	2b00      	cmp	r3, #0
 8028618:	f000 8092 	beq.w	8028740 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802861c:	4620      	mov	r0, r4
 802861e:	f7ff ffc4 	bl	80285aa <_ZN8touchgfx6Canvas5closeEv>
 8028622:	4607      	mov	r7, r0
 8028624:	2800      	cmp	r0, #0
 8028626:	d043      	beq.n	80286b0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8028628:	6863      	ldr	r3, [r4, #4]
 802862a:	4e46      	ldr	r6, [pc, #280]	; (8028744 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802862c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802862e:	6837      	ldr	r7, [r6, #0]
 8028630:	6803      	ldr	r3, [r0, #0]
 8028632:	689b      	ldr	r3, [r3, #8]
 8028634:	4798      	blx	r3
 8028636:	4601      	mov	r1, r0
 8028638:	4638      	mov	r0, r7
 802863a:	f7ed fc4d 	bl	8015ed8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802863e:	4607      	mov	r7, r0
 8028640:	f7e5 f870 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8028644:	6803      	ldr	r3, [r0, #0]
 8028646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028648:	4798      	blx	r3
 802864a:	4680      	mov	r8, r0
 802864c:	f7e5 f86a 	bl	800d724 <_ZN8touchgfx3HAL3lcdEv>
 8028650:	6803      	ldr	r3, [r0, #0]
 8028652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028654:	4798      	blx	r3
 8028656:	280b      	cmp	r0, #11
 8028658:	d857      	bhi.n	802870a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802865a:	e8df f000 	tbb	[pc, r0]
 802865e:	584d      	.short	0x584d
 8028660:	2d560668 	.word	0x2d560668
 8028664:	6161613d 	.word	0x6161613d
 8028668:	6161      	.short	0x6161
 802866a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802866e:	2208      	movs	r2, #8
 8028670:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028674:	fb91 f2f2 	sdiv	r2, r1, r2
 8028678:	fb08 2303 	mla	r3, r8, r3, r2
 802867c:	441f      	add	r7, r3
 802867e:	424b      	negs	r3, r1
 8028680:	f001 0107 	and.w	r1, r1, #7
 8028684:	f003 0307 	and.w	r3, r3, #7
 8028688:	bf58      	it	pl
 802868a:	4259      	negpl	r1, r3
 802868c:	b2c9      	uxtb	r1, r1
 802868e:	6860      	ldr	r0, [r4, #4]
 8028690:	b2ed      	uxtb	r5, r5
 8028692:	fa0f f388 	sxth.w	r3, r8
 8028696:	463a      	mov	r2, r7
 8028698:	e9cd 1500 	strd	r1, r5, [sp]
 802869c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802869e:	f104 0020 	add.w	r0, r4, #32
 80286a2:	f7ff fdaf 	bl	8028204 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80286a6:	4607      	mov	r7, r0
 80286a8:	6830      	ldr	r0, [r6, #0]
 80286aa:	6803      	ldr	r3, [r0, #0]
 80286ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286ae:	4798      	blx	r3
 80286b0:	4638      	mov	r0, r7
 80286b2:	b002      	add	sp, #8
 80286b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80286b8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80286bc:	2204      	movs	r2, #4
 80286be:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80286c2:	fb91 f2f2 	sdiv	r2, r1, r2
 80286c6:	fb08 2303 	mla	r3, r8, r3, r2
 80286ca:	441f      	add	r7, r3
 80286cc:	424b      	negs	r3, r1
 80286ce:	f001 0103 	and.w	r1, r1, #3
 80286d2:	f003 0303 	and.w	r3, r3, #3
 80286d6:	e7d7      	b.n	8028688 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80286d8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80286dc:	2202      	movs	r2, #2
 80286de:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80286e2:	2900      	cmp	r1, #0
 80286e4:	fb91 f2f2 	sdiv	r2, r1, r2
 80286e8:	f001 0101 	and.w	r1, r1, #1
 80286ec:	fb08 2303 	mla	r3, r8, r3, r2
 80286f0:	bfb8      	it	lt
 80286f2:	4249      	neglt	r1, r1
 80286f4:	441f      	add	r7, r3
 80286f6:	e7c9      	b.n	802868c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80286f8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80286fc:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028700:	fb08 f303 	mul.w	r3, r8, r3
 8028704:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028708:	441f      	add	r7, r3
 802870a:	2100      	movs	r1, #0
 802870c:	e7bf      	b.n	802868e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802870e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028712:	2103      	movs	r1, #3
 8028714:	fb08 f203 	mul.w	r2, r8, r3
 8028718:	8b23      	ldrh	r3, [r4, #24]
 802871a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802871e:	e7f3      	b.n	8028708 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8028720:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028724:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028728:	fb08 2303 	mla	r3, r8, r3, r2
 802872c:	e7ec      	b.n	8028708 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802872e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028732:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028736:	fb08 f303 	mul.w	r3, r8, r3
 802873a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802873e:	e7e3      	b.n	8028708 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8028740:	2701      	movs	r7, #1
 8028742:	e7b5      	b.n	80286b0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8028744:	2003bd08 	.word	0x2003bd08

08028748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028748:	b513      	push	{r0, r1, r4, lr}
 802874a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802874e:	4604      	mov	r4, r0
 8028750:	e9cd 2100 	strd	r2, r1, [sp]
 8028754:	b1a3      	cbz	r3, 8028780 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8028756:	466a      	mov	r2, sp
 8028758:	a901      	add	r1, sp, #4
 802875a:	4620      	mov	r0, r4
 802875c:	f7ff feba 	bl	80284d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028760:	68a3      	ldr	r3, [r4, #8]
 8028762:	9901      	ldr	r1, [sp, #4]
 8028764:	9a00      	ldr	r2, [sp, #0]
 8028766:	1ac9      	subs	r1, r1, r3
 8028768:	68e3      	ldr	r3, [r4, #12]
 802876a:	1ad2      	subs	r2, r2, r3
 802876c:	9101      	str	r1, [sp, #4]
 802876e:	2a00      	cmp	r2, #0
 8028770:	9200      	str	r2, [sp, #0]
 8028772:	da0b      	bge.n	802878c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8028774:	2301      	movs	r3, #1
 8028776:	2900      	cmp	r1, #0
 8028778:	da0e      	bge.n	8028798 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802877a:	f043 0304 	orr.w	r3, r3, #4
 802877e:	e013      	b.n	80287a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8028780:	f7ff ff13 	bl	80285aa <_ZN8touchgfx6Canvas5closeEv>
 8028784:	2800      	cmp	r0, #0
 8028786:	d1e6      	bne.n	8028756 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8028788:	b002      	add	sp, #8
 802878a:	bd10      	pop	{r4, pc}
 802878c:	6963      	ldr	r3, [r4, #20]
 802878e:	429a      	cmp	r2, r3
 8028790:	bfac      	ite	ge
 8028792:	2302      	movge	r3, #2
 8028794:	2300      	movlt	r3, #0
 8028796:	e7ee      	b.n	8028776 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8028798:	6920      	ldr	r0, [r4, #16]
 802879a:	4281      	cmp	r1, r0
 802879c:	bfac      	ite	ge
 802879e:	2008      	movge	r0, #8
 80287a0:	2000      	movlt	r0, #0
 80287a2:	4318      	orrs	r0, r3
 80287a4:	b2c3      	uxtb	r3, r0
 80287a6:	b158      	cbz	r0, 80287c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80287a8:	2201      	movs	r2, #1
 80287aa:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80287ae:	9901      	ldr	r1, [sp, #4]
 80287b0:	9a00      	ldr	r2, [sp, #0]
 80287b2:	66a1      	str	r1, [r4, #104]	; 0x68
 80287b4:	66e2      	str	r2, [r4, #108]	; 0x6c
 80287b6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80287ba:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80287be:	e7e3      	b.n	8028788 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80287c0:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80287c4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80287c8:	4298      	cmp	r0, r3
 80287ca:	d803      	bhi.n	80287d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80287cc:	f104 0020 	add.w	r0, r4, #32
 80287d0:	f7ef fb6c 	bl	8017eac <_ZN8touchgfx7Outline6moveToEii>
 80287d4:	2300      	movs	r3, #0
 80287d6:	2201      	movs	r2, #1
 80287d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80287dc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80287e0:	e7e5      	b.n	80287ae <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080287e2 <__aeabi_atexit>:
 80287e2:	460b      	mov	r3, r1
 80287e4:	4601      	mov	r1, r0
 80287e6:	4618      	mov	r0, r3
 80287e8:	f000 b852 	b.w	8028890 <__cxa_atexit>

080287ec <_ZdlPvj>:
 80287ec:	f000 b812 	b.w	8028814 <_ZdlPv>

080287f0 <__cxa_guard_acquire>:
 80287f0:	6803      	ldr	r3, [r0, #0]
 80287f2:	07db      	lsls	r3, r3, #31
 80287f4:	d406      	bmi.n	8028804 <__cxa_guard_acquire+0x14>
 80287f6:	7843      	ldrb	r3, [r0, #1]
 80287f8:	b103      	cbz	r3, 80287fc <__cxa_guard_acquire+0xc>
 80287fa:	deff      	udf	#255	; 0xff
 80287fc:	2301      	movs	r3, #1
 80287fe:	7043      	strb	r3, [r0, #1]
 8028800:	4618      	mov	r0, r3
 8028802:	4770      	bx	lr
 8028804:	2000      	movs	r0, #0
 8028806:	4770      	bx	lr

08028808 <__cxa_guard_release>:
 8028808:	2301      	movs	r3, #1
 802880a:	6003      	str	r3, [r0, #0]
 802880c:	4770      	bx	lr

0802880e <__cxa_pure_virtual>:
 802880e:	b508      	push	{r3, lr}
 8028810:	f000 f80e 	bl	8028830 <_ZSt9terminatev>

08028814 <_ZdlPv>:
 8028814:	f000 b88e 	b.w	8028934 <free>

08028818 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028818:	b508      	push	{r3, lr}
 802881a:	4780      	blx	r0
 802881c:	f000 f80d 	bl	802883a <abort>

08028820 <_ZSt13get_terminatev>:
 8028820:	4b02      	ldr	r3, [pc, #8]	; (802882c <_ZSt13get_terminatev+0xc>)
 8028822:	6818      	ldr	r0, [r3, #0]
 8028824:	f3bf 8f5b 	dmb	ish
 8028828:	4770      	bx	lr
 802882a:	bf00      	nop
 802882c:	200000a8 	.word	0x200000a8

08028830 <_ZSt9terminatev>:
 8028830:	b508      	push	{r3, lr}
 8028832:	f7ff fff5 	bl	8028820 <_ZSt13get_terminatev>
 8028836:	f7ff ffef 	bl	8028818 <_ZN10__cxxabiv111__terminateEPFvvE>

0802883a <abort>:
 802883a:	b508      	push	{r3, lr}
 802883c:	2006      	movs	r0, #6
 802883e:	f000 fc9d 	bl	802917c <raise>
 8028842:	2001      	movs	r0, #1
 8028844:	f7d9 f9ec 	bl	8001c20 <_exit>

08028848 <__assert_func>:
 8028848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802884a:	4614      	mov	r4, r2
 802884c:	461a      	mov	r2, r3
 802884e:	4b09      	ldr	r3, [pc, #36]	; (8028874 <__assert_func+0x2c>)
 8028850:	681b      	ldr	r3, [r3, #0]
 8028852:	4605      	mov	r5, r0
 8028854:	68d8      	ldr	r0, [r3, #12]
 8028856:	b14c      	cbz	r4, 802886c <__assert_func+0x24>
 8028858:	4b07      	ldr	r3, [pc, #28]	; (8028878 <__assert_func+0x30>)
 802885a:	9100      	str	r1, [sp, #0]
 802885c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028860:	4906      	ldr	r1, [pc, #24]	; (802887c <__assert_func+0x34>)
 8028862:	462b      	mov	r3, r5
 8028864:	f000 f828 	bl	80288b8 <fiprintf>
 8028868:	f7ff ffe7 	bl	802883a <abort>
 802886c:	4b04      	ldr	r3, [pc, #16]	; (8028880 <__assert_func+0x38>)
 802886e:	461c      	mov	r4, r3
 8028870:	e7f3      	b.n	802885a <__assert_func+0x12>
 8028872:	bf00      	nop
 8028874:	200000ac 	.word	0x200000ac
 8028878:	0802d684 	.word	0x0802d684
 802887c:	0802d691 	.word	0x0802d691
 8028880:	0802d6bf 	.word	0x0802d6bf

08028884 <atexit>:
 8028884:	2300      	movs	r3, #0
 8028886:	4601      	mov	r1, r0
 8028888:	461a      	mov	r2, r3
 802888a:	4618      	mov	r0, r3
 802888c:	f000 bd66 	b.w	802935c <__register_exitproc>

08028890 <__cxa_atexit>:
 8028890:	b510      	push	{r4, lr}
 8028892:	4c05      	ldr	r4, [pc, #20]	; (80288a8 <__cxa_atexit+0x18>)
 8028894:	4613      	mov	r3, r2
 8028896:	b12c      	cbz	r4, 80288a4 <__cxa_atexit+0x14>
 8028898:	460a      	mov	r2, r1
 802889a:	4601      	mov	r1, r0
 802889c:	2002      	movs	r0, #2
 802889e:	f000 fd5d 	bl	802935c <__register_exitproc>
 80288a2:	bd10      	pop	{r4, pc}
 80288a4:	4620      	mov	r0, r4
 80288a6:	e7fc      	b.n	80288a2 <__cxa_atexit+0x12>
 80288a8:	0802935d 	.word	0x0802935d

080288ac <__errno>:
 80288ac:	4b01      	ldr	r3, [pc, #4]	; (80288b4 <__errno+0x8>)
 80288ae:	6818      	ldr	r0, [r3, #0]
 80288b0:	4770      	bx	lr
 80288b2:	bf00      	nop
 80288b4:	200000ac 	.word	0x200000ac

080288b8 <fiprintf>:
 80288b8:	b40e      	push	{r1, r2, r3}
 80288ba:	b503      	push	{r0, r1, lr}
 80288bc:	4601      	mov	r1, r0
 80288be:	ab03      	add	r3, sp, #12
 80288c0:	4805      	ldr	r0, [pc, #20]	; (80288d8 <fiprintf+0x20>)
 80288c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80288c6:	6800      	ldr	r0, [r0, #0]
 80288c8:	9301      	str	r3, [sp, #4]
 80288ca:	f000 f95b 	bl	8028b84 <_vfiprintf_r>
 80288ce:	b002      	add	sp, #8
 80288d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80288d4:	b003      	add	sp, #12
 80288d6:	4770      	bx	lr
 80288d8:	200000ac 	.word	0x200000ac

080288dc <__libc_init_array>:
 80288dc:	b570      	push	{r4, r5, r6, lr}
 80288de:	4d0d      	ldr	r5, [pc, #52]	; (8028914 <__libc_init_array+0x38>)
 80288e0:	4c0d      	ldr	r4, [pc, #52]	; (8028918 <__libc_init_array+0x3c>)
 80288e2:	1b64      	subs	r4, r4, r5
 80288e4:	10a4      	asrs	r4, r4, #2
 80288e6:	2600      	movs	r6, #0
 80288e8:	42a6      	cmp	r6, r4
 80288ea:	d109      	bne.n	8028900 <__libc_init_array+0x24>
 80288ec:	4d0b      	ldr	r5, [pc, #44]	; (802891c <__libc_init_array+0x40>)
 80288ee:	4c0c      	ldr	r4, [pc, #48]	; (8028920 <__libc_init_array+0x44>)
 80288f0:	f001 f86e 	bl	80299d0 <_init>
 80288f4:	1b64      	subs	r4, r4, r5
 80288f6:	10a4      	asrs	r4, r4, #2
 80288f8:	2600      	movs	r6, #0
 80288fa:	42a6      	cmp	r6, r4
 80288fc:	d105      	bne.n	802890a <__libc_init_array+0x2e>
 80288fe:	bd70      	pop	{r4, r5, r6, pc}
 8028900:	f855 3b04 	ldr.w	r3, [r5], #4
 8028904:	4798      	blx	r3
 8028906:	3601      	adds	r6, #1
 8028908:	e7ee      	b.n	80288e8 <__libc_init_array+0xc>
 802890a:	f855 3b04 	ldr.w	r3, [r5], #4
 802890e:	4798      	blx	r3
 8028910:	3601      	adds	r6, #1
 8028912:	e7f2      	b.n	80288fa <__libc_init_array+0x1e>
 8028914:	081610b4 	.word	0x081610b4
 8028918:	081610b4 	.word	0x081610b4
 802891c:	081610b4 	.word	0x081610b4
 8028920:	081610cc 	.word	0x081610cc

08028924 <malloc>:
 8028924:	4b02      	ldr	r3, [pc, #8]	; (8028930 <malloc+0xc>)
 8028926:	4601      	mov	r1, r0
 8028928:	6818      	ldr	r0, [r3, #0]
 802892a:	f000 b88d 	b.w	8028a48 <_malloc_r>
 802892e:	bf00      	nop
 8028930:	200000ac 	.word	0x200000ac

08028934 <free>:
 8028934:	4b02      	ldr	r3, [pc, #8]	; (8028940 <free+0xc>)
 8028936:	4601      	mov	r1, r0
 8028938:	6818      	ldr	r0, [r3, #0]
 802893a:	f000 b819 	b.w	8028970 <_free_r>
 802893e:	bf00      	nop
 8028940:	200000ac 	.word	0x200000ac

08028944 <memcpy>:
 8028944:	440a      	add	r2, r1
 8028946:	4291      	cmp	r1, r2
 8028948:	f100 33ff 	add.w	r3, r0, #4294967295
 802894c:	d100      	bne.n	8028950 <memcpy+0xc>
 802894e:	4770      	bx	lr
 8028950:	b510      	push	{r4, lr}
 8028952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028956:	f803 4f01 	strb.w	r4, [r3, #1]!
 802895a:	4291      	cmp	r1, r2
 802895c:	d1f9      	bne.n	8028952 <memcpy+0xe>
 802895e:	bd10      	pop	{r4, pc}

08028960 <memset>:
 8028960:	4402      	add	r2, r0
 8028962:	4603      	mov	r3, r0
 8028964:	4293      	cmp	r3, r2
 8028966:	d100      	bne.n	802896a <memset+0xa>
 8028968:	4770      	bx	lr
 802896a:	f803 1b01 	strb.w	r1, [r3], #1
 802896e:	e7f9      	b.n	8028964 <memset+0x4>

08028970 <_free_r>:
 8028970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028972:	2900      	cmp	r1, #0
 8028974:	d044      	beq.n	8028a00 <_free_r+0x90>
 8028976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802897a:	9001      	str	r0, [sp, #4]
 802897c:	2b00      	cmp	r3, #0
 802897e:	f1a1 0404 	sub.w	r4, r1, #4
 8028982:	bfb8      	it	lt
 8028984:	18e4      	addlt	r4, r4, r3
 8028986:	f000 ff6b 	bl	8029860 <__malloc_lock>
 802898a:	4a1e      	ldr	r2, [pc, #120]	; (8028a04 <_free_r+0x94>)
 802898c:	9801      	ldr	r0, [sp, #4]
 802898e:	6813      	ldr	r3, [r2, #0]
 8028990:	b933      	cbnz	r3, 80289a0 <_free_r+0x30>
 8028992:	6063      	str	r3, [r4, #4]
 8028994:	6014      	str	r4, [r2, #0]
 8028996:	b003      	add	sp, #12
 8028998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802899c:	f000 bf66 	b.w	802986c <__malloc_unlock>
 80289a0:	42a3      	cmp	r3, r4
 80289a2:	d908      	bls.n	80289b6 <_free_r+0x46>
 80289a4:	6825      	ldr	r5, [r4, #0]
 80289a6:	1961      	adds	r1, r4, r5
 80289a8:	428b      	cmp	r3, r1
 80289aa:	bf01      	itttt	eq
 80289ac:	6819      	ldreq	r1, [r3, #0]
 80289ae:	685b      	ldreq	r3, [r3, #4]
 80289b0:	1949      	addeq	r1, r1, r5
 80289b2:	6021      	streq	r1, [r4, #0]
 80289b4:	e7ed      	b.n	8028992 <_free_r+0x22>
 80289b6:	461a      	mov	r2, r3
 80289b8:	685b      	ldr	r3, [r3, #4]
 80289ba:	b10b      	cbz	r3, 80289c0 <_free_r+0x50>
 80289bc:	42a3      	cmp	r3, r4
 80289be:	d9fa      	bls.n	80289b6 <_free_r+0x46>
 80289c0:	6811      	ldr	r1, [r2, #0]
 80289c2:	1855      	adds	r5, r2, r1
 80289c4:	42a5      	cmp	r5, r4
 80289c6:	d10b      	bne.n	80289e0 <_free_r+0x70>
 80289c8:	6824      	ldr	r4, [r4, #0]
 80289ca:	4421      	add	r1, r4
 80289cc:	1854      	adds	r4, r2, r1
 80289ce:	42a3      	cmp	r3, r4
 80289d0:	6011      	str	r1, [r2, #0]
 80289d2:	d1e0      	bne.n	8028996 <_free_r+0x26>
 80289d4:	681c      	ldr	r4, [r3, #0]
 80289d6:	685b      	ldr	r3, [r3, #4]
 80289d8:	6053      	str	r3, [r2, #4]
 80289da:	4421      	add	r1, r4
 80289dc:	6011      	str	r1, [r2, #0]
 80289de:	e7da      	b.n	8028996 <_free_r+0x26>
 80289e0:	d902      	bls.n	80289e8 <_free_r+0x78>
 80289e2:	230c      	movs	r3, #12
 80289e4:	6003      	str	r3, [r0, #0]
 80289e6:	e7d6      	b.n	8028996 <_free_r+0x26>
 80289e8:	6825      	ldr	r5, [r4, #0]
 80289ea:	1961      	adds	r1, r4, r5
 80289ec:	428b      	cmp	r3, r1
 80289ee:	bf04      	itt	eq
 80289f0:	6819      	ldreq	r1, [r3, #0]
 80289f2:	685b      	ldreq	r3, [r3, #4]
 80289f4:	6063      	str	r3, [r4, #4]
 80289f6:	bf04      	itt	eq
 80289f8:	1949      	addeq	r1, r1, r5
 80289fa:	6021      	streq	r1, [r4, #0]
 80289fc:	6054      	str	r4, [r2, #4]
 80289fe:	e7ca      	b.n	8028996 <_free_r+0x26>
 8028a00:	b003      	add	sp, #12
 8028a02:	bd30      	pop	{r4, r5, pc}
 8028a04:	2003be0c 	.word	0x2003be0c

08028a08 <sbrk_aligned>:
 8028a08:	b570      	push	{r4, r5, r6, lr}
 8028a0a:	4e0e      	ldr	r6, [pc, #56]	; (8028a44 <sbrk_aligned+0x3c>)
 8028a0c:	460c      	mov	r4, r1
 8028a0e:	6831      	ldr	r1, [r6, #0]
 8028a10:	4605      	mov	r5, r0
 8028a12:	b911      	cbnz	r1, 8028a1a <sbrk_aligned+0x12>
 8028a14:	f000 fb7a 	bl	802910c <_sbrk_r>
 8028a18:	6030      	str	r0, [r6, #0]
 8028a1a:	4621      	mov	r1, r4
 8028a1c:	4628      	mov	r0, r5
 8028a1e:	f000 fb75 	bl	802910c <_sbrk_r>
 8028a22:	1c43      	adds	r3, r0, #1
 8028a24:	d00a      	beq.n	8028a3c <sbrk_aligned+0x34>
 8028a26:	1cc4      	adds	r4, r0, #3
 8028a28:	f024 0403 	bic.w	r4, r4, #3
 8028a2c:	42a0      	cmp	r0, r4
 8028a2e:	d007      	beq.n	8028a40 <sbrk_aligned+0x38>
 8028a30:	1a21      	subs	r1, r4, r0
 8028a32:	4628      	mov	r0, r5
 8028a34:	f000 fb6a 	bl	802910c <_sbrk_r>
 8028a38:	3001      	adds	r0, #1
 8028a3a:	d101      	bne.n	8028a40 <sbrk_aligned+0x38>
 8028a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8028a40:	4620      	mov	r0, r4
 8028a42:	bd70      	pop	{r4, r5, r6, pc}
 8028a44:	2003be10 	.word	0x2003be10

08028a48 <_malloc_r>:
 8028a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a4c:	1ccd      	adds	r5, r1, #3
 8028a4e:	f025 0503 	bic.w	r5, r5, #3
 8028a52:	3508      	adds	r5, #8
 8028a54:	2d0c      	cmp	r5, #12
 8028a56:	bf38      	it	cc
 8028a58:	250c      	movcc	r5, #12
 8028a5a:	2d00      	cmp	r5, #0
 8028a5c:	4607      	mov	r7, r0
 8028a5e:	db01      	blt.n	8028a64 <_malloc_r+0x1c>
 8028a60:	42a9      	cmp	r1, r5
 8028a62:	d905      	bls.n	8028a70 <_malloc_r+0x28>
 8028a64:	230c      	movs	r3, #12
 8028a66:	603b      	str	r3, [r7, #0]
 8028a68:	2600      	movs	r6, #0
 8028a6a:	4630      	mov	r0, r6
 8028a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028a70:	4e2e      	ldr	r6, [pc, #184]	; (8028b2c <_malloc_r+0xe4>)
 8028a72:	f000 fef5 	bl	8029860 <__malloc_lock>
 8028a76:	6833      	ldr	r3, [r6, #0]
 8028a78:	461c      	mov	r4, r3
 8028a7a:	bb34      	cbnz	r4, 8028aca <_malloc_r+0x82>
 8028a7c:	4629      	mov	r1, r5
 8028a7e:	4638      	mov	r0, r7
 8028a80:	f7ff ffc2 	bl	8028a08 <sbrk_aligned>
 8028a84:	1c43      	adds	r3, r0, #1
 8028a86:	4604      	mov	r4, r0
 8028a88:	d14d      	bne.n	8028b26 <_malloc_r+0xde>
 8028a8a:	6834      	ldr	r4, [r6, #0]
 8028a8c:	4626      	mov	r6, r4
 8028a8e:	2e00      	cmp	r6, #0
 8028a90:	d140      	bne.n	8028b14 <_malloc_r+0xcc>
 8028a92:	6823      	ldr	r3, [r4, #0]
 8028a94:	4631      	mov	r1, r6
 8028a96:	4638      	mov	r0, r7
 8028a98:	eb04 0803 	add.w	r8, r4, r3
 8028a9c:	f000 fb36 	bl	802910c <_sbrk_r>
 8028aa0:	4580      	cmp	r8, r0
 8028aa2:	d13a      	bne.n	8028b1a <_malloc_r+0xd2>
 8028aa4:	6821      	ldr	r1, [r4, #0]
 8028aa6:	3503      	adds	r5, #3
 8028aa8:	1a6d      	subs	r5, r5, r1
 8028aaa:	f025 0503 	bic.w	r5, r5, #3
 8028aae:	3508      	adds	r5, #8
 8028ab0:	2d0c      	cmp	r5, #12
 8028ab2:	bf38      	it	cc
 8028ab4:	250c      	movcc	r5, #12
 8028ab6:	4629      	mov	r1, r5
 8028ab8:	4638      	mov	r0, r7
 8028aba:	f7ff ffa5 	bl	8028a08 <sbrk_aligned>
 8028abe:	3001      	adds	r0, #1
 8028ac0:	d02b      	beq.n	8028b1a <_malloc_r+0xd2>
 8028ac2:	6823      	ldr	r3, [r4, #0]
 8028ac4:	442b      	add	r3, r5
 8028ac6:	6023      	str	r3, [r4, #0]
 8028ac8:	e00e      	b.n	8028ae8 <_malloc_r+0xa0>
 8028aca:	6822      	ldr	r2, [r4, #0]
 8028acc:	1b52      	subs	r2, r2, r5
 8028ace:	d41e      	bmi.n	8028b0e <_malloc_r+0xc6>
 8028ad0:	2a0b      	cmp	r2, #11
 8028ad2:	d916      	bls.n	8028b02 <_malloc_r+0xba>
 8028ad4:	1961      	adds	r1, r4, r5
 8028ad6:	42a3      	cmp	r3, r4
 8028ad8:	6025      	str	r5, [r4, #0]
 8028ada:	bf18      	it	ne
 8028adc:	6059      	strne	r1, [r3, #4]
 8028ade:	6863      	ldr	r3, [r4, #4]
 8028ae0:	bf08      	it	eq
 8028ae2:	6031      	streq	r1, [r6, #0]
 8028ae4:	5162      	str	r2, [r4, r5]
 8028ae6:	604b      	str	r3, [r1, #4]
 8028ae8:	4638      	mov	r0, r7
 8028aea:	f104 060b 	add.w	r6, r4, #11
 8028aee:	f000 febd 	bl	802986c <__malloc_unlock>
 8028af2:	f026 0607 	bic.w	r6, r6, #7
 8028af6:	1d23      	adds	r3, r4, #4
 8028af8:	1af2      	subs	r2, r6, r3
 8028afa:	d0b6      	beq.n	8028a6a <_malloc_r+0x22>
 8028afc:	1b9b      	subs	r3, r3, r6
 8028afe:	50a3      	str	r3, [r4, r2]
 8028b00:	e7b3      	b.n	8028a6a <_malloc_r+0x22>
 8028b02:	6862      	ldr	r2, [r4, #4]
 8028b04:	42a3      	cmp	r3, r4
 8028b06:	bf0c      	ite	eq
 8028b08:	6032      	streq	r2, [r6, #0]
 8028b0a:	605a      	strne	r2, [r3, #4]
 8028b0c:	e7ec      	b.n	8028ae8 <_malloc_r+0xa0>
 8028b0e:	4623      	mov	r3, r4
 8028b10:	6864      	ldr	r4, [r4, #4]
 8028b12:	e7b2      	b.n	8028a7a <_malloc_r+0x32>
 8028b14:	4634      	mov	r4, r6
 8028b16:	6876      	ldr	r6, [r6, #4]
 8028b18:	e7b9      	b.n	8028a8e <_malloc_r+0x46>
 8028b1a:	230c      	movs	r3, #12
 8028b1c:	603b      	str	r3, [r7, #0]
 8028b1e:	4638      	mov	r0, r7
 8028b20:	f000 fea4 	bl	802986c <__malloc_unlock>
 8028b24:	e7a1      	b.n	8028a6a <_malloc_r+0x22>
 8028b26:	6025      	str	r5, [r4, #0]
 8028b28:	e7de      	b.n	8028ae8 <_malloc_r+0xa0>
 8028b2a:	bf00      	nop
 8028b2c:	2003be0c 	.word	0x2003be0c

08028b30 <__sfputc_r>:
 8028b30:	6893      	ldr	r3, [r2, #8]
 8028b32:	3b01      	subs	r3, #1
 8028b34:	2b00      	cmp	r3, #0
 8028b36:	b410      	push	{r4}
 8028b38:	6093      	str	r3, [r2, #8]
 8028b3a:	da08      	bge.n	8028b4e <__sfputc_r+0x1e>
 8028b3c:	6994      	ldr	r4, [r2, #24]
 8028b3e:	42a3      	cmp	r3, r4
 8028b40:	db01      	blt.n	8028b46 <__sfputc_r+0x16>
 8028b42:	290a      	cmp	r1, #10
 8028b44:	d103      	bne.n	8028b4e <__sfputc_r+0x1e>
 8028b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b4a:	f000 bb47 	b.w	80291dc <__swbuf_r>
 8028b4e:	6813      	ldr	r3, [r2, #0]
 8028b50:	1c58      	adds	r0, r3, #1
 8028b52:	6010      	str	r0, [r2, #0]
 8028b54:	7019      	strb	r1, [r3, #0]
 8028b56:	4608      	mov	r0, r1
 8028b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b5c:	4770      	bx	lr

08028b5e <__sfputs_r>:
 8028b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b60:	4606      	mov	r6, r0
 8028b62:	460f      	mov	r7, r1
 8028b64:	4614      	mov	r4, r2
 8028b66:	18d5      	adds	r5, r2, r3
 8028b68:	42ac      	cmp	r4, r5
 8028b6a:	d101      	bne.n	8028b70 <__sfputs_r+0x12>
 8028b6c:	2000      	movs	r0, #0
 8028b6e:	e007      	b.n	8028b80 <__sfputs_r+0x22>
 8028b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028b74:	463a      	mov	r2, r7
 8028b76:	4630      	mov	r0, r6
 8028b78:	f7ff ffda 	bl	8028b30 <__sfputc_r>
 8028b7c:	1c43      	adds	r3, r0, #1
 8028b7e:	d1f3      	bne.n	8028b68 <__sfputs_r+0xa>
 8028b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028b84 <_vfiprintf_r>:
 8028b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b88:	460d      	mov	r5, r1
 8028b8a:	b09d      	sub	sp, #116	; 0x74
 8028b8c:	4614      	mov	r4, r2
 8028b8e:	4698      	mov	r8, r3
 8028b90:	4606      	mov	r6, r0
 8028b92:	b118      	cbz	r0, 8028b9c <_vfiprintf_r+0x18>
 8028b94:	6983      	ldr	r3, [r0, #24]
 8028b96:	b90b      	cbnz	r3, 8028b9c <_vfiprintf_r+0x18>
 8028b98:	f000 fd5c 	bl	8029654 <__sinit>
 8028b9c:	4b89      	ldr	r3, [pc, #548]	; (8028dc4 <_vfiprintf_r+0x240>)
 8028b9e:	429d      	cmp	r5, r3
 8028ba0:	d11b      	bne.n	8028bda <_vfiprintf_r+0x56>
 8028ba2:	6875      	ldr	r5, [r6, #4]
 8028ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028ba6:	07d9      	lsls	r1, r3, #31
 8028ba8:	d405      	bmi.n	8028bb6 <_vfiprintf_r+0x32>
 8028baa:	89ab      	ldrh	r3, [r5, #12]
 8028bac:	059a      	lsls	r2, r3, #22
 8028bae:	d402      	bmi.n	8028bb6 <_vfiprintf_r+0x32>
 8028bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028bb2:	f000 fded 	bl	8029790 <__retarget_lock_acquire_recursive>
 8028bb6:	89ab      	ldrh	r3, [r5, #12]
 8028bb8:	071b      	lsls	r3, r3, #28
 8028bba:	d501      	bpl.n	8028bc0 <_vfiprintf_r+0x3c>
 8028bbc:	692b      	ldr	r3, [r5, #16]
 8028bbe:	b9eb      	cbnz	r3, 8028bfc <_vfiprintf_r+0x78>
 8028bc0:	4629      	mov	r1, r5
 8028bc2:	4630      	mov	r0, r6
 8028bc4:	f000 fb5c 	bl	8029280 <__swsetup_r>
 8028bc8:	b1c0      	cbz	r0, 8028bfc <_vfiprintf_r+0x78>
 8028bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028bcc:	07dc      	lsls	r4, r3, #31
 8028bce:	d50e      	bpl.n	8028bee <_vfiprintf_r+0x6a>
 8028bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8028bd4:	b01d      	add	sp, #116	; 0x74
 8028bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bda:	4b7b      	ldr	r3, [pc, #492]	; (8028dc8 <_vfiprintf_r+0x244>)
 8028bdc:	429d      	cmp	r5, r3
 8028bde:	d101      	bne.n	8028be4 <_vfiprintf_r+0x60>
 8028be0:	68b5      	ldr	r5, [r6, #8]
 8028be2:	e7df      	b.n	8028ba4 <_vfiprintf_r+0x20>
 8028be4:	4b79      	ldr	r3, [pc, #484]	; (8028dcc <_vfiprintf_r+0x248>)
 8028be6:	429d      	cmp	r5, r3
 8028be8:	bf08      	it	eq
 8028bea:	68f5      	ldreq	r5, [r6, #12]
 8028bec:	e7da      	b.n	8028ba4 <_vfiprintf_r+0x20>
 8028bee:	89ab      	ldrh	r3, [r5, #12]
 8028bf0:	0598      	lsls	r0, r3, #22
 8028bf2:	d4ed      	bmi.n	8028bd0 <_vfiprintf_r+0x4c>
 8028bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028bf6:	f000 fdcd 	bl	8029794 <__retarget_lock_release_recursive>
 8028bfa:	e7e9      	b.n	8028bd0 <_vfiprintf_r+0x4c>
 8028bfc:	2300      	movs	r3, #0
 8028bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8028c00:	2320      	movs	r3, #32
 8028c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8028c0a:	2330      	movs	r3, #48	; 0x30
 8028c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028dd0 <_vfiprintf_r+0x24c>
 8028c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028c14:	f04f 0901 	mov.w	r9, #1
 8028c18:	4623      	mov	r3, r4
 8028c1a:	469a      	mov	sl, r3
 8028c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028c20:	b10a      	cbz	r2, 8028c26 <_vfiprintf_r+0xa2>
 8028c22:	2a25      	cmp	r2, #37	; 0x25
 8028c24:	d1f9      	bne.n	8028c1a <_vfiprintf_r+0x96>
 8028c26:	ebba 0b04 	subs.w	fp, sl, r4
 8028c2a:	d00b      	beq.n	8028c44 <_vfiprintf_r+0xc0>
 8028c2c:	465b      	mov	r3, fp
 8028c2e:	4622      	mov	r2, r4
 8028c30:	4629      	mov	r1, r5
 8028c32:	4630      	mov	r0, r6
 8028c34:	f7ff ff93 	bl	8028b5e <__sfputs_r>
 8028c38:	3001      	adds	r0, #1
 8028c3a:	f000 80aa 	beq.w	8028d92 <_vfiprintf_r+0x20e>
 8028c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c40:	445a      	add	r2, fp
 8028c42:	9209      	str	r2, [sp, #36]	; 0x24
 8028c44:	f89a 3000 	ldrb.w	r3, [sl]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	f000 80a2 	beq.w	8028d92 <_vfiprintf_r+0x20e>
 8028c4e:	2300      	movs	r3, #0
 8028c50:	f04f 32ff 	mov.w	r2, #4294967295
 8028c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028c58:	f10a 0a01 	add.w	sl, sl, #1
 8028c5c:	9304      	str	r3, [sp, #16]
 8028c5e:	9307      	str	r3, [sp, #28]
 8028c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028c64:	931a      	str	r3, [sp, #104]	; 0x68
 8028c66:	4654      	mov	r4, sl
 8028c68:	2205      	movs	r2, #5
 8028c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028c6e:	4858      	ldr	r0, [pc, #352]	; (8028dd0 <_vfiprintf_r+0x24c>)
 8028c70:	f7d7 fae6 	bl	8000240 <memchr>
 8028c74:	9a04      	ldr	r2, [sp, #16]
 8028c76:	b9d8      	cbnz	r0, 8028cb0 <_vfiprintf_r+0x12c>
 8028c78:	06d1      	lsls	r1, r2, #27
 8028c7a:	bf44      	itt	mi
 8028c7c:	2320      	movmi	r3, #32
 8028c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c82:	0713      	lsls	r3, r2, #28
 8028c84:	bf44      	itt	mi
 8028c86:	232b      	movmi	r3, #43	; 0x2b
 8028c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8028c90:	2b2a      	cmp	r3, #42	; 0x2a
 8028c92:	d015      	beq.n	8028cc0 <_vfiprintf_r+0x13c>
 8028c94:	9a07      	ldr	r2, [sp, #28]
 8028c96:	4654      	mov	r4, sl
 8028c98:	2000      	movs	r0, #0
 8028c9a:	f04f 0c0a 	mov.w	ip, #10
 8028c9e:	4621      	mov	r1, r4
 8028ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028ca4:	3b30      	subs	r3, #48	; 0x30
 8028ca6:	2b09      	cmp	r3, #9
 8028ca8:	d94e      	bls.n	8028d48 <_vfiprintf_r+0x1c4>
 8028caa:	b1b0      	cbz	r0, 8028cda <_vfiprintf_r+0x156>
 8028cac:	9207      	str	r2, [sp, #28]
 8028cae:	e014      	b.n	8028cda <_vfiprintf_r+0x156>
 8028cb0:	eba0 0308 	sub.w	r3, r0, r8
 8028cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8028cb8:	4313      	orrs	r3, r2
 8028cba:	9304      	str	r3, [sp, #16]
 8028cbc:	46a2      	mov	sl, r4
 8028cbe:	e7d2      	b.n	8028c66 <_vfiprintf_r+0xe2>
 8028cc0:	9b03      	ldr	r3, [sp, #12]
 8028cc2:	1d19      	adds	r1, r3, #4
 8028cc4:	681b      	ldr	r3, [r3, #0]
 8028cc6:	9103      	str	r1, [sp, #12]
 8028cc8:	2b00      	cmp	r3, #0
 8028cca:	bfbb      	ittet	lt
 8028ccc:	425b      	neglt	r3, r3
 8028cce:	f042 0202 	orrlt.w	r2, r2, #2
 8028cd2:	9307      	strge	r3, [sp, #28]
 8028cd4:	9307      	strlt	r3, [sp, #28]
 8028cd6:	bfb8      	it	lt
 8028cd8:	9204      	strlt	r2, [sp, #16]
 8028cda:	7823      	ldrb	r3, [r4, #0]
 8028cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8028cde:	d10c      	bne.n	8028cfa <_vfiprintf_r+0x176>
 8028ce0:	7863      	ldrb	r3, [r4, #1]
 8028ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8028ce4:	d135      	bne.n	8028d52 <_vfiprintf_r+0x1ce>
 8028ce6:	9b03      	ldr	r3, [sp, #12]
 8028ce8:	1d1a      	adds	r2, r3, #4
 8028cea:	681b      	ldr	r3, [r3, #0]
 8028cec:	9203      	str	r2, [sp, #12]
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	bfb8      	it	lt
 8028cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8028cf6:	3402      	adds	r4, #2
 8028cf8:	9305      	str	r3, [sp, #20]
 8028cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028de0 <_vfiprintf_r+0x25c>
 8028cfe:	7821      	ldrb	r1, [r4, #0]
 8028d00:	2203      	movs	r2, #3
 8028d02:	4650      	mov	r0, sl
 8028d04:	f7d7 fa9c 	bl	8000240 <memchr>
 8028d08:	b140      	cbz	r0, 8028d1c <_vfiprintf_r+0x198>
 8028d0a:	2340      	movs	r3, #64	; 0x40
 8028d0c:	eba0 000a 	sub.w	r0, r0, sl
 8028d10:	fa03 f000 	lsl.w	r0, r3, r0
 8028d14:	9b04      	ldr	r3, [sp, #16]
 8028d16:	4303      	orrs	r3, r0
 8028d18:	3401      	adds	r4, #1
 8028d1a:	9304      	str	r3, [sp, #16]
 8028d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d20:	482c      	ldr	r0, [pc, #176]	; (8028dd4 <_vfiprintf_r+0x250>)
 8028d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028d26:	2206      	movs	r2, #6
 8028d28:	f7d7 fa8a 	bl	8000240 <memchr>
 8028d2c:	2800      	cmp	r0, #0
 8028d2e:	d03f      	beq.n	8028db0 <_vfiprintf_r+0x22c>
 8028d30:	4b29      	ldr	r3, [pc, #164]	; (8028dd8 <_vfiprintf_r+0x254>)
 8028d32:	bb1b      	cbnz	r3, 8028d7c <_vfiprintf_r+0x1f8>
 8028d34:	9b03      	ldr	r3, [sp, #12]
 8028d36:	3307      	adds	r3, #7
 8028d38:	f023 0307 	bic.w	r3, r3, #7
 8028d3c:	3308      	adds	r3, #8
 8028d3e:	9303      	str	r3, [sp, #12]
 8028d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d42:	443b      	add	r3, r7
 8028d44:	9309      	str	r3, [sp, #36]	; 0x24
 8028d46:	e767      	b.n	8028c18 <_vfiprintf_r+0x94>
 8028d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d4c:	460c      	mov	r4, r1
 8028d4e:	2001      	movs	r0, #1
 8028d50:	e7a5      	b.n	8028c9e <_vfiprintf_r+0x11a>
 8028d52:	2300      	movs	r3, #0
 8028d54:	3401      	adds	r4, #1
 8028d56:	9305      	str	r3, [sp, #20]
 8028d58:	4619      	mov	r1, r3
 8028d5a:	f04f 0c0a 	mov.w	ip, #10
 8028d5e:	4620      	mov	r0, r4
 8028d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028d64:	3a30      	subs	r2, #48	; 0x30
 8028d66:	2a09      	cmp	r2, #9
 8028d68:	d903      	bls.n	8028d72 <_vfiprintf_r+0x1ee>
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	d0c5      	beq.n	8028cfa <_vfiprintf_r+0x176>
 8028d6e:	9105      	str	r1, [sp, #20]
 8028d70:	e7c3      	b.n	8028cfa <_vfiprintf_r+0x176>
 8028d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8028d76:	4604      	mov	r4, r0
 8028d78:	2301      	movs	r3, #1
 8028d7a:	e7f0      	b.n	8028d5e <_vfiprintf_r+0x1da>
 8028d7c:	ab03      	add	r3, sp, #12
 8028d7e:	9300      	str	r3, [sp, #0]
 8028d80:	462a      	mov	r2, r5
 8028d82:	4b16      	ldr	r3, [pc, #88]	; (8028ddc <_vfiprintf_r+0x258>)
 8028d84:	a904      	add	r1, sp, #16
 8028d86:	4630      	mov	r0, r6
 8028d88:	f3af 8000 	nop.w
 8028d8c:	4607      	mov	r7, r0
 8028d8e:	1c78      	adds	r0, r7, #1
 8028d90:	d1d6      	bne.n	8028d40 <_vfiprintf_r+0x1bc>
 8028d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028d94:	07d9      	lsls	r1, r3, #31
 8028d96:	d405      	bmi.n	8028da4 <_vfiprintf_r+0x220>
 8028d98:	89ab      	ldrh	r3, [r5, #12]
 8028d9a:	059a      	lsls	r2, r3, #22
 8028d9c:	d402      	bmi.n	8028da4 <_vfiprintf_r+0x220>
 8028d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028da0:	f000 fcf8 	bl	8029794 <__retarget_lock_release_recursive>
 8028da4:	89ab      	ldrh	r3, [r5, #12]
 8028da6:	065b      	lsls	r3, r3, #25
 8028da8:	f53f af12 	bmi.w	8028bd0 <_vfiprintf_r+0x4c>
 8028dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028dae:	e711      	b.n	8028bd4 <_vfiprintf_r+0x50>
 8028db0:	ab03      	add	r3, sp, #12
 8028db2:	9300      	str	r3, [sp, #0]
 8028db4:	462a      	mov	r2, r5
 8028db6:	4b09      	ldr	r3, [pc, #36]	; (8028ddc <_vfiprintf_r+0x258>)
 8028db8:	a904      	add	r1, sp, #16
 8028dba:	4630      	mov	r0, r6
 8028dbc:	f000 f880 	bl	8028ec0 <_printf_i>
 8028dc0:	e7e4      	b.n	8028d8c <_vfiprintf_r+0x208>
 8028dc2:	bf00      	nop
 8028dc4:	0802d71c 	.word	0x0802d71c
 8028dc8:	0802d73c 	.word	0x0802d73c
 8028dcc:	0802d6fc 	.word	0x0802d6fc
 8028dd0:	0802d6c4 	.word	0x0802d6c4
 8028dd4:	0802d6ce 	.word	0x0802d6ce
 8028dd8:	00000000 	.word	0x00000000
 8028ddc:	08028b5f 	.word	0x08028b5f
 8028de0:	0802d6ca 	.word	0x0802d6ca

08028de4 <_printf_common>:
 8028de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028de8:	4616      	mov	r6, r2
 8028dea:	4699      	mov	r9, r3
 8028dec:	688a      	ldr	r2, [r1, #8]
 8028dee:	690b      	ldr	r3, [r1, #16]
 8028df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028df4:	4293      	cmp	r3, r2
 8028df6:	bfb8      	it	lt
 8028df8:	4613      	movlt	r3, r2
 8028dfa:	6033      	str	r3, [r6, #0]
 8028dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028e00:	4607      	mov	r7, r0
 8028e02:	460c      	mov	r4, r1
 8028e04:	b10a      	cbz	r2, 8028e0a <_printf_common+0x26>
 8028e06:	3301      	adds	r3, #1
 8028e08:	6033      	str	r3, [r6, #0]
 8028e0a:	6823      	ldr	r3, [r4, #0]
 8028e0c:	0699      	lsls	r1, r3, #26
 8028e0e:	bf42      	ittt	mi
 8028e10:	6833      	ldrmi	r3, [r6, #0]
 8028e12:	3302      	addmi	r3, #2
 8028e14:	6033      	strmi	r3, [r6, #0]
 8028e16:	6825      	ldr	r5, [r4, #0]
 8028e18:	f015 0506 	ands.w	r5, r5, #6
 8028e1c:	d106      	bne.n	8028e2c <_printf_common+0x48>
 8028e1e:	f104 0a19 	add.w	sl, r4, #25
 8028e22:	68e3      	ldr	r3, [r4, #12]
 8028e24:	6832      	ldr	r2, [r6, #0]
 8028e26:	1a9b      	subs	r3, r3, r2
 8028e28:	42ab      	cmp	r3, r5
 8028e2a:	dc26      	bgt.n	8028e7a <_printf_common+0x96>
 8028e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028e30:	1e13      	subs	r3, r2, #0
 8028e32:	6822      	ldr	r2, [r4, #0]
 8028e34:	bf18      	it	ne
 8028e36:	2301      	movne	r3, #1
 8028e38:	0692      	lsls	r2, r2, #26
 8028e3a:	d42b      	bmi.n	8028e94 <_printf_common+0xb0>
 8028e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028e40:	4649      	mov	r1, r9
 8028e42:	4638      	mov	r0, r7
 8028e44:	47c0      	blx	r8
 8028e46:	3001      	adds	r0, #1
 8028e48:	d01e      	beq.n	8028e88 <_printf_common+0xa4>
 8028e4a:	6823      	ldr	r3, [r4, #0]
 8028e4c:	68e5      	ldr	r5, [r4, #12]
 8028e4e:	6832      	ldr	r2, [r6, #0]
 8028e50:	f003 0306 	and.w	r3, r3, #6
 8028e54:	2b04      	cmp	r3, #4
 8028e56:	bf08      	it	eq
 8028e58:	1aad      	subeq	r5, r5, r2
 8028e5a:	68a3      	ldr	r3, [r4, #8]
 8028e5c:	6922      	ldr	r2, [r4, #16]
 8028e5e:	bf0c      	ite	eq
 8028e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028e64:	2500      	movne	r5, #0
 8028e66:	4293      	cmp	r3, r2
 8028e68:	bfc4      	itt	gt
 8028e6a:	1a9b      	subgt	r3, r3, r2
 8028e6c:	18ed      	addgt	r5, r5, r3
 8028e6e:	2600      	movs	r6, #0
 8028e70:	341a      	adds	r4, #26
 8028e72:	42b5      	cmp	r5, r6
 8028e74:	d11a      	bne.n	8028eac <_printf_common+0xc8>
 8028e76:	2000      	movs	r0, #0
 8028e78:	e008      	b.n	8028e8c <_printf_common+0xa8>
 8028e7a:	2301      	movs	r3, #1
 8028e7c:	4652      	mov	r2, sl
 8028e7e:	4649      	mov	r1, r9
 8028e80:	4638      	mov	r0, r7
 8028e82:	47c0      	blx	r8
 8028e84:	3001      	adds	r0, #1
 8028e86:	d103      	bne.n	8028e90 <_printf_common+0xac>
 8028e88:	f04f 30ff 	mov.w	r0, #4294967295
 8028e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e90:	3501      	adds	r5, #1
 8028e92:	e7c6      	b.n	8028e22 <_printf_common+0x3e>
 8028e94:	18e1      	adds	r1, r4, r3
 8028e96:	1c5a      	adds	r2, r3, #1
 8028e98:	2030      	movs	r0, #48	; 0x30
 8028e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028e9e:	4422      	add	r2, r4
 8028ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028ea8:	3302      	adds	r3, #2
 8028eaa:	e7c7      	b.n	8028e3c <_printf_common+0x58>
 8028eac:	2301      	movs	r3, #1
 8028eae:	4622      	mov	r2, r4
 8028eb0:	4649      	mov	r1, r9
 8028eb2:	4638      	mov	r0, r7
 8028eb4:	47c0      	blx	r8
 8028eb6:	3001      	adds	r0, #1
 8028eb8:	d0e6      	beq.n	8028e88 <_printf_common+0xa4>
 8028eba:	3601      	adds	r6, #1
 8028ebc:	e7d9      	b.n	8028e72 <_printf_common+0x8e>
	...

08028ec0 <_printf_i>:
 8028ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028ec4:	7e0f      	ldrb	r7, [r1, #24]
 8028ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028ec8:	2f78      	cmp	r7, #120	; 0x78
 8028eca:	4691      	mov	r9, r2
 8028ecc:	4680      	mov	r8, r0
 8028ece:	460c      	mov	r4, r1
 8028ed0:	469a      	mov	sl, r3
 8028ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028ed6:	d807      	bhi.n	8028ee8 <_printf_i+0x28>
 8028ed8:	2f62      	cmp	r7, #98	; 0x62
 8028eda:	d80a      	bhi.n	8028ef2 <_printf_i+0x32>
 8028edc:	2f00      	cmp	r7, #0
 8028ede:	f000 80d8 	beq.w	8029092 <_printf_i+0x1d2>
 8028ee2:	2f58      	cmp	r7, #88	; 0x58
 8028ee4:	f000 80a3 	beq.w	802902e <_printf_i+0x16e>
 8028ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028ef0:	e03a      	b.n	8028f68 <_printf_i+0xa8>
 8028ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028ef6:	2b15      	cmp	r3, #21
 8028ef8:	d8f6      	bhi.n	8028ee8 <_printf_i+0x28>
 8028efa:	a101      	add	r1, pc, #4	; (adr r1, 8028f00 <_printf_i+0x40>)
 8028efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028f00:	08028f59 	.word	0x08028f59
 8028f04:	08028f6d 	.word	0x08028f6d
 8028f08:	08028ee9 	.word	0x08028ee9
 8028f0c:	08028ee9 	.word	0x08028ee9
 8028f10:	08028ee9 	.word	0x08028ee9
 8028f14:	08028ee9 	.word	0x08028ee9
 8028f18:	08028f6d 	.word	0x08028f6d
 8028f1c:	08028ee9 	.word	0x08028ee9
 8028f20:	08028ee9 	.word	0x08028ee9
 8028f24:	08028ee9 	.word	0x08028ee9
 8028f28:	08028ee9 	.word	0x08028ee9
 8028f2c:	08029079 	.word	0x08029079
 8028f30:	08028f9d 	.word	0x08028f9d
 8028f34:	0802905b 	.word	0x0802905b
 8028f38:	08028ee9 	.word	0x08028ee9
 8028f3c:	08028ee9 	.word	0x08028ee9
 8028f40:	0802909b 	.word	0x0802909b
 8028f44:	08028ee9 	.word	0x08028ee9
 8028f48:	08028f9d 	.word	0x08028f9d
 8028f4c:	08028ee9 	.word	0x08028ee9
 8028f50:	08028ee9 	.word	0x08028ee9
 8028f54:	08029063 	.word	0x08029063
 8028f58:	682b      	ldr	r3, [r5, #0]
 8028f5a:	1d1a      	adds	r2, r3, #4
 8028f5c:	681b      	ldr	r3, [r3, #0]
 8028f5e:	602a      	str	r2, [r5, #0]
 8028f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028f68:	2301      	movs	r3, #1
 8028f6a:	e0a3      	b.n	80290b4 <_printf_i+0x1f4>
 8028f6c:	6820      	ldr	r0, [r4, #0]
 8028f6e:	6829      	ldr	r1, [r5, #0]
 8028f70:	0606      	lsls	r6, r0, #24
 8028f72:	f101 0304 	add.w	r3, r1, #4
 8028f76:	d50a      	bpl.n	8028f8e <_printf_i+0xce>
 8028f78:	680e      	ldr	r6, [r1, #0]
 8028f7a:	602b      	str	r3, [r5, #0]
 8028f7c:	2e00      	cmp	r6, #0
 8028f7e:	da03      	bge.n	8028f88 <_printf_i+0xc8>
 8028f80:	232d      	movs	r3, #45	; 0x2d
 8028f82:	4276      	negs	r6, r6
 8028f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028f88:	485e      	ldr	r0, [pc, #376]	; (8029104 <_printf_i+0x244>)
 8028f8a:	230a      	movs	r3, #10
 8028f8c:	e019      	b.n	8028fc2 <_printf_i+0x102>
 8028f8e:	680e      	ldr	r6, [r1, #0]
 8028f90:	602b      	str	r3, [r5, #0]
 8028f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028f96:	bf18      	it	ne
 8028f98:	b236      	sxthne	r6, r6
 8028f9a:	e7ef      	b.n	8028f7c <_printf_i+0xbc>
 8028f9c:	682b      	ldr	r3, [r5, #0]
 8028f9e:	6820      	ldr	r0, [r4, #0]
 8028fa0:	1d19      	adds	r1, r3, #4
 8028fa2:	6029      	str	r1, [r5, #0]
 8028fa4:	0601      	lsls	r1, r0, #24
 8028fa6:	d501      	bpl.n	8028fac <_printf_i+0xec>
 8028fa8:	681e      	ldr	r6, [r3, #0]
 8028faa:	e002      	b.n	8028fb2 <_printf_i+0xf2>
 8028fac:	0646      	lsls	r6, r0, #25
 8028fae:	d5fb      	bpl.n	8028fa8 <_printf_i+0xe8>
 8028fb0:	881e      	ldrh	r6, [r3, #0]
 8028fb2:	4854      	ldr	r0, [pc, #336]	; (8029104 <_printf_i+0x244>)
 8028fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8028fb6:	bf0c      	ite	eq
 8028fb8:	2308      	moveq	r3, #8
 8028fba:	230a      	movne	r3, #10
 8028fbc:	2100      	movs	r1, #0
 8028fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028fc2:	6865      	ldr	r5, [r4, #4]
 8028fc4:	60a5      	str	r5, [r4, #8]
 8028fc6:	2d00      	cmp	r5, #0
 8028fc8:	bfa2      	ittt	ge
 8028fca:	6821      	ldrge	r1, [r4, #0]
 8028fcc:	f021 0104 	bicge.w	r1, r1, #4
 8028fd0:	6021      	strge	r1, [r4, #0]
 8028fd2:	b90e      	cbnz	r6, 8028fd8 <_printf_i+0x118>
 8028fd4:	2d00      	cmp	r5, #0
 8028fd6:	d04d      	beq.n	8029074 <_printf_i+0x1b4>
 8028fd8:	4615      	mov	r5, r2
 8028fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8028fde:	fb03 6711 	mls	r7, r3, r1, r6
 8028fe2:	5dc7      	ldrb	r7, [r0, r7]
 8028fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8028fe8:	4637      	mov	r7, r6
 8028fea:	42bb      	cmp	r3, r7
 8028fec:	460e      	mov	r6, r1
 8028fee:	d9f4      	bls.n	8028fda <_printf_i+0x11a>
 8028ff0:	2b08      	cmp	r3, #8
 8028ff2:	d10b      	bne.n	802900c <_printf_i+0x14c>
 8028ff4:	6823      	ldr	r3, [r4, #0]
 8028ff6:	07de      	lsls	r6, r3, #31
 8028ff8:	d508      	bpl.n	802900c <_printf_i+0x14c>
 8028ffa:	6923      	ldr	r3, [r4, #16]
 8028ffc:	6861      	ldr	r1, [r4, #4]
 8028ffe:	4299      	cmp	r1, r3
 8029000:	bfde      	ittt	le
 8029002:	2330      	movle	r3, #48	; 0x30
 8029004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029008:	f105 35ff 	addle.w	r5, r5, #4294967295
 802900c:	1b52      	subs	r2, r2, r5
 802900e:	6122      	str	r2, [r4, #16]
 8029010:	f8cd a000 	str.w	sl, [sp]
 8029014:	464b      	mov	r3, r9
 8029016:	aa03      	add	r2, sp, #12
 8029018:	4621      	mov	r1, r4
 802901a:	4640      	mov	r0, r8
 802901c:	f7ff fee2 	bl	8028de4 <_printf_common>
 8029020:	3001      	adds	r0, #1
 8029022:	d14c      	bne.n	80290be <_printf_i+0x1fe>
 8029024:	f04f 30ff 	mov.w	r0, #4294967295
 8029028:	b004      	add	sp, #16
 802902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802902e:	4835      	ldr	r0, [pc, #212]	; (8029104 <_printf_i+0x244>)
 8029030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029034:	6829      	ldr	r1, [r5, #0]
 8029036:	6823      	ldr	r3, [r4, #0]
 8029038:	f851 6b04 	ldr.w	r6, [r1], #4
 802903c:	6029      	str	r1, [r5, #0]
 802903e:	061d      	lsls	r5, r3, #24
 8029040:	d514      	bpl.n	802906c <_printf_i+0x1ac>
 8029042:	07df      	lsls	r7, r3, #31
 8029044:	bf44      	itt	mi
 8029046:	f043 0320 	orrmi.w	r3, r3, #32
 802904a:	6023      	strmi	r3, [r4, #0]
 802904c:	b91e      	cbnz	r6, 8029056 <_printf_i+0x196>
 802904e:	6823      	ldr	r3, [r4, #0]
 8029050:	f023 0320 	bic.w	r3, r3, #32
 8029054:	6023      	str	r3, [r4, #0]
 8029056:	2310      	movs	r3, #16
 8029058:	e7b0      	b.n	8028fbc <_printf_i+0xfc>
 802905a:	6823      	ldr	r3, [r4, #0]
 802905c:	f043 0320 	orr.w	r3, r3, #32
 8029060:	6023      	str	r3, [r4, #0]
 8029062:	2378      	movs	r3, #120	; 0x78
 8029064:	4828      	ldr	r0, [pc, #160]	; (8029108 <_printf_i+0x248>)
 8029066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802906a:	e7e3      	b.n	8029034 <_printf_i+0x174>
 802906c:	0659      	lsls	r1, r3, #25
 802906e:	bf48      	it	mi
 8029070:	b2b6      	uxthmi	r6, r6
 8029072:	e7e6      	b.n	8029042 <_printf_i+0x182>
 8029074:	4615      	mov	r5, r2
 8029076:	e7bb      	b.n	8028ff0 <_printf_i+0x130>
 8029078:	682b      	ldr	r3, [r5, #0]
 802907a:	6826      	ldr	r6, [r4, #0]
 802907c:	6961      	ldr	r1, [r4, #20]
 802907e:	1d18      	adds	r0, r3, #4
 8029080:	6028      	str	r0, [r5, #0]
 8029082:	0635      	lsls	r5, r6, #24
 8029084:	681b      	ldr	r3, [r3, #0]
 8029086:	d501      	bpl.n	802908c <_printf_i+0x1cc>
 8029088:	6019      	str	r1, [r3, #0]
 802908a:	e002      	b.n	8029092 <_printf_i+0x1d2>
 802908c:	0670      	lsls	r0, r6, #25
 802908e:	d5fb      	bpl.n	8029088 <_printf_i+0x1c8>
 8029090:	8019      	strh	r1, [r3, #0]
 8029092:	2300      	movs	r3, #0
 8029094:	6123      	str	r3, [r4, #16]
 8029096:	4615      	mov	r5, r2
 8029098:	e7ba      	b.n	8029010 <_printf_i+0x150>
 802909a:	682b      	ldr	r3, [r5, #0]
 802909c:	1d1a      	adds	r2, r3, #4
 802909e:	602a      	str	r2, [r5, #0]
 80290a0:	681d      	ldr	r5, [r3, #0]
 80290a2:	6862      	ldr	r2, [r4, #4]
 80290a4:	2100      	movs	r1, #0
 80290a6:	4628      	mov	r0, r5
 80290a8:	f7d7 f8ca 	bl	8000240 <memchr>
 80290ac:	b108      	cbz	r0, 80290b2 <_printf_i+0x1f2>
 80290ae:	1b40      	subs	r0, r0, r5
 80290b0:	6060      	str	r0, [r4, #4]
 80290b2:	6863      	ldr	r3, [r4, #4]
 80290b4:	6123      	str	r3, [r4, #16]
 80290b6:	2300      	movs	r3, #0
 80290b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80290bc:	e7a8      	b.n	8029010 <_printf_i+0x150>
 80290be:	6923      	ldr	r3, [r4, #16]
 80290c0:	462a      	mov	r2, r5
 80290c2:	4649      	mov	r1, r9
 80290c4:	4640      	mov	r0, r8
 80290c6:	47d0      	blx	sl
 80290c8:	3001      	adds	r0, #1
 80290ca:	d0ab      	beq.n	8029024 <_printf_i+0x164>
 80290cc:	6823      	ldr	r3, [r4, #0]
 80290ce:	079b      	lsls	r3, r3, #30
 80290d0:	d413      	bmi.n	80290fa <_printf_i+0x23a>
 80290d2:	68e0      	ldr	r0, [r4, #12]
 80290d4:	9b03      	ldr	r3, [sp, #12]
 80290d6:	4298      	cmp	r0, r3
 80290d8:	bfb8      	it	lt
 80290da:	4618      	movlt	r0, r3
 80290dc:	e7a4      	b.n	8029028 <_printf_i+0x168>
 80290de:	2301      	movs	r3, #1
 80290e0:	4632      	mov	r2, r6
 80290e2:	4649      	mov	r1, r9
 80290e4:	4640      	mov	r0, r8
 80290e6:	47d0      	blx	sl
 80290e8:	3001      	adds	r0, #1
 80290ea:	d09b      	beq.n	8029024 <_printf_i+0x164>
 80290ec:	3501      	adds	r5, #1
 80290ee:	68e3      	ldr	r3, [r4, #12]
 80290f0:	9903      	ldr	r1, [sp, #12]
 80290f2:	1a5b      	subs	r3, r3, r1
 80290f4:	42ab      	cmp	r3, r5
 80290f6:	dcf2      	bgt.n	80290de <_printf_i+0x21e>
 80290f8:	e7eb      	b.n	80290d2 <_printf_i+0x212>
 80290fa:	2500      	movs	r5, #0
 80290fc:	f104 0619 	add.w	r6, r4, #25
 8029100:	e7f5      	b.n	80290ee <_printf_i+0x22e>
 8029102:	bf00      	nop
 8029104:	0802d6d5 	.word	0x0802d6d5
 8029108:	0802d6e6 	.word	0x0802d6e6

0802910c <_sbrk_r>:
 802910c:	b538      	push	{r3, r4, r5, lr}
 802910e:	4d06      	ldr	r5, [pc, #24]	; (8029128 <_sbrk_r+0x1c>)
 8029110:	2300      	movs	r3, #0
 8029112:	4604      	mov	r4, r0
 8029114:	4608      	mov	r0, r1
 8029116:	602b      	str	r3, [r5, #0]
 8029118:	f7d8 fdfa 	bl	8001d10 <_sbrk>
 802911c:	1c43      	adds	r3, r0, #1
 802911e:	d102      	bne.n	8029126 <_sbrk_r+0x1a>
 8029120:	682b      	ldr	r3, [r5, #0]
 8029122:	b103      	cbz	r3, 8029126 <_sbrk_r+0x1a>
 8029124:	6023      	str	r3, [r4, #0]
 8029126:	bd38      	pop	{r3, r4, r5, pc}
 8029128:	2003bfb0 	.word	0x2003bfb0

0802912c <_raise_r>:
 802912c:	291f      	cmp	r1, #31
 802912e:	b538      	push	{r3, r4, r5, lr}
 8029130:	4604      	mov	r4, r0
 8029132:	460d      	mov	r5, r1
 8029134:	d904      	bls.n	8029140 <_raise_r+0x14>
 8029136:	2316      	movs	r3, #22
 8029138:	6003      	str	r3, [r0, #0]
 802913a:	f04f 30ff 	mov.w	r0, #4294967295
 802913e:	bd38      	pop	{r3, r4, r5, pc}
 8029140:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029142:	b112      	cbz	r2, 802914a <_raise_r+0x1e>
 8029144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029148:	b94b      	cbnz	r3, 802915e <_raise_r+0x32>
 802914a:	4620      	mov	r0, r4
 802914c:	f000 f830 	bl	80291b0 <_getpid_r>
 8029150:	462a      	mov	r2, r5
 8029152:	4601      	mov	r1, r0
 8029154:	4620      	mov	r0, r4
 8029156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802915a:	f000 b817 	b.w	802918c <_kill_r>
 802915e:	2b01      	cmp	r3, #1
 8029160:	d00a      	beq.n	8029178 <_raise_r+0x4c>
 8029162:	1c59      	adds	r1, r3, #1
 8029164:	d103      	bne.n	802916e <_raise_r+0x42>
 8029166:	2316      	movs	r3, #22
 8029168:	6003      	str	r3, [r0, #0]
 802916a:	2001      	movs	r0, #1
 802916c:	e7e7      	b.n	802913e <_raise_r+0x12>
 802916e:	2400      	movs	r4, #0
 8029170:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029174:	4628      	mov	r0, r5
 8029176:	4798      	blx	r3
 8029178:	2000      	movs	r0, #0
 802917a:	e7e0      	b.n	802913e <_raise_r+0x12>

0802917c <raise>:
 802917c:	4b02      	ldr	r3, [pc, #8]	; (8029188 <raise+0xc>)
 802917e:	4601      	mov	r1, r0
 8029180:	6818      	ldr	r0, [r3, #0]
 8029182:	f7ff bfd3 	b.w	802912c <_raise_r>
 8029186:	bf00      	nop
 8029188:	200000ac 	.word	0x200000ac

0802918c <_kill_r>:
 802918c:	b538      	push	{r3, r4, r5, lr}
 802918e:	4d07      	ldr	r5, [pc, #28]	; (80291ac <_kill_r+0x20>)
 8029190:	2300      	movs	r3, #0
 8029192:	4604      	mov	r4, r0
 8029194:	4608      	mov	r0, r1
 8029196:	4611      	mov	r1, r2
 8029198:	602b      	str	r3, [r5, #0]
 802919a:	f7d8 fd31 	bl	8001c00 <_kill>
 802919e:	1c43      	adds	r3, r0, #1
 80291a0:	d102      	bne.n	80291a8 <_kill_r+0x1c>
 80291a2:	682b      	ldr	r3, [r5, #0]
 80291a4:	b103      	cbz	r3, 80291a8 <_kill_r+0x1c>
 80291a6:	6023      	str	r3, [r4, #0]
 80291a8:	bd38      	pop	{r3, r4, r5, pc}
 80291aa:	bf00      	nop
 80291ac:	2003bfb0 	.word	0x2003bfb0

080291b0 <_getpid_r>:
 80291b0:	f7d8 bd1e 	b.w	8001bf0 <_getpid>

080291b4 <strncmp>:
 80291b4:	b510      	push	{r4, lr}
 80291b6:	b17a      	cbz	r2, 80291d8 <strncmp+0x24>
 80291b8:	4603      	mov	r3, r0
 80291ba:	3901      	subs	r1, #1
 80291bc:	1884      	adds	r4, r0, r2
 80291be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80291c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80291c6:	4290      	cmp	r0, r2
 80291c8:	d101      	bne.n	80291ce <strncmp+0x1a>
 80291ca:	42a3      	cmp	r3, r4
 80291cc:	d101      	bne.n	80291d2 <strncmp+0x1e>
 80291ce:	1a80      	subs	r0, r0, r2
 80291d0:	bd10      	pop	{r4, pc}
 80291d2:	2800      	cmp	r0, #0
 80291d4:	d1f3      	bne.n	80291be <strncmp+0xa>
 80291d6:	e7fa      	b.n	80291ce <strncmp+0x1a>
 80291d8:	4610      	mov	r0, r2
 80291da:	e7f9      	b.n	80291d0 <strncmp+0x1c>

080291dc <__swbuf_r>:
 80291dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291de:	460e      	mov	r6, r1
 80291e0:	4614      	mov	r4, r2
 80291e2:	4605      	mov	r5, r0
 80291e4:	b118      	cbz	r0, 80291ee <__swbuf_r+0x12>
 80291e6:	6983      	ldr	r3, [r0, #24]
 80291e8:	b90b      	cbnz	r3, 80291ee <__swbuf_r+0x12>
 80291ea:	f000 fa33 	bl	8029654 <__sinit>
 80291ee:	4b21      	ldr	r3, [pc, #132]	; (8029274 <__swbuf_r+0x98>)
 80291f0:	429c      	cmp	r4, r3
 80291f2:	d12b      	bne.n	802924c <__swbuf_r+0x70>
 80291f4:	686c      	ldr	r4, [r5, #4]
 80291f6:	69a3      	ldr	r3, [r4, #24]
 80291f8:	60a3      	str	r3, [r4, #8]
 80291fa:	89a3      	ldrh	r3, [r4, #12]
 80291fc:	071a      	lsls	r2, r3, #28
 80291fe:	d52f      	bpl.n	8029260 <__swbuf_r+0x84>
 8029200:	6923      	ldr	r3, [r4, #16]
 8029202:	b36b      	cbz	r3, 8029260 <__swbuf_r+0x84>
 8029204:	6923      	ldr	r3, [r4, #16]
 8029206:	6820      	ldr	r0, [r4, #0]
 8029208:	1ac0      	subs	r0, r0, r3
 802920a:	6963      	ldr	r3, [r4, #20]
 802920c:	b2f6      	uxtb	r6, r6
 802920e:	4283      	cmp	r3, r0
 8029210:	4637      	mov	r7, r6
 8029212:	dc04      	bgt.n	802921e <__swbuf_r+0x42>
 8029214:	4621      	mov	r1, r4
 8029216:	4628      	mov	r0, r5
 8029218:	f000 f988 	bl	802952c <_fflush_r>
 802921c:	bb30      	cbnz	r0, 802926c <__swbuf_r+0x90>
 802921e:	68a3      	ldr	r3, [r4, #8]
 8029220:	3b01      	subs	r3, #1
 8029222:	60a3      	str	r3, [r4, #8]
 8029224:	6823      	ldr	r3, [r4, #0]
 8029226:	1c5a      	adds	r2, r3, #1
 8029228:	6022      	str	r2, [r4, #0]
 802922a:	701e      	strb	r6, [r3, #0]
 802922c:	6963      	ldr	r3, [r4, #20]
 802922e:	3001      	adds	r0, #1
 8029230:	4283      	cmp	r3, r0
 8029232:	d004      	beq.n	802923e <__swbuf_r+0x62>
 8029234:	89a3      	ldrh	r3, [r4, #12]
 8029236:	07db      	lsls	r3, r3, #31
 8029238:	d506      	bpl.n	8029248 <__swbuf_r+0x6c>
 802923a:	2e0a      	cmp	r6, #10
 802923c:	d104      	bne.n	8029248 <__swbuf_r+0x6c>
 802923e:	4621      	mov	r1, r4
 8029240:	4628      	mov	r0, r5
 8029242:	f000 f973 	bl	802952c <_fflush_r>
 8029246:	b988      	cbnz	r0, 802926c <__swbuf_r+0x90>
 8029248:	4638      	mov	r0, r7
 802924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802924c:	4b0a      	ldr	r3, [pc, #40]	; (8029278 <__swbuf_r+0x9c>)
 802924e:	429c      	cmp	r4, r3
 8029250:	d101      	bne.n	8029256 <__swbuf_r+0x7a>
 8029252:	68ac      	ldr	r4, [r5, #8]
 8029254:	e7cf      	b.n	80291f6 <__swbuf_r+0x1a>
 8029256:	4b09      	ldr	r3, [pc, #36]	; (802927c <__swbuf_r+0xa0>)
 8029258:	429c      	cmp	r4, r3
 802925a:	bf08      	it	eq
 802925c:	68ec      	ldreq	r4, [r5, #12]
 802925e:	e7ca      	b.n	80291f6 <__swbuf_r+0x1a>
 8029260:	4621      	mov	r1, r4
 8029262:	4628      	mov	r0, r5
 8029264:	f000 f80c 	bl	8029280 <__swsetup_r>
 8029268:	2800      	cmp	r0, #0
 802926a:	d0cb      	beq.n	8029204 <__swbuf_r+0x28>
 802926c:	f04f 37ff 	mov.w	r7, #4294967295
 8029270:	e7ea      	b.n	8029248 <__swbuf_r+0x6c>
 8029272:	bf00      	nop
 8029274:	0802d71c 	.word	0x0802d71c
 8029278:	0802d73c 	.word	0x0802d73c
 802927c:	0802d6fc 	.word	0x0802d6fc

08029280 <__swsetup_r>:
 8029280:	4b32      	ldr	r3, [pc, #200]	; (802934c <__swsetup_r+0xcc>)
 8029282:	b570      	push	{r4, r5, r6, lr}
 8029284:	681d      	ldr	r5, [r3, #0]
 8029286:	4606      	mov	r6, r0
 8029288:	460c      	mov	r4, r1
 802928a:	b125      	cbz	r5, 8029296 <__swsetup_r+0x16>
 802928c:	69ab      	ldr	r3, [r5, #24]
 802928e:	b913      	cbnz	r3, 8029296 <__swsetup_r+0x16>
 8029290:	4628      	mov	r0, r5
 8029292:	f000 f9df 	bl	8029654 <__sinit>
 8029296:	4b2e      	ldr	r3, [pc, #184]	; (8029350 <__swsetup_r+0xd0>)
 8029298:	429c      	cmp	r4, r3
 802929a:	d10f      	bne.n	80292bc <__swsetup_r+0x3c>
 802929c:	686c      	ldr	r4, [r5, #4]
 802929e:	89a3      	ldrh	r3, [r4, #12]
 80292a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292a4:	0719      	lsls	r1, r3, #28
 80292a6:	d42c      	bmi.n	8029302 <__swsetup_r+0x82>
 80292a8:	06dd      	lsls	r5, r3, #27
 80292aa:	d411      	bmi.n	80292d0 <__swsetup_r+0x50>
 80292ac:	2309      	movs	r3, #9
 80292ae:	6033      	str	r3, [r6, #0]
 80292b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80292b4:	81a3      	strh	r3, [r4, #12]
 80292b6:	f04f 30ff 	mov.w	r0, #4294967295
 80292ba:	e03e      	b.n	802933a <__swsetup_r+0xba>
 80292bc:	4b25      	ldr	r3, [pc, #148]	; (8029354 <__swsetup_r+0xd4>)
 80292be:	429c      	cmp	r4, r3
 80292c0:	d101      	bne.n	80292c6 <__swsetup_r+0x46>
 80292c2:	68ac      	ldr	r4, [r5, #8]
 80292c4:	e7eb      	b.n	802929e <__swsetup_r+0x1e>
 80292c6:	4b24      	ldr	r3, [pc, #144]	; (8029358 <__swsetup_r+0xd8>)
 80292c8:	429c      	cmp	r4, r3
 80292ca:	bf08      	it	eq
 80292cc:	68ec      	ldreq	r4, [r5, #12]
 80292ce:	e7e6      	b.n	802929e <__swsetup_r+0x1e>
 80292d0:	0758      	lsls	r0, r3, #29
 80292d2:	d512      	bpl.n	80292fa <__swsetup_r+0x7a>
 80292d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80292d6:	b141      	cbz	r1, 80292ea <__swsetup_r+0x6a>
 80292d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80292dc:	4299      	cmp	r1, r3
 80292de:	d002      	beq.n	80292e6 <__swsetup_r+0x66>
 80292e0:	4630      	mov	r0, r6
 80292e2:	f7ff fb45 	bl	8028970 <_free_r>
 80292e6:	2300      	movs	r3, #0
 80292e8:	6363      	str	r3, [r4, #52]	; 0x34
 80292ea:	89a3      	ldrh	r3, [r4, #12]
 80292ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80292f0:	81a3      	strh	r3, [r4, #12]
 80292f2:	2300      	movs	r3, #0
 80292f4:	6063      	str	r3, [r4, #4]
 80292f6:	6923      	ldr	r3, [r4, #16]
 80292f8:	6023      	str	r3, [r4, #0]
 80292fa:	89a3      	ldrh	r3, [r4, #12]
 80292fc:	f043 0308 	orr.w	r3, r3, #8
 8029300:	81a3      	strh	r3, [r4, #12]
 8029302:	6923      	ldr	r3, [r4, #16]
 8029304:	b94b      	cbnz	r3, 802931a <__swsetup_r+0x9a>
 8029306:	89a3      	ldrh	r3, [r4, #12]
 8029308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802930c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029310:	d003      	beq.n	802931a <__swsetup_r+0x9a>
 8029312:	4621      	mov	r1, r4
 8029314:	4630      	mov	r0, r6
 8029316:	f000 fa63 	bl	80297e0 <__smakebuf_r>
 802931a:	89a0      	ldrh	r0, [r4, #12]
 802931c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029320:	f010 0301 	ands.w	r3, r0, #1
 8029324:	d00a      	beq.n	802933c <__swsetup_r+0xbc>
 8029326:	2300      	movs	r3, #0
 8029328:	60a3      	str	r3, [r4, #8]
 802932a:	6963      	ldr	r3, [r4, #20]
 802932c:	425b      	negs	r3, r3
 802932e:	61a3      	str	r3, [r4, #24]
 8029330:	6923      	ldr	r3, [r4, #16]
 8029332:	b943      	cbnz	r3, 8029346 <__swsetup_r+0xc6>
 8029334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029338:	d1ba      	bne.n	80292b0 <__swsetup_r+0x30>
 802933a:	bd70      	pop	{r4, r5, r6, pc}
 802933c:	0781      	lsls	r1, r0, #30
 802933e:	bf58      	it	pl
 8029340:	6963      	ldrpl	r3, [r4, #20]
 8029342:	60a3      	str	r3, [r4, #8]
 8029344:	e7f4      	b.n	8029330 <__swsetup_r+0xb0>
 8029346:	2000      	movs	r0, #0
 8029348:	e7f7      	b.n	802933a <__swsetup_r+0xba>
 802934a:	bf00      	nop
 802934c:	200000ac 	.word	0x200000ac
 8029350:	0802d71c 	.word	0x0802d71c
 8029354:	0802d73c 	.word	0x0802d73c
 8029358:	0802d6fc 	.word	0x0802d6fc

0802935c <__register_exitproc>:
 802935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029360:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802941c <__register_exitproc+0xc0>
 8029364:	4606      	mov	r6, r0
 8029366:	f8d8 0000 	ldr.w	r0, [r8]
 802936a:	461f      	mov	r7, r3
 802936c:	460d      	mov	r5, r1
 802936e:	4691      	mov	r9, r2
 8029370:	f000 fa0e 	bl	8029790 <__retarget_lock_acquire_recursive>
 8029374:	4b25      	ldr	r3, [pc, #148]	; (802940c <__register_exitproc+0xb0>)
 8029376:	681c      	ldr	r4, [r3, #0]
 8029378:	b934      	cbnz	r4, 8029388 <__register_exitproc+0x2c>
 802937a:	4c25      	ldr	r4, [pc, #148]	; (8029410 <__register_exitproc+0xb4>)
 802937c:	601c      	str	r4, [r3, #0]
 802937e:	4b25      	ldr	r3, [pc, #148]	; (8029414 <__register_exitproc+0xb8>)
 8029380:	b113      	cbz	r3, 8029388 <__register_exitproc+0x2c>
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029388:	6863      	ldr	r3, [r4, #4]
 802938a:	2b1f      	cmp	r3, #31
 802938c:	dd07      	ble.n	802939e <__register_exitproc+0x42>
 802938e:	f8d8 0000 	ldr.w	r0, [r8]
 8029392:	f000 f9ff 	bl	8029794 <__retarget_lock_release_recursive>
 8029396:	f04f 30ff 	mov.w	r0, #4294967295
 802939a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802939e:	b34e      	cbz	r6, 80293f4 <__register_exitproc+0x98>
 80293a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80293a4:	b988      	cbnz	r0, 80293ca <__register_exitproc+0x6e>
 80293a6:	4b1c      	ldr	r3, [pc, #112]	; (8029418 <__register_exitproc+0xbc>)
 80293a8:	b923      	cbnz	r3, 80293b4 <__register_exitproc+0x58>
 80293aa:	f8d8 0000 	ldr.w	r0, [r8]
 80293ae:	f000 f9f0 	bl	8029792 <__retarget_lock_release>
 80293b2:	e7f0      	b.n	8029396 <__register_exitproc+0x3a>
 80293b4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80293b8:	f7ff fab4 	bl	8028924 <malloc>
 80293bc:	2800      	cmp	r0, #0
 80293be:	d0f4      	beq.n	80293aa <__register_exitproc+0x4e>
 80293c0:	2300      	movs	r3, #0
 80293c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80293c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80293ca:	6863      	ldr	r3, [r4, #4]
 80293cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80293d0:	2201      	movs	r2, #1
 80293d2:	409a      	lsls	r2, r3
 80293d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80293d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80293dc:	4313      	orrs	r3, r2
 80293de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80293e2:	2e02      	cmp	r6, #2
 80293e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80293e8:	bf02      	ittt	eq
 80293ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80293ee:	4313      	orreq	r3, r2
 80293f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80293f4:	6863      	ldr	r3, [r4, #4]
 80293f6:	f8d8 0000 	ldr.w	r0, [r8]
 80293fa:	1c5a      	adds	r2, r3, #1
 80293fc:	3302      	adds	r3, #2
 80293fe:	6062      	str	r2, [r4, #4]
 8029400:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029404:	f000 f9c6 	bl	8029794 <__retarget_lock_release_recursive>
 8029408:	2000      	movs	r0, #0
 802940a:	e7c6      	b.n	802939a <__register_exitproc+0x3e>
 802940c:	2003bfa8 	.word	0x2003bfa8
 8029410:	2003bf1c 	.word	0x2003bf1c
 8029414:	0802d6f8 	.word	0x0802d6f8
 8029418:	08028925 	.word	0x08028925
 802941c:	20000110 	.word	0x20000110

08029420 <__sflush_r>:
 8029420:	898a      	ldrh	r2, [r1, #12]
 8029422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029426:	4605      	mov	r5, r0
 8029428:	0710      	lsls	r0, r2, #28
 802942a:	460c      	mov	r4, r1
 802942c:	d458      	bmi.n	80294e0 <__sflush_r+0xc0>
 802942e:	684b      	ldr	r3, [r1, #4]
 8029430:	2b00      	cmp	r3, #0
 8029432:	dc05      	bgt.n	8029440 <__sflush_r+0x20>
 8029434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029436:	2b00      	cmp	r3, #0
 8029438:	dc02      	bgt.n	8029440 <__sflush_r+0x20>
 802943a:	2000      	movs	r0, #0
 802943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029442:	2e00      	cmp	r6, #0
 8029444:	d0f9      	beq.n	802943a <__sflush_r+0x1a>
 8029446:	2300      	movs	r3, #0
 8029448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802944c:	682f      	ldr	r7, [r5, #0]
 802944e:	602b      	str	r3, [r5, #0]
 8029450:	d032      	beq.n	80294b8 <__sflush_r+0x98>
 8029452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029454:	89a3      	ldrh	r3, [r4, #12]
 8029456:	075a      	lsls	r2, r3, #29
 8029458:	d505      	bpl.n	8029466 <__sflush_r+0x46>
 802945a:	6863      	ldr	r3, [r4, #4]
 802945c:	1ac0      	subs	r0, r0, r3
 802945e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029460:	b10b      	cbz	r3, 8029466 <__sflush_r+0x46>
 8029462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029464:	1ac0      	subs	r0, r0, r3
 8029466:	2300      	movs	r3, #0
 8029468:	4602      	mov	r2, r0
 802946a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802946c:	6a21      	ldr	r1, [r4, #32]
 802946e:	4628      	mov	r0, r5
 8029470:	47b0      	blx	r6
 8029472:	1c43      	adds	r3, r0, #1
 8029474:	89a3      	ldrh	r3, [r4, #12]
 8029476:	d106      	bne.n	8029486 <__sflush_r+0x66>
 8029478:	6829      	ldr	r1, [r5, #0]
 802947a:	291d      	cmp	r1, #29
 802947c:	d82c      	bhi.n	80294d8 <__sflush_r+0xb8>
 802947e:	4a2a      	ldr	r2, [pc, #168]	; (8029528 <__sflush_r+0x108>)
 8029480:	40ca      	lsrs	r2, r1
 8029482:	07d6      	lsls	r6, r2, #31
 8029484:	d528      	bpl.n	80294d8 <__sflush_r+0xb8>
 8029486:	2200      	movs	r2, #0
 8029488:	6062      	str	r2, [r4, #4]
 802948a:	04d9      	lsls	r1, r3, #19
 802948c:	6922      	ldr	r2, [r4, #16]
 802948e:	6022      	str	r2, [r4, #0]
 8029490:	d504      	bpl.n	802949c <__sflush_r+0x7c>
 8029492:	1c42      	adds	r2, r0, #1
 8029494:	d101      	bne.n	802949a <__sflush_r+0x7a>
 8029496:	682b      	ldr	r3, [r5, #0]
 8029498:	b903      	cbnz	r3, 802949c <__sflush_r+0x7c>
 802949a:	6560      	str	r0, [r4, #84]	; 0x54
 802949c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802949e:	602f      	str	r7, [r5, #0]
 80294a0:	2900      	cmp	r1, #0
 80294a2:	d0ca      	beq.n	802943a <__sflush_r+0x1a>
 80294a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80294a8:	4299      	cmp	r1, r3
 80294aa:	d002      	beq.n	80294b2 <__sflush_r+0x92>
 80294ac:	4628      	mov	r0, r5
 80294ae:	f7ff fa5f 	bl	8028970 <_free_r>
 80294b2:	2000      	movs	r0, #0
 80294b4:	6360      	str	r0, [r4, #52]	; 0x34
 80294b6:	e7c1      	b.n	802943c <__sflush_r+0x1c>
 80294b8:	6a21      	ldr	r1, [r4, #32]
 80294ba:	2301      	movs	r3, #1
 80294bc:	4628      	mov	r0, r5
 80294be:	47b0      	blx	r6
 80294c0:	1c41      	adds	r1, r0, #1
 80294c2:	d1c7      	bne.n	8029454 <__sflush_r+0x34>
 80294c4:	682b      	ldr	r3, [r5, #0]
 80294c6:	2b00      	cmp	r3, #0
 80294c8:	d0c4      	beq.n	8029454 <__sflush_r+0x34>
 80294ca:	2b1d      	cmp	r3, #29
 80294cc:	d001      	beq.n	80294d2 <__sflush_r+0xb2>
 80294ce:	2b16      	cmp	r3, #22
 80294d0:	d101      	bne.n	80294d6 <__sflush_r+0xb6>
 80294d2:	602f      	str	r7, [r5, #0]
 80294d4:	e7b1      	b.n	802943a <__sflush_r+0x1a>
 80294d6:	89a3      	ldrh	r3, [r4, #12]
 80294d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80294dc:	81a3      	strh	r3, [r4, #12]
 80294de:	e7ad      	b.n	802943c <__sflush_r+0x1c>
 80294e0:	690f      	ldr	r7, [r1, #16]
 80294e2:	2f00      	cmp	r7, #0
 80294e4:	d0a9      	beq.n	802943a <__sflush_r+0x1a>
 80294e6:	0793      	lsls	r3, r2, #30
 80294e8:	680e      	ldr	r6, [r1, #0]
 80294ea:	bf08      	it	eq
 80294ec:	694b      	ldreq	r3, [r1, #20]
 80294ee:	600f      	str	r7, [r1, #0]
 80294f0:	bf18      	it	ne
 80294f2:	2300      	movne	r3, #0
 80294f4:	eba6 0807 	sub.w	r8, r6, r7
 80294f8:	608b      	str	r3, [r1, #8]
 80294fa:	f1b8 0f00 	cmp.w	r8, #0
 80294fe:	dd9c      	ble.n	802943a <__sflush_r+0x1a>
 8029500:	6a21      	ldr	r1, [r4, #32]
 8029502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029504:	4643      	mov	r3, r8
 8029506:	463a      	mov	r2, r7
 8029508:	4628      	mov	r0, r5
 802950a:	47b0      	blx	r6
 802950c:	2800      	cmp	r0, #0
 802950e:	dc06      	bgt.n	802951e <__sflush_r+0xfe>
 8029510:	89a3      	ldrh	r3, [r4, #12]
 8029512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029516:	81a3      	strh	r3, [r4, #12]
 8029518:	f04f 30ff 	mov.w	r0, #4294967295
 802951c:	e78e      	b.n	802943c <__sflush_r+0x1c>
 802951e:	4407      	add	r7, r0
 8029520:	eba8 0800 	sub.w	r8, r8, r0
 8029524:	e7e9      	b.n	80294fa <__sflush_r+0xda>
 8029526:	bf00      	nop
 8029528:	20400001 	.word	0x20400001

0802952c <_fflush_r>:
 802952c:	b538      	push	{r3, r4, r5, lr}
 802952e:	690b      	ldr	r3, [r1, #16]
 8029530:	4605      	mov	r5, r0
 8029532:	460c      	mov	r4, r1
 8029534:	b913      	cbnz	r3, 802953c <_fflush_r+0x10>
 8029536:	2500      	movs	r5, #0
 8029538:	4628      	mov	r0, r5
 802953a:	bd38      	pop	{r3, r4, r5, pc}
 802953c:	b118      	cbz	r0, 8029546 <_fflush_r+0x1a>
 802953e:	6983      	ldr	r3, [r0, #24]
 8029540:	b90b      	cbnz	r3, 8029546 <_fflush_r+0x1a>
 8029542:	f000 f887 	bl	8029654 <__sinit>
 8029546:	4b14      	ldr	r3, [pc, #80]	; (8029598 <_fflush_r+0x6c>)
 8029548:	429c      	cmp	r4, r3
 802954a:	d11b      	bne.n	8029584 <_fflush_r+0x58>
 802954c:	686c      	ldr	r4, [r5, #4]
 802954e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029552:	2b00      	cmp	r3, #0
 8029554:	d0ef      	beq.n	8029536 <_fflush_r+0xa>
 8029556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029558:	07d0      	lsls	r0, r2, #31
 802955a:	d404      	bmi.n	8029566 <_fflush_r+0x3a>
 802955c:	0599      	lsls	r1, r3, #22
 802955e:	d402      	bmi.n	8029566 <_fflush_r+0x3a>
 8029560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029562:	f000 f915 	bl	8029790 <__retarget_lock_acquire_recursive>
 8029566:	4628      	mov	r0, r5
 8029568:	4621      	mov	r1, r4
 802956a:	f7ff ff59 	bl	8029420 <__sflush_r>
 802956e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029570:	07da      	lsls	r2, r3, #31
 8029572:	4605      	mov	r5, r0
 8029574:	d4e0      	bmi.n	8029538 <_fflush_r+0xc>
 8029576:	89a3      	ldrh	r3, [r4, #12]
 8029578:	059b      	lsls	r3, r3, #22
 802957a:	d4dd      	bmi.n	8029538 <_fflush_r+0xc>
 802957c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802957e:	f000 f909 	bl	8029794 <__retarget_lock_release_recursive>
 8029582:	e7d9      	b.n	8029538 <_fflush_r+0xc>
 8029584:	4b05      	ldr	r3, [pc, #20]	; (802959c <_fflush_r+0x70>)
 8029586:	429c      	cmp	r4, r3
 8029588:	d101      	bne.n	802958e <_fflush_r+0x62>
 802958a:	68ac      	ldr	r4, [r5, #8]
 802958c:	e7df      	b.n	802954e <_fflush_r+0x22>
 802958e:	4b04      	ldr	r3, [pc, #16]	; (80295a0 <_fflush_r+0x74>)
 8029590:	429c      	cmp	r4, r3
 8029592:	bf08      	it	eq
 8029594:	68ec      	ldreq	r4, [r5, #12]
 8029596:	e7da      	b.n	802954e <_fflush_r+0x22>
 8029598:	0802d71c 	.word	0x0802d71c
 802959c:	0802d73c 	.word	0x0802d73c
 80295a0:	0802d6fc 	.word	0x0802d6fc

080295a4 <std>:
 80295a4:	2300      	movs	r3, #0
 80295a6:	b510      	push	{r4, lr}
 80295a8:	4604      	mov	r4, r0
 80295aa:	e9c0 3300 	strd	r3, r3, [r0]
 80295ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80295b2:	6083      	str	r3, [r0, #8]
 80295b4:	8181      	strh	r1, [r0, #12]
 80295b6:	6643      	str	r3, [r0, #100]	; 0x64
 80295b8:	81c2      	strh	r2, [r0, #14]
 80295ba:	6183      	str	r3, [r0, #24]
 80295bc:	4619      	mov	r1, r3
 80295be:	2208      	movs	r2, #8
 80295c0:	305c      	adds	r0, #92	; 0x5c
 80295c2:	f7ff f9cd 	bl	8028960 <memset>
 80295c6:	4b05      	ldr	r3, [pc, #20]	; (80295dc <std+0x38>)
 80295c8:	6263      	str	r3, [r4, #36]	; 0x24
 80295ca:	4b05      	ldr	r3, [pc, #20]	; (80295e0 <std+0x3c>)
 80295cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80295ce:	4b05      	ldr	r3, [pc, #20]	; (80295e4 <std+0x40>)
 80295d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80295d2:	4b05      	ldr	r3, [pc, #20]	; (80295e8 <std+0x44>)
 80295d4:	6224      	str	r4, [r4, #32]
 80295d6:	6323      	str	r3, [r4, #48]	; 0x30
 80295d8:	bd10      	pop	{r4, pc}
 80295da:	bf00      	nop
 80295dc:	08029879 	.word	0x08029879
 80295e0:	0802989b 	.word	0x0802989b
 80295e4:	080298d3 	.word	0x080298d3
 80295e8:	080298f7 	.word	0x080298f7

080295ec <_cleanup_r>:
 80295ec:	4901      	ldr	r1, [pc, #4]	; (80295f4 <_cleanup_r+0x8>)
 80295ee:	f000 b8af 	b.w	8029750 <_fwalk_reent>
 80295f2:	bf00      	nop
 80295f4:	0802952d 	.word	0x0802952d

080295f8 <__sfmoreglue>:
 80295f8:	b570      	push	{r4, r5, r6, lr}
 80295fa:	2268      	movs	r2, #104	; 0x68
 80295fc:	1e4d      	subs	r5, r1, #1
 80295fe:	4355      	muls	r5, r2
 8029600:	460e      	mov	r6, r1
 8029602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8029606:	f7ff fa1f 	bl	8028a48 <_malloc_r>
 802960a:	4604      	mov	r4, r0
 802960c:	b140      	cbz	r0, 8029620 <__sfmoreglue+0x28>
 802960e:	2100      	movs	r1, #0
 8029610:	e9c0 1600 	strd	r1, r6, [r0]
 8029614:	300c      	adds	r0, #12
 8029616:	60a0      	str	r0, [r4, #8]
 8029618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802961c:	f7ff f9a0 	bl	8028960 <memset>
 8029620:	4620      	mov	r0, r4
 8029622:	bd70      	pop	{r4, r5, r6, pc}

08029624 <__sfp_lock_acquire>:
 8029624:	4801      	ldr	r0, [pc, #4]	; (802962c <__sfp_lock_acquire+0x8>)
 8029626:	f000 b8b3 	b.w	8029790 <__retarget_lock_acquire_recursive>
 802962a:	bf00      	nop
 802962c:	2003bfae 	.word	0x2003bfae

08029630 <__sfp_lock_release>:
 8029630:	4801      	ldr	r0, [pc, #4]	; (8029638 <__sfp_lock_release+0x8>)
 8029632:	f000 b8af 	b.w	8029794 <__retarget_lock_release_recursive>
 8029636:	bf00      	nop
 8029638:	2003bfae 	.word	0x2003bfae

0802963c <__sinit_lock_acquire>:
 802963c:	4801      	ldr	r0, [pc, #4]	; (8029644 <__sinit_lock_acquire+0x8>)
 802963e:	f000 b8a7 	b.w	8029790 <__retarget_lock_acquire_recursive>
 8029642:	bf00      	nop
 8029644:	2003bfaf 	.word	0x2003bfaf

08029648 <__sinit_lock_release>:
 8029648:	4801      	ldr	r0, [pc, #4]	; (8029650 <__sinit_lock_release+0x8>)
 802964a:	f000 b8a3 	b.w	8029794 <__retarget_lock_release_recursive>
 802964e:	bf00      	nop
 8029650:	2003bfaf 	.word	0x2003bfaf

08029654 <__sinit>:
 8029654:	b510      	push	{r4, lr}
 8029656:	4604      	mov	r4, r0
 8029658:	f7ff fff0 	bl	802963c <__sinit_lock_acquire>
 802965c:	69a3      	ldr	r3, [r4, #24]
 802965e:	b11b      	cbz	r3, 8029668 <__sinit+0x14>
 8029660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029664:	f7ff bff0 	b.w	8029648 <__sinit_lock_release>
 8029668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802966c:	6523      	str	r3, [r4, #80]	; 0x50
 802966e:	4b13      	ldr	r3, [pc, #76]	; (80296bc <__sinit+0x68>)
 8029670:	4a13      	ldr	r2, [pc, #76]	; (80296c0 <__sinit+0x6c>)
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	62a2      	str	r2, [r4, #40]	; 0x28
 8029676:	42a3      	cmp	r3, r4
 8029678:	bf04      	itt	eq
 802967a:	2301      	moveq	r3, #1
 802967c:	61a3      	streq	r3, [r4, #24]
 802967e:	4620      	mov	r0, r4
 8029680:	f000 f820 	bl	80296c4 <__sfp>
 8029684:	6060      	str	r0, [r4, #4]
 8029686:	4620      	mov	r0, r4
 8029688:	f000 f81c 	bl	80296c4 <__sfp>
 802968c:	60a0      	str	r0, [r4, #8]
 802968e:	4620      	mov	r0, r4
 8029690:	f000 f818 	bl	80296c4 <__sfp>
 8029694:	2200      	movs	r2, #0
 8029696:	60e0      	str	r0, [r4, #12]
 8029698:	2104      	movs	r1, #4
 802969a:	6860      	ldr	r0, [r4, #4]
 802969c:	f7ff ff82 	bl	80295a4 <std>
 80296a0:	68a0      	ldr	r0, [r4, #8]
 80296a2:	2201      	movs	r2, #1
 80296a4:	2109      	movs	r1, #9
 80296a6:	f7ff ff7d 	bl	80295a4 <std>
 80296aa:	68e0      	ldr	r0, [r4, #12]
 80296ac:	2202      	movs	r2, #2
 80296ae:	2112      	movs	r1, #18
 80296b0:	f7ff ff78 	bl	80295a4 <std>
 80296b4:	2301      	movs	r3, #1
 80296b6:	61a3      	str	r3, [r4, #24]
 80296b8:	e7d2      	b.n	8029660 <__sinit+0xc>
 80296ba:	bf00      	nop
 80296bc:	0802d6c0 	.word	0x0802d6c0
 80296c0:	080295ed 	.word	0x080295ed

080296c4 <__sfp>:
 80296c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296c6:	4607      	mov	r7, r0
 80296c8:	f7ff ffac 	bl	8029624 <__sfp_lock_acquire>
 80296cc:	4b1e      	ldr	r3, [pc, #120]	; (8029748 <__sfp+0x84>)
 80296ce:	681e      	ldr	r6, [r3, #0]
 80296d0:	69b3      	ldr	r3, [r6, #24]
 80296d2:	b913      	cbnz	r3, 80296da <__sfp+0x16>
 80296d4:	4630      	mov	r0, r6
 80296d6:	f7ff ffbd 	bl	8029654 <__sinit>
 80296da:	3648      	adds	r6, #72	; 0x48
 80296dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80296e0:	3b01      	subs	r3, #1
 80296e2:	d503      	bpl.n	80296ec <__sfp+0x28>
 80296e4:	6833      	ldr	r3, [r6, #0]
 80296e6:	b30b      	cbz	r3, 802972c <__sfp+0x68>
 80296e8:	6836      	ldr	r6, [r6, #0]
 80296ea:	e7f7      	b.n	80296dc <__sfp+0x18>
 80296ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80296f0:	b9d5      	cbnz	r5, 8029728 <__sfp+0x64>
 80296f2:	4b16      	ldr	r3, [pc, #88]	; (802974c <__sfp+0x88>)
 80296f4:	60e3      	str	r3, [r4, #12]
 80296f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80296fa:	6665      	str	r5, [r4, #100]	; 0x64
 80296fc:	f000 f847 	bl	802978e <__retarget_lock_init_recursive>
 8029700:	f7ff ff96 	bl	8029630 <__sfp_lock_release>
 8029704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802970c:	6025      	str	r5, [r4, #0]
 802970e:	61a5      	str	r5, [r4, #24]
 8029710:	2208      	movs	r2, #8
 8029712:	4629      	mov	r1, r5
 8029714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029718:	f7ff f922 	bl	8028960 <memset>
 802971c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029724:	4620      	mov	r0, r4
 8029726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029728:	3468      	adds	r4, #104	; 0x68
 802972a:	e7d9      	b.n	80296e0 <__sfp+0x1c>
 802972c:	2104      	movs	r1, #4
 802972e:	4638      	mov	r0, r7
 8029730:	f7ff ff62 	bl	80295f8 <__sfmoreglue>
 8029734:	4604      	mov	r4, r0
 8029736:	6030      	str	r0, [r6, #0]
 8029738:	2800      	cmp	r0, #0
 802973a:	d1d5      	bne.n	80296e8 <__sfp+0x24>
 802973c:	f7ff ff78 	bl	8029630 <__sfp_lock_release>
 8029740:	230c      	movs	r3, #12
 8029742:	603b      	str	r3, [r7, #0]
 8029744:	e7ee      	b.n	8029724 <__sfp+0x60>
 8029746:	bf00      	nop
 8029748:	0802d6c0 	.word	0x0802d6c0
 802974c:	ffff0001 	.word	0xffff0001

08029750 <_fwalk_reent>:
 8029750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029754:	4606      	mov	r6, r0
 8029756:	4688      	mov	r8, r1
 8029758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802975c:	2700      	movs	r7, #0
 802975e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029762:	f1b9 0901 	subs.w	r9, r9, #1
 8029766:	d505      	bpl.n	8029774 <_fwalk_reent+0x24>
 8029768:	6824      	ldr	r4, [r4, #0]
 802976a:	2c00      	cmp	r4, #0
 802976c:	d1f7      	bne.n	802975e <_fwalk_reent+0xe>
 802976e:	4638      	mov	r0, r7
 8029770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029774:	89ab      	ldrh	r3, [r5, #12]
 8029776:	2b01      	cmp	r3, #1
 8029778:	d907      	bls.n	802978a <_fwalk_reent+0x3a>
 802977a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802977e:	3301      	adds	r3, #1
 8029780:	d003      	beq.n	802978a <_fwalk_reent+0x3a>
 8029782:	4629      	mov	r1, r5
 8029784:	4630      	mov	r0, r6
 8029786:	47c0      	blx	r8
 8029788:	4307      	orrs	r7, r0
 802978a:	3568      	adds	r5, #104	; 0x68
 802978c:	e7e9      	b.n	8029762 <_fwalk_reent+0x12>

0802978e <__retarget_lock_init_recursive>:
 802978e:	4770      	bx	lr

08029790 <__retarget_lock_acquire_recursive>:
 8029790:	4770      	bx	lr

08029792 <__retarget_lock_release>:
 8029792:	4770      	bx	lr

08029794 <__retarget_lock_release_recursive>:
 8029794:	4770      	bx	lr

08029796 <__swhatbuf_r>:
 8029796:	b570      	push	{r4, r5, r6, lr}
 8029798:	460e      	mov	r6, r1
 802979a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802979e:	2900      	cmp	r1, #0
 80297a0:	b096      	sub	sp, #88	; 0x58
 80297a2:	4614      	mov	r4, r2
 80297a4:	461d      	mov	r5, r3
 80297a6:	da08      	bge.n	80297ba <__swhatbuf_r+0x24>
 80297a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80297ac:	2200      	movs	r2, #0
 80297ae:	602a      	str	r2, [r5, #0]
 80297b0:	061a      	lsls	r2, r3, #24
 80297b2:	d410      	bmi.n	80297d6 <__swhatbuf_r+0x40>
 80297b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80297b8:	e00e      	b.n	80297d8 <__swhatbuf_r+0x42>
 80297ba:	466a      	mov	r2, sp
 80297bc:	f000 f8c2 	bl	8029944 <_fstat_r>
 80297c0:	2800      	cmp	r0, #0
 80297c2:	dbf1      	blt.n	80297a8 <__swhatbuf_r+0x12>
 80297c4:	9a01      	ldr	r2, [sp, #4]
 80297c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80297ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80297ce:	425a      	negs	r2, r3
 80297d0:	415a      	adcs	r2, r3
 80297d2:	602a      	str	r2, [r5, #0]
 80297d4:	e7ee      	b.n	80297b4 <__swhatbuf_r+0x1e>
 80297d6:	2340      	movs	r3, #64	; 0x40
 80297d8:	2000      	movs	r0, #0
 80297da:	6023      	str	r3, [r4, #0]
 80297dc:	b016      	add	sp, #88	; 0x58
 80297de:	bd70      	pop	{r4, r5, r6, pc}

080297e0 <__smakebuf_r>:
 80297e0:	898b      	ldrh	r3, [r1, #12]
 80297e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80297e4:	079d      	lsls	r5, r3, #30
 80297e6:	4606      	mov	r6, r0
 80297e8:	460c      	mov	r4, r1
 80297ea:	d507      	bpl.n	80297fc <__smakebuf_r+0x1c>
 80297ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80297f0:	6023      	str	r3, [r4, #0]
 80297f2:	6123      	str	r3, [r4, #16]
 80297f4:	2301      	movs	r3, #1
 80297f6:	6163      	str	r3, [r4, #20]
 80297f8:	b002      	add	sp, #8
 80297fa:	bd70      	pop	{r4, r5, r6, pc}
 80297fc:	ab01      	add	r3, sp, #4
 80297fe:	466a      	mov	r2, sp
 8029800:	f7ff ffc9 	bl	8029796 <__swhatbuf_r>
 8029804:	9900      	ldr	r1, [sp, #0]
 8029806:	4605      	mov	r5, r0
 8029808:	4630      	mov	r0, r6
 802980a:	f7ff f91d 	bl	8028a48 <_malloc_r>
 802980e:	b948      	cbnz	r0, 8029824 <__smakebuf_r+0x44>
 8029810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029814:	059a      	lsls	r2, r3, #22
 8029816:	d4ef      	bmi.n	80297f8 <__smakebuf_r+0x18>
 8029818:	f023 0303 	bic.w	r3, r3, #3
 802981c:	f043 0302 	orr.w	r3, r3, #2
 8029820:	81a3      	strh	r3, [r4, #12]
 8029822:	e7e3      	b.n	80297ec <__smakebuf_r+0xc>
 8029824:	4b0d      	ldr	r3, [pc, #52]	; (802985c <__smakebuf_r+0x7c>)
 8029826:	62b3      	str	r3, [r6, #40]	; 0x28
 8029828:	89a3      	ldrh	r3, [r4, #12]
 802982a:	6020      	str	r0, [r4, #0]
 802982c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029830:	81a3      	strh	r3, [r4, #12]
 8029832:	9b00      	ldr	r3, [sp, #0]
 8029834:	6163      	str	r3, [r4, #20]
 8029836:	9b01      	ldr	r3, [sp, #4]
 8029838:	6120      	str	r0, [r4, #16]
 802983a:	b15b      	cbz	r3, 8029854 <__smakebuf_r+0x74>
 802983c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029840:	4630      	mov	r0, r6
 8029842:	f000 f891 	bl	8029968 <_isatty_r>
 8029846:	b128      	cbz	r0, 8029854 <__smakebuf_r+0x74>
 8029848:	89a3      	ldrh	r3, [r4, #12]
 802984a:	f023 0303 	bic.w	r3, r3, #3
 802984e:	f043 0301 	orr.w	r3, r3, #1
 8029852:	81a3      	strh	r3, [r4, #12]
 8029854:	89a0      	ldrh	r0, [r4, #12]
 8029856:	4305      	orrs	r5, r0
 8029858:	81a5      	strh	r5, [r4, #12]
 802985a:	e7cd      	b.n	80297f8 <__smakebuf_r+0x18>
 802985c:	080295ed 	.word	0x080295ed

08029860 <__malloc_lock>:
 8029860:	4801      	ldr	r0, [pc, #4]	; (8029868 <__malloc_lock+0x8>)
 8029862:	f7ff bf95 	b.w	8029790 <__retarget_lock_acquire_recursive>
 8029866:	bf00      	nop
 8029868:	2003bfad 	.word	0x2003bfad

0802986c <__malloc_unlock>:
 802986c:	4801      	ldr	r0, [pc, #4]	; (8029874 <__malloc_unlock+0x8>)
 802986e:	f7ff bf91 	b.w	8029794 <__retarget_lock_release_recursive>
 8029872:	bf00      	nop
 8029874:	2003bfad 	.word	0x2003bfad

08029878 <__sread>:
 8029878:	b510      	push	{r4, lr}
 802987a:	460c      	mov	r4, r1
 802987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029880:	f000 f894 	bl	80299ac <_read_r>
 8029884:	2800      	cmp	r0, #0
 8029886:	bfab      	itete	ge
 8029888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802988a:	89a3      	ldrhlt	r3, [r4, #12]
 802988c:	181b      	addge	r3, r3, r0
 802988e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029892:	bfac      	ite	ge
 8029894:	6563      	strge	r3, [r4, #84]	; 0x54
 8029896:	81a3      	strhlt	r3, [r4, #12]
 8029898:	bd10      	pop	{r4, pc}

0802989a <__swrite>:
 802989a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802989e:	461f      	mov	r7, r3
 80298a0:	898b      	ldrh	r3, [r1, #12]
 80298a2:	05db      	lsls	r3, r3, #23
 80298a4:	4605      	mov	r5, r0
 80298a6:	460c      	mov	r4, r1
 80298a8:	4616      	mov	r6, r2
 80298aa:	d505      	bpl.n	80298b8 <__swrite+0x1e>
 80298ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298b0:	2302      	movs	r3, #2
 80298b2:	2200      	movs	r2, #0
 80298b4:	f000 f868 	bl	8029988 <_lseek_r>
 80298b8:	89a3      	ldrh	r3, [r4, #12]
 80298ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80298be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80298c2:	81a3      	strh	r3, [r4, #12]
 80298c4:	4632      	mov	r2, r6
 80298c6:	463b      	mov	r3, r7
 80298c8:	4628      	mov	r0, r5
 80298ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80298ce:	f000 b817 	b.w	8029900 <_write_r>

080298d2 <__sseek>:
 80298d2:	b510      	push	{r4, lr}
 80298d4:	460c      	mov	r4, r1
 80298d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298da:	f000 f855 	bl	8029988 <_lseek_r>
 80298de:	1c43      	adds	r3, r0, #1
 80298e0:	89a3      	ldrh	r3, [r4, #12]
 80298e2:	bf15      	itete	ne
 80298e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80298e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80298ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80298ee:	81a3      	strheq	r3, [r4, #12]
 80298f0:	bf18      	it	ne
 80298f2:	81a3      	strhne	r3, [r4, #12]
 80298f4:	bd10      	pop	{r4, pc}

080298f6 <__sclose>:
 80298f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298fa:	f000 b813 	b.w	8029924 <_close_r>
	...

08029900 <_write_r>:
 8029900:	b538      	push	{r3, r4, r5, lr}
 8029902:	4d07      	ldr	r5, [pc, #28]	; (8029920 <_write_r+0x20>)
 8029904:	4604      	mov	r4, r0
 8029906:	4608      	mov	r0, r1
 8029908:	4611      	mov	r1, r2
 802990a:	2200      	movs	r2, #0
 802990c:	602a      	str	r2, [r5, #0]
 802990e:	461a      	mov	r2, r3
 8029910:	f7d8 f9ad 	bl	8001c6e <_write>
 8029914:	1c43      	adds	r3, r0, #1
 8029916:	d102      	bne.n	802991e <_write_r+0x1e>
 8029918:	682b      	ldr	r3, [r5, #0]
 802991a:	b103      	cbz	r3, 802991e <_write_r+0x1e>
 802991c:	6023      	str	r3, [r4, #0]
 802991e:	bd38      	pop	{r3, r4, r5, pc}
 8029920:	2003bfb0 	.word	0x2003bfb0

08029924 <_close_r>:
 8029924:	b538      	push	{r3, r4, r5, lr}
 8029926:	4d06      	ldr	r5, [pc, #24]	; (8029940 <_close_r+0x1c>)
 8029928:	2300      	movs	r3, #0
 802992a:	4604      	mov	r4, r0
 802992c:	4608      	mov	r0, r1
 802992e:	602b      	str	r3, [r5, #0]
 8029930:	f7d8 f9b9 	bl	8001ca6 <_close>
 8029934:	1c43      	adds	r3, r0, #1
 8029936:	d102      	bne.n	802993e <_close_r+0x1a>
 8029938:	682b      	ldr	r3, [r5, #0]
 802993a:	b103      	cbz	r3, 802993e <_close_r+0x1a>
 802993c:	6023      	str	r3, [r4, #0]
 802993e:	bd38      	pop	{r3, r4, r5, pc}
 8029940:	2003bfb0 	.word	0x2003bfb0

08029944 <_fstat_r>:
 8029944:	b538      	push	{r3, r4, r5, lr}
 8029946:	4d07      	ldr	r5, [pc, #28]	; (8029964 <_fstat_r+0x20>)
 8029948:	2300      	movs	r3, #0
 802994a:	4604      	mov	r4, r0
 802994c:	4608      	mov	r0, r1
 802994e:	4611      	mov	r1, r2
 8029950:	602b      	str	r3, [r5, #0]
 8029952:	f7d8 f9b4 	bl	8001cbe <_fstat>
 8029956:	1c43      	adds	r3, r0, #1
 8029958:	d102      	bne.n	8029960 <_fstat_r+0x1c>
 802995a:	682b      	ldr	r3, [r5, #0]
 802995c:	b103      	cbz	r3, 8029960 <_fstat_r+0x1c>
 802995e:	6023      	str	r3, [r4, #0]
 8029960:	bd38      	pop	{r3, r4, r5, pc}
 8029962:	bf00      	nop
 8029964:	2003bfb0 	.word	0x2003bfb0

08029968 <_isatty_r>:
 8029968:	b538      	push	{r3, r4, r5, lr}
 802996a:	4d06      	ldr	r5, [pc, #24]	; (8029984 <_isatty_r+0x1c>)
 802996c:	2300      	movs	r3, #0
 802996e:	4604      	mov	r4, r0
 8029970:	4608      	mov	r0, r1
 8029972:	602b      	str	r3, [r5, #0]
 8029974:	f7d8 f9b3 	bl	8001cde <_isatty>
 8029978:	1c43      	adds	r3, r0, #1
 802997a:	d102      	bne.n	8029982 <_isatty_r+0x1a>
 802997c:	682b      	ldr	r3, [r5, #0]
 802997e:	b103      	cbz	r3, 8029982 <_isatty_r+0x1a>
 8029980:	6023      	str	r3, [r4, #0]
 8029982:	bd38      	pop	{r3, r4, r5, pc}
 8029984:	2003bfb0 	.word	0x2003bfb0

08029988 <_lseek_r>:
 8029988:	b538      	push	{r3, r4, r5, lr}
 802998a:	4d07      	ldr	r5, [pc, #28]	; (80299a8 <_lseek_r+0x20>)
 802998c:	4604      	mov	r4, r0
 802998e:	4608      	mov	r0, r1
 8029990:	4611      	mov	r1, r2
 8029992:	2200      	movs	r2, #0
 8029994:	602a      	str	r2, [r5, #0]
 8029996:	461a      	mov	r2, r3
 8029998:	f7d8 f9ac 	bl	8001cf4 <_lseek>
 802999c:	1c43      	adds	r3, r0, #1
 802999e:	d102      	bne.n	80299a6 <_lseek_r+0x1e>
 80299a0:	682b      	ldr	r3, [r5, #0]
 80299a2:	b103      	cbz	r3, 80299a6 <_lseek_r+0x1e>
 80299a4:	6023      	str	r3, [r4, #0]
 80299a6:	bd38      	pop	{r3, r4, r5, pc}
 80299a8:	2003bfb0 	.word	0x2003bfb0

080299ac <_read_r>:
 80299ac:	b538      	push	{r3, r4, r5, lr}
 80299ae:	4d07      	ldr	r5, [pc, #28]	; (80299cc <_read_r+0x20>)
 80299b0:	4604      	mov	r4, r0
 80299b2:	4608      	mov	r0, r1
 80299b4:	4611      	mov	r1, r2
 80299b6:	2200      	movs	r2, #0
 80299b8:	602a      	str	r2, [r5, #0]
 80299ba:	461a      	mov	r2, r3
 80299bc:	f7d8 f93a 	bl	8001c34 <_read>
 80299c0:	1c43      	adds	r3, r0, #1
 80299c2:	d102      	bne.n	80299ca <_read_r+0x1e>
 80299c4:	682b      	ldr	r3, [r5, #0]
 80299c6:	b103      	cbz	r3, 80299ca <_read_r+0x1e>
 80299c8:	6023      	str	r3, [r4, #0]
 80299ca:	bd38      	pop	{r3, r4, r5, pc}
 80299cc:	2003bfb0 	.word	0x2003bfb0

080299d0 <_init>:
 80299d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299d2:	bf00      	nop
 80299d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80299d6:	bc08      	pop	{r3}
 80299d8:	469e      	mov	lr, r3
 80299da:	4770      	bx	lr

080299dc <_fini>:
 80299dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299de:	bf00      	nop
 80299e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80299e2:	bc08      	pop	{r3}
 80299e4:	469e      	mov	lr, r3
 80299e6:	4770      	bx	lr
